# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:11+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../glossary.rst:5
msgid "Glossary"
msgstr "Glosario"

#: ../../glossary.rst:10
msgid "``>>>``"
msgstr "``>>>``"

#: ../../glossary.rst:12
msgid ""
"The default Python prompt of the interactive shell.  Often seen for code "
"examples which can be executed interactively in the interpreter."
msgstr ""
"El prompt Python por defecto de la shell interactiva.  A menudo se ve para "
"ejemplos de código que se pueden ejecutar de forma interactiva en el "
"intérprete."

#: ../../glossary.rst:14
msgid "``...``"
msgstr "``...``"

#: ../../glossary.rst:16
msgid "Can refer to:"
msgstr "Puede referirse a:"

#: ../../glossary.rst:18
msgid ""
"The default Python prompt of the interactive shell when entering the code "
"for an indented code block, when within a pair of matching left and right "
"delimiters (parentheses, square brackets, curly braces or triple quotes), or "
"after specifying a decorator."
msgstr ""
"El prompt de Python por defecto del intérprete de comandos interactivo "
"cuando se introduce el código de un bloque de código sangrado, cuando está "
"dentro de un par de delimitadores izquierdo y derecho coincidentes "
"(paréntesis, corchetes, llaves o comillas triples), o después de especificar "
"un decorador."

#: ../../glossary.rst:23
msgid "The :const:`Ellipsis` built-in constant."
msgstr "La constante incorporada :const:`Ellipsis`."

#: ../../glossary.rst:24
msgid "2to3"
msgstr "2a3"

#: ../../glossary.rst:26
msgid ""
"A tool that tries to convert Python 2.x code to Python 3.x code by handling "
"most of the incompatibilities which can be detected by parsing the source "
"and traversing the parse tree."
msgstr ""
"Una herramienta que intenta convertir código Python 2.x a código Python 3.x "
"tratando la mayoría de las incompatibilidades que pueden detectarse "
"analizando el código fuente y recorriendo el árbol de análisis sintáctico."

#: ../../glossary.rst:30
msgid ""
"2to3 is available in the standard library as :mod:`lib2to3`; a standalone "
"entry point is provided as :file:`Tools/scripts/2to3`.  See :ref:`2to3-"
"reference`."
msgstr ""
"2to3 está disponible en la biblioteca estándar como :mod:`lib2to3`; se "
"proporciona un punto de entrada independiente como :file:`Tools/"
"scripts/2to3`.  Ver :ref:`2to3-reference`."

#: ../../glossary.rst:33
msgid "abstract base class"
msgstr "clase base abstracta"

#: ../../glossary.rst:35
msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy "
"or subtly wrong (for example with :ref:`magic methods <special-lookup>`).  "
"ABCs introduce virtual subclasses, which are classes that don't inherit from "
"a class but are still recognized by :func:`isinstance` and :func:"
"`issubclass`; see the :mod:`abc` module documentation.  Python comes with "
"many built-in ABCs for data structures (in the :mod:`collections.abc` "
"module), numbers (in the :mod:`numbers` module), streams (in the :mod:`io` "
"module), import finders and loaders (in the :mod:`importlib.abc` module).  "
"You can create your own ABCs with the :mod:`abc` module."
msgstr ""
"Las clases base abstractas complementan :term:`duck-typing` proporcionando "
"una forma de definir interfaces cuando otras técnicas como :func:`hasattr` "
"serían torpes o sutilmente erróneas (por ejemplo con :ref:`magic methods "
"<special-lookup>`).  Los ABC introducen subclases virtuales, que son clases "
"que no heredan de una clase pero que siguen siendo reconocidas por :func:"
"`isinstance` y :func:`issubclass`; véase la documentación del módulo :mod:"
"`abc`.  Python viene con muchos ABCs incorporados para estructuras de datos "
"(en el módulo :mod:`collections.abc` ), números (en el módulo :mod:"
"`numbers` ), flujos (en el módulo :mod:`io` ), buscadores y cargadores de "
"importaciones (en el módulo :mod:`importlib.abc` ).  Puedes crear tu propio "
"ABC con el módulo :mod:`abc`."

#: ../../glossary.rst:46
msgid "annotation"
msgstr "anotación"

#: ../../glossary.rst:48
msgid ""
"A label associated with a variable, a class attribute or a function "
"parameter or return value, used by convention as a :term:`type hint`."
msgstr ""
"Etiqueta asociada a una variable, a un atributo de clase o a un parámetro o "
"valor de retorno de una función, utilizada por convención como :term:`type "
"hint`."

#: ../../glossary.rst:52
msgid ""
"Annotations of local variables cannot be accessed at runtime, but "
"annotations of global variables, class attributes, and functions are stored "
"in the :attr:`__annotations__` special attribute of modules, classes, and "
"functions, respectively."
msgstr ""
"No se puede acceder a las anotaciones de variables locales en tiempo de "
"ejecución, pero las anotaciones de variables globales, atributos de clase y "
"funciones se almacenan en el atributo especial :attr:`__annotations__` de "
"módulos, clases y funciones, respectivamente."

#: ../../glossary.rst:58
msgid ""
"See :term:`variable annotation`, :term:`function annotation`, :pep:`484` "
"and :pep:`526`, which describe this functionality. Also see :ref:"
"`annotations-howto` for best practices on working with annotations."
msgstr ""
"Ver :term:`variable annotation`, :term:`function annotation`,  :pep:`484` y :"
"pep:`526`, que describen esta funcionalidad. Ver también :ref:`annotations-"
"howto` para conocer las mejores prácticas para trabajar con anotaciones."

#: ../../glossary.rst:62
msgid "argument"
msgstr "argumento"

#: ../../glossary.rst:64
msgid ""
"A value passed to a :term:`function` (or :term:`method`) when calling the "
"function.  There are two kinds of argument:"
msgstr ""
"Valor que se pasa a una :term:`función` (o :term:`método`) cuando se llama a "
"la función.  Existen dos tipos de argumentos:"

#: ../../glossary.rst:67
msgid ""
":dfn:`keyword argument`: an argument preceded by an identifier (e.g. "
"``name=``) in a function call or passed as a value in a dictionary preceded "
"by ``**``.  For example, ``3`` and ``5`` are both keyword arguments in the "
"following calls to :func:`complex`::"
msgstr ""
":dfn:`argumento de palabra clave`: un argumento precedido de un "
"identificador (por ejemplo, ``name=``) en una llamada a una función o pasado "
"como valor en un diccionario precedido de ``**``.  Por ejemplo, ``3`` y "
"``5`` son argumentos de palabra clave en las siguientes llamadas a :func:"
"`complex`::"

#: ../../glossary.rst:75
msgid ""
":dfn:`positional argument`: an argument that is not a keyword argument. "
"Positional arguments can appear at the beginning of an argument list and/or "
"be passed as elements of an :term:`iterable` preceded by ``*``. For example, "
"``3`` and ``5`` are both positional arguments in the following calls::"
msgstr ""
":dfn:`argumento posicional`: un argumento que no es un argumento de palabra "
"clave. Los argumentos posicionales pueden aparecer al principio de una lista "
"de argumentos y/o pasarse como elementos de un :term:`iterable` precedido "
"por ``*``. Por ejemplo, ``3`` y ``5`` son ambos argumentos posicionales en "
"las siguientes llamadas::"

#: ../../glossary.rst:84
msgid ""
"Arguments are assigned to the named local variables in a function body. See "
"the :ref:`calls` section for the rules governing this assignment. "
"Syntactically, any expression can be used to represent an argument; the "
"evaluated value is assigned to the local variable."
msgstr ""
"Los argumentos se asignan a las variables locales nombradas en el cuerpo de "
"una función. Consulte la sección :ref:`calls` para conocer las reglas que "
"rigen esta asignación. Sintácticamente, se puede utilizar cualquier "
"expresión para representar un argumento; el valor evaluado se asigna a la "
"variable local."

#: ../../glossary.rst:89
msgid ""
"See also the :term:`parameter` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"and :pep:`362`."
msgstr ""
"Ver también la entrada del glosario :term:`parameter`, la pregunta de las "
"FAQ sobre :ref:`la diferencia entre argumentos y parámetros <faq-argument-vs-"
"parameter>`, y :pep:`362`."

#: ../../glossary.rst:92
msgid "asynchronous context manager"
msgstr "gestor de contexto asíncrono"

#: ../../glossary.rst:94
msgid ""
"An object which controls the environment seen in an :keyword:`async with` "
"statement by defining :meth:`~object.__aenter__` and :meth:`~object."
"__aexit__` methods.  Introduced by :pep:`492`."
msgstr ""
"Objeto que controla el entorno visto en una sentencia :keyword:`async with` "
"definiendo los métodos :meth:`~object.__aenter__` y :meth:`~object."
"__aexit__`.  Introducido por :pep:`492`."

#: ../../glossary.rst:97
msgid "asynchronous generator"
msgstr "generador asíncrono"

#: ../../glossary.rst:99
msgid ""
"A function which returns an :term:`asynchronous generator iterator`.  It "
"looks like a coroutine function defined with :keyword:`async def` except "
"that it contains :keyword:`yield` expressions for producing a series of "
"values usable in an :keyword:`async for` loop."
msgstr ""
"Una función que devuelve un :term:`iterador generador asíncrono`.  Se parece "
"a una función coroutine definida con :keyword:`async def` excepto en que "
"contiene expresiones :keyword:`yield` para producir una serie de valores "
"utilizables en un bucle :keyword:`async for`."

#: ../../glossary.rst:104
msgid ""
"Usually refers to an asynchronous generator function, but may refer to an "
"*asynchronous generator iterator* in some contexts.  In cases where the "
"intended meaning isn't clear, using the full terms avoids ambiguity."
msgstr ""
"Normalmente se refiere a una función generadora asíncrona, pero puede "
"referirse a un *iterador generador asíncrono* en algunos contextos.  En los "
"casos en que el significado previsto no está claro, el uso de los términos "
"completos evita la ambigüedad."

#: ../../glossary.rst:108
msgid ""
"An asynchronous generator function may contain :keyword:`await` expressions "
"as well as :keyword:`async for`, and :keyword:`async with` statements."
msgstr ""
"Una función generadora asíncrona puede contener expresiones :keyword:`await` "
"así como sentencias :keyword:`async for`, y :keyword:`async with`."

#: ../../glossary.rst:111
msgid "asynchronous generator iterator"
msgstr "iterador generador asíncrono"

#: ../../glossary.rst:113
msgid "An object created by a :term:`asynchronous generator` function."
msgstr "Objeto creado por una función :term:`generador asíncrono`."

#: ../../glossary.rst:115
msgid ""
"This is an :term:`asynchronous iterator` which when called using the :meth:"
"`~object.__anext__` method returns an awaitable object which will execute "
"the body of the asynchronous generator function until the next :keyword:"
"`yield` expression."
msgstr ""
"Se trata de un :term:`asynchronous iterator` que al ser llamado mediante el "
"método :meth:`~object.__anext__` devuelve un objeto awaitable que ejecutará "
"el cuerpo de la función generadora asíncrona hasta la siguiente expresión :"
"keyword:`yield`."

#: ../../glossary.rst:120
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *asynchronous generator iterator* effectively resumes "
"with another awaitable returned by :meth:`~object.__anext__`, it picks up "
"where it left off.  See :pep:`492` and :pep:`525`."
msgstr ""
"Cada :keyword:`yield` suspende temporalmente el procesamiento, recordando el "
"estado de ejecución de la localización (incluyendo variables locales y try-"
"statements pendientes).  Cuando el *iterador generador asíncrono* se reanuda "
"efectivamente con otro awaitable devuelto por :meth:`~object.__anext__`, lo "
"retoma donde lo dejó.  Ver :pep:`492` y :pep:`525`."

#: ../../glossary.rst:125
msgid "asynchronous iterable"
msgstr "iterable asíncrono"

#: ../../glossary.rst:127
msgid ""
"An object, that can be used in an :keyword:`async for` statement. Must "
"return an :term:`asynchronous iterator` from its :meth:`~object.__aiter__` "
"method.  Introduced by :pep:`492`."
msgstr ""
"Un objeto que puede utilizarse en una sentencia :keyword:`async for`. Debe "
"devolver un :term:`asynchronous iterator` desde su método :meth:`~object."
"__aiter__`.  Introducido por :pep:`492`."

#: ../../glossary.rst:130
msgid "asynchronous iterator"
msgstr "iterador asíncrono"

#: ../../glossary.rst:132
msgid ""
"An object that implements the :meth:`~object.__aiter__` and :meth:`~object."
"__anext__` methods.  :meth:`~object.__anext__` must return an :term:"
"`awaitable` object. :keyword:`async for` resolves the awaitables returned by "
"an asynchronous iterator's :meth:`~object.__anext__` method until it raises "
"a :exc:`StopAsyncIteration` exception.  Introduced by :pep:`492`."
msgstr ""
"Un objeto que implementa los métodos :meth:`~object.__aiter__` y :meth:"
"`~object.__anext__`. :meth:`~object.__anext__` debe devolver un :term:"
"`awaitable` object. :keyword:`async for` resuelve los awaitables devueltos "
"por el método :meth:`~object.__anext__` de un iterador asíncrono hasta que "
"lanza una excepción :exc:`StopAsyncIteration`.  Introducido por :pep:`492`."

#: ../../glossary.rst:137
msgid "attribute"
msgstr "atributo"

#: ../../glossary.rst:139
msgid ""
"A value associated with an object which is usually referenced by name using "
"dotted expressions. For example, if an object *o* has an attribute *a* it "
"would be referenced as *o.a*."
msgstr ""
"Valor asociado a un objeto al que se suele hacer referencia por su nombre "
"utilizando expresiones punteadas. Por ejemplo, si un objeto *o* tiene un "
"atributo *a* se referenciaría como *o.a*."

#: ../../glossary.rst:144
msgid ""
"It is possible to give an object an attribute whose name is not an "
"identifier as defined by :ref:`identifiers`, for example using :func:"
"`setattr`, if the object allows it. Such an attribute will not be accessible "
"using a dotted expression, and would instead need to be retrieved with :func:"
"`getattr`."
msgstr ""
"Es posible dar a un objeto un atributo cuyo nombre no sea un identificador "
"tal y como se define en :ref:`identifiers`, por ejemplo utilizando :func:"
"`setattr`, si el objeto lo permite. Un atributo de este tipo no será "
"accesible utilizando una expresión con puntos, y en su lugar tendría que ser "
"recuperado con :func:`getattr`."

#: ../../glossary.rst:149
msgid "awaitable"
msgstr "awaitable"

#: ../../glossary.rst:151
msgid ""
"An object that can be used in an :keyword:`await` expression.  Can be a :"
"term:`coroutine` or an object with an :meth:`~object.__await__` method. See "
"also :pep:`492`."
msgstr ""
"Un objeto que puede utilizarse en una expresión :keyword:`await`.  Puede ser "
"un :term:`coroutine` o un objeto con un método :meth:`~object.__await__`. "
"Véase también :pep:`492`."

#: ../../glossary.rst:154
msgid "BDFL"
msgstr "BDFL"

#: ../../glossary.rst:156
msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum <https://gvanrossum."
"github.io/>`_, Python's creator."
msgstr ""
"Benevolent Dictator For Life, alias `Guido van Rossum <https://gvanrossum."
"github.io/>`_, creador de Python."

#: ../../glossary.rst:158
msgid "binary file"
msgstr "archivo binario"

#: ../../glossary.rst:160
msgid ""
"A :term:`file object` able to read and write :term:`bytes-like objects "
"<bytes-like object>`. Examples of binary files are files opened in binary "
"mode (``'rb'``, ``'wb'`` or ``'rb+'``), :data:`sys.stdin.buffer <sys."
"stdin>`, :data:`sys.stdout.buffer <sys.stdout>`, and instances of :class:`io."
"BytesIO` and :class:`gzip.GzipFile`."
msgstr ""
"Un :term:`file object` capaz de leer y escribir :term:`bytes-like objects "
"<bytes-like object>`. Ejemplos de archivos binarios son los archivos "
"abiertos en modo binario (``'rb'``, ``'wb'`` o ``'rb+'``), :data:`sys.stdin."
"buffer <sys.stdin>`, :data:`sys.stdout.buffer <sys.stdout>`, e instancias "
"de :class:`io.BytesIO` y :class:`gzip.GzipFile`."

#: ../../glossary.rst:167
msgid ""
"See also :term:`text file` for a file object able to read and write :class:"
"`str` objects."
msgstr ""
"Ver también :term:`text file` para un objeto archivo capaz de leer y "
"escribir objetos :class:`str`."

#: ../../glossary.rst:169
msgid "borrowed reference"
msgstr "referencia prestada"

#: ../../glossary.rst:171
msgid ""
"In Python's C API, a borrowed reference is a reference to an object, where "
"the code using the object does not own the reference. It becomes a dangling "
"pointer if the object is destroyed. For example, a garbage collection can "
"remove the last :term:`strong reference` to the object and so destroy it."
msgstr ""
"En la API C de Python, una referencia prestada es una referencia a un "
"objeto, donde el código que utiliza el objeto no posee la referencia. Se "
"convierte en un puntero colgante si el objeto es destruido. Por ejemplo, una "
"recolección de basura puede eliminar la última :term:`strong reference` al "
"objeto y así destruirlo."

#: ../../glossary.rst:177
msgid ""
"Calling :c:func:`Py_INCREF` on the :term:`borrowed reference` is recommended "
"to convert it to a :term:`strong reference` in-place, except when the object "
"cannot be destroyed before the last usage of the borrowed reference. The :c:"
"func:`Py_NewRef` function can be used to create a new :term:`strong "
"reference`."
msgstr ""
"Se recomienda llamar a :c:func:`Py_INCREF` sobre :term:`borrowed reference` "
"para convertirla en una :term:`strong reference` in situ, excepto cuando el "
"objeto no pueda destruirse antes del último uso de la referencia prestada. "
"La función :c:func:`Py_NewRef` puede utilizarse para crear una nueva :term:"
"`strong reference`."

#: ../../glossary.rst:182
msgid "bytes-like object"
msgstr "objeto tipo byte"

#: ../../glossary.rst:184
msgid ""
"An object that supports the :ref:`bufferobjects` and can export a C-:term:"
"`contiguous` buffer. This includes all :class:`bytes`, :class:`bytearray`, "
"and :class:`array.array` objects, as well as many common :class:`memoryview` "
"objects.  Bytes-like objects can be used for various operations that work "
"with binary data; these include compression, saving to a binary file, and "
"sending over a socket."
msgstr ""
"Un objeto compatible con :ref:`bufferobjects` y que puede exportar un búfer "
"C-:term:`contiguous`. Esto incluye todos los objetos :class:`bytes`, :class:"
"`bytearray` y :class:`array.array`, así como muchos objetos comunes :class:"
"`memoryview`.  Los objetos de tipo Bytes pueden utilizarse para diversas "
"operaciones que trabajan con datos binarios, como la compresión, el "
"almacenamiento en un archivo binario y el envío a través de un socket."

#: ../../glossary.rst:191
msgid ""
"Some operations need the binary data to be mutable.  The documentation often "
"refers to these as \"read-write bytes-like objects\".  Example mutable "
"buffer objects include :class:`bytearray` and a :class:`memoryview` of a :"
"class:`bytearray`. Other operations require the binary data to be stored in "
"immutable objects (\"read-only bytes-like objects\"); examples of these "
"include :class:`bytes` and a :class:`memoryview` of a :class:`bytes` object."
msgstr ""
"Algunas operaciones necesitan que los datos binarios sean mutables.  La "
"documentación suele referirse a ellos como \"objetos tipo bytes de lectura-"
"escritura\".  Algunos ejemplos de objetos de búfer mutables son :class:"
"`bytearray` y un :class:`memoryview` de un :class:`bytearray`. Otras "
"operaciones requieren que los datos binarios se almacenen en objetos "
"inmutables (\"objetos tipo bytes de sólo lectura\"); algunos ejemplos son :"
"class:`bytes` y un :class:`memoryview` de un objeto :class:`bytes`."

#: ../../glossary.rst:199
msgid "bytecode"
msgstr "código de bytes"

#: ../../glossary.rst:201
msgid ""
"Python source code is compiled into bytecode, the internal representation of "
"a Python program in the CPython interpreter.  The bytecode is also cached in "
"``.pyc`` files so that executing the same file is faster the second time "
"(recompilation from source to bytecode can be avoided).  This \"intermediate "
"language\" is said to run on a :term:`virtual machine` that executes the "
"machine code corresponding to each bytecode. Do note that bytecodes are not "
"expected to work between different Python virtual machines, nor to be stable "
"between Python releases."
msgstr ""
"El código fuente de Python se compila en bytecode, la representación interna "
"de un programa Python en el intérprete CPython.  El bytecode también se "
"almacena en caché en archivos ``.pyc`` para que la ejecución del mismo "
"archivo sea más rápida la segunda vez (se puede evitar la recompilación de "
"código fuente a bytecode).  Se dice que este \"lenguaje intermedio\" se "
"ejecuta en una :term:`máquina virtual` que ejecuta el código máquina "
"correspondiente a cada bytecode. Tenga en cuenta que no se espera que los "
"bytecodes funcionen entre diferentes máquinas virtuales de Python, ni que "
"sean estables entre versiones de Python."

#: ../../glossary.rst:211
msgid ""
"A list of bytecode instructions can be found in the documentation for :ref:"
"`the dis module <bytecodes>`."
msgstr ""
"Encontrará una lista de instrucciones de bytecode en la documentación de :"
"ref:`el módulo dis <bytecodes>`."

#: ../../glossary.rst:213
msgid "callable"
msgstr "invocable"

#: ../../glossary.rst:215
msgid ""
"A callable is an object that can be called, possibly with a set of arguments "
"(see :term:`argument`), with the following syntax::"
msgstr ""
"Un callable es un objeto que se puede llamar, posiblemente con un conjunto "
"de argumentos (ver :term:`argument`), con la siguiente sintaxis::"

#: ../../glossary.rst:220
msgid ""
"A :term:`function`, and by extension a :term:`method`, is a callable. An "
"instance of a class that implements the :meth:`~object.__call__` method is "
"also a callable."
msgstr ""
"Una :term:`function`, y por extensión un :term:`method`, es una llamada. Una "
"instancia de una clase que implemente el método :meth:`~object.__call__` "
"también es una llamada."

#: ../../glossary.rst:223
msgid "callback"
msgstr "devolución de llamada"

#: ../../glossary.rst:225
msgid ""
"A subroutine function which is passed as an argument to be executed at some "
"point in the future."
msgstr ""
"Una función de subrutina que se pasa como argumento para que se ejecute en "
"algún momento en el futuro."

#: ../../glossary.rst:227
msgid "class"
msgstr "clase"

#: ../../glossary.rst:229
msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""
"Una plantilla para crear objetos definidos por el usuario. Las definiciones "
"de clase contienen normalmente definiciones de métodos que operan sobre "
"instancias de la clase."

#: ../../glossary.rst:232
msgid "class variable"
msgstr "variable de clase"

#: ../../glossary.rst:234
msgid ""
"A variable defined in a class and intended to be modified only at class "
"level (i.e., not in an instance of the class)."
msgstr ""
"Variable definida en una clase y destinada a ser modificada únicamente a "
"nivel de clase (es decir, no en una instancia de la clase)."

#: ../../glossary.rst:236
msgid "complex number"
msgstr "número complejo"

#: ../../glossary.rst:238
msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're "
"not aware of a need for them, it's almost certain you can safely ignore them."
msgstr ""
"Una extensión del conocido sistema de números reales en el que todos los "
"números se expresan como suma de una parte real y una parte imaginaria. Los "
"números imaginarios son múltiplos reales de la unidad imaginaria (la raíz "
"cuadrada de ``-1``), que suele escribirse``i`` en matemáticas o ``j`` en "
"ingeniería. Python tiene soporte incorporado para los números complejos, que "
"se escriben con esta última notación; la parte imaginaria se escribe con un "
"sufijo``j``, e.g., ``3+1j``.  Para acceder a los equivalentes complejos del "
"módulo :mod:`math`, use :mod:`cmath`.  El uso de números complejos es una "
"característica matemática bastante avanzada. Si no sabe que los necesita, es "
"casi seguro que puede ignorarlos sin problemas."

#: ../../glossary.rst:248
msgid "context manager"
msgstr "gestor de contexto"

#: ../../glossary.rst:250
msgid ""
"An object which controls the environment seen in a :keyword:`with` statement "
"by defining :meth:`~object.__enter__` and :meth:`~object.__exit__` methods. "
"See :pep:`343`."
msgstr ""
"Objeto que controla el entorno visto en una sentencia :keyword:`with` "
"definiendo los métodos :meth:`~object.__enter__` y :meth:`~object.__exit__`. "
"Ver :pep:`343`."

#: ../../glossary.rst:253
msgid "context variable"
msgstr "variable contextual"

#: ../../glossary.rst:255
msgid ""
"A variable which can have different values depending on its context. This is "
"similar to Thread-Local Storage in which each execution thread may have a "
"different value for a variable. However, with context variables, there may "
"be several contexts in one execution thread and the main usage for context "
"variables is to keep track of variables in concurrent asynchronous tasks. "
"See :mod:`contextvars`."
msgstr ""
"Una variable que puede tener diferentes valores dependiendo de su contexto. "
"Esto es similar a Thread-Local Storage en el que cada hilo de ejecución "
"puede tener un valor diferente para una variable. Sin embargo, con las "
"variables de contexto, puede haber varios contextos en un hilo de ejecución "
"y el uso principal de las variables de contexto es mantener un registro de "
"las variables en tareas asíncronas concurrentes. Véase :mod:`contextvars`."

#: ../../glossary.rst:262
msgid "contiguous"
msgstr "contiguo"

#: ../../glossary.rst:266
msgid ""
"A buffer is considered contiguous exactly if it is either *C-contiguous* or "
"*Fortran contiguous*.  Zero-dimensional buffers are C and Fortran "
"contiguous.  In one-dimensional arrays, the items must be laid out in memory "
"next to each other, in order of increasing indexes starting from zero.  In "
"multidimensional C-contiguous arrays, the last index varies the fastest when "
"visiting items in order of memory address.  However, in Fortran contiguous "
"arrays, the first index varies the fastest."
msgstr ""
"Un búfer se considera contiguo exactamente si es *Contiguo en C* o *Contiguo "
"en Fortran*.  Los búferes de dimensión cero son contiguos en C y Fortran.  "
"En las matrices unidimensionales, los elementos deben disponerse en memoria "
"unos junto a otros, en orden de índices crecientes empezando por cero.  En "
"las matrices multidimensionales contiguas de C, el último índice es el que "
"varía más rápidamente al visitar los elementos por orden de dirección de "
"memoria.  Sin embargo, en las matrices contiguas de Fortran, el primer "
"índice es el que varía más rápidamente."

#: ../../glossary.rst:274
msgid "coroutine"
msgstr "coroutine"

#: ../../glossary.rst:276
msgid ""
"Coroutines are a more generalized form of subroutines. Subroutines are "
"entered at one point and exited at another point.  Coroutines can be "
"entered, exited, and resumed at many different points.  They can be "
"implemented with the :keyword:`async def` statement.  See also :pep:`492`."
msgstr ""
"Las coroutines son una forma más generalizada de subrutinas. Las subrutinas "
"se introducen en un punto y se abandonan en otro.  Las coroutines se pueden "
"introducir, salir y reanudar en muchos puntos diferentes.  Pueden "
"implementarse con la sentencia :keyword:`async def`.  Ver también :pep:`492`."

#: ../../glossary.rst:281
msgid "coroutine function"
msgstr "función coroutine"

#: ../../glossary.rst:283
msgid ""
"A function which returns a :term:`coroutine` object.  A coroutine function "
"may be defined with the :keyword:`async def` statement, and may contain :"
"keyword:`await`, :keyword:`async for`, and :keyword:`async with` keywords.  "
"These were introduced by :pep:`492`."
msgstr ""
"Una función que devuelve un objeto :term:`coroutine`.  Una función coroutine "
"puede definirse con la sentencia :keyword:`async def`, y puede contener las "
"palabras clave :keyword:`await`, :keyword:`async for`, y :keyword:`async "
"with`.  Éstas fueron introducidas por :pep:`492`."

#: ../../glossary.rst:288
msgid "CPython"
msgstr "CPython"

#: ../../glossary.rst:290
msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <https://www.python.org>`_.  The term \"CPython\" "
"is used when necessary to distinguish this implementation from others such "
"as Jython or IronPython."
msgstr ""
"La implementación canónica del lenguaje de programación Python, tal y como "
"se distribuye en `python.org <https://www.python.org>`_.  El término "
"\"CPython\" se utiliza cuando es necesario para distinguir esta "
"implementación de otras como Jython o IronPython."

#: ../../glossary.rst:294
msgid "decorator"
msgstr "decorador"

#: ../../glossary.rst:296
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""
"Una función que devuelve otra función, normalmente aplicada como una "
"transformación de función utilizando la sintaxis ``@wrapper``.  Ejemplos "
"comunes de decoradores son :func:`classmethod` y :func:`staticmethod`."

#: ../../glossary.rst:300
msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr ""
"La sintaxis del decorador es meramente azúcar sintáctico, las siguientes dos "
"definiciones de función son semánticamente equivalentes::"

#: ../../glossary.rst:311
msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class "
"definitions <class>` for more about decorators."
msgstr ""
"El mismo concepto existe para las clases, pero su uso es menos frecuente.  "
"Ver la documentación de :ref:`definiciones de funciones <function>` y :ref:"
"`definiciones de clases <class>` para obtener más información sobre los "
"decoradores."

#: ../../glossary.rst:314
msgid "descriptor"
msgstr "descriptor"

#: ../../glossary.rst:316
msgid ""
"Any object which defines the methods :meth:`~object.__get__`, :meth:`~object."
"__set__`, or :meth:`~object.__delete__`. When a class attribute is a "
"descriptor, its special binding behavior is triggered upon attribute "
"lookup.  Normally, using *a.b* to get, set or delete an attribute looks up "
"the object named *b* in the class dictionary for *a*, but if *b* is a "
"descriptor, the respective descriptor method gets called.  Understanding "
"descriptors is a key to a deep understanding of Python because they are the "
"basis for many features including functions, methods, properties, class "
"methods, static methods, and reference to super classes."
msgstr ""
"Cualquier objeto que defina los métodos :meth:`~object.__get__`, :meth:"
"`~object.__set__`, o :meth:`~object.__delete__`. Cuando un atributo de clase "
"es un descriptor, su comportamiento de enlace especial se activa al buscar "
"el atributo.  Normalmente, usar *a.b* para obtener, establecer o borrar un "
"atributo busca el objeto llamado *b* en el diccionario de la clase para *a*, "
"pero si *b* es un descriptor, se llama al método descriptor respectivo.  "
"Entender los descriptores es clave para una comprensión profunda de Python "
"porque son la base de muchas características incluyendo funciones, métodos, "
"propiedades, métodos de clase, métodos estáticos y referencias a superclases."

#: ../../glossary.rst:327
msgid ""
"For more information about descriptors' methods, see :ref:`descriptors` or "
"the :ref:`Descriptor How To Guide <descriptorhowto>`."
msgstr ""
"Para obtener más información sobre los métodos de los descriptores, ver :ref:"
"`descriptors` o la :ref:`Guía práctica de descriptores <descriptorhowto>`."

#: ../../glossary.rst:329
msgid "dictionary"
msgstr "diccionario"

#: ../../glossary.rst:331
msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`~object.__hash__` and :meth:`~object.__eq__` "
"methods. Called a hash in Perl."
msgstr ""
"Una matriz asociativa, donde claves arbitrarias se asignan a valores.  Las "
"claves pueden ser cualquier objeto con los métodos :meth:`~object.__hash__` "
"y :meth:`~object.__eq__`. En Perl se denomina hash."

#: ../../glossary.rst:335
msgid "dictionary comprehension"
msgstr "diccionario comprensión"

#: ../../glossary.rst:337
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a dictionary with the results. ``results = {n: n ** 2 for n in "
"range(10)}`` generates a dictionary containing key ``n`` mapped to value ``n "
"** 2``. See :ref:`comprehensions`."
msgstr ""
"Una forma compacta de procesar todos o parte de los elementos de un iterable "
"y devolver un diccionario con los resultados. ``results = {n: n ** 2 for n "
"in range(10)}`` genera un diccionario que contiene la clave ``n`` asignada "
"al valor ``n ** 2``. Véase :ref:`comprehensions`."

#: ../../glossary.rst:341
msgid "dictionary view"
msgstr "vista de diccionario"

#: ../../glossary.rst:343
msgid ""
"The objects returned from :meth:`dict.keys`, :meth:`dict.values`, and :meth:"
"`dict.items` are called dictionary views. They provide a dynamic view on the "
"dictionary’s entries, which means that when the dictionary changes, the view "
"reflects these changes. To force the dictionary view to become a full list "
"use ``list(dictview)``.  See :ref:`dict-views`."
msgstr ""
"Los objetos devueltos por :meth:`dict.keys`, :meth:`dict.values`, y :meth:"
"`dict.items` se denominan vistas del diccionario. Proporcionan una vista "
"dinámica de las entradas del diccionario, lo que significa que cuando el "
"diccionario cambia, la vista refleja estos cambios. Para forzar que la vista "
"del diccionario se convierta en una lista completa utilice "
"``list(dictview)``.  Ver :ref:`dict-views`."

#: ../../glossary.rst:349
msgid "docstring"
msgstr "docstring"

#: ../../glossary.rst:351
msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`!__doc__` attribute of the enclosing "
"class, function or module.  Since it is available via introspection, it is "
"the canonical place for documentation of the object."
msgstr ""
"Literal de cadena que aparece como primera expresión en una clase, función o "
"módulo.  Aunque se ignora cuando se ejecuta el conjunto, el compilador lo "
"reconoce y lo coloca en el atributo :attr:`!__doc__` de la clase, función o "
"módulo que lo contiene.  Dado que está disponible a través de la "
"introspección, es el lugar canónico para la documentación del objeto."

#: ../../glossary.rst:357
msgid "duck-typing"
msgstr "duck-typing"

#: ../../glossary.rst:359
msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be "
"a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic "
"substitution.  Duck-typing avoids tests using :func:`type` or :func:"
"`isinstance`.  (Note, however, that duck-typing can be complemented with :"
"term:`abstract base classes <abstract base class>`.)  Instead, it typically "
"employs :func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""
"Un estilo de programación que no mira el tipo de un objeto para determinar "
"si tiene la interfaz adecuada; en su lugar, el método o atributo simplemente "
"se llama o se utiliza (\"Si parece un pato y grazna como un pato, debe ser "
"un pato\"). Al hacer hincapié en las interfaces en lugar de en tipos "
"específicos, el código bien diseñado mejora su flexibilidad al permitir la "
"sustitución polimórfica.  La tipificación-pato evita las pruebas que "
"utilizan :func:`type` o :func:`isinstance`. (Observe, sin embargo, que la "
"tipificación-pato puede complementarse con :term:`abstract base classes "
"<abstract base class>`.)  En su lugar, suele emplear pruebas :func:`hasattr` "
"o programación :term:`EAFP`."

#: ../../glossary.rst:368
msgid "EAFP"
msgstr "EAFP"

#: ../../glossary.rst:370
msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""
"Es más fácil pedir perdón que permiso.  Este estilo de codificación común de "
"Python asume la existencia de claves o atributos válidos y captura "
"excepciones si la suposición resulta falsa.  Este estilo limpio y rápido se "
"caracteriza por la presencia de muchas sentencias :keyword:`try` y :keyword:"
"`except`.  La técnica contrasta con el estilo :term:`LBYL` común a muchos "
"otros lenguajes como C."

#: ../../glossary.rst:376
msgid "expression"
msgstr "expresión"

#: ../../glossary.rst:378
msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`while`.  Assignments are also statements, not "
"expressions."
msgstr ""
"Una parte de la sintaxis que puede evaluarse para obtener un valor.  En "
"otras palabras, una expresión es una acumulación de elementos de expresión "
"como literales, nombres, acceso a atributos, operadores o llamadas a "
"funciones que devuelven un valor.  A diferencia de muchos otros lenguajes, "
"no todas las construcciones del lenguaje son expresiones.  También existen :"
"term:`statement` que no pueden utilizarse como expresiones, como :keyword:"
"`while`.  Las asignaciones también son declaraciones, no expresiones."

#: ../../glossary.rst:385
msgid "extension module"
msgstr "módulo de ampliación"

#: ../../glossary.rst:387
msgid ""
"A module written in C or C++, using Python's C API to interact with the core "
"and with user code."
msgstr ""
"Un módulo escrito en C o C++, que utiliza la API C de Python para "
"interactuar con el núcleo y con el código de usuario."

#: ../../glossary.rst:389
msgid "f-string"
msgstr "cadena-f"

#: ../../glossary.rst:391
msgid ""
"String literals prefixed with ``'f'`` or ``'F'`` are commonly called \"f-"
"strings\" which is short for :ref:`formatted string literals <f-strings>`.  "
"See also :pep:`498`."
msgstr ""
"Las cadenas literales prefijadas con ``'f'`` o ``'F'`` se denominan "
"comúnmente \"cadenas-f\", que es la abreviatura de :ref:`formatted string "
"literals <f-strings>`.  Ver también :pep:`498`."

#: ../../glossary.rst:394
msgid "file object"
msgstr "objeto de archivo"

#: ../../glossary.rst:396
msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`!read` "
"or :meth:`!write`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard input/"
"output, in-memory buffers, sockets, pipes, etc.).  File objects are also "
"called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""
"Objeto que expone una API orientada a archivos (con métodos como :meth:`!"
"read` o :meth:`!write`) a un recurso subyacente.  Dependiendo de la forma en "
"que fue creado, un objeto archivo puede mediar el acceso a un archivo real "
"en el disco o a otro tipo de almacenamiento o dispositivo de comunicación "
"(por ejemplo, entrada/salida estándar, búferes en memoria, sockets, "
"tuberías, etc.).  Los objetos archivo también se denominan :dfn:`file-like "
"objects` o :dfn:`streams`."

#: ../../glossary.rst:404
msgid ""
"There are actually three categories of file objects: raw :term:`binary files "
"<binary file>`, buffered :term:`binary files <binary file>` and :term:`text "
"files <text file>`. Their interfaces are defined in the :mod:`io` module.  "
"The canonical way to create a file object is by using the :func:`open` "
"function."
msgstr ""
"En realidad, existen tres categorías de objetos de archivo: raw :term:"
"`archivos binarios <binary file>`, buffered :term:`archivos binarios <binary "
"file>` y :term:`archivos de texto <text file>`. Sus interfaces se definen en "
"el módulo :mod:`io`.  La forma canónica de crear un objeto archivo es "
"utilizando la función :func:`open`."

#: ../../glossary.rst:409
msgid "file-like object"
msgstr "objeto similar a un archivo"

#: ../../glossary.rst:411
msgid "A synonym for :term:`file object`."
msgstr "Un sinónimo de :term:`file object`."

#: ../../glossary.rst:412
msgid "filesystem encoding and error handler"
msgstr "codificación del sistema de archivos y gestión de errores"

#: ../../glossary.rst:414
msgid ""
"Encoding and error handler used by Python to decode bytes from the operating "
"system and encode Unicode to the operating system."
msgstr ""
"Codificación y manejador de errores utilizado por Python para decodificar "
"bytes del sistema operativo y codificar Unicode al sistema operativo."

#: ../../glossary.rst:417
msgid ""
"The filesystem encoding must guarantee to successfully decode all bytes "
"below 128. If the file system encoding fails to provide this guarantee, API "
"functions can raise :exc:`UnicodeError`."
msgstr ""
"La codificación del sistema de ficheros debe garantizar la decodificación "
"correcta de todos los bytes por debajo de 128. Si la codificación del "
"sistema de archivos no ofrece esta garantía, las funciones de la API pueden "
"generar :exc:`UnicodeError`."

#: ../../glossary.rst:421
msgid ""
"The :func:`sys.getfilesystemencoding` and :func:`sys."
"getfilesystemencodeerrors` functions can be used to get the filesystem "
"encoding and error handler."
msgstr ""
"Las funciones :func:`sys.getfilesystemencoding` y :func:`sys."
"getfilesystemencodeerrors` pueden utilizarse para obtener la codificación "
"del sistema de archivos y el controlador de errores."

#: ../../glossary.rst:425
msgid ""
"The :term:`filesystem encoding and error handler` are configured at Python "
"startup by the :c:func:`PyConfig_Read` function: see :c:member:`~PyConfig."
"filesystem_encoding` and :c:member:`~PyConfig.filesystem_errors` members of :"
"c:type:`PyConfig`."
msgstr ""
"La :term:`filesystem encoding and error handler`  se configuran al inicio de "
"Python mediante la función :c:func:`PyConfig_Read`: ver :c:member:`~PyConfig."
"filesystem_encoding` y :c:member:`~PyConfig.filesystem_errors` miembros de :"
"c:type:`PyConfig`."

#: ../../glossary.rst:430
msgid "See also the :term:`locale encoding`."
msgstr "Véase también :term:`locale encoding`."

#: ../../glossary.rst:431
msgid "finder"
msgstr "buscador"

#: ../../glossary.rst:433
msgid ""
"An object that tries to find the :term:`loader` for a module that is being "
"imported."
msgstr ""
"Un objeto que intenta encontrar el :term:`loader` para un módulo que se está "
"importando."

#: ../../glossary.rst:436
msgid ""
"Since Python 3.3, there are two types of finder: :term:`meta path finders "
"<meta path finder>` for use with :data:`sys.meta_path`, and :term:`path "
"entry finders <path entry finder>` for use with :data:`sys.path_hooks`."
msgstr ""
"Desde Python 3.3, existen dos tipos de buscador: :term:`meta path finders "
"<meta path finder>` para su uso con :data:`sys.meta_path`, y :term:`path "
"entry finders <path entry finder>` para su uso con :data:`sys.path_hooks`."

#: ../../glossary.rst:440
msgid "See :pep:`302`, :pep:`420` and :pep:`451` for much more detail."
msgstr "Para más información, ver :pep:`302`, :pep:`420` y :pep:`451`."

#: ../../glossary.rst:441
msgid "floor division"
msgstr "división de suelo"

#: ../../glossary.rst:443
msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""
"División matemática que redondea hacia abajo al entero más próximo. El "
"operador de división por defecto es ``//``.  Por ejemplo, la expresión "
"``11 // 4`` evalúa a ``2`` en contraste con el ``2.75`` devuelto por la "
"división float true. Observe que ``(-11) // 4`` es ``-3`` because that is "
"``-2.75`` redondeado *downward*. Ver :pep:`238`."

#: ../../glossary.rst:448
msgid "function"
msgstr "función"

#: ../../glossary.rst:450
msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more :term:`arguments <argument>` which may be used in the "
"execution of the body. See also :term:`parameter`, :term:`method`, and the :"
"ref:`function` section."
msgstr ""
"Una serie de sentencias que devuelven algún valor a un invocador. También se "
"le pueden pasar cero o más :term:`arguments <argument>` que pueden ser "
"utilizados en la ejecución del cuerpo. Véase también :term:`parameter`, :"
"term:`method` y la sección :ref:`function`."

#: ../../glossary.rst:454
msgid "function annotation"
msgstr "anotación de función"

#: ../../glossary.rst:456
msgid "An :term:`annotation` of a function parameter or return value."
msgstr ""
"Una :term:`annotation` de un parámetro o valor de retorno de una función."

#: ../../glossary.rst:458
msgid ""
"Function annotations are usually used for :term:`type hints <type hint>`: "
"for example, this function is expected to take two :class:`int` arguments "
"and is also expected to have an :class:`int` return value::"
msgstr ""
"Las anotaciones de función se utilizan normalmente para :term:`type hints "
"<type hint>`: por ejemplo, se espera que esta función tome dos argumentos :"
"class:`int` y también se espera que tenga un valor de retorno :class:`int`::"

#: ../../glossary.rst:466
msgid "Function annotation syntax is explained in section :ref:`function`."
msgstr ""
"La sintaxis de las anotaciones de funciones se explica en la sección :ref:"
"`function`."

#: ../../glossary.rst:468
msgid ""
"See :term:`variable annotation` and :pep:`484`, which describe this "
"functionality. Also see :ref:`annotations-howto` for best practices on "
"working with annotations."
msgstr ""
"Ver :term:`variable annotation` y :pep:`484`, que describen esta "
"funcionalidad. Ver también :ref:`annotations-howto` para conocer las mejores "
"prácticas para trabajar con anotaciones."

#: ../../glossary.rst:472
msgid "__future__"
msgstr "__futuro__"

#: ../../glossary.rst:474
msgid ""
"A :ref:`future statement <future>`, ``from __future__ import <feature>``, "
"directs the compiler to compile the current module using syntax or semantics "
"that will become standard in a future release of Python. The :mod:"
"`__future__` module documents the possible values of *feature*.  By "
"importing this module and evaluating its variables, you can see when a new "
"feature was first added to the language and when it will (or did) become the "
"default::"
msgstr ""
"Una sentencia :ref:`future <future>`, ``from __future__ import <feature>``, "
"indica al compilador que compile el módulo actual utilizando la sintaxis o "
"semántica que se convertirá en estándar en una futura versión de Python. El "
"módulo :mod:`__future__` documenta los posibles valores de *feature*.  "
"Importando este módulo y evaluando sus variables, puedes ver cuándo una "
"nueva característica fue añadida por primera vez al lenguaje y cuándo se "
"convertirá (o se convirtió) en la predeterminada::"

#: ../../glossary.rst:485
msgid "garbage collection"
msgstr "recogida de basuras"

#: ../../glossary.rst:487
msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles.  The garbage collector "
"can be controlled using the :mod:`gc` module."
msgstr ""
"El proceso de liberar memoria cuando ya no se utiliza.  Python realiza la "
"recolección de basura mediante el conteo de referencias y un recolector de "
"basura cíclico que es capaz de detectar y romper los ciclos de referencia.  "
"El recolector de basura puede controlarse mediante el módulo :mod:`gc`."

#: ../../glossary.rst:492 ../../glossary.rst:493
msgid "generator"
msgstr "generador"

#: ../../glossary.rst:495
msgid ""
"A function which returns a :term:`generator iterator`.  It looks like a "
"normal function except that it contains :keyword:`yield` expressions for "
"producing a series of values usable in a for-loop or that can be retrieved "
"one at a time with the :func:`next` function."
msgstr ""
"Función que devuelve un :term:`generator iterator`.  Parece una función "
"normal, salvo que contiene expresiones :keyword:`yield` para producir una "
"serie de valores utilizables en un for-loop o que pueden recuperarse de uno "
"en uno con la función :func:`next`."

#: ../../glossary.rst:500
msgid ""
"Usually refers to a generator function, but may refer to a *generator "
"iterator* in some contexts.  In cases where the intended meaning isn't "
"clear, using the full terms avoids ambiguity."
msgstr ""
"Normalmente se refiere a una función generadora, pero puede referirse a un "
"*iterador generador* en algunos contextos.  En los casos en los que el "
"significado previsto no está claro, el uso de los términos completos evita "
"la ambigüedad."

#: ../../glossary.rst:503
msgid "generator iterator"
msgstr "iterador generador"

#: ../../glossary.rst:505
msgid "An object created by a :term:`generator` function."
msgstr "Objeto creado por una :term:`generator` function."

#: ../../glossary.rst:507
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *generator iterator* resumes, it picks up where it "
"left off (in contrast to functions which start fresh on every invocation)."
msgstr ""
"Cada :keyword:`yield` suspende temporalmente el procesamiento, recordando el "
"estado de ejecución de la ubicación (incluyendo variables locales y try-"
"statements pendientes).  Cuando el *generador iterador* se reanuda, lo hace "
"donde lo dejó (en contraste con las funciones que empiezan de cero en cada "
"invocación)."

#: ../../glossary.rst:513 ../../glossary.rst:514
msgid "generator expression"
msgstr "expresión generadora"

#: ../../glossary.rst:516
msgid ""
"An expression that returns an iterator.  It looks like a normal expression "
"followed by a :keyword:`!for` clause defining a loop variable, range, and an "
"optional :keyword:`!if` clause.  The combined expression generates values "
"for an enclosing function::"
msgstr ""
"Expresión que devuelve un iterador.  Parece una expresión normal seguida de "
"una cláusula :keyword:`!for` que define una variable de bucle, un rango y "
"una cláusula opcional :keyword:`!if`.  La expresión combinada genera valores "
"para una función adjunta::"

#: ../../glossary.rst:523
msgid "generic function"
msgstr "función genérica"

#: ../../glossary.rst:525
msgid ""
"A function composed of multiple functions implementing the same operation "
"for different types. Which implementation should be used during a call is "
"determined by the dispatch algorithm."
msgstr ""
"Función compuesta por varias funciones que implementan la misma operación "
"para distintos tipos. El algoritmo de envío determina qué implementación "
"debe utilizarse durante una llamada."

#: ../../glossary.rst:529
msgid ""
"See also the :term:`single dispatch` glossary entry, the :func:`functools."
"singledispatch` decorator, and :pep:`443`."
msgstr ""
"Véase también la entrada del glosario :term:`single dispatch`, el decorador :"
"func:`functools.singledispatch` y :pep:`443`."

#: ../../glossary.rst:531
msgid "generic type"
msgstr "tipo genérico"

#: ../../glossary.rst:533
msgid ""
"A :term:`type` that can be parameterized; typically a :ref:`container "
"class<sequence-types>` such as :class:`list` or :class:`dict`. Used for :"
"term:`type hints <type hint>` and :term:`annotations <annotation>`."
msgstr ""
"Un :term:`type` que puede parametrizarse; normalmente una :ref:`container "
"class<sequence-types>` como :class:`list` o :class:`dict`. Se utiliza para :"
"term:`type hints <type hint>` y :term:`annotations <annotation>`."

#: ../../glossary.rst:538
msgid ""
"For more details, see :ref:`generic alias types<types-genericalias>`, :pep:"
"`483`, :pep:`484`, :pep:`585`, and the :mod:`typing` module."
msgstr ""
"Para más detalles, ver :ref:`generic alias types<types-genericalias>`, :pep:"
"`483`, :pep:`484`, :pep:`585`, y el módulo :mod:`typing`."

#: ../../glossary.rst:540
msgid "GIL"
msgstr "GIL"

#: ../../glossary.rst:542
msgid "See :term:`global interpreter lock`."
msgstr "Ver :term:`global interpreter lock`."

#: ../../glossary.rst:543
msgid "global interpreter lock"
msgstr "bloqueo global del intérprete"

#: ../../glossary.rst:545
msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""
"El mecanismo utilizado por el intérprete :term:`CPython` para asegurar que "
"sólo un hilo ejecuta Python :term:`bytecode` a la vez. Esto simplifica la "
"implementación de CPython haciendo que el modelo de objetos (incluyendo "
"tipos incorporados críticos como :class:`dict`) sea implícitamente seguro "
"contra el acceso concurrente.  El bloqueo de todo el intérprete hace que sea "
"más fácil para el intérprete ser multi-hilo, a expensas de gran parte del "
"paralelismo que ofrecen las máquinas multiprocesador."

#: ../../glossary.rst:554
msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally intensive tasks "
"such as compression or hashing.  Also, the GIL is always released when doing "
"I/O."
msgstr ""
"Sin embargo, algunos módulos de extensión, ya sean estándar o de terceros, "
"están diseñados para liberar el GIL cuando se realizan tareas "
"computacionalmente intensivas como compresión o hashing.  Además, el GIL "
"siempre se libera al realizar E/S."

#: ../../glossary.rst:559
msgid ""
"Past efforts to create a \"free-threaded\" interpreter (one which locks "
"shared data at a much finer granularity) have not been successful because "
"performance suffered in the common single-processor case. It is believed "
"that overcoming this performance issue would make the implementation much "
"more complicated and therefore costlier to maintain."
msgstr ""
"Los intentos anteriores de crear un intérprete \"free-threaded\" (que "
"bloquea los datos compartidos con una granularidad mucho más fina) no han "
"tenido éxito porque el rendimiento se resentía en el caso común de un solo "
"procesador. Se cree que superar este problema de rendimiento haría la "
"implementación mucho más complicada y, por tanto, más costosa de mantener."

#: ../../glossary.rst:565
msgid "hash-based pyc"
msgstr "pyc basado en hash"

#: ../../glossary.rst:567
msgid ""
"A bytecode cache file that uses the hash rather than the last-modified time "
"of the corresponding source file to determine its validity. See :ref:`pyc-"
"invalidation`."
msgstr ""
"Un archivo de caché de bytecode que utiliza el hash en lugar de la hora de "
"última modificación del archivo fuente correspondiente para determinar su "
"validez. Véase :ref:`pyc-invalidation`."

#: ../../glossary.rst:570
msgid "hashable"
msgstr "hashable"

#: ../../glossary.rst:572
msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`~object.__hash__` method), and can be "
"compared to other objects (it needs an :meth:`~object.__eq__` method). "
"Hashable objects which compare equal must have the same hash value."
msgstr ""
"Un objeto es *hashable* si tiene un valor hash que nunca cambia durante su "
"vida (necesita un método :meth:`~object.__hash__` ), y puede ser comparado "
"con otros objetos (necesita un método :meth:`~object.__eq__` ). Los objetos "
"*hashables* que se comparan entre sí deben tener el mismo valor hash."

#: ../../glossary.rst:578
msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""
"La hashabilidad hace que un objeto pueda utilizarse como clave de "
"diccionario y como miembro de un conjunto, ya que estas estructuras de datos "
"utilizan el valor hash internamente."

#: ../../glossary.rst:581
msgid ""
"Most of Python's immutable built-in objects are hashable; mutable containers "
"(such as lists or dictionaries) are not; immutable containers (such as "
"tuples and frozensets) are only hashable if their elements are hashable.  "
"Objects which are instances of user-defined classes are hashable by "
"default.  They all compare unequal (except with themselves), and their hash "
"value is derived from their :func:`id`."
msgstr ""
"La mayoría de los objetos inmutables incorporados en Python son hashables; "
"los contenedores mutables (como listas o diccionarios) no lo son; los "
"contenedores inmutables (como tuplas y frozensets) sólo son hashables si sus "
"elementos son hashables.  Los objetos que son instancias de clases definidas "
"por el usuario son hashables por defecto.  Todos ellos se comparan de forma "
"desigual (excepto consigo mismos), y su valor hash se deriva de su :func:"
"`id`."

#: ../../glossary.rst:588
msgid "IDLE"
msgstr "IDLE"

#: ../../glossary.rst:590
msgid ""
"An Integrated Development and Learning Environment for Python. :ref:`idle` "
"is a basic editor and interpreter environment which ships with the standard "
"distribution of Python."
msgstr ""
"Un Entorno Integrado de Desarrollo y Aprendizaje para Python. :ref:`idle` es "
"un entorno básico de editor e intérprete que viene con la distribución "
"estándar de Python."

#: ../../glossary.rst:593
msgid "immutable"
msgstr "inmutable"

#: ../../glossary.rst:595
msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""
"Objeto con un valor fijo.  Los objetos inmutables incluyen números, cadenas "
"y tuplas.  Un objeto de este tipo no puede modificarse.  Si hay que "
"almacenar un valor diferente, hay que crear un nuevo objeto.  Desempeñan un "
"papel importante en lugares donde se necesita un valor hash constante, por "
"ejemplo como clave en un diccionario."

#: ../../glossary.rst:600
msgid "import path"
msgstr "ruta de importación"

#: ../../glossary.rst:602
msgid ""
"A list of locations (or :term:`path entries <path entry>`) that are searched "
"by the :term:`path based finder` for modules to import. During import, this "
"list of locations usually comes from :data:`sys.path`, but for subpackages "
"it may also come from the parent package's ``__path__`` attribute."
msgstr ""
"Una lista de ubicaciones (o :term:`path entries <path entry>`) que son "
"buscadas por el :term:`path based finder` para módulos a importar. Durante "
"la importación, esta lista de ubicaciones normalmente proviene de :data:`sys."
"path`, pero para los subpaquetes también puede provenir del atributo "
"``__path__`` del paquete padre."

#: ../../glossary.rst:607
msgid "importing"
msgstr "importando"

#: ../../glossary.rst:609
msgid ""
"The process by which Python code in one module is made available to Python "
"code in another module."
msgstr ""
"Proceso por el cual el código Python de un módulo se pone a disposición del "
"código Python de otro módulo."

#: ../../glossary.rst:611
msgid "importer"
msgstr "importador"

#: ../../glossary.rst:613
msgid ""
"An object that both finds and loads a module; both a :term:`finder` and :"
"term:`loader` object."
msgstr ""
"Un objeto que encuentra y carga un módulo; es a la vez un objeto :term:"
"`finder` y :term:`loader`."

#: ../../glossary.rst:615
msgid "interactive"
msgstr "interactivo"

#: ../../glossary.rst:617
msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``)."
msgstr ""
"Python tiene un intérprete interactivo, lo que significa que puedes "
"introducir sentencias y expresiones en el prompt del intérprete, ejecutarlas "
"inmediatamente y ver sus resultados.  Sólo tiene que iniciar ``python`` sin "
"argumentos (posiblemente seleccionándolo en el menú principal de su "
"ordenador). Es una forma muy potente de probar nuevas ideas o inspeccionar "
"módulos y paquetes (recuerde ``help(x)``)."

#: ../../glossary.rst:623
msgid "interpreted"
msgstr "interpretado"

#: ../../glossary.rst:625
msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler.  "
"This means that source files can be run directly without explicitly creating "
"an executable which is then run. Interpreted languages typically have a "
"shorter development/debug cycle than compiled ones, though their programs "
"generally also run more slowly.  See also :term:`interactive`."
msgstr ""
"Python es un lenguaje interpretado, no compilado, aunque la distinción puede "
"ser borrosa debido a la presencia del compilador de código de bytes.  Esto "
"significa que los archivos fuente pueden ejecutarse directamente sin crear "
"explícitamente un ejecutable que luego se ejecute. Los lenguajes "
"interpretados suelen tener un ciclo de desarrollo y depuración más corto que "
"los compilados, aunque sus programas también suelen ejecutarse más "
"lentamente.  Ver :term:`interactive`."

#: ../../glossary.rst:632
msgid "interpreter shutdown"
msgstr "apagado del intérprete"

#: ../../glossary.rst:634
msgid ""
"When asked to shut down, the Python interpreter enters a special phase where "
"it gradually releases all allocated resources, such as modules and various "
"critical internal structures.  It also makes several calls to the :term:"
"`garbage collector <garbage collection>`. This can trigger the execution of "
"code in user-defined destructors or weakref callbacks. Code executed during "
"the shutdown phase can encounter various exceptions as the resources it "
"relies on may not function anymore (common examples are library modules or "
"the warnings machinery)."
msgstr ""
"Cuando se le pide que se apague, el intérprete de Python entra en una fase "
"especial en la que libera gradualmente todos los recursos asignados, como "
"módulos y varias estructuras internas críticas.  También realiza varias "
"llamadas al :term:`recolector de basura <garbage collection>`. Esto puede "
"desencadenar la ejecución de código en destructores definidos por el usuario "
"o callbacks weakref. El código ejecutado durante la fase de apagado puede "
"encontrarse con varias excepciones ya que los recursos en los que confía "
"pueden dejar de funcionar (ejemplos comunes son los módulos de biblioteca o "
"la maquinaria de avisos)."

#: ../../glossary.rst:643
msgid ""
"The main reason for interpreter shutdown is that the ``__main__`` module or "
"the script being run has finished executing."
msgstr ""
"La razón principal del apagado del intérprete es que el módulo ``__main__`` "
"o el script que se está ejecutando ha terminado de ejecutarse."

#: ../../glossary.rst:645
msgid "iterable"
msgstr "iterable"

#: ../../glossary.rst:647
msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict`, :term:"
"`file objects <file object>`, and objects of any classes you define with an :"
"meth:`~iterator.__iter__` method or with a :meth:`~object.__getitem__` "
"method that implements :term:`sequence` semantics."
msgstr ""
"Un objeto capaz de devolver sus miembros de uno en uno. Ejemplos de "
"iterables incluyen todos los tipos de secuencia (como :class:`list`, :class:"
"`str`, y :class:`tuple`) y algunos tipos no-secuencia como :class:`dict`, :"
"term:`file objects <file object>`, y objetos de cualquier clase que defina "
"con un método :meth:`~iterator.__iter__` o con un método :meth:`~object."
"__getitem__` que implemente la semántica :term:`sequence`."

#: ../../glossary.rst:655
msgid ""
"Iterables can be used in a :keyword:`for` loop and in many other places "
"where a sequence is needed (:func:`zip`, :func:`map`, ...).  When an "
"iterable object is passed as an argument to the built-in function :func:"
"`iter`, it returns an iterator for the object.  This iterator is good for "
"one pass over the set of values.  When using iterables, it is usually not "
"necessary to call :func:`iter` or deal with iterator objects yourself.  The :"
"keyword:`for` statement does that automatically for you, creating a "
"temporary unnamed variable to hold the iterator for the duration of the "
"loop.  See also :term:`iterator`, :term:`sequence`, and :term:`generator`."
msgstr ""
"Los iterables pueden utilizarse en un bucle :keyword:`for` y en muchos otros "
"lugares en los que se necesita una secuencia (:func:`zip`, :func:"
"`map`, ...).  Cuando se pasa un objeto iterable como argumento a la función "
"incorporada :func:`iter`, ésta devuelve un iterador para el objeto.  Este "
"iterador sirve para una pasada sobre el conjunto de valores.  Cuando se "
"utilizan iterables, normalmente no es necesario llamar a :func:`iter` o "
"tratar con objetos iteradores.  La sentencia :keyword:`for` lo hace "
"automáticamente por usted, creando una variable temporal sin nombre para "
"mantener el iterador durante la duración del bucle.  Ver también :term:"
"`iterator`, :term:`sequence` y :term:`generator`."

#: ../../glossary.rst:665
msgid "iterator"
msgstr "iterador"

#: ../../glossary.rst:667
msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's :"
"meth:`~iterator.__next__` method (or passing it to the built-in function :"
"func:`next`) return successive items in the stream.  When no more data are "
"available a :exc:`StopIteration` exception is raised instead.  At this "
"point, the iterator object is exhausted and any further calls to its :meth:`!"
"__next__` method just raise :exc:`StopIteration` again.  Iterators are "
"required to have an :meth:`~iterator.__iter__` method that returns the "
"iterator object itself so every iterator is also iterable and may be used in "
"most places where other iterables are accepted.  One notable exception is "
"code which attempts multiple iteration passes.  A container object (such as "
"a :class:`list`) produces a fresh new iterator each time you pass it to the :"
"func:`iter` function or use it in a :keyword:`for` loop.  Attempting this "
"with an iterator will just return the same exhausted iterator object used in "
"the previous iteration pass, making it appear like an empty container."
msgstr ""
"Objeto que representa un flujo de datos.  Las llamadas repetidas al método :"
"meth:`~iterator.__next__` del iterador (o pasándolo a la función "
"incorporada :func:`next`) devuelven elementos sucesivos en el flujo.  Cuando "
"no hay más datos disponibles, se lanza una excepción :exc:`StopIteration`.  "
"En este punto, el objeto iterador se agota y cualquier otra llamada a su "
"método :meth:`!__next__` simplemente lanza :exc:`StopIteration` de nuevo.  "
"Los iteradores deben tener un método :meth:`~iterator.__iter__` que devuelva "
"el propio objeto iterador, por lo que todo iterador es también iterable y "
"puede utilizarse en la mayoría de los lugares donde se aceptan otros "
"iterables.  Una excepción notable es el código que intenta múltiples pasadas "
"de iteración.  Un objeto contenedor (como :class:`list`) produce un nuevo "
"iterador cada vez que se pasa a la función :func:`iter` o se utiliza en un "
"bucle :keyword:`for`.  Intentar esto con un iterador sólo devolverá el mismo "
"objeto iterador agotado utilizado en la pasada de iteración anterior, "
"haciendo que parezca un contenedor vacío."

#: ../../glossary.rst:682
msgid "More information can be found in :ref:`typeiter`."
msgstr "Más información en :ref:`typeiter`."

#: ../../glossary.rst:686
msgid ""
"CPython does not consistently apply the requirement that an iterator define :"
"meth:`~iterator.__iter__`."
msgstr ""
"CPython no aplica consistentemente el requisito de que un iterador defina :"
"meth:`~iterator.__iter__`."

#: ../../glossary.rst:688
msgid "key function"
msgstr "función clave"

#: ../../glossary.rst:690
msgid ""
"A key function or collation function is a callable that returns a value used "
"for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""
"Una función clave o función de cotejo es una llamada que devuelve un valor "
"utilizado para clasificar u ordenar.  Por ejemplo, :func:`locale.strxfrm` se "
"utiliza para producir una clave de ordenación que tiene en cuenta las "
"convenciones de ordenación específicas de la configuración regional."

#: ../../glossary.rst:695
msgid ""
"A number of tools in Python accept key functions to control how elements are "
"ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`, :"
"meth:`list.sort`, :func:`heapq.merge`, :func:`heapq.nsmallest`, :func:`heapq."
"nlargest`, and :func:`itertools.groupby`."
msgstr ""
"Varias herramientas en Python aceptan funciones clave para controlar cómo se "
"ordenan o agrupan los elementos.  Entre ellas se incluyen :func:`min`, :func:"
"`max`, :func:`sorted`, :meth:`list.sort`, :func:`heapq.merge`, :func:`heapq."
"nsmallest`, :func:`heapq.nlargest`, y :func:`itertools.groupby`."

#: ../../glossary.rst:701
msgid ""
"There are several ways to create a key function.  For example. the :meth:"
"`str.lower` method can serve as a key function for case insensitive sorts.  "
"Alternatively, a key function can be built from a :keyword:`lambda` "
"expression such as ``lambda r: (r[0], r[2])``.  Also, :func:`operator."
"attrgetter`, :func:`operator.itemgetter`, and :func:`operator.methodcaller` "
"are three key function constructors.  See the :ref:`Sorting HOW TO "
"<sortinghowto>` for examples of how to create and use key functions."
msgstr ""
"Hay varias formas de crear una función clave.  Por ejemplo, el método :meth:"
"`str.lower` puede servir como función clave para ordenaciones sin distinción "
"entre mayúsculas y minúsculas.  Alternativamente, se puede construir una "
"función clave a partir de una expresión :keyword:`lambda` como ``lambda r: "
"(r[0], r[2])``.  Además, :func:`operator.attrgetter`, :func:`operator."
"itemgetter`, y :func:`operator.methodcaller` son tres constructores de "
"funciones clave.  Ver :ref:`CÓMO ORDENAR <sortinghowto>` para ver ejemplos "
"de cómo crear y utilizar funciones clave."

#: ../../glossary.rst:708
msgid "keyword argument"
msgstr "argumento clave"

#: ../../glossary.rst:710 ../../glossary.rst:1001
msgid "See :term:`argument`."
msgstr "Ver  :term:`argument`."

#: ../../glossary.rst:711
msgid "lambda"
msgstr "lambda"

#: ../../glossary.rst:713
msgid ""
"An anonymous inline function consisting of a single :term:`expression` which "
"is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [parameters]: expression``"
msgstr ""
"Una función anónima en línea que consta de un único :term:`expression` que "
"se evalúa cuando se llama a la función.  La sintaxis para crear una función "
"lambda es ``lambda [parameters]: expression``"

#: ../../glossary.rst:716
msgid "LBYL"
msgstr "LBYL"

#: ../../glossary.rst:718
msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions "
"before making calls or lookups.  This style contrasts with the :term:`EAFP` "
"approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""
"Mira antes de saltar.  Este estilo de codificación comprueba explícitamente "
"las condiciones previas antes de realizar llamadas o búsquedas.  Este estilo "
"contrasta con el enfoque :term:`EAFP` y se caracteriza por la presencia de "
"muchas sentencias :keyword:`if`."

#: ../../glossary.rst:723
msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""
"En un entorno multihilo, el enfoque LBYL puede introducir una condición de "
"carrera entre \"the looking\" y \"the leaping\".  Por ejemplo, el código, "
"``if key in mapping: return mapping[key]`` puede fallar si otro hilo elimina "
"*key* de *mapping* después de la prueba, pero antes de la búsqueda. Este "
"problema puede resolverse con bloqueos o utilizando el enfoque EAFP."

#: ../../glossary.rst:728
msgid "list"
msgstr "lista"

#: ../../glossary.rst:730
msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements is "
"*O*\\ (1)."
msgstr ""
"Un :term:`sequence`. incorporado en Python.  A pesar de su nombre, se parece "
"más a una matriz de otros lenguajes que a una lista enlazada, ya que el "
"acceso a los elementos es *O* (1)."

#: ../../glossary.rst:733
msgid "list comprehension"
msgstr "comprensión de la lista"

#: ../../glossary.rst:735
msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = ['{:#04x}'.format(x) for x in "
"range(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""
"Una forma compacta de procesar todos o parte de los elementos de una "
"secuencia y devolver una lista con los resultados. ``result = ['{:#04x}'."
"format(x) for x in range(256) if x % 2 == 0]`` genera una lista de cadenas "
"que contienen números hexadecimales pares (0x..) en el rango de 0 a 255. La "
"cláusula :keyword:`if` es opcional.  Si se omite, se procesan todos los "
"elementos de ``range(256)``."

#: ../../glossary.rst:741
msgid "loader"
msgstr "cargador"

#: ../../glossary.rst:743
msgid ""
"An object that loads a module. It must define a method named :meth:"
"`load_module`. A loader is typically returned by a :term:`finder`. See :pep:"
"`302` for details and :class:`importlib.abc.Loader` for an :term:`abstract "
"base class`."
msgstr ""
"Objeto que carga un módulo. Debe definir un método llamado :meth:"
"`load_module`. Un cargador es típicamente devuelto por un :term:`finder`. "
"Ver :pep:`302` para más detalles y :class:`importlib.abc.Loader` para una :"
"term:`abstract base class`."

#: ../../glossary.rst:747
msgid "locale encoding"
msgstr "codificación regional"

#: ../../glossary.rst:749
msgid ""
"On Unix, it is the encoding of the LC_CTYPE locale. It can be set with :func:"
"`locale.setlocale(locale.LC_CTYPE, new_locale) <locale.setlocale>`."
msgstr ""
"En Unix, es la codificación de la configuración regional LC_CTYPE. Puede "
"establecerse con :func:`locale.setlocale(locale.LC_CTYPE, new_locale) "
"<locale.setlocale>`."

#: ../../glossary.rst:752
msgid "On Windows, it is the ANSI code page (ex: ``\"cp1252\"``)."
msgstr ""
"En Windows, es la página de códigos ANSI (por ejemplo: ``\"cp1252\"``)."

#: ../../glossary.rst:754
msgid ""
"On Android and VxWorks, Python uses ``\"utf-8\"`` as the locale encoding."
msgstr ""
"En Android y VxWorks, Python utiliza ``\"utf-8\"`` como codificación "
"regional."

#: ../../glossary.rst:756
msgid ":func:`locale.getencoding` can be used to get the locale encoding."
msgstr ":func:`locale.getencoding` para obtener la codificación regional."

#: ../../glossary.rst:758
msgid "See also the :term:`filesystem encoding and error handler`."
msgstr "Ver también :term:`filesystem encoding and error handler`."

#: ../../glossary.rst:759
msgid "magic method"
msgstr "método mágico"

#: ../../glossary.rst:763
msgid "An informal synonym for :term:`special method`."
msgstr "Sinónimo informal de :term:`special method`."

#: ../../glossary.rst:764
msgid "mapping"
msgstr "cartografía"

#: ../../glossary.rst:766
msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`collections.abc.Mapping` or :class:"
"`collections.abc.MutableMapping` :ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Examples include :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` and :class:"
"`collections.Counter`."
msgstr ""
"Objeto contenedor que admite búsquedas arbitrarias de claves e implementa "
"los métodos especificados en :class:`collections.abc.Mapping` o :class:"
"`collections.abc.MutableMapping`:ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Algunos ejemplos son :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` y :class:"
"`collections.Counter`."

#: ../../glossary.rst:772
msgid "meta path finder"
msgstr "meta buscador de rutas"

#: ../../glossary.rst:774
msgid ""
"A :term:`finder` returned by a search of :data:`sys.meta_path`.  Meta path "
"finders are related to, but different from :term:`path entry finders <path "
"entry finder>`."
msgstr ""
"Un :term:`finder` devuelto por una búsqueda en :data:`sys.meta_path`. Los "
"metabuscadores de rutas están relacionados con, pero son diferentes de los :"
"term:`path entry finders <path entry finder>`."

#: ../../glossary.rst:778
msgid ""
"See :class:`importlib.abc.MetaPathFinder` for the methods that meta path "
"finders implement."
msgstr ""
"Ver :class:`importlib.abc.MetaPathFinder` para conocer los métodos que "
"implementan los metabuscadores de rutas."

#: ../../glossary.rst:780
msgid "metaclass"
msgstr "metaclase"

#: ../../glossary.rst:782
msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""
"La clase de una clase.  Las definiciones de clase crean un nombre de clase, "
"un diccionario de clase y una lista de clases base.  La metaclase se encarga "
"de tomar esos tres argumentos y crear la clase.  La mayoría de los lenguajes "
"de programación orientados a objetos proporcionan una implementación por "
"defecto.  Lo que hace especial a Python es que es posible crear metaclases "
"personalizadas.  La mayoría de los usuarios nunca necesitan esta "
"herramienta, pero cuando surge la necesidad, las metaclases pueden "
"proporcionar soluciones potentes y elegantes.  Se han utilizado para "
"registrar el acceso a atributos, añadir seguridad a los hilos, rastrear la "
"creación de objetos, implementar singletons y muchas otras tareas."

#: ../../glossary.rst:792
msgid "More information can be found in :ref:`metaclasses`."
msgstr "Se puede encontrar más información en :ref:`metaclasses`."

#: ../../glossary.rst:761 ../../glossary.rst:793 ../../glossary.rst:1129
msgid "method"
msgstr "método"

#: ../../glossary.rst:795
msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its "
"first :term:`argument` (which is usually called ``self``). See :term:"
"`function` and :term:`nested scope`."
msgstr ""
"Función que se define dentro del cuerpo de una clase.  Si se llama como "
"atributo de una instancia de esa clase, el método obtendrá el objeto "
"instancia como su primer :term:`argument` (que normalmente se llama "
"``self``). Ver :term:`function` y :term:`nested scope`."

#: ../../glossary.rst:799
msgid "method resolution order"
msgstr "orden de resolución del método"

#: ../../glossary.rst:801
msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See `The Python 2.3 Method Resolution Order <https://"
"www.python.org/download/releases/2.3/mro/>`_ for details of the algorithm "
"used by the Python interpreter since the 2.3 release."
msgstr ""

#: ../../glossary.rst:805
msgid "module"
msgstr "módulo"

#: ../../glossary.rst:807
msgid ""
"An object that serves as an organizational unit of Python code.  Modules "
"have a namespace containing arbitrary Python objects.  Modules are loaded "
"into Python by the process of :term:`importing`."
msgstr ""
"Objeto que sirve como unidad organizativa del código Python.  Los módulos "
"tienen un espacio de nombres que contiene objetos Python arbitrarios.  Los "
"módulos se cargan en Python mediante el proceso :term:`importing`."

#: ../../glossary.rst:811
msgid "See also :term:`package`."
msgstr "Ver también :term:`package`."

#: ../../glossary.rst:812
msgid "module spec"
msgstr "especificación del módulo"

#: ../../glossary.rst:814
msgid ""
"A namespace containing the import-related information used to load a module. "
"An instance of :class:`importlib.machinery.ModuleSpec`."
msgstr ""
"Espacio de nombres que contiene la información relacionada con la "
"importación utilizada para cargar un módulo. Una instancia de :class:"
"`importlib.machinery.ModuleSpec`."

#: ../../glossary.rst:816
msgid "MRO"
msgstr "MRO"

#: ../../glossary.rst:818
msgid "See :term:`method resolution order`."
msgstr "Ver :term:`method resolution order`."

#: ../../glossary.rst:819
msgid "mutable"
msgstr "mutable"

#: ../../glossary.rst:821
msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also :"
"term:`immutable`."
msgstr ""
"Los objetos mutables pueden cambiar de valor pero conservan su :func:`id`. "
"Ver también :term:`immutable`."

#: ../../glossary.rst:823
msgid "named tuple"
msgstr "tupla con nombre"

#: ../../glossary.rst:825
msgid ""
"The term \"named tuple\" applies to any type or class that inherits from "
"tuple and whose indexable elements are also accessible using named "
"attributes.  The type or class may have other features as well."
msgstr ""
"El término \"named tuple\" se aplica a cualquier tipo o clase que herede de "
"tupla y cuyos elementos indexables también sean accesibles mediante "
"atributos con nombre.  El tipo o clase también puede tener otras "
"características."

#: ../../glossary.rst:829
msgid ""
"Several built-in types are named tuples, including the values returned by :"
"func:`time.localtime` and :func:`os.stat`.  Another example is :data:`sys."
"float_info`::"
msgstr ""
"Varios tipos incorporados reciben el nombre de tuplas, incluidos los valores "
"devueltos por :func:`time.localtime` y :func:`os.stat`.  Otro ejemplo es :"
"data:`sys.float_info`::"

#: ../../glossary.rst:840
msgid ""
"Some named tuples are built-in types (such as the above examples). "
"Alternatively, a named tuple can be created from a regular class definition "
"that inherits from :class:`tuple` and that defines named fields.  Such a "
"class can be written by hand, or it can be created by inheriting :class:"
"`typing.NamedTuple`, or with the factory function :func:`collections."
"namedtuple`.  The latter techniques also add some extra methods that may not "
"be found in hand-written or built-in named tuples."
msgstr ""
"Algunas tuplas con nombre son tipos incorporados (como los ejemplos "
"anteriores). Alternativamente, una tupla con nombre puede crearse a partir "
"de la definición de una clase normal que herede de :class:`tuple` y que "
"defina campos con nombre.  Una clase de este tipo puede escribirse a mano, o "
"puede crearse heredando de :class:`typing.NamedTuple`, o con la función de "
"fábrica :func:`collections.namedtuple`.  Estas últimas técnicas también "
"añaden algunos métodos adicionales que pueden no encontrarse en las tuplas "
"con nombre escritas a mano o incorporadas."

#: ../../glossary.rst:848
msgid "namespace"
msgstr "espacio de nombres"

#: ../../glossary.rst:850
msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity "
"by preventing naming conflicts.  For instance, the functions :func:`builtins."
"open <.open>` and :func:`os.open` are distinguished by their namespaces.  "
"Namespaces also aid readability and maintainability by making it clear which "
"module implements a function.  For instance, writing :func:`random.seed` or :"
"func:`itertools.islice` makes it clear that those functions are implemented "
"by the :mod:`random` and :mod:`itertools` modules, respectively."
msgstr ""
"Lugar donde se almacena una variable.  Los espacios de nombres se "
"implementan como diccionarios.  Existen espacios de nombres locales, "
"globales e incorporados, así como espacios de nombres anidados en objetos "
"(en métodos).  Los espacios de nombres favorecen la modularidad al evitar "
"conflictos de nombres.  Por ejemplo, las funciones :func:`builtins.open <."
"open>` y :func:`os.open` se distinguen por sus espacios de nombres.  Los "
"espacios de nombres también facilitan la lectura y el mantenimiento al dejar "
"claro qué módulo implementa una función.  Por ejemplo, escribir :func:"
"`random.seed` o :func:`itertools.islice` deja claro que esas funciones están "
"implementadas por los módulos :mod:`random` y :mod:`itertools`, "
"respectivamente."

#: ../../glossary.rst:860
msgid "namespace package"
msgstr "paquete namespace"

#: ../../glossary.rst:862
msgid ""
"A :pep:`420` :term:`package` which serves only as a container for "
"subpackages.  Namespace packages may have no physical representation, and "
"specifically are not like a :term:`regular package` because they have no "
"``__init__.py`` file."
msgstr ""
"Un :pep:`420`  :term:`package` que sólo sirve como contenedor de "
"subpaquetes.  Los paquetes de espacio de nombres pueden no tener "
"representación física, y específicamente no son como un :term:`regular "
"package`  porque no tienen un archivo ``__init__.py``."

#: ../../glossary.rst:867
msgid "See also :term:`module`."
msgstr "Ver también :term:`module`."

#: ../../glossary.rst:868
msgid "nested scope"
msgstr "ámbito anidado"

#: ../../glossary.rst:870
msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes by default work only for "
"reference and not for assignment.  Local variables both read and write in "
"the innermost scope.  Likewise, global variables read and write to the "
"global namespace.  The :keyword:`nonlocal` allows writing to outer scopes."
msgstr ""
"Capacidad de hacer referencia a una variable en una definición adjunta.  Por "
"ejemplo, una función definida dentro de otra función puede hacer referencia "
"a variables de la función externa.  Tenga en cuenta que los ámbitos anidados "
"sólo funcionan por defecto para referencia y no para asignación.  Las "
"variables locales leen y escriben en el ámbito más interno.  Del mismo modo, "
"las variables globales leen y escriben en el espacio de nombres global.  :"
"keyword:`nonlocal` permite escribir en ámbitos externos."

#: ../../glossary.rst:877
msgid "new-style class"
msgstr "clase de nuevo estilo"

#: ../../glossary.rst:879
msgid ""
"Old name for the flavor of classes now used for all class objects.  In "
"earlier Python versions, only new-style classes could use Python's newer, "
"versatile features like :attr:`~object.__slots__`, descriptors, properties, :"
"meth:`~object.__getattribute__`, class methods, and static methods."
msgstr ""
"Antiguo nombre para el sabor de las clases que ahora se utiliza para todos "
"los objetos de clase.  En versiones anteriores de Python, sólo las clases de "
"nuevo estilo podían utilizar las nuevas y versátiles características de "
"Python como :attr:`~object.__slots__`, descriptores, propiedades, :meth:"
"`~object.__getattribute__`, métodos de clase y métodos estáticos."

#: ../../glossary.rst:884
msgid "object"
msgstr "objeto"

#: ../../glossary.rst:886
msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""
"Cualquier dato con estado (atributos o valor) y comportamiento definido "
"(métodos).  También es la clase base definitiva de cualquier :term:`new-"
"style class`."

#: ../../glossary.rst:889
msgid "package"
msgstr "paquete"

#: ../../glossary.rst:891
msgid ""
"A Python :term:`module` which can contain submodules or recursively, "
"subpackages.  Technically, a package is a Python module with a ``__path__`` "
"attribute."
msgstr ""
"Un :term:`module` de Python que puede contener submódulos o, recursivamente, "
"subpaquetes.  Técnicamente, un paquete es un módulo de Python con un "
"atributo ``__path__``."

#: ../../glossary.rst:895
msgid "See also :term:`regular package` and :term:`namespace package`."
msgstr "Ver también :term:`regular package` y :term:`namespace package`."

#: ../../glossary.rst:896
msgid "parameter"
msgstr "parámetro"

#: ../../glossary.rst:898
msgid ""
"A named entity in a :term:`function` (or method) definition that specifies "
"an :term:`argument` (or in some cases, arguments) that the function can "
"accept.  There are five kinds of parameter:"
msgstr ""
"Entidad con nombre en una definición :term:`function` (o método) que "
"especifica un :term:`argument` (o, en algunos casos, argumentos) que la "
"función puede aceptar.  Existen cinco tipos de parámetros:"

#: ../../glossary.rst:902
msgid ""
":dfn:`positional-or-keyword`: specifies an argument that can be passed "
"either :term:`positionally <argument>` or as a :term:`keyword argument "
"<argument>`.  This is the default kind of parameter, for example *foo* and "
"*bar* in the following::"
msgstr ""
":dfn:`positional-or-keyword`: especifica un argumento que se puede pasar :"
"term:`positionally <argument>` o como un :term:`keyword argument "
"<argument>`.  Este es el tipo de parámetro predeterminado, por ejemplo * foo "
"* y * bar * en lo siguiente::"

#: ../../glossary.rst:911
msgid ""
":dfn:`positional-only`: specifies an argument that can be supplied only by "
"position. Positional-only parameters can be defined by including a ``/`` "
"character in the parameter list of the function definition after them, for "
"example *posonly1* and *posonly2* in the following::"
msgstr ""
":dfn:`positional-only`: especifica un argumento que sólo puede suministrarse "
"por posición. Los parámetros de sólo posición pueden definirse incluyendo un "
"carácter ``/`` en la lista de parámetros de la definición de función después "
"de ellos, por ejemplo *posonly1* y *posonly2* en lo siguiente::"

#: ../../glossary.rst:920
msgid ""
":dfn:`keyword-only`: specifies an argument that can be supplied only by "
"keyword.  Keyword-only parameters can be defined by including a single var-"
"positional parameter or bare ``*`` in the parameter list of the function "
"definition before them, for example *kw_only1* and *kw_only2* in the "
"following::"
msgstr ""
":dfn:`keyword-only`: especifica un argumento que sólo puede suministrarse "
"mediante una palabra clave.  Los parámetros de sólo palabra clave pueden "
"definirse incluyendo un único parámetro var-positional o ``*`` desnudo en la "
"lista de parámetros de la definición de función que les precede, por ejemplo "
"*kw_only1* y *kw_only2* en el siguiente::"

#: ../../glossary.rst:928
msgid ""
":dfn:`var-positional`: specifies that an arbitrary sequence of positional "
"arguments can be provided (in addition to any positional arguments already "
"accepted by other parameters).  Such a parameter can be defined by "
"prepending the parameter name with ``*``, for example *args* in the "
"following::"
msgstr ""
":dfn:`var-positional`: especifica que se puede proporcionar una secuencia "
"arbitraria de argumentos posicionales (además de cualquier argumento "
"posicional ya aceptado por otros parámetros).  Un parámetro de este tipo "
"puede definirse anteponiendo al nombre del parámetro ``*``, por ejemplo "
"*args* en lo siguiente::"

#: ../../glossary.rst:936
msgid ""
":dfn:`var-keyword`: specifies that arbitrarily many keyword arguments can be "
"provided (in addition to any keyword arguments already accepted by other "
"parameters).  Such a parameter can be defined by prepending the parameter "
"name with ``**``, for example *kwargs* in the example above."
msgstr ""
":dfn:`var-palabra-clave`: especifica que se puede proporcionar un número "
"arbitrario de argumentos de palabra clave (además de los argumentos de "
"palabra clave ya aceptados por otros parámetros).  Un parámetro de este tipo "
"puede definirse anteponiendo al nombre del parámetro ``**``, por ejemplo "
"*kwargs* en el ejemplo anterior."

#: ../../glossary.rst:942
msgid ""
"Parameters can specify both optional and required arguments, as well as "
"default values for some optional arguments."
msgstr ""
"Los parámetros pueden especificar argumentos opcionales y obligatorios, así "
"como valores por defecto para algunos argumentos opcionales."

#: ../../glossary.rst:945
msgid ""
"See also the :term:`argument` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"the :class:`inspect.Parameter` class, the :ref:`function` section, and :pep:"
"`362`."
msgstr ""
"Ver también la entrada del glosario :term:`argument`, la pregunta de las FAQ "
"sobre :ref:`la diferencia entre argumentos y parámetros <faq-argument-vs-"
"parameter>`, la clase :class:`inspect.Parameter`, la sección :ref:`function` "
"y :pep:`362`."

#: ../../glossary.rst:949
msgid "path entry"
msgstr "entrada del camino"

#: ../../glossary.rst:951
msgid ""
"A single location on the :term:`import path` which the :term:`path based "
"finder` consults to find modules for importing."
msgstr ""
"Una única ubicación en la ruta :term:`import` que el buscador basado en "
"rutas :term:`path based finder` consulta para encontrar módulos para "
"importar."

#: ../../glossary.rst:953
msgid "path entry finder"
msgstr "buscador de entradas de ruta"

#: ../../glossary.rst:955
msgid ""
"A :term:`finder` returned by a callable on :data:`sys.path_hooks` (i.e. a :"
"term:`path entry hook`) which knows how to locate modules given a :term:"
"`path entry`."
msgstr ""
"Un :term:`finder` devuelto por una llamada en :data:`sys.path_hooks` (es "
"decir, un :term:`path entry hook`) que sabe cómo localizar módulos dado un :"
"term:`path entry`."

#: ../../glossary.rst:959
msgid ""
"See :class:`importlib.abc.PathEntryFinder` for the methods that path entry "
"finders implement."
msgstr ""
"Ver :class:`importlib.abc.PathEntryFinder` para conocer los métodos que "
"implementan los buscadores de entradas de rutas."

#: ../../glossary.rst:961
msgid "path entry hook"
msgstr "gancho de entrada de ruta"

#: ../../glossary.rst:963
msgid ""
"A callable on the :data:`sys.path_hooks` list which returns a :term:`path "
"entry finder` if it knows how to find modules on a specific :term:`path "
"entry`."
msgstr ""
"Una llamada a la lista :data:`sys.path_hooks` que devuelve un :term:`path "
"entry finder` si sabe cómo encontrar módulos en un :term:`path entry` "
"específico."

#: ../../glossary.rst:966
msgid "path based finder"
msgstr "buscador basado en rutas"

#: ../../glossary.rst:968
msgid ""
"One of the default :term:`meta path finders <meta path finder>` which "
"searches an :term:`import path` for modules."
msgstr ""
"Uno de los buscadores de rutas :term:`meta` por defecto <meta path finder>` "
"que busca módulos en una ruta :term:`import`."

#: ../../glossary.rst:970
msgid "path-like object"
msgstr "objeto similar a una ruta"

#: ../../glossary.rst:972
msgid ""
"An object representing a file system path. A path-like object is either a :"
"class:`str` or :class:`bytes` object representing a path, or an object "
"implementing the :class:`os.PathLike` protocol. An object that supports the :"
"class:`os.PathLike` protocol can be converted to a :class:`str` or :class:"
"`bytes` file system path by calling the :func:`os.fspath` function; :func:"
"`os.fsdecode` and :func:`os.fsencode` can be used to guarantee a :class:"
"`str` or :class:`bytes` result instead, respectively. Introduced by :pep:"
"`519`."
msgstr ""
"Objeto que representa una ruta del sistema de archivos. Un objeto similar a "
"una ruta es un objeto :class:`str` o :class:`bytes` que representa una ruta, "
"o un objeto que implementa el protocolo :class:`os.PathLike`. Un objeto que "
"soporte el protocolo :class:`os.PathLike` puede convertirse en una ruta de "
"sistema de archivos :class:`str` o :class:`bytes` llamando a la función :"
"func:`os.fspath`; :func:`os.fsdecode` y :func:`os.fsencode` pueden "
"utilizarse para garantizar un resultado :class:`str` o :class:`bytes`, "
"respectivamente. Introducido por :pep:`519`."

#: ../../glossary.rst:980
msgid "PEP"
msgstr "PEP"

#: ../../glossary.rst:982
msgid ""
"Python Enhancement Proposal. A PEP is a design document providing "
"information to the Python community, or describing a new feature for Python "
"or its processes or environment. PEPs should provide a concise technical "
"specification and a rationale for proposed features."
msgstr ""
"Propuesta de mejora de Python. Un PEP es un documento de diseño que "
"proporciona información a la comunidad Python, o describe una nueva "
"característica para Python o sus procesos o entorno. Los PEP deben "
"proporcionar una especificación técnica concisa y una justificación de las "
"características propuestas."

#: ../../glossary.rst:988
msgid ""
"PEPs are intended to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting "
"the design decisions that have gone into Python. The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""
"Se pretende que los PEP sean los mecanismos principales para proponer nuevas "
"características importantes, para recoger las opiniones de la comunidad "
"sobre un tema y para documentar las decisiones de diseño que se han tomado "
"en Python. El autor del PEP es responsable de crear consenso dentro de la "
"comunidad y documentar las opiniones discrepantes."

#: ../../glossary.rst:994
msgid "See :pep:`1`."
msgstr "Ver :pep:`1`."

#: ../../glossary.rst:995
msgid "portion"
msgstr "porción"

#: ../../glossary.rst:997
msgid ""
"A set of files in a single directory (possibly stored in a zip file) that "
"contribute to a namespace package, as defined in :pep:`420`."
msgstr ""
"Conjunto de archivos en un único directorio (posiblemente almacenados en un "
"archivo zip) que contribuyen a un paquete de espacio de nombres, tal y como "
"se define en :pep:`420`."

#: ../../glossary.rst:999
msgid "positional argument"
msgstr "argumento posicional"

#: ../../glossary.rst:1002
msgid "provisional API"
msgstr "API provisional"

#: ../../glossary.rst:1004
msgid ""
"A provisional API is one which has been deliberately excluded from the "
"standard library's backwards compatibility guarantees.  While major changes "
"to such interfaces are not expected, as long as they are marked provisional, "
"backwards incompatible changes (up to and including removal of the "
"interface) may occur if deemed necessary by core developers.  Such changes "
"will not be made gratuitously -- they will occur only if serious fundamental "
"flaws are uncovered that were missed prior to the inclusion of the API."
msgstr ""
"Una API provisional es aquella que se ha excluido deliberadamente de las "
"garantías de compatibilidad con versiones anteriores de la biblioteca "
"estándar.  Aunque no se esperan grandes cambios en este tipo de interfaces, "
"mientras estén marcadas como provisionales, pueden producirse cambios "
"incompatibles con versiones anteriores (incluida la eliminación de la "
"interfaz) si los desarrolladores del núcleo lo consideran necesario.  Dichos "
"cambios no se realizarán de forma gratuita, sino sólo si se descubren graves "
"fallos fundamentales que se pasaron por alto antes de la inclusión de la API."

#: ../../glossary.rst:1013
msgid ""
"Even for provisional APIs, backwards incompatible changes are seen as a "
"\"solution of last resort\" - every attempt will still be made to find a "
"backwards compatible resolution to any identified problems."
msgstr ""
"Incluso en el caso de las API provisionales, los cambios incompatibles con "
"versiones anteriores se consideran una \"solución de último recurso\": se "
"hará todo lo posible por encontrar una solución compatible con versiones "
"anteriores a cualquier problema detectado."

#: ../../glossary.rst:1017
msgid ""
"This process allows the standard library to continue to evolve over time, "
"without locking in problematic design errors for extended periods of time.  "
"See :pep:`411` for more details."
msgstr ""
"Este proceso permite que la biblioteca estándar siga evolucionando con el "
"tiempo, sin bloquear errores de diseño problemáticos durante largos periodos "
"de tiempo.  Para más información, ver :pep:`411`."

#: ../../glossary.rst:1020
msgid "provisional package"
msgstr "paquete provisional"

#: ../../glossary.rst:1022
msgid "See :term:`provisional API`."
msgstr "Ver :term:`provisional API`."

#: ../../glossary.rst:1023
msgid "Python 3000"
msgstr "Python 3000"

#: ../../glossary.rst:1025
msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated "
"\"Py3k\"."
msgstr ""
"Apodo para la línea de lanzamiento de Python 3.x (acuñado hace mucho tiempo, "
"cuando el lanzamiento de la versión 3 era algo en un futuro lejano).  "
"También se abrevia \"Py3k\"."

#: ../../glossary.rst:1028
msgid "Pythonic"
msgstr "Pythónico"

#: ../../glossary.rst:1030
msgid ""
"An idea or piece of code which closely follows the most common idioms of the "
"Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""
"Una idea o fragmento de código que sigue de cerca los modismos más comunes "
"del lenguaje Python, en lugar de implementar código utilizando conceptos "
"comunes a otros lenguajes.  Por ejemplo, un lenguaje común en Python es "
"hacer un bucle sobre todos los elementos de un iterable usando una "
"sentencia :keyword:`for`.  Muchos otros lenguajes no tienen este tipo de "
"construcción, por lo que las personas no familiarizadas con Python a veces "
"utilizan un contador numérico en su lugar::"

#: ../../glossary.rst:1040
msgid "As opposed to the cleaner, Pythonic method::"
msgstr "A diferencia del método pythónico, más limpio::"

#: ../../glossary.rst:1044
msgid "qualified name"
msgstr "nombre cualificado"

#: ../../glossary.rst:1046
msgid ""
"A dotted name showing the \"path\" from a module's global scope to a class, "
"function or method defined in that module, as defined in :pep:`3155`.  For "
"top-level functions and classes, the qualified name is the same as the "
"object's name::"
msgstr ""
"Un nombre con puntos que muestra la \"ruta\" desde el ámbito global de un "
"módulo a una clase, función o método definido en ese módulo, tal y como se "
"define en :pep:`3155`.  Para las funciones y clases de nivel superior, el "
"nombre cualificado es el mismo que el nombre del objeto::"

#: ../../glossary.rst:1063
msgid ""
"When used to refer to modules, the *fully qualified name* means the entire "
"dotted path to the module, including any parent packages, e.g. ``email.mime."
"text``::"
msgstr ""
"Cuando se utiliza para referirse a módulos, el *fully qualified name* "
"significa la ruta completa con puntos al módulo, incluyendo cualquier "
"paquete padre, por ejemplo ``email.mime.text``::"

#: ../../glossary.rst:1070
msgid "reference count"
msgstr "recuento de referencias"

#: ../../glossary.rst:1072
msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Reference counting is generally "
"not visible to Python code, but it is a key element of the :term:`CPython` "
"implementation.  Programmers can call the :func:`sys.getrefcount` function "
"to return the reference count for a particular object."
msgstr ""

#: ../../glossary.rst:1078
msgid "regular package"
msgstr "paquete normal"

#: ../../glossary.rst:1080
msgid ""
"A traditional :term:`package`, such as a directory containing an ``__init__."
"py`` file."
msgstr ""
"Un :term:`package` tradicional, como un directorio que contiene un archivo "
"``__init__.py``."

#: ../../glossary.rst:1083
msgid "See also :term:`namespace package`."
msgstr "Ver también :term:`namespace package`."

#: ../../glossary.rst:1084
msgid "__slots__"
msgstr "__slots__"

#: ../../glossary.rst:1086
msgid ""
"A declaration inside a class that saves memory by pre-declaring space for "
"instance attributes and eliminating instance dictionaries.  Though popular, "
"the technique is somewhat tricky to get right and is best reserved for rare "
"cases where there are large numbers of instances in a memory-critical "
"application."
msgstr ""
"Una declaración dentro de una clase que ahorra memoria al pre-declarar "
"espacio para los atributos de instancia y eliminar los diccionarios de "
"instancia.  Aunque popular, la técnica es algo complicada de aplicar "
"correctamente y es mejor reservarla para casos excepcionales en los que haya "
"un gran número de instancias en una aplicación en la que la memoria sea "
"crítica."

#: ../../glossary.rst:1091
msgid "sequence"
msgstr "secuencia"

#: ../../glossary.rst:1093
msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`~object.__getitem__` special method and defines a :"
"meth:`~object.__len__` method that returns the length of the sequence. Some "
"built-in sequence types are :class:`list`, :class:`str`, :class:`tuple`, "
"and :class:`bytes`. Note that :class:`dict` also supports :meth:`~object."
"__getitem__` and :meth:`!__len__`, but is considered a mapping rather than a "
"sequence because the lookups use arbitrary :term:`immutable` keys rather "
"than integers."
msgstr ""
"Un :term:`iterable` que admite el acceso eficiente a elementos mediante "
"índices enteros a través del método especial :meth:`~object.__getitem__` y "
"define un método :meth:`~object.__len__` que devuelve la longitud de la "
"secuencia. Algunos tipos de secuencia incorporados son :class:`list`, :class:"
"`str`, :class:`tuple` y :class:`bytes`. Tenga en cuenta que :class:`dict` "
"también admite :meth:`~object.__getitem__` y :meth:`!__len__`, pero se "
"considera un mapeo en lugar de una secuencia porque las búsquedas utilizan "
"claves :term:`inmutable` arbitrarias en lugar de enteros."

#: ../../glossary.rst:1102
msgid ""
"The :class:`collections.abc.Sequence` abstract base class defines a much "
"richer interface that goes beyond just :meth:`~object.__getitem__` and :meth:"
"`~object.__len__`, adding :meth:`!count`, :meth:`!index`, :meth:`~object."
"__contains__`, and :meth:`~object.__reversed__`. Types that implement this "
"expanded interface can be registered explicitly using :func:`~abc.ABCMeta."
"register`. For more documentation on sequence methods generally, see :ref:"
"`Common Sequence Operations <typesseq-common>`."
msgstr ""
"La clase base abstracta :class:`collections.abc.Sequence` define una "
"interfaz mucho más rica que va más allá de :meth:`~object.__getitem__` y :"
"meth:`~object.__len__`, añadiendo :meth:`!count`, :meth:`!index`, :meth:"
"`~object.__contains__` y :meth:`~object.__reversed__`. Los tipos que "
"implementan esta interfaz ampliada pueden registrarse explícitamente "
"utilizando :func:`~abc.ABCMeta.register`. Para obtener más documentación "
"sobre los métodos de secuencia en general, ver :ref:`Common Sequence "
"Operations <typesseq-common>`."

#: ../../glossary.rst:1111
msgid "set comprehension"
msgstr "establecer la comprensión"

#: ../../glossary.rst:1113
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a set with the results. ``results = {c for c in 'abracadabra' if c "
"not in 'abc'}`` generates the set of strings ``{'r', 'd'}``.  See :ref:"
"`comprehensions`."
msgstr ""
"Una forma compacta de procesar todos o parte de los elementos de un iterable "
"y devolver un conjunto con los resultados. ``results = {c for c in "
"'abracadabra' if c not in 'abc'}`` genera el conjunto de cadenas ``{'r', 'd'}"
"``.  Ver :ref:`comprehensions`."

#: ../../glossary.rst:1117
msgid "single dispatch"
msgstr "envío único"

#: ../../glossary.rst:1119
msgid ""
"A form of :term:`generic function` dispatch where the implementation is "
"chosen based on the type of a single argument."
msgstr ""
"Una forma de envío de :term:`generic function` en la que la implementación "
"se elige en función del tipo de un único argumento."

#: ../../glossary.rst:1121
msgid "slice"
msgstr "corte"

#: ../../glossary.rst:1123
msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally."
msgstr ""
"Objeto que suele contener una parte de un :term:`sequence`.  Una porción se "
"crea utilizando la notación de subíndice, ``[]`` con dos puntos entre "
"números cuando se dan varios, como en ``variable_name[1:3:5]``.  La notación "
"de corchetes (subíndice) utiliza internamente objetos :class:`slice`."

#: ../../glossary.rst:1127
msgid "special method"
msgstr "método especial"

#: ../../glossary.rst:1131
msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in :ref:"
"`specialnames`."
msgstr ""
"Un método que lo llama implícitamente Python para ejecutar una operación "
"determinada en un tipo, como la suma.  Tales métodos tienen nombres que "
"empiezan y terminan con doble guión bajo.  Los métodos especiales están "
"documentados en :ref:`specialnames`."

#: ../../glossary.rst:1135
msgid "statement"
msgstr "declaración"

#: ../../glossary.rst:1137
msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either "
"an :term:`expression` or one of several constructs with a keyword, such as :"
"keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""
"Una declaración forma parte de un conjunto (un \"bloque\" de código).  Una "
"declaración puede ser un :term:`expression` o una de varias construcciones "
"con una palabra clave, como :keyword:`if`, :keyword:`while` o :keyword:`for`."

#: ../../glossary.rst:1140
msgid "static type checker"
msgstr "comprobador de tipos estático"

#: ../../glossary.rst:1142
msgid ""
"An external tool that reads Python code and analyzes it, looking for issues "
"such as incorrect types. See also :term:`type hints <type hint>` and the :"
"mod:`typing` module."
msgstr ""
"Una herramienta externa que lee código Python y lo analiza, buscando "
"problemas como tipos incorrectos. Ver también :term:`type hints <type hint>` "
"y el módulo :mod:`typing`."

#: ../../glossary.rst:1145
msgid "strong reference"
msgstr "fuerte referencia"

#: ../../glossary.rst:1147
msgid ""
"In Python's C API, a strong reference is a reference to an object which is "
"owned by the code holding the reference.  The strong reference is taken by "
"calling :c:func:`Py_INCREF` when the reference is created and released with :"
"c:func:`Py_DECREF` when the reference is deleted."
msgstr ""
"En la API C de Python, una referencia fuerte es una referencia a un objeto "
"que es propiedad del código que mantiene la referencia.  La referencia "
"fuerte se toma llamando a :c:func:`Py_INCREF` cuando se crea la referencia y "
"se libera con :c:func:`Py_DECREF` cuando se elimina la referencia."

#: ../../glossary.rst:1153
msgid ""
"The :c:func:`Py_NewRef` function can be used to create a strong reference to "
"an object. Usually, the :c:func:`Py_DECREF` function must be called on the "
"strong reference before exiting the scope of the strong reference, to avoid "
"leaking one reference."
msgstr ""
"La función :c:func:`Py_NewRef` puede utilizarse para crear una referencia "
"fuerte a un objeto. Por lo general, la función :c:func:`Py_DECREF` debe ser "
"llamada en la referencia fuerte antes de salir del ámbito de la referencia "
"fuerte, para evitar la fuga de una referencia."

#: ../../glossary.rst:1158
msgid "See also :term:`borrowed reference`."
msgstr "Ver también :term:`borrowed reference`."

#: ../../glossary.rst:1159
msgid "text encoding"
msgstr "codificación de texto"

#: ../../glossary.rst:1161
msgid ""
"A string in Python is a sequence of Unicode code points (in range "
"``U+0000``--``U+10FFFF``). To store or transfer a string, it needs to be "
"serialized as a sequence of bytes."
msgstr ""
"Una cadena en Python es una secuencia de puntos de código Unicode (en el "
"rango ``U+0000``--``U+10FFFF``). Para almacenar o transferir una cadena, es "
"necesario serializarla como una secuencia de bytes."

#: ../../glossary.rst:1165
msgid ""
"Serializing a string into a sequence of bytes is known as \"encoding\", and "
"recreating the string from the sequence of bytes is known as \"decoding\"."
msgstr ""
"La serialización de una cadena en una secuencia de bytes se conoce como "
"\"codificación\", y la recreación de la cadena a partir de la secuencia de "
"bytes se conoce como \"descodificación\"."

#: ../../glossary.rst:1168
msgid ""
"There are a variety of different text serialization :ref:`codecs <standard-"
"encodings>`, which are collectively referred to as \"text encodings\"."
msgstr ""
"Existe una gran variedad de serializaciones de texto :ref:`codecs <standard-"
"encodings>`, que se denominan colectivamente \"codificaciones de texto\"."

#: ../../glossary.rst:1171
msgid "text file"
msgstr "archivo de texto"

#: ../../glossary.rst:1173
msgid ""
"A :term:`file object` able to read and write :class:`str` objects. Often, a "
"text file actually accesses a byte-oriented datastream and handles the :term:"
"`text encoding` automatically. Examples of text files are files opened in "
"text mode (``'r'`` or ``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, and "
"instances of :class:`io.StringIO`."
msgstr ""
"Un objeto :term:`file` capaz de leer y escribir objetos :class:`str`. A "
"menudo, un archivo de texto accede en realidad a un flujo de datos orientado "
"a bytes y maneja la codificación :term:`text` automáticamente. Ejemplos de "
"archivos de texto son los archivos abiertos en modo texto (``'r'`` o "
"``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, e instancias de :class:`io."
"StringIO`."

#: ../../glossary.rst:1180
msgid ""
"See also :term:`binary file` for a file object able to read and write :term:"
"`bytes-like objects <bytes-like object>`."
msgstr ""
"Ver también :term:`binary file` para un objeto fichero capaz de leer y "
"escribir :term:`bytes-like objetos <bytes-like object>`."

#: ../../glossary.rst:1182
msgid "triple-quoted string"
msgstr "cadena entre comillas triples"

#: ../../glossary.rst:1184
msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""
"Cadena delimitada por tres comillas (\") o un apóstrofe (').  Aunque no "
"ofrecen ninguna funcionalidad que no esté disponible con las cadenas entre "
"comillas simples, son útiles por varias razones.  Permiten incluir comillas "
"simples y dobles dentro de una cadena y pueden abarcar varias líneas sin "
"necesidad de utilizar el carácter de continuación, lo que las hace "
"especialmente útiles a la hora de escribir docstrings."

#: ../../glossary.rst:1191
msgid "type"
msgstr "tipo"

#: ../../glossary.rst:1193
msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its :attr:`~instance."
"__class__` attribute or can be retrieved with ``type(obj)``."
msgstr ""
"El tipo de un objeto Python determina qué clase de objeto es; cada objeto "
"tiene un tipo.  El tipo de un objeto es accesible como su atributo :attr:"
"`~instance.__class__` o se puede recuperar con ``type(obj)``."

#: ../../glossary.rst:1197
msgid "type alias"
msgstr "alias de tipo"

#: ../../glossary.rst:1199
msgid "A synonym for a type, created by assigning the type to an identifier."
msgstr "Sinónimo de un tipo, creado asignando el tipo a un identificador."

#: ../../glossary.rst:1201
msgid ""
"Type aliases are useful for simplifying :term:`type hints <type hint>`. For "
"example::"
msgstr ""
"Los alias de tipo son útiles para simplificar :term:`type hints <type "
"hint>`. Por ejemplo::"

#: ../../glossary.rst:1208
msgid "could be made more readable like this::"
msgstr "podría hacerse más legible así::"

#: ../../glossary.rst:1215 ../../glossary.rst:1229
msgid "See :mod:`typing` and :pep:`484`, which describe this functionality."
msgstr "Ver :mod:`typing` y :pep:`484`, que describen esta funcionalidad."

#: ../../glossary.rst:1216
msgid "type hint"
msgstr "tipo de pista"

#: ../../glossary.rst:1218
msgid ""
"An :term:`annotation` that specifies the expected type for a variable, a "
"class attribute, or a function parameter or return value."
msgstr ""
"Una :term:`annotation` que especifica el tipo esperado para una variable, un "
"atributo de clase, o un parámetro o valor de retorno de una función."

#: ../../glossary.rst:1221
msgid ""
"Type hints are optional and are not enforced by Python but they are useful "
"to :term:`static type checkers <static type checker>`. They can also aid "
"IDEs with code completion and refactoring."
msgstr ""
"Las sugerencias de tipos son opcionales y no son forzadas por Python, pero "
"son útiles para los comprobadores :term:`static type checkers <static type "
"checker>`. También pueden ayudar a los IDEs a completar y refactorizar el "
"código."

#: ../../glossary.rst:1225
msgid ""
"Type hints of global variables, class attributes, and functions, but not "
"local variables, can be accessed using :func:`typing.get_type_hints`."
msgstr ""
"Se puede acceder a las sugerencias de tipo de las variables globales, los "
"atributos de clase y las funciones, pero no a las variables locales, "
"mediante :func:`typing.get_type_hints`."

#: ../../glossary.rst:1230
msgid "universal newlines"
msgstr "nuevas líneas universales"

#: ../../glossary.rst:1232
msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention "
"``'\\r'``.  See :pep:`278` and :pep:`3116`, as well as :func:`bytes."
"splitlines` for an additional use."
msgstr ""
"Una forma de interpretar flujos de texto en la que se reconoce como final de "
"línea todo lo siguiente: la convención de final de línea de Unix ``'\\n'``, "
"la convención de Windows ``'\\r\\n'``, y la antigua convención de Macintosh "
"``'\\r'``.  Para un uso adicional, ver :pep:`278` y :pep:`3116`, así como :"
"func:`bytes.splitlines`."

#: ../../glossary.rst:1237
msgid "variable annotation"
msgstr "anotación variable"

#: ../../glossary.rst:1239
msgid "An :term:`annotation` of a variable or a class attribute."
msgstr "Una :term:`annotation` de una variable o un atributo de clase."

#: ../../glossary.rst:1241
msgid ""
"When annotating a variable or a class attribute, assignment is optional::"
msgstr ""
"Al anotar una variable o un atributo de clase, la asignación es opcional::"

#: ../../glossary.rst:1246
msgid ""
"Variable annotations are usually used for :term:`type hints <type hint>`: "
"for example this variable is expected to take :class:`int` values::"
msgstr ""
"Las anotaciones de variables suelen utilizarse para :term:`type hints <type "
"hint>`: por ejemplo, se espera que esta variable tome valores :class:`int`::"

#: ../../glossary.rst:1252
msgid "Variable annotation syntax is explained in section :ref:`annassign`."
msgstr ""
"La sintaxis de la anotación de variables se explica en la sección :ref:"
"`annassign`."

#: ../../glossary.rst:1254
msgid ""
"See :term:`function annotation`, :pep:`484` and :pep:`526`, which describe "
"this functionality. Also see :ref:`annotations-howto` for best practices on "
"working with annotations."
msgstr ""
"Ver :term:`function annotation`, :pep:`484` y :pep:`526`, que describen esta "
"funcionalidad. Consulte también :ref:`annotations-howto` para conocer las "
"mejores prácticas para trabajar con anotaciones."

#: ../../glossary.rst:1258
msgid "virtual environment"
msgstr "entorno virtual"

#: ../../glossary.rst:1260
msgid ""
"A cooperatively isolated runtime environment that allows Python users and "
"applications to install and upgrade Python distribution packages without "
"interfering with the behaviour of other Python applications running on the "
"same system."
msgstr ""
"Un entorno de ejecución aislado de forma cooperativa que permite a los "
"usuarios y aplicaciones de Python instalar y actualizar paquetes de "
"distribución de Python sin interferir en el comportamiento de otras "
"aplicaciones de Python que se ejecuten en el mismo sistema."

#: ../../glossary.rst:1265
msgid "See also :mod:`venv`."
msgstr "Ver también :mod:`venv`."

#: ../../glossary.rst:1266
msgid "virtual machine"
msgstr "máquina virtual"

#: ../../glossary.rst:1268
msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""
"Un ordenador definido enteramente por software.  La máquina virtual de "
"Python ejecuta el :term:`bytecode` emitido por el compilador de bytecode."

#: ../../glossary.rst:1270
msgid "Zen of Python"
msgstr "Zen de Python"

#: ../../glossary.rst:1272
msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""
"Listado de principios y filosofías de diseño de Python que resultan útiles "
"para comprender y utilizar el lenguaje.  El listado se puede encontrar "
"escribiendo \"``import this``\" en el indicador interactivo."

#: ../../glossary.rst:264
msgid "C-contiguous"
msgstr "C-contiguous"

#: ../../glossary.rst:264
msgid "Fortran contiguous"
msgstr "Fortran contiguo"

#: ../../glossary.rst:761
msgid "magic"
msgstr "magia"

#: ../../glossary.rst:1129
msgid "special"
msgstr "especial"
