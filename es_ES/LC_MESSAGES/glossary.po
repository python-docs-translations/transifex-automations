# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-16 17:23+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../glossary.rst:5
msgid "Glossary"
msgstr "Glosario"

#: ../../glossary.rst:10
msgid "``>>>``"
msgstr "``>>>``"

#: ../../glossary.rst:12
msgid ""
"The default Python prompt of the :term:`interactive` shell.  Often seen for "
"code examples which can be executed interactively in the interpreter."
msgstr ""

#: ../../glossary.rst:15
msgid "``...``"
msgstr "``...``"

#: ../../glossary.rst:17
msgid "Can refer to:"
msgstr "Puede referirse a:"

#: ../../glossary.rst:19
msgid ""
"The default Python prompt of the :term:`interactive` shell when entering the "
"code for an indented code block, when within a pair of matching left and "
"right delimiters (parentheses, square brackets, curly braces or triple "
"quotes), or after specifying a decorator."
msgstr ""

#: ../../glossary.rst:26
msgid ""
"The three dots form of the :ref:`Ellipsis <bltin-ellipsis-object>` object."
msgstr ""

#: ../../glossary.rst:27
msgid "abstract base class"
msgstr "clase base abstracta"

#: ../../glossary.rst:29
msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy "
"or subtly wrong (for example with :ref:`magic methods <special-lookup>`).  "
"ABCs introduce virtual subclasses, which are classes that don't inherit from "
"a class but are still recognized by :func:`isinstance` and :func:"
"`issubclass`; see the :mod:`abc` module documentation.  Python comes with "
"many built-in ABCs for data structures (in the :mod:`collections.abc` "
"module), numbers (in the :mod:`numbers` module), streams (in the :mod:`io` "
"module), import finders and loaders (in the :mod:`importlib.abc` module).  "
"You can create your own ABCs with the :mod:`abc` module."
msgstr ""
"Las clases base abstractas complementan :term:`duck-typing` proporcionando "
"una forma de definir interfaces cuando otras técnicas como :func:`hasattr` "
"serían torpes o sutilmente erróneas (por ejemplo con :ref:`magic methods "
"<special-lookup>`).  Los ABC introducen subclases virtuales, que son clases "
"que no heredan de una clase pero que siguen siendo reconocidas por :func:"
"`isinstance` y :func:`issubclass`; véase la documentación del módulo :mod:"
"`abc`.  Python viene con muchos ABCs incorporados para estructuras de datos "
"(en el módulo :mod:`collections.abc` ), números (en el módulo :mod:"
"`numbers` ), flujos (en el módulo :mod:`io` ), buscadores y cargadores de "
"importaciones (en el módulo :mod:`importlib.abc` ).  Puedes crear tu propio "
"ABC con el módulo :mod:`abc`."

#: ../../glossary.rst:40
msgid "annotate function"
msgstr ""

#: ../../glossary.rst:42
msgid ""
"A function that can be called to retrieve the :term:`annotations "
"<annotation>` of an object. This function is accessible as the :attr:"
"`~object.__annotate__` attribute of functions, classes, and modules. "
"Annotate functions are a subset of :term:`evaluate functions <evaluate "
"function>`."
msgstr ""

#: ../../glossary.rst:46
msgid "annotation"
msgstr "anotación"

#: ../../glossary.rst:48
msgid ""
"A label associated with a variable, a class attribute or a function "
"parameter or return value, used by convention as a :term:`type hint`."
msgstr ""
"Etiqueta asociada a una variable, a un atributo de clase o a un parámetro o "
"valor de retorno de una función, utilizada por convención como :term:`type "
"hint`."

#: ../../glossary.rst:52
msgid ""
"Annotations of local variables cannot be accessed at runtime, but "
"annotations of global variables, class attributes, and functions can be "
"retrieved by calling :func:`annotationlib.get_annotations` on modules, "
"classes, and functions, respectively."
msgstr ""

#: ../../glossary.rst:57
msgid ""
"See :term:`variable annotation`, :term:`function annotation`, :pep:`484`, :"
"pep:`526`, and :pep:`649`, which describe this functionality. Also see :ref:"
"`annotations-howto` for best practices on working with annotations."
msgstr ""

#: ../../glossary.rst:61
msgid "argument"
msgstr "argumento"

#: ../../glossary.rst:63
msgid ""
"A value passed to a :term:`function` (or :term:`method`) when calling the "
"function.  There are two kinds of argument:"
msgstr ""
"Valor que se pasa a una :term:`función` (o :term:`método`) cuando se llama a "
"la función.  Existen dos tipos de argumentos:"

#: ../../glossary.rst:66
msgid ""
":dfn:`keyword argument`: an argument preceded by an identifier (e.g. "
"``name=``) in a function call or passed as a value in a dictionary preceded "
"by ``**``.  For example, ``3`` and ``5`` are both keyword arguments in the "
"following calls to :func:`complex`::"
msgstr ""
":dfn:`argumento de palabra clave`: un argumento precedido de un "
"identificador (por ejemplo, ``name=``) en una llamada a una función o pasado "
"como valor en un diccionario precedido de ``**``.  Por ejemplo, ``3`` y "
"``5`` son argumentos de palabra clave en las siguientes llamadas a :func:"
"`complex`::"

#: ../../glossary.rst:71
msgid ""
"complex(real=3, imag=5)\n"
"complex(**{'real': 3, 'imag': 5})"
msgstr ""

#: ../../glossary.rst:74
msgid ""
":dfn:`positional argument`: an argument that is not a keyword argument. "
"Positional arguments can appear at the beginning of an argument list and/or "
"be passed as elements of an :term:`iterable` preceded by ``*``. For example, "
"``3`` and ``5`` are both positional arguments in the following calls::"
msgstr ""
":dfn:`argumento posicional`: un argumento que no es un argumento de palabra "
"clave. Los argumentos posicionales pueden aparecer al principio de una lista "
"de argumentos y/o pasarse como elementos de un :term:`iterable` precedido "
"por ``*``. Por ejemplo, ``3`` y ``5`` son ambos argumentos posicionales en "
"las siguientes llamadas::"

#: ../../glossary.rst:80
msgid ""
"complex(3, 5)\n"
"complex(*(3, 5))"
msgstr ""

#: ../../glossary.rst:83
msgid ""
"Arguments are assigned to the named local variables in a function body. See "
"the :ref:`calls` section for the rules governing this assignment. "
"Syntactically, any expression can be used to represent an argument; the "
"evaluated value is assigned to the local variable."
msgstr ""
"Los argumentos se asignan a las variables locales nombradas en el cuerpo de "
"una función. Consulte la sección :ref:`calls` para conocer las reglas que "
"rigen esta asignación. Sintácticamente, se puede utilizar cualquier "
"expresión para representar un argumento; el valor evaluado se asigna a la "
"variable local."

#: ../../glossary.rst:88
msgid ""
"See also the :term:`parameter` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"and :pep:`362`."
msgstr ""
"Ver también la entrada del glosario :term:`parameter`, la pregunta de las "
"FAQ sobre :ref:`la diferencia entre argumentos y parámetros <faq-argument-vs-"
"parameter>`, y :pep:`362`."

#: ../../glossary.rst:91
msgid "asynchronous context manager"
msgstr "gestor de contexto asíncrono"

#: ../../glossary.rst:93
msgid ""
"An object which controls the environment seen in an :keyword:`async with` "
"statement by defining :meth:`~object.__aenter__` and :meth:`~object."
"__aexit__` methods.  Introduced by :pep:`492`."
msgstr ""

#: ../../glossary.rst:96
msgid "asynchronous generator"
msgstr "generador asíncrono"

#: ../../glossary.rst:98
msgid ""
"A function which returns an :term:`asynchronous generator iterator`.  It "
"looks like a coroutine function defined with :keyword:`async def` except "
"that it contains :keyword:`yield` expressions for producing a series of "
"values usable in an :keyword:`async for` loop."
msgstr ""
"Una función que devuelve un :term:`iterador generador asíncrono`.  Se parece "
"a una función coroutine definida con :keyword:`async def` excepto en que "
"contiene expresiones :keyword:`yield` para producir una serie de valores "
"utilizables en un bucle :keyword:`async for`."

#: ../../glossary.rst:103
msgid ""
"Usually refers to an asynchronous generator function, but may refer to an "
"*asynchronous generator iterator* in some contexts.  In cases where the "
"intended meaning isn't clear, using the full terms avoids ambiguity."
msgstr ""
"Normalmente se refiere a una función generadora asíncrona, pero puede "
"referirse a un *iterador generador asíncrono* en algunos contextos.  En los "
"casos en que el significado previsto no está claro, el uso de los términos "
"completos evita la ambigüedad."

#: ../../glossary.rst:107
msgid ""
"An asynchronous generator function may contain :keyword:`await` expressions "
"as well as :keyword:`async for`, and :keyword:`async with` statements."
msgstr ""
"Una función generadora asíncrona puede contener expresiones :keyword:`await` "
"así como sentencias :keyword:`async for`, y :keyword:`async with`."

#: ../../glossary.rst:110
msgid "asynchronous generator iterator"
msgstr "iterador generador asíncrono"

#: ../../glossary.rst:112
msgid "An object created by an :term:`asynchronous generator` function."
msgstr ""

#: ../../glossary.rst:114
msgid ""
"This is an :term:`asynchronous iterator` which when called using the :meth:"
"`~object.__anext__` method returns an awaitable object which will execute "
"the body of the asynchronous generator function until the next :keyword:"
"`yield` expression."
msgstr ""

#: ../../glossary.rst:119
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"execution state (including local variables and pending try-statements).  "
"When the *asynchronous generator iterator* effectively resumes with another "
"awaitable returned by :meth:`~object.__anext__`, it picks up where it left "
"off.  See :pep:`492` and :pep:`525`."
msgstr ""

#: ../../glossary.rst:124
msgid "asynchronous iterable"
msgstr "iterable asíncrono"

#: ../../glossary.rst:126
msgid ""
"An object, that can be used in an :keyword:`async for` statement. Must "
"return an :term:`asynchronous iterator` from its :meth:`~object.__aiter__` "
"method.  Introduced by :pep:`492`."
msgstr ""

#: ../../glossary.rst:129
msgid "asynchronous iterator"
msgstr "iterador asíncrono"

#: ../../glossary.rst:131
msgid ""
"An object that implements the :meth:`~object.__aiter__` and :meth:`~object."
"__anext__` methods.  :meth:`~object.__anext__` must return an :term:"
"`awaitable` object. :keyword:`async for` resolves the awaitables returned by "
"an asynchronous iterator's :meth:`~object.__anext__` method until it raises "
"a :exc:`StopAsyncIteration` exception.  Introduced by :pep:`492`."
msgstr ""

#: ../../glossary.rst:136
msgid "attached thread state"
msgstr ""

#: ../../glossary.rst:139
msgid "A :term:`thread state` that is active for the current OS thread."
msgstr ""

#: ../../glossary.rst:141
msgid ""
"When a :term:`thread state` is attached, the OS thread has access to the "
"full Python C API and can safely invoke the bytecode interpreter."
msgstr ""

#: ../../glossary.rst:145
msgid ""
"Unless a function explicitly notes otherwise, attempting to call the C API "
"without an attached thread state will result in a fatal error or undefined "
"behavior.  A thread state can be attached and detached explicitly by the "
"user through the C API, or implicitly by the runtime, including during "
"blocking C calls and by the bytecode interpreter in between calls."
msgstr ""

#: ../../glossary.rst:152
msgid ""
"On most builds of Python, having an attached thread state implies that the "
"caller holds the :term:`GIL` for the current interpreter, so only one OS "
"thread can have an attached thread state at a given moment. In :term:`free-"
"threaded <free threading>` builds of Python, threads can concurrently hold "
"an attached thread state, allowing for true parallelism of the bytecode "
"interpreter."
msgstr ""

#: ../../glossary.rst:158
msgid "attribute"
msgstr "atributo"

#: ../../glossary.rst:160
msgid ""
"A value associated with an object which is usually referenced by name using "
"dotted expressions. For example, if an object *o* has an attribute *a* it "
"would be referenced as *o.a*."
msgstr ""

#: ../../glossary.rst:165
msgid ""
"It is possible to give an object an attribute whose name is not an "
"identifier as defined by :ref:`identifiers`, for example using :func:"
"`setattr`, if the object allows it. Such an attribute will not be accessible "
"using a dotted expression, and would instead need to be retrieved with :func:"
"`getattr`."
msgstr ""

#: ../../glossary.rst:170
msgid "awaitable"
msgstr "awaitable"

#: ../../glossary.rst:172
msgid ""
"An object that can be used in an :keyword:`await` expression.  Can be a :"
"term:`coroutine` or an object with an :meth:`~object.__await__` method. See "
"also :pep:`492`."
msgstr ""

#: ../../glossary.rst:175
msgid "BDFL"
msgstr "BDFL"

#: ../../glossary.rst:177
msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum <https://gvanrossum."
"github.io/>`_, Python's creator."
msgstr ""
"Benevolent Dictator For Life, alias `Guido van Rossum <https://gvanrossum."
"github.io/>`_, creador de Python."

#: ../../glossary.rst:179
msgid "binary file"
msgstr "archivo binario"

#: ../../glossary.rst:181
msgid ""
"A :term:`file object` able to read and write :term:`bytes-like objects "
"<bytes-like object>`. Examples of binary files are files opened in binary "
"mode (``'rb'``, ``'wb'`` or ``'rb+'``), :data:`sys.stdin.buffer <sys."
"stdin>`, :data:`sys.stdout.buffer <sys.stdout>`, and instances of :class:`io."
"BytesIO` and :class:`gzip.GzipFile`."
msgstr ""

#: ../../glossary.rst:188
msgid ""
"See also :term:`text file` for a file object able to read and write :class:"
"`str` objects."
msgstr ""
"Ver también :term:`text file` para un objeto archivo capaz de leer y "
"escribir objetos :class:`str`."

#: ../../glossary.rst:190
msgid "borrowed reference"
msgstr ""

#: ../../glossary.rst:192
msgid ""
"In Python's C API, a borrowed reference is a reference to an object, where "
"the code using the object does not own the reference. It becomes a dangling "
"pointer if the object is destroyed. For example, a garbage collection can "
"remove the last :term:`strong reference` to the object and so destroy it."
msgstr ""

#: ../../glossary.rst:198
msgid ""
"Calling :c:func:`Py_INCREF` on the :term:`borrowed reference` is recommended "
"to convert it to a :term:`strong reference` in-place, except when the object "
"cannot be destroyed before the last usage of the borrowed reference. The :c:"
"func:`Py_NewRef` function can be used to create a new :term:`strong "
"reference`."
msgstr ""

#: ../../glossary.rst:203
msgid "bytes-like object"
msgstr "objeto tipo byte"

#: ../../glossary.rst:205
msgid ""
"An object that supports the :ref:`bufferobjects` and can export a C-:term:"
"`contiguous` buffer. This includes all :class:`bytes`, :class:`bytearray`, "
"and :class:`array.array` objects, as well as many common :class:`memoryview` "
"objects.  Bytes-like objects can be used for various operations that work "
"with binary data; these include compression, saving to a binary file, and "
"sending over a socket."
msgstr ""
"Un objeto compatible con :ref:`bufferobjects` y que puede exportar un búfer "
"C-:term:`contiguous`. Esto incluye todos los objetos :class:`bytes`, :class:"
"`bytearray` y :class:`array.array`, así como muchos objetos comunes :class:"
"`memoryview`.  Los objetos de tipo Bytes pueden utilizarse para diversas "
"operaciones que trabajan con datos binarios, como la compresión, el "
"almacenamiento en un archivo binario y el envío a través de un socket."

#: ../../glossary.rst:212
msgid ""
"Some operations need the binary data to be mutable.  The documentation often "
"refers to these as \"read-write bytes-like objects\".  Example mutable "
"buffer objects include :class:`bytearray` and a :class:`memoryview` of a :"
"class:`bytearray`. Other operations require the binary data to be stored in "
"immutable objects (\"read-only bytes-like objects\"); examples of these "
"include :class:`bytes` and a :class:`memoryview` of a :class:`bytes` object."
msgstr ""
"Algunas operaciones necesitan que los datos binarios sean mutables.  La "
"documentación suele referirse a ellos como \"objetos tipo bytes de lectura-"
"escritura\".  Algunos ejemplos de objetos de búfer mutables son :class:"
"`bytearray` y un :class:`memoryview` de un :class:`bytearray`. Otras "
"operaciones requieren que los datos binarios se almacenen en objetos "
"inmutables (\"objetos tipo bytes de sólo lectura\"); algunos ejemplos son :"
"class:`bytes` y un :class:`memoryview` de un objeto :class:`bytes`."

#: ../../glossary.rst:220
msgid "bytecode"
msgstr "código de bytes"

#: ../../glossary.rst:222
msgid ""
"Python source code is compiled into bytecode, the internal representation of "
"a Python program in the CPython interpreter.  The bytecode is also cached in "
"``.pyc`` files so that executing the same file is faster the second time "
"(recompilation from source to bytecode can be avoided).  This \"intermediate "
"language\" is said to run on a :term:`virtual machine` that executes the "
"machine code corresponding to each bytecode. Do note that bytecodes are not "
"expected to work between different Python virtual machines, nor to be stable "
"between Python releases."
msgstr ""
"El código fuente de Python se compila en bytecode, la representación interna "
"de un programa Python en el intérprete CPython.  El bytecode también se "
"almacena en caché en archivos ``.pyc`` para que la ejecución del mismo "
"archivo sea más rápida la segunda vez (se puede evitar la recompilación de "
"código fuente a bytecode).  Se dice que este \"lenguaje intermedio\" se "
"ejecuta en una :term:`máquina virtual` que ejecuta el código máquina "
"correspondiente a cada bytecode. Tenga en cuenta que no se espera que los "
"bytecodes funcionen entre diferentes máquinas virtuales de Python, ni que "
"sean estables entre versiones de Python."

#: ../../glossary.rst:232
msgid ""
"A list of bytecode instructions can be found in the documentation for :ref:"
"`the dis module <bytecodes>`."
msgstr ""
"Encontrará una lista de instrucciones de bytecode en la documentación de :"
"ref:`el módulo dis <bytecodes>`."

#: ../../glossary.rst:234
msgid "callable"
msgstr "invocable"

#: ../../glossary.rst:236
msgid ""
"A callable is an object that can be called, possibly with a set of arguments "
"(see :term:`argument`), with the following syntax::"
msgstr ""

#: ../../glossary.rst:239
msgid "callable(argument1, argument2, argumentN)"
msgstr ""

#: ../../glossary.rst:241
msgid ""
"A :term:`function`, and by extension a :term:`method`, is a callable. An "
"instance of a class that implements the :meth:`~object.__call__` method is "
"also a callable."
msgstr ""

#: ../../glossary.rst:244
msgid "callback"
msgstr "devolución de llamada"

#: ../../glossary.rst:246
msgid ""
"A subroutine function which is passed as an argument to be executed at some "
"point in the future."
msgstr ""
"Una función de subrutina que se pasa como argumento para que se ejecute en "
"algún momento en el futuro."

#: ../../glossary.rst:248
msgid "class"
msgstr "clase"

#: ../../glossary.rst:250
msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""
"Una plantilla para crear objetos definidos por el usuario. Las definiciones "
"de clase contienen normalmente definiciones de métodos que operan sobre "
"instancias de la clase."

#: ../../glossary.rst:253
msgid "class variable"
msgstr "variable de clase"

#: ../../glossary.rst:255
msgid ""
"A variable defined in a class and intended to be modified only at class "
"level (i.e., not in an instance of the class)."
msgstr ""
"Variable definida en una clase y destinada a ser modificada únicamente a "
"nivel de clase (es decir, no en una instancia de la clase)."

#: ../../glossary.rst:257
msgid "closure variable"
msgstr ""

#: ../../glossary.rst:259
msgid ""
"A :term:`free variable` referenced from a :term:`nested scope` that is "
"defined in an outer scope rather than being resolved at runtime from the "
"globals or builtin namespaces. May be explicitly defined with the :keyword:"
"`nonlocal` keyword to allow write access, or implicitly defined if the "
"variable is only being read."
msgstr ""

#: ../../glossary.rst:264
msgid ""
"For example, in the ``inner`` function in the following code, both ``x`` and "
"``print`` are :term:`free variables <free variable>`, but only ``x`` is a "
"*closure variable*::"
msgstr ""

#: ../../glossary.rst:267
msgid ""
"def outer():\n"
"    x = 0\n"
"    def inner():\n"
"        nonlocal x\n"
"        x += 1\n"
"        print(x)\n"
"    return inner"
msgstr ""

#: ../../glossary.rst:275
msgid ""
"Due to the :attr:`codeobject.co_freevars` attribute (which, despite its "
"name, only includes the names of closure variables rather than listing all "
"referenced free variables), the more general :term:`free variable` term is "
"sometimes used even when the intended meaning is to refer specifically to "
"closure variables."
msgstr ""

#: ../../glossary.rst:279
msgid "complex number"
msgstr "número complejo"

#: ../../glossary.rst:281
msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're "
"not aware of a need for them, it's almost certain you can safely ignore them."
msgstr ""
"Una extensión del conocido sistema de números reales en el que todos los "
"números se expresan como suma de una parte real y una parte imaginaria. Los "
"números imaginarios son múltiplos reales de la unidad imaginaria (la raíz "
"cuadrada de ``-1``), que suele escribirse``i`` en matemáticas o ``j`` en "
"ingeniería. Python tiene soporte incorporado para los números complejos, que "
"se escriben con esta última notación; la parte imaginaria se escribe con un "
"sufijo``j``, e.g., ``3+1j``.  Para acceder a los equivalentes complejos del "
"módulo :mod:`math`, use :mod:`cmath`.  El uso de números complejos es una "
"característica matemática bastante avanzada. Si no sabe que los necesita, es "
"casi seguro que puede ignorarlos sin problemas."

#: ../../glossary.rst:291
msgid "context"
msgstr ""

#: ../../glossary.rst:293
msgid ""
"This term has different meanings depending on where and how it is used. Some "
"common meanings:"
msgstr ""

#: ../../glossary.rst:296
msgid ""
"The temporary state or environment established by a :term:`context manager` "
"via a :keyword:`with` statement."
msgstr ""

#: ../../glossary.rst:298
msgid ""
"The collection of key­value bindings associated with a particular :class:"
"`contextvars.Context` object and accessed via :class:`~contextvars."
"ContextVar` objects.  Also see :term:`context variable`."
msgstr ""

#: ../../glossary.rst:302
msgid ""
"A :class:`contextvars.Context` object.  Also see :term:`current context`."
msgstr ""

#: ../../glossary.rst:304
msgid "context management protocol"
msgstr ""

#: ../../glossary.rst:306
msgid ""
"The :meth:`~object.__enter__` and :meth:`~object.__exit__` methods called by "
"the :keyword:`with` statement.  See :pep:`343`."
msgstr ""

#: ../../glossary.rst:308
msgid "context manager"
msgstr "gestor de contexto"

#: ../../glossary.rst:310
msgid ""
"An object which implements the :term:`context management protocol` and "
"controls the environment seen in a :keyword:`with` statement.  See :pep:"
"`343`."
msgstr ""

#: ../../glossary.rst:313
msgid "context variable"
msgstr "variable contextual"

#: ../../glossary.rst:315
msgid ""
"A variable whose value depends on which context is the :term:`current "
"context`.  Values are accessed via :class:`contextvars.ContextVar` objects.  "
"Context variables are primarily used to isolate state between concurrent "
"asynchronous tasks."
msgstr ""

#: ../../glossary.rst:319
msgid "contiguous"
msgstr "contiguo"

#: ../../glossary.rst:323
msgid ""
"A buffer is considered contiguous exactly if it is either *C-contiguous* or "
"*Fortran contiguous*.  Zero-dimensional buffers are C and Fortran "
"contiguous.  In one-dimensional arrays, the items must be laid out in memory "
"next to each other, in order of increasing indexes starting from zero.  In "
"multidimensional C-contiguous arrays, the last index varies the fastest when "
"visiting items in order of memory address.  However, in Fortran contiguous "
"arrays, the first index varies the fastest."
msgstr ""
"Un búfer se considera contiguo exactamente si es *Contiguo en C* o *Contiguo "
"en Fortran*.  Los búferes de dimensión cero son contiguos en C y Fortran.  "
"En las matrices unidimensionales, los elementos deben disponerse en memoria "
"unos junto a otros, en orden de índices crecientes empezando por cero.  En "
"las matrices multidimensionales contiguas de C, el último índice es el que "
"varía más rápidamente al visitar los elementos por orden de dirección de "
"memoria.  Sin embargo, en las matrices contiguas de Fortran, el primer "
"índice es el que varía más rápidamente."

#: ../../glossary.rst:331
msgid "coroutine"
msgstr "coroutine"

#: ../../glossary.rst:333
msgid ""
"Coroutines are a more generalized form of subroutines. Subroutines are "
"entered at one point and exited at another point.  Coroutines can be "
"entered, exited, and resumed at many different points.  They can be "
"implemented with the :keyword:`async def` statement.  See also :pep:`492`."
msgstr ""
"Las coroutines son una forma más generalizada de subrutinas. Las subrutinas "
"se introducen en un punto y se abandonan en otro.  Las coroutines se pueden "
"introducir, salir y reanudar en muchos puntos diferentes.  Pueden "
"implementarse con la sentencia :keyword:`async def`.  Ver también :pep:`492`."

#: ../../glossary.rst:338
msgid "coroutine function"
msgstr "función coroutine"

#: ../../glossary.rst:340
msgid ""
"A function which returns a :term:`coroutine` object.  A coroutine function "
"may be defined with the :keyword:`async def` statement, and may contain :"
"keyword:`await`, :keyword:`async for`, and :keyword:`async with` keywords.  "
"These were introduced by :pep:`492`."
msgstr ""
"Una función que devuelve un objeto :term:`coroutine`.  Una función coroutine "
"puede definirse con la sentencia :keyword:`async def`, y puede contener las "
"palabras clave :keyword:`await`, :keyword:`async for`, y :keyword:`async "
"with`.  Éstas fueron introducidas por :pep:`492`."

#: ../../glossary.rst:345
msgid "CPython"
msgstr "CPython"

#: ../../glossary.rst:347
msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <https://www.python.org>`_.  The term \"CPython\" "
"is used when necessary to distinguish this implementation from others such "
"as Jython or IronPython."
msgstr ""
"La implementación canónica del lenguaje de programación Python, tal y como "
"se distribuye en `python.org <https://www.python.org>`_.  El término "
"\"CPython\" se utiliza cuando es necesario para distinguir esta "
"implementación de otras como Jython o IronPython."

#: ../../glossary.rst:351
msgid "current context"
msgstr ""

#: ../../glossary.rst:353
msgid ""
"The :term:`context` (:class:`contextvars.Context` object) that is currently "
"used by :class:`~contextvars.ContextVar` objects to access (get or set) the "
"values of :term:`context variables <context variable>`.  Each thread has its "
"own current context.  Frameworks for executing asynchronous tasks (see :mod:"
"`asyncio`) associate each task with a context which becomes the current "
"context whenever the task starts or resumes execution."
msgstr ""

#: ../../glossary.rst:359
msgid "cyclic isolate"
msgstr ""

#: ../../glossary.rst:361
msgid ""
"A subgroup of one or more objects that reference each other in a reference "
"cycle, but are not referenced by objects outside the group.  The goal of "
"the :term:`cyclic garbage collector <garbage collection>` is to identify "
"these groups and break the reference cycles so that the memory can be "
"reclaimed."
msgstr ""

#: ../../glossary.rst:365
msgid "decorator"
msgstr "decorador"

#: ../../glossary.rst:367
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""
"Una función que devuelve otra función, normalmente aplicada como una "
"transformación de función utilizando la sintaxis ``@wrapper``.  Ejemplos "
"comunes de decoradores son :func:`classmethod` y :func:`staticmethod`."

#: ../../glossary.rst:371
msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr ""
"La sintaxis del decorador es meramente azúcar sintáctico, las siguientes dos "
"definiciones de función son semánticamente equivalentes::"

#: ../../glossary.rst:374
msgid ""
"def f(arg):\n"
"    ...\n"
"f = staticmethod(f)\n"
"\n"
"@staticmethod\n"
"def f(arg):\n"
"    ..."
msgstr ""

#: ../../glossary.rst:382
msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class "
"definitions <class>` for more about decorators."
msgstr ""
"El mismo concepto existe para las clases, pero su uso es menos frecuente.  "
"Ver la documentación de :ref:`definiciones de funciones <function>` y :ref:"
"`definiciones de clases <class>` para obtener más información sobre los "
"decoradores."

#: ../../glossary.rst:385
msgid "descriptor"
msgstr "descriptor"

#: ../../glossary.rst:387
msgid ""
"Any object which defines the methods :meth:`~object.__get__`, :meth:`~object."
"__set__`, or :meth:`~object.__delete__`. When a class attribute is a "
"descriptor, its special binding behavior is triggered upon attribute "
"lookup.  Normally, using *a.b* to get, set or delete an attribute looks up "
"the object named *b* in the class dictionary for *a*, but if *b* is a "
"descriptor, the respective descriptor method gets called.  Understanding "
"descriptors is a key to a deep understanding of Python because they are the "
"basis for many features including functions, methods, properties, class "
"methods, static methods, and reference to super classes."
msgstr ""

#: ../../glossary.rst:398
msgid ""
"For more information about descriptors' methods, see :ref:`descriptors` or "
"the :ref:`Descriptor How To Guide <descriptorhowto>`."
msgstr ""
"Para obtener más información sobre los métodos de los descriptores, ver :ref:"
"`descriptors` o la :ref:`Guía práctica de descriptores <descriptorhowto>`."

#: ../../glossary.rst:400
msgid "dictionary"
msgstr "diccionario"

#: ../../glossary.rst:402
msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`~object.__hash__` and :meth:`~object.__eq__` "
"methods. Called a hash in Perl."
msgstr ""

#: ../../glossary.rst:406
msgid "dictionary comprehension"
msgstr "diccionario comprensión"

#: ../../glossary.rst:408
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a dictionary with the results. ``results = {n: n ** 2 for n in "
"range(10)}`` generates a dictionary containing key ``n`` mapped to value ``n "
"** 2``. See :ref:`comprehensions`."
msgstr ""
"Una forma compacta de procesar todos o parte de los elementos de un iterable "
"y devolver un diccionario con los resultados. ``results = {n: n ** 2 for n "
"in range(10)}`` genera un diccionario que contiene la clave ``n`` asignada "
"al valor ``n ** 2``. Véase :ref:`comprehensions`."

#: ../../glossary.rst:412
msgid "dictionary view"
msgstr "vista de diccionario"

#: ../../glossary.rst:414
msgid ""
"The objects returned from :meth:`dict.keys`, :meth:`dict.values`, and :meth:"
"`dict.items` are called dictionary views. They provide a dynamic view on the "
"dictionary’s entries, which means that when the dictionary changes, the view "
"reflects these changes. To force the dictionary view to become a full list "
"use ``list(dictview)``.  See :ref:`dict-views`."
msgstr ""
"Los objetos devueltos por :meth:`dict.keys`, :meth:`dict.values`, y :meth:"
"`dict.items` se denominan vistas del diccionario. Proporcionan una vista "
"dinámica de las entradas del diccionario, lo que significa que cuando el "
"diccionario cambia, la vista refleja estos cambios. Para forzar que la vista "
"del diccionario se convierta en una lista completa utilice "
"``list(dictview)``.  Ver :ref:`dict-views`."

#: ../../glossary.rst:420
msgid "docstring"
msgstr "docstring"

#: ../../glossary.rst:422
msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`~definition.__doc__` attribute of the "
"enclosing class, function or module.  Since it is available via "
"introspection, it is the canonical place for documentation of the object."
msgstr ""

#: ../../glossary.rst:428
msgid "duck-typing"
msgstr "duck-typing"

#: ../../glossary.rst:430
msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be "
"a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic "
"substitution.  Duck-typing avoids tests using :func:`type` or :func:"
"`isinstance`.  (Note, however, that duck-typing can be complemented with :"
"term:`abstract base classes <abstract base class>`.)  Instead, it typically "
"employs :func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""
"Un estilo de programación que no mira el tipo de un objeto para determinar "
"si tiene la interfaz adecuada; en su lugar, el método o atributo simplemente "
"se llama o se utiliza (\"Si parece un pato y grazna como un pato, debe ser "
"un pato\"). Al hacer hincapié en las interfaces en lugar de en tipos "
"específicos, el código bien diseñado mejora su flexibilidad al permitir la "
"sustitución polimórfica.  La tipificación-pato evita las pruebas que "
"utilizan :func:`type` o :func:`isinstance`. (Observe, sin embargo, que la "
"tipificación-pato puede complementarse con :term:`abstract base classes "
"<abstract base class>`.)  En su lugar, suele emplear pruebas :func:`hasattr` "
"o programación :term:`EAFP`."

#: ../../glossary.rst:439
msgid "dunder"
msgstr ""

#: ../../glossary.rst:441
msgid ""
"An informal short-hand for \"double underscore\", used when talking about a :"
"term:`special method`. For example, ``__init__`` is often pronounced "
"\"dunder init\"."
msgstr ""

#: ../../glossary.rst:444
msgid "EAFP"
msgstr "EAFP"

#: ../../glossary.rst:446
msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""
"Es más fácil pedir perdón que permiso.  Este estilo de codificación común de "
"Python asume la existencia de claves o atributos válidos y captura "
"excepciones si la suposición resulta falsa.  Este estilo limpio y rápido se "
"caracteriza por la presencia de muchas sentencias :keyword:`try` y :keyword:"
"`except`.  La técnica contrasta con el estilo :term:`LBYL` común a muchos "
"otros lenguajes como C."

#: ../../glossary.rst:452
msgid "evaluate function"
msgstr ""

#: ../../glossary.rst:454
msgid ""
"A function that can be called to evaluate a lazily evaluated attribute of an "
"object, such as the value of type aliases created with the :keyword:`type` "
"statement."
msgstr ""

#: ../../glossary.rst:457
msgid "expression"
msgstr "expresión"

#: ../../glossary.rst:459
msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`while`.  Assignments are also statements, not "
"expressions."
msgstr ""
"Una parte de la sintaxis que puede evaluarse para obtener un valor.  En "
"otras palabras, una expresión es una acumulación de elementos de expresión "
"como literales, nombres, acceso a atributos, operadores o llamadas a "
"funciones que devuelven un valor.  A diferencia de muchos otros lenguajes, "
"no todas las construcciones del lenguaje son expresiones.  También existen :"
"term:`statement` que no pueden utilizarse como expresiones, como :keyword:"
"`while`.  Las asignaciones también son declaraciones, no expresiones."

#: ../../glossary.rst:466
msgid "extension module"
msgstr "módulo de ampliación"

#: ../../glossary.rst:468
msgid ""
"A module written in C or C++, using Python's C API to interact with the core "
"and with user code."
msgstr ""
"Un módulo escrito en C o C++, que utiliza la API C de Python para "
"interactuar con el núcleo y con el código de usuario."

#: ../../glossary.rst:470
msgid "f-string"
msgstr "cadena-f"

#: ../../glossary.rst:471
msgid "f-strings"
msgstr ""

#: ../../glossary.rst:473
msgid ""
"String literals prefixed with ``f`` or ``F`` are commonly called \"f-"
"strings\" which is short for :ref:`formatted string literals <f-strings>`.  "
"See also :pep:`498`."
msgstr ""

#: ../../glossary.rst:476
msgid "file object"
msgstr "objeto de archivo"

#: ../../glossary.rst:478
msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`!read` "
"or :meth:`!write`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard input/"
"output, in-memory buffers, sockets, pipes, etc.).  File objects are also "
"called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""

#: ../../glossary.rst:486
msgid ""
"There are actually three categories of file objects: raw :term:`binary files "
"<binary file>`, buffered :term:`binary files <binary file>` and :term:`text "
"files <text file>`. Their interfaces are defined in the :mod:`io` module.  "
"The canonical way to create a file object is by using the :func:`open` "
"function."
msgstr ""
"En realidad, existen tres categorías de objetos de archivo: raw :term:"
"`archivos binarios <binary file>`, buffered :term:`archivos binarios <binary "
"file>` y :term:`archivos de texto <text file>`. Sus interfaces se definen en "
"el módulo :mod:`io`.  La forma canónica de crear un objeto archivo es "
"utilizando la función :func:`open`."

#: ../../glossary.rst:491
msgid "file-like object"
msgstr "objeto similar a un archivo"

#: ../../glossary.rst:493
msgid "A synonym for :term:`file object`."
msgstr "Un sinónimo de :term:`file object`."

#: ../../glossary.rst:494
msgid "filesystem encoding and error handler"
msgstr ""

#: ../../glossary.rst:496
msgid ""
"Encoding and error handler used by Python to decode bytes from the operating "
"system and encode Unicode to the operating system."
msgstr ""

#: ../../glossary.rst:499
msgid ""
"The filesystem encoding must guarantee to successfully decode all bytes "
"below 128. If the file system encoding fails to provide this guarantee, API "
"functions can raise :exc:`UnicodeError`."
msgstr ""

#: ../../glossary.rst:503
msgid ""
"The :func:`sys.getfilesystemencoding` and :func:`sys."
"getfilesystemencodeerrors` functions can be used to get the filesystem "
"encoding and error handler."
msgstr ""

#: ../../glossary.rst:507
msgid ""
"The :term:`filesystem encoding and error handler` are configured at Python "
"startup by the :c:func:`PyConfig_Read` function: see :c:member:`~PyConfig."
"filesystem_encoding` and :c:member:`~PyConfig.filesystem_errors` members of :"
"c:type:`PyConfig`."
msgstr ""

#: ../../glossary.rst:512
msgid "See also the :term:`locale encoding`."
msgstr ""

#: ../../glossary.rst:513
msgid "finder"
msgstr "buscador"

#: ../../glossary.rst:515
msgid ""
"An object that tries to find the :term:`loader` for a module that is being "
"imported."
msgstr ""
"Un objeto que intenta encontrar el :term:`loader` para un módulo que se está "
"importando."

#: ../../glossary.rst:518
msgid ""
"There are two types of finder: :term:`meta path finders <meta path finder>` "
"for use with :data:`sys.meta_path`, and :term:`path entry finders <path "
"entry finder>` for use with :data:`sys.path_hooks`."
msgstr ""

#: ../../glossary.rst:522
msgid ""
"See :ref:`finders-and-loaders` and :mod:`importlib` for much more detail."
msgstr ""

#: ../../glossary.rst:523
msgid "floor division"
msgstr "división de suelo"

#: ../../glossary.rst:525
msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""
"División matemática que redondea hacia abajo al entero más próximo. El "
"operador de división por defecto es ``//``.  Por ejemplo, la expresión "
"``11 // 4`` evalúa a ``2`` en contraste con el ``2.75`` devuelto por la "
"división float true. Observe que ``(-11) // 4`` es ``-3`` because that is "
"``-2.75`` redondeado *downward*. Ver :pep:`238`."

#: ../../glossary.rst:530
msgid "free threading"
msgstr ""

#: ../../glossary.rst:532
msgid ""
"A threading model where multiple threads can run Python bytecode "
"simultaneously within the same interpreter.  This is in contrast to the :"
"term:`global interpreter lock` which allows only one thread to execute "
"Python bytecode at a time.  See :pep:`703`."
msgstr ""

#: ../../glossary.rst:536
msgid "free variable"
msgstr ""

#: ../../glossary.rst:538
msgid ""
"Formally, as defined in the :ref:`language execution model <bind_names>`, a "
"free variable is any variable used in a namespace which is not a local "
"variable in that namespace. See :term:`closure variable` for an example. "
"Pragmatically, due to the name of the :attr:`codeobject.co_freevars` "
"attribute, the term is also sometimes used as a synonym for :term:`closure "
"variable`."
msgstr ""

#: ../../glossary.rst:543
msgid "function"
msgstr "función"

#: ../../glossary.rst:545
msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more :term:`arguments <argument>` which may be used in the "
"execution of the body. See also :term:`parameter`, :term:`method`, and the :"
"ref:`function` section."
msgstr ""
"Una serie de sentencias que devuelven algún valor a un invocador. También se "
"le pueden pasar cero o más :term:`arguments <argument>` que pueden ser "
"utilizados en la ejecución del cuerpo. Véase también :term:`parameter`, :"
"term:`method` y la sección :ref:`function`."

#: ../../glossary.rst:549
msgid "function annotation"
msgstr "anotación de función"

#: ../../glossary.rst:551
msgid "An :term:`annotation` of a function parameter or return value."
msgstr ""
"Una :term:`annotation` de un parámetro o valor de retorno de una función."

#: ../../glossary.rst:553
msgid ""
"Function annotations are usually used for :term:`type hints <type hint>`: "
"for example, this function is expected to take two :class:`int` arguments "
"and is also expected to have an :class:`int` return value::"
msgstr ""
"Las anotaciones de función se utilizan normalmente para :term:`type hints "
"<type hint>`: por ejemplo, se espera que esta función tome dos argumentos :"
"class:`int` y también se espera que tenga un valor de retorno :class:`int`::"

#: ../../glossary.rst:558
msgid ""
"def sum_two_numbers(a: int, b: int) -> int:\n"
"   return a + b"
msgstr ""

#: ../../glossary.rst:561
msgid "Function annotation syntax is explained in section :ref:`function`."
msgstr ""
"La sintaxis de las anotaciones de funciones se explica en la sección :ref:"
"`function`."

#: ../../glossary.rst:563
msgid ""
"See :term:`variable annotation` and :pep:`484`, which describe this "
"functionality. Also see :ref:`annotations-howto` for best practices on "
"working with annotations."
msgstr ""

#: ../../glossary.rst:567
msgid "__future__"
msgstr "__futuro__"

#: ../../glossary.rst:569
msgid ""
"A :ref:`future statement <future>`, ``from __future__ import <feature>``, "
"directs the compiler to compile the current module using syntax or semantics "
"that will become standard in a future release of Python. The :mod:"
"`__future__` module documents the possible values of *feature*.  By "
"importing this module and evaluating its variables, you can see when a new "
"feature was first added to the language and when it will (or did) become the "
"default::"
msgstr ""
"Una sentencia :ref:`future <future>`, ``from __future__ import <feature>``, "
"indica al compilador que compile el módulo actual utilizando la sintaxis o "
"semántica que se convertirá en estándar en una futura versión de Python. El "
"módulo :mod:`__future__` documenta los posibles valores de *feature*.  "
"Importando este módulo y evaluando sus variables, puedes ver cuándo una "
"nueva característica fue añadida por primera vez al lenguaje y cuándo se "
"convertirá (o se convirtió) en la predeterminada::"

#: ../../glossary.rst:577
msgid ""
">>> import __future__\n"
">>> __future__.division\n"
"_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)"
msgstr ""

#: ../../glossary.rst:580
msgid "garbage collection"
msgstr "recogida de basuras"

#: ../../glossary.rst:582
msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles.  The garbage collector "
"can be controlled using the :mod:`gc` module."
msgstr ""
"El proceso de liberar memoria cuando ya no se utiliza.  Python realiza la "
"recolección de basura mediante el conteo de referencias y un recolector de "
"basura cíclico que es capaz de detectar y romper los ciclos de referencia.  "
"El recolector de basura puede controlarse mediante el módulo :mod:`gc`."

#: ../../glossary.rst:587 ../../glossary.rst:588
msgid "generator"
msgstr "generador"

#: ../../glossary.rst:590
msgid ""
"A function which returns a :term:`generator iterator`.  It looks like a "
"normal function except that it contains :keyword:`yield` expressions for "
"producing a series of values usable in a for-loop or that can be retrieved "
"one at a time with the :func:`next` function."
msgstr ""
"Función que devuelve un :term:`generator iterator`.  Parece una función "
"normal, salvo que contiene expresiones :keyword:`yield` para producir una "
"serie de valores utilizables en un for-loop o que pueden recuperarse de uno "
"en uno con la función :func:`next`."

#: ../../glossary.rst:595
msgid ""
"Usually refers to a generator function, but may refer to a *generator "
"iterator* in some contexts.  In cases where the intended meaning isn't "
"clear, using the full terms avoids ambiguity."
msgstr ""
"Normalmente se refiere a una función generadora, pero puede referirse a un "
"*iterador generador* en algunos contextos.  En los casos en los que el "
"significado previsto no está claro, el uso de los términos completos evita "
"la ambigüedad."

#: ../../glossary.rst:598
msgid "generator iterator"
msgstr "iterador generador"

#: ../../glossary.rst:600
msgid "An object created by a :term:`generator` function."
msgstr "Objeto creado por una :term:`generator` function."

#: ../../glossary.rst:602
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"execution state (including local variables and pending try-statements).  "
"When the *generator iterator* resumes, it picks up where it left off (in "
"contrast to functions which start fresh on every invocation)."
msgstr ""

#: ../../glossary.rst:608 ../../glossary.rst:609
msgid "generator expression"
msgstr "expresión generadora"

#: ../../glossary.rst:611
msgid ""
"An :term:`expression` that returns an :term:`iterator`.  It looks like a "
"normal expression followed by a :keyword:`!for` clause defining a loop "
"variable, range, and an optional :keyword:`!if` clause.  The combined "
"expression generates values for an enclosing function::"
msgstr ""

#: ../../glossary.rst:616
msgid ""
">>> sum(i*i for i in range(10))         # sum of squares 0, 1, 4, ... 81\n"
"285"
msgstr ""

#: ../../glossary.rst:618
msgid "generic function"
msgstr "función genérica"

#: ../../glossary.rst:620
msgid ""
"A function composed of multiple functions implementing the same operation "
"for different types. Which implementation should be used during a call is "
"determined by the dispatch algorithm."
msgstr ""
"Función compuesta por varias funciones que implementan la misma operación "
"para distintos tipos. El algoritmo de envío determina qué implementación "
"debe utilizarse durante una llamada."

#: ../../glossary.rst:624
msgid ""
"See also the :term:`single dispatch` glossary entry, the :func:`functools."
"singledispatch` decorator, and :pep:`443`."
msgstr ""
"Véase también la entrada del glosario :term:`single dispatch`, el decorador :"
"func:`functools.singledispatch` y :pep:`443`."

#: ../../glossary.rst:626
msgid "generic type"
msgstr "tipo genérico"

#: ../../glossary.rst:628
msgid ""
"A :term:`type` that can be parameterized; typically a :ref:`container "
"class<sequence-types>` such as :class:`list` or :class:`dict`. Used for :"
"term:`type hints <type hint>` and :term:`annotations <annotation>`."
msgstr ""
"Un :term:`type` que puede parametrizarse; normalmente una :ref:`container "
"class<sequence-types>` como :class:`list` o :class:`dict`. Se utiliza para :"
"term:`type hints <type hint>` y :term:`annotations <annotation>`."

#: ../../glossary.rst:633
msgid ""
"For more details, see :ref:`generic alias types<types-genericalias>`, :pep:"
"`483`, :pep:`484`, :pep:`585`, and the :mod:`typing` module."
msgstr ""
"Para más detalles, ver :ref:`generic alias types<types-genericalias>`, :pep:"
"`483`, :pep:`484`, :pep:`585`, y el módulo :mod:`typing`."

#: ../../glossary.rst:635
msgid "GIL"
msgstr "GIL"

#: ../../glossary.rst:637
msgid "See :term:`global interpreter lock`."
msgstr "Ver :term:`global interpreter lock`."

#: ../../glossary.rst:638
msgid "global interpreter lock"
msgstr "bloqueo global del intérprete"

#: ../../glossary.rst:640
msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""
"El mecanismo utilizado por el intérprete :term:`CPython` para asegurar que "
"sólo un hilo ejecuta Python :term:`bytecode` a la vez. Esto simplifica la "
"implementación de CPython haciendo que el modelo de objetos (incluyendo "
"tipos incorporados críticos como :class:`dict`) sea implícitamente seguro "
"contra el acceso concurrente.  El bloqueo de todo el intérprete hace que sea "
"más fácil para el intérprete ser multi-hilo, a expensas de gran parte del "
"paralelismo que ofrecen las máquinas multiprocesador."

#: ../../glossary.rst:649
msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally intensive tasks "
"such as compression or hashing.  Also, the GIL is always released when doing "
"I/O."
msgstr ""

#: ../../glossary.rst:654
msgid ""
"As of Python 3.13, the GIL can be disabled using the :option:`--disable-gil` "
"build configuration. After building Python with this option, code must be "
"run with :option:`-X gil=0 <-X>` or after setting the :envvar:`PYTHON_GIL=0 "
"<PYTHON_GIL>` environment variable. This feature enables improved "
"performance for multi-threaded applications and makes it easier to use multi-"
"core CPUs efficiently. For more details, see :pep:`703`."
msgstr ""

#: ../../glossary.rst:661
msgid ""
"In prior versions of Python's C API, a function might declare that it "
"requires the GIL to be held in order to use it. This refers to having an :"
"term:`attached thread state`."
msgstr ""

#: ../../glossary.rst:664
msgid "hash-based pyc"
msgstr "pyc basado en hash"

#: ../../glossary.rst:666
msgid ""
"A bytecode cache file that uses the hash rather than the last-modified time "
"of the corresponding source file to determine its validity. See :ref:`pyc-"
"invalidation`."
msgstr ""
"Un archivo de caché de bytecode que utiliza el hash en lugar de la hora de "
"última modificación del archivo fuente correspondiente para determinar su "
"validez. Véase :ref:`pyc-invalidation`."

#: ../../glossary.rst:669
msgid "hashable"
msgstr "hashable"

#: ../../glossary.rst:671
msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`~object.__hash__` method), and can be "
"compared to other objects (it needs an :meth:`~object.__eq__` method). "
"Hashable objects which compare equal must have the same hash value."
msgstr ""

#: ../../glossary.rst:677
msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""
"La hashabilidad hace que un objeto pueda utilizarse como clave de "
"diccionario y como miembro de un conjunto, ya que estas estructuras de datos "
"utilizan el valor hash internamente."

#: ../../glossary.rst:680
msgid ""
"Most of Python's immutable built-in objects are hashable; mutable containers "
"(such as lists or dictionaries) are not; immutable containers (such as "
"tuples and frozensets) are only hashable if their elements are hashable.  "
"Objects which are instances of user-defined classes are hashable by "
"default.  They all compare unequal (except with themselves), and their hash "
"value is derived from their :func:`id`."
msgstr ""
"La mayoría de los objetos inmutables incorporados en Python son hashables; "
"los contenedores mutables (como listas o diccionarios) no lo son; los "
"contenedores inmutables (como tuplas y frozensets) sólo son hashables si sus "
"elementos son hashables.  Los objetos que son instancias de clases definidas "
"por el usuario son hashables por defecto.  Todos ellos se comparan de forma "
"desigual (excepto consigo mismos), y su valor hash se deriva de su :func:"
"`id`."

#: ../../glossary.rst:687
msgid "IDLE"
msgstr "IDLE"

#: ../../glossary.rst:689
msgid ""
"An Integrated Development and Learning Environment for Python. :ref:`idle` "
"is a basic editor and interpreter environment which ships with the standard "
"distribution of Python."
msgstr ""

#: ../../glossary.rst:692
msgid "immortal"
msgstr ""

#: ../../glossary.rst:694
msgid ""
"*Immortal objects* are a CPython implementation detail introduced in :pep:"
"`683`."
msgstr ""

#: ../../glossary.rst:697
msgid ""
"If an object is immortal, its :term:`reference count` is never modified, and "
"therefore it is never deallocated while the interpreter is running. For "
"example, :const:`True` and :const:`None` are immortal in CPython."
msgstr ""

#: ../../glossary.rst:701
msgid ""
"Immortal objects can be identified via :func:`sys._is_immortal`, or via :c:"
"func:`PyUnstable_IsImmortal` in the C API."
msgstr ""

#: ../../glossary.rst:703
msgid "immutable"
msgstr "inmutable"

#: ../../glossary.rst:705
msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""
"Objeto con un valor fijo.  Los objetos inmutables incluyen números, cadenas "
"y tuplas.  Un objeto de este tipo no puede modificarse.  Si hay que "
"almacenar un valor diferente, hay que crear un nuevo objeto.  Desempeñan un "
"papel importante en lugares donde se necesita un valor hash constante, por "
"ejemplo como clave en un diccionario."

#: ../../glossary.rst:710
msgid "import path"
msgstr "ruta de importación"

#: ../../glossary.rst:712
msgid ""
"A list of locations (or :term:`path entries <path entry>`) that are searched "
"by the :term:`path based finder` for modules to import. During import, this "
"list of locations usually comes from :data:`sys.path`, but for subpackages "
"it may also come from the parent package's ``__path__`` attribute."
msgstr ""
"Una lista de ubicaciones (o :term:`path entries <path entry>`) que son "
"buscadas por el :term:`path based finder` para módulos a importar. Durante "
"la importación, esta lista de ubicaciones normalmente proviene de :data:`sys."
"path`, pero para los subpaquetes también puede provenir del atributo "
"``__path__`` del paquete padre."

#: ../../glossary.rst:717
msgid "importing"
msgstr "importando"

#: ../../glossary.rst:719
msgid ""
"The process by which Python code in one module is made available to Python "
"code in another module."
msgstr ""
"Proceso por el cual el código Python de un módulo se pone a disposición del "
"código Python de otro módulo."

#: ../../glossary.rst:721
msgid "importer"
msgstr "importador"

#: ../../glossary.rst:723
msgid ""
"An object that both finds and loads a module; both a :term:`finder` and :"
"term:`loader` object."
msgstr ""
"Un objeto que encuentra y carga un módulo; es a la vez un objeto :term:"
"`finder` y :term:`loader`."

#: ../../glossary.rst:725
msgid "interactive"
msgstr "interactivo"

#: ../../glossary.rst:727
msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``). "
"For more on interactive mode, see :ref:`tut-interac`."
msgstr ""

#: ../../glossary.rst:734
msgid "interpreted"
msgstr "interpretado"

#: ../../glossary.rst:736
msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler.  "
"This means that source files can be run directly without explicitly creating "
"an executable which is then run. Interpreted languages typically have a "
"shorter development/debug cycle than compiled ones, though their programs "
"generally also run more slowly.  See also :term:`interactive`."
msgstr ""
"Python es un lenguaje interpretado, no compilado, aunque la distinción puede "
"ser borrosa debido a la presencia del compilador de código de bytes.  Esto "
"significa que los archivos fuente pueden ejecutarse directamente sin crear "
"explícitamente un ejecutable que luego se ejecute. Los lenguajes "
"interpretados suelen tener un ciclo de desarrollo y depuración más corto que "
"los compilados, aunque sus programas también suelen ejecutarse más "
"lentamente.  Ver :term:`interactive`."

#: ../../glossary.rst:743
msgid "interpreter shutdown"
msgstr "apagado del intérprete"

#: ../../glossary.rst:745
msgid ""
"When asked to shut down, the Python interpreter enters a special phase where "
"it gradually releases all allocated resources, such as modules and various "
"critical internal structures.  It also makes several calls to the :term:"
"`garbage collector <garbage collection>`. This can trigger the execution of "
"code in user-defined destructors or weakref callbacks. Code executed during "
"the shutdown phase can encounter various exceptions as the resources it "
"relies on may not function anymore (common examples are library modules or "
"the warnings machinery)."
msgstr ""
"Cuando se le pide que se apague, el intérprete de Python entra en una fase "
"especial en la que libera gradualmente todos los recursos asignados, como "
"módulos y varias estructuras internas críticas.  También realiza varias "
"llamadas al :term:`recolector de basura <garbage collection>`. Esto puede "
"desencadenar la ejecución de código en destructores definidos por el usuario "
"o callbacks weakref. El código ejecutado durante la fase de apagado puede "
"encontrarse con varias excepciones ya que los recursos en los que confía "
"pueden dejar de funcionar (ejemplos comunes son los módulos de biblioteca o "
"la maquinaria de avisos)."

#: ../../glossary.rst:754
msgid ""
"The main reason for interpreter shutdown is that the ``__main__`` module or "
"the script being run has finished executing."
msgstr ""
"La razón principal del apagado del intérprete es que el módulo ``__main__`` "
"o el script que se está ejecutando ha terminado de ejecutarse."

#: ../../glossary.rst:756
msgid "iterable"
msgstr "iterable"

#: ../../glossary.rst:758
msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict`, :term:"
"`file objects <file object>`, and objects of any classes you define with an :"
"meth:`~object.__iter__` method or with a :meth:`~object.__getitem__` method "
"that implements :term:`sequence` semantics."
msgstr ""

#: ../../glossary.rst:766
msgid ""
"Iterables can be used in a :keyword:`for` loop and in many other places "
"where a sequence is needed (:func:`zip`, :func:`map`, ...).  When an "
"iterable object is passed as an argument to the built-in function :func:"
"`iter`, it returns an iterator for the object.  This iterator is good for "
"one pass over the set of values.  When using iterables, it is usually not "
"necessary to call :func:`iter` or deal with iterator objects yourself.  The :"
"keyword:`for` statement does that automatically for you, creating a "
"temporary unnamed variable to hold the iterator for the duration of the "
"loop.  See also :term:`iterator`, :term:`sequence`, and :term:`generator`."
msgstr ""

#: ../../glossary.rst:776
msgid "iterator"
msgstr "iterador"

#: ../../glossary.rst:778
msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's :"
"meth:`~iterator.__next__` method (or passing it to the built-in function :"
"func:`next`) return successive items in the stream.  When no more data are "
"available a :exc:`StopIteration` exception is raised instead.  At this "
"point, the iterator object is exhausted and any further calls to its :meth:`!"
"__next__` method just raise :exc:`StopIteration` again.  Iterators are "
"required to have an :meth:`~iterator.__iter__` method that returns the "
"iterator object itself so every iterator is also iterable and may be used in "
"most places where other iterables are accepted.  One notable exception is "
"code which attempts multiple iteration passes.  A container object (such as "
"a :class:`list`) produces a fresh new iterator each time you pass it to the :"
"func:`iter` function or use it in a :keyword:`for` loop.  Attempting this "
"with an iterator will just return the same exhausted iterator object used in "
"the previous iteration pass, making it appear like an empty container."
msgstr ""

#: ../../glossary.rst:793
msgid "More information can be found in :ref:`typeiter`."
msgstr "Más información en :ref:`typeiter`."

#: ../../glossary.rst:797
msgid ""
"CPython does not consistently apply the requirement that an iterator define :"
"meth:`~iterator.__iter__`. And also please note that the free-threading "
"CPython does not guarantee the thread-safety of iterator operations."
msgstr ""

#: ../../glossary.rst:802
msgid "key function"
msgstr "función clave"

#: ../../glossary.rst:804
msgid ""
"A key function or collation function is a callable that returns a value used "
"for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""
"Una función clave o función de cotejo es una llamada que devuelve un valor "
"utilizado para clasificar u ordenar.  Por ejemplo, :func:`locale.strxfrm` se "
"utiliza para producir una clave de ordenación que tiene en cuenta las "
"convenciones de ordenación específicas de la configuración regional."

#: ../../glossary.rst:809
msgid ""
"A number of tools in Python accept key functions to control how elements are "
"ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`, :"
"meth:`list.sort`, :func:`heapq.merge`, :func:`heapq.nsmallest`, :func:`heapq."
"nlargest`, and :func:`itertools.groupby`."
msgstr ""
"Varias herramientas en Python aceptan funciones clave para controlar cómo se "
"ordenan o agrupan los elementos.  Entre ellas se incluyen :func:`min`, :func:"
"`max`, :func:`sorted`, :meth:`list.sort`, :func:`heapq.merge`, :func:`heapq."
"nsmallest`, :func:`heapq.nlargest`, y :func:`itertools.groupby`."

#: ../../glossary.rst:815
msgid ""
"There are several ways to create a key function.  For example. the :meth:"
"`str.lower` method can serve as a key function for case insensitive sorts.  "
"Alternatively, a key function can be built from a :keyword:`lambda` "
"expression such as ``lambda r: (r[0], r[2])``.  Also, :func:`operator."
"attrgetter`, :func:`operator.itemgetter`, and :func:`operator.methodcaller` "
"are three key function constructors.  See the :ref:`Sorting HOW TO "
"<sortinghowto>` for examples of how to create and use key functions."
msgstr ""

#: ../../glossary.rst:822
msgid "keyword argument"
msgstr "argumento clave"

#: ../../glossary.rst:824 ../../glossary.rst:1139
msgid "See :term:`argument`."
msgstr "Ver  :term:`argument`."

#: ../../glossary.rst:825
msgid "lambda"
msgstr "lambda"

#: ../../glossary.rst:827
msgid ""
"An anonymous inline function consisting of a single :term:`expression` which "
"is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [parameters]: expression``"
msgstr ""
"Una función anónima en línea que consta de un único :term:`expression` que "
"se evalúa cuando se llama a la función.  La sintaxis para crear una función "
"lambda es ``lambda [parameters]: expression``"

#: ../../glossary.rst:830
msgid "LBYL"
msgstr "LBYL"

#: ../../glossary.rst:832
msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions "
"before making calls or lookups.  This style contrasts with the :term:`EAFP` "
"approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""
"Mira antes de saltar.  Este estilo de codificación comprueba explícitamente "
"las condiciones previas antes de realizar llamadas o búsquedas.  Este estilo "
"contrasta con el enfoque :term:`EAFP` y se caracteriza por la presencia de "
"muchas sentencias :keyword:`if`."

#: ../../glossary.rst:837
msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""
"En un entorno multihilo, el enfoque LBYL puede introducir una condición de "
"carrera entre \"the looking\" y \"the leaping\".  Por ejemplo, el código, "
"``if key in mapping: return mapping[key]`` puede fallar si otro hilo elimina "
"*key* de *mapping* después de la prueba, pero antes de la búsqueda. Este "
"problema puede resolverse con bloqueos o utilizando el enfoque EAFP."

#: ../../glossary.rst:842
msgid "lexical analyzer"
msgstr ""

#: ../../glossary.rst:845
msgid "Formal name for the *tokenizer*; see :term:`token`."
msgstr ""

#: ../../glossary.rst:846
msgid "list"
msgstr "lista"

#: ../../glossary.rst:848
msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements is "
"*O*\\ (1)."
msgstr ""

#: ../../glossary.rst:851
msgid "list comprehension"
msgstr "comprensión de la lista"

#: ../../glossary.rst:853
msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = ['{:#04x}'.format(x) for x in "
"range(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""
"Una forma compacta de procesar todos o parte de los elementos de una "
"secuencia y devolver una lista con los resultados. ``result = ['{:#04x}'."
"format(x) for x in range(256) if x % 2 == 0]`` genera una lista de cadenas "
"que contienen números hexadecimales pares (0x..) en el rango de 0 a 255. La "
"cláusula :keyword:`if` es opcional.  Si se omite, se procesan todos los "
"elementos de ``range(256)``."

#: ../../glossary.rst:859
msgid "loader"
msgstr "cargador"

#: ../../glossary.rst:861
msgid ""
"An object that loads a module. It must define the :meth:`!exec_module` and :"
"meth:`!create_module` methods to implement the :class:`~importlib.abc."
"Loader` interface. A loader is typically returned by a :term:`finder`. See "
"also:"
msgstr ""

#: ../../glossary.rst:867
msgid ":ref:`finders-and-loaders`"
msgstr ""

#: ../../glossary.rst:868
msgid ":class:`importlib.abc.Loader`"
msgstr ""

#: ../../glossary.rst:869
msgid ":pep:`302`"
msgstr ":pep:`302`"

#: ../../glossary.rst:870
msgid "locale encoding"
msgstr ""

#: ../../glossary.rst:872
msgid ""
"On Unix, it is the encoding of the LC_CTYPE locale. It can be set with :func:"
"`locale.setlocale(locale.LC_CTYPE, new_locale) <locale.setlocale>`."
msgstr ""

#: ../../glossary.rst:875
msgid "On Windows, it is the ANSI code page (ex: ``\"cp1252\"``)."
msgstr ""

#: ../../glossary.rst:877
msgid ""
"On Android and VxWorks, Python uses ``\"utf-8\"`` as the locale encoding."
msgstr ""

#: ../../glossary.rst:879
msgid ":func:`locale.getencoding` can be used to get the locale encoding."
msgstr ""

#: ../../glossary.rst:881
msgid "See also the :term:`filesystem encoding and error handler`."
msgstr ""

#: ../../glossary.rst:882
msgid "magic method"
msgstr "método mágico"

#: ../../glossary.rst:886
msgid "An informal synonym for :term:`special method`."
msgstr "Sinónimo informal de :term:`special method`."

#: ../../glossary.rst:887
msgid "mapping"
msgstr "cartografía"

#: ../../glossary.rst:889
msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`collections.abc.Mapping` or :class:"
"`collections.abc.MutableMapping` :ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Examples include :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` and :class:"
"`collections.Counter`."
msgstr ""

#: ../../glossary.rst:895
msgid "meta path finder"
msgstr "meta buscador de rutas"

#: ../../glossary.rst:897
msgid ""
"A :term:`finder` returned by a search of :data:`sys.meta_path`.  Meta path "
"finders are related to, but different from :term:`path entry finders <path "
"entry finder>`."
msgstr ""
"Un :term:`finder` devuelto por una búsqueda en :data:`sys.meta_path`. Los "
"metabuscadores de rutas están relacionados con, pero son diferentes de los :"
"term:`path entry finders <path entry finder>`."

#: ../../glossary.rst:901
msgid ""
"See :class:`importlib.abc.MetaPathFinder` for the methods that meta path "
"finders implement."
msgstr ""
"Ver :class:`importlib.abc.MetaPathFinder` para conocer los métodos que "
"implementan los metabuscadores de rutas."

#: ../../glossary.rst:903
msgid "metaclass"
msgstr "metaclase"

#: ../../glossary.rst:905
msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""
"La clase de una clase.  Las definiciones de clase crean un nombre de clase, "
"un diccionario de clase y una lista de clases base.  La metaclase se encarga "
"de tomar esos tres argumentos y crear la clase.  La mayoría de los lenguajes "
"de programación orientados a objetos proporcionan una implementación por "
"defecto.  Lo que hace especial a Python es que es posible crear metaclases "
"personalizadas.  La mayoría de los usuarios nunca necesitan esta "
"herramienta, pero cuando surge la necesidad, las metaclases pueden "
"proporcionar soluciones potentes y elegantes.  Se han utilizado para "
"registrar el acceso a atributos, añadir seguridad a los hilos, rastrear la "
"creación de objetos, implementar singletons y muchas otras tareas."

#: ../../glossary.rst:915
msgid "More information can be found in :ref:`metaclasses`."
msgstr "Se puede encontrar más información en :ref:`metaclasses`."

#: ../../glossary.rst:884 ../../glossary.rst:916 ../../glossary.rst:1290
msgid "method"
msgstr "método"

#: ../../glossary.rst:918
msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its "
"first :term:`argument` (which is usually called ``self``). See :term:"
"`function` and :term:`nested scope`."
msgstr ""
"Función que se define dentro del cuerpo de una clase.  Si se llama como "
"atributo de una instancia de esa clase, el método obtendrá el objeto "
"instancia como su primer :term:`argument` (que normalmente se llama "
"``self``). Ver :term:`function` y :term:`nested scope`."

#: ../../glossary.rst:922
msgid "method resolution order"
msgstr "orden de resolución del método"

#: ../../glossary.rst:924
msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See :ref:`python_2.3_mro` for details of the "
"algorithm used by the Python interpreter since the 2.3 release."
msgstr ""

#: ../../glossary.rst:927
msgid "module"
msgstr "módulo"

#: ../../glossary.rst:929
msgid ""
"An object that serves as an organizational unit of Python code.  Modules "
"have a namespace containing arbitrary Python objects.  Modules are loaded "
"into Python by the process of :term:`importing`."
msgstr ""
"Objeto que sirve como unidad organizativa del código Python.  Los módulos "
"tienen un espacio de nombres que contiene objetos Python arbitrarios.  Los "
"módulos se cargan en Python mediante el proceso :term:`importing`."

#: ../../glossary.rst:933
msgid "See also :term:`package`."
msgstr "Ver también :term:`package`."

#: ../../glossary.rst:934
msgid "module spec"
msgstr "especificación del módulo"

#: ../../glossary.rst:936
msgid ""
"A namespace containing the import-related information used to load a module. "
"An instance of :class:`importlib.machinery.ModuleSpec`."
msgstr ""
"Espacio de nombres que contiene la información relacionada con la "
"importación utilizada para cargar un módulo. Una instancia de :class:"
"`importlib.machinery.ModuleSpec`."

#: ../../glossary.rst:939
msgid "See also :ref:`module-specs`."
msgstr ""

#: ../../glossary.rst:940
msgid "MRO"
msgstr "MRO"

#: ../../glossary.rst:942
msgid "See :term:`method resolution order`."
msgstr "Ver :term:`method resolution order`."

#: ../../glossary.rst:943
msgid "mutable"
msgstr "mutable"

#: ../../glossary.rst:945
msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also :"
"term:`immutable`."
msgstr ""
"Los objetos mutables pueden cambiar de valor pero conservan su :func:`id`. "
"Ver también :term:`immutable`."

#: ../../glossary.rst:947
msgid "named tuple"
msgstr "tupla con nombre"

#: ../../glossary.rst:949
msgid ""
"The term \"named tuple\" applies to any type or class that inherits from "
"tuple and whose indexable elements are also accessible using named "
"attributes.  The type or class may have other features as well."
msgstr ""
"El término \"named tuple\" se aplica a cualquier tipo o clase que herede de "
"tupla y cuyos elementos indexables también sean accesibles mediante "
"atributos con nombre.  El tipo o clase también puede tener otras "
"características."

#: ../../glossary.rst:953
msgid ""
"Several built-in types are named tuples, including the values returned by :"
"func:`time.localtime` and :func:`os.stat`.  Another example is :data:`sys."
"float_info`::"
msgstr ""
"Varios tipos incorporados reciben el nombre de tuplas, incluidos los valores "
"devueltos por :func:`time.localtime` y :func:`os.stat`.  Otro ejemplo es :"
"data:`sys.float_info`::"

#: ../../glossary.rst:957
msgid ""
">>> sys.float_info[1]                   # indexed access\n"
"1024\n"
">>> sys.float_info.max_exp              # named field access\n"
"1024\n"
">>> isinstance(sys.float_info, tuple)   # kind of tuple\n"
"True"
msgstr ""

#: ../../glossary.rst:964
msgid ""
"Some named tuples are built-in types (such as the above examples). "
"Alternatively, a named tuple can be created from a regular class definition "
"that inherits from :class:`tuple` and that defines named fields.  Such a "
"class can be written by hand, or it can be created by inheriting :class:"
"`typing.NamedTuple`, or with the factory function :func:`collections."
"namedtuple`.  The latter techniques also add some extra methods that may not "
"be found in hand-written or built-in named tuples."
msgstr ""

#: ../../glossary.rst:972
msgid "namespace"
msgstr "espacio de nombres"

#: ../../glossary.rst:974
msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity "
"by preventing naming conflicts.  For instance, the functions :func:`builtins."
"open <.open>` and :func:`os.open` are distinguished by their namespaces.  "
"Namespaces also aid readability and maintainability by making it clear which "
"module implements a function.  For instance, writing :func:`random.seed` or :"
"func:`itertools.islice` makes it clear that those functions are implemented "
"by the :mod:`random` and :mod:`itertools` modules, respectively."
msgstr ""
"Lugar donde se almacena una variable.  Los espacios de nombres se "
"implementan como diccionarios.  Existen espacios de nombres locales, "
"globales e incorporados, así como espacios de nombres anidados en objetos "
"(en métodos).  Los espacios de nombres favorecen la modularidad al evitar "
"conflictos de nombres.  Por ejemplo, las funciones :func:`builtins.open <."
"open>` y :func:`os.open` se distinguen por sus espacios de nombres.  Los "
"espacios de nombres también facilitan la lectura y el mantenimiento al dejar "
"claro qué módulo implementa una función.  Por ejemplo, escribir :func:"
"`random.seed` o :func:`itertools.islice` deja claro que esas funciones están "
"implementadas por los módulos :mod:`random` y :mod:`itertools`, "
"respectivamente."

#: ../../glossary.rst:984
msgid "namespace package"
msgstr "paquete namespace"

#: ../../glossary.rst:986
msgid ""
"A :term:`package` which serves only as a container for subpackages. "
"Namespace packages may have no physical representation, and specifically are "
"not like a :term:`regular package` because they have no ``__init__.py`` file."
msgstr ""

#: ../../glossary.rst:991
msgid ""
"Namespace packages allow several individually installable packages to have a "
"common parent package. Otherwise, it is recommended to use a :term:`regular "
"package`."
msgstr ""

#: ../../glossary.rst:994
msgid ""
"For more information, see :pep:`420` and :ref:`reference-namespace-package`."
msgstr ""

#: ../../glossary.rst:996
msgid "See also :term:`module`."
msgstr "Ver también :term:`module`."

#: ../../glossary.rst:997
msgid "nested scope"
msgstr "ámbito anidado"

#: ../../glossary.rst:999
msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes by default work only for "
"reference and not for assignment.  Local variables both read and write in "
"the innermost scope.  Likewise, global variables read and write to the "
"global namespace.  The :keyword:`nonlocal` allows writing to outer scopes."
msgstr ""
"Capacidad de hacer referencia a una variable en una definición adjunta.  Por "
"ejemplo, una función definida dentro de otra función puede hacer referencia "
"a variables de la función externa.  Tenga en cuenta que los ámbitos anidados "
"sólo funcionan por defecto para referencia y no para asignación.  Las "
"variables locales leen y escriben en el ámbito más interno.  Del mismo modo, "
"las variables globales leen y escriben en el espacio de nombres global.  :"
"keyword:`nonlocal` permite escribir en ámbitos externos."

#: ../../glossary.rst:1006
msgid "new-style class"
msgstr "clase de nuevo estilo"

#: ../../glossary.rst:1008
msgid ""
"Old name for the flavor of classes now used for all class objects.  In "
"earlier Python versions, only new-style classes could use Python's newer, "
"versatile features like :attr:`~object.__slots__`, descriptors, properties, :"
"meth:`~object.__getattribute__`, class methods, and static methods."
msgstr ""

#: ../../glossary.rst:1013
msgid "object"
msgstr "objeto"

#: ../../glossary.rst:1015
msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""
"Cualquier dato con estado (atributos o valor) y comportamiento definido "
"(métodos).  También es la clase base definitiva de cualquier :term:`new-"
"style class`."

#: ../../glossary.rst:1018
msgid "optimized scope"
msgstr ""

#: ../../glossary.rst:1020
msgid ""
"A scope where target local variable names are reliably known to the compiler "
"when the code is compiled, allowing optimization of read and write access to "
"these names. The local namespaces for functions, generators, coroutines, "
"comprehensions, and generator expressions are optimized in this fashion. "
"Note: most interpreter optimizations are applied to all scopes, only those "
"relying on a known set of local and nonlocal variable names are restricted "
"to optimized scopes."
msgstr ""

#: ../../glossary.rst:1027
msgid "package"
msgstr "paquete"

#: ../../glossary.rst:1029
msgid ""
"A Python :term:`module` which can contain submodules or recursively, "
"subpackages.  Technically, a package is a Python module with a ``__path__`` "
"attribute."
msgstr ""

#: ../../glossary.rst:1033
msgid "See also :term:`regular package` and :term:`namespace package`."
msgstr "Ver también :term:`regular package` y :term:`namespace package`."

#: ../../glossary.rst:1034
msgid "parameter"
msgstr "parámetro"

#: ../../glossary.rst:1036
msgid ""
"A named entity in a :term:`function` (or method) definition that specifies "
"an :term:`argument` (or in some cases, arguments) that the function can "
"accept.  There are five kinds of parameter:"
msgstr ""
"Entidad con nombre en una definición :term:`function` (o método) que "
"especifica un :term:`argument` (o, en algunos casos, argumentos) que la "
"función puede aceptar.  Existen cinco tipos de parámetros:"

#: ../../glossary.rst:1040
msgid ""
":dfn:`positional-or-keyword`: specifies an argument that can be passed "
"either :term:`positionally <argument>` or as a :term:`keyword argument "
"<argument>`.  This is the default kind of parameter, for example *foo* and "
"*bar* in the following::"
msgstr ""
":dfn:`positional-or-keyword`: especifica un argumento que se puede pasar :"
"term:`positionally <argument>` o como un :term:`keyword argument "
"<argument>`.  Este es el tipo de parámetro predeterminado, por ejemplo * foo "
"* y * bar * en lo siguiente::"

#: ../../glossary.rst:1045
msgid "def func(foo, bar=None): ..."
msgstr ""

#: ../../glossary.rst:1049
msgid ""
":dfn:`positional-only`: specifies an argument that can be supplied only by "
"position. Positional-only parameters can be defined by including a ``/`` "
"character in the parameter list of the function definition after them, for "
"example *posonly1* and *posonly2* in the following::"
msgstr ""
":dfn:`positional-only`: especifica un argumento que sólo puede suministrarse "
"por posición. Los parámetros de sólo posición pueden definirse incluyendo un "
"carácter ``/`` en la lista de parámetros de la definición de función después "
"de ellos, por ejemplo *posonly1* y *posonly2* en lo siguiente::"

#: ../../glossary.rst:1054
msgid "def func(posonly1, posonly2, /, positional_or_keyword): ..."
msgstr ""

#: ../../glossary.rst:1058
msgid ""
":dfn:`keyword-only`: specifies an argument that can be supplied only by "
"keyword.  Keyword-only parameters can be defined by including a single var-"
"positional parameter or bare ``*`` in the parameter list of the function "
"definition before them, for example *kw_only1* and *kw_only2* in the "
"following::"
msgstr ""
":dfn:`keyword-only`: especifica un argumento que sólo puede suministrarse "
"mediante una palabra clave.  Los parámetros de sólo palabra clave pueden "
"definirse incluyendo un único parámetro var-positional o ``*`` desnudo en la "
"lista de parámetros de la definición de función que les precede, por ejemplo "
"*kw_only1* y *kw_only2* en el siguiente::"

#: ../../glossary.rst:1064
msgid "def func(arg, *, kw_only1, kw_only2): ..."
msgstr ""

#: ../../glossary.rst:1066
msgid ""
":dfn:`var-positional`: specifies that an arbitrary sequence of positional "
"arguments can be provided (in addition to any positional arguments already "
"accepted by other parameters).  Such a parameter can be defined by "
"prepending the parameter name with ``*``, for example *args* in the "
"following::"
msgstr ""
":dfn:`var-positional`: especifica que se puede proporcionar una secuencia "
"arbitraria de argumentos posicionales (además de cualquier argumento "
"posicional ya aceptado por otros parámetros).  Un parámetro de este tipo "
"puede definirse anteponiendo al nombre del parámetro ``*``, por ejemplo "
"*args* en lo siguiente::"

#: ../../glossary.rst:1072
msgid "def func(*args, **kwargs): ..."
msgstr ""

#: ../../glossary.rst:1074
msgid ""
":dfn:`var-keyword`: specifies that arbitrarily many keyword arguments can be "
"provided (in addition to any keyword arguments already accepted by other "
"parameters).  Such a parameter can be defined by prepending the parameter "
"name with ``**``, for example *kwargs* in the example above."
msgstr ""
":dfn:`var-palabra-clave`: especifica que se puede proporcionar un número "
"arbitrario de argumentos de palabra clave (además de los argumentos de "
"palabra clave ya aceptados por otros parámetros).  Un parámetro de este tipo "
"puede definirse anteponiendo al nombre del parámetro ``**``, por ejemplo "
"*kwargs* en el ejemplo anterior."

#: ../../glossary.rst:1080
msgid ""
"Parameters can specify both optional and required arguments, as well as "
"default values for some optional arguments."
msgstr ""
"Los parámetros pueden especificar argumentos opcionales y obligatorios, así "
"como valores por defecto para algunos argumentos opcionales."

#: ../../glossary.rst:1083
msgid ""
"See also the :term:`argument` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"the :class:`inspect.Parameter` class, the :ref:`function` section, and :pep:"
"`362`."
msgstr ""
"Ver también la entrada del glosario :term:`argument`, la pregunta de las FAQ "
"sobre :ref:`la diferencia entre argumentos y parámetros <faq-argument-vs-"
"parameter>`, la clase :class:`inspect.Parameter`, la sección :ref:`function` "
"y :pep:`362`."

#: ../../glossary.rst:1087
msgid "path entry"
msgstr "entrada del camino"

#: ../../glossary.rst:1089
msgid ""
"A single location on the :term:`import path` which the :term:`path based "
"finder` consults to find modules for importing."
msgstr ""
"Una única ubicación en la ruta :term:`import` que el buscador basado en "
"rutas :term:`path based finder` consulta para encontrar módulos para "
"importar."

#: ../../glossary.rst:1091
msgid "path entry finder"
msgstr "buscador de entradas de ruta"

#: ../../glossary.rst:1093
msgid ""
"A :term:`finder` returned by a callable on :data:`sys.path_hooks` (i.e. a :"
"term:`path entry hook`) which knows how to locate modules given a :term:"
"`path entry`."
msgstr ""
"Un :term:`finder` devuelto por una llamada en :data:`sys.path_hooks` (es "
"decir, un :term:`path entry hook`) que sabe cómo localizar módulos dado un :"
"term:`path entry`."

#: ../../glossary.rst:1097
msgid ""
"See :class:`importlib.abc.PathEntryFinder` for the methods that path entry "
"finders implement."
msgstr ""
"Ver :class:`importlib.abc.PathEntryFinder` para conocer los métodos que "
"implementan los buscadores de entradas de rutas."

#: ../../glossary.rst:1099
msgid "path entry hook"
msgstr "gancho de entrada de ruta"

#: ../../glossary.rst:1101
msgid ""
"A callable on the :data:`sys.path_hooks` list which returns a :term:`path "
"entry finder` if it knows how to find modules on a specific :term:`path "
"entry`."
msgstr ""

#: ../../glossary.rst:1104
msgid "path based finder"
msgstr "buscador basado en rutas"

#: ../../glossary.rst:1106
msgid ""
"One of the default :term:`meta path finders <meta path finder>` which "
"searches an :term:`import path` for modules."
msgstr ""
"Uno de los buscadores de rutas :term:`meta` por defecto <meta path finder>` "
"que busca módulos en una ruta :term:`import`."

#: ../../glossary.rst:1108
msgid "path-like object"
msgstr "objeto similar a una ruta"

#: ../../glossary.rst:1110
msgid ""
"An object representing a file system path. A path-like object is either a :"
"class:`str` or :class:`bytes` object representing a path, or an object "
"implementing the :class:`os.PathLike` protocol. An object that supports the :"
"class:`os.PathLike` protocol can be converted to a :class:`str` or :class:"
"`bytes` file system path by calling the :func:`os.fspath` function; :func:"
"`os.fsdecode` and :func:`os.fsencode` can be used to guarantee a :class:"
"`str` or :class:`bytes` result instead, respectively. Introduced by :pep:"
"`519`."
msgstr ""
"Objeto que representa una ruta del sistema de archivos. Un objeto similar a "
"una ruta es un objeto :class:`str` o :class:`bytes` que representa una ruta, "
"o un objeto que implementa el protocolo :class:`os.PathLike`. Un objeto que "
"soporte el protocolo :class:`os.PathLike` puede convertirse en una ruta de "
"sistema de archivos :class:`str` o :class:`bytes` llamando a la función :"
"func:`os.fspath`; :func:`os.fsdecode` y :func:`os.fsencode` pueden "
"utilizarse para garantizar un resultado :class:`str` o :class:`bytes`, "
"respectivamente. Introducido por :pep:`519`."

#: ../../glossary.rst:1118
msgid "PEP"
msgstr "PEP"

#: ../../glossary.rst:1120
msgid ""
"Python Enhancement Proposal. A PEP is a design document providing "
"information to the Python community, or describing a new feature for Python "
"or its processes or environment. PEPs should provide a concise technical "
"specification and a rationale for proposed features."
msgstr ""
"Propuesta de mejora de Python. Un PEP es un documento de diseño que "
"proporciona información a la comunidad Python, o describe una nueva "
"característica para Python o sus procesos o entorno. Los PEP deben "
"proporcionar una especificación técnica concisa y una justificación de las "
"características propuestas."

#: ../../glossary.rst:1126
msgid ""
"PEPs are intended to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting "
"the design decisions that have gone into Python. The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""
"Se pretende que los PEP sean los mecanismos principales para proponer nuevas "
"características importantes, para recoger las opiniones de la comunidad "
"sobre un tema y para documentar las decisiones de diseño que se han tomado "
"en Python. El autor del PEP es responsable de crear consenso dentro de la "
"comunidad y documentar las opiniones discrepantes."

#: ../../glossary.rst:1132
msgid "See :pep:`1`."
msgstr "Ver :pep:`1`."

#: ../../glossary.rst:1133
msgid "portion"
msgstr "porción"

#: ../../glossary.rst:1135
msgid ""
"A set of files in a single directory (possibly stored in a zip file) that "
"contribute to a namespace package, as defined in :pep:`420`."
msgstr ""
"Conjunto de archivos en un único directorio (posiblemente almacenados en un "
"archivo zip) que contribuyen a un paquete de espacio de nombres, tal y como "
"se define en :pep:`420`."

#: ../../glossary.rst:1137
msgid "positional argument"
msgstr "argumento posicional"

#: ../../glossary.rst:1140
msgid "provisional API"
msgstr "API provisional"

#: ../../glossary.rst:1142
msgid ""
"A provisional API is one which has been deliberately excluded from the "
"standard library's backwards compatibility guarantees.  While major changes "
"to such interfaces are not expected, as long as they are marked provisional, "
"backwards incompatible changes (up to and including removal of the "
"interface) may occur if deemed necessary by core developers.  Such changes "
"will not be made gratuitously -- they will occur only if serious fundamental "
"flaws are uncovered that were missed prior to the inclusion of the API."
msgstr ""
"Una API provisional es aquella que se ha excluido deliberadamente de las "
"garantías de compatibilidad con versiones anteriores de la biblioteca "
"estándar.  Aunque no se esperan grandes cambios en este tipo de interfaces, "
"mientras estén marcadas como provisionales, pueden producirse cambios "
"incompatibles con versiones anteriores (incluida la eliminación de la "
"interfaz) si los desarrolladores del núcleo lo consideran necesario.  Dichos "
"cambios no se realizarán de forma gratuita, sino sólo si se descubren graves "
"fallos fundamentales que se pasaron por alto antes de la inclusión de la API."

#: ../../glossary.rst:1151
msgid ""
"Even for provisional APIs, backwards incompatible changes are seen as a "
"\"solution of last resort\" - every attempt will still be made to find a "
"backwards compatible resolution to any identified problems."
msgstr ""
"Incluso en el caso de las API provisionales, los cambios incompatibles con "
"versiones anteriores se consideran una \"solución de último recurso\": se "
"hará todo lo posible por encontrar una solución compatible con versiones "
"anteriores a cualquier problema detectado."

#: ../../glossary.rst:1155
msgid ""
"This process allows the standard library to continue to evolve over time, "
"without locking in problematic design errors for extended periods of time.  "
"See :pep:`411` for more details."
msgstr ""
"Este proceso permite que la biblioteca estándar siga evolucionando con el "
"tiempo, sin bloquear errores de diseño problemáticos durante largos periodos "
"de tiempo.  Para más información, ver :pep:`411`."

#: ../../glossary.rst:1158
msgid "provisional package"
msgstr "paquete provisional"

#: ../../glossary.rst:1160
msgid "See :term:`provisional API`."
msgstr "Ver :term:`provisional API`."

#: ../../glossary.rst:1161
msgid "Python 3000"
msgstr "Python 3000"

#: ../../glossary.rst:1163
msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated "
"\"Py3k\"."
msgstr ""
"Apodo para la línea de lanzamiento de Python 3.x (acuñado hace mucho tiempo, "
"cuando el lanzamiento de la versión 3 era algo en un futuro lejano).  "
"También se abrevia \"Py3k\"."

#: ../../glossary.rst:1166
msgid "Pythonic"
msgstr "Pythónico"

#: ../../glossary.rst:1168
msgid ""
"An idea or piece of code which closely follows the most common idioms of the "
"Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""
"Una idea o fragmento de código que sigue de cerca los modismos más comunes "
"del lenguaje Python, en lugar de implementar código utilizando conceptos "
"comunes a otros lenguajes.  Por ejemplo, un lenguaje común en Python es "
"hacer un bucle sobre todos los elementos de un iterable usando una "
"sentencia :keyword:`for`.  Muchos otros lenguajes no tienen este tipo de "
"construcción, por lo que las personas no familiarizadas con Python a veces "
"utilizan un contador numérico en su lugar::"

#: ../../glossary.rst:1175
msgid ""
"for i in range(len(food)):\n"
"    print(food[i])"
msgstr ""

#: ../../glossary.rst:1178
msgid "As opposed to the cleaner, Pythonic method::"
msgstr "A diferencia del método pythónico, más limpio::"

#: ../../glossary.rst:1180
msgid ""
"for piece in food:\n"
"    print(piece)"
msgstr ""

#: ../../glossary.rst:1182
msgid "qualified name"
msgstr "nombre cualificado"

#: ../../glossary.rst:1184
msgid ""
"A dotted name showing the \"path\" from a module's global scope to a class, "
"function or method defined in that module, as defined in :pep:`3155`.  For "
"top-level functions and classes, the qualified name is the same as the "
"object's name::"
msgstr ""
"Un nombre con puntos que muestra la \"ruta\" desde el ámbito global de un "
"módulo a una clase, función o método definido en ese módulo, tal y como se "
"define en :pep:`3155`.  Para las funciones y clases de nivel superior, el "
"nombre cualificado es el mismo que el nombre del objeto::"

#: ../../glossary.rst:1189
msgid ""
">>> class C:\n"
"...     class D:\n"
"...         def meth(self):\n"
"...             pass\n"
"...\n"
">>> C.__qualname__\n"
"'C'\n"
">>> C.D.__qualname__\n"
"'C.D'\n"
">>> C.D.meth.__qualname__\n"
"'C.D.meth'"
msgstr ""

#: ../../glossary.rst:1201
msgid ""
"When used to refer to modules, the *fully qualified name* means the entire "
"dotted path to the module, including any parent packages, e.g. ``email.mime."
"text``::"
msgstr ""
"Cuando se utiliza para referirse a módulos, el *fully qualified name* "
"significa la ruta completa con puntos al módulo, incluyendo cualquier "
"paquete padre, por ejemplo ``email.mime.text``::"

#: ../../glossary.rst:1205
msgid ""
">>> import email.mime.text\n"
">>> email.mime.text.__name__\n"
"'email.mime.text'"
msgstr ""

#: ../../glossary.rst:1208
msgid "reference count"
msgstr "recuento de referencias"

#: ../../glossary.rst:1210
msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Some objects are :term:`immortal` "
"and have reference counts that are never modified, and therefore the objects "
"are never deallocated.  Reference counting is generally not visible to "
"Python code, but it is a key element of the :term:`CPython` implementation.  "
"Programmers can call the :func:`sys.getrefcount` function to return the "
"reference count for a particular object."
msgstr ""

#: ../../glossary.rst:1219
msgid ""
"In :term:`CPython`, reference counts are not considered to be stable or well-"
"defined values; the number of references to an object, and how that number "
"is affected by Python code, may be different between versions."
msgstr ""

#: ../../glossary.rst:1223
msgid "regular package"
msgstr "paquete normal"

#: ../../glossary.rst:1225
msgid ""
"A traditional :term:`package`, such as a directory containing an ``__init__."
"py`` file."
msgstr ""
"Un :term:`package` tradicional, como un directorio que contiene un archivo "
"``__init__.py``."

#: ../../glossary.rst:1228
msgid "See also :term:`namespace package`."
msgstr "Ver también :term:`namespace package`."

#: ../../glossary.rst:1229
msgid "REPL"
msgstr ""

#: ../../glossary.rst:1231
msgid ""
"An acronym for the \"read–eval–print loop\", another name for the :term:"
"`interactive` interpreter shell."
msgstr ""

#: ../../glossary.rst:1233
msgid "__slots__"
msgstr "__slots__"

#: ../../glossary.rst:1235
msgid ""
"A declaration inside a class that saves memory by pre-declaring space for "
"instance attributes and eliminating instance dictionaries.  Though popular, "
"the technique is somewhat tricky to get right and is best reserved for rare "
"cases where there are large numbers of instances in a memory-critical "
"application."
msgstr ""
"Una declaración dentro de una clase que ahorra memoria al pre-declarar "
"espacio para los atributos de instancia y eliminar los diccionarios de "
"instancia.  Aunque popular, la técnica es algo complicada de aplicar "
"correctamente y es mejor reservarla para casos excepcionales en los que haya "
"un gran número de instancias en una aplicación en la que la memoria sea "
"crítica."

#: ../../glossary.rst:1240
msgid "sequence"
msgstr "secuencia"

#: ../../glossary.rst:1242
msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`~object.__getitem__` special method and defines a :"
"meth:`~object.__len__` method that returns the length of the sequence. Some "
"built-in sequence types are :class:`list`, :class:`str`, :class:`tuple`, "
"and :class:`bytes`. Note that :class:`dict` also supports :meth:`~object."
"__getitem__` and :meth:`!__len__`, but is considered a mapping rather than a "
"sequence because the lookups use arbitrary :term:`hashable` keys rather than "
"integers."
msgstr ""

#: ../../glossary.rst:1251
msgid ""
"The :class:`collections.abc.Sequence` abstract base class defines a much "
"richer interface that goes beyond just :meth:`~object.__getitem__` and :meth:"
"`~object.__len__`, adding :meth:`~sequence.count`, :meth:`~sequence.index`, :"
"meth:`~object.__contains__`, and :meth:`~object.__reversed__`. Types that "
"implement this expanded interface can be registered explicitly using :func:"
"`~abc.ABCMeta.register`. For more documentation on sequence methods "
"generally, see :ref:`Common Sequence Operations <typesseq-common>`."
msgstr ""

#: ../../glossary.rst:1261
msgid "set comprehension"
msgstr "establecer la comprensión"

#: ../../glossary.rst:1263
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a set with the results. ``results = {c for c in 'abracadabra' if c "
"not in 'abc'}`` generates the set of strings ``{'r', 'd'}``.  See :ref:"
"`comprehensions`."
msgstr ""
"Una forma compacta de procesar todos o parte de los elementos de un iterable "
"y devolver un conjunto con los resultados. ``results = {c for c in "
"'abracadabra' if c not in 'abc'}`` genera el conjunto de cadenas ``{'r', 'd'}"
"``.  Ver :ref:`comprehensions`."

#: ../../glossary.rst:1267
msgid "single dispatch"
msgstr "envío único"

#: ../../glossary.rst:1269
msgid ""
"A form of :term:`generic function` dispatch where the implementation is "
"chosen based on the type of a single argument."
msgstr ""
"Una forma de envío de :term:`generic function` en la que la implementación "
"se elige en función del tipo de un único argumento."

#: ../../glossary.rst:1271
msgid "slice"
msgstr "corte"

#: ../../glossary.rst:1273
msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally."
msgstr ""
"Objeto que suele contener una parte de un :term:`sequence`.  Una porción se "
"crea utilizando la notación de subíndice, ``[]`` con dos puntos entre "
"números cuando se dan varios, como en ``variable_name[1:3:5]``.  La notación "
"de corchetes (subíndice) utiliza internamente objetos :class:`slice`."

#: ../../glossary.rst:1277
msgid "soft deprecated"
msgstr ""

#: ../../glossary.rst:1279
msgid ""
"A soft deprecated API should not be used in new code, but it is safe for "
"already existing code to use it. The API remains documented and tested, but "
"will not be enhanced further."
msgstr ""

#: ../../glossary.rst:1283
msgid ""
"Soft deprecation, unlike normal deprecation, does not plan on removing the "
"API and will not emit warnings."
msgstr ""

#: ../../glossary.rst:1286
msgid ""
"See `PEP 387: Soft Deprecation <https://peps.python.org/pep-0387/#soft-"
"deprecation>`_."
msgstr ""

#: ../../glossary.rst:1288
msgid "special method"
msgstr "método especial"

#: ../../glossary.rst:1292
msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in :ref:"
"`specialnames`."
msgstr ""
"Un método que lo llama implícitamente Python para ejecutar una operación "
"determinada en un tipo, como la suma.  Tales métodos tienen nombres que "
"empiezan y terminan con doble guión bajo.  Los métodos especiales están "
"documentados en :ref:`specialnames`."

#: ../../glossary.rst:1296
msgid "standard library"
msgstr ""

#: ../../glossary.rst:1298
msgid ""
"The collection of :term:`packages <package>`, :term:`modules <module>` and :"
"term:`extension modules <extension module>` distributed as a part of the "
"official Python interpreter package.  The exact membership of the collection "
"may vary based on platform, available system libraries, or other criteria.  "
"Documentation can be found at :ref:`library-index`."
msgstr ""

#: ../../glossary.rst:1304
msgid ""
"See also :data:`sys.stdlib_module_names` for a list of all possible standard "
"library module names."
msgstr ""

#: ../../glossary.rst:1306
msgid "statement"
msgstr "declaración"

#: ../../glossary.rst:1308
msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either "
"an :term:`expression` or one of several constructs with a keyword, such as :"
"keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""
"Una declaración forma parte de un conjunto (un \"bloque\" de código).  Una "
"declaración puede ser un :term:`expression` o una de varias construcciones "
"con una palabra clave, como :keyword:`if`, :keyword:`while` o :keyword:`for`."

#: ../../glossary.rst:1311
msgid "static type checker"
msgstr ""

#: ../../glossary.rst:1313
msgid ""
"An external tool that reads Python code and analyzes it, looking for issues "
"such as incorrect types. See also :term:`type hints <type hint>` and the :"
"mod:`typing` module."
msgstr ""

#: ../../glossary.rst:1316
msgid "stdlib"
msgstr ""

#: ../../glossary.rst:1318
msgid "An abbreviation of :term:`standard library`."
msgstr ""

#: ../../glossary.rst:1319
msgid "strong reference"
msgstr ""

#: ../../glossary.rst:1321
msgid ""
"In Python's C API, a strong reference is a reference to an object which is "
"owned by the code holding the reference.  The strong reference is taken by "
"calling :c:func:`Py_INCREF` when the reference is created and released with :"
"c:func:`Py_DECREF` when the reference is deleted."
msgstr ""

#: ../../glossary.rst:1327
msgid ""
"The :c:func:`Py_NewRef` function can be used to create a strong reference to "
"an object. Usually, the :c:func:`Py_DECREF` function must be called on the "
"strong reference before exiting the scope of the strong reference, to avoid "
"leaking one reference."
msgstr ""

#: ../../glossary.rst:1332
msgid "See also :term:`borrowed reference`."
msgstr ""

#: ../../glossary.rst:1333
msgid "t-string"
msgstr ""

#: ../../glossary.rst:1334
msgid "t-strings"
msgstr ""

#: ../../glossary.rst:1336
msgid ""
"String literals prefixed with ``t`` or ``T`` are commonly called \"t-"
"strings\" which is short for :ref:`template string literals <t-strings>`."
msgstr ""

#: ../../glossary.rst:1339
msgid "text encoding"
msgstr "codificación de texto"

#: ../../glossary.rst:1341
msgid ""
"A string in Python is a sequence of Unicode code points (in range "
"``U+0000``--``U+10FFFF``). To store or transfer a string, it needs to be "
"serialized as a sequence of bytes."
msgstr ""
"Una cadena en Python es una secuencia de puntos de código Unicode (en el "
"rango ``U+0000``--``U+10FFFF``). Para almacenar o transferir una cadena, es "
"necesario serializarla como una secuencia de bytes."

#: ../../glossary.rst:1345
msgid ""
"Serializing a string into a sequence of bytes is known as \"encoding\", and "
"recreating the string from the sequence of bytes is known as \"decoding\"."
msgstr ""
"La serialización de una cadena en una secuencia de bytes se conoce como "
"\"codificación\", y la recreación de la cadena a partir de la secuencia de "
"bytes se conoce como \"descodificación\"."

#: ../../glossary.rst:1348
msgid ""
"There are a variety of different text serialization :ref:`codecs <standard-"
"encodings>`, which are collectively referred to as \"text encodings\"."
msgstr ""
"Existe una gran variedad de serializaciones de texto :ref:`codecs <standard-"
"encodings>`, que se denominan colectivamente \"codificaciones de texto\"."

#: ../../glossary.rst:1351
msgid "text file"
msgstr "archivo de texto"

#: ../../glossary.rst:1353
msgid ""
"A :term:`file object` able to read and write :class:`str` objects. Often, a "
"text file actually accesses a byte-oriented datastream and handles the :term:"
"`text encoding` automatically. Examples of text files are files opened in "
"text mode (``'r'`` or ``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, and "
"instances of :class:`io.StringIO`."
msgstr ""
"Un objeto :term:`file` capaz de leer y escribir objetos :class:`str`. A "
"menudo, un archivo de texto accede en realidad a un flujo de datos orientado "
"a bytes y maneja la codificación :term:`text` automáticamente. Ejemplos de "
"archivos de texto son los archivos abiertos en modo texto (``'r'`` o "
"``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, e instancias de :class:`io."
"StringIO`."

#: ../../glossary.rst:1360
msgid ""
"See also :term:`binary file` for a file object able to read and write :term:"
"`bytes-like objects <bytes-like object>`."
msgstr ""
"Ver también :term:`binary file` para un objeto fichero capaz de leer y "
"escribir :term:`bytes-like objetos <bytes-like object>`."

#: ../../glossary.rst:1362
msgid "thread state"
msgstr ""

#: ../../glossary.rst:1365
msgid ""
"The information used by the :term:`CPython` runtime to run in an OS thread. "
"For example, this includes the current exception, if any, and the state of "
"the bytecode interpreter."
msgstr ""

#: ../../glossary.rst:1369
msgid ""
"Each thread state is bound to a single OS thread, but threads may have many "
"thread states available.  At most, one of them may be :term:`attached "
"<attached thread state>` at once."
msgstr ""

#: ../../glossary.rst:1373
msgid ""
"An :term:`attached thread state` is required to call most of Python's C API, "
"unless a function explicitly documents otherwise. The bytecode interpreter "
"only runs under an attached thread state."
msgstr ""

#: ../../glossary.rst:1377
msgid ""
"Each thread state belongs to a single interpreter, but each interpreter may "
"have many thread states, including multiple for the same OS thread. Thread "
"states from multiple interpreters may be bound to the same thread, but only "
"one can be :term:`attached <attached thread state>` in that thread at any "
"given moment."
msgstr ""

#: ../../glossary.rst:1383
msgid ""
"See :ref:`Thread State and the Global Interpreter Lock <threads>` for more "
"information."
msgstr ""

#: ../../glossary.rst:1385
msgid "token"
msgstr ""

#: ../../glossary.rst:1388
msgid ""
"A small unit of source code, generated by the :ref:`lexical analyzer "
"<lexical>` (also called the *tokenizer*). Names, numbers, strings, "
"operators, newlines and similar are represented by tokens."
msgstr ""

#: ../../glossary.rst:1393
msgid ""
"The :mod:`tokenize` module exposes Python's lexical analyzer. The :mod:"
"`token` module contains information on the various types of tokens."
msgstr ""

#: ../../glossary.rst:1396
msgid "triple-quoted string"
msgstr "cadena entre comillas triples"

#: ../../glossary.rst:1398
msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""
"Cadena delimitada por tres comillas (\") o un apóstrofe (').  Aunque no "
"ofrecen ninguna funcionalidad que no esté disponible con las cadenas entre "
"comillas simples, son útiles por varias razones.  Permiten incluir comillas "
"simples y dobles dentro de una cadena y pueden abarcar varias líneas sin "
"necesidad de utilizar el carácter de continuación, lo que las hace "
"especialmente útiles a la hora de escribir docstrings."

#: ../../glossary.rst:1405
msgid "type"
msgstr "tipo"

#: ../../glossary.rst:1407
msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its :attr:`~object."
"__class__` attribute or can be retrieved with ``type(obj)``."
msgstr ""

#: ../../glossary.rst:1411
msgid "type alias"
msgstr "alias de tipo"

#: ../../glossary.rst:1413
msgid "A synonym for a type, created by assigning the type to an identifier."
msgstr "Sinónimo de un tipo, creado asignando el tipo a un identificador."

#: ../../glossary.rst:1415
msgid ""
"Type aliases are useful for simplifying :term:`type hints <type hint>`. For "
"example::"
msgstr ""
"Los alias de tipo son útiles para simplificar :term:`type hints <type "
"hint>`. Por ejemplo::"

#: ../../glossary.rst:1418
msgid ""
"def remove_gray_shades(\n"
"        colors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\n"
"    pass"
msgstr ""

#: ../../glossary.rst:1422
msgid "could be made more readable like this::"
msgstr "podría hacerse más legible así::"

#: ../../glossary.rst:1424
msgid ""
"Color = tuple[int, int, int]\n"
"\n"
"def remove_gray_shades(colors: list[Color]) -> list[Color]:\n"
"    pass"
msgstr ""

#: ../../glossary.rst:1429 ../../glossary.rst:1443
msgid "See :mod:`typing` and :pep:`484`, which describe this functionality."
msgstr "Ver :mod:`typing` y :pep:`484`, que describen esta funcionalidad."

#: ../../glossary.rst:1430
msgid "type hint"
msgstr "tipo de pista"

#: ../../glossary.rst:1432
msgid ""
"An :term:`annotation` that specifies the expected type for a variable, a "
"class attribute, or a function parameter or return value."
msgstr ""
"Una :term:`annotation` que especifica el tipo esperado para una variable, un "
"atributo de clase, o un parámetro o valor de retorno de una función."

#: ../../glossary.rst:1435
msgid ""
"Type hints are optional and are not enforced by Python but they are useful "
"to :term:`static type checkers <static type checker>`. They can also aid "
"IDEs with code completion and refactoring."
msgstr ""

#: ../../glossary.rst:1439
msgid ""
"Type hints of global variables, class attributes, and functions, but not "
"local variables, can be accessed using :func:`typing.get_type_hints`."
msgstr ""
"Se puede acceder a las sugerencias de tipo de las variables globales, los "
"atributos de clase y las funciones, pero no a las variables locales, "
"mediante :func:`typing.get_type_hints`."

#: ../../glossary.rst:1444
msgid "universal newlines"
msgstr "nuevas líneas universales"

#: ../../glossary.rst:1446
msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention "
"``'\\r'``.  See :pep:`278` and :pep:`3116`, as well as :func:`bytes."
"splitlines` for an additional use."
msgstr ""
"Una forma de interpretar flujos de texto en la que se reconoce como final de "
"línea todo lo siguiente: la convención de final de línea de Unix ``'\\n'``, "
"la convención de Windows ``'\\r\\n'``, y la antigua convención de Macintosh "
"``'\\r'``.  Para un uso adicional, ver :pep:`278` y :pep:`3116`, así como :"
"func:`bytes.splitlines`."

#: ../../glossary.rst:1451
msgid "variable annotation"
msgstr "anotación variable"

#: ../../glossary.rst:1453
msgid "An :term:`annotation` of a variable or a class attribute."
msgstr "Una :term:`annotation` de una variable o un atributo de clase."

#: ../../glossary.rst:1455
msgid ""
"When annotating a variable or a class attribute, assignment is optional::"
msgstr ""
"Al anotar una variable o un atributo de clase, la asignación es opcional::"

#: ../../glossary.rst:1457
msgid ""
"class C:\n"
"    field: 'annotation'"
msgstr ""

#: ../../glossary.rst:1460
msgid ""
"Variable annotations are usually used for :term:`type hints <type hint>`: "
"for example this variable is expected to take :class:`int` values::"
msgstr ""
"Las anotaciones de variables suelen utilizarse para :term:`type hints <type "
"hint>`: por ejemplo, se espera que esta variable tome valores :class:`int`::"

#: ../../glossary.rst:1464
msgid "count: int = 0"
msgstr ""

#: ../../glossary.rst:1466
msgid "Variable annotation syntax is explained in section :ref:`annassign`."
msgstr ""
"La sintaxis de la anotación de variables se explica en la sección :ref:"
"`annassign`."

#: ../../glossary.rst:1468
msgid ""
"See :term:`function annotation`, :pep:`484` and :pep:`526`, which describe "
"this functionality. Also see :ref:`annotations-howto` for best practices on "
"working with annotations."
msgstr ""

#: ../../glossary.rst:1472
msgid "virtual environment"
msgstr "entorno virtual"

#: ../../glossary.rst:1474
msgid ""
"A cooperatively isolated runtime environment that allows Python users and "
"applications to install and upgrade Python distribution packages without "
"interfering with the behaviour of other Python applications running on the "
"same system."
msgstr ""
"Un entorno de ejecución aislado de forma cooperativa que permite a los "
"usuarios y aplicaciones de Python instalar y actualizar paquetes de "
"distribución de Python sin interferir en el comportamiento de otras "
"aplicaciones de Python que se ejecuten en el mismo sistema."

#: ../../glossary.rst:1479
msgid "See also :mod:`venv`."
msgstr "Ver también :mod:`venv`."

#: ../../glossary.rst:1480
msgid "virtual machine"
msgstr "máquina virtual"

#: ../../glossary.rst:1482
msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""
"Un ordenador definido enteramente por software.  La máquina virtual de "
"Python ejecuta el :term:`bytecode` emitido por el compilador de bytecode."

#: ../../glossary.rst:1484
msgid "walrus operator"
msgstr ""

#: ../../glossary.rst:1486
msgid ""
"A light-hearted way to refer to the :ref:`assignment expression <assignment-"
"expressions>` operator ``:=`` because it looks a bit like a walrus if you "
"turn your head."
msgstr ""

#: ../../glossary.rst:1489
msgid "Zen of Python"
msgstr "Zen de Python"

#: ../../glossary.rst:1491
msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""
"Listado de principios y filosofías de diseño de Python que resultan útiles "
"para comprender y utilizar el lenguaje.  El listado se puede encontrar "
"escribiendo \"``import this``\" en el indicador interactivo."

#: ../../glossary.rst:24
msgid "..."
msgstr ""

#: ../../glossary.rst:24
msgid "ellipsis literal"
msgstr ""

#: ../../glossary.rst:321
msgid "C-contiguous"
msgstr ""

#: ../../glossary.rst:321
msgid "Fortran contiguous"
msgstr ""

#: ../../glossary.rst:884
msgid "magic"
msgstr ""

#: ../../glossary.rst:1290
msgid "special"
msgstr ""
