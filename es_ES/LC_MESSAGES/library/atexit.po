# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 14:56+0000\n"
"PO-Revision-Date: 2025-09-15 01:03+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../library/atexit.rst:2
msgid ":mod:`!atexit` --- Exit handlers"
msgstr ""

#: ../../library/atexit.rst:12
msgid ""
"The :mod:`atexit` module defines functions to register and unregister "
"cleanup functions.  Functions thus registered are automatically executed "
"upon normal interpreter termination.  :mod:`atexit` runs these functions in "
"the *reverse* order in which they were registered; if you register ``A``, "
"``B``, and ``C``, at interpreter termination time they will be run in the "
"order ``C``, ``B``, ``A``."
msgstr ""
"El módulo :mod:`atexit` define funciones para registrar y anular el registro "
"de funciones de limpieza.  Las funciones así registradas se ejecutan "
"automáticamente al finalizar el intérprete. :mod:`atexit` ejecuta estas "
"funciones en el orden *reverse* en el que se registraron; si registra ``A``, "
"``B``, y ``C``, al finalizar el intérprete se ejecutarán en el orden ``C``, "
"``B``, ``A``."

#: ../../library/atexit.rst:19
msgid ""
"**Note:** The functions registered via this module are not called when the "
"program is killed by a signal not handled by Python, when a Python fatal "
"internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"**Nota:** Las funciones registradas a través de este módulo no se llaman "
"cuando mata al programa una señal no manejada por Python, cuando se detecta "
"un error interno fatal de Python, o cuando se llama a :func:`os._exit`."

#: ../../library/atexit.rst:23
msgid ""
"**Note:** The effect of registering or unregistering functions from within a "
"cleanup function is undefined."
msgstr ""

#: ../../library/atexit.rst:26
msgid ""
"When used with C-API subinterpreters, registered functions are local to the "
"interpreter they were registered in."
msgstr ""
"Cuando se utilizan con subinterpretadores C-API, las funciones registradas "
"son locales al intérprete en el que se registraron."

#: ../../library/atexit.rst:32
msgid ""
"Register *func* as a function to be executed at termination.  Any optional "
"arguments that are to be passed to *func* must be passed as arguments to :"
"func:`register`.  It is possible to register the same function and arguments "
"more than once."
msgstr ""
"Registra *func* como una función que se ejecutará al terminar.  Cualquier "
"argumento opcional que deba pasarse a *func* debe pasarse como argumento a :"
"func:`register`. Es posible registrar la misma función y los mismos "
"argumentos más de una vez."

#: ../../library/atexit.rst:37
msgid ""
"At normal program termination (for instance, if :func:`sys.exit` is called "
"or the main module's execution completes), all functions registered are "
"called in last in, first out order.  The assumption is that lower level "
"modules will normally be imported before higher level modules and thus must "
"be cleaned up later."
msgstr ""
"A la terminación normal del programa (por ejemplo, si se llama a :func:`sys."
"exit` o finaliza la ejecución del módulo principal), se llama a todas las "
"funciones registradas en orden de último en entrar, primero en salir.  El "
"supuesto es que los módulos de nivel inferior se importarán normalmente "
"antes que los de nivel superior y, por tanto, deberán limpiarse más tarde."

#: ../../library/atexit.rst:43
msgid ""
"If an exception is raised during execution of the exit handlers, a traceback "
"is printed (unless :exc:`SystemExit` is raised) and the exception "
"information is saved.  After all exit handlers have had a chance to run, the "
"last exception to be raised is re-raised."
msgstr ""
"Si se lanza una excepción durante la ejecución de los controladores de "
"salida, se imprime un rastreo (a menos que se lance :exc:`SystemExit` ) y se "
"guarda la información de la excepción.  Una vez que todos los controladores "
"de salida han tenido la oportunidad de ejecutarse, se vuelve a lanzar la "
"última excepción."

#: ../../library/atexit.rst:48
msgid ""
"This function returns *func*, which makes it possible to use it as a "
"decorator."
msgstr ""
"Esta función devuelve *func*, lo que permite utilizarla como decorador."

#: ../../library/atexit.rst:52
msgid ""
"Starting new threads or calling :func:`os.fork` from a registered function "
"can lead to race condition between the main Python runtime thread freeing "
"thread states while internal :mod:`threading` routines or the new process "
"try to use that state. This can lead to crashes rather than clean shutdown."
msgstr ""

#: ../../library/atexit.rst:58
msgid ""
"Attempts to start a new thread or :func:`os.fork` a new process in a "
"registered function now leads to :exc:`RuntimeError`."
msgstr ""

#: ../../library/atexit.rst:64
msgid ""
"Remove *func* from the list of functions to be run at interpreter shutdown. :"
"func:`unregister` silently does nothing if *func* was not previously "
"registered.  If *func* has been registered more than once, every occurrence "
"of that function in the :mod:`atexit` call stack will be removed.  Equality "
"comparisons (``==``) are used internally during unregistration, so function "
"references do not need to have matching identities."
msgstr ""
"Elimina *func* de la lista de funciones que se ejecutarán al apagar el "
"intérprete. :func:`unregister` no hace nada silenciosamente si *func* no se "
"registró previamente.  Si *func* ha sido registrada más de una vez, cada "
"aparición de esa función en la pila de llamadas de :mod:`atexit` será "
"eliminada.  Las comparaciones de igualdad (``==``) se usan internamente "
"durante el desregistro, por lo que las referencias a funciones no necesitan "
"tener identidades coincidentes."

#: ../../library/atexit.rst:74
msgid "Module :mod:`readline`"
msgstr "Módulo :mod:`readline`"

#: ../../library/atexit.rst:75
msgid ""
"Useful example of :mod:`atexit` to read and write :mod:`readline` history "
"files."
msgstr ""
"Ejemplo útil de :mod:`atexit` para leer y escribir :mod:`readline` archivos "
"de historial.."

#: ../../library/atexit.rst:82
msgid ":mod:`atexit` Example"
msgstr ":mod:`atexit` Ejemplo"

#: ../../library/atexit.rst:84
msgid ""
"The following simple example demonstrates how a module can initialize a "
"counter from a file when it is imported and save the counter's updated value "
"automatically when the program terminates without relying on the application "
"making an explicit call into this module at termination. ::"
msgstr ""
"El siguiente ejemplo sencillo demuestra cómo un módulo puede inicializar un "
"contador desde un archivo cuando se importa y guardar el valor actualizado "
"del contador automáticamente cuando el programa termina sin depender de que "
"la aplicación haga una llamada explícita a este módulo al terminar. ::"

#: ../../library/atexit.rst:89
msgid ""
"try:\n"
"    with open('counterfile') as infile:\n"
"        _count = int(infile.read())\n"
"except FileNotFoundError:\n"
"    _count = 0\n"
"\n"
"def incrcounter(n):\n"
"    global _count\n"
"    _count = _count + n\n"
"\n"
"def savecounter():\n"
"    with open('counterfile', 'w') as outfile:\n"
"        outfile.write('%d' % _count)\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(savecounter)"
msgstr ""

#: ../../library/atexit.rst:107
msgid ""
"Positional and keyword arguments may also be passed to :func:`register` to "
"be passed along to the registered function when it is called::"
msgstr ""
"Los argumentos posicionales y de palabra clave también se pueden pasar a :"
"func:`register` para que se pasen a la función registrada cuando se llame::"

#: ../../library/atexit.rst:110
msgid ""
"def goodbye(name, adjective):\n"
"    print('Goodbye %s, it was %s to meet you.' % (name, adjective))\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(goodbye, 'Donny', 'nice')\n"
"# or:\n"
"atexit.register(goodbye, adjective='nice', name='Donny')"
msgstr ""

#: ../../library/atexit.rst:119
msgid "Usage as a :term:`decorator`::"
msgstr "Utilización como :term:`decorator`::"

#: ../../library/atexit.rst:121
msgid ""
"import atexit\n"
"\n"
"@atexit.register\n"
"def goodbye():\n"
"    print('You are now leaving the Python sector.')"
msgstr ""

#: ../../library/atexit.rst:127
msgid "This only works with functions that can be called without arguments."
msgstr "Esto sólo funciona con funciones que se pueden llamar sin argumentos."
