# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-28 16:28+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../library/argparse.rst:2
msgid ""
":mod:`argparse` --- Parser for command-line options, arguments and sub-"
"commands"
msgstr ""

#: ../../library/argparse.rst:12
msgid "**Source code:** :source:`Lib/argparse.py`"
msgstr "**Código fuente:** :source:`Lib/argparse.py`"

#: ../../library/argparse.rstNone
msgid "Tutorial"
msgstr "Tutorial"

#: ../../library/argparse.rst:18
msgid ""
"This page contains the API reference information. For a more gentle "
"introduction to Python command-line parsing, have a look at the :ref:"
"`argparse tutorial <argparse-tutorial>`."
msgstr ""
"Esta página contiene la información de referencia de la API. Para una "
"introducción más suave al análisis sintáctico de la línea de comandos de "
"Python, eche un vistazo al tutorial :ref:`argparse <argparse-tutorial>`."

#: ../../library/argparse.rst:22
msgid ""
"The :mod:`argparse` module makes it easy to write user-friendly command-line "
"interfaces. The program defines what arguments it requires, and :mod:"
"`argparse` will figure out how to parse those out of :data:`sys.argv`.  The :"
"mod:`argparse` module also automatically generates help and usage messages "
"and issues errors when users give the program invalid arguments."
msgstr ""

#: ../../library/argparse.rst:30
msgid "Example"
msgstr "Ejemplo"

#: ../../library/argparse.rst:32
msgid ""
"The following code is a Python program that takes a list of integers and "
"produces either the sum or the max::"
msgstr ""

#: ../../library/argparse.rst:47
msgid ""
"Assuming the Python code above is saved into a file called ``prog.py``, it "
"can be run at the command line and provides useful help messages:"
msgstr ""

#: ../../library/argparse.rst:64
msgid ""
"When run with the appropriate arguments, it prints either the sum or the max "
"of the command-line integers:"
msgstr ""

#: ../../library/argparse.rst:75
msgid "If invalid arguments are passed in, it will issue an error:"
msgstr ""

#: ../../library/argparse.rst:83
msgid "The following sections walk you through this example."
msgstr ""

#: ../../library/argparse.rst:87
msgid "Creating a parser"
msgstr ""

#: ../../library/argparse.rst:89
msgid ""
"The first step in using the :mod:`argparse` is creating an :class:"
"`ArgumentParser` object::"
msgstr ""

#: ../../library/argparse.rst:94
msgid ""
"The :class:`ArgumentParser` object will hold all the information necessary "
"to parse the command line into Python data types."
msgstr ""

#: ../../library/argparse.rst:99
msgid "Adding arguments"
msgstr ""

#: ../../library/argparse.rst:101
msgid ""
"Filling an :class:`ArgumentParser` with information about program arguments "
"is done by making calls to the :meth:`~ArgumentParser.add_argument` method. "
"Generally, these calls tell the :class:`ArgumentParser` how to take the "
"strings on the command line and turn them into objects.  This information is "
"stored and used when :meth:`~ArgumentParser.parse_args` is called. For "
"example::"
msgstr ""

#: ../../library/argparse.rst:113
msgid ""
"Later, calling :meth:`~ArgumentParser.parse_args` will return an object with "
"two attributes, ``integers`` and ``accumulate``.  The ``integers`` attribute "
"will be a list of one or more ints, and the ``accumulate`` attribute will be "
"either the :func:`sum` function, if ``--sum`` was specified at the command "
"line, or the :func:`max` function if it was not."
msgstr ""

#: ../../library/argparse.rst:121
msgid "Parsing arguments"
msgstr "Analizando argumentos"

#: ../../library/argparse.rst:123
msgid ""
":class:`ArgumentParser` parses arguments through the :meth:`~ArgumentParser."
"parse_args` method.  This will inspect the command line, convert each "
"argument to the appropriate type and then invoke the appropriate action. In "
"most cases, this means a simple :class:`Namespace` object will be built up "
"from attributes parsed out of the command line::"
msgstr ""

#: ../../library/argparse.rst:132
msgid ""
"In a script, :meth:`~ArgumentParser.parse_args` will typically be called "
"with no arguments, and the :class:`ArgumentParser` will automatically "
"determine the command-line arguments from :data:`sys.argv`."
msgstr ""

#: ../../library/argparse.rst:138
msgid "ArgumentParser objects"
msgstr "Objetos ArgumentParser"

#: ../../library/argparse.rst:147
msgid ""
"Create a new :class:`ArgumentParser` object. All parameters should be passed "
"as keyword arguments. Each parameter has its own more detailed description "
"below, but in short they are:"
msgstr ""
"Crea un nuevo objeto :class:`ArgumentParser`. Todos los parámetros deben "
"pasarse como argumentos de palabra clave. Cada parámetro tiene su propia "
"descripción más detallada a continuación, pero en resumen son:"

#: ../../library/argparse.rst:151
msgid ""
"prog_ - The name of the program (default: ``os.path.basename(sys.argv[0])``)"
msgstr ""
"prog_ - El nombre del programa (por defecto: ``os.path.basename(sys."
"argv[0])``)"

#: ../../library/argparse.rst:154
msgid ""
"usage_ - The string describing the program usage (default: generated from "
"arguments added to parser)"
msgstr ""
"usage_ - La cadena que describe el uso del programa (por defecto: generada a "
"partir de los argumentos añadidos al analizador sintáctico)"

#: ../../library/argparse.rst:157
msgid ""
"description_ - Text to display before the argument help (by default, no text)"
msgstr ""
"description_ - Texto a mostrar antes del argumento help (por defecto, sin "
"texto)"

#: ../../library/argparse.rst:160
msgid "epilog_ - Text to display after the argument help (by default, no text)"
msgstr ""
"epilog_ - Texto a mostrar después del argumento help (por defecto, sin texto)"

#: ../../library/argparse.rst:162
msgid ""
"parents_ - A list of :class:`ArgumentParser` objects whose arguments should "
"also be included"
msgstr ""
"parents_ - Una lista de objetos :class:`ArgumentParser` cuyos argumentos "
"también deben incluirse"

#: ../../library/argparse.rst:165
msgid "formatter_class_ - A class for customizing the help output"
msgstr "formatter_class_ - Una clase para personalizar la salida de ayuda"

#: ../../library/argparse.rst:167
msgid ""
"prefix_chars_ - The set of characters that prefix optional arguments "
"(default: '-')"
msgstr ""
"prefix_chars_ - Conjunto de caracteres que preceden a los argumentos "
"opcionales (por defecto: '-')"

#: ../../library/argparse.rst:170
msgid ""
"fromfile_prefix_chars_ - The set of characters that prefix files from which "
"additional arguments should be read (default: ``None``)"
msgstr ""
"fromfile_prefix_chars_ - El conjunto de caracteres que prefijan los archivos "
"de los que deben leerse argumentos adicionales (por defecto: ``None``)"

#: ../../library/argparse.rst:173
msgid ""
"argument_default_ - The global default value for arguments (default: "
"``None``)"
msgstr ""
"argument_default_ - El valor global por defecto para los argumentos (por "
"defecto: ``None``)"

#: ../../library/argparse.rst:176
msgid ""
"conflict_handler_ - The strategy for resolving conflicting optionals "
"(usually unnecessary)"
msgstr ""
"conflict_handler_ - La estrategia para resolver opcionales en conflicto "
"(normalmente innecesaria)"

#: ../../library/argparse.rst:179
msgid ""
"add_help_ - Add a ``-h/--help`` option to the parser (default: ``True``)"
msgstr ""
"add_help_ - Añadir una opción ``-h/--help`` al analizador sintáctico (por "
"defecto: ``True``)"

#: ../../library/argparse.rst:181
msgid ""
"allow_abbrev_ - Allows long options to be abbreviated if the abbreviation is "
"unambiguous. (default: ``True``)"
msgstr ""
"allow_abbrev_ - Permite abreviar opciones largas si la abreviatura no es "
"ambigua. (por defecto: ``True``)"

#: ../../library/argparse.rst:184
msgid ""
"exit_on_error_ - Determines whether or not ArgumentParser exits with error "
"info when an error occurs. (default: ``True``)"
msgstr ""

#: ../../library/argparse.rst:187
msgid "*allow_abbrev* parameter was added."
msgstr "Se ha añadido el parámetro *allow_abbrev*."

#: ../../library/argparse.rst:190
msgid ""
"In previous versions, *allow_abbrev* also disabled grouping of short flags "
"such as ``-vv`` to mean ``-v -v``."
msgstr ""
"En versiones anteriores, *allow_abbrev* también desactivaba la agrupación de "
"banderas cortas como ``-vv`` para significar ``-v -v``."

#: ../../library/argparse.rst:194
msgid "*exit_on_error* parameter was added."
msgstr "Se ha añadido el parámetro *exit_on_error*."

#: ../../library/argparse.rst:197 ../../library/argparse.rst:717
msgid "The following sections describe how each of these are used."
msgstr ""
"En los siguientes apartados se describe cómo se utiliza cada uno de ellos."

#: ../../library/argparse.rst:201
msgid "prog"
msgstr "prog"

#: ../../library/argparse.rst:203
msgid ""
"By default, :class:`ArgumentParser` objects use ``sys.argv[0]`` to determine "
"how to display the name of the program in help messages.  This default is "
"almost always desirable because it will make the help messages match how the "
"program was invoked on the command line.  For example, consider a file named "
"``myprogram.py`` with the following code::"
msgstr ""

#: ../../library/argparse.rst:214
msgid ""
"The help for this program will display ``myprogram.py`` as the program name "
"(regardless of where the program was invoked from):"
msgstr ""

#: ../../library/argparse.rst:233
msgid ""
"To change this default behavior, another value can be supplied using the "
"``prog=`` argument to :class:`ArgumentParser`::"
msgstr ""

#: ../../library/argparse.rst:243
msgid ""
"Note that the program name, whether determined from ``sys.argv[0]`` or from "
"the ``prog=`` argument, is available to help messages using the ``%(prog)s`` "
"format specifier."
msgstr ""
"Tenga en cuenta que el nombre del programa, ya sea determinado a partir de "
"``sys.argv[0]`` o del argumento ``prog=``, está disponible para los mensajes "
"de ayuda que utilizan el especificador de formato ``%(prog)s``."

#: ../../library/argparse.rst:260
msgid "usage"
msgstr "uso"

#: ../../library/argparse.rst:262
msgid ""
"By default, :class:`ArgumentParser` calculates the usage message from the "
"arguments it contains::"
msgstr ""

#: ../../library/argparse.rst:278
msgid ""
"The default message can be overridden with the ``usage=`` keyword argument::"
msgstr ""

#: ../../library/argparse.rst:293
msgid ""
"The ``%(prog)s`` format specifier is available to fill in the program name "
"in your usage messages."
msgstr ""
"El especificador de formato ``%(prog)s`` está disponible para rellenar el "
"nombre del programa en sus mensajes de uso."

#: ../../library/argparse.rst:298
msgid "description"
msgstr "descripción"

#: ../../library/argparse.rst:300
msgid ""
"Most calls to the :class:`ArgumentParser` constructor will use the "
"``description=`` keyword argument.  This argument gives a brief description "
"of what the program does and how it works.  In help messages, the "
"description is displayed between the command-line usage string and the help "
"messages for the various arguments::"
msgstr ""

#: ../../library/argparse.rst:315
msgid ""
"By default, the description will be line-wrapped so that it fits within the "
"given space.  To change this behavior, see the formatter_class_ argument."
msgstr ""
"Por defecto, la descripción se ajustará para que quepa en el espacio dado.  "
"Para cambiar este comportamiento, consultar el argumento formatter_class_."

#: ../../library/argparse.rst:320
msgid "epilog"
msgstr "epílogo"

#: ../../library/argparse.rst:322
msgid ""
"Some programs like to display additional description of the program after "
"the description of the arguments.  Such text can be specified using the "
"``epilog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Algunos programas prefieren mostrar una descripción adicional del programa "
"después de la descripción de los argumentos.  Dicho texto puede "
"especificarse utilizando el argumento ``epilog=`` de :class:"
"`ArgumentParser`::"

#: ../../library/argparse.rst:339
msgid ""
"As with the description_ argument, the ``epilog=`` text is by default line-"
"wrapped, but this behavior can be adjusted with the formatter_class_ "
"argument to :class:`ArgumentParser`."
msgstr ""
"Al igual que ocurre con el argumento description_, el texto de ``epilog=`` "
"se ajusta por defecto a las líneas, pero este comportamiento puede ajustarse "
"con el formatter_class_ argument to :class:`ArgumentParser`."

#: ../../library/argparse.rst:345
msgid "parents"
msgstr "padres"

#: ../../library/argparse.rst:347
msgid ""
"Sometimes, several parsers share a common set of arguments. Rather than "
"repeating the definitions of these arguments, a single parser with all the "
"shared arguments and passed to ``parents=`` argument to :class:"
"`ArgumentParser` can be used.  The ``parents=`` argument takes a list of :"
"class:`ArgumentParser` objects, collects all the positional and optional "
"actions from them, and adds these actions to the :class:`ArgumentParser` "
"object being constructed::"
msgstr ""
"A veces, varios analizadores sintácticos comparten un conjunto común de "
"argumentos. En lugar de repetir las definiciones de estos argumentos, se "
"puede utilizar un único analizador sintáctico con todos los argumentos "
"compartidos y pasar el argumento ``parents=`` a :class:`ArgumentParser`.  El "
"argumento ``parents=`` toma una lista de objetos :class:`ArgumentParser`, "
"recoge todas las acciones posicionales y opcionales de ellos, y añade estas "
"acciones al objeto :class:`ArgumentParser` que se está construyendo::"

#: ../../library/argparse.rst:367
msgid ""
"Note that most parent parsers will specify ``add_help=False``.  Otherwise, "
"the :class:`ArgumentParser` will see two ``-h/--help`` options (one in the "
"parent and one in the child) and raise an error."
msgstr ""
"Tener en cuenta que la mayoría de los analizadores padre especificarán "
"``add_help=False``.  De lo contrario, :class:`ArgumentParser` verá dos "
"opciones ``-h/--help`` (una en el padre y otra en el hijo) y generará un "
"error."

#: ../../library/argparse.rst:372
msgid ""
"You must fully initialize the parsers before passing them via ``parents=``. "
"If you change the parent parsers after the child parser, those changes will "
"not be reflected in the child."
msgstr ""
"Debe inicializar completamente los analizadores sintácticos antes de "
"pasarlos a través de ``parents=``. Si cambias los analizadores padre después "
"del analizador hijo, esos cambios no se reflejarán en el hijo."

#: ../../library/argparse.rst:378
msgid "formatter_class"
msgstr "formatter_class"

#: ../../library/argparse.rst:380
msgid ""
":class:`ArgumentParser` objects allow the help formatting to be customized "
"by specifying an alternate formatting class.  Currently, there are four such "
"classes:"
msgstr ""
":class:`ArgumentParser` permiten personalizar el formato de la ayuda "
"especificando una clase de formato alternativa.  Actualmente, existen cuatro "
"clases de este tipo:"

#: ../../library/argparse.rst:389
msgid ""
":class:`RawDescriptionHelpFormatter` and :class:`RawTextHelpFormatter` give "
"more control over how textual descriptions are displayed. By default, :class:"
"`ArgumentParser` objects line-wrap the description_ and epilog_ texts in "
"command-line help messages::"
msgstr ""
":class:`RawDescriptionHelpFormatter` y :class:`RawTextHelpFormatter` ofrecen "
"más control sobre cómo se muestran las descripciones textuales. Por defecto, "
"los objetos :class:`ArgumentParser` envuelven con líneas los textos "
"description_ y epilog_ de los mensajes de ayuda de línea de comandos::"

#: ../../library/argparse.rst:414
msgid ""
"Passing :class:`RawDescriptionHelpFormatter` as ``formatter_class=`` "
"indicates that description_ and epilog_ are already correctly formatted and "
"should not be line-wrapped::"
msgstr ""
"Pasando :class:`RawDescriptionHelpFormatter` como ``formatter_class=`` "
"indica que description_ y epilog_ ya están correctamente formateados y no "
"deben ser line-wrapped::"

#: ../../library/argparse.rst:440
msgid ""
":class:`RawTextHelpFormatter` maintains whitespace for all sorts of help "
"text, including argument descriptions. However, multiple new lines are "
"replaced with one. If you wish to preserve multiple blank lines, add spaces "
"between the newlines."
msgstr ""

#: ../../library/argparse.rst:445
msgid ""
":class:`ArgumentDefaultsHelpFormatter` automatically adds information about "
"default values to each of the argument help messages::"
msgstr ""
":class:`ArgumentDefaultsHelpFormatter` añade automáticamente información "
"sobre los valores por defecto a cada uno de los mensajes de ayuda de los "
"argumentos::"

#: ../../library/argparse.rst:463
msgid ""
":class:`MetavarTypeHelpFormatter` uses the name of the type_ argument for "
"each argument as the display name for its values (rather than using the "
"dest_ as the regular formatter does)::"
msgstr ""
":class:`MetavarTypeHelpFormatter` utiliza el nombre del argumento type_ para "
"cada argumento como nombre de visualización para sus valores (en lugar de "
"utilizar el dest_ como hace el formateador normal)::"

#: ../../library/argparse.rst:484
msgid "prefix_chars"
msgstr "prefix_chars"

#: ../../library/argparse.rst:486
msgid ""
"Most command-line options will use ``-`` as the prefix, e.g. ``-f/--foo``. "
"Parsers that need to support different or additional prefix characters, e.g. "
"for options like ``+f`` or ``/foo``, may specify them using the "
"``prefix_chars=`` argument to the ArgumentParser constructor::"
msgstr ""

#: ../../library/argparse.rst:498
msgid ""
"The ``prefix_chars=`` argument defaults to ``'-'``. Supplying a set of "
"characters that does not include ``-`` will cause ``-f/--foo`` options to be "
"disallowed."
msgstr ""
"El argumento ``prefix_chars=`` es por defecto ``'-'``. Si se proporciona un "
"conjunto de caracteres que no incluya ``-``, no se permitirán las opciones "
"de ``-f/--foo``."

#: ../../library/argparse.rst:504
msgid "fromfile_prefix_chars"
msgstr "fromfile_prefix_chars"

#: ../../library/argparse.rst:506
msgid ""
"Sometimes, for example when dealing with a particularly long argument list, "
"it may make sense to keep the list of arguments in a file rather than typing "
"it out at the command line.  If the ``fromfile_prefix_chars=`` argument is "
"given to the :class:`ArgumentParser` constructor, then arguments that start "
"with any of the specified characters will be treated as files, and will be "
"replaced by the arguments they contain.  For example::"
msgstr ""

#: ../../library/argparse.rst:520
msgid ""
"Arguments read from a file must by default be one per line (but see also :"
"meth:`~ArgumentParser.convert_arg_line_to_args`) and are treated as if they "
"were in the same place as the original file referencing argument on the "
"command line.  So in the example above, the expression ``['-f', 'foo', "
"'@args.txt']`` is considered equivalent to the expression ``['-f', 'foo', '-"
"f', 'bar']``."
msgstr ""
"Los argumentos leídos de un fichero deben ser por defecto uno por línea "
"(pero véase también :meth:`~ArgumentParser.convert_arg_line_to_args`) y se "
"tratan como si estuvieran en el mismo lugar que el argumento original de "
"referencia al fichero en la línea de órdenes.  Así, en el ejemplo anterior, "
"la expresión ``['-f', 'foo', '@args.txt']`` se considera equivalente a la "
"expresión ``['-f', 'foo', '-f', 'bar']``."

#: ../../library/argparse.rst:526
msgid ""
"The ``fromfile_prefix_chars=`` argument defaults to ``None``, meaning that "
"arguments will never be treated as file references."
msgstr ""
"El argumento ``fromfile_prefix_chars=`` por defecto es ``None``, lo que "
"significa que los argumentos nunca serán tratados como referencias a "
"archivos."

#: ../../library/argparse.rst:531
msgid "argument_default"
msgstr "argument_default"

#: ../../library/argparse.rst:533
msgid ""
"Generally, argument defaults are specified either by passing a default to :"
"meth:`~ArgumentParser.add_argument` or by calling the :meth:`~ArgumentParser."
"set_defaults` methods with a specific set of name-value pairs.  Sometimes "
"however, it may be useful to specify a single parser-wide default for "
"arguments.  This can be accomplished by passing the ``argument_default=`` "
"keyword argument to :class:`ArgumentParser`.  For example, to globally "
"suppress attribute creation on :meth:`~ArgumentParser.parse_args` calls, we "
"supply ``argument_default=SUPPRESS``::"
msgstr ""
"Generalmente, los argumentos por defecto se especifican pasando un valor por "
"defecto a :meth:`~ArgumentParser.add_argument` o llamando a los métodos de :"
"meth:`~ArgumentParser.set_defaults` con un conjunto específico de pares "
"nombre-valor.  Sin embargo, a veces puede resultar útil especificar un único "
"valor por defecto para los argumentos en todo el analizador sintáctico.  "
"Esto se puede conseguir pasando el argumento de palabra clave "
"``argument_default=`` a :class:`ArgumentParser`.  Por ejemplo, para suprimir "
"globalmente la creación de atributos en las llamadas a :meth:"
"`~ArgumentParser.parse_args`, proporcionamos ``argument_default=SUPPRESS``::"

#: ../../library/argparse.rst:553
msgid "allow_abbrev"
msgstr "allow_abbrev"

#: ../../library/argparse.rst:555
msgid ""
"Normally, when you pass an argument list to the :meth:`~ArgumentParser."
"parse_args` method of an :class:`ArgumentParser`, it :ref:`recognizes "
"abbreviations <prefix-matching>` of long options."
msgstr ""
"Normalmente, cuando se pasa una lista de argumentos al método :meth:"
"`~ArgumentParser.parse_args` de un :class:`ArgumentParser`, éste :ref:"
"`recognizes abbreviations <prefix-matching>` de opciones largas."

#: ../../library/argparse.rst:559
msgid "This feature can be disabled by setting ``allow_abbrev`` to ``False``::"
msgstr ""
"Esta función puede desactivarse configurando ``allow_abbrev`` en ``False``::"

#: ../../library/argparse.rst:572
msgid "conflict_handler"
msgstr "conflict_handler"

#: ../../library/argparse.rst:574
msgid ""
":class:`ArgumentParser` objects do not allow two actions with the same "
"option string.  By default, :class:`ArgumentParser` objects raise an "
"exception if an attempt is made to create an argument with an option string "
"that is already in use::"
msgstr ""
":class:`ArgumentParser` no permiten dos acciones con la misma cadena de "
"opción.  Por defecto, los objetos :class:`ArgumentParser` lanzan una "
"excepción si se intenta crear un argumento con una cadena de opción que ya "
"está en uso::"

#: ../../library/argparse.rst:586
msgid ""
"Sometimes (e.g. when using parents_) it may be useful to simply override any "
"older arguments with the same option string.  To get this behavior, the "
"value ``'resolve'`` can be supplied to the ``conflict_handler=`` argument "
"of :class:`ArgumentParser`::"
msgstr ""
"A veces (por ejemplo, cuando se utiliza parents_) puede ser útil simplemente "
"anular cualquier argumento anterior con la misma cadena de opciones.  Para "
"obtener este comportamiento, se puede suministrar el valor ``'resolve'`` al "
"argumento ``conflict_handler=`` de :class:`ArgumentParser`::"

#: ../../library/argparse.rst:602
msgid ""
"Note that :class:`ArgumentParser` objects only remove an action if all of "
"its option strings are overridden.  So, in the example above, the old ``-f/--"
"foo`` action is retained as the ``-f`` action, because only the ``--foo`` "
"option string was overridden."
msgstr ""
"Tenga en cuenta que los objetos :class:`ArgumentParser` sólo eliminan una "
"acción si se anulan todas sus cadenas de opciones.  Así, en el ejemplo "
"anterior, la antigua acción ``-f/--foo`` se conserva como la acción ``-f``, "
"porque sólo se ha anulado la cadena de opciones ``--foo``."

#: ../../library/argparse.rst:609
msgid "add_help"
msgstr "add_help"

#: ../../library/argparse.rst:611
msgid ""
"By default, ArgumentParser objects add an option which simply displays the "
"parser's help message. For example, consider a file named ``myprogram.py`` "
"containing the following code::"
msgstr ""

#: ../../library/argparse.rst:620
msgid ""
"If ``-h`` or ``--help`` is supplied at the command line, the ArgumentParser "
"help will be printed:"
msgstr ""

#: ../../library/argparse.rst:632
msgid ""
"Occasionally, it may be useful to disable the addition of this help option. "
"This can be achieved by passing ``False`` as the ``add_help=`` argument to :"
"class:`ArgumentParser`::"
msgstr ""
"Ocasionalmente, puede ser útil desactivar la adición de esta opción de "
"ayuda. Esto se puede conseguir pasando ``False`` como argumento "
"``add_help=`` a :class:`ArgumentParser`::"

#: ../../library/argparse.rst:644
msgid ""
"The help option is typically ``-h/--help``. The exception to this is if the "
"``prefix_chars=`` is specified and does not include ``-``, in which case ``-"
"h`` and ``--help`` are not valid options.  In this case, the first character "
"in ``prefix_chars`` is used to prefix the help options::"
msgstr ""
"La opción de ayuda suele ser ``-h/--help``. La excepción a esto es si se "
"especifica ``prefix_chars=`` y no incluye ``-``, en cuyo caso ``-h`` y ``--"
"help`` no son opciones válidas.  En este caso, el primer carácter de "
"``prefix_chars`` se utiliza como prefijo de las opciones de ayuda::"

#: ../../library/argparse.rst:659
msgid "exit_on_error"
msgstr "exit_on_error"

#: ../../library/argparse.rst:661
msgid ""
"Normally, when you pass an invalid argument list to the :meth:"
"`~ArgumentParser.parse_args` method of an :class:`ArgumentParser`, it will "
"exit with error info."
msgstr ""

#: ../../library/argparse.rst:664
msgid ""
"If the user would like to catch errors manually, the feature can be enabled "
"by setting ``exit_on_error`` to ``False``::"
msgstr ""
"Si el usuario desea detectar los errores manualmente, puede activar esta "
"función configurando ``exit_on_error`` en ``False``::"

#: ../../library/argparse.rst:681
msgid "The add_argument() method"
msgstr "El método add_argument()"

#: ../../library/argparse.rst:687
msgid ""
"Define how a single command-line argument should be parsed.  Each parameter "
"has its own more detailed description below, but in short they are:"
msgstr ""
"Define cómo debe analizarse un único argumento de la línea de comandos.  "
"Cada parámetro tiene su propia descripción más detallada a continuación, "
"pero en resumen son:"

#: ../../library/argparse.rst:690
msgid ""
"`name or flags`_ - Either a name or a list of option strings, e.g. ``foo`` "
"or ``-f, --foo``."
msgstr ""

#: ../../library/argparse.rst:693
msgid ""
"action_ - The basic type of action to be taken when this argument is "
"encountered at the command line."
msgstr ""
"action_ - El tipo básico de acción que se llevará a cabo cuando se encuentre "
"este argumento en la línea de comandos."

#: ../../library/argparse.rst:696
msgid "nargs_ - The number of command-line arguments that should be consumed."
msgstr ""
"nargs_ - El número de argumentos de la línea de comandos que deben "
"consumirse."

#: ../../library/argparse.rst:698
msgid ""
"const_ - A constant value required by some action_ and nargs_ selections."
msgstr ""
"const_ - Un valor constante requerido por algunas selecciones action_ y "
"nargs_."

#: ../../library/argparse.rst:700
msgid ""
"default_ - The value produced if the argument is absent from the command "
"line and if it is absent from the namespace object."
msgstr ""
"default_ - El valor producido si el argumento está ausente de la línea de "
"comandos y si está ausente del objeto namespace."

#: ../../library/argparse.rst:703
msgid ""
"type_ - The type to which the command-line argument should be converted."
msgstr ""
"type_ - Tipo al que debe convertirse el argumento de la línea de comandos."

#: ../../library/argparse.rst:705
msgid "choices_ - A sequence of the allowable values for the argument."
msgstr "choices_ - Una secuencia de los valores permitidos para el argumento."

#: ../../library/argparse.rst:707
msgid ""
"required_ - Whether or not the command-line option may be omitted (optionals "
"only)."
msgstr ""
"required_ - Si la opción de línea de comandos puede omitirse (sólo "
"opcionales)."

#: ../../library/argparse.rst:710
msgid "help_ - A brief description of what the argument does."
msgstr "help_ - Una breve descripción de lo que hace el argumento."

#: ../../library/argparse.rst:712
msgid "metavar_ - A name for the argument in usage messages."
msgstr "metavar_ - Un nombre para el argumento en los mensajes de uso."

#: ../../library/argparse.rst:714
msgid ""
"dest_ - The name of the attribute to be added to the object returned by :"
"meth:`parse_args`."
msgstr ""
"dest_ - El nombre del atributo que se añadirá al objeto devuelto por :meth:"
"`parse_args`."

#: ../../library/argparse.rst:721
msgid "name or flags"
msgstr "nombre o banderas"

#: ../../library/argparse.rst:723
msgid ""
"The :meth:`~ArgumentParser.add_argument` method must know whether an "
"optional argument, like ``-f`` or ``--foo``, or a positional argument, like "
"a list of filenames, is expected.  The first arguments passed to :meth:"
"`~ArgumentParser.add_argument` must therefore be either a series of flags, "
"or a simple argument name.  For example, an optional argument could be "
"created like::"
msgstr ""

#: ../../library/argparse.rst:732
msgid "while a positional argument could be created like::"
msgstr "mientras que un argumento posicional podría crearse como::"

#: ../../library/argparse.rst:736
msgid ""
"When :meth:`~ArgumentParser.parse_args` is called, optional arguments will "
"be identified by the ``-`` prefix, and the remaining arguments will be "
"assumed to be positional::"
msgstr ""
"Cuando se llama a :meth:`~ArgumentParser.parse_args`, los argumentos "
"opcionales se identificarán mediante el prefijo ``-``, y se asumirá que los "
"argumentos restantes son posicionales::"

#: ../../library/argparse.rst:753
msgid "action"
msgstr "acción"

#: ../../library/argparse.rst:755
msgid ""
":class:`ArgumentParser` objects associate command-line arguments with "
"actions.  These actions can do just about anything with the command-line "
"arguments associated with them, though most actions simply add an attribute "
"to the object returned by :meth:`~ArgumentParser.parse_args`.  The "
"``action`` keyword argument specifies how the command-line arguments should "
"be handled. The supplied actions are:"
msgstr ""
":class:`ArgumentParser` asocian argumentos de línea de comandos con "
"acciones.  Estas acciones pueden hacer prácticamente cualquier cosa con los "
"argumentos de línea de comandos asociados a ellas, aunque la mayoría de las "
"acciones simplemente añaden un atributo al objeto devuelto por :meth:"
"`~ArgumentParser.parse_args`.  El argumento de la palabra clave ``action`` "
"especifica cómo deben tratarse los argumentos de la línea de comandos. Las "
"acciones suministradas son:"

#: ../../library/argparse.rst:761
msgid ""
"``'store'`` - This just stores the argument's value.  This is the default "
"action. For example::"
msgstr ""

#: ../../library/argparse.rst:769
msgid ""
"``'store_const'`` - This stores the value specified by the const_ keyword "
"argument.  The ``'store_const'`` action is most commonly used with optional "
"arguments that specify some sort of flag.  For example::"
msgstr ""

#: ../../library/argparse.rst:778
msgid ""
"``'store_true'`` and ``'store_false'`` - These are special cases of "
"``'store_const'`` used for storing the values ``True`` and ``False`` "
"respectively.  In addition, they create default values of ``False`` and "
"``True`` respectively.  For example::"
msgstr ""

#: ../../library/argparse.rst:790
msgid ""
"``'append'`` - This stores a list, and appends each argument value to the "
"list.  This is useful to allow an option to be specified multiple times. "
"Example usage::"
msgstr ""

#: ../../library/argparse.rst:799
msgid ""
"``'append_const'`` - This stores a list, and appends the value specified by "
"the const_ keyword argument to the list.  (Note that the const_ keyword "
"argument defaults to ``None``.)  The ``'append_const'`` action is typically "
"useful when multiple arguments need to store constants to the same list. For "
"example::"
msgstr ""

#: ../../library/argparse.rst:811
msgid ""
"``'count'`` - This counts the number of times a keyword argument occurs. For "
"example, this is useful for increasing verbosity levels::"
msgstr ""
"``'count'`` - Cuenta el número de veces que aparece una palabra clave. Por "
"ejemplo, esto es útil para aumentar los niveles de verbosidad::"

#: ../../library/argparse.rst:819
msgid "Note, the *default* will be ``None`` unless explicitly set to *0*."
msgstr ""
"Nota, el *por defecto* será ``None`` a menos que se establezca "
"explícitamente en *0*."

#: ../../library/argparse.rst:821
msgid ""
"``'help'`` - This prints a complete help message for all the options in the "
"current parser and then exits. By default a help action is automatically "
"added to the parser. See :class:`ArgumentParser` for details of how the "
"output is created."
msgstr ""
"``'help'`` - Imprime un mensaje de ayuda completo para todas las opciones "
"del analizador sintáctico actual y, a continuación, sale. Por defecto, se "
"añade automáticamente una acción de ayuda al analizador sintáctico. "
"Consulte :class:`ArgumentParser` para obtener más información sobre cómo se "
"crea la salida."

#: ../../library/argparse.rst:826
msgid ""
"``'version'`` - This expects a ``version=`` keyword argument in the :meth:"
"`~ArgumentParser.add_argument` call, and prints version information and "
"exits when invoked::"
msgstr ""
"``'version'`` - Esto espera un argumento de palabra clave ``version=`` en la "
"llamada a :meth:`~ArgumentParser.add_argument`, e imprime la información de "
"la versión y sale cuando se invoca::"

#: ../../library/argparse.rst:836
msgid ""
"``'extend'`` - This stores a list, and extends each argument value to the "
"list. Example usage::"
msgstr ""

#: ../../library/argparse.rst:847
msgid ""
"You may also specify an arbitrary action by passing an Action subclass or "
"other object that implements the same interface. The "
"``BooleanOptionalAction`` is available in ``argparse`` and adds support for "
"boolean actions such as ``--foo`` and ``--no-foo``::"
msgstr ""

#: ../../library/argparse.rst:860
msgid ""
"The recommended way to create a custom action is to extend :class:`Action`, "
"overriding the ``__call__`` method and optionally the ``__init__`` and "
"``format_usage`` methods."
msgstr ""

#: ../../library/argparse.rst:864
msgid "An example of a custom action::"
msgstr "Un ejemplo de acción personalizada::"

#: ../../library/argparse.rst:884
msgid "For more details, see :class:`Action`."
msgstr "Para más detalles, ver :class:`Action`."

#: ../../library/argparse.rst:887
msgid "nargs"
msgstr "nargs"

#: ../../library/argparse.rst:889
msgid ""
"ArgumentParser objects usually associate a single command-line argument with "
"a single action to be taken.  The ``nargs`` keyword argument associates a "
"different number of command-line arguments with a single action.  The "
"supported values are:"
msgstr ""

#: ../../library/argparse.rst:894
msgid ""
"``N`` (an integer).  ``N`` arguments from the command line will be gathered "
"together into a list.  For example::"
msgstr ""
"``N`` (un número entero). ``N`` argumentos de la línea de comandos se "
"reunirán en una lista.  Por ejemplo::"

#: ../../library/argparse.rst:903
msgid ""
"Note that ``nargs=1`` produces a list of one item.  This is different from "
"the default, in which the item is produced by itself."
msgstr ""
"Tenga en cuenta que ``nargs=1`` produce una lista de un elemento.  Esto es "
"diferente del valor por defecto, en el que el elemento se produce por sí "
"mismo."

#: ../../library/argparse.rst:908
msgid ""
"``'?'``. One argument will be consumed from the command line if possible, "
"and produced as a single item.  If no command-line argument is present, the "
"value from default_ will be produced.  Note that for optional arguments, "
"there is an additional case - the option string is present but not followed "
"by a command-line argument.  In this case the value from const_ will be "
"produced.  Some examples to illustrate this::"
msgstr ""
"``'?'``. Se consumirá un argumento de la línea de comandos si es posible, y "
"se producirá como un único elemento.  Si no hay ningún argumento en la línea "
"de órdenes, se producirá el valor de default_.  Tenga en cuenta que para los "
"argumentos opcionales, hay un caso adicional - la cadena de opción está "
"presente, pero no seguida de un argumento de línea de comandos.  En este "
"caso, se producirá el valor de const_.  Algunos ejemplos para ilustrar esto::"

#: ../../library/argparse.rst:925
msgid ""
"One of the more common uses of ``nargs='?'`` is to allow optional input and "
"output files::"
msgstr ""
"Uno de los usos más comunes de ``nargs='?'`` es permitir archivos de entrada "
"y salida opcionales::"

#: ../../library/argparse.rst:942
msgid ""
"``'*'``.  All command-line arguments present are gathered into a list.  Note "
"that it generally doesn't make much sense to have more than one positional "
"argument with ``nargs='*'``, but multiple optional arguments with "
"``nargs='*'`` is possible.  For example::"
msgstr ""
"``'*'``.  Todos los argumentos de línea de comandos presentes se reúnen en "
"una lista.  Tenga en cuenta que generalmente no tiene mucho sentido tener "
"más de un argumento posicional con ``nargs='*'``, pero es posible tener "
"múltiples argumentos opcionales con ``nargs='*'``.  Por ejemplo::"

#: ../../library/argparse.rst:956
msgid ""
"``'+'``. Just like ``'*'``, all command-line args present are gathered into "
"a list.  Additionally, an error message will be generated if there wasn't at "
"least one command-line argument present.  For example::"
msgstr ""
"``'+'``. Al igual que en ``'*'``, todos los argumentos de línea de comandos "
"presentes se recopilan en una lista.  Además, se generará un mensaje de "
"error si no hay al menos un argumento de línea de comandos presente.  Por "
"ejemplo::"

#: ../../library/argparse.rst:968
msgid ""
"If the ``nargs`` keyword argument is not provided, the number of arguments "
"consumed is determined by the action_.  Generally this means a single "
"command-line argument will be consumed and a single item (not a list) will "
"be produced."
msgstr ""

#: ../../library/argparse.rst:974
msgid "const"
msgstr "const"

#: ../../library/argparse.rst:976
msgid ""
"The ``const`` argument of :meth:`~ArgumentParser.add_argument` is used to "
"hold constant values that are not read from the command line but are "
"required for the various :class:`ArgumentParser` actions.  The two most "
"common uses of it are:"
msgstr ""
"El argumento ``const`` de :meth:`~ArgumentParser.add_argument` se utiliza "
"para mantener valores constantes que no se leen desde la línea de comandos "
"pero que son necesarios para las distintas acciones de :class:"
"`ArgumentParser`.  Los dos usos más comunes son:"

#: ../../library/argparse.rst:980
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with "
"``action='store_const'`` or ``action='append_const'``.  These actions add "
"the ``const`` value to one of the attributes of the object returned by :meth:"
"`~ArgumentParser.parse_args`. See the action_ description for examples."
msgstr ""

#: ../../library/argparse.rst:985
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with option strings "
"(like ``-f`` or ``--foo``) and ``nargs='?'``.  This creates an optional "
"argument that can be followed by zero or one command-line arguments. When "
"parsing the command line, if the option string is encountered with no "
"command-line argument following it, the value of ``const`` will be assumed "
"instead. See the nargs_ description for examples."
msgstr ""

#: ../../library/argparse.rst:992
msgid ""
"With the ``'store_const'`` and ``'append_const'`` actions, the ``const`` "
"keyword argument must be given.  For other actions, it defaults to ``None``."
msgstr ""

#: ../../library/argparse.rst:997
msgid "default"
msgstr "por defecto"

#: ../../library/argparse.rst:999
msgid ""
"All optional arguments and some positional arguments may be omitted at the "
"command line.  The ``default`` keyword argument of :meth:`~ArgumentParser."
"add_argument`, whose value defaults to ``None``, specifies what value should "
"be used if the command-line argument is not present. For optional arguments, "
"the ``default`` value is used when the option string was not present at the "
"command line::"
msgstr ""
"Todos los argumentos opcionales y algunos argumentos posicionales pueden "
"omitirse en la línea de comandos.  El argumento de palabra clave ``default`` "
"de :meth:`~ArgumentParser.add_argument`, cuyo valor por defecto es ``None``, "
"especifica qué valor debe utilizarse si el argumento de la línea de comandos "
"no está presente. Para los argumentos opcionales, se utiliza el valor "
"``default`` cuando la cadena de opciones no estaba presente en la línea de "
"comandos::"

#: ../../library/argparse.rst:1013
msgid ""
"If the target namespace already has an attribute set, the action *default* "
"will not over write it::"
msgstr ""

#: ../../library/argparse.rst:1021
msgid ""
"If the ``default`` value is a string, the parser parses the value as if it "
"were a command-line argument.  In particular, the parser applies any type_ "
"conversion argument, if provided, before setting the attribute on the :class:"
"`Namespace` return value.  Otherwise, the parser uses the value as is::"
msgstr ""
"Si el valor de ``default`` es una cadena, el analizador sintáctico analiza "
"el valor como si fuera un argumento de línea de comandos.  En particular, el "
"analizador aplica cualquier argumento de conversión type_, si se "
"proporciona, antes de establecer el atributo en el valor de retorno de :"
"class:`Namespace`.  De lo contrario, el analizador utiliza el valor tal "
"cual::"

#: ../../library/argparse.rst:1032
msgid ""
"For positional arguments with nargs_ equal to ``?`` or ``*``, the "
"``default`` value is used when no command-line argument was present::"
msgstr ""
"Para argumentos posicionales con nargs_ igual a ``?`` o ``*``, se utiliza el "
"valor ``default`` cuando no había ningún argumento en la línea de comandos::"

#: ../../library/argparse.rst:1043
msgid ""
"Providing ``default=argparse.SUPPRESS`` causes no attribute to be added if "
"the command-line argument was not present::"
msgstr ""
"Si se proporciona ``default=argparse.SUPPRESS``, no se añadirá ningún "
"atributo si el argumento de la línea de comandos no estaba presente::"

#: ../../library/argparse.rst:1055
msgid "type"
msgstr "tipo"

#: ../../library/argparse.rst:1057
msgid ""
"By default, the parser reads command-line arguments in as simple strings. "
"However, quite often the command-line string should instead be interpreted "
"as another type, such as a :class:`float` or :class:`int`.  The ``type`` "
"keyword for :meth:`~ArgumentParser.add_argument` allows any necessary type-"
"checking and type conversions to be performed."
msgstr ""
"Por defecto, el analizador lee los argumentos de la línea de comandos como "
"cadenas simples. Sin embargo, a menudo la cadena de la línea de comandos "
"debe interpretarse como otro tipo, como :class:`float` o :class:`int`. La "
"palabra clave ``type`` para :meth:`~ArgumentParser.add_argument` permite "
"realizar cualquier comprobación de tipo y conversión necesaria."

#: ../../library/argparse.rst:1063
msgid ""
"If the type_ keyword is used with the default_ keyword, the type converter "
"is only applied if the default is a string."
msgstr ""
"Si se utiliza type_ keyword con default_ keyword, el conversor de tipo sólo "
"se aplica si el valor por defecto es una cadena."

#: ../../library/argparse.rst:1066
msgid ""
"The argument to ``type`` can be any callable that accepts a single string. "
"If the function raises :exc:`ArgumentTypeError`, :exc:`TypeError`, or :exc:"
"`ValueError`, the exception is caught and a nicely formatted error message "
"is displayed.  No other exception types are handled."
msgstr ""

#: ../../library/argparse.rst:1071
msgid "Common built-in types and functions can be used as type converters:"
msgstr ""
"Los tipos y funciones comunes incorporados pueden utilizarse como "
"convertidores de tipos:"

#: ../../library/argparse.rst:1087
msgid "User defined functions can be used as well:"
msgstr "También pueden utilizarse funciones definidas por el usuario:"

#: ../../library/argparse.rst:1099
msgid ""
"The :func:`bool` function is not recommended as a type converter.  All it "
"does is convert empty strings to ``False`` and non-empty strings to "
"``True``. This is usually not what is desired."
msgstr ""
"La función :func:`bool` no se recomienda como conversor de tipos.  Lo único "
"que hace es convertir cadenas vacías a ``False`` y cadenas no vacías a "
"``True``. Esto no suele ser lo que se desea."

#: ../../library/argparse.rst:1103
msgid ""
"In general, the ``type`` keyword is a convenience that should only be used "
"for simple conversions that can only raise one of the three supported "
"exceptions. Anything with more interesting error-handling or resource "
"management should be done downstream after the arguments are parsed."
msgstr ""
"En general, la palabra clave ``type`` es una conveniencia que sólo debe "
"utilizarse para conversiones simples que sólo pueden lanzar una de las tres "
"excepciones soportadas. Todo lo que implique una gestión de errores o de "
"recursos más interesante debe hacerse después de analizar los argumentos."

#: ../../library/argparse.rst:1108
msgid ""
"For example, JSON or YAML conversions have complex error cases that require "
"better reporting than can be given by the ``type`` keyword.  A :exc:`~json."
"JSONDecodeError` would not be well formatted and a :exc:`FileNotFound` "
"exception would not be handled at all."
msgstr ""

#: ../../library/argparse.rst:1113
msgid ""
"Even :class:`~argparse.FileType` has its limitations for use with the "
"``type`` keyword.  If one argument uses *FileType* and then a subsequent "
"argument fails, an error is reported but the file is not automatically "
"closed.  In this case, it would be better to wait until after the parser has "
"run and then use the :keyword:`with`-statement to manage the files."
msgstr ""

#: ../../library/argparse.rst:1119
msgid ""
"For type checkers that simply check against a fixed set of values, consider "
"using the choices_ keyword instead."
msgstr ""
"Para los verificadores de tipos que simplemente comparan con un conjunto "
"fijo de valores, considere usar la palabra choices_ keyword en su lugar."

#: ../../library/argparse.rst:1124
msgid "choices"
msgstr "opciones"

#: ../../library/argparse.rst:1126
msgid ""
"Some command-line arguments should be selected from a restricted set of "
"values. These can be handled by passing a sequence object as the *choices* "
"keyword argument to :meth:`~ArgumentParser.add_argument`.  When the command "
"line is parsed, argument values will be checked, and an error message will "
"be displayed if the argument was not one of the acceptable values::"
msgstr ""
"Algunos argumentos de la línea de órdenes deben seleccionarse a partir de un "
"conjunto restringido de valores. Esto puede hacerse pasando un objeto de "
"secuencia como argumento de la palabra clave *choices* a :meth:"
"`~ArgumentParser.add_argument`. Cuando se analiza la línea de órdenes, se "
"comprueban los valores de los argumentos y se muestra un mensaje de error si "
"el argumento no es uno de los valores aceptables::"

#: ../../library/argparse.rst:1141
msgid ""
"Note that inclusion in the *choices* sequence is checked after any type_ "
"conversions have been performed, so the type of the objects in the *choices* "
"sequence should match the type_ specified::"
msgstr ""

#: ../../library/argparse.rst:1153
msgid ""
"Any sequence can be passed as the *choices* value, so :class:`list` "
"objects, :class:`tuple` objects, and custom sequences are all supported."
msgstr ""
"Se puede pasar cualquier secuencia como valor de *choices*, por lo que se "
"admiten objetos de :class:`list`, objetos de :class:`tuple` y secuencias "
"personalizadas."

#: ../../library/argparse.rst:1156
msgid ""
"Use of :class:`enum.Enum` is not recommended because it is difficult to "
"control its appearance in usage, help, and error messages."
msgstr ""
"No se recomienda el uso de :class:`enum.Enum` porque es difícil controlar su "
"aparición en los mensajes de uso, ayuda y error."

#: ../../library/argparse.rst:1159
msgid ""
"Formatted choices overrides the default *metavar* which is normally derived "
"from *dest*.  This is usually what you want because the user never sees the "
"*dest* parameter.  If this display isn't desirable (perhaps because there "
"are many choices), just specify an explicit metavar_."
msgstr ""

#: ../../library/argparse.rst:1166
msgid "required"
msgstr "obligatorio"

#: ../../library/argparse.rst:1168
msgid ""
"In general, the :mod:`argparse` module assumes that flags like ``-f`` and "
"``--bar`` indicate *optional* arguments, which can always be omitted at the "
"command line. To make an option *required*, ``True`` can be specified for "
"the ``required=`` keyword argument to :meth:`~ArgumentParser.add_argument`::"
msgstr ""

#: ../../library/argparse.rst:1181
msgid ""
"As the example shows, if an option is marked as ``required``, :meth:"
"`~ArgumentParser.parse_args` will report an error if that option is not "
"present at the command line."
msgstr ""
"Como muestra el ejemplo, si una opción está marcada como ``required``, :meth:"
"`~ArgumentParser.parse_args` informará de un error si esa opción no está "
"presente en la línea de comandos."

#: ../../library/argparse.rst:1187
msgid ""
"Required options are generally considered bad form because users expect "
"*options* to be *optional*, and thus they should be avoided when possible."
msgstr ""
"Las opciones obligatorias suelen considerarse de mala calidad porque los "
"usuarios esperan que las *opciones* sean *opcionales*, por lo que deben "
"evitarse siempre que sea posible."

#: ../../library/argparse.rst:1192
msgid "help"
msgstr "ayuda"

#: ../../library/argparse.rst:1194
msgid ""
"The ``help`` value is a string containing a brief description of the "
"argument. When a user requests help (usually by using ``-h`` or ``--help`` "
"at the command line), these ``help`` descriptions will be displayed with "
"each argument::"
msgstr ""

#: ../../library/argparse.rst:1214
msgid ""
"The ``help`` strings can include various format specifiers to avoid "
"repetition of things like the program name or the argument default_.  The "
"available specifiers include the program name, ``%(prog)s`` and most keyword "
"arguments to :meth:`~ArgumentParser.add_argument`, e.g. ``%(default)s``, "
"``%(type)s``, etc.::"
msgstr ""
"Las cadenas ``help`` pueden incluir varios especificadores de formato para "
"evitar la repetición de cosas como el nombre del programa o el argumento "
"default_.  Los especificadores disponibles incluyen el nombre del programa, "
"``%(prog)s`` y la mayoría de los argumentos de palabras clave de :meth:"
"`~ArgumentParser.add_argument`, por ejemplo ``%(default)s``, ``%(type)s``, "
"etc.::"

#: ../../library/argparse.rst:1231
msgid ""
"As the help string supports %-formatting, if you want a literal ``%`` to "
"appear in the help string, you must escape it as ``%%``."
msgstr ""
"Como la cadena de ayuda admite %-formatting, si desea que aparezca un "
"literal ``%`` en la cadena de ayuda, debe eludir como ``%%``."

#: ../../library/argparse.rst:1234
msgid ""
":mod:`argparse` supports silencing the help entry for certain options, by "
"setting the ``help`` value to ``argparse.SUPPRESS``::"
msgstr ""

#: ../../library/argparse.rst:1247
msgid "metavar"
msgstr "metavar"

#: ../../library/argparse.rst:1249
msgid ""
"When :class:`ArgumentParser` generates help messages, it needs some way to "
"refer to each expected argument.  By default, ArgumentParser objects use the "
"dest_ value as the \"name\" of each object.  By default, for positional "
"argument actions, the dest_ value is used directly, and for optional "
"argument actions, the dest_ value is uppercased.  So, a single positional "
"argument with ``dest='bar'`` will be referred to as ``bar``. A single "
"optional argument ``--foo`` that should be followed by a single command-line "
"argument will be referred to as ``FOO``.  An example::"
msgstr ""

#: ../../library/argparse.rst:1273
msgid "An alternative name can be specified with ``metavar``::"
msgstr "Se puede especificar un nombre alternativo con ``metavar``::"

#: ../../library/argparse.rst:1290
msgid ""
"Note that ``metavar`` only changes the *displayed* name - the name of the "
"attribute on the :meth:`~ArgumentParser.parse_args` object is still "
"determined by the dest_ value."
msgstr ""
"Tenga en cuenta que ``metavar`` sólo cambia el nombre *visualizado* - el "
"nombre del atributo en el objeto :meth:`~ArgumentParser.parse_args` sigue "
"estando determinado por el dest_ value."

#: ../../library/argparse.rst:1294
msgid ""
"Different values of ``nargs`` may cause the metavar to be used multiple "
"times. Providing a tuple to ``metavar`` specifies a different display for "
"each of the arguments::"
msgstr ""
"Diferentes valores de ``nargs`` pueden hacer que la metavar se utilice "
"varias veces. Proporcionar una tupla a ``metavar`` especifica una "
"visualización diferente para cada uno de los argumentos::"

#: ../../library/argparse.rst:1311
msgid "dest"
msgstr "dest"

#: ../../library/argparse.rst:1313
msgid ""
"Most :class:`ArgumentParser` actions add some value as an attribute of the "
"object returned by :meth:`~ArgumentParser.parse_args`.  The name of this "
"attribute is determined by the ``dest`` keyword argument of :meth:"
"`~ArgumentParser.add_argument`.  For positional argument actions, ``dest`` "
"is normally supplied as the first argument to :meth:`~ArgumentParser."
"add_argument`::"
msgstr ""
"La mayoría de las acciones :class:`ArgumentParser` añaden algún valor como "
"atributo del objeto devuelto por :meth:`~ArgumentParser.parse_args`.  El "
"nombre de este atributo viene determinado por el argumento de palabra clave "
"``dest`` de :meth:`~ArgumentParser.add_argument`. Para las acciones de "
"argumento posicional, ``dest`` se suministra normalmente como primer "
"argumento de :meth:`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1325
msgid ""
"For optional argument actions, the value of ``dest`` is normally inferred "
"from the option strings.  :class:`ArgumentParser` generates the value of "
"``dest`` by taking the first long option string and stripping away the "
"initial ``--`` string.  If no long option strings were supplied, ``dest`` "
"will be derived from the first short option string by stripping the initial "
"``-`` character.  Any internal ``-`` characters will be converted to ``_`` "
"characters to make sure the string is a valid attribute name.  The examples "
"below illustrate this behavior::"
msgstr ""
"Para las acciones con argumentos opcionales, el valor de ``dest`` se deduce "
"normalmente de las cadenas de opciones. :class:`ArgumentParser` genera el "
"valor de ``dest`` tomando la primera cadena de opciones larga y eliminando "
"la cadena inicial ``--``.  Si no se han proporcionado cadenas de opciones "
"largas, ``dest`` se obtendrá a partir de la primera cadena de opciones corta "
"eliminando el carácter ``-`` inicial.  Cualquier carácter interno de ``-`` "
"se convertirá en ``_`` para asegurarse de que la cadena es un nombre de "
"atributo válido.  Los siguientes ejemplos ilustran este comportamiento::"

#: ../../library/argparse.rst:1342
msgid "``dest`` allows a custom attribute name to be provided::"
msgstr "``dest`` permite proporcionar un nombre de atributo personalizado::"

#: ../../library/argparse.rst:1350
msgid "Action classes"
msgstr "Clases de acción"

#: ../../library/argparse.rst:1352
msgid ""
"Action classes implement the Action API, a callable which returns a callable "
"which processes arguments from the command-line. Any object which follows "
"this API may be passed as the ``action`` parameter to :meth:`add_argument`."
msgstr ""

#: ../../library/argparse.rst:1361
msgid ""
"Action objects are used by an ArgumentParser to represent the information "
"needed to parse a single argument from one or more strings from the command "
"line. The Action class must accept the two positional arguments plus any "
"keyword arguments passed to :meth:`ArgumentParser.add_argument` except for "
"the ``action`` itself."
msgstr ""

#: ../../library/argparse.rst:1367
msgid ""
"Instances of Action (or return value of any callable to the ``action`` "
"parameter) should have attributes \"dest\", \"option_strings\", \"default\", "
"\"type\", \"required\", \"help\", etc. defined. The easiest way to ensure "
"these attributes are defined is to call ``Action.__init__``."
msgstr ""

#: ../../library/argparse.rst:1372
msgid ""
"Action instances should be callable, so subclasses must override the "
"``__call__`` method, which should accept four parameters:"
msgstr ""

#: ../../library/argparse.rst:1375
msgid "``parser`` - The ArgumentParser object which contains this action."
msgstr ""

#: ../../library/argparse.rst:1377
msgid ""
"``namespace`` - The :class:`Namespace` object that will be returned by :meth:"
"`~ArgumentParser.parse_args`.  Most actions add an attribute to this object "
"using :func:`setattr`."
msgstr ""

#: ../../library/argparse.rst:1381
msgid ""
"``values`` - The associated command-line arguments, with any type "
"conversions applied.  Type conversions are specified with the type_ keyword "
"argument to :meth:`~ArgumentParser.add_argument`."
msgstr ""

#: ../../library/argparse.rst:1385
msgid ""
"``option_string`` - The option string that was used to invoke this action. "
"The ``option_string`` argument is optional, and will be absent if the action "
"is associated with a positional argument."
msgstr ""

#: ../../library/argparse.rst:1389
msgid ""
"The ``__call__`` method may perform arbitrary actions, but will typically "
"set attributes on the ``namespace`` based on ``dest`` and ``values``."
msgstr ""

#: ../../library/argparse.rst:1392
msgid ""
"Action subclasses can define a ``format_usage`` method that takes no "
"argument and return a string which will be used when printing the usage of "
"the program. If such method is not provided, a sensible default will be used."
msgstr ""

#: ../../library/argparse.rst:1397
msgid "The parse_args() method"
msgstr "El método parse_args()"

#: ../../library/argparse.rst:1401
msgid ""
"Convert argument strings to objects and assign them as attributes of the "
"namespace.  Return the populated namespace."
msgstr ""
"Convierte las cadenas de los argumentos en objetos y los asigna como "
"atributos del espacio de nombres.  Devuelve el espacio de nombres rellenado."

#: ../../library/argparse.rst:1404
msgid ""
"Previous calls to :meth:`add_argument` determine exactly what objects are "
"created and how they are assigned. See the documentation for :meth:"
"`add_argument` for details."
msgstr ""

#: ../../library/argparse.rst:1408
msgid ""
"args_ - List of strings to parse.  The default is taken from :data:`sys."
"argv`."
msgstr ""
"args_ - Lista de cadenas a analizar.  Por defecto se toma de :data:`sys."
"argv`."

#: ../../library/argparse.rst:1411
msgid ""
"namespace_ - An object to take the attributes.  The default is a new empty :"
"class:`Namespace` object."
msgstr ""
"namespace_ - Un objeto para tomar los atributos.  El valor predeterminado es "
"un nuevo objeto vacío :class:`Namespace`."

#: ../../library/argparse.rst:1416
msgid "Option value syntax"
msgstr "Sintaxis del valor de la opción"

#: ../../library/argparse.rst:1418
msgid ""
"The :meth:`~ArgumentParser.parse_args` method supports several ways of "
"specifying the value of an option (if it takes one).  In the simplest case, "
"the option and its value are passed as two separate arguments::"
msgstr ""
"El método :meth:`~ArgumentParser.parse_args` admite varias formas de "
"especificar el valor de una opción (si toma una).  En el caso más sencillo, "
"la opción y su valor se pasan como dos argumentos separados::"

#: ../../library/argparse.rst:1430
msgid ""
"For long options (options with names longer than a single character), the "
"option and value can also be passed as a single command-line argument, using "
"``=`` to separate them::"
msgstr ""
"Para opciones largas (opciones con nombres de más de un carácter), la opción "
"y el valor también pueden pasarse como un único argumento de línea de "
"comandos, utilizando ``=`` para separarlos::"

#: ../../library/argparse.rst:1437
msgid ""
"For short options (options only one character long), the option and its "
"value can be concatenated::"
msgstr ""
"Para opciones cortas (opciones de sólo un carácter de longitud), la opción y "
"su valor pueden concatenarse::"

#: ../../library/argparse.rst:1443
msgid ""
"Several short options can be joined together, using only a single ``-`` "
"prefix, as long as only the last option (or none of them) requires a value::"
msgstr ""
"Se pueden unir varias opciones cortas, utilizando un único prefijo ``-``, "
"siempre que sólo la última opción (o ninguna de ellas) requiera un valor::"

#: ../../library/argparse.rst:1455
msgid "Invalid arguments"
msgstr "Argumentos no válidos"

#: ../../library/argparse.rst:1457
msgid ""
"While parsing the command line, :meth:`~ArgumentParser.parse_args` checks "
"for a variety of errors, including ambiguous options, invalid types, invalid "
"options, wrong number of positional arguments, etc.  When it encounters such "
"an error, it exits and prints the error along with a usage message::"
msgstr ""
"Mientras analiza la línea de comandos, :meth:`~ArgumentParser.parse_args` "
"comprueba si hay una serie de errores, como opciones ambiguas, tipos no "
"válidos, opciones no válidas, número incorrecto de argumentos posicionales, "
"etc.  Cuando encuentra un error de este tipo, sale e imprime el error junto "
"con un mensaje de uso::"

#: ../../library/argparse.rst:1483
msgid "Arguments containing ``-``"
msgstr "Argumentos que contienen ``-``"

#: ../../library/argparse.rst:1485
msgid ""
"The :meth:`~ArgumentParser.parse_args` method attempts to give errors "
"whenever the user has clearly made a mistake, but some situations are "
"inherently ambiguous.  For example, the command-line argument ``-1`` could "
"either be an attempt to specify an option or an attempt to provide a "
"positional argument. The :meth:`~ArgumentParser.parse_args` method is "
"cautious here: positional arguments may only begin with ``-`` if they look "
"like negative numbers and there are no options in the parser that look like "
"negative numbers::"
msgstr ""
"El método :meth:`~ArgumentParser.parse_args` intenta dar errores siempre que "
"el usuario haya cometido claramente un error, pero algunas situaciones son "
"intrínsecamente ambiguas.  Por ejemplo, el argumento de línea de comandos "
"``-1`` podría ser un intento de especificar una opción o un intento de "
"proporcionar un argumento posicional. El método :meth:`~ArgumentParser."
"parse_args` es cauteloso en este caso: los argumentos posicionales sólo "
"pueden empezar por ``-`` si parecen números negativos y no hay opciones en "
"el analizador sintáctico que parezcan números negativos::"

#: ../../library/argparse.rst:1523
msgid ""
"If you have positional arguments that must begin with ``-`` and don't look "
"like negative numbers, you can insert the pseudo-argument ``'--'`` which "
"tells :meth:`~ArgumentParser.parse_args` that everything after that is a "
"positional argument::"
msgstr ""
"Si tiene argumentos posicionales que deben empezar por ``-`` y no parecen "
"números negativos, puede insertar el pseudoargumento ``'--'`` que indica a :"
"meth:`~ArgumentParser.parse_args` que todo lo que viene después es un "
"argumento posicional::"

#: ../../library/argparse.rst:1534
msgid "Argument abbreviations (prefix matching)"
msgstr "Abreviaturas de los argumentos (coincidencia de prefijos)"

#: ../../library/argparse.rst:1536
msgid ""
"The :meth:`~ArgumentParser.parse_args` method :ref:`by default "
"<allow_abbrev>` allows long options to be abbreviated to a prefix, if the "
"abbreviation is unambiguous (the prefix matches a unique option)::"
msgstr ""
"El método :meth:`~ArgumentParser.parse_args`:ref:`by default  "
"<allow_abbrev>` permite abreviar opciones largas a un prefijo, si la "
"abreviatura no es ambigua (el prefijo coincide con una opción única)::"

#: ../../library/argparse.rst:1551
msgid ""
"An error is produced for arguments that could produce more than one options. "
"This feature can be disabled by setting :ref:`allow_abbrev` to ``False``."
msgstr ""
"Se produce un error para los argumentos que podrían producir más de una "
"opción. Esta función puede desactivarse configurando :ref:`allow_abbrev` "
"como ``False``."

#: ../../library/argparse.rst:1557
msgid "Beyond ``sys.argv``"
msgstr "Más allá de ``sys.argv``"

#: ../../library/argparse.rst:1559
msgid ""
"Sometimes it may be useful to have an ArgumentParser parse arguments other "
"than those of :data:`sys.argv`.  This can be accomplished by passing a list "
"of strings to :meth:`~ArgumentParser.parse_args`.  This is useful for "
"testing at the interactive prompt::"
msgstr ""

#: ../../library/argparse.rst:1579
msgid "The Namespace object"
msgstr "El objeto Namespace"

#: ../../library/argparse.rst:1583
msgid ""
"Simple class used by default by :meth:`~ArgumentParser.parse_args` to create "
"an object holding attributes and return it."
msgstr ""
"Clase simple utilizada por defecto por :meth:`~ArgumentParser.parse_args` "
"para crear un objeto con atributos y devolverlo."

#: ../../library/argparse.rst:1586
msgid ""
"This class is deliberately simple, just an :class:`object` subclass with a "
"readable string representation. If you prefer to have dict-like view of the "
"attributes, you can use the standard Python idiom, :func:`vars`::"
msgstr ""
"Esta clase es deliberadamente simple, sólo una subclase de :class:`object` "
"con una representación de cadena legible. Si prefieres tener una vista tipo "
"dict de los atributos, puedes usar el lenguaje estándar de Python, :func:"
"`vars`::"

#: ../../library/argparse.rst:1596
msgid ""
"It may also be useful to have an :class:`ArgumentParser` assign attributes "
"to an already existing object, rather than a new :class:`Namespace` object.  "
"This can be achieved by specifying the ``namespace=`` keyword argument::"
msgstr ""
"También puede resultar útil que :class:`ArgumentParser` asigne atributos a "
"un objeto ya existente, en lugar de a un nuevo objeto :class:`Namespace`.  "
"Esto puede lograrse especificando el argumento ``namespace=`` palabra clave::"

#: ../../library/argparse.rst:1612
msgid "Other utilities"
msgstr "Otros servicios"

#: ../../library/argparse.rst:1615
msgid "Sub-commands"
msgstr "Sub-commands"

#: ../../library/argparse.rst:1622
msgid ""
"Many programs split up their functionality into a number of sub-commands, "
"for example, the ``svn`` program can invoke sub-commands like ``svn "
"checkout``, ``svn update``, and ``svn commit``.  Splitting up functionality "
"this way can be a particularly good idea when a program performs several "
"different functions which require different kinds of command-line "
"arguments. :class:`ArgumentParser` supports the creation of such sub-"
"commands with the :meth:`add_subparsers` method.  The :meth:`add_subparsers` "
"method is normally called with no arguments and returns a special action "
"object.  This object has a single method, :meth:`~ArgumentParser."
"add_parser`, which takes a command name and any :class:`ArgumentParser` "
"constructor arguments, and returns an :class:`ArgumentParser` object that "
"can be modified as usual."
msgstr ""

#: ../../library/argparse.rst:1634
msgid "Description of parameters:"
msgstr "Descripción de los parámetros:"

#: ../../library/argparse.rst:1636
msgid ""
"title - title for the sub-parser group in help output; by default "
"\"subcommands\" if description is provided, otherwise uses title for "
"positional arguments"
msgstr ""

#: ../../library/argparse.rst:1640
msgid ""
"description - description for the sub-parser group in help output, by "
"default ``None``"
msgstr ""

#: ../../library/argparse.rst:1643
msgid ""
"prog - usage information that will be displayed with sub-command help, by "
"default the name of the program and any positional arguments before the "
"subparser argument"
msgstr ""

#: ../../library/argparse.rst:1647
msgid ""
"parser_class - class which will be used to create sub-parser instances, by "
"default the class of the current parser (e.g. ArgumentParser)"
msgstr ""

#: ../../library/argparse.rst:1650
msgid ""
"action_ - the basic type of action to be taken when this argument is "
"encountered at the command line"
msgstr ""
"action_ - el tipo básico de acción que se llevará a cabo cuando se encuentre "
"este argumento en la línea de comandos"

#: ../../library/argparse.rst:1653
msgid ""
"dest_ - name of the attribute under which sub-command name will be stored; "
"by default ``None`` and no value is stored"
msgstr ""
"dest_ - nombre del atributo bajo el que se almacenará el nombre del "
"subcomando; por defecto ``None`` y no se almacena ningún valor."

#: ../../library/argparse.rst:1656
msgid ""
"required_ - Whether or not a subcommand must be provided, by default "
"``False`` (added in 3.7)"
msgstr ""
"required_ - Debe o no proporcionarse un subcomando, por defecto ``False`` "
"(añadido en 3.7)"

#: ../../library/argparse.rst:1659
msgid "help_ - help for sub-parser group in help output, by default ``None``"
msgstr ""
"help_ - ayuda para el grupo sub-parser en la salida de ayuda, por defecto "
"``None``"

#: ../../library/argparse.rst:1661
msgid ""
"metavar_ - string presenting available sub-commands in help; by default it "
"is ``None`` and presents sub-commands in form {cmd1, cmd2, ..}"
msgstr ""

#: ../../library/argparse.rst:1664
msgid "Some example usage::"
msgstr "Algunos ejemplos de uso::"

#: ../../library/argparse.rst:1685
msgid ""
"Note that the object returned by :meth:`parse_args` will only contain "
"attributes for the main parser and the subparser that was selected by the "
"command line (and not any other subparsers).  So in the example above, when "
"the ``a`` command is specified, only the ``foo`` and ``bar`` attributes are "
"present, and when the ``b`` command is specified, only the ``foo`` and "
"``baz`` attributes are present."
msgstr ""
"Tenga en cuenta que el objeto devuelto por :meth:`parse_args` sólo contendrá "
"atributos para el analizador sintáctico principal y el analizador sintáctico "
"secundario seleccionado por la línea de comandos (y no otros analizadores "
"sintácticos secundarios).  Así, en el ejemplo anterior, cuando se especifica "
"el comando ``a``, sólo están presentes los atributos ``foo`` y ``bar``, y "
"cuando se especifica el comando ``b``, sólo están presentes los atributos "
"``foo`` y ``baz``."

#: ../../library/argparse.rst:1692
msgid ""
"Similarly, when a help message is requested from a subparser, only the help "
"for that particular parser will be printed.  The help message will not "
"include parent parser or sibling parser messages.  (A help message for each "
"subparser command, however, can be given by supplying the ``help=`` argument "
"to :meth:`add_parser` as above.)"
msgstr ""

#: ../../library/argparse.rst:1728
msgid ""
"The :meth:`add_subparsers` method also supports ``title`` and "
"``description`` keyword arguments.  When either is present, the subparser's "
"commands will appear in their own group in the help output.  For example::"
msgstr ""
"El método :meth:`add_subparsers` también admite los argumentos de palabra "
"clave ``title`` y ``description``.  Cuando cualquiera de ellos está "
"presente, los comandos del subcompletador aparecerán en su propio grupo en "
"la salida de ayuda.  Por ejemplo::"

#: ../../library/argparse.rst:1749
msgid ""
"Furthermore, ``add_parser`` supports an additional ``aliases`` argument, "
"which allows multiple strings to refer to the same subparser. This example, "
"like ``svn``, aliases ``co`` as a shorthand for ``checkout``::"
msgstr ""
"Además, ``add_parser`` admite un argumento adicional ``aliases``, que "
"permite que varias cadenas se refieran al mismo subcompletador. Este "
"ejemplo, al igual que ``svn``, utiliza el alias ``co`` como abreviatura de "
"``checkout``::"

#: ../../library/argparse.rst:1760
msgid ""
"One particularly effective way of handling sub-commands is to combine the "
"use of the :meth:`add_subparsers` method with calls to :meth:`set_defaults` "
"so that each subparser knows which Python function it should execute.  For "
"example::"
msgstr ""
"Una forma particularmente efectiva de manejar subcomandos es combinar el uso "
"del método :meth:`add_subparsers` con llamadas a :meth:`set_defaults` para "
"que cada subcompletador sepa qué función de Python debe ejecutar.  Por "
"ejemplo::"

#: ../../library/argparse.rst:1797
msgid ""
"This way, you can let :meth:`parse_args` do the job of calling the "
"appropriate function after argument parsing is complete.  Associating "
"functions with actions like this is typically the easiest way to handle the "
"different actions for each of your subparsers.  However, if it is necessary "
"to check the name of the subparser that was invoked, the ``dest`` keyword "
"argument to the :meth:`add_subparsers` call will work::"
msgstr ""
"De esta forma, puedes dejar que :meth:`parse_args` se encargue de llamar a "
"la función apropiada una vez finalizado el análisis sintáctico de los "
"argumentos.  Asociar funciones con acciones de este tipo suele ser la forma "
"más sencilla de gestionar las distintas acciones para cada uno de los "
"subanalizadores.  Sin embargo, si es necesario comprobar el nombre del "
"subcompletador que se invocó, el argumento de palabra clave ``dest`` a la "
"llamada :meth:`add_subparsers` funcionará::"

#: ../../library/argparse.rst:1813
msgid "New *required* keyword argument."
msgstr ""

#: ../../library/argparse.rst:1818
msgid "FileType objects"
msgstr "Objetos FileType"

#: ../../library/argparse.rst:1822
msgid ""
"The :class:`FileType` factory creates objects that can be passed to the type "
"argument of :meth:`ArgumentParser.add_argument`.  Arguments that have :class:"
"`FileType` objects as their type will open command-line arguments as files "
"with the requested modes, buffer sizes, encodings and error handling (see "
"the :func:`open` function for more details)::"
msgstr ""
"La fábrica :class:`FileType` crea objetos que pueden pasarse al argumento de "
"tipo de :meth:`ArgumentParser.add_argument`. Los argumentos que tengan como "
"tipo objetos :class:`FileType` abrirán los argumentos de la línea de "
"comandos como archivos con los modos, tamaños de búfer, codificaciones y "
"gestión de errores solicitados (véase la función :func:`open` para más "
"detalles)::"

#: ../../library/argparse.rst:1834
msgid ""
"FileType objects understand the pseudo-argument ``'-'`` and automatically "
"convert this into :data:`sys.stdin` for readable :class:`FileType` objects "
"and :data:`sys.stdout` for writable :class:`FileType` objects::"
msgstr ""
"Los objetos FileType comprenden el pseudoargumento ``'-'`` y lo convierten "
"automáticamente en :data:`sys.stdin` para los objetos legibles :class:"
"`FileType` y en :data:`sys.stdout` para los objetos escribibles :class:"
"`FileType`::"

#: ../../library/argparse.rst:1843
msgid "The *encodings* and *errors* keyword arguments."
msgstr ""

#: ../../library/argparse.rst:1848
msgid "Argument groups"
msgstr "Grupos de argumentos"

#: ../../library/argparse.rst:1852
msgid ""
"By default, :class:`ArgumentParser` groups command-line arguments into "
"\"positional arguments\" and \"optional arguments\" when displaying help "
"messages. When there is a better conceptual grouping of arguments than this "
"default one, appropriate groups can be created using the :meth:"
"`add_argument_group` method::"
msgstr ""

#: ../../library/argparse.rst:1869
msgid ""
"The :meth:`add_argument_group` method returns an argument group object which "
"has an :meth:`~ArgumentParser.add_argument` method just like a regular :"
"class:`ArgumentParser`.  When an argument is added to the group, the parser "
"treats it just like a normal argument, but displays the argument in a "
"separate group for help messages.  The :meth:`add_argument_group` method "
"accepts *title* and *description* arguments which can be used to customize "
"this display::"
msgstr ""

#: ../../library/argparse.rst:1895
msgid ""
"Note that any arguments not in your user-defined groups will end up back in "
"the usual \"positional arguments\" and \"optional arguments\" sections."
msgstr ""
"Tenga en cuenta que cualquier argumento que no esté en sus grupos definidos "
"por el usuario acabará de nuevo en las secciones habituales de \"argumentos "
"posicionales\" y \"argumentos opcionales\"."

#: ../../library/argparse.rst:1900
msgid "Mutual exclusion"
msgstr "Exclusión mutua"

#: ../../library/argparse.rst:1904
msgid ""
"Create a mutually exclusive group. :mod:`argparse` will make sure that only "
"one of the arguments in the mutually exclusive group was present on the "
"command line::"
msgstr ""

#: ../../library/argparse.rst:1920
msgid ""
"The :meth:`add_mutually_exclusive_group` method also accepts a *required* "
"argument, to indicate that at least one of the mutually exclusive arguments "
"is required::"
msgstr ""
"El método :meth:`add_mutually_exclusive_group` también acepta un argumento "
"*required*, para indicar que al menos uno de los argumentos mutuamente "
"excluyentes es necesario::"

#: ../../library/argparse.rst:1932
msgid ""
"Note that currently mutually exclusive argument groups do not support the "
"*title* and *description* arguments of :meth:`~ArgumentParser."
"add_argument_group`."
msgstr ""

#: ../../library/argparse.rst:1938
msgid "Parser defaults"
msgstr "Parser por defecto"

#: ../../library/argparse.rst:1942
msgid ""
"Most of the time, the attributes of the object returned by :meth:"
"`parse_args` will be fully determined by inspecting the command-line "
"arguments and the argument actions.  :meth:`set_defaults` allows some "
"additional attributes that are determined without any inspection of the "
"command line to be added::"
msgstr ""
"La mayoría de las veces, los atributos del objeto devuelto por :meth:"
"`parse_args` se determinarán completamente inspeccionando los argumentos de "
"la línea de comandos y las acciones de los argumentos. :meth:`set_defaults` "
"permite añadir algunos atributos adicionales que se determinan sin ninguna "
"inspección de la línea de comandos::"

#: ../../library/argparse.rst:1954
msgid ""
"Note that parser-level defaults always override argument-level defaults::"
msgstr ""
"Tener en cuenta que los valores por defecto a nivel de analizador siempre "
"anulan los valores por defecto a nivel de argumento::"

#: ../../library/argparse.rst:1962
msgid ""
"Parser-level defaults can be particularly useful when working with multiple "
"parsers.  See the :meth:`~ArgumentParser.add_subparsers` method for an "
"example of this type."
msgstr ""
"Los valores por defecto a nivel de analizador sintáctico pueden ser "
"especialmente útiles cuando se trabaja con varios analizadores sintácticos.  "
"Consultar el método :meth:`~ArgumentParser.add_subparsers` para ver un "
"ejemplo de este tipo."

#: ../../library/argparse.rst:1968
msgid ""
"Get the default value for a namespace attribute, as set by either :meth:"
"`~ArgumentParser.add_argument` or by :meth:`~ArgumentParser.set_defaults`::"
msgstr ""
"Obtiene el valor predeterminado de un atributo de espacio de nombres, "
"establecido por :meth:`~ArgumentParser.add_argument` o por :meth:"
"`~ArgumentParser.set_defaults`::"

#: ../../library/argparse.rst:1979
msgid "Printing help"
msgstr "Ayuda para la impresión"

#: ../../library/argparse.rst:1981
msgid ""
"In most typical applications, :meth:`~ArgumentParser.parse_args` will take "
"care of formatting and printing any usage or error messages.  However, "
"several formatting methods are available:"
msgstr ""
"En la mayoría de las aplicaciones típicas, :meth:`~ArgumentParser."
"parse_args` se encargará de formatear e imprimir cualquier mensaje de uso o "
"error.  Sin embargo, existen varios métodos de formateo:"

#: ../../library/argparse.rst:1987
msgid ""
"Print a brief description of how the :class:`ArgumentParser` should be "
"invoked on the command line.  If *file* is ``None``, :data:`sys.stdout` is "
"assumed."
msgstr ""
"Imprime una breve descripción de cómo debe invocarse :class:`ArgumentParser` "
"en la línea de comandos.  Si *file* es ``None``, se asume :data:`sys.stdout`."

#: ../../library/argparse.rst:1993
msgid ""
"Print a help message, including the program usage and information about the "
"arguments registered with the :class:`ArgumentParser`.  If *file* is "
"``None``, :data:`sys.stdout` is assumed."
msgstr ""
"Imprime un mensaje de ayuda, incluyendo el uso del programa e información "
"sobre los argumentos registrados en :class:`ArgumentParser`. Si *file* es "
"``None``, se asume :data:`sys.stdout`."

#: ../../library/argparse.rst:1997
msgid ""
"There are also variants of these methods that simply return a string instead "
"of printing it:"
msgstr ""
"También existen variantes de estos métodos que simplemente devuelven una "
"cadena en lugar de imprimirla:"

#: ../../library/argparse.rst:2002
msgid ""
"Return a string containing a brief description of how the :class:"
"`ArgumentParser` should be invoked on the command line."
msgstr ""
"Devuelve una cadena que contiene una breve descripción de cómo debe "
"invocarse :class:`ArgumentParser` en la línea de comandos."

#: ../../library/argparse.rst:2007
msgid ""
"Return a string containing a help message, including the program usage and "
"information about the arguments registered with the :class:`ArgumentParser`."
msgstr ""
"Devuelve una cadena con un mensaje de ayuda, que incluye el uso del programa "
"e información sobre los argumentos registrados en :class:`ArgumentParser`."

#: ../../library/argparse.rst:2012
msgid "Partial parsing"
msgstr "Análisis sintáctico parcial"

#: ../../library/argparse.rst:2016
msgid ""
"Sometimes a script may only parse a few of the command-line arguments, "
"passing the remaining arguments on to another script or program. In these "
"cases, the :meth:`~ArgumentParser.parse_known_args` method can be useful.  "
"It works much like :meth:`~ArgumentParser.parse_args` except that it does "
"not produce an error when extra arguments are present.  Instead, it returns "
"a two item tuple containing the populated namespace and the list of "
"remaining argument strings."
msgstr ""
"A veces, es posible que un script sólo analice algunos de los argumentos de "
"la línea de comandos y pase el resto a otro script o programa. En estos "
"casos, el método :meth:`~ArgumentParser.parse_known_args` puede ser útil.  "
"Funciona de forma muy parecida a :meth:`~ArgumentParser.parse_args`, salvo "
"que no produce un error cuando hay argumentos adicionales.  En su lugar, "
"devuelve una tupla de dos elementos que contiene el espacio de nombres "
"rellenado y la lista de cadenas de argumentos restantes."

#: ../../library/argparse.rst:2032
msgid ""
":ref:`Prefix matching <prefix-matching>` rules apply to :meth:"
"`parse_known_args`. The parser may consume an option even if it's just a "
"prefix of one of its known options, instead of leaving it in the remaining "
"arguments list."
msgstr ""

#: ../../library/argparse.rst:2039
msgid "Customizing file parsing"
msgstr "Personalización del análisis sintáctico de archivos"

#: ../../library/argparse.rst:2043
msgid ""
"Arguments that are read from a file (see the *fromfile_prefix_chars* keyword "
"argument to the :class:`ArgumentParser` constructor) are read one argument "
"per line. :meth:`convert_arg_line_to_args` can be overridden for fancier "
"reading."
msgstr ""
"Los argumentos que se leen de un archivo (véase el argumento de palabra "
"clave *fromfile_prefix_chars* del constructor :class:`ArgumentParser` ) se "
"leen un argumento por línea. :meth:`convert_arg_line_to_args` puede "
"sobrescribirse para una lectura más sofisticada."

#: ../../library/argparse.rst:2048
msgid ""
"This method takes a single argument *arg_line* which is a string read from "
"the argument file.  It returns a list of arguments parsed from this string. "
"The method is called once per line read from the argument file, in order."
msgstr ""
"Este método toma un único argumento *arg_line* que es una cadena leída del "
"fichero de argumentos.  Devuelve una lista de argumentos analizados a partir "
"de esta cadena. El método se ejecuta una vez por cada línea leída del "
"archivo de argumentos, en orden."

#: ../../library/argparse.rst:2052
msgid ""
"A useful override of this method is one that treats each space-separated "
"word as an argument.  The following example demonstrates how to do this::"
msgstr ""
"Un método útil es el que trata cada palabra separada por espacios como un "
"argumento.  El siguiente ejemplo muestra cómo hacerlo::"

#: ../../library/argparse.rst:2061
msgid "Exiting methods"
msgstr "Métodos de salida"

#: ../../library/argparse.rst:2065
msgid ""
"This method terminates the program, exiting with the specified *status* and, "
"if given, it prints a *message* before that. The user can override this "
"method to handle these steps differently::"
msgstr ""

#: ../../library/argparse.rst:2077
msgid ""
"This method prints a usage message including the *message* to the standard "
"error and terminates the program with a status code of 2."
msgstr ""

#: ../../library/argparse.rst:2082
msgid "Intermixed parsing"
msgstr "Análisis mixto"

#: ../../library/argparse.rst:2087
msgid ""
"A number of Unix commands allow the user to intermix optional arguments with "
"positional arguments.  The :meth:`~ArgumentParser.parse_intermixed_args` "
"and :meth:`~ArgumentParser.parse_known_intermixed_args` methods support this "
"parsing style."
msgstr ""
"Algunos comandos Unix permiten al usuario entremezclar argumentos opcionales "
"con argumentos posicionales.  Los métodos :meth:`~ArgumentParser."
"parse_intermixed_args` y :meth:`~ArgumentParser.parse_known_intermixed_args` "
"admiten este estilo de análisis sintáctico."

#: ../../library/argparse.rst:2092
msgid ""
"These parsers do not support all the argparse features, and will raise "
"exceptions if unsupported features are used.  In particular, subparsers, "
"``argparse.REMAINDER``, and mutually exclusive groups that include both "
"optionals and positionals are not supported."
msgstr ""

#: ../../library/argparse.rst:2097
msgid ""
"The following example shows the difference between :meth:`~ArgumentParser."
"parse_known_args` and :meth:`~ArgumentParser.parse_intermixed_args`: the "
"former returns ``['2', '3']`` as unparsed arguments, while the latter "
"collects all the positionals into ``rest``.  ::"
msgstr ""
"El siguiente ejemplo muestra la diferencia entre :meth:`~ArgumentParser."
"parse_known_args` y :meth:`~ArgumentParser.parse_intermixed_args`: el "
"primero devuelve ``['2', '3']`` como argumentos sin analizar, mientras que "
"el segundo recoge todos los posicionales en ``rest``. ::"

#: ../../library/argparse.rst:2112
msgid ""
":meth:`~ArgumentParser.parse_known_intermixed_args` returns a two item tuple "
"containing the populated namespace and the list of remaining argument "
"strings. :meth:`~ArgumentParser.parse_intermixed_args` raises an error if "
"there are any remaining unparsed argument strings."
msgstr ""
":meth:`~ArgumentParser.parse_known_intermixed_args` devuelve una tupla de "
"dos elementos que contiene el espacio de nombres rellenado y la lista de "
"cadenas de argumentos restantes. :meth:`~ArgumentParser."
"parse_intermixed_args` genera un error si quedan cadenas de argumentos sin "
"analizar."

#: ../../library/argparse.rst:2122
msgid "Upgrading optparse code"
msgstr ""

#: ../../library/argparse.rst:2124
msgid ""
"Originally, the :mod:`argparse` module had attempted to maintain "
"compatibility with :mod:`optparse`.  However, :mod:`optparse` was difficult "
"to extend transparently, particularly with the changes required to support "
"the new ``nargs=`` specifiers and better usage messages.  When most "
"everything in :mod:`optparse` had either been copy-pasted over or monkey-"
"patched, it no longer seemed practical to try to maintain the backwards "
"compatibility."
msgstr ""

#: ../../library/argparse.rst:2131
msgid ""
"The :mod:`argparse` module improves on the standard library :mod:`optparse` "
"module in a number of ways including:"
msgstr ""

#: ../../library/argparse.rst:2134
msgid "Handling positional arguments."
msgstr ""

#: ../../library/argparse.rst:2135
msgid "Supporting sub-commands."
msgstr ""

#: ../../library/argparse.rst:2136
msgid "Allowing alternative option prefixes like ``+`` and ``/``."
msgstr ""

#: ../../library/argparse.rst:2137
msgid "Handling zero-or-more and one-or-more style arguments."
msgstr ""

#: ../../library/argparse.rst:2138
msgid "Producing more informative usage messages."
msgstr ""

#: ../../library/argparse.rst:2139
msgid "Providing a much simpler interface for custom ``type`` and ``action``."
msgstr ""

#: ../../library/argparse.rst:2141
msgid "A partial upgrade path from :mod:`optparse` to :mod:`argparse`:"
msgstr ""

#: ../../library/argparse.rst:2143
msgid ""
"Replace all :meth:`optparse.OptionParser.add_option` calls with :meth:"
"`ArgumentParser.add_argument` calls."
msgstr ""

#: ../../library/argparse.rst:2146
msgid ""
"Replace ``(options, args) = parser.parse_args()`` with ``args = parser."
"parse_args()`` and add additional :meth:`ArgumentParser.add_argument` calls "
"for the positional arguments. Keep in mind that what was previously called "
"``options``, now in the :mod:`argparse` context is called ``args``."
msgstr ""

#: ../../library/argparse.rst:2151
msgid ""
"Replace :meth:`optparse.OptionParser.disable_interspersed_args` by using :"
"meth:`~ArgumentParser.parse_intermixed_args` instead of :meth:"
"`~ArgumentParser.parse_args`."
msgstr ""

#: ../../library/argparse.rst:2155
msgid ""
"Replace callback actions and the ``callback_*`` keyword arguments with "
"``type`` or ``action`` arguments."
msgstr ""

#: ../../library/argparse.rst:2158
msgid ""
"Replace string names for ``type`` keyword arguments with the corresponding "
"type objects (e.g. int, float, complex, etc)."
msgstr ""

#: ../../library/argparse.rst:2161
msgid ""
"Replace :class:`optparse.Values` with :class:`Namespace` and :exc:`optparse."
"OptionError` and :exc:`optparse.OptionValueError` with :exc:`ArgumentError`."
msgstr ""

#: ../../library/argparse.rst:2165
msgid ""
"Replace strings with implicit arguments such as ``%default`` or ``%prog`` "
"with the standard Python syntax to use dictionaries to format strings, that "
"is, ``%(default)s`` and ``%(prog)s``."
msgstr ""

#: ../../library/argparse.rst:2169
msgid ""
"Replace the OptionParser constructor ``version`` argument with a call to "
"``parser.add_argument('--version', action='version', version='<the "
"version>')``."
msgstr ""
