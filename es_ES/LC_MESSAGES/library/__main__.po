# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-14 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../library/__main__.rst:2
msgid ":mod:`!__main__` --- Top-level code environment"
msgstr ":mod:`!__main__` --- Entorno de código de alto nivel"

#: ../../library/__main__.rst:10
msgid ""
"In Python, the special name ``__main__`` is used for two important "
"constructs:"
msgstr ""
"En Python, el nombre especial ``__main__`` se utiliza para dos "
"construcciones importantes:"

#: ../../library/__main__.rst:12
msgid ""
"the name of the top-level environment of the program, which can be checked "
"using the ``__name__ == '__main__'`` expression; and"
msgstr ""
"el nombre del entorno de nivel superior del programa, que puede comprobarse "
"mediante la expresión ``__name__ == '__main__'``; y"

#: ../../library/__main__.rst:14
msgid "the ``__main__.py`` file in Python packages."
msgstr "el archivo ``__main__.py`` en paquetes Python."

#: ../../library/__main__.rst:16
msgid ""
"Both of these mechanisms are related to Python modules; how users interact "
"with them and how they interact with each other.  They are explained in "
"detail below.  If you're new to Python modules, see the tutorial section :"
"ref:`tut-modules` for an introduction."
msgstr ""
"Ambos mecanismos están relacionados con los módulos de Python; cómo "
"interactúan los usuarios con ellos y cómo interactúan entre sí.  Se explican "
"en detalle a continuación.  Si no conoces los módulos de Python, consulta la "
"sección del tutorial :ref:`tut-modules` para una introducción."

#: ../../library/__main__.rst:25
msgid "``__name__ == '__main__'``"
msgstr "``__name__ == '__main__'``"

#: ../../library/__main__.rst:27
msgid ""
"When a Python module or package is imported, ``__name__`` is set to the "
"module's name.  Usually, this is the name of the Python file itself without "
"the ``.py`` extension::"
msgstr ""
"Cuando se importa un módulo o paquete de Python, ``__name__`` se establece "
"con el nombre del módulo.  Normalmente, es el nombre del propio archivo "
"Python sin la extensión ``.py``::"

#: ../../library/__main__.rst:31
msgid ""
">>> import configparser\n"
">>> configparser.__name__\n"
"'configparser'"
msgstr ""
">>> import configparser\n"
">>> configparser.__name__\n"
"'configparser'"

#: ../../library/__main__.rst:35
msgid ""
"If the file is part of a package, ``__name__`` will also include the parent "
"package's path::"
msgstr ""
"Si el archivo forma parte de un paquete, ``__name__`` incluirá también la "
"ruta del paquete padre::"

#: ../../library/__main__.rst:38
msgid ""
">>> from concurrent.futures import process\n"
">>> process.__name__\n"
"'concurrent.futures.process'"
msgstr ""
">>> from concurrent.futures import process\n"
">>> process.__name__\n"
"'concurrent.futures.process'"

#: ../../library/__main__.rst:42
msgid ""
"However, if the module is executed in the top-level code environment, its "
"``__name__`` is set to the string ``'__main__'``."
msgstr ""
"Sin embargo, si el módulo se ejecuta en el entorno de código de nivel "
"superior, su ``__name__`` se establece en la cadena ``'__main__'``."

#: ../../library/__main__.rst:46
msgid "What is the \"top-level code environment\"?"
msgstr "¿Qué es el \"entorno de código de nivel superior\"?"

#: ../../library/__main__.rst:48
msgid ""
"``__main__`` is the name of the environment where top-level code is run. "
"\"Top-level code\" is the first user-specified Python module that starts "
"running. It's \"top-level\" because it imports all other modules that the "
"program needs. Sometimes \"top-level code\" is called an *entry point* to "
"the application."
msgstr ""
"``__main__`` es el nombre del entorno donde se ejecuta el código de nivel "
"superior. \"Código de nivel superior\" es el primer módulo Python "
"especificado por el usuario que comienza a ejecutarse. Es de \"alto nivel\" "
"porque importa todos los demás módulos que el programa necesita. A veces al "
"\"código de nivel superior\" se le llama *punto de entrada* a la aplicación."

#: ../../library/__main__.rst:53
msgid "The top-level code environment can be:"
msgstr "El entorno de código de nivel superior puede ser:"

#: ../../library/__main__.rst:55
msgid "the scope of an interactive prompt::"
msgstr "el alcance de un aviso interactivo::"

#: ../../library/__main__.rst:57
msgid ""
">>> __name__\n"
"'__main__'"
msgstr ""
">>> __name__\n"
"'__main__'"

#: ../../library/__main__.rst:60
msgid "the Python module passed to the Python interpreter as a file argument:"
msgstr ""
"el módulo de Python pasado al intérprete de Python como argumento de archivo:"

#: ../../library/__main__.rst:62
msgid ""
"$ python helloworld.py\n"
"Hello, world!"
msgstr ""
"$ python helloworld.py\n"
"¡Hola, mundo!"

#: ../../library/__main__.rst:67
msgid ""
"the Python module or package passed to the Python interpreter with the :"
"option:`-m` argument:"
msgstr ""
"el módulo o paquete de Python pasado al intérprete de Python con el "
"argumento :option:`-m`:"

#: ../../library/__main__.rst:70
msgid ""
"$ python -m tarfile\n"
"usage: tarfile.py [-h] [-v] (...)"
msgstr ""
"$ python -m tarfile\n"
"usage: tarfile.py [-h] [-v] (...)"

#: ../../library/__main__.rst:75
msgid "Python code read by the Python interpreter from standard input:"
msgstr ""
"Código Python leído por el intérprete Python desde la entrada estándar:"

#: ../../library/__main__.rst:77
msgid ""
"$ echo \"import this\" | python\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."
msgstr ""
"$ echo \"import this\" | python\n"
"El Zen de Python, por Tim Peters\n"
"\n"
"Lo bonito es mejor que lo feo.\n"
"Explícito es mejor que implícito.\n"
"..."

#: ../../library/__main__.rst:86
msgid ""
"Python code passed to the Python interpreter with the :option:`-c` argument:"
msgstr ""
"Código Python pasado al intérprete Python con el argumento :option:`-c`:"

#: ../../library/__main__.rst:88
msgid ""
"$ python -c \"import this\"\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."
msgstr ""
"$ python -c \"importar esto\"\n"
"El Zen de Python, por Tim Peters\n"
"\n"
"Lo bonito es mejor que lo feo.\n"
"Explícito es mejor que implícito.\n"
"..."

#: ../../library/__main__.rst:97
msgid ""
"In each of these situations, the top-level module's ``__name__`` is set to "
"``'__main__'``."
msgstr ""
"En cada una de estas situaciones, el módulo de nivel superior ``__name__`` "
"se establece en ``'__main__'``."

#: ../../library/__main__.rst:100
msgid ""
"As a result, a module can discover whether or not it is running in the top-"
"level environment by checking its own ``__name__``, which allows a common "
"idiom for conditionally executing code when the module is not initialized "
"from an import statement::"
msgstr ""
"Como resultado, un módulo puede descubrir si se está ejecutando o no en el "
"entorno de nivel superior comprobando su propio ``__name__``, lo que permite "
"un lenguaje común para ejecutar código condicionalmente cuando el módulo no "
"se inicializa desde una sentencia import::"

#: ../../library/__main__.rst:105
msgid ""
"if __name__ == '__main__':\n"
"    # Execute when the module is not initialized from an import statement.\n"
"    ..."
msgstr ""
"if __name__ == '__main__':\n"
"    # Ejecutar cuando el módulo no se inicializa desde una sentencia "
"import.\n"
"    ..."

#: ../../library/__main__.rst:111
msgid ""
"For a more detailed look at how ``__name__`` is set in all situations, see "
"the tutorial section :ref:`tut-modules`."
msgstr ""
"Para ver con más detalle cómo se configura ``__name__`` en todas las "
"situaciones, consulte la sección del tutorial :ref:`tut-modules`."

#: ../../library/__main__.rst:116 ../../library/__main__.rst:239
msgid "Idiomatic Usage"
msgstr "Uso idiomático"

#: ../../library/__main__.rst:118
msgid ""
"Some modules contain code that is intended for script use only, like parsing "
"command-line arguments or fetching data from standard input.  If a module "
"like this was imported from a different module, for example to unit test it, "
"the script code would unintentionally execute as well."
msgstr ""
"Algunos módulos contienen código que está destinado únicamente al uso de "
"scripts, como el análisis sintáctico de argumentos de línea de comandos o la "
"obtención de datos de la entrada estándar.  Si un módulo de este tipo se "
"importara desde otro módulo, por ejemplo para probarlo, el código del script "
"también se ejecutaría involuntariamente."

#: ../../library/__main__.rst:123
msgid ""
"This is where using the ``if __name__ == '__main__'`` code block comes in "
"handy. Code within this block won't run unless the module is executed in the "
"top-level environment."
msgstr ""
"Aquí es donde resulta útil utilizar el bloque de código ``if __name__ == "
"'__main__'``. El código dentro de este bloque no se ejecutará a menos que el "
"módulo se ejecute en el entorno de nivel superior."

#: ../../library/__main__.rst:127
msgid ""
"Putting as few statements as possible in the block below ``if __name__ == "
"'__main__'`` can improve code clarity and correctness. Most often, a "
"function named ``main`` encapsulates the program's primary behavior::"
msgstr ""
"Colocar el menor número posible de sentencias en el bloque inferior a ``if "
"__name__ == '__main__'`` puede mejorar la claridad y corrección del código. "
"Muy a menudo, una función llamada ``main`` encapsula el comportamiento "
"principal del programa::"

#: ../../library/__main__.rst:131
msgid ""
"# echo.py\n"
"\n"
"import shlex\n"
"import sys\n"
"\n"
"def echo(phrase: str) -> None:\n"
"   \"\"\"A dummy wrapper around print.\"\"\"\n"
"   # for demonstration purposes, you can imagine that there is some\n"
"   # valuable and reusable logic inside this function\n"
"   print(phrase)\n"
"\n"
"def main() -> int:\n"
"    \"\"\"Echo the input arguments to standard output\"\"\"\n"
"    phrase = shlex.join(sys.argv)\n"
"    echo(phrase)\n"
"    return 0\n"
"\n"
"if __name__ == '__main__':\n"
"    sys.exit(main())  # next section explains the use of sys.exit"
msgstr ""
"# echo.py\n"
"\n"
"import shlex\n"
"import sys\n"
"\n"
"def echo(frase: str) -> None:\n"
"   \"\"\"Una envoltura ficticia alrededor de print.\"\"\"\n"
"   # para propósitos de demostración, puedes imaginar que hay alguna\n"
"   # lógica valiosa y reutilizable dentro de esta función\n"
"   print(frase)\n"
"\n"
"def main() -> int:\n"
"    \"\"\"Envía los argumentos de entrada a la salida estándar\"\"\"\"\n"
"    frase = shlex.join(sys.argv)\n"
"    echo(frase)\n"
"    return 0\n"
"\n"
"if __name__ == '__main__':\n"
"    sys.exit(main()) # la siguiente sección explica el uso de sys.exit"

#: ../../library/__main__.rst:151
msgid ""
"Note that if the module didn't encapsulate code inside the ``main`` function "
"but instead put it directly within the ``if __name__ == '__main__'`` block, "
"the ``phrase`` variable would be global to the entire module.  This is error-"
"prone as other functions within the module could be unintentionally using "
"the global variable instead of a local name.  A ``main`` function solves "
"this problem."
msgstr ""
"Tener en cuenta que si el módulo no encapsulara el código dentro de la "
"función ``main`` sino que lo pusiera directamente dentro del bloque ``if "
"__name__ == '__main__'``, la variable ``phrase`` sería global para todo el "
"módulo.  Lo que es propenso a errores ya que otras funciones dentro del "
"módulo podrían estar utilizando involuntariamente la variable global en "
"lugar de un nombre local.  Una función ``main`` resuelve este problema."

#: ../../library/__main__.rst:158
msgid ""
"Using a ``main`` function has the added benefit of the ``echo`` function "
"itself being isolated and importable elsewhere. When ``echo.py`` is "
"imported, the ``echo`` and ``main`` functions will be defined, but neither "
"of them will be called, because ``__name__ != '__main__'``."
msgstr ""
"El uso de una función ``main`` tiene la ventaja añadida de que la propia "
"función ``echo`` está aislada y puede importarse a otro sitio. Cuando se "
"importe ``echo.py``, se definirán las funciones ``echo`` y ``main``, pero no "
"se llamará a ninguna de ellas, porque ``__name__ != '__main__'``."

#: ../../library/__main__.rst:165
msgid "Packaging Considerations"
msgstr "Consideraciones sobre el empaquetado"

#: ../../library/__main__.rst:167
msgid ""
"``main`` functions are often used to create command-line tools by specifying "
"them as entry points for console scripts.  When this is done, `pip <https://"
"pip.pypa.io/>`_ inserts the function call into a template script, where the "
"return value of ``main`` is passed into :func:`sys.exit`. For example::"
msgstr ""
"``main`` se utilizan a menudo para crear herramientas de línea de comandos "
"especificándolas como puntos de entrada para scripts de consola.  Cuando se "
"hace esto, `pip <https://pip.pypa.io/>`_ inserta la llamada a la función en "
"un script de plantilla, donde el valor de retorno de ``main`` se pasa a :"
"func:`sys.exit`. Por ejemplo"

#: ../../library/__main__.rst:173
msgid "sys.exit(main())"
msgstr "sys.exit(main())"

#: ../../library/__main__.rst:175
msgid ""
"Since the call to ``main`` is wrapped in :func:`sys.exit`, the expectation "
"is that your function will return some value acceptable as an input to :func:"
"`sys.exit`; typically, an integer or ``None`` (which is implicitly returned "
"if your function does not have a return statement)."
msgstr ""
"Dado que la llamada a ``main`` está envuelta en :func:`sys.exit`, se espera "
"que su función devuelva algún valor aceptable como entrada a :func:`sys."
"exit`; típicamente, un entero o ``None`` (que se devuelve implícitamente si "
"su función no tiene una sentencia return)."

#: ../../library/__main__.rst:180
msgid ""
"By proactively following this convention ourselves, our module will have the "
"same behavior when run directly (i.e. ``python echo.py``) as it will have if "
"we later package it as a console script entry-point in a pip-installable "
"package."
msgstr ""
"Siguiendo nosotros mismos esta convención de forma proactiva, nuestro módulo "
"tendrá el mismo comportamiento cuando se ejecute directamente (es decir, "
"``python echo.py``) que si lo empaquetamos más tarde como un punto de "
"entrada de script de consola en un paquete instalable mediante pip."

#: ../../library/__main__.rst:185
msgid ""
"In particular, be careful about returning strings from your ``main`` "
"function. :func:`sys.exit` will interpret a string argument as a failure "
"message, so your program will have an exit code of ``1``, indicating "
"failure, and the string will be written to :data:`sys.stderr`.  The ``echo."
"py`` example from earlier exemplifies using the ``sys.exit(main())`` "
"convention."
msgstr ""
"En particular, tenga cuidado al devolver cadenas desde su función ``main``. :"
"func:`sys.exit` interpretará un argumento de cadena como un mensaje de "
"fallo, por lo que su programa tendrá un código de salida de ``1``, indicando "
"fallo, y la cadena se escribirá en :data:`sys.stderr`. El ejemplo ``echo."
"py`` de antes ejemplifica el uso de la convención ``sys.exit(main())``."

#: ../../library/__main__.rst:193
msgid ""
"`Python Packaging User Guide <https://packaging.python.org/>`_ contains a "
"collection of tutorials and references on how to distribute and install "
"Python packages with modern tools."
msgstr ""
"`Python Packaging User Guide <https://packaging.python.org/>`_ contiene una "
"colección de tutoriales y referencias sobre cómo distribuir e instalar "
"paquetes Python con herramientas modernas."

#: ../../library/__main__.rst:199
msgid "``__main__.py`` in Python Packages"
msgstr "``__main__.py`` en Paquetes Python"

#: ../../library/__main__.rst:201
msgid ""
"If you are not familiar with Python packages, see section :ref:`tut-"
"packages` of the tutorial.  Most commonly, the ``__main__.py`` file is used "
"to provide a command-line interface for a package. Consider the following "
"hypothetical package, \"bandclass\":"
msgstr ""
"Si no está familiarizado con los paquetes de Python, consulte la sección :"
"ref:`tut-packages` del tutorial.  Lo más común es que el archivo ``__main__."
"py`` se utilice para proporcionar una interfaz de línea de comandos para un "
"paquete. Considere el siguiente paquete hipotético, \"bandclass\":"

#: ../../library/__main__.rst:206
msgid ""
"bandclass\n"
"  ├── __init__.py\n"
"  ├── __main__.py\n"
"  └── student.py"
msgstr ""
"bandclass\n"
"  ├── __init__.py\n"
"  ├── __main__.py\n"
"  └── student.py"

#: ../../library/__main__.rst:213
msgid ""
"``__main__.py`` will be executed when the package itself is invoked directly "
"from the command line using the :option:`-m` flag. For example:"
msgstr ""
"``__main__.py`` se ejecutará cuando el propio paquete se invoque "
"directamente desde la línea de comandos utilizando la bandera :option:`-m`. "
"Por ejemplo:"

#: ../../library/__main__.rst:216
msgid "$ python -m bandclass"
msgstr "$ python -m bandclass"

#: ../../library/__main__.rst:220
msgid ""
"This command will cause ``__main__.py`` to run. How you utilize this "
"mechanism will depend on the nature of the package you are writing, but in "
"this hypothetical case, it might make sense to allow the teacher to search "
"for students::"
msgstr ""
"Este comando hará que se ejecute ``__main__.py``. La forma de utilizar este "
"mecanismo dependerá de la naturaleza del paquete que esté escribiendo, pero "
"en este caso hipotético, podría tener sentido permitir al profesor buscar "
"estudiantes::"

#: ../../library/__main__.rst:225
msgid ""
"# bandclass/__main__.py\n"
"\n"
"import sys\n"
"from .student import search_students\n"
"\n"
"student_name = sys.argv[1] if len(sys.argv) >= 2 else ''\n"
"print(f'Found student: {search_students(student_name)}')"
msgstr ""
"# bandclass/__main__.py\n"
"\n"
"import sys\n"
"from .student import search_students\n"
"\n"
"student_name = sys.argv[1] if len(sys.argv) >= 2 else ''\n"
"print(f'Found student: {search_students(student_name)}')"

#: ../../library/__main__.rst:233
msgid ""
"Note that ``from .student import search_students`` is an example of a "
"relative import.  This import style can be used when referencing modules "
"within a package.  For more details, see :ref:`intra-package-references` in "
"the :ref:`tut-modules` section of the tutorial."
msgstr ""
"Observe que ``from .student import search_students`` es un ejemplo de "
"importación relativa.  Este estilo de importación puede utilizarse cuando se "
"hace referencia a módulos dentro de un paquete.  Para más detalles, "
"consulte :ref:`intra-package-references` en la sección :ref:`tut-modules` "
"del tutorial."

#: ../../library/__main__.rst:241
msgid ""
"The content of ``__main__.py`` typically isn't fenced with an ``if __name__ "
"== '__main__'`` block.  Instead, those files are kept short and import "
"functions to execute from other modules.  Those other modules can then be "
"easily unit-tested and are properly reusable."
msgstr ""
"El contenido de ``__main__.py`` no suele estar delimitado por un bloque ``if "
"__name__ == '__main__'``.  En su lugar, esos archivos se mantienen cortos e "
"importan funciones para ejecutar desde otros módulos.  Esos otros módulos "
"pueden entonces ser fácilmente probados unitariamente y son adecuadamente "
"reutilizables."

#: ../../library/__main__.rst:246
msgid ""
"If used, an ``if __name__ == '__main__'`` block will still work as expected "
"for a ``__main__.py`` file within a package, because its ``__name__`` "
"attribute will include the package's path if imported::"
msgstr ""
"Si se utiliza, un bloque ``if __name__ == '__main__'`` seguirá funcionando "
"como se espera para un archivo ``__main__.py`` dentro de un paquete, porque "
"su atributo ``__name__`` incluirá la ruta del paquete si se importa::"

#: ../../library/__main__.rst:250
msgid ""
">>> import asyncio.__main__\n"
">>> asyncio.__main__.__name__\n"
"'asyncio.__main__'"
msgstr ""
">>> import asyncio.__main__\n"
">>> asyncio.__main__.__name__\n"
"'asyncio.__main__'"

#: ../../library/__main__.rst:254
msgid ""
"This won't work for ``__main__.py`` files in the root directory of a ``."
"zip`` file though.  Hence, for consistency, a minimal ``__main__.py`` "
"without a ``__name__`` check is preferred."
msgstr ""
"Sin embargo, esto no funcionará para archivos ``__main__.py`` en el "
"directorio raíz de un archivo ``.zip``.  De ahí que, por coherencia, se "
"prefiera un ``__main__.py`` mínimo sin comprobación de ``__name__``."

#: ../../library/__main__.rst:260
msgid ""
"See :mod:`venv` for an example of a package with a minimal ``__main__.py`` "
"in the standard library. It doesn't contain a ``if __name__ == '__main__'`` "
"block. You can invoke it with ``python -m venv [directory]``."
msgstr ""
"Consulte :mod:`venv` para ver un ejemplo de un paquete con un mínimo de "
"``__main__.py`` en la biblioteca estándar. No contiene un bloque ``if "
"__name__ == '__main__'``. Puede invocarlo con ``python -m venv [directory]``."

#: ../../library/__main__.rst:264
msgid ""
"See :mod:`runpy` for more details on the :option:`-m` flag to the "
"interpreter executable."
msgstr ""
"Ver :mod:`runpy` para más detalles sobre la bandera :option:`-m` en el "
"ejecutable del intérprete."

#: ../../library/__main__.rst:267
msgid ""
"See :mod:`zipapp` for how to run applications packaged as *.zip* files. In "
"this case Python looks for a ``__main__.py`` file in the root directory of "
"the archive."
msgstr ""
"Ver :mod:`zipapp` para saber cómo ejecutar aplicaciones empaquetadas como "
"archivos *.zip*. En este caso Python busca un archivo ``__main__.py`` en el "
"directorio raíz del archivo."

#: ../../library/__main__.rst:274
msgid "``import __main__``"
msgstr "``import __main__``"

#: ../../library/__main__.rst:276
msgid ""
"Regardless of which module a Python program was started with, other modules "
"running within that same program can import the top-level environment's "
"scope (:term:`namespace`) by importing the ``__main__`` module.  This "
"doesn't import a ``__main__.py`` file but rather whichever module that "
"received the special name ``'__main__'``."
msgstr ""
"Independientemente del módulo con el que se inició un programa Python, otros "
"módulos que se ejecuten dentro de ese mismo programa pueden importar el "
"ámbito del entorno de nivel superior (:term:`namespace`) importando el "
"módulo ``__main__``.  Esto no importa un archivo ``__main__.py`` sino "
"cualquier módulo que haya recibido el nombre especial ``'__main__'``."

#: ../../library/__main__.rst:282
msgid "Here is an example module that consumes the ``__main__`` namespace::"
msgstr ""
"He aquí un módulo de ejemplo que consume el espacio de nombres ``__main__``::"

#: ../../library/__main__.rst:284
msgid ""
"# namely.py\n"
"\n"
"import __main__\n"
"\n"
"def did_user_define_their_name():\n"
"    return 'my_name' in dir(__main__)\n"
"\n"
"def print_user_name():\n"
"    if not did_user_define_their_name():\n"
"        raise ValueError('Define the variable `my_name`!')\n"
"\n"
"    if '__file__' in dir(__main__):\n"
"        print(__main__.my_name, \"found in file\", __main__.__file__)\n"
"    else:\n"
"        print(__main__.my_name)"
msgstr ""
"# namely.py\n"
"\n"
"import __main__\n"
"\n"
"def did_user_define_their_name():\n"
"    return 'my_name' in dir(__main__)\n"
"\n"
"def print_user_name():\n"
"    if not did_user_define_their_name():\n"
"        raise ValueError('Define the variable `my_name`!')\n"
"\n"
"    if '__file__' in dir(__main__):\n"
"        print(__main__.my_name, \"found in file\", __main__.__file__)\n"
"    else:\n"
"        print(__main__.my_name)"

#: ../../library/__main__.rst:300
msgid "Example usage of this module could be as follows::"
msgstr "Un ejemplo de uso de este módulo podría ser el siguiente::"

#: ../../library/__main__.rst:302
msgid ""
"# start.py\n"
"\n"
"import sys\n"
"\n"
"from namely import print_user_name\n"
"\n"
"# my_name = \"Dinsdale\"\n"
"\n"
"def main():\n"
"    try:\n"
"        print_user_name()\n"
"    except ValueError as ve:\n"
"        return str(ve)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())"
msgstr ""
"# start.py\n"
"\n"
"import sys\n"
"\n"
"from namely import print_user_name\n"
"\n"
"# my_name = \"Dinsdale\"\n"
"\n"
"def main():\n"
"    try:\n"
"        print_user_name()\n"
"    except ValueError as ve:\n"
"        return str(ve)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())"

#: ../../library/__main__.rst:319
msgid "Now, if we started our program, the result would look like this:"
msgstr ""
"Ahora, si pusiéramos en marcha nuestro programa, el resultado sería el "
"siguiente:"

#: ../../library/__main__.rst:321
msgid ""
"$ python start.py\n"
"Define the variable `my_name`!"
msgstr ""
"$ python start.py\n"
"¡Define la variable `my_name`!"

#: ../../library/__main__.rst:326
msgid ""
"The exit code of the program would be 1, indicating an error. Uncommenting "
"the line with ``my_name = \"Dinsdale\"`` fixes the program and now it exits "
"with status code 0, indicating success:"
msgstr ""
"El código de salida del programa sería 1, indicando un error.  No comentar "
"la línea con ``my_name = \"Dinsdale\"`` arregla el programa y ahora sale con "
"código de estado 0, indicando éxito:"

#: ../../library/__main__.rst:330
msgid ""
"$ python start.py\n"
"Dinsdale found in file /path/to/start.py"
msgstr ""
"$ python start.py\n"
"Dinsdale encontrado en el archivo /path/to/start.py"

#: ../../library/__main__.rst:335
msgid ""
"Note that importing ``__main__`` doesn't cause any issues with "
"unintentionally running top-level code meant for script use which is put in "
"the ``if __name__ == \"__main__\"`` block of the ``start`` module. Why does "
"this work?"
msgstr ""
"Tener en cuenta que la importación de ``__main__`` no causa ningún problema "
"con la ejecución involuntaria de código de nivel superior destinado al uso "
"de secuencias de comandos que se coloca en el bloque ``if __name__ == "
"\"__main__\"`` del módulo ``start``. ¿Por qué funciona?"

#: ../../library/__main__.rst:339
msgid ""
"Python inserts an empty ``__main__`` module in :data:`sys.modules` at "
"interpreter startup, and populates it by running top-level code. In our "
"example this is the ``start`` module which runs line by line and imports "
"``namely``. In turn, ``namely`` imports ``__main__`` (which is really "
"``start``). That's an import cycle! Fortunately, since the partially "
"populated ``__main__`` module is present in :data:`sys.modules`, Python "
"passes that to ``namely``. See :ref:`Special considerations for __main__ "
"<import-dunder-main>` in the import system's reference for details on how "
"this works."
msgstr ""
"Python inserta un módulo ``__main__`` vacío en :data:`sys.modules` al "
"iniciar el intérprete, y lo rellena ejecutando código de nivel superior. En "
"nuestro ejemplo, se trata del módulo ``start``, que se ejecuta línea a línea "
"e importa ``namely``. A su vez, ``namely`` importa ``__main__`` (que en "
"realidad es ``start``). ¡Eso es un ciclo de importación! Afortunadamente, "
"dado que el módulo ``__main__`` parcialmente poblado está presente en :data:"
"`sys.modules`, Python lo pasa a ``namely``. Ver :ref:`Special considerations "
"for __main__ <import-dunder-main>` en la referencia del sistema de "
"importación para más detalles sobre cómo funciona esto."

#: ../../library/__main__.rst:348
msgid ""
"The Python REPL is another example of a \"top-level environment\", so "
"anything defined in the REPL becomes part of the ``__main__`` scope::"
msgstr ""
"El REPL de Python es otro ejemplo de \"entorno de nivel superior\", por lo "
"que cualquier cosa definida en el REPL pasa a formar parte del ámbito "
"``__main__``::"

#: ../../library/__main__.rst:351
msgid ""
">>> import namely\n"
">>> namely.did_user_define_their_name()\n"
"False\n"
">>> namely.print_user_name()\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Define the variable `my_name`!\n"
">>> my_name = 'Jabberwocky'\n"
">>> namely.did_user_define_their_name()\n"
"True\n"
">>> namely.print_user_name()\n"
"Jabberwocky"
msgstr ""
">>> import namely\n"
">>> namely.did_user_define_their_name()\n"
"False\n"
">>> namely.print_user_name()\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Define the variable `my_name`!\n"
">>> my_name = 'Jabberwocky'\n"
">>> namely.did_user_define_their_name()\n"
"True\n"
">>> namely.print_user_name()\n"
"Jabberwocky"

#: ../../library/__main__.rst:364
msgid ""
"Note that in this case the ``__main__`` scope doesn't contain a ``__file__`` "
"attribute as it's interactive."
msgstr ""
"Tener en cuenta que en este caso el ámbito ``__main__`` no contiene un "
"atributo ``__file__`` ya que es interactivo."

#: ../../library/__main__.rst:367
msgid ""
"The ``__main__`` scope is used in the implementation of :mod:`pdb` and :mod:"
"`rlcompleter`."
msgstr ""
"El ámbito ``__main__`` se utiliza en la aplicación de :mod:`pdb` y :mod:"
"`rlcompleter`."
