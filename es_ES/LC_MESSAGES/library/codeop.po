# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../library/codeop.rst:2
msgid ":mod:`!codeop` --- Compile Python code"
msgstr ":mod:`!codeop` --- Compilar código Python"

#: ../../library/codeop.rst:10
msgid "**Source code:** :source:`Lib/codeop.py`"
msgstr "**Código fuente:** :source:`Lib/codeop.py`"

#: ../../library/codeop.rst:14
msgid ""
"The :mod:`codeop` module provides utilities upon which the Python read-eval-"
"print loop can be emulated, as is done in the :mod:`code` module.  As a "
"result, you probably don't want to use the module directly; if you want to "
"include such a loop in your program you probably want to use the :mod:`code` "
"module instead."
msgstr ""
"El módulo :mod:`codeop` proporciona utilidades sobre las que se puede emular "
"el bucle de lectura-evaluación-impresión de Python, como se hace en el "
"módulo :mod:`code`.  Como resultado, probablemente no quieras usar el módulo "
"directamente; si quieres incluir un bucle de este tipo en tu programa, "
"probablemente quieras usar el módulo :mod:`code` en su lugar."

#: ../../library/codeop.rst:20
msgid "There are two parts to this job:"
msgstr "Este trabajo consta de dos partes:"

#: ../../library/codeop.rst:22
msgid ""
"Being able to tell if a line of input completes a Python statement: in "
"short, telling whether to print '``>>>``' or '``...``' next."
msgstr ""
"Ser capaz de saber si una línea de entrada completa una sentencia Python: en "
"resumen, saber si imprimir '``>>>``' o '``...``' a continuación."

#: ../../library/codeop.rst:25
msgid ""
"Remembering which future statements the user has entered, so subsequent "
"input can be compiled with these in effect."
msgstr ""
"Recordar qué declaraciones futuras ha introducido el usuario, de modo que "
"las entradas posteriores puedan compilarse con éstas en vigor."

#: ../../library/codeop.rst:28
msgid ""
"The :mod:`codeop` module provides a way of doing each of these things, and a "
"way of doing them both."
msgstr ""
"El módulo :mod:`codeop` proporciona una forma de hacer cada una de estas "
"cosas, y una forma de hacer ambas."

#: ../../library/codeop.rst:31
msgid "To do just the former:"
msgstr "Para hacer precisamente lo primero:"

#: ../../library/codeop.rst:35
msgid ""
"Tries to compile *source*, which should be a string of Python code and "
"return a code object if *source* is valid Python code.  In that case, the "
"filename attribute of the code object will be *filename*, which defaults to "
"``'<input>'``.  Returns ``None`` if *source* is *not* valid Python code, but "
"is a prefix of valid Python code."
msgstr ""
"Intenta compilar *fuente*, que debería ser una cadena de código Python y "
"devolver un objeto código si *fuente* es código Python válido.  En ese caso, "
"el atributo filename del objeto de código será *filename*, que por defecto "
"es ``'<input>'``.  Devuelve ``None`` si *fuente* es *no* código Python "
"válido, pero es un prefijo de código Python válido."

#: ../../library/codeop.rst:41
msgid ""
"If there is a problem with *source*, an exception will be raised. :exc:"
"`SyntaxError` is raised if there is invalid Python syntax, and :exc:"
"`OverflowError` or :exc:`ValueError` if there is an invalid literal."
msgstr ""
"Si hay un problema con *source*, se lanzará una excepción. :exc:"
"`SyntaxError` se lanza si hay una sintaxis Python inválida, y :exc:"
"`OverflowError` o :exc:`ValueError` si hay un literal inválido."

#: ../../library/codeop.rst:45
msgid ""
"The *symbol* argument determines whether *source* is compiled as a statement "
"(``'single'``, the default), as a sequence of :term:`statement` (``'exec'``) "
"or as an :term:`expression` (``'eval'``).  Any other value will cause :exc:"
"`ValueError` to be raised."
msgstr ""
"El argumento *symbol* determina si *source* se compila como una sentencia "
"(``'single'``, por defecto), como una secuencia de :term:`statement` "
"(``'exec'``) o como una :term:`expression` (``'eval'``).  Cualquier otro "
"valor provocará la aparición de :exc:`ValueError`."

#: ../../library/codeop.rst:52
msgid ""
"It is possible (but not likely) that the parser stops parsing with a "
"successful outcome before reaching the end of the source; in this case, "
"trailing symbols may be ignored instead of causing an error.  For example, a "
"backslash followed by two newlines may be followed by arbitrary garbage. "
"This will be fixed once the API for the parser is better."
msgstr ""
"Es posible (pero no probable) que el analizador deje de analizar con un "
"resultado satisfactorio antes de llegar al final de la fuente; en este caso, "
"los símbolos finales pueden ser ignorados en lugar de causar un error.  Por "
"ejemplo, una barra invertida seguida de dos nuevas líneas puede ir seguida "
"de basura arbitraria. Esto se arreglará una vez que mejore la API del "
"analizador sintáctico."

#: ../../library/codeop.rst:61
msgid ""
"Instances of this class have :meth:`~object.__call__` methods identical in "
"signature to the built-in function :func:`compile`, but with the difference "
"that if the instance compiles program text containing a :mod:`__future__` "
"statement, the instance 'remembers' and compiles all subsequent program "
"texts with the statement in force."
msgstr ""
"Las instancias de esta clase tienen métodos :meth:`~object.__call__` "
"idénticos en firma a la función incorporada :func:`compile`, pero con la "
"diferencia de que si la instancia compila un texto de programa que contiene "
"una sentencia :mod:`__future__`, la instancia 'recuerda' y compila todos los "
"textos de programa posteriores con la sentencia en vigor."

#: ../../library/codeop.rst:70
msgid ""
"Instances of this class have :meth:`~object.__call__` methods identical in "
"signature to :func:`compile_command`; the difference is that if the instance "
"compiles program text containing a :mod:`__future__` statement, the instance "
"'remembers' and compiles all subsequent program texts with the statement in "
"force."
msgstr ""
"Las instancias de esta clase tienen métodos :meth:`~object.__call__` "
"idénticos en firma a :func:`compile_command`; la diferencia es que si la "
"instancia compila un texto de programa que contiene una sentencia :mod:"
"`__future__`, la instancia 'recuerda' y compila todos los textos de programa "
"posteriores con la sentencia en vigor."
