# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# eulalio barbero espinosa <eulalio@disroot.org>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-25 14:12+0000\n"
"PO-Revision-Date: 2025-09-16 00:01+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../library/configparser.rst:2
msgid ":mod:`!configparser` --- Configuration file parser"
msgstr ""
":mod:`!configparser` --- Analizador sintáctico de archivos de configuración"

#: ../../library/configparser.rst:14
msgid "**Source code:** :source:`Lib/configparser.py`"
msgstr "**Código fuente:** :source:`Lib/configparser.py`"

#: ../../library/configparser.rst:24
msgid ""
"This module provides the :class:`ConfigParser` class which implements a "
"basic configuration language which provides a structure similar to what's "
"found in Microsoft Windows INI files.  You can use this to write Python "
"programs which can be customized by end users easily."
msgstr ""
"Este módulo proporciona la clase :class:`ConfigParser` que implementa un "
"lenguaje de configuración básico que proporciona una estructura similar a la "
"que se encuentra en los archivos INI de Microsoft Windows.  Puedes usar esto "
"para escribir programas Python que pueden ser personalizados por usuarios "
"finales fácilmente."

#: ../../library/configparser.rst:31
msgid ""
"This library does *not* interpret or write the value-type prefixes used in "
"the Windows Registry extended version of INI syntax."
msgstr ""
"Esta biblioteca *no* interpreta ni escribe los prefijos de tipo valor "
"utilizados en la versión extendida del Registro de Windows de la sintaxis "
"INI."

#: ../../library/configparser.rst:36
msgid "Module :mod:`tomllib`"
msgstr "Módulo :mod:`tomllib`"

#: ../../library/configparser.rst:37
msgid ""
"TOML is a well-specified format for application configuration files. It is "
"specifically designed to be an improved version of INI."
msgstr ""
"TOML es un formato bien especificado para archivos de configuración de "
"aplicaciones. Está diseñado específicamente para ser una versión mejorada de "
"INI."

#: ../../library/configparser.rst:40
msgid "Module :mod:`shlex`"
msgstr "Módulo :mod:`shlex`"

#: ../../library/configparser.rst:41
msgid ""
"Support for creating Unix shell-like mini-languages which can also be used "
"for application configuration files."
msgstr ""
"Soporte para crear minilenguajes tipo shell de Unix que también pueden "
"utilizarse para los archivos de configuración de las aplicaciones."

#: ../../library/configparser.rst:44
msgid "Module :mod:`json`"
msgstr "Módulo :mod:`json`"

#: ../../library/configparser.rst:45
msgid ""
"The ``json`` module implements a subset of JavaScript syntax which is "
"sometimes used for configuration, but does not support comments."
msgstr ""
"El módulo ``json`` implementa un subconjunto de sintaxis JavaScript que a "
"veces se utiliza para la configuración, pero no admite comentarios."

#: ../../library/configparser.rst:61
msgid "Quick Start"
msgstr "Inicio rápido"

#: ../../library/configparser.rst:63
msgid "Let's take a very basic configuration file that looks like this:"
msgstr ""
"Tomemos un fichero de configuración muy básico con el siguiente aspecto:"

#: ../../library/configparser.rst:65
msgid ""
"[DEFAULT]\n"
"ServerAliveInterval = 45\n"
"Compression = yes\n"
"CompressionLevel = 9\n"
"ForwardX11 = yes\n"
"\n"
"[forge.example]\n"
"User = hg\n"
"\n"
"[topsecret.server.example]\n"
"Port = 50022\n"
"ForwardX11 = no"
msgstr ""
"[DEFAULT]\n"
"ServerAliveInterval = 45\n"
"Compression = yes\n"
"CompressionLevel = 9\n"
"ForwardX11 = yes\n"
"\n"
"[forge.example]\n"
"User = hg\n"
"\n"
"[topsecret.server.example]\n"
"Port = 50022\n"
"ForwardX11 = no"

#: ../../library/configparser.rst:80
msgid ""
"The structure of INI files is described `in the following section "
"<#supported-ini-file-structure>`_.  Essentially, the file consists of "
"sections, each of which contains keys with values. :mod:`configparser` "
"classes can read and write such files.  Let's start by creating the above "
"configuration file programmatically."
msgstr ""
"La estructura de los ficheros INI se describe `en la siguiente sección "
"<#supported-ini-file-structure>`_.  Esencialmente, el fichero consiste en "
"secciones, cada una de las cuales contiene claves con valores. Las clases :"
"mod:`configparser` pueden leer y escribir tales ficheros.  Empecemos creando "
"el fichero de configuración anterior mediante programación."

#: ../../library/configparser.rst:86
msgid ""
">>> import configparser\n"
">>> config = configparser.ConfigParser()\n"
">>> config['DEFAULT'] = {'ServerAliveInterval': '45',\n"
"...                      'Compression': 'yes',\n"
"...                      'CompressionLevel': '9'}\n"
">>> config['forge.example'] = {}\n"
">>> config['forge.example']['User'] = 'hg'\n"
">>> config['topsecret.server.example'] = {}\n"
">>> topsecret = config['topsecret.server.example']\n"
">>> topsecret['Port'] = '50022'     # mutates the parser\n"
">>> topsecret['ForwardX11'] = 'no'  # same here\n"
">>> config['DEFAULT']['ForwardX11'] = 'yes'\n"
">>> with open('example.ini', 'w') as configfile:\n"
"...   config.write(configfile)\n"
"..."
msgstr ""
">>> import configparser\n"
">>> config = configparser.ConfigParser()\n"
">>> config['DEFAULT'] = {'ServerAliveInterval': '45',\n"
"...                      'Compression': 'yes',\n"
"...                      'CompressionLevel': '9'}\n"
">>> config['forge.example'] = {}\n"
">>> config['forge.example']['User'] = 'hg'\n"
">>> config['topsecret.server.example'] = {}\n"
">>> topsecret = config['topsecret.server.example']\n"
">>> topsecret['Port'] = '50022'     # mutates the parser\n"
">>> topsecret['ForwardX11'] = 'no'  # same here\n"
">>> config['DEFAULT']['ForwardX11'] = 'yes'\n"
">>> with open('example.ini', 'w') as configfile:\n"
"...   config.write(configfile)\n"
"..."

#: ../../library/configparser.rst:104
msgid ""
"As you can see, we can treat a config parser much like a dictionary. There "
"are differences, `outlined later <#mapping-protocol-access>`_, but the "
"behavior is very close to what you would expect from a dictionary."
msgstr ""
"Como puedes ver, podemos tratar un analizador de configuración como un "
"diccionario. Hay diferencias, `resumidas más adelante <#mapping-protocol-"
"access>`_, pero el comportamiento es muy parecido a lo que cabría esperar de "
"un diccionario."

#: ../../library/configparser.rst:108
msgid ""
"Now that we have created and saved a configuration file, let's read it back "
"and explore the data it holds."
msgstr ""
"Ahora que hemos creado y guardado un archivo de configuración, vamos a "
"leerlo y explorar los datos que contiene."

#: ../../library/configparser.rst:111
msgid ""
">>> config = configparser.ConfigParser()\n"
">>> config.sections()\n"
"[]\n"
">>> config.read('example.ini')\n"
"['example.ini']\n"
">>> config.sections()\n"
"['forge.example', 'topsecret.server.example']\n"
">>> 'forge.example' in config\n"
"True\n"
">>> 'python.org' in config\n"
"False\n"
">>> config['forge.example']['User']\n"
"'hg'\n"
">>> config['DEFAULT']['Compression']\n"
"'yes'\n"
">>> topsecret = config['topsecret.server.example']\n"
">>> topsecret['ForwardX11']\n"
"'no'\n"
">>> topsecret['Port']\n"
"'50022'\n"
">>> for key in config['forge.example']:\n"
"...     print(key)\n"
"user\n"
"compressionlevel\n"
"serveraliveinterval\n"
"compression\n"
"forwardx11\n"
">>> config['forge.example']['ForwardX11']\n"
"'yes'"
msgstr ""
">>> config = configparser.ConfigParser()\n"
">>> config.sections()\n"
"[]\n"
">>> config.read('example.ini')\n"
"['example.ini']\n"
">>> config.sections()\n"
"['forge.example', 'topsecret.server.example']\n"
">>> 'forge.example' in config\n"
"True\n"
">>> 'python.org' in config\n"
"False\n"
">>> config['forge.example']['User']\n"
"'hg'\n"
">>> config['DEFAULT']['Compression']\n"
"'yes'\n"
">>> topsecret = config['topsecret.server.example']\n"
">>> topsecret['ForwardX11']\n"
"'no'\n"
">>> topsecret['Port']\n"
"'50022'\n"
">>> for key in config['forge.example']:\n"
"...     print(key)\n"
"user\n"
"compressionlevel\n"
"serveraliveinterval\n"
"compression\n"
"forwardx11\n"
">>> config['forge.example']['ForwardX11']\n"
"'yes'"

#: ../../library/configparser.rst:143
msgid ""
"As we can see above, the API is pretty straightforward.  The only bit of "
"magic involves the ``DEFAULT`` section which provides default values for all "
"other sections [1]_.  Note also that keys in sections are case-insensitive "
"and stored in lowercase [1]_."
msgstr ""
"Como vemos, la API es bastante sencilla.  La única parte mágica tiene que "
"ver con la sección ``DEFAULT``, que proporciona valores por defecto para "
"todas las demás secciones [1]_.  Ten en cuenta también que las claves de las "
"secciones no distinguen entre mayúsculas y minúsculas y se almacenan en "
"minúsculas [1]_."

#: ../../library/configparser.rst:148 ../../library/configparser.rst:1003
msgid ""
"It is possible to read several configurations into a single :class:"
"`ConfigParser`, where the most recently added configuration has the highest "
"priority. Any conflicting keys are taken from the more recent configuration "
"while the previously existing keys are retained. The example below reads in "
"an ``override.ini`` file, which will override any conflicting keys from the "
"``example.ini`` file."
msgstr ""
"Es posible leer varias configuraciones en un único :class:`ConfigParser`, "
"donde la configuración añadida más recientemente tiene la máxima prioridad. "
"Cualquier clave conflictiva se toma de la configuración más reciente "
"mientras que las claves existentes previamente se mantienen. En el ejemplo "
"siguiente se lee un archivo ``override.ini``, que anulará cualquier clave "
"conflictiva del archivo ``example.ini``."

#: ../../library/configparser.rst:155 ../../library/configparser.rst:1010
msgid ""
"[DEFAULT]\n"
"ServerAliveInterval = -1"
msgstr ""
"[DEFAULT]\n"
"ServerAliveInterval = -1"

#: ../../library/configparser.rst:160 ../../library/configparser.rst:1015
msgid ""
">>> config_override = configparser.ConfigParser()\n"
">>> config_override['DEFAULT'] = {'ServerAliveInterval': '-1'}\n"
">>> with open('override.ini', 'w') as configfile:\n"
"...     config_override.write(configfile)\n"
"...\n"
">>> config_override = configparser.ConfigParser()\n"
">>> config_override.read(['example.ini', 'override.ini'])\n"
"['example.ini', 'override.ini']\n"
">>> print(config_override.get('DEFAULT', 'ServerAliveInterval'))\n"
"-1"
msgstr ""
">>> config_override = configparser.ConfigParser()\n"
">>> config_override['DEFAULT'] = {'ServerAliveInterval': '-1'}\n"
">>> with open('override.ini', 'w') as configfile:\n"
"...     config_override.write(configfile)\n"
"...\n"
">>> config_override = configparser.ConfigParser()\n"
">>> config_override.read(['example.ini', 'override.ini'])\n"
"['example.ini', 'override.ini']\n"
">>> print(config_override.get('DEFAULT', 'ServerAliveInterval'))\n"
"-1"

#: ../../library/configparser.rst:174
msgid ""
"This behaviour is equivalent to a :meth:`ConfigParser.read` call with "
"several files passed to the *filenames* parameter."
msgstr ""
"Este comportamiento equivale a una llamada a :meth:`ConfigParser.read` con "
"varios archivos pasados al parámetro *filenames*."

#: ../../library/configparser.rst:179
msgid "Supported Datatypes"
msgstr "Tipos de datos admitidos"

#: ../../library/configparser.rst:181
msgid ""
"Config parsers do not guess datatypes of values in configuration files, "
"always storing them internally as strings.  This means that if you need "
"other datatypes, you should convert on your own:"
msgstr ""
"Los analizadores sintácticos de configuración no adivinan los tipos de datos "
"de los valores en los archivos de configuración, almacenándolos siempre "
"internamente como cadenas.  Esto significa que si necesitas otros tipos de "
"datos, debes convertirlos por tu cuenta:"

#: ../../library/configparser.rst:185
msgid ""
">>> int(topsecret['Port'])\n"
"50022\n"
">>> float(topsecret['CompressionLevel'])\n"
"9.0"
msgstr ""
">>> int(topsecret['Port'])\n"
"50022\n"
">>> float(topsecret['CompressionLevel'])\n"
"9.0"

#: ../../library/configparser.rst:192
msgid ""
"Since this task is so common, config parsers provide a range of handy getter "
"methods to handle integers, floats and booleans.  The last one is the most "
"interesting because simply passing the value to ``bool()`` would do no good "
"since ``bool('False')`` is still ``True``.  This is why config parsers also "
"provide :meth:`~ConfigParser.getboolean`.  This method is case-insensitive "
"and recognizes Boolean values from ``'yes'``/``'no'``, ``'on'``/``'off'``, "
"``'true'``/``'false'`` and ``'1'``/``'0'`` [1]_.  For example:"
msgstr ""
"Dado que esta tarea es tan común, los analizadores de configuraciones "
"proporcionan una serie de prácticos métodos de obtención para manejar "
"enteros, flotantes y booleanos.  Este último es el más interesante, porque "
"pasar el valor a ``bool()`` no serviría de nada, ya que ``bool('False')`` "
"sigue siendo ``True``.  Esta es la razón por la que los analizadores de "
"configuración también proporcionan :meth:`~ConfigParser.getboolean`.  Este "
"método no distingue entre mayúsculas y minúsculas y reconoce los valores "
"booleanos de ``'yes'``/``'no'``, ``'on'``/``'off'``, ``'true'``/``'false'`` "
"y ``'1'``/``'0'`` [1]_ .  Por ejemplo:"

#: ../../library/configparser.rst:200
msgid ""
">>> topsecret.getboolean('ForwardX11')\n"
"False\n"
">>> config['forge.example'].getboolean('ForwardX11')\n"
"True\n"
">>> config.getboolean('forge.example', 'Compression')\n"
"True"
msgstr ""
">>> topsecret.getboolean('ForwardX11')\n"
"False\n"
">>> config['forge.example'].getboolean('ForwardX11')\n"
"True\n"
">>> config.getboolean('forge.example', 'Compression')\n"
"True"

#: ../../library/configparser.rst:209
msgid ""
"Apart from :meth:`~ConfigParser.getboolean`, config parsers also provide "
"equivalent :meth:`~ConfigParser.getint` and :meth:`~ConfigParser.getfloat` "
"methods.  You can register your own converters and customize the provided "
"ones. [1]_"
msgstr ""
"Aparte de :meth:`~ConfigParser.getboolean`, los analizadores sintácticos "
"config también proporcionan métodos equivalentes :meth:`~ConfigParser."
"getint` y :meth:`~ConfigParser.getfloat`.  Puedes registrar tus propios "
"conversores y personalizar los proporcionados. [1]_"

#: ../../library/configparser.rst:215
msgid "Fallback Values"
msgstr "Valores de reserva"

#: ../../library/configparser.rst:217
msgid ""
"As with a dictionary, you can use a section's :meth:`~ConfigParser.get` "
"method to provide fallback values:"
msgstr ""
"Al igual que con un diccionario, puede utilizar el método :meth:"
"`~ConfigParser.get` de una sección para proporcionar valores alternativos:"

#: ../../library/configparser.rst:220
msgid ""
">>> topsecret.get('Port')\n"
"'50022'\n"
">>> topsecret.get('CompressionLevel')\n"
"'9'\n"
">>> topsecret.get('Cipher')\n"
">>> topsecret.get('Cipher', '3des-cbc')\n"
"'3des-cbc'"
msgstr ""
">>> topsecret.get('Port')\n"
"'50022'\n"
">>> topsecret.get('CompressionLevel')\n"
"'9'\n"
">>> topsecret.get('Cipher')\n"
">>> topsecret.get('Cipher', '3des-cbc')\n"
"'3des-cbc'"

#: ../../library/configparser.rst:230
msgid ""
"Please note that default values have precedence over fallback values. For "
"instance, in our example the ``'CompressionLevel'`` key was specified only "
"in the ``'DEFAULT'`` section.  If we try to get it from the section "
"``'topsecret.server.example'``, we will always get the default, even if we "
"specify a fallback:"
msgstr ""
"Tenga en cuenta que los valores por defecto tienen prioridad sobre los "
"valores alternativos. Por ejemplo, en nuestro ejemplo la clave "
"``'CompressionLevel'`` se especificó sólo en la sección ``'DEFAULT'``.  Si "
"intentamos obtenerla de la sección ``'topsecret.server.example'``, siempre "
"obtendremos el valor por defecto, aunque especifiquemos un valor alternativo:"

#: ../../library/configparser.rst:236
msgid ""
">>> topsecret.get('CompressionLevel', '3')\n"
"'9'"
msgstr ""
">>> topsecret.get('CompressionLevel', '3')\n"
"'9'"

#: ../../library/configparser.rst:241
msgid ""
"One more thing to be aware of is that the parser-level :meth:`~ConfigParser."
"get` method provides a custom, more complex interface, maintained for "
"backwards compatibility.  When using this method, a fallback value can be "
"provided via the ``fallback`` keyword-only argument:"
msgstr ""
"Otra cosa que hay que tener en cuenta es que el método :meth:`~ConfigParser."
"get` a nivel de analizador proporciona una interfaz personalizada más "
"compleja, que se mantiene por compatibilidad con versiones anteriores.  "
"Cuando se utiliza este método, se puede proporcionar un valor alternativo a "
"través del argumento de sólo palabra clave ``fallback``:"

#: ../../library/configparser.rst:246
msgid ""
">>> config.get('forge.example', 'monster',\n"
"...            fallback='No such things as monsters')\n"
"'No such things as monsters'"
msgstr ""
">>> config.get('forge.example', 'monstruo',\n"
"... fallback='No existen los monstruos')\n"
"'No existen los monstruos'"

#: ../../library/configparser.rst:252
msgid ""
"The same ``fallback`` argument can be used with the :meth:`~ConfigParser."
"getint`, :meth:`~ConfigParser.getfloat` and :meth:`~ConfigParser.getboolean` "
"methods, for example:"
msgstr ""
"El mismo argumento ``fallback`` puede utilizarse con los métodos :meth:"
"`~ConfigParser.getint`, :meth:`~ConfigParser.getfloat` y :meth:"
"`~ConfigParser.getboolean`, por ejemplo:"

#: ../../library/configparser.rst:256
msgid ""
">>> 'BatchMode' in topsecret\n"
"False\n"
">>> topsecret.getboolean('BatchMode', fallback=True)\n"
"True\n"
">>> config['DEFAULT']['BatchMode'] = 'no'\n"
">>> topsecret.getboolean('BatchMode', fallback=True)\n"
"False"
msgstr ""
">>> 'BatchMode' in topsecret\n"
"False\n"
">>> topsecret.getboolean('BatchMode', fallback=True)\n"
"True\n"
">>> config['DEFAULT']['BatchMode'] = 'no'\n"
">>> topsecret.getboolean('BatchMode', fallback=True)\n"
"False"

#: ../../library/configparser.rst:268
msgid "Supported INI File Structure"
msgstr "Estructura de archivos INI compatibles"

#: ../../library/configparser.rst:270
msgid ""
"A configuration file consists of sections, each led by a ``[section]`` "
"header, followed by key/value entries separated by a specific string (``=`` "
"or ``:`` by default [1]_).  By default, section names are case sensitive but "
"keys are not [1]_.  Leading and trailing whitespace is removed from keys and "
"values. Values can be omitted if the parser is configured to allow it [1]_, "
"in which case the key/value delimiter may also be left out.  Values can also "
"span multiple lines, as long as they are indented deeper than the first line "
"of the value.  Depending on the parser's mode, blank lines may be treated as "
"parts of multiline values or ignored."
msgstr ""
"Un archivo de configuración consta de secciones, cada una encabezada por una "
"cabecera ``[section]``, seguida de entradas clave/valor separadas por una "
"cadena específica (``=`` o ``:`` por defecto [1]_).  Por defecto, los "
"nombres de las secciones distinguen entre mayúsculas y minúsculas, pero las "
"claves no [1]_.  Los espacios en blanco iniciales y finales se eliminan de "
"las claves y los valores. Los valores pueden omitirse si el analizador "
"sintáctico está configurado para permitirlo [1]_, en cuyo caso también puede "
"omitirse el delimitador clave/valor.  Los valores también pueden abarcar "
"varias líneas, siempre que tengan una sangría más profunda que la primera "
"línea del valor.  Dependiendo del modo del analizador sintáctico, las líneas "
"en blanco pueden tratarse como partes de valores multilínea o ignorarse."

#: ../../library/configparser.rst:280
msgid ""
"By default, a valid section name can be any string that does not contain '\\"
"\\n'. To change this, see :attr:`ConfigParser.SECTCRE`."
msgstr ""
"Por defecto, un nombre de sección válido puede ser cualquier cadena que no "
"contenga '\\\\n'. Para cambiar esto, consulte :attr:`ConfigParser.SECTCRE`."

#: ../../library/configparser.rst:283
msgid ""
"The first section name may be omitted if the parser is configured to allow "
"an unnamed top level section with ``allow_unnamed_section=True``. In this "
"case, the keys/values may be retrieved by :const:`UNNAMED_SECTION` as in "
"``config[UNNAMED_SECTION]``."
msgstr ""

#: ../../library/configparser.rst:288
msgid ""
"Configuration files may include comments, prefixed by specific characters "
"(``#`` and ``;`` by default [1]_).  Comments may appear on their own on an "
"otherwise empty line, possibly indented. [1]_"
msgstr ""
"Los archivos de configuración pueden incluir comentarios, precedidos por "
"caracteres específicos (``#`` y ``;`` por defecto [1]_).  Los comentarios "
"pueden aparecer solos en una línea vacía, posiblemente con sangría. [1]_"

#: ../../library/configparser.rst:292 ../../library/configparser.rst:376
msgid "For example:"
msgstr "Por ejemplo:"

#: ../../library/configparser.rst:294
msgid ""
"[Simple Values]\n"
"key=value\n"
"spaces in keys=allowed\n"
"spaces in values=allowed as well\n"
"spaces around the delimiter = obviously\n"
"you can also use : to delimit keys from values\n"
"\n"
"[All Values Are Strings]\n"
"values like this: 1000000\n"
"or this: 3.14159265359\n"
"are they treated as numbers? : no\n"
"integers, floats and booleans are held as: strings\n"
"can use the API to get converted values directly: true\n"
"\n"
"[Multiline Values]\n"
"chorus: I'm a lumberjack, and I'm okay\n"
"    I sleep all night and I work all day\n"
"\n"
"[No Values]\n"
"key_without_value\n"
"empty string value here =\n"
"\n"
"[You can use comments]\n"
"# like this\n"
"; or this\n"
"\n"
"# By default only in an empty line.\n"
"# Inline comments can be harmful because they prevent users\n"
"# from using the delimiting characters as parts of values.\n"
"# That being said, this can be customized.\n"
"\n"
"    [Sections Can Be Indented]\n"
"        can_values_be_as_well = True\n"
"        does_that_mean_anything_special = False\n"
"        purpose = formatting for readability\n"
"        multiline_values = are\n"
"            handled just fine as\n"
"            long as they are indented\n"
"            deeper than the first line\n"
"            of a value\n"
"        # Did I mention we can indent comments, too?"
msgstr ""
"[Simple Values]\n"
"key=value\n"
"spaces in keys=allowed\n"
"spaces in values=allowed as well\n"
"spaces around the delimiter = obviously\n"
"you can also use : to delimit keys from values\n"
"\n"
"[All Values Are Strings]\n"
"values like this: 1000000\n"
"or this: 3.14159265359\n"
"are they treated as numbers? : no\n"
"integers, floats and booleans are held as: strings\n"
"can use the API to get converted values directly: true\n"
"\n"
"[Multiline Values]\n"
"chorus: I'm a lumberjack, and I'm okay\n"
"    I sleep all night and I work all day\n"
"\n"
"[No Values]\n"
"key_without_value\n"
"empty string value here =\n"
"\n"
"[You can use comments]\n"
"# así\n"
"; o así\n"
"\n"
"# Por defecto solo en una línea vacía.\n"
"# Los comentarios en línea pueden ser perjudiciales porque impiden a los "
"usuarios\n"
"# de usar los caracteres delimitadores como partes de valores.\n"
"# Dicho esto, esto se puede personalizar.\n"
"\n"
"    [Sections Can Be Indented]\n"
"        can_values_be_as_well = True\n"
"        does_that_mean_anything_special = False\n"
"        purpose = formatting for readability\n"
"        multiline_values = are\n"
"            handled just fine as\n"
"            long as they are indented\n"
"            deeper than the first line\n"
"            of a value\n"
"        # ¿Mencioné que también podemos sangrar comentarios?"

#: ../../library/configparser.rst:342
msgid "Unnamed Sections"
msgstr ""

#: ../../library/configparser.rst:344
msgid ""
"The name of the first section (or unique) may be omitted and values "
"retrieved by the :const:`UNNAMED_SECTION` attribute."
msgstr ""

#: ../../library/configparser.rst:347
msgid ""
">>> config = \"\"\"\n"
"... option = value\n"
"...\n"
"... [  Section 2  ]\n"
"... another = val\n"
"... \"\"\"\n"
">>> unnamed = configparser.ConfigParser(allow_unnamed_section=True)\n"
">>> unnamed.read_string(config)\n"
">>> unnamed.get(configparser.UNNAMED_SECTION, 'option')\n"
"'value'"
msgstr ""

#: ../../library/configparser.rst:361
msgid "Interpolation of values"
msgstr "Interpolación de valores"

#: ../../library/configparser.rst:363
msgid ""
"On top of the core functionality, :class:`ConfigParser` supports "
"interpolation.  This means values can be preprocessed before returning them "
"from ``get()`` calls."
msgstr ""
"Además de la funcionalidad básica, :class:`ConfigParser` admite "
"interpolación.  Esto significa que los valores pueden preprocesarse antes de "
"ser devueltos por las llamadas a ``get()``."

#: ../../library/configparser.rst:371
msgid ""
"The default implementation used by :class:`ConfigParser`.  It enables values "
"to contain format strings which refer to other values in the same section, "
"or values in the special default section [1]_.  Additional default values "
"can be provided on initialization."
msgstr ""
"La implementación por defecto utilizada por :class:`ConfigParser`.  Permite "
"que los valores contengan cadenas de formato que hagan referencia a otros "
"valores de la misma sección o a valores de la sección especial por defecto "
"[1]_.  Se pueden proporcionar valores por defecto adicionales en la "
"inicialización."

#: ../../library/configparser.rst:378
msgid ""
"[Paths]\n"
"home_dir: /Users\n"
"my_dir: %(home_dir)s/lumberjack\n"
"my_pictures: %(my_dir)s/Pictures\n"
"\n"
"[Escape]\n"
"# use a %% to escape the % sign (% is the only character that needs to be "
"escaped):\n"
"gain: 80%%"
msgstr ""
"[Paths]\n"
"home_dir: /Users\n"
"my_dir: %(home_dir)s/lumberjack\n"
"my_pictures: %(my_dir)s/Pictures\n"
"\n"
"[Escape]\n"
"# use un %% para escapar el signo % (% es el único caracter que necesita ser "
"escapado):\n"
"ganancia: 80%%"

#: ../../library/configparser.rst:389
msgid ""
"In the example above, :class:`ConfigParser` with *interpolation* set to "
"``BasicInterpolation()`` would resolve ``%(home_dir)s`` to the value of "
"``home_dir`` (``/Users`` in this case).  ``%(my_dir)s`` in effect would "
"resolve to ``/Users/lumberjack``.  All interpolations are done on demand so "
"keys used in the chain of references do not have to be specified in any "
"specific order in the configuration file."
msgstr ""
"En el ejemplo anterior, :class:`ConfigParser` con *interpolación* "
"establecida en ``BasicInterpolation()`` resolvería ``%(home_dir)s`` al valor "
"de ``home_dir`` (``/Users`` en este caso). ``%(my_dir)s`` en efecto "
"resolvería a ``/Users/lumberjack``.  Todas las interpolaciones se realizan "
"bajo demanda, por lo que las claves utilizadas en la cadena de referencias "
"no tienen que especificarse en ningún orden concreto en el archivo de "
"configuración."

#: ../../library/configparser.rst:396
msgid ""
"With ``interpolation`` set to ``None``, the parser would simply return "
"``%(my_dir)s/Pictures`` as the value of ``my_pictures`` and ``%(home_dir)s/"
"lumberjack`` as the value of ``my_dir``."
msgstr ""
"Con ``interpolation`` establecido en ``None``, el analizador sintáctico "
"simplemente devolvería ``%(my_dir)s/Pictures`` como valor de ``my_pictures`` "
"y ``%(home_dir)s/lumberjack`` como valor de ``my_dir``."

#: ../../library/configparser.rst:404
msgid ""
"An alternative handler for interpolation which implements a more advanced "
"syntax, used for instance in ``zc.buildout``.  Extended interpolation is "
"using ``${section:option}`` to denote a value from a foreign section. "
"Interpolation can span multiple levels.  For convenience, if the ``section:"
"`` part is omitted, interpolation defaults to the current section (and "
"possibly the default values from the special section)."
msgstr ""
"Un manejador alternativo para la interpolación que implementa una sintaxis "
"más avanzada, utilizada por ejemplo en ``zc.buildout``.  La interpolación "
"ampliada consiste en utilizar ``${section:option}`` para denotar un valor de "
"una sección ajena. La interpolación puede abarcar varios niveles.  Por "
"comodidad, si se omite la parte ``section:``, la interpolación se realiza "
"por defecto en la sección actual (y posiblemente en los valores por defecto "
"de la sección especial)."

#: ../../library/configparser.rst:411
msgid ""
"For example, the configuration specified above with basic interpolation, "
"would look like this with extended interpolation:"
msgstr ""
"Por ejemplo, la configuración especificada anteriormente con interpolación "
"básica, tendría este aspecto con interpolación ampliada:"

#: ../../library/configparser.rst:414
msgid ""
"[Paths]\n"
"home_dir: /Users\n"
"my_dir: ${home_dir}/lumberjack\n"
"my_pictures: ${my_dir}/Pictures\n"
"\n"
"[Escape]\n"
"# use a $$ to escape the $ sign ($ is the only character that needs to be "
"escaped):\n"
"cost: $$80"
msgstr ""
"[Paths]\n"
"home_dir: /Users\n"
"my_dir: ${home_dir}/lumberjack\n"
"my_pictures: ${my_dir}/Pictures\n"
"\n"
"[Escape]\n"
"# use un $$ para escapar el signo $ ($ es el único carácter que necesita ser "
"escapado):\n"
"coste: $$80"

#: ../../library/configparser.rst:425
msgid "Values from other sections can be fetched as well:"
msgstr "También se pueden obtener valores de otras secciones:"

#: ../../library/configparser.rst:427
msgid ""
"[Common]\n"
"home_dir: /Users\n"
"library_dir: /Library\n"
"system_dir: /System\n"
"macports_dir: /opt/local\n"
"\n"
"[Frameworks]\n"
"Python: 3.2\n"
"path: ${Common:system_dir}/Library/Frameworks/\n"
"\n"
"[Arthur]\n"
"nickname: Two Sheds\n"
"last_name: Jackson\n"
"my_dir: ${Common:home_dir}/twosheds\n"
"my_pictures: ${my_dir}/Pictures\n"
"python_dir: ${Frameworks:path}/Python/Versions/${Frameworks:Python}"
msgstr ""
"[Common]\n"
"home_dir: /Users\n"
"library_dir: /Library\n"
"system_dir: /System\n"
"macports_dir: /opt/local\n"
"\n"
"[Frameworks]\n"
"Python: 3.2\n"
"path: ${Common:system_dir}/Library/Frameworks/\n"
"\n"
"[Arthur]\n"
"nickname: Two Sheds\n"
"last_name: Jackson\n"
"my_dir: ${Common:home_dir}/twosheds\n"
"my_pictures: ${my_dir}/Pictures\n"
"python_dir: ${Frameworks:path}/Python/Versions/${Frameworks:Python}"

#: ../../library/configparser.rst:447
msgid "Mapping Protocol Access"
msgstr "Asignación de protocolos de acceso"

#: ../../library/configparser.rst:451
msgid ""
"Mapping protocol access is a generic name for functionality that enables "
"using custom objects as if they were dictionaries.  In case of :mod:"
"`configparser`, the mapping interface implementation is using the "
"``parser['section']['option']`` notation."
msgstr ""
"El acceso al protocolo de mapeo es un nombre genérico para la funcionalidad "
"que permite utilizar objetos personalizados como si fueran diccionarios.  En "
"el caso de :mod:`configparser`, la implementación de la interfaz de mapeo "
"utiliza la notación ``parser['section']['option']``."

#: ../../library/configparser.rst:456
msgid ""
"``parser['section']`` in particular returns a proxy for the section's data "
"in the parser.  This means that the values are not copied but they are taken "
"from the original parser on demand.  What's even more important is that when "
"values are changed on a section proxy, they are actually mutated in the "
"original parser."
msgstr ""
"``parser['section']`` en particular, devuelve un proxy para los datos de la "
"sección en el analizador sintáctico.  Esto significa que los valores no se "
"copian, sino que se toman del analizador sintáctico original bajo demanda.  "
"Lo que es aún más importante es que cuando los valores se cambian en un "
"proxy de sección, en realidad se mutan en el analizador sintáctico original."

#: ../../library/configparser.rst:462
msgid ""
":mod:`configparser` objects behave as close to actual dictionaries as "
"possible. The mapping interface is complete and adheres to the :class:"
"`~collections.abc.MutableMapping` ABC. However, there are a few differences "
"that should be taken into account:"
msgstr ""
":mod:`configparser` se comportan de la forma más parecida posible a los "
"diccionarios reales. La interfaz de mapeo es completa y se ciñe al ABC de :"
"class:`~collections.abc.MutableMapping`. Sin embargo, hay algunas "
"diferencias que deben tenerse en cuenta:"

#: ../../library/configparser.rst:467
msgid ""
"By default, all keys in sections are accessible in a case-insensitive manner "
"[1]_.  E.g. ``for option in parser[\"section\"]`` yields only "
"``optionxform``'ed option key names.  This means lowercased keys by "
"default.  At the same time, for a section that holds the key ``'a'``, both "
"expressions return ``True``::"
msgstr ""
"Por defecto, todas las claves de las secciones son accesibles sin distinción "
"entre mayúsculas y minúsculas [1]_.  Por ejemplo, ``for option in "
"parser[\"section\"]`` sólo muestra los nombres de las claves de opción de "
"``optionxform``.  Esto significa que, por defecto, las claves se escriben en "
"minúsculas.  Al mismo tiempo, para una sección que contiene la clave "
"``'a'``, ambas expresiones devuelven ``True``::"

#: ../../library/configparser.rst:472
msgid ""
"\"a\" in parser[\"section\"]\n"
"\"A\" in parser[\"section\"]"
msgstr ""
"\"a\" in parser[\"section\"]\n"
"\"A\" in parser[\"section\"]"

#: ../../library/configparser.rst:475
msgid ""
"All sections include ``DEFAULTSECT`` values as well which means that ``."
"clear()`` on a section may not leave the section visibly empty.  This is "
"because default values cannot be deleted from the section (because "
"technically they are not there).  If they are overridden in the section, "
"deleting causes the default value to be visible again.  Trying to delete a "
"default value causes a :exc:`KeyError`."
msgstr ""
"Todas las secciones incluyen también valores ``DEFAULTSECT``, lo que "
"significa que ``.clear()`` en una sección no puede dejar la sección "
"visiblemente vacía.  Esto se debe a que los valores por defecto no pueden "
"borrarse de la sección (porque técnicamente no están ahí).  Si se anulan en "
"la sección, al borrarlos el valor por defecto vuelve a ser visible.  Si se "
"intenta eliminar un valor por defecto, se produce un error en :exc:"
"`KeyError`."

#: ../../library/configparser.rst:482
msgid "``DEFAULTSECT`` cannot be removed from the parser:"
msgstr "``DEFAULTSECT`` no puede eliminarse del analizador sintáctico:"

#: ../../library/configparser.rst:484
msgid "trying to delete it raises :exc:`ValueError`,"
msgstr "al intentar borrarlo aparece :exc:`ValueError`,"

#: ../../library/configparser.rst:486
msgid "``parser.clear()`` leaves it intact,"
msgstr "``parser.clear()`` lo deja intacto,"

#: ../../library/configparser.rst:488
msgid "``parser.popitem()`` never returns it."
msgstr "``parser.popitem()`` nunca lo devuelve."

#: ../../library/configparser.rst:490
msgid ""
"``parser.get(section, option, **kwargs)`` - the second argument is **not** a "
"fallback value.  Note however that the section-level ``get()`` methods are "
"compatible both with the mapping protocol and the classic configparser API."
msgstr ""
"``parser.get(section, option, **kwargs)`` - el segundo argumento **no** es "
"un valor fallback.  Tenga en cuenta, no obstante, que los métodos ``get()`` "
"a nivel de sección son compatibles tanto con el protocolo de mapeo como con "
"la API configparser clásica."

#: ../../library/configparser.rst:494
msgid ""
"``parser.items()`` is compatible with the mapping protocol (returns a list "
"of *section_name*, *section_proxy* pairs including the DEFAULTSECT).  "
"However, this method can also be invoked with arguments: ``parser."
"items(section, raw, vars)``.  The latter call returns a list of *option*, "
"*value* pairs for a specified ``section``, with all interpolations expanded "
"(unless ``raw=True`` is provided)."
msgstr ""
"``parser.items()`` es compatible con el protocolo de mapeo (devuelve una "
"lista de pares *section_name*, *section_proxy* incluyendo el DEFAULTSECT).  "
"Sin embargo, este método también puede invocarse con argumentos: ``parser."
"items(section, raw, vars)``.  Esta última llamada devuelve una lista de "
"pares *option*, *value* para un ``section`` especificado, con todas las "
"interpolaciones expandidas (a menos que se proporcione ``raw=True`` )."

#: ../../library/configparser.rst:501
msgid ""
"The mapping protocol is implemented on top of the existing legacy API so "
"that subclasses overriding the original interface still should have mappings "
"working as expected."
msgstr ""
"El protocolo de mapeo se implementa sobre la API heredada existente, de modo "
"que las subclases que sobrescriben la interfaz original deberían seguir "
"utilizando los mapeos de la forma esperada."

#: ../../library/configparser.rst:507
msgid "Customizing Parser Behaviour"
msgstr "Personalización del comportamiento del analizador sintáctico"

#: ../../library/configparser.rst:509
msgid ""
"There are nearly as many INI format variants as there are applications using "
"it. :mod:`configparser` goes a long way to provide support for the largest "
"sensible set of INI styles available.  The default functionality is mainly "
"dictated by historical background and it's very likely that you will want to "
"customize some of the features."
msgstr ""
"Existen casi tantas variantes de formato INI como aplicaciones que lo "
"utilizan. :mod:`configparser` hace todo lo posible por ofrecer "
"compatibilidad con el mayor conjunto razonable de estilos INI disponible.  "
"La funcionalidad por defecto está dictada principalmente por antecedentes "
"históricos y es muy probable que quieras personalizar algunas de las "
"características."

#: ../../library/configparser.rst:515
msgid ""
"The most common way to change the way a specific config parser works is to "
"use the :meth:`!__init__` options:"
msgstr ""
"La forma más habitual de cambiar el funcionamiento de un analizador de "
"configuración específico es utilizar las opciones de :meth:`!__init__`:"

#: ../../library/configparser.rst:518
msgid "*defaults*, default value: ``None``"
msgstr "*defaults*, valor por defecto: ``None``"

#: ../../library/configparser.rst:520
msgid ""
"This option accepts a dictionary of key-value pairs which will be initially "
"put in the ``DEFAULT`` section.  This makes for an elegant way to support "
"concise configuration files that don't specify values which are the same as "
"the documented default."
msgstr ""
"Esta opción acepta un diccionario de pares clave-valor que se colocarán "
"inicialmente en la sección ``DEFAULT``.  Es una forma elegante de admitir "
"archivos de configuración concisos que no especifiquen valores iguales a los "
"predeterminados documentados."

#: ../../library/configparser.rst:525
msgid ""
"Hint: if you want to specify default values for a specific section, use :"
"meth:`~ConfigParser.read_dict` before you read the actual file."
msgstr ""
"Sugerencia: si desea especificar valores por defecto para una sección "
"concreta, utilice :meth:`~ConfigParser.read_dict` antes de leer el archivo "
"real."

#: ../../library/configparser.rst:528
msgid "*dict_type*, default value: :class:`dict`"
msgstr "*dict_type*, valor por defecto: :class:`dict`"

#: ../../library/configparser.rst:530
msgid ""
"This option has a major impact on how the mapping protocol will behave and "
"how the written configuration files look.  With the standard dictionary, "
"every section is stored in the order they were added to the parser.  Same "
"goes for options within sections."
msgstr ""
"Esta opción tiene un gran impacto en el comportamiento del protocolo de "
"mapeo y en el aspecto de los archivos de configuración escritos.  Con el "
"diccionario estándar, cada sección se almacena en el orden en que se "
"añadieron al analizador sintáctico.  Lo mismo ocurre con las opciones dentro "
"de las secciones."

#: ../../library/configparser.rst:535
msgid ""
"An alternative dictionary type can be used for example to sort sections and "
"options on write-back."
msgstr ""
"Se puede utilizar un tipo de diccionario alternativo, por ejemplo, para "
"clasificar secciones y opciones en la reescritura."

#: ../../library/configparser.rst:538
msgid ""
"Please note: there are ways to add a set of key-value pairs in a single "
"operation.  When you use a regular dictionary in those operations, the order "
"of the keys will be ordered.  For example:"
msgstr ""
"Atención: hay formas de añadir un conjunto de pares clave-valor en una sola "
"operación.  Cuando utilice un diccionario normal en esas operaciones, el "
"orden de las claves será ordenado.  Por ejemplo:"

#: ../../library/configparser.rst:542
msgid ""
">>> parser = configparser.ConfigParser()\n"
">>> parser.read_dict({'section1': {'key1': 'value1',\n"
"...                                'key2': 'value2',\n"
"...                                'key3': 'value3'},\n"
"...                   'section2': {'keyA': 'valueA',\n"
"...                                'keyB': 'valueB',\n"
"...                                'keyC': 'valueC'},\n"
"...                   'section3': {'foo': 'x',\n"
"...                                'bar': 'y',\n"
"...                                'baz': 'z'}\n"
"... })\n"
">>> parser.sections()\n"
"['section1', 'section2', 'section3']\n"
">>> [option for option in parser['section3']]\n"
"['foo', 'bar', 'baz']"
msgstr ""
">>> parser = configparser.ConfigParser()\n"
">>> parser.read_dict({'section1': {'key1': 'value1',\n"
"...                                'key2': 'value2',\n"
"...                                'key3': 'value3'},\n"
"...                   'section2': {'keyA': 'valueA',\n"
"...                                'keyB': 'valueB',\n"
"...                                'keyC': 'valueC'},\n"
"...                   'section3': {'foo': 'x',\n"
"...                                'bar': 'y',\n"
"...                                'baz': 'z'}\n"
"... })\n"
">>> parser.sections()\n"
"['section1', 'section2', 'section3']\n"
">>> [option for option in parser['section3']]\n"
"['foo', 'bar', 'baz']"

#: ../../library/configparser.rst:560
msgid "*allow_no_value*, default value: ``False``"
msgstr "*allow_no_value*, valor por defecto: ``False``"

#: ../../library/configparser.rst:562
msgid ""
"Some configuration files are known to include settings without values, but "
"which otherwise conform to the syntax supported by :mod:`configparser`.  The "
"*allow_no_value* parameter to the constructor can be used to indicate that "
"such values should be accepted:"
msgstr ""
"Se sabe que algunos archivos de configuración incluyen opciones sin valores, "
"pero que por lo demás se ajustan a la sintaxis admitida por :mod:"
"`configparser`.  El parámetro *allow_no_value* del constructor puede "
"utilizarse para indicar que se deben aceptar dichos valores:"

#: ../../library/configparser.rst:567
msgid ""
">>> import configparser\n"
"\n"
">>> sample_config = \"\"\"\n"
"... [mysqld]\n"
"...   user = mysql\n"
"...   pid-file = /var/run/mysqld/mysqld.pid\n"
"...   skip-external-locking\n"
"...   old_passwords = 1\n"
"...   skip-bdb\n"
"...   # we don't need ACID today\n"
"...   skip-innodb\n"
"... \"\"\"\n"
">>> config = configparser.ConfigParser(allow_no_value=True)\n"
">>> config.read_string(sample_config)\n"
"\n"
">>> # Settings with values are treated as before:\n"
">>> config[\"mysqld\"][\"user\"]\n"
"'mysql'\n"
"\n"
">>> # Settings without values provide None:\n"
">>> config[\"mysqld\"][\"skip-bdb\"]\n"
"\n"
">>> # Settings which aren't specified still raise an error:\n"
">>> config[\"mysqld\"][\"does-not-exist\"]\n"
"Traceback (most recent call last):\n"
"  ...\n"
"KeyError: 'does-not-exist'"
msgstr ""
">>> import configparser\n"
"\n"
">>> sample_config = \"\"\"\n"
"... [mysqld]\n"
"... user = mysql\n"
"... pid-file = /var/run/mysqld/mysqld.pid\n"
"... skip-external-locking\n"
"... old_passwords = 1\n"
"... skip-bdb\n"
"...   # no necesitamos ACID hoy\n"
"... skip-innodb\n"
"... \"\"\"\n"
">>> config = configparser.ConfigParser(allow_no_value=True)\n"
">>> config.read_string(sample_config)\n"
"\n"
">>> # Las configuraciones con valores se tratan como antes:\n"
">>> config[\"mysqld\"][\"user\"]\n"
"'mysql'\n"
"\n"
">>> # Las configuraciones sin valores proporcionan None:\n"
">>> config[\"mysqld\"][\"skip-bdb\"]\n"
"\n"
">>> # Las opciones que no se especifican producen un error:\n"
">>> config[\"mysqld\"][\"does-not-exist\"]\n"
"Traceback (most recent call last):\n"
"  ...\n"
"KeyError: 'does-not-exist'"

#: ../../library/configparser.rst:597
msgid "*delimiters*, default value: ``('=', ':')``"
msgstr "*delimiters*, valor por defecto: ``('=', ':')``"

#: ../../library/configparser.rst:599
msgid ""
"Delimiters are substrings that delimit keys from values within a section. "
"The first occurrence of a delimiting substring on a line is considered a "
"delimiter.  This means values (but not keys) can contain the delimiters."
msgstr ""
"Los delimitadores son subcadenas que delimitan las claves de los valores "
"dentro de una sección. La primera aparición de una subcadena delimitadora en "
"una línea se considera un delimitador.  Esto significa que los valores (pero "
"no las claves) pueden contener delimitadores."

#: ../../library/configparser.rst:603
msgid ""
"See also the *space_around_delimiters* argument to :meth:`ConfigParser."
"write`."
msgstr ""
"Véase también el argumento *space_around_delimiters* de :meth:`ConfigParser."
"write`."

#: ../../library/configparser.rst:606
msgid "*comment_prefixes*, default value: ``('#', ';')``"
msgstr "*comment_prefixes*, valor por defecto: ``('#', ';')``"

#: ../../library/configparser.rst:608
msgid "*inline_comment_prefixes*, default value: ``None``"
msgstr "*inline_comment_prefixes*, valor por defecto: ``None``"

#: ../../library/configparser.rst:610
msgid ""
"Comment prefixes are strings that indicate the start of a valid comment "
"within a config file. *comment_prefixes* are used only on otherwise empty "
"lines (optionally indented) whereas *inline_comment_prefixes* can be used "
"after every valid value (e.g. section names, options and empty lines as "
"well).  By default inline comments are disabled and ``'#'`` and ``';'`` are "
"used as prefixes for whole line comments."
msgstr ""
"Los prefijos de comentario son cadenas que indican el inicio de un "
"comentario válido dentro de un archivo de configuración. Los prefijos "
"*comment_prefixes* se utilizan sólo en líneas vacías (opcionalmente con "
"sangría), mientras que los prefijos *inline_comment_prefixes* pueden "
"utilizarse después de cualquier valor válido (por ejemplo, nombres de "
"sección, opciones y también líneas vacías).  Por defecto, los comentarios en "
"línea están desactivados y se utilizan ``'#'`` y ``';'`` como prefijos para "
"los comentarios de línea completa."

#: ../../library/configparser.rst:617
msgid ""
"In previous versions of :mod:`configparser` behaviour matched "
"``comment_prefixes=('#',';')`` and ``inline_comment_prefixes=(';',)``."
msgstr ""
"En versiones anteriores de :mod:`configparser` el comportamiento coincidía "
"con ``comment_prefixes=('#',';')`` y ``inline_comment_prefixes=(';',)``."

#: ../../library/configparser.rst:621
msgid ""
"Please note that config parsers don't support escaping of comment prefixes "
"so using *inline_comment_prefixes* may prevent users from specifying option "
"values with characters used as comment prefixes.  When in doubt, avoid "
"setting *inline_comment_prefixes*.  In any circumstances, the only way of "
"storing comment prefix characters at the beginning of a line in multiline "
"values is to interpolate the prefix, for example::"
msgstr ""
"Tenga en cuenta que los analizadores de configuración no admiten el escape "
"de prefijos de comentarios, por lo que el uso de *inline_comment_prefixes* "
"puede impedir que los usuarios especifiquen valores de opción con caracteres "
"utilizados como prefijos de comentarios.  En caso de duda, evite configurar "
"*inline_comment_prefixes*.  En cualquier circunstancia, la única forma de "
"almacenar caracteres de prefijo de comentario al principio de una línea en "
"valores multilínea es interpolar el prefijo, por ejemplo::"

#: ../../library/configparser.rst:628
msgid ""
">>> from configparser import ConfigParser, ExtendedInterpolation\n"
">>> parser = ConfigParser(interpolation=ExtendedInterpolation())\n"
">>> # the default BasicInterpolation could be used as well\n"
">>> parser.read_string(\"\"\"\n"
"... [DEFAULT]\n"
"... hash = #\n"
"...\n"
"... [hashes]\n"
"... shebang =\n"
"...   ${hash}!/usr/bin/env python\n"
"...   ${hash} -*- coding: utf-8 -*-\n"
"...\n"
"... extensions =\n"
"...   enabled_extension\n"
"...   another_extension\n"
"...   #disabled_by_comment\n"
"...   yet_another_extension\n"
"...\n"
"... interpolation not necessary = if # is not at line start\n"
"... even in multiline values = line #1\n"
"...   line #2\n"
"...   line #3\n"
"... \"\"\")\n"
">>> print(parser['hashes']['shebang'])\n"
"\n"
"#!/usr/bin/env python\n"
"# -*- coding: utf-8 -*-\n"
">>> print(parser['hashes']['extensions'])\n"
"\n"
"enabled_extension\n"
"another_extension\n"
"yet_another_extension\n"
">>> print(parser['hashes']['interpolation not necessary'])\n"
"if # is not at line start\n"
">>> print(parser['hashes']['even in multiline values'])\n"
"line #1\n"
"line #2\n"
"line #3"
msgstr ""
">>> from configparser import ConfigParser, ExtendedInterpolation\n"
">>> parser = ConfigParser(interpolation=ExtendedInterpolation())\n"
">>> # la interpolación básica predeterminada también podría usarse\n"
">>> parser.read_string(\"\"\"\n"
"... [DEFAULT]\n"
"... hash = #\n"
"...\n"
"... [hashes]\n"
"... shebang =\n"
"...   ${hash}!/usr/bin/env python\n"
"...   ${hash} -*- coding: utf-8 -*-\n"
"...\n"
"... extensions =\n"
"...   enabled_extension\n"
"...   another_extension\n"
"...   #disabled_by_comment\n"
"...   yet_another_extension\n"
"...\n"
"... interpolation not necessary = if # is not at line start\n"
"... even in multiline values = line #1\n"
"...   line #2\n"
"...   line #3\n"
"... \"\"\")\n"
">>> print(parser['hashes']['shebang'])\n"
"\n"
"#!/usr/bin/env python\n"
"# -*- coding: utf-8 -*-\n"
">>> print(parser['hashes']['extensions'])\n"
"\n"
"enabled_extension\n"
"another_extension\n"
"yet_another_extension\n"
">>> print(parser['hashes']['interpolation not necessary'])\n"
"if # no está en el inicio de la línea\n"
">>> print(parser['hashes']['even in multiline values'])\n"
"line #1\n"
"line #2\n"
"line #3"

#: ../../library/configparser.rst:667
msgid "*strict*, default value: ``True``"
msgstr "*estricto*, valor por defecto: ``True``"

#: ../../library/configparser.rst:669
msgid ""
"When set to ``True``, the parser will not allow for any section or option "
"duplicates while reading from a single source (using :meth:`~ConfigParser."
"read_file`, :meth:`~ConfigParser.read_string` or :meth:`~ConfigParser."
"read_dict`).  It is recommended to use strict parsers in new applications."
msgstr ""
"Cuando se establece en ``True``, el analizador sintáctico no permitirá "
"ninguna sección u opción duplicada mientras se lee de una única fuente "
"(utilizando :meth:`~ConfigParser.read_file`, :meth:`~ConfigParser."
"read_string` o :meth:`~ConfigParser.read_dict`).  Se recomienda utilizar "
"analizadores sintácticos estrictos en las nuevas aplicaciones."

#: ../../library/configparser.rst:674
msgid ""
"In previous versions of :mod:`configparser` behaviour matched "
"``strict=False``."
msgstr ""
"En versiones anteriores de :mod:`configparser` el comportamiento coincidía "
"con ``strict=False``."

#: ../../library/configparser.rst:678
msgid "*empty_lines_in_values*, default value: ``True``"
msgstr "*empty_lines_in_values*, valor por defecto: ``True``"

#: ../../library/configparser.rst:680
msgid ""
"In config parsers, values can span multiple lines as long as they are "
"indented more than the key that holds them.  By default parsers also let "
"empty lines to be parts of values.  At the same time, keys can be "
"arbitrarily indented themselves to improve readability.  In consequence, "
"when configuration files get big and complex, it is easy for the user to "
"lose track of the file structure.  Take for instance:"
msgstr ""
"En los analizadores sintácticos de configuración, los valores pueden abarcar "
"varias líneas siempre que tengan una sangría superior a la de la tecla que "
"los contiene.  Por defecto, los analizadores también permiten que las líneas "
"vacías formen parte de los valores.  Al mismo tiempo, las claves pueden "
"tener una sangría arbitraria para mejorar la legibilidad.  En consecuencia, "
"cuando los archivos de configuración se hacen grandes y complejos, es fácil "
"para el usuario perder la pista de la estructura del archivo.  Por ejemplo:"

#: ../../library/configparser.rst:687
msgid ""
"[Section]\n"
"key = multiline\n"
"  value with a gotcha\n"
"\n"
" this = is still a part of the multiline value of 'key'"
msgstr ""
"[Section]\n"
"key = multiline\n"
"  value with a gotcha\n"
"\n"
" this = is still a part of the multiline value of 'key'"

#: ../../library/configparser.rst:695
msgid ""
"This can be especially problematic for the user to see if she's using a "
"proportional font to edit the file.  That is why when your application does "
"not need values with empty lines, you should consider disallowing them.  "
"This will make empty lines split keys every time.  In the example above, it "
"would produce two keys, ``key`` and ``this``."
msgstr ""
"Esto puede ser especialmente problemático para el usuario si está utilizando "
"una fuente proporcional para editar el archivo.  Por eso, cuando su "
"aplicación no necesite valores con líneas vacías, debería considerar "
"desautorizarlos.  Esto hará que las líneas vacías dividan las teclas cada "
"vez.  En el ejemplo anterior, produciría dos claves, ``key`` y ``this``."

#: ../../library/configparser.rst:701
msgid ""
"*default_section*, default value: ``configparser.DEFAULTSECT`` (that is: "
"``\"DEFAULT\"``)"
msgstr ""
"*default_section*, valor por defecto: ``configparser.DEFAULTSECT`` (es "
"decir: ``\"DEFAULT\"``)"

#: ../../library/configparser.rst:704
msgid ""
"The convention of allowing a special section of default values for other "
"sections or interpolation purposes is a powerful concept of this library, "
"letting users create complex declarative configurations.  This section is "
"normally called ``\"DEFAULT\"`` but this can be customized to point to any "
"other valid section name.  Some typical values include: ``\"general\"`` or "
"``\"common\"``.  The name provided is used for recognizing default sections "
"when reading from any source and is used when writing configuration back to "
"a file.  Its current value can be retrieved using the ``parser_instance."
"default_section`` attribute and may be modified at runtime (i.e. to convert "
"files from one format to another)."
msgstr ""
"La convención de permitir una sección especial de valores por defecto para "
"otras secciones o propósitos de interpolación es un concepto poderoso de "
"esta biblioteca, permitiendo a los usuarios crear configuraciones "
"declarativas complejas.  Esta sección se llama normalmente ``\"DEFAULT\"`` "
"pero puede personalizarse para que apunte a cualquier otro nombre de sección "
"válido.  Algunos valores típicos incluyen: ``\"general\"`` o ``\"common\"``. "
"El nombre proporcionado se utiliza para reconocer las secciones por defecto "
"cuando se lee desde cualquier fuente y se utiliza cuando se escribe la "
"configuración de nuevo a un archivo.  Su valor actual puede recuperarse "
"utilizando el atributo ``parser_instance.default_section`` y puede "
"modificarse en tiempo de ejecución (por ejemplo, para convertir archivos de "
"un formato a otro)."

#: ../../library/configparser.rst:715
msgid "*interpolation*, default value: ``configparser.BasicInterpolation``"
msgstr ""
"*interpolation*, valor por defecto: ``configparser.BasicInterpolation``"

#: ../../library/configparser.rst:717
msgid ""
"Interpolation behaviour may be customized by providing a custom handler "
"through the *interpolation* argument. ``None`` can be used to turn off "
"interpolation completely, ``ExtendedInterpolation()`` provides a more "
"advanced variant inspired by ``zc.buildout``.  More on the subject in the "
"`dedicated documentation section <#interpolation-of-values>`_. :class:"
"`RawConfigParser` has a default value of ``None``."
msgstr ""
"El comportamiento de interpolación puede personalizarse proporcionando un "
"manejador personalizado a través del argumento *interpolation*. ``None`` "
"puede utilizarse para desactivar completamente la interpolación, "
"``ExtendedInterpolation()`` proporciona una variante más avanzada inspirada "
"en ``zc.buildout``.  Más información sobre el tema en la sección `dedicada a "
"la documentación <#interpolation-of-values>`_. :class:`RawConfigParser` "
"tiene un valor por defecto de ``None``."

#: ../../library/configparser.rst:724
msgid "*converters*, default value: not set"
msgstr "*converters*, valor por defecto: no establecido"

#: ../../library/configparser.rst:726
msgid ""
"Config parsers provide option value getters that perform type conversion.  "
"By default :meth:`~ConfigParser.getint`, :meth:`~ConfigParser.getfloat`, "
"and :meth:`~ConfigParser.getboolean` are implemented.  Should other getters "
"be desirable, users may define them in a subclass or pass a dictionary where "
"each key is a name of the converter and each value is a callable "
"implementing said conversion.  For instance, passing ``{'decimal': decimal."
"Decimal}`` would add :meth:`!getdecimal` on both the parser object and all "
"section proxies.  In other words, it will be possible to write both "
"``parser_instance.getdecimal('section', 'key', fallback=0)`` and "
"``parser_instance['section'].getdecimal('key', 0)``."
msgstr ""
"Los analizadores sintácticos de configuración proporcionan captadores de "
"valores de opción que realizan la conversión de tipos.  Por defecto se "
"implementan :meth:`~ConfigParser.getint`, :meth:`~ConfigParser.getfloat`, y :"
"meth:`~ConfigParser.getboolean`.  Si se desean otros getters, los usuarios "
"pueden definirlos en una subclase o pasar un diccionario donde cada clave es "
"un nombre del conversor y cada valor es un callable que implementa dicha "
"conversión.  Por ejemplo, pasar ``{'decimal': decimal.Decimal}`` añadiría :"
"meth:`!getdecimal` tanto en el objeto analizador como en todos los proxies "
"de sección.  En otras palabras, será posible escribir tanto "
"``parser_instance.getdecimal('section', 'key', fallback=0)`` como "
"``parser_instance['section'].getdecimal('key', 0)``."

#: ../../library/configparser.rst:737
msgid ""
"If the converter needs to access the state of the parser, it can be "
"implemented as a method on a config parser subclass.  If the name of this "
"method starts with ``get``, it will be available on all section proxies, in "
"the dict-compatible form (see the ``getdecimal()`` example above)."
msgstr ""
"Si el conversor necesita acceder al estado del analizador sintáctico, puede "
"implementarse como un método en una subclase del analizador sintáctico "
"config.  Si el nombre de este método empieza por ``get``, estará disponible "
"en todos los proxies de sección, en la forma compatible con dict (véase el "
"ejemplo anterior de ``getdecimal()`` )."

#: ../../library/configparser.rst:742
msgid ""
"More advanced customization may be achieved by overriding default values of "
"these parser attributes.  The defaults are defined on the classes, so they "
"may be overridden by subclasses or by attribute assignment."
msgstr ""
"Se puede lograr una personalización más avanzada anulando los valores por "
"defecto de estos atributos del analizador sintáctico.  Los valores por "
"defecto se definen en las clases, por lo que pueden ser anulados por "
"subclases o por asignación de atributos."

#: ../../library/configparser.rst:748
msgid ""
"By default when using :meth:`~ConfigParser.getboolean`, config parsers "
"consider the following values ``True``: ``'1'``, ``'yes'``, ``'true'``, "
"``'on'`` and the following values ``False``: ``'0'``, ``'no'``, ``'false'``, "
"``'off'``.  You can override this by specifying a custom dictionary of "
"strings and their Boolean outcomes. For example:"
msgstr ""
"Por defecto, cuando se utiliza :meth:`~ConfigParser.getboolean`, los "
"analizadores sintácticos de configuración consideran los siguientes valores "
"``True``: ``'1'``, ``'yes'``, ``'true'``, ``'on'`` y los siguientes valores "
"``False``: ``'0'``, ``'no'``, ``'false'``, ``'off'``.  Puede anular esto "
"especificando un diccionario personalizado de cadenas y sus resultados "
"booleanos. Por ejemplo"

#: ../../library/configparser.rst:754
msgid ""
">>> custom = configparser.ConfigParser()\n"
">>> custom['section1'] = {'funky': 'nope'}\n"
">>> custom['section1'].getboolean('funky')\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Not a boolean: nope\n"
">>> custom.BOOLEAN_STATES = {'sure': True, 'nope': False}\n"
">>> custom['section1'].getboolean('funky')\n"
"False"
msgstr ""
">>> custom = configparser.ConfigParser()\n"
">>> custom['section1'] = {'funky': 'nope'}\n"
">>> custom['section1'].getboolean('funky')\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Not a boolean: nope\n"
">>> custom.BOOLEAN_STATES = {'sure': True, 'nope': False}\n"
">>> custom['section1'].getboolean('funky')\n"
"False"

#: ../../library/configparser.rst:766
msgid ""
"Other typical Boolean pairs include ``accept``/``reject`` or ``enabled``/"
"``disabled``."
msgstr ""
"Otros pares booleanos típicos son ``accept``/``reject`` o ``enabled``/"
"``disabled``."

#: ../../library/configparser.rst:772
msgid ""
"This method transforms option names on every read, get, or set operation.  "
"The default converts the name to lowercase.  This also means that when a "
"configuration file gets written, all keys will be lowercase.  Override this "
"method if that's unsuitable. For example:"
msgstr ""
"Este método transforma los nombres de las opciones en cada operación de "
"lectura, obtención o establecimiento.  Por defecto convierte el nombre a "
"minúsculas.  Esto también significa que cuando se escribe un fichero de "
"configuración, todas las claves estarán en minúsculas.  Anula este método si "
"no es adecuado. Por ejemplo:"

#: ../../library/configparser.rst:778
msgid ""
">>> config = \"\"\"\n"
"... [Section1]\n"
"... Key = Value\n"
"...\n"
"... [Section2]\n"
"... AnotherKey = Value\n"
"... \"\"\"\n"
">>> typical = configparser.ConfigParser()\n"
">>> typical.read_string(config)\n"
">>> list(typical['Section1'].keys())\n"
"['key']\n"
">>> list(typical['Section2'].keys())\n"
"['anotherkey']\n"
">>> custom = configparser.RawConfigParser()\n"
">>> custom.optionxform = lambda option: option\n"
">>> custom.read_string(config)\n"
">>> list(custom['Section1'].keys())\n"
"['Key']\n"
">>> list(custom['Section2'].keys())\n"
"['AnotherKey']"
msgstr ""
">>> config = \"\"\"\n"
"... [Section1]\n"
"... Key = Value\n"
"...\n"
"... [Section2]\n"
"... AnotherKey = Value\n"
"... \"\"\"\n"
">>> typical = configparser.ConfigParser()\n"
">>> typical.read_string(config)\n"
">>> list(typical['Section1'].keys())\n"
"['key']\n"
">>> list(typical['Section2'].keys())\n"
"['anotherkey']\n"
">>> custom = configparser.RawConfigParser()\n"
">>> custom.optionxform = lambda option: option\n"
">>> custom.read_string(config)\n"
">>> list(custom['Section1'].keys())\n"
"['Key']\n"
">>> list(custom['Section2'].keys())\n"
"['AnotherKey']"

#: ../../library/configparser.rst:802
msgid ""
"The optionxform function transforms option names to a canonical form. This "
"should be an idempotent function: if the name is already in canonical form, "
"it should be returned unchanged."
msgstr ""
"La función optionxform transforma los nombres de las opciones a una forma "
"canónica. Debería ser una función idempotente: si el nombre ya está en forma "
"canónica, debería devolverse sin cambios."

#: ../../library/configparser.rst:809
msgid ""
"A compiled regular expression used to parse section headers.  The default "
"matches ``[section]`` to the name ``\"section\"``.  Whitespace is considered "
"part of the section name, thus ``[  larch  ]`` will be read as a section of "
"name ``\"  larch  \"``.  Override this attribute if that's unsuitable.  For "
"example:"
msgstr ""
"Expresión regular compilada que se utiliza para analizar los encabezados de "
"sección.  Por defecto, ``[section]`` coincide con el nombre "
"``\"section\"``.  Los espacios en blanco se consideran parte del nombre de "
"la sección, por lo que ``[  larch  ]`` se leerá como una sección de nombre "
"``\"  larch  \"``.  Anule este atributo si no es adecuado.  Por ejemplo:"

#: ../../library/configparser.rst:815
msgid ""
">>> import re\n"
">>> config = \"\"\"\n"
"... [Section 1]\n"
"... option = value\n"
"...\n"
"... [  Section 2  ]\n"
"... another = val\n"
"... \"\"\"\n"
">>> typical = configparser.ConfigParser()\n"
">>> typical.read_string(config)\n"
">>> typical.sections()\n"
"['Section 1', '  Section 2  ']\n"
">>> custom = configparser.ConfigParser()\n"
">>> custom.SECTCRE = re.compile(r\"\\[ *(?P<header>[^]]+?) *\\]\")\n"
">>> custom.read_string(config)\n"
">>> custom.sections()\n"
"['Section 1', 'Section 2']"
msgstr ""
">>> import re\n"
">>> config = \"\"\"\n"
"... [Sección 1]\n"
"... option = valor\n"
"...\n"
"... [Sección 2]\n"
"... otro = val\n"
"... \"\"\"\n"
">>> typical = configparser.ConfigParser()\n"
">>> typical.read_string(config)\n"
">>> typical.sections()\n"
"['Sección 1', ' Sección 2 ']\n"
">>> custom = configparser.ConfigParser()\n"
">>> custom.SECTCRE = re.compile(r\"\\[ *(?P<header>[^]]+?) *\\]\")\n"
">>> custom.read_string(config)\n"
">>> custom.sections()\n"
"['Sección 1', 'Sección 2']"

#: ../../library/configparser.rst:837
msgid ""
"While ConfigParser objects also use an ``OPTCRE`` attribute for recognizing "
"option lines, it's not recommended to override it because that would "
"interfere with constructor options *allow_no_value* and *delimiters*."
msgstr ""
"Aunque los objetos ConfigParser también utilizan un atributo ``OPTCRE`` para "
"reconocer las líneas de opción, no se recomienda anularlo porque "
"interferiría con las opciones del constructor *allow_no_value* y "
"*delimiters*."

#: ../../library/configparser.rst:843
msgid "Legacy API Examples"
msgstr "Ejemplos de API heredadas"

#: ../../library/configparser.rst:845
msgid ""
"Mainly because of backwards compatibility concerns, :mod:`configparser` "
"provides also a legacy API with explicit ``get``/``set`` methods.  While "
"there are valid use cases for the methods outlined below, mapping protocol "
"access is preferred for new projects.  The legacy API is at times more "
"advanced, low-level and downright counterintuitive."
msgstr ""
"Principalmente por cuestiones de compatibilidad con versiones anteriores, :"
"mod:`configparser` proporciona también una API heredada con métodos "
"explícitos ``get``/``set``.  Aunque existen casos de uso válidos para los "
"métodos descritos a continuación, se prefiere el acceso al protocolo de "
"mapeo para los nuevos proyectos.  La API heredada es a veces más avanzada, "
"de bajo nivel y francamente contraintuitiva."

#: ../../library/configparser.rst:851
msgid "An example of writing to a configuration file::"
msgstr "Un ejemplo de escritura en un archivo de configuración::"

#: ../../library/configparser.rst:853
msgid ""
"import configparser\n"
"\n"
"config = configparser.RawConfigParser()\n"
"\n"
"# Please note that using RawConfigParser's set functions, you can assign\n"
"# non-string values to keys internally, but will receive an error when\n"
"# attempting to write to a file or when you get it in non-raw mode. Setting\n"
"# values using the mapping protocol or ConfigParser's set() does not allow\n"
"# such assignments to take place.\n"
"config.add_section('Section1')\n"
"config.set('Section1', 'an_int', '15')\n"
"config.set('Section1', 'a_bool', 'true')\n"
"config.set('Section1', 'a_float', '3.1415')\n"
"config.set('Section1', 'baz', 'fun')\n"
"config.set('Section1', 'bar', 'Python')\n"
"config.set('Section1', 'foo', '%(bar)s is %(baz)s!')\n"
"\n"
"# Writing our configuration file to 'example.cfg'\n"
"with open('example.cfg', 'w') as configfile:\n"
"    config.write(configfile)"
msgstr ""
"import configparser\n"
"\n"
"config = configparser.RawConfigParser()\n"
"\n"
"#Tenga en cuenta que al usar las funciones set de RawConfigParser, puede "
"asignar\n"
"# valores que no son cadenas a las claves internamente, pero recibirán un "
"error cuando\n"
"# intentando escribir en un archivo o cuando lo obtiene en modo no raw . "
"Configuración\n"
"# los valores que usan el protocolo de asignación o set () de ConfigParser "
"no permiten\n"
"# tales asignaciones se llevarán a cabo..\n"
"config.add_section('Section1')\n"
"config.set('Section1', 'an_int', '15')\n"
"config.set('Section1', 'a_bool', 'true')\n"
"config.set('Section1', 'a_float', '3.1415')\n"
"config.set('Section1', 'baz', 'fun')\n"
"config.set('Section1', 'bar', 'Python')\n"
"config.set('Section1', 'foo', '%(bar)s is %(baz)s!')\n"
"\n"
"# Escribiendo nuestro archivo de configuración en ' ejemplo.cfg'\n"
"con open ('ejemplo.cfg', 'w') como archivo de configuración:\n"
"    config.write(configfile)"

#: ../../library/configparser.rst:874
msgid "An example of reading the configuration file again::"
msgstr "Un ejemplo de volver a leer el archivo de configuración::"

#: ../../library/configparser.rst:876
msgid ""
"import configparser\n"
"\n"
"config = configparser.RawConfigParser()\n"
"config.read('example.cfg')\n"
"\n"
"# getfloat() raises an exception if the value is not a float\n"
"# getint() and getboolean() also do this for their respective types\n"
"a_float = config.getfloat('Section1', 'a_float')\n"
"an_int = config.getint('Section1', 'an_int')\n"
"print(a_float + an_int)\n"
"\n"
"# Notice that the next output does not interpolate '%(bar)s' or '%(baz)s'.\n"
"# This is because we are using a RawConfigParser().\n"
"if config.getboolean('Section1', 'a_bool'):\n"
"    print(config.get('Section1', 'foo'))"
msgstr ""
"import configparser\n"
"\n"
"config = configparser.RawConfigParser()\n"
"config.read('example.cfg')\n"
"\n"
"# getfloat() genera una excepción si el valor no es flotante\n"
"# getint() y getboolean() también hacen esto para sus respectivos tipos\n"
"a_float = config.getfloat('Section1', 'a_float')\n"
"an_int = config.getint('Section1', 'an_int'))\n"
"print(a_float + an_int)\n"
"\n"
"# Observe que la siguiente salida no interpola '%(bar)s' o '%(baz)s'.\n"
"# Esto se debe a que estamos usando un RawConfigParser().\n"
"si config.getboolean ('Section1', 'a_bool'):\n"
"    print(config.get('Section1', 'foo'))"

#: ../../library/configparser.rst:892
msgid "To get interpolation, use :class:`ConfigParser`::"
msgstr "Para obtener la interpolación, utilice :class:`ConfigParser`::"

#: ../../library/configparser.rst:894
msgid ""
"import configparser\n"
"\n"
"cfg = configparser.ConfigParser()\n"
"cfg.read('example.cfg')\n"
"\n"
"# Set the optional *raw* argument of get() to True if you wish to disable\n"
"# interpolation in a single get operation.\n"
"print(cfg.get('Section1', 'foo', raw=False))  # -> \"Python is fun!\"\n"
"print(cfg.get('Section1', 'foo', raw=True))   # -> \"%(bar)s is %(baz)s!\"\n"
"\n"
"# The optional *vars* argument is a dict with members that will take\n"
"# precedence in interpolation.\n"
"print(cfg.get('Section1', 'foo', vars={'bar': 'Documentation',\n"
"                                       'baz': 'evil'}))\n"
"\n"
"# The optional *fallback* argument can be used to provide a fallback value\n"
"print(cfg.get('Section1', 'foo'))\n"
"      # -> \"Python is fun!\"\n"
"\n"
"print(cfg.get('Section1', 'foo', fallback='Monty is not.'))\n"
"      # -> \"Python is fun!\"\n"
"\n"
"print(cfg.get('Section1', 'monster', fallback='No such things as "
"monsters.'))\n"
"      # -> \"No such things as monsters.\"\n"
"\n"
"# A bare print(cfg.get('Section1', 'monster')) would raise NoOptionError\n"
"# but we can also use:\n"
"\n"
"print(cfg.get('Section1', 'monster', fallback=None))\n"
"      # -> None"
msgstr ""
"import configparser\n"
"\n"
"cfg = configparser.ConfigParser()\n"
"cfg.read('example.cfg')\n"
"\n"
"# Establecer el argumento opcional *raw* de get() en True si desea "
"deshabilitar\n"
"# la interpolación en una sola operación get.\n"
"print(cfg.get('Section1', 'foo', raw=False))  # -> \"Python is fun!\"\n"
"print(cfg.get('Section1', 'foo', raw=True))   # -> \"%(bar)s is %(baz)s!\"\n"
"\n"
"# El argumento opcional *vars* es un dict con miembros que tomarán\n"
"# precedencia en la interpolación.\n"
"print(cfg.get('Section1', 'foo', vars={'bar': 'Documentation',\n"
"                                       'baz': 'evil'}))\n"
"\n"
"# El argumento opcional *fallback* se puede usar para proporcionar un valor "
"alternativo\n"
"print(cfg.get('Section1', 'foo'))\n"
"      # -> \"¡Python es divertido!\"\n"
"\n"
"print(cfg.get('Section1', 'foo', fallback='Monty is not.'))\n"
"      # -> \"Python es divertido.\"\n"
"\n"
"print(cfg.get('Section1', 'monster', fallback='No such things as "
"monsters.'))\n"
"      # -> \"No hay monstruos.\"\n"
"\n"
"# Un simple print(cfg.get('Section1', 'monster')) generaría NoOptionError\n"
"# pero también podemos usar:\n"
"\n"
"print(cfg.get('Section1', 'monster', fallback=None))\n"
"      # -> Ninguno"

#: ../../library/configparser.rst:925
msgid ""
"Default values are available in both types of ConfigParsers.  They are used "
"in interpolation if an option used is not defined elsewhere. ::"
msgstr ""
"Los valores por defecto están disponibles en ambos tipos de ConfigParsers.  "
"Se utilizan en la interpolación si una opción utilizada no está definida en "
"otra parte. ::"

#: ../../library/configparser.rst:928
msgid ""
"import configparser\n"
"\n"
"# New instance with 'bar' and 'baz' defaulting to 'Life' and 'hard' each\n"
"config = configparser.ConfigParser({'bar': 'Life', 'baz': 'hard'})\n"
"config.read('example.cfg')\n"
"\n"
"print(config.get('Section1', 'foo'))     # -> \"Python is fun!\"\n"
"config.remove_option('Section1', 'bar')\n"
"config.remove_option('Section1', 'baz')\n"
"print(config.get('Section1', 'foo'))     # -> \"Life is hard!\""
msgstr ""
"import configparser\n"
"\n"
"# Nueva instancia con 'bar' y 'baz'predeterminados a 'Life' y 'hard' cada "
"uno\n"
"config = configparser.ConfigParser({'bar': 'Life', 'baz': 'hard'})\n"
"config.read('example.cfg')\n"
"\n"
"print(config.get('Section1', 'foo'))     # -> \"¡Python es divertido!\"\n"
"config.remove_option('Section1', 'bar')\n"
"config.remove_option('Section1', 'baz')\n"
"print(config.get('Section1', 'foo'))     # -> \"¡La vida es dura!\""

#: ../../library/configparser.rst:943
msgid "ConfigParser Objects"
msgstr "Objetos ConfigParser"

#: ../../library/configparser.rst:953
msgid ""
"The main configuration parser.  When *defaults* is given, it is initialized "
"into the dictionary of intrinsic defaults.  When *dict_type* is given, it "
"will be used to create the dictionary objects for the list of sections, for "
"the options within a section, and for the default values."
msgstr ""
"El principal analizador de configuración.  Cuando se da *defaults*, se "
"inicializa en el diccionario de valores por defecto intrínsecos.  Cuando se "
"da *dict_type*, se usará para crear los objetos diccionario para la lista de "
"secciones, para las opciones dentro de una sección, y para los valores por "
"defecto."

#: ../../library/configparser.rst:958
msgid ""
"When *delimiters* is given, it is used as the set of substrings that divide "
"keys from values.  When *comment_prefixes* is given, it will be used as the "
"set of substrings that prefix comments in otherwise empty lines. Comments "
"can be indented.  When *inline_comment_prefixes* is given, it will be used "
"as the set of substrings that prefix comments in non-empty lines."
msgstr ""
"Cuando se proporciona *comment_prefixes*, se usará como el conjunto de "
"subcadenas que prefijan comentarios en líneas que de otro modo estarían "
"vacías. Los comentarios se pueden sangrar. Cuando se proporciona "
"*inline_comment_prefixes*, se usará como el conjunto de subcadenas que "
"prefijan comentarios en líneas no vacías."

#: ../../library/configparser.rst:964
msgid ""
"When *strict* is ``True`` (the default), the parser won't allow for any "
"section or option duplicates while reading from a single source (file, "
"string or dictionary), raising :exc:`DuplicateSectionError` or :exc:"
"`DuplicateOptionError`.  When *empty_lines_in_values* is ``False`` (default: "
"``True``), each empty line marks the end of an option.  Otherwise, internal "
"empty lines of a multiline option are kept as part of the value. When "
"*allow_no_value* is ``True`` (default: ``False``), options without values "
"are accepted; the value held for these is ``None`` and they are serialized "
"without the trailing delimiter."
msgstr ""
"Cuando *strict* es ``True`` (el valor por defecto), el analizador sintáctico "
"no permitirá ninguna sección u opción duplicada mientras se lee de una única "
"fuente (archivo, cadena o diccionario), elevando :exc:"
"`DuplicateSectionError` o :exc:`DuplicateOptionError`. Cuando "
"*empty_lines_in_values* es ``False`` (valor por defecto: ``True``), cada "
"línea vacía marca el final de una opción.  En caso contrario, las líneas "
"vacías internas de una opción multilínea se mantienen como parte del valor. "
"Cuando *allow_no_value* es ``True`` (por defecto: ``False``), se aceptan "
"opciones sin valores; el valor que se mantiene para éstas es ``None`` y se "
"serializan sin el delimitador final."

#: ../../library/configparser.rst:974
msgid ""
"When *default_section* is given, it specifies the name for the special "
"section holding default values for other sections and interpolation purposes "
"(normally named ``\"DEFAULT\"``).  This value can be retrieved and changed "
"at runtime using the ``default_section`` instance attribute. This won't re-"
"evaluate an already parsed config file, but will be used when writing parsed "
"settings to a new config file."
msgstr ""
"Cuando se da *default_section*, se especifica el nombre de la sección "
"especial que contiene los valores por defecto para otras secciones y "
"propósitos de interpolación (normalmente llamada ``\"DEFAULT\"``).  Este "
"valor puede recuperarse y modificarse en tiempo de ejecución mediante el "
"atributo de instancia ``default_section``. Esto no reevaluará un archivo de "
"configuración ya analizado, pero se utilizará cuando se escriban los ajustes "
"analizados en un nuevo archivo de configuración."

#: ../../library/configparser.rst:981
msgid ""
"Interpolation behaviour may be customized by providing a custom handler "
"through the *interpolation* argument. ``None`` can be used to turn off "
"interpolation completely, ``ExtendedInterpolation()`` provides a more "
"advanced variant inspired by ``zc.buildout``.  More on the subject in the "
"`dedicated documentation section <#interpolation-of-values>`_."
msgstr ""
"El comportamiento de interpolación puede personalizarse proporcionando un "
"manejador personalizado a través del argumento *interpolation*. ``None`` "
"puede utilizarse para desactivar completamente la interpolación, "
"``ExtendedInterpolation()`` proporciona una variante más avanzada inspirada "
"en ``zc.buildout``.  Más información sobre el tema en la sección `dedicada a "
"la documentación <#interpolation-of-values>`_."

#: ../../library/configparser.rst:987
msgid ""
"All option names used in interpolation will be passed through the :meth:"
"`optionxform` method just like any other option name reference.  For "
"example, using the default implementation of :meth:`optionxform` (which "
"converts option names to lower case), the values ``foo %(bar)s`` and ``foo "
"%(BAR)s`` are equivalent."
msgstr ""
"Todos los nombres de opción utilizados en la interpolación se pasarán a "
"través del método :meth:`optionxform` como cualquier otra referencia de "
"nombre de opción.  Por ejemplo, utilizando la implementación por defecto de :"
"meth:`optionxform` (que convierte los nombres de opción a minúsculas), los "
"valores ``foo %(bar)s`` y ``foo %(BAR)s`` son equivalentes."

#: ../../library/configparser.rst:993
msgid ""
"When *converters* is given, it should be a dictionary where each key "
"represents the name of a type converter and each value is a callable "
"implementing the conversion from string to the desired datatype.  Every "
"converter gets its own corresponding :meth:`!get*` method on the parser "
"object and section proxies."
msgstr ""
"Cuando se da *converters*, debe ser un diccionario donde cada clave "
"representa el nombre de un convertidor de tipo y cada valor es un callable "
"que implementa la conversión de cadena al tipo de dato deseado.  Cada "
"convertidor tiene su propio método :meth:`!get*` correspondiente en el "
"objeto analizador y en los proxies de sección."

#: ../../library/configparser.rst:999
msgid ""
"When *allow_unnamed_section* is ``True`` (default: ``False``), the first "
"section name can be omitted. See the `\"Unnamed Sections\" section <#unnamed-"
"sections>`_."
msgstr ""

#: ../../library/configparser.rst:1028
msgid "The default *dict_type* is :class:`collections.OrderedDict`."
msgstr "El *dict_type* por defecto es :class:`collections.OrderedDict`."

#: ../../library/configparser.rst:1031 ../../library/configparser.rst:1324
msgid ""
"*allow_no_value*, *delimiters*, *comment_prefixes*, *strict*, "
"*empty_lines_in_values*, *default_section* and *interpolation* were added."
msgstr ""
"Se han añadido *allow_no_value*, *delimiters*, *comment_prefixes*, *strict*, "
"*empty_lines_in_values*, *default_section* e *interpolation*."

#: ../../library/configparser.rst:1036 ../../library/configparser.rst:1329
msgid "The *converters* argument was added."
msgstr "Se ha añadido el argumento *converters*."

#: ../../library/configparser.rst:1039
msgid ""
"The *defaults* argument is read with :meth:`read_dict`, providing consistent "
"behavior across the parser: non-string keys and values are implicitly "
"converted to strings."
msgstr ""
"El argumento *defaults* se lee con :meth:`read_dict`, lo que proporciona un "
"comportamiento coherente en todo el analizador sintáctico: las claves y los "
"valores que no son cadenas se convierten implícitamente en cadenas."

#: ../../library/configparser.rst:1044 ../../library/configparser.rst:1332
msgid ""
"The default *dict_type* is :class:`dict`, since it now preserves insertion "
"order."
msgstr ""
"El *dict_type* por defecto es :class:`dict`, ya que ahora preserva el orden "
"de inserción."

#: ../../library/configparser.rst:1048
msgid ""
"Raise a :exc:`MultilineContinuationError` when *allow_no_value* is ``True``, "
"and a key without a value is continued with an indented line."
msgstr ""

#: ../../library/configparser.rst:1052 ../../library/configparser.rst:1336
msgid "The *allow_unnamed_section* argument was added."
msgstr ""

#: ../../library/configparser.rst:1057
msgid "Return a dictionary containing the instance-wide defaults."
msgstr ""
"Devuelve un diccionario que contiene los valores predeterminados para toda "
"la instancia."

#: ../../library/configparser.rst:1062
msgid ""
"Return a list of the sections available; the *default section* is not "
"included in the list."
msgstr ""
"Devuelve una lista de las secciones disponibles; la *sección predeterminada* "
"no se incluye en la lista."

#: ../../library/configparser.rst:1068
msgid ""
"Add a section named *section* to the instance.  If a section by the given "
"name already exists, :exc:`DuplicateSectionError` is raised.  If the "
"*default section* name is passed, :exc:`ValueError` is raised.  The name of "
"the section must be a string; if not, :exc:`TypeError` is raised."
msgstr ""
"Añade una sección llamada *section* a la instancia.  Si ya existe una "
"sección con el nombre indicado, aparece :exc:`DuplicateSectionError`.  Si se "
"pasa el nombre de *sección* por defecto, aparece :exc:`ValueError`.  El "
"nombre de la sección debe ser una cadena; en caso contrario, aparece :exc:"
"`TypeError`."

#: ../../library/configparser.rst:1073
msgid "Non-string section names raise :exc:`TypeError`."
msgstr "Los nombres de sección que no son de cadena generan :exc:`TypeError`."

#: ../../library/configparser.rst:1079
msgid ""
"Indicates whether the named *section* is present in the configuration. The "
"*default section* is not acknowledged."
msgstr ""
"Indica si la *sección* nombrada está presente en la configuración. No se "
"reconoce la *sección por defecto*."

#: ../../library/configparser.rst:1085
msgid "Return a list of options available in the specified *section*."
msgstr ""
"Devuelve una lista de opciones disponibles en la *sección* especificada."

#: ../../library/configparser.rst:1090
msgid ""
"If the given *section* exists, and contains the given *option*, return :"
"const:`True`; otherwise return :const:`False`.  If the specified *section* "
"is :const:`None` or an empty string, DEFAULT is assumed."
msgstr ""
"Si la *sección* dada existe, y contiene la *opción* dada, devuelve :const:"
"`True`; en caso contrario devuelve :const:`False`.  Si la *sección* "
"especificada es :const:`None` o una cadena vacía, se asume DEFAULT."

#: ../../library/configparser.rst:1097
msgid ""
"Attempt to read and parse an iterable of filenames, returning a list of "
"filenames which were successfully parsed."
msgstr ""
"Intenta leer y analizar un iterable de nombres de archivo, devolviendo una "
"lista de nombres de archivo que se han analizado correctamente."

#: ../../library/configparser.rst:1100
msgid ""
"If *filenames* is a string, a :class:`bytes` object or a :term:`path-like "
"object`, it is treated as a single filename.  If a file named in *filenames* "
"cannot be opened, that file will be ignored.  This is designed so that you "
"can specify an iterable of potential configuration file locations (for "
"example, the current directory, the user's home directory, and some system-"
"wide directory), and all existing configuration files in the iterable will "
"be read."
msgstr ""
"Si *filenames* es una cadena, un objeto :class:`bytes` o un objeto :term:"
"`path-like object`, se tratará como un único nombre de archivo.  Si un "
"fichero nombrado en *filenames* no se puede abrir, se ignorará ese fichero.  "
"Esto está diseñado para que pueda especificar una iterable de posibles "
"ubicaciones de ficheros de configuración (por ejemplo, el directorio actual, "
"el directorio personal del usuario y algún directorio de todo el sistema), y "
"se leerán todos los ficheros de configuración existentes en la iterable."

#: ../../library/configparser.rst:1109
msgid ""
"If none of the named files exist, the :class:`ConfigParser` instance will "
"contain an empty dataset.  An application which requires initial values to "
"be loaded from a file should load the required file or files using :meth:"
"`read_file` before calling :meth:`read` for any optional files::"
msgstr ""
"Si no existe ninguno de los archivos mencionados, la instancia :class:"
"`ConfigParser` contendrá un conjunto de datos vacío.  Una aplicación que "
"requiera que los valores iniciales se carguen desde un archivo debe cargar "
"el archivo o archivos requeridos utilizando :meth:`read_file` antes de "
"llamar a :meth:`read` para cualquier archivo opcional::"

#: ../../library/configparser.rst:1115
msgid ""
"import configparser, os\n"
"\n"
"config = configparser.ConfigParser()\n"
"config.read_file(open('defaults.cfg'))\n"
"config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')],\n"
"            encoding='cp1250')"
msgstr ""
"import configparser, os\n"
"\n"
"config = configparser.ConfigParser()\n"
"config.read_file(open('defaults.cfg'))\n"
"config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')],\n"
"            encoding='cp1250')"

#: ../../library/configparser.rst:1122
msgid ""
"Added the *encoding* parameter. Previously, all files were read using the "
"default encoding for :func:`open`."
msgstr ""
"Se ha añadido el parámetro *encoding*. Anteriormente, todos los archivos se "
"leían utilizando la codificación predeterminada para :func:`open`."

#: ../../library/configparser.rst:1126
msgid "The *filenames* parameter accepts a :term:`path-like object`."
msgstr "El parámetro *filenames* acepta un :term:`path-like object`."

#: ../../library/configparser.rst:1129
msgid "The *filenames* parameter accepts a :class:`bytes` object."
msgstr "El parámetro *filenames* acepta un objeto :class:`bytes`."

#: ../../library/configparser.rst:1135
msgid ""
"Read and parse configuration data from *f* which must be an iterable "
"yielding Unicode strings (for example files opened in text mode)."
msgstr ""
"Lee y analiza los datos de configuración de *f*, que debe ser un iterable "
"que produzca cadenas Unicode (por ejemplo, archivos abiertos en modo texto)."

#: ../../library/configparser.rst:1138
msgid ""
"Optional argument *source* specifies the name of the file being read.  If "
"not given and *f* has a :attr:`!name` attribute, that is used for *source*; "
"the default is ``'<???>'``."
msgstr ""
"El argumento opcional *source* especifica el nombre del fichero que se está "
"leyendo.  Si no se indica y *f* tiene un atributo :attr:`!name`, se "
"utilizará para *source*; el valor predeterminado es ``'<???>'``."

#: ../../library/configparser.rst:1142
msgid "Replaces :meth:`!readfp`."
msgstr "Sustituye a :meth:`!readfp`."

#: ../../library/configparser.rst:1147
msgid "Parse configuration data from a string."
msgstr "Analiza los datos de configuración de una cadena."

#: ../../library/configparser.rst:1149
msgid ""
"Optional argument *source* specifies a context-specific name of the string "
"passed.  If not given, ``'<string>'`` is used.  This should commonly be a "
"filesystem path or a URL."
msgstr ""
"El argumento opcional *source* especifica un nombre específico del contexto "
"de la cadena pasada.  Si no se indica, se utiliza ``'<string>'``.  "
"Normalmente debería ser una ruta del sistema de archivos o una URL."

#: ../../library/configparser.rst:1158
msgid ""
"Load configuration from any object that provides a dict-like ``items()`` "
"method.  Keys are section names, values are dictionaries with keys and "
"values that should be present in the section.  If the used dictionary type "
"preserves order, sections and their keys will be added in order. Values are "
"automatically converted to strings."
msgstr ""
"Carga la configuración desde cualquier objeto que proporcione un método tipo "
"dict ``items()``.  Las claves son nombres de secciones, los valores son "
"diccionarios con claves y valores que deben estar presentes en la sección.  "
"Si el tipo de diccionario utilizado preserva el orden, las secciones y sus "
"claves se añadirán en orden. Los valores se convierten automáticamente en "
"cadenas."

#: ../../library/configparser.rst:1164
msgid ""
"Optional argument *source* specifies a context-specific name of the "
"dictionary passed.  If not given, ``<dict>`` is used."
msgstr ""
"El argumento opcional *source* especifica un nombre específico del contexto "
"del diccionario pasado.  Si no se indica, se utiliza ``<dict>``."

#: ../../library/configparser.rst:1167
msgid "This method can be used to copy state between parsers."
msgstr ""
"Este método puede utilizarse para copiar el estado entre analizadores "
"sintácticos."

#: ../../library/configparser.rst:1174
msgid ""
"Get an *option* value for the named *section*.  If *vars* is provided, it "
"must be a dictionary.  The *option* is looked up in *vars* (if provided), "
"*section*, and in *DEFAULTSECT* in that order.  If the key is not found and "
"*fallback* is provided, it is used as a fallback value.  ``None`` can be "
"provided as a *fallback* value."
msgstr ""
"Obtiene un valor de *option* para la *sección* indicada.  Si se proporciona "
"*vars*, debe ser un diccionario.  La *option* se busca en *vars* (si se "
"proporciona), *section*, y en *DEFAULTSECT* en ese orden.  Si no se "
"encuentra la clave y se proporciona *fallback*, se utiliza como valor de "
"reserva. ``None`` puede proporcionarse como valor de *fallback*."

#: ../../library/configparser.rst:1180
msgid ""
"All the ``'%'`` interpolations are expanded in the return values, unless the "
"*raw* argument is true.  Values for interpolation keys are looked up in the "
"same manner as the option."
msgstr ""
"Todas las interpolaciones de ``'%'`` se expanden en los valores de retorno, "
"a menos que el argumento *raw* sea verdad.  Los valores de las claves de "
"interpolación se buscan del mismo modo que la opción."

#: ../../library/configparser.rst:1184
msgid ""
"Arguments *raw*, *vars* and *fallback* are keyword only to protect users "
"from trying to use the third argument as the *fallback* fallback (especially "
"when using the mapping protocol)."
msgstr ""
"Los argumentos *raw*, *vars* y *fallback* son sólo palabras clave para "
"proteger a los usuarios de intentar utilizar el tercer argumento como el "
"*fallback* fallback (especialmente cuando se utiliza el protocolo de mapeo)."

#: ../../library/configparser.rst:1192
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to an integer.  See :meth:`get` for explanation of *raw*, *vars* and "
"*fallback*."
msgstr ""
"Método práctico que convierte la *opción* de la *sección* especificada en un "
"número entero.  Véase :meth:`get` para la explicación de *raw*, *vars* y "
"*fallback*."

#: ../../library/configparser.rst:1199
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to a floating-point number.  See :meth:`get` for explanation of *raw*, "
"*vars* and *fallback*."
msgstr ""
"Método que convierte la *opción* de la *sección* especificada en un número "
"de coma flotante.  Véase :meth:`get` para la explicación de *raw*, *vars* y "
"*fallback*."

#: ../../library/configparser.rst:1206
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to a Boolean value.  Note that the accepted values for the option are "
"``'1'``, ``'yes'``, ``'true'``, and ``'on'``, which cause this method to "
"return ``True``, and ``'0'``, ``'no'``, ``'false'``, and ``'off'``, which "
"cause it to return ``False``.  These string values are checked in a case-"
"insensitive manner.  Any other value will cause it to raise :exc:"
"`ValueError`.  See :meth:`get` for explanation of *raw*, *vars* and "
"*fallback*."
msgstr ""
"Método práctico que convierte la *opción* de la *sección* especificada en un "
"valor booleano.  Tenga en cuenta que los valores aceptados para la opción "
"son ``'1'``, ``'yes'``, ``'true'``, y ``'on'``, que hacen que este método "
"devuelva ``True``, y ``'0'``, ``'no'``, ``'false'``, y ``'off'``, que hacen "
"que devuelva ``False``.  Estos valores de cadena se comprueban sin "
"distinguir entre mayúsculas y minúsculas.  Cualquier otro valor hará que se "
"muestre :exc:`ValueError`.  Véase :meth:`get` para la explicación de *raw*, "
"*vars* y *fallback*."

#: ../../library/configparser.rst:1219
msgid ""
"When *section* is not given, return a list of *section_name*, "
"*section_proxy* pairs, including DEFAULTSECT."
msgstr ""
"Si no se indica *section*, devuelve una lista de pares *section_name*, "
"*section_proxy*, incluido DEFAULTSECT."

#: ../../library/configparser.rst:1222
msgid ""
"Otherwise, return a list of *name*, *value* pairs for the options in the "
"given *section*.  Optional arguments have the same meaning as for the :meth:"
"`get` method."
msgstr ""
"En caso contrario, devuelve una lista de pares *nombre*, *valor* para las "
"opciones de la *sección* dada.  Los argumentos opcionales tienen el mismo "
"significado que para el método :meth:`get`."

#: ../../library/configparser.rst:1226
msgid ""
"Items present in *vars* no longer appear in the result.  The previous "
"behaviour mixed actual parser options with variables provided for "
"interpolation."
msgstr ""
"Los elementos presentes en *vars* ya no aparecen en el resultado.  El "
"comportamiento anterior mezclaba opciones reales del analizador sintáctico "
"con variables proporcionadas para la interpolación."

#: ../../library/configparser.rst:1234
msgid ""
"If the given section exists, set the given option to the specified value; "
"otherwise raise :exc:`NoSectionError`.  *option* and *value* must be "
"strings; if not, :exc:`TypeError` is raised."
msgstr ""
"Si la sección dada existe, establece la opción dada en el valor "
"especificado; en caso contrario, lanza :exc:`NoSectionError`.  *option** y "
"*value* deben ser cadenas; en caso contrario, aparece :exc:`TypeError`."

#: ../../library/configparser.rst:1241
msgid ""
"Write a representation of the configuration to the specified :term:`file "
"object`, which must be opened in text mode (accepting strings).  This "
"representation can be parsed by a future :meth:`read` call.  If "
"*space_around_delimiters* is true, delimiters between keys and values are "
"surrounded by spaces."
msgstr ""
"Escribe una representación de la configuración en el objeto :term:`file "
"object` especificado, que debe abrirse en modo texto (aceptando cadenas).  "
"Esta representación puede ser analizada por una futura llamada a :meth:"
"`read`.  Si *space_around_delimiters* es verdadero, los delimitadores entre "
"claves y valores se rodean de espacios."

#: ../../library/configparser.rst:1247
msgid ""
"Raises InvalidWriteError if this would write a representation which cannot "
"be accurately parsed by a future :meth:`read` call from this parser."
msgstr ""

#: ../../library/configparser.rst:1253
msgid ""
"Comments in the original configuration file are not preserved when writing "
"the configuration back. What is considered a comment, depends on the given "
"values for *comment_prefix* and *inline_comment_prefix*."
msgstr ""
"Los comentarios en el fichero de configuración original no se conservan al "
"volver a escribir la configuración. Lo que se considera un comentario, "
"depende de los valores dados para *comment_prefix* y *inline_comment_prefix*."

#: ../../library/configparser.rst:1261
msgid ""
"Remove the specified *option* from the specified *section*.  If the section "
"does not exist, raise :exc:`NoSectionError`.  If the option existed to be "
"removed, return :const:`True`; otherwise return :const:`False`."
msgstr ""
"Elimina la *option* especificada de la *section* especificada.  Si la "
"sección no existe, devuelve :exc:`NoSectionError`.  Si la opción existía "
"para ser eliminada, devuelve :const:`True`; en caso contrario devuelve :"
"const:`False`."

#: ../../library/configparser.rst:1269
msgid ""
"Remove the specified *section* from the configuration.  If the section in "
"fact existed, return ``True``.  Otherwise return ``False``."
msgstr ""
"Elimina la *section* especificada de la configuración.  Si la sección "
"existía, devuelve ``True``.  Si no, devuelve ``False``."

#: ../../library/configparser.rst:1275
msgid ""
"Transforms the option name *option* as found in an input file or as passed "
"in by client code to the form that should be used in the internal "
"structures.  The default implementation returns a lower-case version of "
"*option*; subclasses may override this or client code can set an attribute "
"of this name on instances to affect this behavior."
msgstr ""
"Transforma el nombre de la opción *option* tal y como se encuentra en un "
"archivo de entrada o tal y como lo pasa el código del cliente a la forma que "
"debería utilizarse en las estructuras internas.  La implementación "
"predeterminada devuelve una versión en minúsculas de *option*; las subclases "
"pueden anular esto o el código cliente puede establecer un atributo de este "
"nombre en las instancias para afectar a este comportamiento."

#: ../../library/configparser.rst:1281
msgid ""
"You don't need to subclass the parser to use this method, you can also set "
"it on an instance, to a function that takes a string argument and returns a "
"string.  Setting it to ``str``, for example, would make option names case "
"sensitive::"
msgstr ""
"No es necesario subclasificar el analizador para utilizar este método, "
"también se puede establecer en una instancia, a una función que toma un "
"argumento de cadena y devuelve una cadena.  Establecerlo a ``str``, por "
"ejemplo, haría que los nombres de las opciones distingan entre mayúsculas y "
"minúsculas::"

#: ../../library/configparser.rst:1286
msgid ""
"cfgparser = ConfigParser()\n"
"cfgparser.optionxform = str"
msgstr ""
"cfgparser = ConfigParser()\n"
"cfgparser.optionxform = str"

#: ../../library/configparser.rst:1289
msgid ""
"Note that when reading configuration files, whitespace around the option "
"names is stripped before :meth:`optionxform` is called."
msgstr ""
"Tenga en cuenta que cuando se leen archivos de configuración, los espacios "
"en blanco alrededor de los nombres de las opciones se eliminan antes de "
"llamar a :meth:`optionxform`."

#: ../../library/configparser.rst:1295
msgid ""
"A special object representing a section name used to reference the unnamed "
"section (see :ref:`unnamed-sections`)."
msgstr ""

#: ../../library/configparser.rst:1300
msgid ""
"The maximum depth for recursive interpolation for :meth:`~configparser."
"ConfigParser.get` when the *raw* parameter is false.  This is relevant only "
"when the default *interpolation* is used."
msgstr ""
"La profundidad máxima para la interpolación recursiva para :meth:"
"`~configparser.ConfigParser.get` cuando el parámetro *raw* es false.  Esto "
"es relevante sólo cuando se utiliza la *interpolation* por defecto."

#: ../../library/configparser.rst:1308
msgid "RawConfigParser Objects"
msgstr "Objetos RawConfigParser"

#: ../../library/configparser.rst:1319
msgid ""
"Legacy variant of the :class:`ConfigParser`.  It has interpolation disabled "
"by default and allows for non-string section names, option names, and values "
"via its unsafe ``add_section`` and ``set`` methods, as well as the legacy "
"``defaults=`` keyword argument handling."
msgstr ""
"Variante heredada de :class:`ConfigParser`. Tiene la interpolación "
"desactivada por defecto y permite nombres de sección, nombres de opción y "
"valores que no son cadenas a través de sus métodos inseguros ``add_section`` "
"y ``set``, así como el manejo de argumentos de palabras clave heredado "
"``defaults=``."

#: ../../library/configparser.rst:1340
msgid ""
"Consider using :class:`ConfigParser` instead which checks types of the "
"values to be stored internally.  If you don't want interpolation, you can "
"use ``ConfigParser(interpolation=None)``."
msgstr ""
"Considere el uso de :class:`ConfigParser` en su lugar, que comprueba los "
"tipos de los valores que se almacenarán internamente.  Si no desea "
"interpolación, puede utilizar ``ConfigParser(interpolation=None)``."

#: ../../library/configparser.rst:1347
msgid ""
"Add a section named *section* or :const:`UNNAMED_SECTION` to the instance."
msgstr ""

#: ../../library/configparser.rst:1349
msgid ""
"If the given section already exists, :exc:`DuplicateSectionError` is raised. "
"If the *default section* name is passed, :exc:`ValueError` is raised. If :"
"const:`UNNAMED_SECTION` is passed and support is disabled, :exc:"
"`UnnamedSectionDisabledError` is raised."
msgstr ""

#: ../../library/configparser.rst:1354
msgid ""
"Type of *section* is not checked which lets users create non-string named "
"sections.  This behaviour is unsupported and may cause internal errors."
msgstr ""
"El tipo de *section* no se comprueba, lo que permite a los usuarios crear "
"secciones sin nombre de cadena.  Este comportamiento no está soportado y "
"puede causar errores internos."

#: ../../library/configparser.rst:1357
msgid "Added support for :const:`UNNAMED_SECTION`."
msgstr ""

#: ../../library/configparser.rst:1363
msgid ""
"If the given section exists, set the given option to the specified value; "
"otherwise raise :exc:`NoSectionError`.  While it is possible to use :class:"
"`RawConfigParser` (or :class:`ConfigParser` with *raw* parameters set to "
"true) for *internal* storage of non-string values, full functionality "
"(including interpolation and output to files) can only be achieved using "
"string values."
msgstr ""
"Si la sección dada existe, establece la opción dada al valor especificado; "
"en caso contrario, lanza :exc:`NoSectionError`.  Aunque es posible utilizar :"
"class:`RawConfigParser` (o :class:`ConfigParser` con los parámetros *raw* "
"establecidos en true) para el almacenamiento *interno* de valores que no "
"sean cadenas, la funcionalidad completa (incluida la interpolación y la "
"salida a archivos) sólo puede lograrse utilizando valores de cadenas."

#: ../../library/configparser.rst:1370
msgid ""
"This method lets users assign non-string values to keys internally.  This "
"behaviour is unsupported and will cause errors when attempting to write to a "
"file or get it in non-raw mode.  **Use the mapping protocol API** which does "
"not allow such assignments to take place."
msgstr ""
"Este método permite a los usuarios asignar valores no string a las claves "
"internamente.  Este comportamiento no está soportado y provocará errores al "
"intentar escribir en un fichero u obtenerlo en modo no raw.  **Utiliza la "
"API del protocolo de mapeo**, que no permite este tipo de asignaciones."

#: ../../library/configparser.rst:1377
msgid "Exceptions"
msgstr "Excepciones"

#: ../../library/configparser.rst:1381
msgid "Base class for all other :mod:`configparser` exceptions."
msgstr "Clase base para todas las demás excepciones de :mod:`configparser`."

#: ../../library/configparser.rst:1386
msgid "Exception raised when a specified section is not found."
msgstr "Excepción planteada cuando no se encuentra una sección especificada."

#: ../../library/configparser.rst:1391
msgid ""
"Exception raised if :meth:`~ConfigParser.add_section` is called with the "
"name of a section that is already present or in strict parsers when a "
"section if found more than once in a single input file, string or dictionary."
msgstr ""
"Se produce una excepción si se llama a :meth:`~ConfigParser.add_section` con "
"el nombre de una sección que ya está presente o en analizadores sintácticos "
"estrictos cuando una sección se encuentra más de una vez en un único archivo "
"de entrada, cadena o diccionario."

#: ../../library/configparser.rst:1395
msgid ""
"Added the optional *source* and *lineno* attributes and parameters to :meth:"
"`!__init__`."
msgstr ""
"Se han añadido los atributos y parámetros opcionales *source* y *lineno* a :"
"meth:`!__init__`."

#: ../../library/configparser.rst:1402
msgid ""
"Exception raised by strict parsers if a single option appears twice during "
"reading from a single file, string or dictionary. This catches misspellings "
"and case sensitivity-related errors, e.g. a dictionary may have two keys "
"representing the same case-insensitive configuration key."
msgstr ""
"Excepción lanzada por los analizadores sintácticos estrictos si una única "
"opción aparece dos veces durante la lectura de un único archivo, cadena o "
"diccionario. Esto detecta errores ortográficos y errores relacionados con la "
"distinción entre mayúsculas y minúsculas, por ejemplo, un diccionario puede "
"tener dos claves que representan la misma clave de configuración sin "
"distinción entre mayúsculas y minúsculas."

#: ../../library/configparser.rst:1410
msgid ""
"Exception raised when a specified option is not found in the specified "
"section."
msgstr ""
"Excepción planteada cuando una opción especificada no se encuentra en la "
"sección especificada."

#: ../../library/configparser.rst:1416
msgid ""
"Base class for exceptions raised when problems occur performing string "
"interpolation."
msgstr ""
"Clase base para las excepciones que surgen cuando se producen problemas al "
"realizar la interpolación de cadenas."

#: ../../library/configparser.rst:1422
msgid ""
"Exception raised when string interpolation cannot be completed because the "
"number of iterations exceeds :const:`MAX_INTERPOLATION_DEPTH`.  Subclass of :"
"exc:`InterpolationError`."
msgstr ""
"Excepción planteada cuando la interpolación de cadenas no puede completarse "
"porque el número de iteraciones excede :const:`MAX_INTERPOLATION_DEPTH`.  "
"Subclase de :exc:`InterpolationError`."

#: ../../library/configparser.rst:1429
msgid ""
"Exception raised when an option referenced from a value does not exist. "
"Subclass of :exc:`InterpolationError`."
msgstr ""
"Excepción lanzada cuando una opción referenciada desde un valor no existe. "
"Subclase de :exc:`InterpolationError`."

#: ../../library/configparser.rst:1435
msgid ""
"Exception raised when the source text into which substitutions are made does "
"not conform to the required syntax.  Subclass of :exc:`InterpolationError`."
msgstr ""
"Excepción planteada cuando el texto fuente en el que se realizan las "
"sustituciones no se ajusta a la sintaxis requerida.  Subclase de :exc:"
"`InterpolationError`."

#: ../../library/configparser.rst:1441
msgid ""
"Exception raised when attempting to parse a file which has no section "
"headers."
msgstr ""
"Excepción planteada al intentar analizar un archivo que no tiene cabeceras "
"de sección."

#: ../../library/configparser.rst:1446
msgid "Exception raised when errors occur attempting to parse a file."
msgstr ""
"Excepción planteada cuando se producen errores al intentar analizar un "
"archivo."

#: ../../library/configparser.rst:1448
msgid ""
"The ``filename`` attribute and :meth:`!__init__` constructor argument were "
"removed.  They have been available using the name ``source`` since 3.2."
msgstr ""
"Se han eliminado el atributo ``filename`` y el argumento del constructor :"
"meth:`!__init__`.  Han estado disponibles utilizando el nombre ``source`` "
"desde la versión 3.2."

#: ../../library/configparser.rst:1454
msgid ""
"Exception raised when a key without a corresponding value is continued with "
"an indented line."
msgstr ""

#: ../../library/configparser.rst:1461
msgid ""
"Exception raised when attempting to use the :const:`UNNAMED_SECTION` without "
"enabling it."
msgstr ""

#: ../../library/configparser.rst:1468
msgid ""
"Exception raised when an attempted :meth:`ConfigParser.write` would not be "
"parsed accurately with a future :meth:`ConfigParser.read` call."
msgstr ""

#: ../../library/configparser.rst:1471
msgid ""
"Ex: Writing a key beginning with the :attr:`ConfigParser.SECTCRE` pattern "
"would parse as a section header when read. Attempting to write this will "
"raise this exception."
msgstr ""

#: ../../library/configparser.rst:1478
msgid "Footnotes"
msgstr "Notas a pie de página"

#: ../../library/configparser.rst:1479
msgid ""
"Config parsers allow for heavy customization.  If you are interested in "
"changing the behaviour outlined by the footnote reference, consult the "
"`Customizing Parser Behaviour`_ section."
msgstr ""
"Los analizadores sintácticos Config permiten una gran personalización.  Si "
"está interesado en cambiar el comportamiento descrito en la nota de "
"referencia, consulte la sección `Customizing Parser Behaviour`_."

#: ../../library/configparser.rst:16
msgid ".ini"
msgstr ".ini"

#: ../../library/configparser.rst:16
msgid "file"
msgstr "archivo"

#: ../../library/configparser.rst:16
msgid "configuration"
msgstr "configuration"

#: ../../library/configparser.rst:16
msgid "ini file"
msgstr "ini file"

#: ../../library/configparser.rst:16
msgid "Windows ini file"
msgstr "Archivo ini de Windows"

#: ../../library/configparser.rst:367
msgid "% (percent)"
msgstr ""

#: ../../library/configparser.rst:367 ../../library/configparser.rst:400
msgid "interpolation in configuration files"
msgstr ""

#: ../../library/configparser.rst:400
msgid "$ (dollar)"
msgstr ""
