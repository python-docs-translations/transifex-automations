# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-10 22:50-0300\n"
"PO-Revision-Date: 2021-06-28 01:11+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language: es_ES\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/teams/"
"5390/es_ES/)\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../library/pathlib.rst:2
msgid ":mod:`!pathlib` --- Object-oriented filesystem paths"
msgstr ""

#: ../../library/pathlib.rst:9
msgid "**Source code:** :source:`Lib/pathlib/`"
msgstr ""

#: ../../library/pathlib.rst:15
msgid ""
"This module offers classes representing filesystem paths with semantics "
"appropriate for different operating systems.  Path classes are divided "
"between :ref:`pure paths <pure-paths>`, which provide purely computational "
"operations without I/O, and :ref:`concrete paths <concrete-paths>`, which "
"inherit from pure paths but also provide I/O operations."
msgstr ""

#: ../../library/pathlib.rst:25
msgid ""
"If you've never used this module before or just aren't sure which class is "
"right for your task, :class:`Path` is most likely what you need. It "
"instantiates a :ref:`concrete path <concrete-paths>` for the platform the "
"code is running on."
msgstr ""

#: ../../library/pathlib.rst:29
msgid "Pure paths are useful in some special cases; for example:"
msgstr ""

#: ../../library/pathlib.rst:31
msgid ""
"If you want to manipulate Windows paths on a Unix machine (or vice versa). "
"You cannot instantiate a :class:`WindowsPath` when running on Unix, but you "
"can instantiate :class:`PureWindowsPath`."
msgstr ""

#: ../../library/pathlib.rst:34
msgid ""
"You want to make sure that your code only manipulates paths without actually "
"accessing the OS. In this case, instantiating one of the pure classes may be "
"useful since those simply don't have any OS-accessing operations."
msgstr ""

#: ../../library/pathlib.rst:39
msgid ":pep:`428`: The pathlib module -- object-oriented filesystem paths."
msgstr ""

#: ../../library/pathlib.rst:42
msgid ""
"For low-level path manipulation on strings, you can also use "
"the :mod:`os.path` module."
msgstr ""

#: ../../library/pathlib.rst:47
msgid "Basic use"
msgstr ""

#: ../../library/pathlib.rst:49
msgid "Importing the main class::"
msgstr ""

#: ../../library/pathlib.rst:53
msgid "Listing subdirectories::"
msgstr ""

#: ../../library/pathlib.rst:60
msgid "Listing Python source files in this directory tree::"
msgstr ""

#: ../../library/pathlib.rst:67
msgid "Navigating inside a directory tree::"
msgstr ""

#: ../../library/pathlib.rst:76
msgid "Querying path properties::"
msgstr ""

#: ../../library/pathlib.rst:83
msgid "Opening a file::"
msgstr ""

#: ../../library/pathlib.rst:91
msgid "Exceptions"
msgstr ""

#: ../../library/pathlib.rst:95
msgid ""
"An exception inheriting :exc:`NotImplementedError` that is raised when an "
"unsupported operation is called on a path object."
msgstr ""

#: ../../library/pathlib.rst:104
msgid "Pure paths"
msgstr ""

#: ../../library/pathlib.rst:106
msgid ""
"Pure path objects provide path-handling operations which don't actually "
"access a filesystem.  There are three ways to access these classes, which we "
"also call *flavours*:"
msgstr ""

#: ../../library/pathlib.rst:112
msgid ""
"A generic class that represents the system's path flavour (instantiating it "
"creates either a :class:`PurePosixPath` or a :class:`PureWindowsPath`)::"
msgstr ""

#: ../../library/pathlib.rst:118
msgid ""
"Each element of *pathsegments* can be either a string representing a path "
"segment, or an object implementing the :class:`os.PathLike` interface where "
"the :meth:`~os.PathLike.__fspath__` method returns a string, such as another "
"path object::"
msgstr ""

#: ../../library/pathlib.rst:128
msgid "When *pathsegments* is empty, the current directory is assumed::"
msgstr ""

#: ../../library/pathlib.rst:133
msgid ""
"If a segment is an absolute path, all previous segments are ignored "
"(like :func:`os.path.join`)::"
msgstr ""

#: ../../library/pathlib.rst:141
msgid ""
"On Windows, the drive is not reset when a rooted relative path segment "
"(e.g., ``r'\\foo'``) is encountered::"
msgstr ""

#: ../../library/pathlib.rst:147
msgid ""
"Spurious slashes and single dots are collapsed, but double dots (``'..'``) "
"and leading double slashes (``'//'``) are not, since this would change the "
"meaning of a path for various reasons (e.g. symbolic links, UNC paths)::"
msgstr ""

#: ../../library/pathlib.rst:160
msgid ""
"(a na√Øve approach would make ``PurePosixPath('foo/../bar')`` equivalent to "
"``PurePosixPath('bar')``, which is wrong if ``foo`` is a symbolic link to "
"another directory)"
msgstr ""

#: ../../library/pathlib.rst:164
msgid ""
"Pure path objects implement the :class:`os.PathLike` interface, allowing "
"them to be used anywhere the interface is accepted."
msgstr ""

#: ../../library/pathlib.rst:167
msgid "Added support for the :class:`os.PathLike` interface."
msgstr ""

#: ../../library/pathlib.rst:172
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents non-Windows "
"filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:178 ../../library/pathlib.rst:190
#: ../../library/pathlib.rst:760 ../../library/pathlib.rst:770
#: ../../library/pathlib.rst:785
msgid "*pathsegments* is specified similarly to :class:`PurePath`."
msgstr ""

#: ../../library/pathlib.rst:182
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents Windows "
"filesystem paths, including `UNC paths`_::"
msgstr ""

#: ../../library/pathlib.rst:194
msgid ""
"Regardless of the system you're running on, you can instantiate all of these "
"classes, since they don't provide any operation that does system calls."
msgstr ""

#: ../../library/pathlib.rst:199
msgid "General properties"
msgstr ""

#: ../../library/pathlib.rst:201
msgid ""
"Paths are immutable and :term:`hashable`.  Paths of a same flavour are "
"comparable and orderable.  These properties respect the flavour's case-"
"folding semantics::"
msgstr ""

#: ../../library/pathlib.rst:214
msgid "Paths of a different flavour compare unequal and cannot be ordered::"
msgstr ""

#: ../../library/pathlib.rst:225
msgid "Operators"
msgstr ""

#: ../../library/pathlib.rst:227
msgid ""
"The slash operator helps create child paths, like :func:`os.path.join`. If "
"the argument is an absolute path, the previous path is ignored. On Windows, "
"the drive is not reset when the argument is a rooted relative path (e.g., "
"``r'\\foo'``)::"
msgstr ""

#: ../../library/pathlib.rst:245
msgid ""
"A path object can be used anywhere an object "
"implementing :class:`os.PathLike` is accepted::"
msgstr ""

#: ../../library/pathlib.rst:253
msgid ""
"The string representation of a path is the raw filesystem path itself (in "
"native form, e.g. with backslashes under Windows), which you can pass to any "
"function taking a file path as a string::"
msgstr ""

#: ../../library/pathlib.rst:264
msgid ""
"Similarly, calling :class:`bytes` on a path gives the raw filesystem path as "
"a bytes object, as encoded by :func:`os.fsencode`::"
msgstr ""

#: ../../library/pathlib.rst:271
msgid ""
"Calling :class:`bytes` is only recommended under Unix.  Under Windows, the "
"unicode form is the canonical representation of filesystem paths."
msgstr ""

#: ../../library/pathlib.rst:276
msgid "Accessing individual parts"
msgstr ""

#: ../../library/pathlib.rst:278
msgid ""
"To access the individual \"parts\" (components) of a path, use the following "
"property:"
msgstr ""

#: ../../library/pathlib.rst:283
msgid "A tuple giving access to the path's various components::"
msgstr ""

#: ../../library/pathlib.rst:293
msgid "(note how the drive and local root are regrouped in a single part)"
msgstr ""

#: ../../library/pathlib.rst:297
msgid "Methods and properties"
msgstr ""

#: ../../library/pathlib.rst:303
msgid "Pure paths provide the following methods and properties:"
msgstr ""

#: ../../library/pathlib.rst:307
msgid ""
"The implementation of the :mod:`os.path` module used for low-level path "
"parsing and joining: either :mod:`posixpath` or :mod:`ntpath`."
msgstr ""

#: ../../library/pathlib.rst:314
msgid "A string representing the drive letter or name, if any::"
msgstr ""

#: ../../library/pathlib.rst:323
msgid "UNC shares are also considered drives::"
msgstr ""

#: ../../library/pathlib.rst:330
msgid "A string representing the (local or global) root, if any::"
msgstr ""

#: ../../library/pathlib.rst:339
msgid "UNC shares always have a root::"
msgstr ""

#: ../../library/pathlib.rst:344
msgid ""
"If the path starts with more than two successive "
"slashes, :class:`~pathlib.PurePosixPath` collapses them::"
msgstr ""

#: ../../library/pathlib.rst:356
msgid ""
"This behavior conforms to *The Open Group Base Specifications Issue 6*, "
"paragraph `4.11 Pathname Resolution <https://pubs.opengroup.org/onlinepubs/"
"009695399/basedefs/xbd_chap04.html#tag_04_11>`_:"
msgstr ""

#: ../../library/pathlib.rst:360
msgid ""
"*\"A pathname that begins with two successive slashes may be interpreted in "
"an implementation-defined manner, although more than two leading slashes "
"shall be treated as a single slash.\"*"
msgstr ""

#: ../../library/pathlib.rst:366
msgid "The concatenation of the drive and root::"
msgstr ""

#: ../../library/pathlib.rst:380
msgid ""
"An immutable sequence providing access to the logical ancestors of the path::"
msgstr ""

#: ../../library/pathlib.rst:391
msgid ""
"The parents sequence now supports :term:`slices <slice>` and negative index "
"values."
msgstr ""

#: ../../library/pathlib.rst:396
msgid "The logical parent of the path::"
msgstr ""

#: ../../library/pathlib.rst:402
msgid "You cannot go past an anchor, or empty path::"
msgstr ""

#: ../../library/pathlib.rst:412
msgid "This is a purely lexical operation, hence the following behaviour::"
msgstr ""

#: ../../library/pathlib.rst:418
msgid ""
"If you want to walk an arbitrary filesystem path upwards, it is recommended "
"to first call :meth:`Path.resolve` so as to resolve symlinks and eliminate "
"``\"..\"`` components."
msgstr ""

#: ../../library/pathlib.rst:425
msgid ""
"A string representing the final path component, excluding the drive and "
"root, if any::"
msgstr ""

#: ../../library/pathlib.rst:431
msgid "UNC drive names are not considered::"
msgstr ""

#: ../../library/pathlib.rst:441
msgid "The last dot-separated portion of the final component, if any::"
msgstr ""

#: ../../library/pathlib.rst:450
msgid "This is commonly called the file extension."
msgstr ""

#: ../../library/pathlib.rst:454
msgid "A list of the path's suffixes, often called file extensions::"
msgstr ""

#: ../../library/pathlib.rst:466
msgid "The final path component, without its suffix::"
msgstr ""

#: ../../library/pathlib.rst:478
msgid ""
"Return a string representation of the path with forward slashes (``/``)::"
msgstr ""

#: ../../library/pathlib.rst:489
msgid ""
"Return whether the path is absolute or not.  A path is considered absolute "
"if it has both a root and (if the flavour allows) a drive::"
msgstr ""

#: ../../library/pathlib.rst:509
msgid "Return whether or not this path is relative to the *other* path."
msgstr ""

#: ../../library/pathlib.rst:517
msgid ""
"This method is string-based; it neither accesses the filesystem nor treats "
"\"``..``\" segments specially. The following code is equivalent:"
msgstr ""

#: ../../library/pathlib.rst:528
msgid ""
"Passing additional arguments is deprecated; if supplied, they are joined "
"with *other*."
msgstr ""

#: ../../library/pathlib.rst:533
msgid ""
"With :class:`PureWindowsPath`, return ``True`` if the path is considered "
"reserved under Windows, ``False`` otherwise.  With :class:`PurePosixPath`, "
"``False`` is always returned."
msgstr ""

#: ../../library/pathlib.rst:537
msgid ""
"Windows path names that contain a colon, or end with a dot or a space, are "
"considered reserved. UNC paths may be reserved."
msgstr ""

#: ../../library/pathlib.rst:543
msgid ""
"This method is deprecated; use :func:`os.path.isreserved` to detect reserved "
"paths on Windows."
msgstr ""

#: ../../library/pathlib.rst:547
msgid ""
"Calling this method is equivalent to combining the path with each of the "
"given *pathsegments* in turn::"
msgstr ""

#: ../../library/pathlib.rst:562
msgid ""
"Match this path against the provided glob-style pattern.  Return ``True`` if "
"matching is successful, ``False`` otherwise.  For example::"
msgstr ""

#: ../../library/pathlib.rst:575 ../../library/pathlib.rst:1004
msgid ":ref:`pathlib-pattern-language` documentation."
msgstr ""

#: ../../library/pathlib.rst:577
msgid "As with other methods, case-sensitivity follows platform defaults::"
msgstr ""

#: ../../library/pathlib.rst:584
msgid ""
"Set *case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""

#: ../../library/pathlib.rst:591
msgid ""
"Match this path against the provided non-recursive glob-style pattern. "
"Return ``True`` if matching is successful, ``False`` otherwise."
msgstr ""

#: ../../library/pathlib.rst:594
msgid ""
"This method is similar to :meth:`~PurePath.full_match`, but empty patterns "
"aren't allowed (:exc:`ValueError` is raised), the recursive wildcard "
"\"``**``\" isn't supported (it acts like non-recursive \"``*``\"), and if a "
"relative pattern is provided, then matching is done from the right::"
msgstr ""

#: ../../library/pathlib.rst:606 ../../library/pathlib.rst:1023
#: ../../library/pathlib.rst:1048
msgid "The *pattern* parameter accepts a :term:`path-like object`."
msgstr ""

#: ../../library/pathlib.rst:609 ../../library/pathlib.rst:1017
#: ../../library/pathlib.rst:1042
msgid "The *case_sensitive* parameter was added."
msgstr ""

#: ../../library/pathlib.rst:615
msgid ""
"Compute a version of this path relative to the path represented by *other*.  "
"If it's impossible, :exc:`ValueError` is raised::"
msgstr ""

#: ../../library/pathlib.rst:630
msgid ""
"When *walk_up* is false (the default), the path must start with *other*. "
"When the argument is true, ``..`` entries may be added to form the relative "
"path. In all other cases, such as the paths referencing different "
"drives, :exc:`ValueError` is raised.::"
msgstr ""

#: ../../library/pathlib.rst:645
msgid ""
"This function is part of :class:`PurePath` and works with strings. It does "
"not check or access the underlying file structure. This can impact the "
"*walk_up* option as it assumes that no symlinks are present in the path; "
"call :meth:`~Path.resolve` first if necessary to resolve symlinks."
msgstr ""

#: ../../library/pathlib.rst:651
msgid ""
"The *walk_up* parameter was added (old behavior is the same as "
"``walk_up=False``)."
msgstr ""

#: ../../library/pathlib.rst:656
msgid ""
"Passing additional positional arguments is deprecated; if supplied, they are "
"joined with *other*."
msgstr ""

#: ../../library/pathlib.rst:661
msgid ""
"Return a new path with the :attr:`name` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""

#: ../../library/pathlib.rst:678
msgid ""
"Return a new path with the :attr:`stem` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""

#: ../../library/pathlib.rst:702
msgid ""
"Return a new path with the :attr:`suffix` changed.  If the original path "
"doesn't have a suffix, the new *suffix* is appended instead.  If the "
"*suffix* is an empty string, the original suffix is removed::"
msgstr ""

#: ../../library/pathlib.rst:719
msgid ""
"Create a new path object of the same type by combining the given "
"*pathsegments*. This method is called whenever a derivative path is created, "
"such as from :attr:`parent` and :meth:`relative_to`. Subclasses may override "
"this method to pass information to derivative paths, for example::"
msgstr ""

#: ../../library/pathlib.rst:745
msgid "Concrete paths"
msgstr ""

#: ../../library/pathlib.rst:747
msgid ""
"Concrete paths are subclasses of the pure path classes.  In addition to "
"operations provided by the latter, they also provide methods to do system "
"calls on path objects.  There are three ways to instantiate concrete paths:"
msgstr ""

#: ../../library/pathlib.rst:753
msgid ""
"A subclass of :class:`PurePath`, this class represents concrete paths of the "
"system's path flavour (instantiating it creates either a :class:`PosixPath` "
"or a :class:`WindowsPath`)::"
msgstr ""

#: ../../library/pathlib.rst:764
msgid ""
"A subclass of :class:`Path` and :class:`PurePosixPath`, this class "
"represents concrete non-Windows filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:772
msgid ""
"Raises :exc:`UnsupportedOperation` on Windows. In previous "
"versions, :exc:`NotImplementedError` was raised instead."
msgstr ""

#: ../../library/pathlib.rst:779
msgid ""
"A subclass of :class:`Path` and :class:`PureWindowsPath`, this class "
"represents concrete Windows filesystem paths::"
msgstr ""

#: ../../library/pathlib.rst:787
msgid ""
"Raises :exc:`UnsupportedOperation` on non-Windows platforms. In previous "
"versions, :exc:`NotImplementedError` was raised instead."
msgstr ""

#: ../../library/pathlib.rst:792
msgid ""
"You can only instantiate the class flavour that corresponds to your system "
"(allowing system calls on non-compatible path flavours could lead to bugs or "
"failures in your application)::"
msgstr ""

#: ../../library/pathlib.rst:812
msgid "File URIs"
msgstr ""

#: ../../library/pathlib.rst:814
msgid ""
"Concrete path objects can be created from, and represented as, 'file' URIs "
"conforming to :rfc:`8089`."
msgstr ""

#: ../../library/pathlib.rst:819
msgid ""
"File URIs are not portable across machines with different :ref:`filesystem "
"encodings <filesystem-encoding>`."
msgstr ""

#: ../../library/pathlib.rst:824
msgid "Return a new path object from parsing a 'file' URI. For example::"
msgstr ""

#: ../../library/pathlib.rst:829
msgid "On Windows, DOS device and UNC paths may be parsed from URIs::"
msgstr ""

#: ../../library/pathlib.rst:836
msgid "Several variant forms are supported::"
msgstr ""

#: ../../library/pathlib.rst:847
msgid ""
":exc:`ValueError` is raised if the URI does not start with ``file:``, or the "
"parsed path isn't absolute."
msgstr ""

#: ../../library/pathlib.rst:855
msgid ""
"Represent the path as a 'file' URI.  :exc:`ValueError` is raised if the path "
"isn't absolute."
msgstr ""

#: ../../library/pathlib.rst:867
msgid ""
"For historical reasons, this method is also available from :class:`PurePath` "
"objects. However, its use of :func:`os.fsencode` makes it strictly impure."
msgstr ""

#: ../../library/pathlib.rst:873
msgid "Methods"
msgstr "M√©todos"

#: ../../library/pathlib.rst:875
msgid ""
"Concrete paths provide the following methods in addition to pure paths "
"methods.  Many of these methods can raise an :exc:`OSError` if a system call "
"fails (for example because the path doesn't exist)."
msgstr ""

#: ../../library/pathlib.rst:881
msgid ""
":meth:`~Path.exists()`, :meth:`~Path.is_dir()`, :meth:`~Path.is_file()`, :meth:`~Path.is_mount()`, :meth:`~Path.is_symlink()`, :meth:`~Path.is_block_device()`, :meth:`~Path.is_char_device()`, :meth:`~Path.is_fifo()`, :meth:`~Path.is_socket()` "
"now return ``False`` instead of raising an exception for paths that contain "
"characters unrepresentable at the OS level."
msgstr ""

#: ../../library/pathlib.rst:891
msgid ""
"Return a new path object representing the current directory (as returned "
"by :func:`os.getcwd`)::"
msgstr ""

#: ../../library/pathlib.rst:900
msgid ""
"Return a new path object representing the user's home directory (as returned "
"by :func:`os.path.expanduser` with ``~`` construct). If the home directory "
"can't be resolved, :exc:`RuntimeError` is raised."
msgstr ""

#: ../../library/pathlib.rst:914
msgid ""
"Return a :class:`os.stat_result` object containing information about this "
"path, like :func:`os.stat`. The result is looked up at each call to this "
"method."
msgstr ""

#: ../../library/pathlib.rst:917
msgid ""
"This method normally follows symlinks; to stat a symlink add the argument "
"``follow_symlinks=False``, or use :meth:`~Path.lstat`."
msgstr ""

#: ../../library/pathlib.rst:928 ../../library/pathlib.rst:948
#: ../../library/pathlib.rst:969 ../../library/pathlib.rst:1064
#: ../../library/pathlib.rst:1079 ../../library/pathlib.rst:1094
#: ../../library/pathlib.rst:1344
msgid "The *follow_symlinks* parameter was added."
msgstr ""

#: ../../library/pathlib.rst:933
msgid "Change the file mode and permissions, like :func:`os.chmod`."
msgstr ""

#: ../../library/pathlib.rst:935
msgid ""
"This method normally follows symlinks. Some Unix flavours support changing "
"permissions on the symlink itself; on these platforms you may add the "
"argument ``follow_symlinks=False``, or use :meth:`~Path.lchmod`."
msgstr ""

#: ../../library/pathlib.rst:953
msgid "Return ``True`` if the path points to an existing file or directory."
msgstr ""

#: ../../library/pathlib.rst:955
msgid ""
"This method normally follows symlinks; to check if a symlink exists, add the "
"argument ``follow_symlinks=False``."
msgstr ""

#: ../../library/pathlib.rst:974
msgid ""
"Return a new path with expanded ``~`` and ``~user`` constructs, as returned "
"by :meth:`os.path.expanduser`. If a home directory can't be "
"resolved, :exc:`RuntimeError` is raised."
msgstr ""

#: ../../library/pathlib.rst:989
msgid ""
"Glob the given relative *pattern* in the directory represented by this path, "
"yielding all matching files (of any kind)::"
msgstr ""

#: ../../library/pathlib.rst:1006
msgid ""
"By default, or when the *case_sensitive* keyword-only argument is set to "
"``None``, this method matches paths using platform-specific casing rules: "
"typically, case-sensitive on POSIX, and case-insensitive on Windows. Set "
"*case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""

#: ../../library/pathlib.rst:1011
msgid ""
"By default, or when the *recurse_symlinks* keyword-only argument is set to "
"``False``, this method follows symlinks except when expanding \"``**``\" "
"wildcards. Set *recurse_symlinks* to ``True`` to always follow symlinks."
msgstr ""

#: ../../library/pathlib.rst:1015
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.glob`` with "
"arguments ``self``, ``pattern``."
msgstr ""

#: ../../library/pathlib.rst:1020 ../../library/pathlib.rst:1045
msgid "The *recurse_symlinks* parameter was added."
msgstr ""

#: ../../library/pathlib.rst:1026
msgid ""
"Any :exc:`OSError` exceptions raised from scanning the filesystem are "
"suppressed. In previous versions, such exceptions are suppressed in many "
"cases, but not all."
msgstr ""

#: ../../library/pathlib.rst:1034
msgid ""
"Glob the given relative *pattern* recursively.  This is like "
"calling :func:`Path.glob` with \"``**/``\" added in front of the *pattern*."
msgstr ""

#: ../../library/pathlib.rst:1038
msgid ":ref:`pathlib-pattern-language` and :meth:`Path.glob` documentation."
msgstr ""

#: ../../library/pathlib.rst:1040
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.rglob`` with "
"arguments ``self``, ``pattern``."
msgstr ""

#: ../../library/pathlib.rst:1054
msgid ""
"Return the name of the group owning the file. :exc:`KeyError` is raised if "
"the file's gid isn't found in the system database."
msgstr ""

#: ../../library/pathlib.rst:1057
msgid ""
"This method normally follows symlinks; to get the group of the symlink, add "
"the argument ``follow_symlinks=False``."
msgstr ""

#: ../../library/pathlib.rst:1060
msgid ""
"Raises :exc:`UnsupportedOperation` if the :mod:`grp` module is not "
"available. In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""

#: ../../library/pathlib.rst:1070
msgid ""
"Return ``True`` if the path points to a directory, ``False`` if it points to "
"another kind of file."
msgstr ""

#: ../../library/pathlib.rst:1073 ../../library/pathlib.rst:1088
#: ../../library/pathlib.rst:1136 ../../library/pathlib.rst:1145
#: ../../library/pathlib.rst:1154 ../../library/pathlib.rst:1163
msgid ""
"``False`` is also returned if the path doesn't exist or is a broken symlink; "
"other errors (such as permission errors) are propagated."
msgstr ""

#: ../../library/pathlib.rst:1076
msgid ""
"This method normally follows symlinks; to exclude symlinks to directories, "
"add the argument ``follow_symlinks=False``."
msgstr ""

#: ../../library/pathlib.rst:1085
msgid ""
"Return ``True`` if the path points to a regular file, ``False`` if it points "
"to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:1091
msgid ""
"This method normally follows symlinks; to exclude symlinks, add the argument "
"``follow_symlinks=False``."
msgstr ""

#: ../../library/pathlib.rst:1100
msgid ""
"Return ``True`` if the path points to a junction, and ``False`` for any "
"other type of file. Currently only Windows supports junctions."
msgstr ""

#: ../../library/pathlib.rst:1108
msgid ""
"Return ``True`` if the path is a :dfn:`mount point`: a point in a file "
"system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`path/..`, is on a different "
"device than *path*, or whether :file:`path/..` and *path* point to the same "
"i-node on the same device --- this should detect mount points for all Unix "
"and POSIX variants.  On Windows, a mount point is considered to be a drive "
"letter root (e.g. ``c:\\``), a UNC share (e.g. ``\\\\server\\share``), or a "
"mounted filesystem directory."
msgstr ""

#: ../../library/pathlib.rst:1119
msgid "Windows support was added."
msgstr ""

#: ../../library/pathlib.rst:1125
msgid ""
"Return ``True`` if the path points to a symbolic link, ``False`` otherwise."
msgstr ""

#: ../../library/pathlib.rst:1127
msgid ""
"``False`` is also returned if the path doesn't exist; other errors (such as "
"permission errors) are propagated."
msgstr ""

#: ../../library/pathlib.rst:1133
msgid ""
"Return ``True`` if the path points to a Unix socket (or a symbolic link "
"pointing to a Unix socket), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:1142
msgid ""
"Return ``True`` if the path points to a FIFO (or a symbolic link pointing to "
"a FIFO), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:1151
msgid ""
"Return ``True`` if the path points to a block device (or a symbolic link "
"pointing to a block device), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:1160
msgid ""
"Return ``True`` if the path points to a character device (or a symbolic link "
"pointing to a character device), ``False`` if it points to another kind of "
"file."
msgstr ""

#: ../../library/pathlib.rst:1169
msgid ""
"When the path points to a directory, yield path objects of the directory "
"contents::"
msgstr ""

#: ../../library/pathlib.rst:1183
msgid ""
"The children are yielded in arbitrary order, and the special entries ``'.'`` "
"and ``'..'`` are not included.  If a file is removed from or added to the "
"directory after creating the iterator, whether a path object for that file "
"be included is unspecified."
msgstr ""

#: ../../library/pathlib.rst:1190
msgid ""
"Generate the file names in a directory tree by walking the tree either top-"
"down or bottom-up."
msgstr ""

#: ../../library/pathlib.rst:1193
msgid ""
"For each directory in the directory tree rooted at *self* (including *self* "
"but excluding '.' and '..'), the method yields a 3-tuple of ``(dirpath, "
"dirnames, filenames)``."
msgstr ""

#: ../../library/pathlib.rst:1197
msgid ""
"*dirpath* is a :class:`Path` to the directory currently being walked, "
"*dirnames* is a list of strings for the names of subdirectories in *dirpath* "
"(excluding ``'.'`` and ``'..'``), and *filenames* is a list of strings for "
"the names of the non-directory files in *dirpath*. To get a full path (which "
"begins with *self*) to a file or directory in *dirpath*, do ``dirpath / "
"name``. Whether or not the lists are sorted is file system-dependent."
msgstr ""

#: ../../library/pathlib.rst:1205
msgid ""
"If the optional argument *top_down* is true (which is the default), the "
"triple for a directory is generated before the triples for any of its "
"subdirectories (directories are walked top-down).  If *top_down* is false, "
"the triple for a directory is generated after the triples for all of its "
"subdirectories (directories are walked bottom-up). No matter the value of "
"*top_down*, the list of subdirectories is retrieved before the triples for "
"the directory and its subdirectories are walked."
msgstr ""

#: ../../library/pathlib.rst:1213
msgid ""
"When *top_down* is true, the caller can modify the *dirnames* list in-place "
"(for example, using :keyword:`del` or slice assignment), "
"and :meth:`Path.walk` will only recurse into the subdirectories whose names "
"remain in *dirnames*. This can be used to prune the search, or to impose a "
"specific order of visiting, or even to inform :meth:`Path.walk` about "
"directories the caller creates or renames before it "
"resumes :meth:`Path.walk` again. Modifying *dirnames* when *top_down* is "
"false has no effect on the behavior of :meth:`Path.walk()` since the "
"directories in *dirnames* have already been generated by the time *dirnames* "
"is yielded to the caller."
msgstr ""

#: ../../library/pathlib.rst:1223
msgid ""
"By default, errors from :func:`os.scandir` are ignored.  If the optional "
"argument *on_error* is specified, it should be a callable; it will be called "
"with one argument, an :exc:`OSError` instance. The callable can handle the "
"error to continue the walk or re-raise it to stop the walk. Note that the "
"filename is available as the ``filename`` attribute of the exception object."
msgstr ""

#: ../../library/pathlib.rst:1229
msgid ""
"By default, :meth:`Path.walk` does not follow symbolic links, and instead "
"adds them to the *filenames* list. Set *follow_symlinks* to true to resolve "
"symlinks and place them in *dirnames* and *filenames* as appropriate for "
"their targets, and consequently visit directories pointed to by symlinks "
"(where supported)."
msgstr ""

#: ../../library/pathlib.rst:1236
msgid ""
"Be aware that setting *follow_symlinks* to true can lead to infinite "
"recursion if a link points to a parent directory of "
"itself. :meth:`Path.walk` does not keep track of the directories it has "
"already visited."
msgstr ""

#: ../../library/pathlib.rst:1241
msgid ""
":meth:`Path.walk` assumes the directories it walks are not modified during "
"execution. For example, if a directory from *dirnames* has been replaced "
"with a symlink and *follow_symlinks* is false, :meth:`Path.walk` will still "
"try to descend into it. To prevent such behavior, remove directories from "
"*dirnames* as appropriate."
msgstr ""

#: ../../library/pathlib.rst:1249
msgid ""
"Unlike :func:`os.walk`, :meth:`Path.walk` lists symlinks to directories in "
"*filenames* if *follow_symlinks* is false."
msgstr ""

#: ../../library/pathlib.rst:1252
msgid ""
"This example displays the number of bytes used by all files in each "
"directory, while ignoring ``__pycache__`` directories::"
msgstr ""

#: ../../library/pathlib.rst:1268
msgid ""
"This next example is a simple implementation of :func:`shutil.rmtree`. "
"Walking the tree bottom-up is essential as :func:`rmdir` doesn't allow "
"deleting a directory before it is empty::"
msgstr ""

#: ../../library/pathlib.rst:1285
msgid ""
"Like :meth:`Path.chmod` but, if the path points to a symbolic link, the "
"symbolic link's mode is changed rather than its target's."
msgstr ""

#: ../../library/pathlib.rst:1291
msgid ""
"Like :meth:`Path.stat` but, if the path points to a symbolic link, return "
"the symbolic link's information rather than its target's."
msgstr ""

#: ../../library/pathlib.rst:1297
msgid ""
"Create a new directory at this given path.  If *mode* is given, it is "
"combined with the process' ``umask`` value to determine the file mode and "
"access flags.  If the path already exists, :exc:`FileExistsError` is raised."
msgstr ""

#: ../../library/pathlib.rst:1302
msgid ""
"If *parents* is true, any missing parents of this path are created as "
"needed; they are created with the default permissions without taking *mode* "
"into account (mimicking the POSIX ``mkdir -p`` command)."
msgstr ""

#: ../../library/pathlib.rst:1306
msgid ""
"If *parents* is false (the default), a missing parent "
"raises :exc:`FileNotFoundError`."
msgstr ""

#: ../../library/pathlib.rst:1309
msgid ""
"If *exist_ok* is false (the default), :exc:`FileExistsError` is raised if "
"the target directory already exists."
msgstr ""

#: ../../library/pathlib.rst:1312
msgid ""
"If *exist_ok* is true, :exc:`FileExistsError` will not be raised unless the "
"given path already exists in the file system and is not a directory (same "
"behavior as the POSIX ``mkdir -p`` command)."
msgstr ""

#: ../../library/pathlib.rst:1316
msgid "The *exist_ok* parameter was added."
msgstr ""

#: ../../library/pathlib.rst:1322
msgid ""
"Open the file pointed to by the path, like the built-in :func:`open` "
"function does::"
msgstr ""

#: ../../library/pathlib.rst:1334
msgid ""
"Return the name of the user owning the file. :exc:`KeyError` is raised if "
"the file's uid isn't found in the system database."
msgstr ""

#: ../../library/pathlib.rst:1337
msgid ""
"This method normally follows symlinks; to get the owner of the symlink, add "
"the argument ``follow_symlinks=False``."
msgstr ""

#: ../../library/pathlib.rst:1340
msgid ""
"Raises :exc:`UnsupportedOperation` if the :mod:`pwd` module is not "
"available. In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""

#: ../../library/pathlib.rst:1350
msgid "Return the binary contents of the pointed-to file as a bytes object::"
msgstr ""

#: ../../library/pathlib.rst:1363
msgid "Return the decoded contents of the pointed-to file as a string::"
msgstr ""

#: ../../library/pathlib.rst:1371
msgid ""
"The file is opened and then closed. The optional parameters have the same "
"meaning as in :func:`open`."
msgstr ""

#: ../../library/pathlib.rst:1376 ../../library/pathlib.rst:1606
msgid "The *newline* parameter was added."
msgstr ""

#: ../../library/pathlib.rst:1381
msgid ""
"Return the path to which the symbolic link points (as returned "
"by :func:`os.readlink`)::"
msgstr ""

#: ../../library/pathlib.rst:1391
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.readlink` is not available. "
"In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""

#: ../../library/pathlib.rst:1398
msgid ""
"Rename this file or directory to the given *target*, and return a new Path "
"instance pointing to *target*.  On Unix, if *target* exists and is a file, "
"it will be replaced silently if the user has permission. On Windows, if "
"*target* exists, :exc:`FileExistsError` will be raised. *target* can be "
"either a string or another path object::"
msgstr ""

#: ../../library/pathlib.rst:1413 ../../library/pathlib.rst:1429
msgid ""
"The target path may be absolute or relative. Relative paths are interpreted "
"relative to the current working directory, *not* the directory of the Path "
"object."
msgstr ""

#: ../../library/pathlib.rst:1417
msgid ""
"It is implemented in terms of :func:`os.rename` and gives the same "
"guarantees."
msgstr ""

#: ../../library/pathlib.rst:1419 ../../library/pathlib.rst:1433
msgid "Added return value, return the new Path instance."
msgstr ""

#: ../../library/pathlib.rst:1425
msgid ""
"Rename this file or directory to the given *target*, and return a new Path "
"instance pointing to *target*.  If *target* points to an existing file or "
"empty directory, it will be unconditionally replaced."
msgstr ""

#: ../../library/pathlib.rst:1439
msgid ""
"Make the path absolute, without normalization or resolving symlinks. Returns "
"a new path object::"
msgstr ""

#: ../../library/pathlib.rst:1451
msgid ""
"Make the path absolute, resolving any symlinks.  A new path object is "
"returned::"
msgstr ""

#: ../../library/pathlib.rst:1460
msgid ""
"\"``..``\" components are also eliminated (this is the only method to do "
"so)::"
msgstr ""

#: ../../library/pathlib.rst:1466
msgid ""
"If a path doesn't exist or a symlink loop is encountered, and *strict* is "
"``True``, :exc:`OSError` is raised.  If *strict* is ``False``, the path is "
"resolved as far as possible and any remainder is appended without checking "
"whether it exists."
msgstr ""

#: ../../library/pathlib.rst:1471
msgid "The *strict* parameter was added (pre-3.6 behavior is strict)."
msgstr ""

#: ../../library/pathlib.rst:1474
msgid ""
"Symlink loops are treated like other errors: :exc:`OSError` is raised in "
"strict mode, and no exception is raised in non-strict mode. In previous "
"versions, :exc:`RuntimeError` is raised no matter the value of *strict*."
msgstr ""

#: ../../library/pathlib.rst:1481
msgid "Remove this directory.  The directory must be empty."
msgstr ""

#: ../../library/pathlib.rst:1486
msgid ""
"Return whether this path points to the same file as *other_path*, which can "
"be either a Path object, or a string.  The semantics are similar "
"to :func:`os.path.samefile` and :func:`os.path.samestat`."
msgstr ""

#: ../../library/pathlib.rst:1490
msgid ""
"An :exc:`OSError` can be raised if either file cannot be accessed for some "
"reason."
msgstr ""

#: ../../library/pathlib.rst:1507
msgid "Make this path a symbolic link pointing to *target*."
msgstr ""

#: ../../library/pathlib.rst:1509
msgid ""
"On Windows, a symlink represents either a file or a directory, and does not "
"morph to the target dynamically.  If the target is present, the type of the "
"symlink will be created to match. Otherwise, the symlink will be created as "
"a directory if *target_is_directory* is ``True`` or a file symlink (the "
"default) otherwise.  On non-Windows platforms, *target_is_directory* is "
"ignored."
msgstr ""

#: ../../library/pathlib.rst:1527
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.symlink`'s."
msgstr ""

#: ../../library/pathlib.rst:1530
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.symlink` is not available. "
"In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""

#: ../../library/pathlib.rst:1537
msgid "Make this path a hard link to the same file as *target*."
msgstr ""

#: ../../library/pathlib.rst:1540
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.link`'s."
msgstr ""

#: ../../library/pathlib.rst:1545
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.link` is not available. In "
"previous versions, :exc:`NotImplementedError` was raised."
msgstr ""

#: ../../library/pathlib.rst:1552
msgid ""
"Create a file at this given path.  If *mode* is given, it is combined with "
"the process' ``umask`` value to determine the file mode and access flags.  "
"If the file already exists, the function succeeds if *exist_ok* is true (and "
"its modification time is updated to the current time), "
"otherwise :exc:`FileExistsError` is raised."
msgstr ""

#: ../../library/pathlib.rst:1561
msgid ""
"Remove this file or symbolic link.  If the path points to a directory, "
"use :func:`Path.rmdir` instead."
msgstr ""

#: ../../library/pathlib.rst:1564
msgid ""
"If *missing_ok* is false (the default), :exc:`FileNotFoundError` is raised "
"if the path does not exist."
msgstr ""

#: ../../library/pathlib.rst:1567
msgid ""
"If *missing_ok* is true, :exc:`FileNotFoundError` exceptions will be ignored "
"(same behavior as the POSIX ``rm -f`` command)."
msgstr ""

#: ../../library/pathlib.rst:1570
msgid "The *missing_ok* parameter was added."
msgstr ""

#: ../../library/pathlib.rst:1576
msgid ""
"Open the file pointed to in bytes mode, write *data* to it, and close the "
"file::"
msgstr ""

#: ../../library/pathlib.rst:1585
msgid "An existing file of the same name is overwritten."
msgstr ""

#: ../../library/pathlib.rst:1592
msgid ""
"Open the file pointed to in text mode, write *data* to it, and close the "
"file::"
msgstr ""

#: ../../library/pathlib.rst:1601
msgid ""
"An existing file of the same name is overwritten. The optional parameters "
"have the same meaning as in :func:`open`."
msgstr ""

#: ../../library/pathlib.rst:1613
msgid "Pattern language"
msgstr ""

#: ../../library/pathlib.rst:1615
msgid ""
"The following wildcards are supported in patterns "
"for :meth:`~PurePath.full_match`, :meth:`~Path.glob` and :meth:`~Path.rglob`:"
msgstr ""

#: ../../library/pathlib.rst:1618
msgid "``**`` (entire segment)"
msgstr ""

#: ../../library/pathlib.rst:1619
msgid "Matches any number of file or directory segments, including zero."
msgstr ""

#: ../../library/pathlib.rst:1620
msgid "``*`` (entire segment)"
msgstr ""

#: ../../library/pathlib.rst:1621
msgid "Matches one file or directory segment."
msgstr ""

#: ../../library/pathlib.rst:1622
msgid "``*`` (part of a segment)"
msgstr ""

#: ../../library/pathlib.rst:1623
msgid "Matches any number of non-separator characters, including zero."
msgstr ""

#: ../../library/pathlib.rst:1624
msgid "``?``"
msgstr ""

#: ../../library/pathlib.rst:1625
msgid "Matches one non-separator character."
msgstr ""

#: ../../library/pathlib.rst:1626
msgid "``[seq]``"
msgstr ""

#: ../../library/pathlib.rst:1627
msgid "Matches one character in *seq*."
msgstr ""

#: ../../library/pathlib.rst:1628
msgid "``[!seq]``"
msgstr ""

#: ../../library/pathlib.rst:1629
msgid "Matches one character not in *seq*."
msgstr ""

#: ../../library/pathlib.rst:1631
msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``\"[?]\"`` matches the character ``\"?\"``."
msgstr ""

#: ../../library/pathlib.rst:1634
msgid "The \"``**``\" wildcard enables recursive globbing. A few examples:"
msgstr ""

#: ../../library/pathlib.rst:1637
msgid "Pattern"
msgstr ""

#: ../../library/pathlib.rst:1637
msgid "Meaning"
msgstr ""

#: ../../library/pathlib.rst:1639
msgid "\"``**/*``\""
msgstr ""

#: ../../library/pathlib.rst:1639
msgid "Any path with at least one segment."
msgstr ""

#: ../../library/pathlib.rst:1640
msgid "\"``**/*.py``\""
msgstr ""

#: ../../library/pathlib.rst:1640
msgid "Any path with a final segment ending \"``.py``\"."
msgstr ""

#: ../../library/pathlib.rst:1641
msgid "\"``assets/**``\""
msgstr ""

#: ../../library/pathlib.rst:1641
msgid "Any path starting with \"``assets/``\"."
msgstr ""

#: ../../library/pathlib.rst:1642
msgid "\"``assets/**/*``\""
msgstr ""

#: ../../library/pathlib.rst:1642
msgid ""
"Any path starting with \"``assets/``\", excluding \"``assets/``\" itself."
msgstr ""

#: ../../library/pathlib.rst:1646
msgid ""
"Globbing with the \"``**``\" wildcard visits every directory in the tree. "
"Large directory trees may take a long time to search."
msgstr ""

#: ../../library/pathlib.rst:1649
msgid ""
"Globbing with a pattern that ends with \"``**``\" returns both files and "
"directories. In previous versions, only directories were returned."
msgstr ""

#: ../../library/pathlib.rst:1653
msgid ""
"In :meth:`Path.glob` and :meth:`~Path.rglob`, a trailing slash may be added "
"to the pattern to match only directories."
msgstr ""

#: ../../library/pathlib.rst:1656
msgid ""
"Globbing with a pattern that ends with a pathname components separator "
"(:data:`~os.sep` or :data:`~os.altsep`) returns only directories."
msgstr ""

#: ../../library/pathlib.rst:1662
msgid "Comparison to the :mod:`glob` module"
msgstr ""

#: ../../library/pathlib.rst:1664
msgid ""
"The patterns accepted and results generated by :meth:`Path.glob` "
"and :meth:`Path.rglob` differ slightly from those by the :mod:`glob` module:"
msgstr ""

#: ../../library/pathlib.rst:1667
msgid ""
"Files beginning with a dot are not special in pathlib. This is like passing "
"``include_hidden=True`` to :func:`glob.glob`."
msgstr ""

#: ../../library/pathlib.rst:1669
msgid ""
"\"``**``\" pattern components are always recursive in pathlib. This is like "
"passing ``recursive=True`` to :func:`glob.glob`."
msgstr ""

#: ../../library/pathlib.rst:1671
msgid ""
"\"``**``\" pattern components do not follow symlinks by default in pathlib. "
"This behaviour has no equivalent in :func:`glob.glob`, but you can pass "
"``recurse_symlinks=True`` to :meth:`Path.glob` for compatible behaviour."
msgstr ""

#: ../../library/pathlib.rst:1674
msgid ""
"Like all :class:`PurePath` and :class:`Path` objects, the values returned "
"from :meth:`Path.glob` and :meth:`Path.rglob` don't include trailing slashes."
msgstr ""

#: ../../library/pathlib.rst:1677
msgid ""
"The values returned from pathlib's ``path.glob()`` and ``path.rglob()`` "
"include the *path* as a prefix, unlike the results of "
"``glob.glob(root_dir=path)``."
msgstr ""

#: ../../library/pathlib.rst:1680
msgid ""
"The values returned from pathlib's ``path.glob()`` and ``path.rglob()`` may "
"include *path* itself, for example when globbing \"``**``\", whereas the "
"results of ``glob.glob(root_dir=path)`` never include an empty string that "
"would correspond to *path*."
msgstr ""

#: ../../library/pathlib.rst:1687
msgid "Comparison to the :mod:`os` and :mod:`os.path` modules"
msgstr ""

#: ../../library/pathlib.rst:1689
msgid ""
"pathlib implements path operations using :class:`PurePath` and :class:`Path` "
"objects, and so it's said to be *object-oriented*. On the other hand, "
"the :mod:`os` and :mod:`os.path` modules supply functions that work with low-"
"level ``str`` and ``bytes`` objects, which is a more *procedural* approach. "
"Some users consider the object-oriented style to be more readable."
msgstr ""

#: ../../library/pathlib.rst:1695
msgid ""
"Many functions in :mod:`os` and :mod:`os.path` support ``bytes`` paths "
"and :ref:`paths relative to directory descriptors <dir_fd>`. These features "
"aren't available in pathlib."
msgstr ""

#: ../../library/pathlib.rst:1699
msgid ""
"Python's ``str`` and ``bytes`` types, and portions of the :mod:`os` "
"and :mod:`os.path` modules, are written in C and are very speedy. pathlib is "
"written in pure Python and is often slower, but rarely slow enough to matter."
msgstr ""

#: ../../library/pathlib.rst:1703
msgid ""
"pathlib's path normalization is slightly more opinionated and consistent "
"than :mod:`os.path`. For example, whereas :func:`os.path.abspath` eliminates "
"\"``..``\" segments from a path, which may change its meaning if symlinks "
"are involved, :meth:`Path.absolute` preserves these segments for greater "
"safety."
msgstr ""

#: ../../library/pathlib.rst:1708
msgid ""
"pathlib's path normalization may render it unsuitable for some applications:"
msgstr ""

#: ../../library/pathlib.rst:1710
msgid ""
"pathlib normalizes ``Path(\"my_folder/\")`` to ``Path(\"my_folder\")``, "
"which changes a path's meaning when supplied to various operating system "
"APIs and command-line utilities. Specifically, the absence of a trailing "
"separator may allow the path to be resolved as either a file or directory, "
"rather than a directory only."
msgstr ""

#: ../../library/pathlib.rst:1715
msgid ""
"pathlib normalizes ``Path(\"./my_program\")`` to ``Path(\"my_program\")``, "
"which changes a path's meaning when used as an executable search path, such "
"as in a shell or when spawning a child process. Specifically, the absence of "
"a separator in the path may force it to be looked up in :envvar:`PATH` "
"rather than the current directory."
msgstr ""

#: ../../library/pathlib.rst:1721
msgid ""
"As a consequence of these differences, pathlib is not a drop-in replacement "
"for :mod:`os.path`."
msgstr ""

#: ../../library/pathlib.rst:1726
msgid "Corresponding tools"
msgstr ""

#: ../../library/pathlib.rst:1728
msgid ""
"Below is a table mapping various :mod:`os` functions to their "
"corresponding :class:`PurePath`/:class:`Path` equivalent."
msgstr ""

#: ../../library/pathlib.rst:1732
msgid ":mod:`os` and :mod:`os.path`"
msgstr ""

#: ../../library/pathlib.rst:1732
msgid ":mod:`pathlib`"
msgstr ""

#: ../../library/pathlib.rst:1734
msgid ":func:`os.path.abspath`"
msgstr ""

#: ../../library/pathlib.rst:1734
msgid ":meth:`Path.absolute`"
msgstr ""

#: ../../library/pathlib.rst:1735
msgid ":func:`os.path.realpath`"
msgstr ""

#: ../../library/pathlib.rst:1735
msgid ":meth:`Path.resolve`"
msgstr ""

#: ../../library/pathlib.rst:1736
msgid ":func:`os.chmod`"
msgstr ""

#: ../../library/pathlib.rst:1736
msgid ":meth:`Path.chmod`"
msgstr ""

#: ../../library/pathlib.rst:1737
msgid ":func:`os.mkdir`"
msgstr ""

#: ../../library/pathlib.rst:1737 ../../library/pathlib.rst:1738
msgid ":meth:`Path.mkdir`"
msgstr ""

#: ../../library/pathlib.rst:1738
msgid ":func:`os.makedirs`"
msgstr ""

#: ../../library/pathlib.rst:1739
msgid ":func:`os.rename`"
msgstr ""

#: ../../library/pathlib.rst:1739
msgid ":meth:`Path.rename`"
msgstr ""

#: ../../library/pathlib.rst:1740
msgid ":func:`os.replace`"
msgstr ""

#: ../../library/pathlib.rst:1740
msgid ":meth:`Path.replace`"
msgstr ""

#: ../../library/pathlib.rst:1741
msgid ":func:`os.rmdir`"
msgstr ""

#: ../../library/pathlib.rst:1741
msgid ":meth:`Path.rmdir`"
msgstr ""

#: ../../library/pathlib.rst:1742
msgid ":func:`os.remove`, :func:`os.unlink`"
msgstr ""

#: ../../library/pathlib.rst:1742
msgid ":meth:`Path.unlink`"
msgstr ""

#: ../../library/pathlib.rst:1743
msgid ":func:`os.getcwd`"
msgstr ""

#: ../../library/pathlib.rst:1743
msgid ":func:`Path.cwd`"
msgstr ""

#: ../../library/pathlib.rst:1744
msgid ":func:`os.path.exists`"
msgstr ""

#: ../../library/pathlib.rst:1744
msgid ":meth:`Path.exists`"
msgstr ""

#: ../../library/pathlib.rst:1745
msgid ":func:`os.path.expanduser`"
msgstr ""

#: ../../library/pathlib.rst:1745
msgid ":meth:`Path.expanduser` and :meth:`Path.home`"
msgstr ""

#: ../../library/pathlib.rst:1747
msgid ":func:`os.listdir`"
msgstr ""

#: ../../library/pathlib.rst:1747
msgid ":meth:`Path.iterdir`"
msgstr ""

#: ../../library/pathlib.rst:1748
msgid ":func:`os.walk`"
msgstr ""

#: ../../library/pathlib.rst:1748
msgid ":meth:`Path.walk`"
msgstr ""

#: ../../library/pathlib.rst:1749
msgid ":func:`os.path.isdir`"
msgstr ""

#: ../../library/pathlib.rst:1749
msgid ":meth:`Path.is_dir`"
msgstr ""

#: ../../library/pathlib.rst:1750
msgid ":func:`os.path.isfile`"
msgstr ""

#: ../../library/pathlib.rst:1750
msgid ":meth:`Path.is_file`"
msgstr ""

#: ../../library/pathlib.rst:1751
msgid ":func:`os.path.islink`"
msgstr ""

#: ../../library/pathlib.rst:1751
msgid ":meth:`Path.is_symlink`"
msgstr ""

#: ../../library/pathlib.rst:1752
msgid ":func:`os.link`"
msgstr ""

#: ../../library/pathlib.rst:1752
msgid ":meth:`Path.hardlink_to`"
msgstr ""

#: ../../library/pathlib.rst:1753
msgid ":func:`os.symlink`"
msgstr ""

#: ../../library/pathlib.rst:1753
msgid ":meth:`Path.symlink_to`"
msgstr ""

#: ../../library/pathlib.rst:1754
msgid ":func:`os.readlink`"
msgstr ""

#: ../../library/pathlib.rst:1754
msgid ":meth:`Path.readlink`"
msgstr ""

#: ../../library/pathlib.rst:1755
msgid ":func:`os.path.relpath`"
msgstr ""

#: ../../library/pathlib.rst:1755
msgid ":meth:`PurePath.relative_to`"
msgstr ""

#: ../../library/pathlib.rst:1756
msgid ":func:`os.stat`"
msgstr ""

#: ../../library/pathlib.rst:1756
msgid ":meth:`Path.stat`, :meth:`Path.owner`, :meth:`Path.group`"
msgstr ""

#: ../../library/pathlib.rst:1759
msgid ":func:`os.path.isabs`"
msgstr ""

#: ../../library/pathlib.rst:1759
msgid ":meth:`PurePath.is_absolute`"
msgstr ""

#: ../../library/pathlib.rst:1760
msgid ":func:`os.path.join`"
msgstr ""

#: ../../library/pathlib.rst:1760
msgid ":func:`PurePath.joinpath`"
msgstr ""

#: ../../library/pathlib.rst:1761
msgid ":func:`os.path.basename`"
msgstr ""

#: ../../library/pathlib.rst:1761
msgid ":attr:`PurePath.name`"
msgstr ""

#: ../../library/pathlib.rst:1762
msgid ":func:`os.path.dirname`"
msgstr ""

#: ../../library/pathlib.rst:1762
msgid ":attr:`PurePath.parent`"
msgstr ""

#: ../../library/pathlib.rst:1763
msgid ":func:`os.path.samefile`"
msgstr ""

#: ../../library/pathlib.rst:1763
msgid ":meth:`Path.samefile`"
msgstr ""

#: ../../library/pathlib.rst:1764
msgid ":func:`os.path.splitext`"
msgstr ""

#: ../../library/pathlib.rst:1764
msgid ":attr:`PurePath.stem` and :attr:`PurePath.suffix`"
msgstr ""

#: ../../library/pathlib.rst:11
msgid "path"
msgstr ""

#: ../../library/pathlib.rst:11
msgid "operations"
msgstr ""

#~ msgid "Footnotes"
#~ msgstr "Notas a pie de p√°gina"
