# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-21 15:24+0000\n"
"PO-Revision-Date: 2023-05-24 02:12+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../library/abc.rst:2
msgid ":mod:`abc` --- Abstract Base Classes"
msgstr ""

#: ../../library/abc.rst:11
msgid "**Source code:** :source:`Lib/abc.py`"
msgstr "**Código fuente:** :source:`Lib/abc.py`"

#: ../../library/abc.rst:15
msgid ""
"This module provides the infrastructure for defining :term:`abstract base "
"classes <abstract base class>` (ABCs) in Python, as outlined in :pep:`3119`; "
"see the PEP for why this was added to Python. (See also :pep:`3141` and the :"
"mod:`numbers` module regarding a type hierarchy for numbers based on ABCs.)"
msgstr ""
"Este módulo proporciona la infraestructura para definir :term:`abstract base "
"classes <abstract base class>` (ABCs) en Python, como se describe en :pep:"
"`3119`; ver el PEP para saber por qué se añadió esto a Python. (Ver también :"
"pep:`3141` y el módulo :mod:`numbers` sobre una jerarquía de tipos para "
"números basada en ABCs)."

#: ../../library/abc.rst:20
msgid ""
"The :mod:`collections` module has some concrete classes that derive from "
"ABCs; these can, of course, be further derived. In addition, the :mod:"
"`collections.abc` submodule has some ABCs that can be used to test whether a "
"class or instance provides a particular interface, for example, if it is :"
"term:`hashable` or if it is a :term:`mapping`."
msgstr ""
"El módulo :mod:`collections` tiene algunas clases concretas que derivan de "
"ABCs; éstas pueden, por supuesto, derivarse aún más. Además, el submódulo :"
"mod:`collections.abc` tiene algunos ABC que pueden utilizarse para comprobar "
"si una clase o instancia proporciona una interfaz determinada, por ejemplo, "
"si es :term:`hashable` o si es un :term:`mapping`."

#: ../../library/abc.rst:27
msgid ""
"This module provides the metaclass :class:`ABCMeta` for defining ABCs and a "
"helper class :class:`ABC` to alternatively define ABCs through inheritance:"
msgstr ""
"Este módulo proporciona la metaclase :class:`ABCMeta` para definir ABCs y "
"una clase de ayuda :class:`ABC` para definir alternativamente ABCs a través "
"de herencia:"

#: ../../library/abc.rst:32
msgid ""
"A helper class that has :class:`ABCMeta` as its metaclass.  With this class, "
"an abstract base class can be created by simply deriving from :class:`!ABC` "
"avoiding sometimes confusing metaclass usage, for example::"
msgstr ""
"Una clase auxiliar que tiene :class:`ABCMeta` como metaclase.  Con esta "
"clase, se puede crear una clase base abstracta simplemente derivando de :"
"class:`!ABC` evitando el uso a veces confuso de metaclases, por ejemplo::"

#: ../../library/abc.rst:41
msgid ""
"Note that the type of :class:`!ABC` is still :class:`ABCMeta`, therefore "
"inheriting from :class:`!ABC` requires the usual precautions regarding "
"metaclass usage, as multiple inheritance may lead to metaclass conflicts. "
"One may also define an abstract base class by passing the metaclass keyword "
"and using :class:`!ABCMeta` directly, for example::"
msgstr ""
"Observar que el tipo de :class:`!ABC` sigue siendo :class:`ABCMeta`, por lo "
"que heredar de :class:`!ABC` requiere las precauciones habituales en cuanto "
"al uso de metaclases, ya que la herencia múltiple puede provocar conflictos "
"de metaclases. También se puede definir una clase base abstracta pasando la "
"palabra clave metaclass y utilizando :class:`!ABCMeta` directamente, por "
"ejemplo::"

#: ../../library/abc.rst:57
msgid "Metaclass for defining Abstract Base Classes (ABCs)."
msgstr "Metaclase para definir clases de base abstractas (ABC)."

#: ../../library/abc.rst:59
msgid ""
"Use this metaclass to create an ABC.  An ABC can be subclassed directly, and "
"then acts as a mix-in class.  You can also register unrelated concrete "
"classes (even built-in classes) and unrelated ABCs as \"virtual subclasses\" "
"-- these and their descendants will be considered subclasses of the "
"registering ABC by the built-in :func:`issubclass` function, but the "
"registering ABC won't show up in their MRO (Method Resolution Order) nor "
"will method implementations defined by the registering ABC be callable (not "
"even via :func:`super`). [#]_"
msgstr ""
"Usar esta metaclase para crear un ABC.  Un ABC puede ser subclaseado "
"directamente, y entonces actúa como una clase mixta.  También puede "
"registrar clases concretas no relacionadas (incluso clases incorporadas) y "
"ABCs no relacionadas como \"subclases virtuales\" -- éstas y sus "
"descendientes se considerarán subclases del registro ABC por la función "
"incorporada :func:`issubclass`, pero el registro ABC no aparecerá en su MRO "
"(Method Resolution Order) ni las implementaciones de métodos definidas por "
"el registro ABC se invocarán (ni siquiera a través de :func:`super`). [#]_"

#: ../../library/abc.rst:68
msgid ""
"Classes created with a metaclass of :class:`!ABCMeta` have the following "
"method:"
msgstr ""
"Las clases creadas con una metaclase de :class:`!ABCMeta` tienen el "
"siguiente método:"

#: ../../library/abc.rst:72
msgid ""
"Register *subclass* as a \"virtual subclass\" of this ABC. For example::"
msgstr ""
"Registrar *subclase* como \"subclase virtual\" de este ABC. Por ejemplo::"

#: ../../library/abc.rst:85
msgid "Returns the registered subclass, to allow usage as a class decorator."
msgstr ""
"Devuelve la subclase registrada, para permitir su uso como decorador de "
"clase."

#: ../../library/abc.rst:88
msgid ""
"To detect calls to :meth:`!register`, you can use the :func:"
"`get_cache_token` function."
msgstr ""
"Para detectar llamadas a :meth:`!register`, puede utilizar la función :func:"
"`get_cache_token`."

#: ../../library/abc.rst:92
msgid "You can also override this method in an abstract base class:"
msgstr "También puede anular este método en una clase base abstracta:"

#: ../../library/abc.rst:96
msgid "(Must be defined as a class method.)"
msgstr "(Debe definirse como un método de clase)."

#: ../../library/abc.rst:98
msgid ""
"Check whether *subclass* is considered a subclass of this ABC.  This means "
"that you can customize the behavior of :func:`issubclass` further without "
"the need to call :meth:`register` on every class you want to consider a "
"subclass of the ABC.  (This class method is called from the :meth:`~class."
"__subclasscheck__` method of the ABC.)"
msgstr ""

#: ../../library/abc.rst:104
msgid ""
"This method should return ``True``, ``False`` or :data:`NotImplemented`.  If "
"it returns ``True``, the *subclass* is considered a subclass of this ABC. If "
"it returns ``False``, the *subclass* is not considered a subclass of this "
"ABC, even if it would normally be one.  If it returns :data:`!"
"NotImplemented`, the subclass check is continued with the usual mechanism."
msgstr ""
"Este método debe devolver ``True``, ``False`` o :data:`NotImplemented`. Si "
"devuelve ``True``, la *subclase* se considera una subclase de este ABC. Si "
"devuelve ``False``, la *subclase* no se considera una subclase de este ABC, "
"aunque si normalmente lo fuera.  Si devuelve :data:`!NotImplemented`, la "
"comprobación de la subclase se continúa con el mecanismo habitual."

#: ../../library/abc.rst:114
msgid ""
"For a demonstration of these concepts, look at this example ABC definition::"
msgstr ""
"Para una demostración de estos conceptos, ver este ejemplo de definición "
"ABC::"

#: ../../library/abc.rst:143
msgid ""
"The ABC ``MyIterable`` defines the standard iterable method, :meth:"
"`~iterator.__iter__`, as an abstract method.  The implementation given here "
"can still be called from subclasses.  The :meth:`!get_iterator` method is "
"also part of the ``MyIterable`` abstract base class, but it does not have to "
"be overridden in non-abstract derived classes."
msgstr ""
"El ABC ``MyIterable`` define el método iterable estándar, :meth:`~iterator."
"__iter__`, como un método abstracto.  La implementación dada aquí todavía "
"puede ser llamada desde subclases.  El método :meth:`!get_iterator` también "
"forma parte de la clase base abstracta ``MyIterable``, pero no tiene que ser "
"sobrescrito en clases derivadas no abstractas."

#: ../../library/abc.rst:149
msgid ""
"The :meth:`__subclasshook__` class method defined here says that any class "
"that has an :meth:`~iterator.__iter__` method in its :attr:`~object."
"__dict__` (or in that of one of its base classes, accessed via the :attr:"
"`~class.__mro__` list) is considered a ``MyIterable`` too."
msgstr ""

#: ../../library/abc.rst:154
msgid ""
"Finally, the last line makes ``Foo`` a virtual subclass of ``MyIterable``, "
"even though it does not define an :meth:`~iterator.__iter__` method (it uses "
"the old-style iterable protocol, defined in terms of :meth:`~object.__len__` "
"and :meth:`~object.__getitem__`).  Note that this will not make "
"``get_iterator`` available as a method of ``Foo``, so it is provided "
"separately."
msgstr ""
"Finalmente, la última línea hace que ``Foo`` sea una subclase virtual de "
"``MyIterable``, aunque no defina un método :meth:`~iterator.__iter__` "
"(utiliza el protocolo iterable de estilo antiguo, definido en términos de :"
"meth:`~object.__len__` y :meth:`~object.__getitem__`).  Tenga en cuenta que "
"esto no hará que ``get_iterator`` esté disponible como un método de ``Foo``, "
"por lo que se proporciona por separado."

#: ../../library/abc.rst:163
msgid "The :mod:`!abc` module also provides the following decorator:"
msgstr "El módulo :mod:`!abc` también proporciona la siguiente apariencia:"

#: ../../library/abc.rst:167
msgid "A decorator indicating abstract methods."
msgstr "Una apariencia que indica métodos abstractos."

#: ../../library/abc.rst:169
msgid ""
"Using this decorator requires that the class's metaclass is :class:`ABCMeta` "
"or is derived from it.  A class that has a metaclass derived from :class:`!"
"ABCMeta` cannot be instantiated unless all of its abstract methods and "
"properties are overridden.  The abstract methods can be called using any of "
"the normal 'super' call mechanisms.  :func:`!abstractmethod` may be used to "
"declare abstract methods for properties and descriptors."
msgstr ""
"El uso de esta apariencia requiere que la metaclase de la clase sea :class:"
"`ABCMeta` o derive de ella.  Una clase que tenga una metaclase derivada de :"
"class:`!ABCMeta` no puede instanciarse a menos que se sobrescriban todos sus "
"métodos y propiedades abstractos.  Los métodos abstractos pueden invocarse "
"utilizando cualquiera de los mecanismos normales de llamada \"super\". :func:"
"`!abstractmethod` puede utilizarse para declarar métodos abstractos para "
"propiedades y descriptores."

#: ../../library/abc.rst:176
msgid ""
"Dynamically adding abstract methods to a class, or attempting to modify the "
"abstraction status of a method or class once it is created, are only "
"supported using the :func:`update_abstractmethods` function.  The :func:`!"
"abstractmethod` only affects subclasses derived using regular inheritance; "
"\"virtual subclasses\" registered with the ABC's :meth:`~ABCMeta.register` "
"method are not affected."
msgstr ""
"La adición dinámica de métodos abstractos a una clase, o el intento de "
"modificar el estado de abstracción de un método o clase una vez creado, sólo "
"se admiten utilizando la función :func:`update_abstractmethods`.  La "
"función :func:`!abstractmethod` sólo afecta a las subclases derivadas "
"mediante herencia regular; las \"subclases virtuales\" registradas con el "
"método :meth:`~ABCMeta.register` del ABC no se ven afectadas."

#: ../../library/abc.rst:183
msgid ""
"When :func:`!abstractmethod` is applied in combination with other method "
"descriptors, it should be applied as the innermost decorator, as shown in "
"the following usage examples::"
msgstr ""
"Cuando :func:`!abstractmethod` se aplica en combinación con otros "
"descriptores de métodos, debe aplicarse como el decorador más interno, como "
"se muestra en los siguientes ejemplos de uso::"

#: ../../library/abc.rst:217
msgid ""
"In order to correctly interoperate with the abstract base class machinery, "
"the descriptor must identify itself as abstract using :attr:`!"
"__isabstractmethod__`. In general, this attribute should be ``True`` if any "
"of the methods used to compose the descriptor are abstract. For example, "
"Python's built-in :class:`property` does the equivalent of::"
msgstr ""
"Para interoperar correctamente con la maquinaria de la clase base abstracta, "
"el descriptor debe identificarse como abstracto utilizando :attr:`!"
"__isabstractmethod__`. En general, este atributo debe ser ``True`` si alguno "
"de los métodos utilizados para componer el descriptor es abstracto. Por "
"ejemplo, :class:`property` incorporado en Python hace el equivalente de::"

#: ../../library/abc.rst:232
msgid ""
"Unlike Java abstract methods, these abstract methods may have an "
"implementation. This implementation can be called via the :func:`super` "
"mechanism from the class that overrides it.  This could be useful as an end-"
"point for a super-call in a framework that uses cooperative multiple-"
"inheritance."
msgstr ""
"A diferencia de los métodos abstractos de Java, estos métodos abstractos "
"pueden tener una implementación. Esta implementación se puede llamar a "
"través del mecanismo :func:`super` desde la clase que la sobrescribe.  Esto "
"podría ser útil como punto final para una super-llamada en un framework que "
"utilice herencia múltiple cooperativa."

#: ../../library/abc.rst:239
msgid "The :mod:`!abc` module also supports the following legacy decorators:"
msgstr ""
"El módulo :mod:`!abc` también admite los siguientes decoradores heredados:"

#: ../../library/abc.rst:244
msgid ""
"It is now possible to use :class:`classmethod` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""
"Ahora es posible utilizar :class:`classmethod` con :func:`abstractmethod`, "
"haciendo que este decorador sea redundante."

#: ../../library/abc.rst:248
msgid ""
"A subclass of the built-in :func:`classmethod`, indicating an abstract "
"classmethod. Otherwise it is similar to :func:`abstractmethod`."
msgstr ""
"Una subclase de la incorporada :func:`classmethod`, que indica un método de "
"clase abstracto. De lo contrario, es similar a :func:`abstractmethod`."

#: ../../library/abc.rst:251
msgid ""
"This special case is deprecated, as the :func:`classmethod` decorator is now "
"correctly identified as abstract when applied to an abstract method::"
msgstr ""
"Este caso especial está obsoleto, ya que el decorador :func:`classmethod` "
"ahora se identifica correctamente como abstracto cuando se aplica a un "
"método abstracto::"

#: ../../library/abc.rst:265
msgid ""
"It is now possible to use :class:`staticmethod` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""
"Ahora es posible utilizar :class:`staticmethod` con :func:`abstractmethod`, "
"haciendo que esta apariencia sea redundante."

#: ../../library/abc.rst:269
msgid ""
"A subclass of the built-in :func:`staticmethod`, indicating an abstract "
"staticmethod. Otherwise it is similar to :func:`abstractmethod`."
msgstr ""
"Una subclase de :func:`staticmethod`, que indica un método estático "
"abstracto. De lo contrario, es similar a :func:`abstractmethod`."

#: ../../library/abc.rst:272
msgid ""
"This special case is deprecated, as the :func:`staticmethod` decorator is "
"now correctly identified as abstract when applied to an abstract method::"
msgstr ""
"Este caso especial está obsoleto, ya que la apariencia :func:`staticmethod` "
"ahora se identifica correctamente como abstracto cuando se aplica a un "
"método abstracto::"

#: ../../library/abc.rst:285
msgid ""
"It is now possible to use :class:`property`, :meth:`property.getter`, :meth:"
"`property.setter` and :meth:`property.deleter` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""
"Ahora es posible utilizar :class:`property`, :meth:`property.getter`, :meth:"
"`property.setter` y :meth:`property.deleter` con :func:`abstractmethod`, "
"haciendo que este decorador sea redundante."

#: ../../library/abc.rst:290
msgid ""
"A subclass of the built-in :func:`property`, indicating an abstract property."
msgstr ""
"Una subclase de la incorporada :func:`property`, que indica una propiedad "
"abstracta."

#: ../../library/abc.rst:293
msgid ""
"This special case is deprecated, as the :func:`property` decorator is now "
"correctly identified as abstract when applied to an abstract method::"
msgstr ""
"Este caso especial está obsoleto, ya que el decorador :func:`property` ahora "
"se identifica correctamente como abstracto cuando se aplica a un método "
"abstracto::"

#: ../../library/abc.rst:303
msgid ""
"The above example defines a read-only property; you can also define a read-"
"write abstract property by appropriately marking one or more of the "
"underlying methods as abstract::"
msgstr ""
"El ejemplo anterior define una propiedad de sólo lectura; también puede "
"definir una propiedad abstracta de lectura-escritura marcando adecuadamente "
"uno o más de los métodos subyacentes como abstractos::"

#: ../../library/abc.rst:317
msgid ""
"If only some components are abstract, only those components need to be "
"updated to create a concrete property in a subclass::"
msgstr ""
"Si sólo algunos componentes son abstractos, sólo habrá que actualizar esos "
"componentes para crear una propiedad concreta en una subclase::"

#: ../../library/abc.rst:326
msgid "The :mod:`!abc` module also provides the following functions:"
msgstr "El módulo :mod:`!abc` también ofrece las siguientes funciones:"

#: ../../library/abc.rst:330
msgid "Returns the current abstract base class cache token."
msgstr "Devuelve el token de caché de la clase base abstracta actual."

#: ../../library/abc.rst:332
msgid ""
"The token is an opaque object (that supports equality testing) identifying "
"the current version of the abstract base class cache for virtual subclasses. "
"The token changes with every call to :meth:`ABCMeta.register` on any ABC."
msgstr ""
"El token es un objeto opaco (que soporta pruebas de igualdad) que identifica "
"la versión actual de la caché de la clase base abstracta para subclases "
"virtuales. El token cambia con cada llamada a :meth:`ABCMeta.register` en "
"cualquier ABC."

#: ../../library/abc.rst:340
msgid ""
"A function to recalculate an abstract class's abstraction status. This "
"function should be called if a class's abstract methods have been "
"implemented or changed after it was created. Usually, this function should "
"be called from within a class decorator."
msgstr ""
"Una función para recalcular el estado de abstracción de una clase abstracta. "
"Se debe llamar esta función si los métodos abstractos de una clase se han "
"implementado o cambiado después de su creación. Por lo general, esta función "
"se debe llamar desde dentro de un decorador de clase."

#: ../../library/abc.rst:345
msgid "Returns *cls*, to allow usage as a class decorator."
msgstr "Devuelve *cls*, para permitir su uso como decorador de clases."

#: ../../library/abc.rst:347
msgid "If *cls* is not an instance of :class:`ABCMeta`, does nothing."
msgstr "Si *cls* no es una instancia de :class:`ABCMeta`, no hace nada."

#: ../../library/abc.rst:351
msgid ""
"This function assumes that *cls*'s superclasses are already updated. It does "
"not update any subclasses."
msgstr ""
"Esta función asume que las superclases de *cls* ya están actualizadas. No "
"actualiza ninguna subclase."

#: ../../library/abc.rst:357
msgid "Footnotes"
msgstr "Notas a pie de página"

#: ../../library/abc.rst:358
msgid ""
"C++ programmers should note that Python's virtual base class concept is not "
"the same as C++'s."
msgstr ""
"Los programadores de C++ deben tener en cuenta que el concepto de clase base "
"virtual de Python no es el mismo que el de C++."
