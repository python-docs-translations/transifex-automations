# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 14:56+0000\n"
"PO-Revision-Date: 2025-09-15 01:03+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/teams/"
"5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../library/asyncio-sync.rst:7
msgid "Synchronization Primitives"
msgstr "Primitivas de sincronización"

#: ../../library/asyncio-sync.rst:9
msgid "**Source code:** :source:`Lib/asyncio/locks.py`"
msgstr "**Código fuente:** :source:`Lib/asyncio/locks.py`"

#: ../../library/asyncio-sync.rst:13
msgid ""
"asyncio synchronization primitives are designed to be similar to those of "
"the :mod:`threading` module with two important caveats:"
msgstr ""
"Las primitivas de sincronización de asyncio están diseñadas para ser "
"similares a las del módulo :mod:`threading`, con dos salvedades importantes:"

#: ../../library/asyncio-sync.rst:16
msgid ""
"asyncio primitives are not thread-safe, therefore they should not be used "
"for OS thread synchronization (use :mod:`threading` for that);"
msgstr ""
"Las primitivas de asyncio no son seguras para los hilos, por lo que no deben "
"utilizarse para la sincronización de hilos del sistema operativo (para ello, "
"utilice :mod:`threading` );"

#: ../../library/asyncio-sync.rst:20
msgid ""
"methods of these synchronization primitives do not accept the *timeout* "
"argument; use the :func:`asyncio.wait_for` function to perform operations "
"with timeouts."
msgstr ""
"de estas primitivas de sincronización no aceptan el argumento *timeout*; "
"utilice la función :func:`asyncio.wait_for` para realizar operaciones con "
"tiempos de espera."

#: ../../library/asyncio-sync.rst:24
msgid "asyncio has the following basic synchronization primitives:"
msgstr "asyncio tiene las siguientes primitivas básicas de sincronización:"

#: ../../library/asyncio-sync.rst:26
msgid ":class:`Lock`"
msgstr ":class:`Lock`"

#: ../../library/asyncio-sync.rst:27
msgid ":class:`Event`"
msgstr ":class:`Event`"

#: ../../library/asyncio-sync.rst:28
msgid ":class:`Condition`"
msgstr ":class:`Condition`"

#: ../../library/asyncio-sync.rst:29
msgid ":class:`Semaphore`"
msgstr ":class:`Semaphore`"

#: ../../library/asyncio-sync.rst:30
msgid ":class:`BoundedSemaphore`"
msgstr ":class:`BoundedSemaphore`"

#: ../../library/asyncio-sync.rst:31
msgid ":class:`Barrier`"
msgstr ""

#: ../../library/asyncio-sync.rst:38
msgid "Lock"
msgstr "Bloqueo"

#: ../../library/asyncio-sync.rst:42
msgid "Implements a mutex lock for asyncio tasks.  Not thread-safe."
msgstr ""
"Implementa un bloqueo mutex para tareas asyncio.  No es seguro para hilos."

#: ../../library/asyncio-sync.rst:44
msgid ""
"An asyncio lock can be used to guarantee exclusive access to a shared "
"resource."
msgstr ""
"Un bloqueo asyncio puede utilizarse para garantizar el acceso exclusivo a un "
"recurso compartido."

#: ../../library/asyncio-sync.rst:47
msgid "The preferred way to use a Lock is an :keyword:`async with` statement::"
msgstr ""
"La forma preferida de utilizar un Bloqueo es una sentencia :keyword:`async "
"with`::"

#: ../../library/asyncio-sync.rst:50
msgid ""
"lock = asyncio.Lock()\n"
"\n"
"# ... later\n"
"async with lock:\n"
"    # access shared state"
msgstr ""

#: ../../library/asyncio-sync.rst:56 ../../library/asyncio-sync.rst:201
#: ../../library/asyncio-sync.rst:309
msgid "which is equivalent to::"
msgstr "que equivale a::"

#: ../../library/asyncio-sync.rst:58
msgid ""
"lock = asyncio.Lock()\n"
"\n"
"# ... later\n"
"await lock.acquire()\n"
"try:\n"
"    # access shared state\n"
"finally:\n"
"    lock.release()"
msgstr ""

#: ../../library/asyncio-sync.rst:67 ../../library/asyncio-sync.rst:113
#: ../../library/asyncio-sync.rst:189 ../../library/asyncio-sync.rst:297
#: ../../library/asyncio-sync.rst:353
msgid "Removed the *loop* parameter."
msgstr "Eliminado el parámetro *loop*."

#: ../../library/asyncio-sync.rst:73
msgid "Acquire the lock."
msgstr "Activado el bloqueo"

#: ../../library/asyncio-sync.rst:75
msgid ""
"This method waits until the lock is *unlocked*, sets it to *locked* and "
"returns ``True``."
msgstr ""
"Este método espera hasta que el bloqueo esté *desbloqueado*, lo pone en "
"*bloqueado* y devuelve ``True``."

#: ../../library/asyncio-sync.rst:78
msgid ""
"When more than one coroutine is blocked in :meth:`acquire` waiting for the "
"lock to be unlocked, only one coroutine eventually proceeds."
msgstr ""
"Cuando más de una corrutina está bloqueada en :meth:`acquire` esperando a "
"que se desbloquee el bloqueo, sólo una corrutina procede finalmente."

#: ../../library/asyncio-sync.rst:82
msgid ""
"Acquiring a lock is *fair*: the coroutine that proceeds will be the first "
"coroutine that started waiting on the lock."
msgstr ""
"Activar un bloqueo es *fair*: la corrutina que procede será la primera "
"corrutina que empezó esperando en el bloqueo."

#: ../../library/asyncio-sync.rst:87
msgid "Release the lock."
msgstr "Libera el cierre."

#: ../../library/asyncio-sync.rst:89
msgid "When the lock is *locked*, reset it to *unlocked* and return."
msgstr "Cuando el seguro esté *locked*, restablécelo a *unlocked* y vuelve."

#: ../../library/asyncio-sync.rst:91
msgid "If the lock is *unlocked*, a :exc:`RuntimeError` is raised."
msgstr "Si la cerradura está *desbloqueada*, aparece :exc:`RuntimeError`."

#: ../../library/asyncio-sync.rst:95
msgid "Return ``True`` if the lock is *locked*."
msgstr "Devuelve ``True`` si el seguro está *bloqueado*."

#: ../../library/asyncio-sync.rst:99
msgid "Event"
msgstr "Evento"

#: ../../library/asyncio-sync.rst:103
msgid "An event object.  Not thread-safe."
msgstr "Un objeto de evento.  No es seguro para hilos."

#: ../../library/asyncio-sync.rst:105
msgid ""
"An asyncio event can be used to notify multiple asyncio tasks that some "
"event has happened."
msgstr ""
"Un evento asyncio se puede utilizar para notificar a múltiples tareas "
"asyncio que ha ocurrido algún evento."

#: ../../library/asyncio-sync.rst:108
msgid ""
"An Event object manages an internal flag that can be set to *true* with "
"the :meth:`~Event.set` method and reset to *false* with the :meth:`clear` "
"method.  The :meth:`~Event.wait` method blocks until the flag is set to "
"*true*.  The flag is set to *false* initially."
msgstr ""
"Un objeto Event gestiona un indicador interno que se puede establecer en "
"*true* con el método :meth:`~Event.set` y restablecer en *false* con el "
"método :meth:`clear`.  El método :meth:`~Event.wait` se bloquea hasta que el "
"indicador se establece en *true*.  El indicador se establece inicialmente en "
"*false*."

#: ../../library/asyncio-sync.rst:118 ../../library/asyncio-sync.rst:377
msgid "Example::"
msgstr "Ejemplo::"

#: ../../library/asyncio-sync.rst:120
msgid ""
"async def waiter(event):\n"
"    print('waiting for it ...')\n"
"    await event.wait()\n"
"    print('... got it!')\n"
"\n"
"async def main():\n"
"    # Create an Event object.\n"
"    event = asyncio.Event()\n"
"\n"
"    # Spawn a Task to wait until 'event' is set.\n"
"    waiter_task = asyncio.create_task(waiter(event))\n"
"\n"
"    # Sleep for 1 second and set the event.\n"
"    await asyncio.sleep(1)\n"
"    event.set()\n"
"\n"
"    # Wait until the waiter task is finished.\n"
"    await waiter_task\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: ../../library/asyncio-sync.rst:144
msgid "Wait until the event is set."
msgstr "Espere hasta que se active el evento."

#: ../../library/asyncio-sync.rst:146
msgid ""
"If the event is set, return ``True`` immediately. Otherwise block until "
"another task calls :meth:`~Event.set`."
msgstr ""
"Si se activa el evento, devuelve ``True`` inmediatamente. En caso contrario, "
"bloquea hasta que otra tarea llame a :meth:`~Event.set`."

#: ../../library/asyncio-sync.rst:151
msgid "Set the event."
msgstr "Fija el evento."

#: ../../library/asyncio-sync.rst:153
msgid "All tasks waiting for event to be set will be immediately awakened."
msgstr ""
"Todas las tareas que estén esperando a que se active el evento despertarán "
"inmediatamente."

#: ../../library/asyncio-sync.rst:158
msgid "Clear (unset) the event."
msgstr "Borra (anula) el evento."

#: ../../library/asyncio-sync.rst:160
msgid ""
"Subsequent tasks awaiting on :meth:`~Event.wait` will now block until "
"the :meth:`~Event.set` method is called again."
msgstr ""

#: ../../library/asyncio-sync.rst:165
msgid "Return ``True`` if the event is set."
msgstr "Devuelve ``True`` si el evento está activado."

#: ../../library/asyncio-sync.rst:169
msgid "Condition"
msgstr "Condición"

#: ../../library/asyncio-sync.rst:173
msgid "A Condition object.  Not thread-safe."
msgstr "Un objeto Condición.  No es seguro para hilos."

#: ../../library/asyncio-sync.rst:175
msgid ""
"An asyncio condition primitive can be used by a task to wait for some event "
"to happen and then get exclusive access to a shared resource."
msgstr ""
"Una primitiva de condición asyncio se puede utilizar por una tarea para "
"esperar a que ocurra algún evento y luego obtener acceso exclusivo a un "
"recurso compartido."

#: ../../library/asyncio-sync.rst:179
msgid ""
"In essence, a Condition object combines the functionality of "
"an :class:`Event` and a :class:`Lock`.  It is possible to have multiple "
"Condition objects share one Lock, which allows coordinating exclusive access "
"to a shared resource between different tasks interested in particular states "
"of that shared resource."
msgstr ""
"En esencia, un objeto Condition combina la funcionalidad de "
"un :class:`Event` y un :class:`Lock`. Es posible tener múltiples objetos "
"Condition compartiendo un Lock, lo que permite coordinar el acceso exclusivo "
"a un recurso compartido entre diferentes tareas interesadas en estados "
"particulares de ese recurso compartido."

#: ../../library/asyncio-sync.rst:185
msgid ""
"The optional *lock* argument must be a :class:`Lock` object or ``None``.  In "
"the latter case a new Lock object is created automatically."
msgstr ""
"El argumento opcional *lock* debe ser un objeto :class:`Lock` o ``None``. En "
"este último caso, se crea automáticamente un nuevo objeto Lock."

#: ../../library/asyncio-sync.rst:192
msgid ""
"The preferred way to use a Condition is an :keyword:`async with` statement::"
msgstr ""
"La forma preferida de utilizar una condición es una "
"declaración :keyword:`async with`::"

#: ../../library/asyncio-sync.rst:195
msgid ""
"cond = asyncio.Condition()\n"
"\n"
"# ... later\n"
"async with cond:\n"
"    await cond.wait()"
msgstr ""

#: ../../library/asyncio-sync.rst:203
msgid ""
"cond = asyncio.Condition()\n"
"\n"
"# ... later\n"
"await cond.acquire()\n"
"try:\n"
"    await cond.wait()\n"
"finally:\n"
"    cond.release()"
msgstr ""

#: ../../library/asyncio-sync.rst:215
msgid "Acquire the underlying lock."
msgstr "Adquiere el bloqueo subyacente."

#: ../../library/asyncio-sync.rst:217
msgid ""
"This method waits until the underlying lock is *unlocked*, sets it to "
"*locked* and returns ``True``."
msgstr ""
"Este método espera hasta que el bloqueo subyacente esté *unlocked*, lo "
"establece en *locked* y devuelve ``True``."

#: ../../library/asyncio-sync.rst:222
msgid ""
"Wake up *n* tasks (1 by default) waiting on this condition.  If fewer than "
"*n* tasks are waiting they are all awakened."
msgstr ""

#: ../../library/asyncio-sync.rst:225 ../../library/asyncio-sync.rst:240
msgid ""
"The lock must be acquired before this method is called and released shortly "
"after.  If called with an *unlocked* lock a :exc:`RuntimeError` error is "
"raised."
msgstr ""
"El bloqueo debe adquirirse antes de llamar a este método y liberarse poco "
"después.  Si se llama con un bloqueo *desbloqueado*, se produce un "
"error :exc:`RuntimeError`."

#: ../../library/asyncio-sync.rst:231
msgid "Return ``True`` if the underlying lock is acquired."
msgstr "Devuelve ``True`` si se adquiere el bloqueo subyacente."

#: ../../library/asyncio-sync.rst:235
msgid "Wake up all tasks waiting on this condition."
msgstr "Despierta todas las tareas que esperan esta condición."

#: ../../library/asyncio-sync.rst:237
msgid "This method acts like :meth:`notify`, but wakes up all waiting tasks."
msgstr ""
"Este método actúa como :meth:`notify`, pero despierta todas las tareas en "
"espera."

#: ../../library/asyncio-sync.rst:246
msgid "Release the underlying lock."
msgstr "Libera el bloqueo subyacente."

#: ../../library/asyncio-sync.rst:248
msgid "When invoked on an unlocked lock, a :exc:`RuntimeError` is raised."
msgstr ""
"Cuando se invoca en una cerradura desbloqueada, se genera "
"un :exc:`RuntimeError`."

#: ../../library/asyncio-sync.rst:254
msgid "Wait until notified."
msgstr "Espere hasta que se le notifique."

#: ../../library/asyncio-sync.rst:256
msgid ""
"If the calling task has not acquired the lock when this method is called, "
"a :exc:`RuntimeError` is raised."
msgstr ""
"Si la tarea que llama no ha adquirido el bloqueo cuando se llama a este "
"método, se lanza un :exc:`RuntimeError`."

#: ../../library/asyncio-sync.rst:259
msgid ""
"This method releases the underlying lock, and then blocks until it is "
"awakened by a :meth:`notify` or :meth:`notify_all` call. Once awakened, the "
"Condition re-acquires its lock and this method returns ``True``."
msgstr ""
"Este método libera el bloqueo subyacente y se bloquea hasta que se activa "
"mediante una llamada a :meth:`notify` o :meth:`notify_all`. Una vez "
"despertado, la Condición vuelve a adquirir su bloqueo y este método devuelve "
"``True``."

#: ../../library/asyncio-sync.rst:264
msgid ""
"Note that a task *may* return from this call spuriously, which is why the "
"caller should always re-check the state and be prepared "
"to :meth:`~Condition.wait` again. For this reason, you may prefer to "
"use :meth:`~Condition.wait_for` instead."
msgstr ""

#: ../../library/asyncio-sync.rst:272
msgid "Wait until a predicate becomes *true*."
msgstr "Esperar a que un predicado sea *true*."

#: ../../library/asyncio-sync.rst:274
msgid ""
"The predicate must be a callable which result will be interpreted as a "
"boolean value.  The method will repeatedly :meth:`~Condition.wait` until the "
"predicate evaluates to *true*. The final value is the return value."
msgstr ""

#: ../../library/asyncio-sync.rst:281
msgid "Semaphore"
msgstr "Semaphore"

#: ../../library/asyncio-sync.rst:285
msgid "A Semaphore object.  Not thread-safe."
msgstr "Un objeto Semaphore.  No es seguro para hilos."

#: ../../library/asyncio-sync.rst:287
msgid ""
"A semaphore manages an internal counter which is decremented by "
"each :meth:`acquire` call and incremented by each :meth:`release` call. The "
"counter can never go below zero; when :meth:`acquire` finds that it is zero, "
"it blocks, waiting until some task calls :meth:`release`."
msgstr ""
"Un semáforo gestiona un contador interno que se decrece con cada llamada "
"a :meth:`acquire` y se incrementa con cada llamada a :meth:`release`. El "
"contador nunca puede bajar de cero; cuando :meth:`acquire` llega a cero, se "
"bloquea, esperando que alguna tarea llame a :meth:`release`."

#: ../../library/asyncio-sync.rst:293
msgid ""
"The optional *value* argument gives the initial value for the internal "
"counter (``1`` by default). If the given value is less than ``0`` "
"a :exc:`ValueError` is raised."
msgstr ""
"El argumento opcional *value* da el valor inicial para el contador interno "
"(``1`` por defecto). Si el valor dado es menor que ``0`` se produce "
"un :exc:`ValueError`."

#: ../../library/asyncio-sync.rst:300
msgid ""
"The preferred way to use a Semaphore is an :keyword:`async with` statement::"
msgstr ""
"La forma preferida de utilizar un Semaphore es una "
"declaración :keyword:`async with`::"

#: ../../library/asyncio-sync.rst:303
msgid ""
"sem = asyncio.Semaphore(10)\n"
"\n"
"# ... later\n"
"async with sem:\n"
"    # work with shared resource"
msgstr ""

#: ../../library/asyncio-sync.rst:311
msgid ""
"sem = asyncio.Semaphore(10)\n"
"\n"
"# ... later\n"
"await sem.acquire()\n"
"try:\n"
"    # work with shared resource\n"
"finally:\n"
"    sem.release()"
msgstr ""

#: ../../library/asyncio-sync.rst:323
msgid "Acquire a semaphore."
msgstr "Adquiere un semáforo."

#: ../../library/asyncio-sync.rst:325
msgid ""
"If the internal counter is greater than zero, decrement it by one and return "
"``True`` immediately.  If it is zero, wait until a :meth:`release` is called "
"and return ``True``."
msgstr ""
"Si el contador interno es mayor que cero, disminuye en uno y devuelve "
"``True`` inmediatamente.  Si es cero, espere hasta que se llame "
"a :meth:`release` y devuelva ``True``."

#: ../../library/asyncio-sync.rst:331
msgid "Returns ``True`` if semaphore can not be acquired immediately."
msgstr "Devuelve ``True`` si el semáforo no puede adquirirse inmediatamente."

#: ../../library/asyncio-sync.rst:335
msgid ""
"Release a semaphore, incrementing the internal counter by one. Can wake up a "
"task waiting to acquire the semaphore."
msgstr ""
"Libera un semáforo, incrementando el contador interno en uno. Puede "
"despertar una tarea en espera de adquirir el semáforo."

#: ../../library/asyncio-sync.rst:338
msgid ""
"Unlike :class:`BoundedSemaphore`, :class:`Semaphore` allows making more "
"``release()`` calls than ``acquire()`` calls."
msgstr ""
"A diferencia de :class:`BoundedSemaphore`, :class:`Semaphore` permite "
"realizar más llamadas a ``release()`` que a ``acquire()``."

#: ../../library/asyncio-sync.rst:343
msgid "BoundedSemaphore"
msgstr "BoundedSemaphore"

#: ../../library/asyncio-sync.rst:347
msgid "A bounded semaphore object.  Not thread-safe."
msgstr "Un objeto semáforo limitado.  No es seguro para hilos."

#: ../../library/asyncio-sync.rst:349
msgid ""
"Bounded Semaphore is a version of :class:`Semaphore` that raises "
"a :exc:`ValueError` in :meth:`~Semaphore.release` if it increases the "
"internal counter above the initial *value*."
msgstr ""
"Bounded Semaphore es una versión de :class:`Semaphore` que lanza "
"un :exc:`ValueError` en :meth:`~Semaphore.release` si incrementa el contador "
"interno por encima del *valor* inicial."

#: ../../library/asyncio-sync.rst:358
msgid "Barrier"
msgstr ""

#: ../../library/asyncio-sync.rst:362
msgid "A barrier object.  Not thread-safe."
msgstr ""

#: ../../library/asyncio-sync.rst:364
msgid ""
"A barrier is a simple synchronization primitive that allows to block until "
"*parties* number of tasks are waiting on it. Tasks can wait on "
"the :meth:`~Barrier.wait` method and would be blocked until the specified "
"number of tasks end up waiting on :meth:`~Barrier.wait`. At that point all "
"of the waiting tasks would unblock simultaneously."
msgstr ""

#: ../../library/asyncio-sync.rst:370
msgid ""
":keyword:`async with` can be used as an alternative to awaiting "
"on :meth:`~Barrier.wait`."
msgstr ""

#: ../../library/asyncio-sync.rst:373
msgid "The barrier can be reused any number of times."
msgstr ""

#: ../../library/asyncio-sync.rst:379
msgid ""
"async def example_barrier():\n"
"   # barrier with 3 parties\n"
"   b = asyncio.Barrier(3)\n"
"\n"
"   # create 2 new waiting tasks\n"
"   asyncio.create_task(b.wait())\n"
"   asyncio.create_task(b.wait())\n"
"\n"
"   await asyncio.sleep(0)\n"
"   print(b)\n"
"\n"
"   # The third .wait() call passes the barrier\n"
"   await b.wait()\n"
"   print(b)\n"
"   print(\"barrier passed\")\n"
"\n"
"   await asyncio.sleep(0)\n"
"   print(b)\n"
"\n"
"asyncio.run(example_barrier())"
msgstr ""

#: ../../library/asyncio-sync.rst:400
msgid "Result of this example is::"
msgstr ""

#: ../../library/asyncio-sync.rst:402
msgid ""
"<asyncio.locks.Barrier object at 0x... [filling, waiters:2/3]>\n"
"<asyncio.locks.Barrier object at 0x... [draining, waiters:0/3]>\n"
"barrier passed\n"
"<asyncio.locks.Barrier object at 0x... [filling, waiters:0/3]>"
msgstr ""

#: ../../library/asyncio-sync.rst:412
msgid ""
"Pass the barrier. When all the tasks party to the barrier have called this "
"function, they are all unblocked simultaneously."
msgstr ""

#: ../../library/asyncio-sync.rst:415
msgid ""
"When a waiting or blocked task in the barrier is cancelled, this task exits "
"the barrier which stays in the same state. If the state of the barrier is "
"\"filling\", the number of waiting task decreases by 1."
msgstr ""

#: ../../library/asyncio-sync.rst:420
msgid ""
"The return value is an integer in the range of 0 to ``parties-1``, different "
"for each task. This can be used to select a task to do some special "
"housekeeping, e.g.::"
msgstr ""

#: ../../library/asyncio-sync.rst:424
msgid ""
"...\n"
"async with barrier as position:\n"
"   if position == 0:\n"
"      # Only one task prints this\n"
"      print('End of *draining phase*')"
msgstr ""

#: ../../library/asyncio-sync.rst:430
msgid ""
"This method may raise a :class:`BrokenBarrierError` exception if the barrier "
"is broken or reset while a task is waiting. It could raise "
"a :exc:`CancelledError` if a task is cancelled."
msgstr ""

#: ../../library/asyncio-sync.rst:437
msgid ""
"Return the barrier to the default, empty state.  Any tasks waiting on it "
"will receive the :class:`BrokenBarrierError` exception."
msgstr ""

#: ../../library/asyncio-sync.rst:440
msgid ""
"If a barrier is broken it may be better to just leave it and create a new "
"one."
msgstr ""

#: ../../library/asyncio-sync.rst:445
msgid ""
"Put the barrier into a broken state.  This causes any active or future calls "
"to :meth:`~Barrier.wait` to fail with the :class:`BrokenBarrierError`. Use "
"this for example if one of the tasks needs to abort, to avoid infinite "
"waiting tasks."
msgstr ""

#: ../../library/asyncio-sync.rst:452
msgid "The number of tasks required to pass the barrier."
msgstr ""

#: ../../library/asyncio-sync.rst:456
msgid "The number of tasks currently waiting in the barrier while filling."
msgstr ""

#: ../../library/asyncio-sync.rst:460
msgid "A boolean that is ``True`` if the barrier is in the broken state."
msgstr "Un booleano que es ``True`` si la barrera está en estado roto."

#: ../../library/asyncio-sync.rst:465
msgid ""
"This exception, a subclass of :exc:`RuntimeError`, is raised when "
"the :class:`Barrier` object is reset or broken."
msgstr ""
"Esta excepción, una subclase de :exc:`RuntimeError`, se lanza cuando el "
"objeto :class:`Barrier` se reinicia o se rompe."

#: ../../library/asyncio-sync.rst:473
msgid ""
"Acquiring a lock using ``await lock`` or ``yield from lock`` and/"
"or :keyword:`with` statement (``with await lock``, ``with (yield from "
"lock)``) was removed.  Use ``async with lock`` instead."
msgstr ""
"Se ha eliminado la adquisición de un bloqueo mediante ``await lock`` o "
"``yield from lock`` y/o la sentencia :keyword:`with` (``with await lock``, "
"``with (yield from lock)``).  Utilice ``async with lock`` en su lugar."
