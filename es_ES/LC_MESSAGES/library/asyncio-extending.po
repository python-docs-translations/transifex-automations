# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-18 14:52+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../library/asyncio-extending.rst:6
msgid "Extending"
msgstr "Ampliar"

#: ../../library/asyncio-extending.rst:8
msgid ""
"The main direction for :mod:`asyncio` extending is writing custom *event "
"loop* classes. Asyncio has helpers that could be used to simplify this task."
msgstr ""
"La dirección principal para extender :mod:`asyncio` es escribir clases "
"*event loop* personalizadas. Asyncio tiene ayudantes que podrían utilizarse "
"para simplificar esta tarea."

#: ../../library/asyncio-extending.rst:13
msgid ""
"Third-parties should reuse existing asyncio code with caution, a new Python "
"version is free to break backward compatibility in *internal* part of API."
msgstr ""
"Los terceros deben reutilizar el código asyncio existente con precaución, "
"una nueva versión de Python es libre de romper la compatibilidad con "
"versiones anteriores en la parte *interna* de la API."

#: ../../library/asyncio-extending.rst:19
msgid "Writing a Custom Event Loop"
msgstr "Escribir un bucle de eventos personalizado"

#: ../../library/asyncio-extending.rst:21
msgid ""
":class:`asyncio.AbstractEventLoop` declares very many methods.  Implementing "
"all them from scratch is a tedious job."
msgstr ""
":class:`asyncio.AbstractEventLoop` declara muchos métodos.  Implementarlos "
"todos desde cero es un trabajo tedioso."

#: ../../library/asyncio-extending.rst:24
msgid ""
"A loop can get many common methods implementation for free by inheriting "
"from :class:`asyncio.BaseEventLoop`."
msgstr ""
"Un bucle puede obtener gratuitamente la implementación de muchos métodos "
"comunes heredando de :class:`asyncio.BaseEventLoop`."

#: ../../library/asyncio-extending.rst:27
msgid ""
"In turn, the successor should implement a bunch of *private* methods "
"declared but not implemented in :class:`asyncio.BaseEventLoop`."
msgstr ""
"A su vez, el sucesor debe implementar un montón de métodos *private* "
"declarados pero no implementados en :class:`asyncio.BaseEventLoop`."

#: ../../library/asyncio-extending.rst:30
msgid ""
"For example, ``loop.create_connection()`` checks arguments, resolves DNS "
"addresses, and calls ``loop._make_socket_transport()`` that should be "
"implemented by inherited class. The ``_make_socket_transport()`` method is "
"not documented and is considered as an *internal* API."
msgstr ""
"Por ejemplo, ``loop.create_connection()`` comprueba los argumentos, resuelve "
"las direcciones DNS y llama a ``loop._make_socket_transport()`` que debería "
"ser implementado por la clase heredada. El método "
"``_make_socket_transport()`` no está documentado y se considera una API "
"*internal*."

#: ../../library/asyncio-extending.rst:38
msgid "Future and Task private constructors"
msgstr "Constructores privados Future y Task"

#: ../../library/asyncio-extending.rst:40
msgid ""
":class:`asyncio.Future` and :class:`asyncio.Task` should be never created "
"directly, please use corresponding :meth:`loop.create_future` and :meth:"
"`loop.create_task`, or :func:`asyncio.create_task` factories instead."
msgstr ""
":class:`asyncio.Future` y :class:`asyncio.Task` nunca deben crearse "
"directamente, utilice en su lugar las fábricas correspondientes :meth:`loop."
"create_future` y :meth:`loop.create_task`, o :func:`asyncio.create_task`."

#: ../../library/asyncio-extending.rst:44
msgid ""
"However, third-party *event loops* may *reuse* built-in future and task "
"implementations for the sake of getting a complex and highly optimized code "
"for free."
msgstr ""
"Sin embargo, los *event loops* de terceros pueden *reutilizar* "
"implementaciones incorporadas de futuros y tareas con tal de obtener un "
"código complejo y altamente optimizado de forma gratuita."

#: ../../library/asyncio-extending.rst:47
msgid "For this purpose the following, *private* constructors are listed:"
msgstr "Con este fin se enumeran los siguientes constructores *privados*:"

#: ../../library/asyncio-extending.rst:51
msgid "Create a built-in future instance."
msgstr "Crear una instancia futura incorporada."

#: ../../library/asyncio-extending.rst:53
msgid "*loop* is an optional event loop instance."
msgstr "*loop* es una instancia opcional del bucle de eventos."

#: ../../library/asyncio-extending.rst:57
msgid "Create a built-in task instance."
msgstr "Crear una instancia de tarea integrada."

#: ../../library/asyncio-extending.rst:59
msgid ""
"*loop* is an optional event loop instance. The rest of arguments are "
"described in :meth:`loop.create_task` description."
msgstr ""
"*loop* es una instancia opcional del bucle de eventos. El resto de "
"argumentos se describen en :meth:`loop.create_task` descripción."

#: ../../library/asyncio-extending.rst:64
msgid "*context* argument is added."
msgstr "Se añade el argumento *context*."

#: ../../library/asyncio-extending.rst:69
msgid "Task lifetime support"
msgstr "Apoyo a las tareas durante toda su vida útil"

#: ../../library/asyncio-extending.rst:71
msgid ""
"A third party task implementation should call the following functions to "
"keep a task visible by :func:`asyncio.all_tasks` and :func:`asyncio."
"current_task`:"
msgstr ""
"Una implementación de tarea de terceros debe llamar a las siguientes "
"funciones para mantener una tarea visible por :func:`asyncio.all_tasks` y :"
"func:`asyncio.current_task`:"

#: ../../library/asyncio-extending.rst:76
msgid "Register a new *task* as managed by *asyncio*."
msgstr "Registrar una nueva *tarea* como gestionada por *asyncio*."

#: ../../library/asyncio-extending.rst:78
msgid "Call the function from a task constructor."
msgstr "Llamar a la función desde un constructor de tarea."

#: ../../library/asyncio-extending.rst:82
msgid "Unregister a *task* from *asyncio* internal structures."
msgstr "Dar de baja una *tarea* de las estructuras internas de *asyncio*."

#: ../../library/asyncio-extending.rst:84
msgid "The function should be called when a task is about to finish."
msgstr "La función debe ser llamada cuando una tarea está a punto de terminar."

#: ../../library/asyncio-extending.rst:88
msgid "Switch the current task to the *task* argument."
msgstr "Cambia la tarea actual al argumento *task*."

#: ../../library/asyncio-extending.rst:90
msgid ""
"Call the function just before executing a portion of embedded *coroutine* (:"
"meth:`coroutine.send` or :meth:`coroutine.throw`)."
msgstr ""
"Llama a la función justo antes de ejecutar una porción de *coroutine* "
"incrustada (:meth:`coroutine.send` o :meth:`coroutine.throw`)."

#: ../../library/asyncio-extending.rst:95
msgid "Switch the current task back from *task* to ``None``."
msgstr "Vuelve a cambiar la tarea actual de *task* a ``None``."

#: ../../library/asyncio-extending.rst:97
msgid ""
"Call the function just after :meth:`coroutine.send` or :meth:`coroutine."
"throw` execution."
msgstr ""
"Llame a la función justo después de la ejecución de :meth:`coroutine.send` "
"o :meth:`coroutine.throw`."
