# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 14:56+0000\n"
"PO-Revision-Date: 2025-09-15 01:03+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/teams/"
"5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../library/bisect.rst:2
msgid ":mod:`!bisect` --- Array bisection algorithm"
msgstr ""

#: ../../library/bisect.rst:10
msgid "**Source code:** :source:`Lib/bisect.py`"
msgstr "**Código fuente:** :source:`Lib/bisect.py`"

#: ../../library/bisect.rst:14
msgid ""
"This module provides support for maintaining a list in sorted order without "
"having to sort the list after each insertion.  For long lists of items with "
"expensive comparison operations, this can be an improvement over linear "
"searches or frequent resorting."
msgstr ""

#: ../../library/bisect.rst:19
msgid ""
"The module is called :mod:`bisect` because it uses a basic bisection "
"algorithm to do its work.  Unlike other bisection tools that search for a "
"specific value, the functions in this module are designed to locate an "
"insertion point. Accordingly, the functions never call "
"an :meth:`~object.__eq__` method to determine whether a value has been "
"found.  Instead, the functions only call the :meth:`~object.__lt__` method "
"and will return an insertion point between values in an array."
msgstr ""

#: ../../library/bisect.rst:29
msgid ""
"The functions in this module are not thread-safe. If multiple threads "
"concurrently use :mod:`bisect` functions on the same sequence, this may "
"result in undefined behaviour. Likewise, if the provided sequence is mutated "
"by a different thread while a :mod:`bisect` function is operating on it, the "
"result is undefined. For example, using :py:func:`~bisect.insort_left` on "
"the same list from multiple threads may result in the list becoming unsorted."
msgstr ""

#: ../../library/bisect.rst:39
msgid "The following functions are provided:"
msgstr "Dispone de las siguientes funciones:"

#: ../../library/bisect.rst:44
msgid ""
"Locate the insertion point for *x* in *a* to maintain sorted order. The "
"parameters *lo* and *hi* may be used to specify a subset of the list which "
"should be considered; by default the entire list is used.  If *x* is already "
"present in *a*, the insertion point will be before (to the left of) any "
"existing entries.  The return value is suitable for use as the first "
"parameter to ``list.insert()`` assuming that *a* is already sorted."
msgstr ""
"Localiza el punto de inserción de *x* en *a* para mantener el orden. Los "
"parámetros *lo* y *hi* pueden utilizarse para especificar un subconjunto de "
"la lista que debe considerarse; por defecto se utiliza toda la lista.  Si "
"*x* ya está presente en *a*, el punto de inserción estará antes (a la "
"izquierda) de cualquier entrada existente.  El valor devuelto es adecuado "
"para su uso como primer parámetro de ``list.insert()`` suponiendo que *a* ya "
"está ordenada."

#: ../../library/bisect.rst:51
msgid ""
"The returned insertion point *ip* partitions the array *a* into two slices "
"such that ``all(elem < x for elem in a[lo : ip])`` is true for the left "
"slice and ``all(elem >= x for elem in a[ip : hi])`` is true for the right "
"slice."
msgstr ""

#: ../../library/bisect.rst:56
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each element in the array.  To support "
"searching complex records, the key function is not applied to the *x* value."
msgstr ""
"*key* especifica una :term:`key function` de un argumento que se utiliza "
"para extraer una clave de comparación de cada elemento de la matriz.  Para "
"permitir la búsqueda en registros complejos, la función clave no se aplica "
"al valor *x*."

#: ../../library/bisect.rst:60
msgid ""
"If *key* is ``None``, the elements are compared directly and no key function "
"is called."
msgstr ""

#: ../../library/bisect.rst:63 ../../library/bisect.rst:77
#: ../../library/bisect.rst:95 ../../library/bisect.rst:115
msgid "Added the *key* parameter."
msgstr "Se ha añadido el parámetro *key*."

#: ../../library/bisect.rst:70
msgid ""
"Similar to :py:func:`~bisect.bisect_left`, but returns an insertion point "
"which comes after (to the right of) any existing entries of *x* in *a*."
msgstr ""

#: ../../library/bisect.rst:73
msgid ""
"The returned insertion point *ip* partitions the array *a* into two slices "
"such that ``all(elem <= x for elem in a[lo : ip])`` is true for the left "
"slice and ``all(elem > x for elem in a[ip : hi])`` is true for the right "
"slice."
msgstr ""

#: ../../library/bisect.rst:83
msgid "Insert *x* in *a* in sorted order."
msgstr "Insertar *x* en *a* en orden ordenado."

#: ../../library/bisect.rst:85
msgid ""
"This function first runs :py:func:`~bisect.bisect_left` to locate an "
"insertion point. Next, it runs the :meth:`~sequence.insert` method on *a* to "
"insert *x* at the appropriate position to maintain sort order."
msgstr ""

#: ../../library/bisect.rst:89 ../../library/bisect.rst:109
msgid ""
"To support inserting records in a table, the *key* function (if any) is "
"applied to *x* for the search step but not for the insertion step."
msgstr ""
"Para admitir la inserción de registros en una tabla, la función *key* (si "
"existe) se aplica a *x* para el paso de búsqueda, pero no para el paso de "
"inserción."

#: ../../library/bisect.rst:92 ../../library/bisect.rst:112
msgid ""
"Keep in mind that the *O*\\ (log *n*) search is dominated by the slow *O*\\ "
"(*n*) insertion step."
msgstr ""

#: ../../library/bisect.rst:102
msgid ""
"Similar to :py:func:`~bisect.insort_left`, but inserting *x* in *a* after "
"any existing entries of *x*."
msgstr ""

#: ../../library/bisect.rst:105
msgid ""
"This function first runs :py:func:`~bisect.bisect_right` to locate an "
"insertion point. Next, it runs the :meth:`~sequence.insert` method on *a* to "
"insert *x* at the appropriate position to maintain sort order."
msgstr ""

#: ../../library/bisect.rst:120
msgid "Performance Notes"
msgstr "Notas de rendimiento"

#: ../../library/bisect.rst:122
msgid ""
"When writing time sensitive code using *bisect()* and *insort()*, keep these "
"thoughts in mind:"
msgstr ""
"Cuando escriba código sensible al tiempo utilizando *bisect()* e *insort()*, "
"tenga en cuenta estas ideas:"

#: ../../library/bisect.rst:125
msgid ""
"Bisection is effective for searching ranges of values. For locating specific "
"values, dictionaries are more performant."
msgstr ""
"La bisección es eficaz para buscar rangos de valores. Para localizar valores "
"concretos, los diccionarios son más eficaces."

#: ../../library/bisect.rst:128
msgid ""
"The *insort()* functions are *O*\\ (*n*) because the logarithmic search step "
"is dominated by the linear time insertion step."
msgstr ""

#: ../../library/bisect.rst:131
msgid ""
"The search functions are stateless and discard key function results after "
"they are used.  Consequently, if the search functions are used in a loop, "
"the key function may be called again and again on the same array elements. "
"If the key function isn't fast, consider wrapping it "
"with :py:func:`functools.cache` to avoid duplicate computations.  "
"Alternatively, consider searching an array of precomputed keys to locate the "
"insertion point (as shown in the examples section below)."
msgstr ""

#: ../../library/bisect.rst:141
msgid ""
"`Sorted Collections <https://grantjenks.com/docs/sortedcollections/>`_ is a "
"high performance module that uses *bisect* to managed sorted collections of "
"data."
msgstr ""
"Colecciones ordenadas <https://grantjenks.com/docs/sortedcollections/>`_ es "
"un módulo de alto rendimiento que utiliza *bisect* para gestionar "
"colecciones ordenadas de datos."

#: ../../library/bisect.rst:145
msgid ""
"The `SortedCollection recipe <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ uses bisect to build a full-featured collection class "
"with straight-forward search methods and support for a key-function.  The "
"keys are precomputed to save unnecessary calls to the key function during "
"searches."
msgstr ""
"La receta `SortedCollection <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ utiliza bisect para construir una clase de colección "
"completa con métodos de búsqueda sencillos y soporte para una función "
"clave.  Las claves se calculan previamente para ahorrar llamadas "
"innecesarias a la función clave durante las búsquedas."

#: ../../library/bisect.rst:153
msgid "Searching Sorted Lists"
msgstr "Búsqueda en listas ordenadas"

#: ../../library/bisect.rst:155
msgid ""
"The above `bisect functions`_ are useful for finding insertion points but "
"can be tricky or awkward to use for common searching tasks. The following "
"five functions show how to transform them into the standard lookups for "
"sorted lists::"
msgstr ""

#: ../../library/bisect.rst:160
msgid ""
"def index(a, x):\n"
"    'Locate the leftmost value exactly equal to x'\n"
"    i = bisect_left(a, x)\n"
"    if i != len(a) and a[i] == x:\n"
"        return i\n"
"    raise ValueError\n"
"\n"
"def find_lt(a, x):\n"
"    'Find rightmost value less than x'\n"
"    i = bisect_left(a, x)\n"
"    if i:\n"
"        return a[i-1]\n"
"    raise ValueError\n"
"\n"
"def find_le(a, x):\n"
"    'Find rightmost value less than or equal to x'\n"
"    i = bisect_right(a, x)\n"
"    if i:\n"
"        return a[i-1]\n"
"    raise ValueError\n"
"\n"
"def find_gt(a, x):\n"
"    'Find leftmost value greater than x'\n"
"    i = bisect_right(a, x)\n"
"    if i != len(a):\n"
"        return a[i]\n"
"    raise ValueError\n"
"\n"
"def find_ge(a, x):\n"
"    'Find leftmost item greater than or equal to x'\n"
"    i = bisect_left(a, x)\n"
"    if i != len(a):\n"
"        return a[i]\n"
"    raise ValueError"
msgstr ""

#: ../../library/bisect.rst:197
msgid "Examples"
msgstr "Ejemplos"

#: ../../library/bisect.rst:201
msgid ""
"The :py:func:`~bisect.bisect` function can be useful for numeric table "
"lookups. This example uses :py:func:`~bisect.bisect` to look up a letter "
"grade for an exam score (say) based on a set of ordered numeric breakpoints: "
"90 and up is an 'A', 80 to 89 is a 'B', and so on::"
msgstr ""

#: ../../library/bisect.rst:206
msgid ""
">>> def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):\n"
"...     i = bisect(breakpoints, score)\n"
"...     return grades[i]\n"
"...\n"
">>> [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]]\n"
"['F', 'A', 'C', 'C', 'B', 'A', 'A']"
msgstr ""

#: ../../library/bisect.rst:213
msgid ""
"The :py:func:`~bisect.bisect` and :py:func:`~bisect.insort` functions also "
"work with lists of tuples.  The *key* argument can serve to extract the "
"field used for ordering records in a table::"
msgstr ""

#: ../../library/bisect.rst:217
msgid ""
">>> from collections import namedtuple\n"
">>> from operator import attrgetter\n"
">>> from bisect import bisect, insort\n"
">>> from pprint import pprint\n"
"\n"
">>> Movie = namedtuple('Movie', ('name', 'released', 'director'))\n"
"\n"
">>> movies = [\n"
"...     Movie('Jaws', 1975, 'Spielberg'),\n"
"...     Movie('Titanic', 1997, 'Cameron'),\n"
"...     Movie('The Birds', 1963, 'Hitchcock'),\n"
"...     Movie('Aliens', 1986, 'Cameron')\n"
"... ]\n"
"\n"
">>> # Find the first movie released after 1960\n"
">>> by_year = attrgetter('released')\n"
">>> movies.sort(key=by_year)\n"
">>> movies[bisect(movies, 1960, key=by_year)]\n"
"Movie(name='The Birds', released=1963, director='Hitchcock')\n"
"\n"
">>> # Insert a movie while maintaining sort order\n"
">>> romance = Movie('Love Story', 1970, 'Hiller')\n"
">>> insort(movies, romance, key=by_year)\n"
">>> pprint(movies)\n"
"[Movie(name='The Birds', released=1963, director='Hitchcock'),\n"
" Movie(name='Love Story', released=1970, director='Hiller'),\n"
" Movie(name='Jaws', released=1975, director='Spielberg'),\n"
" Movie(name='Aliens', released=1986, director='Cameron'),\n"
" Movie(name='Titanic', released=1997, director='Cameron')]"
msgstr ""

#: ../../library/bisect.rst:247
msgid ""
"If the key function is expensive, it is possible to avoid repeated function "
"calls by searching a list of precomputed keys to find the index of a record::"
msgstr ""
"Si la función clave es cara, es posible evitar las llamadas repetidas a la "
"función buscando en una lista de claves precalculadas para encontrar el "
"índice de un registro::"

#: ../../library/bisect.rst:250
msgid ""
">>> data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]\n"
">>> data.sort(key=lambda r: r[1])       # Or use operator.itemgetter(1).\n"
">>> keys = [r[1] for r in data]         # Precompute a list of keys.\n"
">>> data[bisect_left(keys, 0)]\n"
"('black', 0)\n"
">>> data[bisect_left(keys, 1)]\n"
"('blue', 1)\n"
">>> data[bisect_left(keys, 5)]\n"
"('red', 5)\n"
">>> data[bisect_left(keys, 8)]\n"
"('yellow', 8)"
msgstr ""
