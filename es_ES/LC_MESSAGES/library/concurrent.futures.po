# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# eulalio barbero espinosa <eulalio@disroot.org>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 14:15+0000\n"
"PO-Revision-Date: 2025-09-16 00:01+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../library/concurrent.futures.rst:2
msgid ":mod:`!concurrent.futures` --- Launching parallel tasks"
msgstr ":mod:`!concurrent.futures` --- Lanzamiento de tareas paralelas"

#: ../../library/concurrent.futures.rst:9
msgid ""
"**Source code:** :source:`Lib/concurrent/futures/thread.py`, :source:`Lib/"
"concurrent/futures/process.py`, and :source:`Lib/concurrent/futures/"
"interpreter.py`"
msgstr ""

#: ../../library/concurrent.futures.rst:15
msgid ""
"The :mod:`concurrent.futures` module provides a high-level interface for "
"asynchronously executing callables."
msgstr ""
"El módulo :mod:`concurrent.futures` proporciona una interfaz de alto nivel "
"para la ejecución asíncrona de callables."

#: ../../library/concurrent.futures.rst:18
msgid ""
"The asynchronous execution can be performed with threads, using :class:"
"`ThreadPoolExecutor` or :class:`InterpreterPoolExecutor`, or separate "
"processes, using :class:`ProcessPoolExecutor`. Each implements the same "
"interface, which is defined by the abstract :class:`Executor` class."
msgstr ""

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Disponibilidad"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""

#: ../../library/concurrent.futures.rst:27
msgid "Executor Objects"
msgstr "Objetos ejecutores"

#: ../../library/concurrent.futures.rst:31
msgid ""
"An abstract class that provides methods to execute calls asynchronously.  It "
"should not be used directly, but through its concrete subclasses."
msgstr ""
"Clase abstracta que proporciona métodos para ejecutar llamadas de forma "
"asíncrona.  No debe utilizarse directamente, sino a través de sus subclases "
"concretas."

#: ../../library/concurrent.futures.rst:36
msgid ""
"Schedules the callable, *fn*, to be executed as ``fn(*args, **kwargs)`` and "
"returns a :class:`Future` object representing the execution of the "
"callable. ::"
msgstr ""
"Programa la llamada, *fn*, para que se ejecute como ``fn(*args, **kwargs)`` "
"y devuelve un objeto :class:`Future` que representa la ejecución de la "
"llamada. ::"

#: ../../library/concurrent.futures.rst:40
msgid ""
"with ThreadPoolExecutor(max_workers=1) as executor:\n"
"    future = executor.submit(pow, 323, 1235)\n"
"    print(future.result())"
msgstr ""
"con ThreadPoolExecutor(max_trabajadores=1) como executor:\n"
"    future = executor.submit(pow, 323, 1235)\n"
"    print(futuro.resultado())"

#: ../../library/concurrent.futures.rst:46
msgid "Similar to :func:`map(fn, *iterables) <map>` except:"
msgstr "Similar a :func:`map(fn, *iterables) <map>` excepto:"

#: ../../library/concurrent.futures.rst:48
msgid ""
"The *iterables* are collected immediately rather than lazily, unless a "
"*buffersize* is specified to limit the number of submitted tasks whose "
"results have not yet been yielded. If the buffer is full, iteration over the "
"*iterables* pauses until a result is yielded from the buffer."
msgstr ""

#: ../../library/concurrent.futures.rst:53
msgid ""
"*fn* is executed asynchronously and several calls to *fn* may be made "
"concurrently."
msgstr ""
"*fn* se ejecuta de forma asíncrona y pueden realizarse varias llamadas a "
"*fn* simultáneamente."

#: ../../library/concurrent.futures.rst:56
msgid ""
"The returned iterator raises a :exc:`TimeoutError` if :meth:`~iterator."
"__next__` is called and the result isn't available after *timeout* seconds "
"from the original call to :meth:`Executor.map`. *timeout* can be an int or a "
"float.  If *timeout* is not specified or ``None``, there is no limit to the "
"wait time."
msgstr ""
"El iterador devuelto genera un :exc:`TimeoutError` si se llama a :meth:"
"`~iterator.__next__` y el resultado no está disponible después de *timeout* "
"segundos desde la llamada original a :meth:`Executor.map`. *timeout* puede "
"ser un int o un float.  Si *timeout* no se especifica o ``None``, no hay "
"límite para el tiempo de espera."

#: ../../library/concurrent.futures.rst:62
msgid ""
"If a *fn* call raises an exception, then that exception will be raised when "
"its value is retrieved from the iterator."
msgstr ""
"Si una llamada *fn* lanza una excepción, entonces esa excepción será lanzada "
"cuando su valor sea recuperado del iterador."

#: ../../library/concurrent.futures.rst:65
msgid ""
"When using :class:`ProcessPoolExecutor`, this method chops *iterables* into "
"a number of chunks which it submits to the pool as separate tasks.  The "
"(approximate) size of these chunks can be specified by setting *chunksize* "
"to a positive integer.  For very long iterables, using a large value for "
"*chunksize* can significantly improve performance compared to the default "
"size of 1.  With :class:`ThreadPoolExecutor` and :class:"
"`InterpreterPoolExecutor`, *chunksize* has no effect."
msgstr ""

#: ../../library/concurrent.futures.rst:74
msgid "Added the *chunksize* parameter."
msgstr ""

#: ../../library/concurrent.futures.rst:77
msgid "Added the *buffersize* parameter."
msgstr ""

#: ../../library/concurrent.futures.rst:82
msgid ""
"Signal the executor that it should free any resources that it is using when "
"the currently pending futures are done executing.  Calls to :meth:`Executor."
"submit` and :meth:`Executor.map` made after shutdown will raise :exc:"
"`RuntimeError`."
msgstr ""
"Indica al ejecutor que debe liberar los recursos que esté utilizando cuando "
"los futuros pendientes en ese momento hayan terminado de ejecutarse.  Las "
"llamadas a :meth:`Executor.submit` y :meth:`Executor.map` realizadas después "
"de la desconexión activarán :exc:`RuntimeError`."

#: ../../library/concurrent.futures.rst:87
msgid ""
"If *wait* is ``True`` then this method will not return until all the pending "
"futures are done executing and the resources associated with the executor "
"have been freed.  If *wait* is ``False`` then this method will return "
"immediately and the resources associated with the executor will be freed "
"when all pending futures are done executing.  Regardless of the value of "
"*wait*, the entire Python program will not exit until all pending futures "
"are done executing."
msgstr ""
"Si *wait* es ``True`` entonces este método no retornará hasta que todos los "
"futuros pendientes hayan terminado de ejecutarse y los recursos asociados "
"con el ejecutor hayan sido liberados.  Si *wait* es ``False`` entonces este "
"método retornará inmediatamente y los recursos asociados con el ejecutor "
"serán liberados cuando todos los futuros pendientes hayan terminado de "
"ejecutarse.  Independientemente del valor de *wait*, todo el programa Python "
"no saldrá hasta que todos los futuros pendientes hayan terminado de "
"ejecutarse."

#: ../../library/concurrent.futures.rst:95
msgid ""
"If *cancel_futures* is ``True``, this method will cancel all pending futures "
"that the executor has not started running. Any futures that are completed or "
"running won't be cancelled, regardless of the value of *cancel_futures*."
msgstr ""
"Si *cancel_futures* es ``True``, este método cancelará todos los futuros "
"pendientes que el ejecutor no haya empezado a ejecutar. Cualquier futuro que "
"esté completado o en ejecución no será cancelado, independientemente del "
"valor de *cancel_futures*."

#: ../../library/concurrent.futures.rst:100
msgid ""
"If both *cancel_futures* and *wait* are ``True``, all futures that the "
"executor has started running will be completed prior to this method "
"returning. The remaining futures are cancelled."
msgstr ""
"Si tanto *cancel_futures* como *wait* son ``True``, todos los futuros que el "
"ejecutor haya empezado a ejecutar se completarán antes de que este método "
"regrese. Los futuros restantes se cancelan."

#: ../../library/concurrent.futures.rst:104
msgid ""
"You can avoid having to call this method explicitly if you use the executor "
"as a :term:`context manager` via the  :keyword:`with` statement, which will "
"shutdown the :class:`Executor` (waiting as if :meth:`Executor.shutdown` were "
"called with *wait* set to ``True``)::"
msgstr ""

#: ../../library/concurrent.futures.rst:109
msgid ""
"import shutil\n"
"with ThreadPoolExecutor(max_workers=4) as e:\n"
"    e.submit(shutil.copy, 'src1.txt', 'dest1.txt')\n"
"    e.submit(shutil.copy, 'src2.txt', 'dest2.txt')\n"
"    e.submit(shutil.copy, 'src3.txt', 'dest3.txt')\n"
"    e.submit(shutil.copy, 'src4.txt', 'dest4.txt')"
msgstr ""
"import shutil\n"
"with ThreadPoolExecutor(max_workers=4) as e:\n"
"    e.submit(shutil.copy, 'src1.txt', 'dest1.txt')\n"
"    e.submit(shutil.copy, 'src2.txt', 'dest2.txt')\n"
"    e.submit(shutil.copy, 'src3.txt', 'dest3.txt')\n"
"    e.submit(shutil.copy, 'src4.txt', 'dest4.txt')"

#: ../../library/concurrent.futures.rst:116
msgid "Added *cancel_futures*."
msgstr "Añadido *cancel_futures*."

#: ../../library/concurrent.futures.rst:121
msgid "ThreadPoolExecutor"
msgstr "Ejecutor de ThreadPool"

#: ../../library/concurrent.futures.rst:123
msgid ""
":class:`ThreadPoolExecutor` is an :class:`Executor` subclass that uses a "
"pool of threads to execute calls asynchronously."
msgstr ""
":class:`ThreadPoolExecutor` es una subclase de :class:`Executor` que utiliza "
"un pool de hilos para ejecutar llamadas de forma asíncrona."

#: ../../library/concurrent.futures.rst:126
msgid ""
"Deadlocks can occur when the callable associated with a :class:`Future` "
"waits on the results of another :class:`Future`.  For example::"
msgstr ""
"Pueden producirse bloqueos cuando la llamada asociada a :class:`Future` "
"espera los resultados de otra :class:`Future`.  Por ejemplo::"

#: ../../library/concurrent.futures.rst:129
msgid ""
"import time\n"
"def wait_on_b():\n"
"    time.sleep(5)\n"
"    print(b.result())  # b will never complete because it is waiting on a.\n"
"    return 5\n"
"\n"
"def wait_on_a():\n"
"    time.sleep(5)\n"
"    print(a.result())  # a will never complete because it is waiting on b.\n"
"    return 6\n"
"\n"
"\n"
"executor = ThreadPoolExecutor(max_workers=2)\n"
"a = executor.submit(wait_on_b)\n"
"b = executor.submit(wait_on_a)"
msgstr ""
"import time\n"
"def wait_on_b():\n"
"    time.sleep(5)\n"
"    print(b.result())  # b nunca se completará porque está esperando a a.\n"
"    return 5\n"
"\n"
"def wait_on_a():\n"
"    time.sleep(5)\n"
"    print(a.result())  # a nunca se completará porque está esperando a b.\n"
"    return 6\n"
"\n"
"\n"
"executor = ThreadPoolExecutor(max_workers=2)\n"
"a = executor.submit(wait_on_b)\n"
"b = executor.submit(wait_on_a)"

#: ../../library/concurrent.futures.rst:145
msgid "And::"
msgstr "Y::"

#: ../../library/concurrent.futures.rst:147
msgid ""
"def wait_on_future():\n"
"    f = executor.submit(pow, 5, 2)\n"
"    # This will never complete because there is only one worker thread and\n"
"    # it is executing this function.\n"
"    print(f.result())\n"
"\n"
"executor = ThreadPoolExecutor(max_workers=1)\n"
"executor.submit(wait_on_future)"
msgstr ""
"def wait_on_future()):\n"
"    f = executor.submit(pow, 5, 2)\n"
"    # Esto nunca se completará porque sólo hay un hilo trabajador y\n"
"    # está ejecutando esta función.\n"
"    print(f.result())\n"
"\n"
"executor = ThreadPoolExecutor(max_trabajadores=1)\n"
"executor.submit(wait_on_future)"

#: ../../library/concurrent.futures.rst:159
msgid ""
"An :class:`Executor` subclass that uses a pool of at most *max_workers* "
"threads to execute calls asynchronously."
msgstr ""
"Una subclase de :class:`Executor` que utiliza un grupo de como máximo "
"*max_workers* hilos para ejecutar llamadas de forma asíncrona."

#: ../../library/concurrent.futures.rst:162
msgid ""
"All threads enqueued to ``ThreadPoolExecutor`` will be joined before the "
"interpreter can exit. Note that the exit handler which does this is executed "
"*before* any exit handlers added using ``atexit``. This means exceptions in "
"the main thread must be caught and handled in order to signal threads to "
"exit gracefully. For this reason, it is recommended that "
"``ThreadPoolExecutor`` not be used for long-running tasks."
msgstr ""
"Todos los hilos en cola a ``ThreadPoolExecutor`` se unirán antes de que el "
"intérprete pueda salir. Tenga en cuenta que el manejador de salida que hace "
"esto se ejecuta *antes* que cualquier manejador de salida añadido usando "
"``atexit``. Esto significa que las excepciones en el subproceso principal "
"deben ser capturadas y manejadas para indicar a los subprocesos que salgan "
"correctamente. Por esta razón, se recomienda no utilizar "
"``ThreadPoolExecutor`` para tareas de larga duración."

#: ../../library/concurrent.futures.rst:169
msgid ""
"*initializer* is an optional callable that is called at the start of each "
"worker thread; *initargs* is a tuple of arguments passed to the "
"initializer.  Should *initializer* raise an exception, all currently pending "
"jobs will raise a :exc:`~concurrent.futures.thread.BrokenThreadPool`, as "
"well as any attempt to submit more jobs to the pool."
msgstr ""
"*initializer* es una llamada opcional que se realiza al inicio de cada "
"subproceso del trabajador; *initargs* es una tupla de argumentos pasados al "
"inicializador.  Si *initializer* lanza una excepción, todos los trabajos "
"pendientes lanzarán un :exc:`~concurrent.futures.thread.BrokenThreadPool`, "
"así como cualquier intento de enviar más trabajos al pool."

#: ../../library/concurrent.futures.rst:175
msgid ""
"If *max_workers* is ``None`` or not given, it will default to the number of "
"processors on the machine, multiplied by ``5``, assuming that :class:"
"`ThreadPoolExecutor` is often used to overlap I/O instead of CPU work and "
"the number of workers should be higher than the number of workers for :class:"
"`ProcessPoolExecutor`."
msgstr ""
"Si *max_workers* es ``None`` o no se indica, por defecto será el número de "
"procesadores de la máquina, multiplicado por ``5``, asumiendo que :class:"
"`ThreadPoolExecutor` se utiliza a menudo para solapar trabajo de E/S en "
"lugar de trabajo de CPU y el número de trabajadores debería ser mayor que el "
"número de trabajadores para :class:`ProcessPoolExecutor`."

#: ../../library/concurrent.futures.rst:183
msgid ""
"Added the *thread_name_prefix* parameter to allow users to control the :"
"class:`threading.Thread` names for worker threads created by the pool for "
"easier debugging."
msgstr ""
"Se ha añadido el parámetro *thread_name_prefix* para permitir a los usuarios "
"controlar los nombres :class:`threading.Thread` de los hilos de trabajo "
"creados por el pool para facilitar la depuración."

#: ../../library/concurrent.futures.rst:188
#: ../../library/concurrent.futures.rst:391
msgid "Added the *initializer* and *initargs* arguments."
msgstr "Añadidos los argumentos *initializer* e *initargs*."

#: ../../library/concurrent.futures.rst:191
msgid ""
"Default value of *max_workers* is changed to ``min(32, os.cpu_count() + "
"4)``. This default value preserves at least 5 workers for I/O bound tasks. "
"It utilizes at most 32 CPU cores for CPU bound tasks which release the GIL. "
"And it avoids using very large resources implicitly on many-core machines."
msgstr ""
"El valor por defecto de *max_workers* se cambia a ``min(32, os.cpu_count() + "
"4)``. Este valor por defecto preserva al menos 5 trabajadores para tareas "
"ligadas a E/S. Utiliza como máximo 32 núcleos de CPU para tareas ligadas a "
"CPU que liberan el GIL. Y evita el uso implícito de recursos muy grandes en "
"máquinas de muchos núcleos."

#: ../../library/concurrent.futures.rst:197
msgid ""
"ThreadPoolExecutor now reuses idle worker threads before starting "
"*max_workers* worker threads too."
msgstr ""
"ThreadPoolExecutor ahora reutiliza los hilos de trabajo inactivos antes de "
"iniciar también los hilos de trabajo *max_workers*."

#: ../../library/concurrent.futures.rst:200
msgid ""
"Default value of *max_workers* is changed to ``min(32, (os."
"process_cpu_count() or 1) + 4)``."
msgstr ""

#: ../../library/concurrent.futures.rst:208
msgid "ThreadPoolExecutor Example"
msgstr "ThreadPoolExecutor Example"

#: ../../library/concurrent.futures.rst:211
msgid ""
"import concurrent.futures\n"
"import urllib.request\n"
"\n"
"URLS = ['http://www.foxnews.com/',\n"
"        'http://www.cnn.com/',\n"
"        'http://europe.wsj.com/',\n"
"        'http://www.bbc.co.uk/',\n"
"        'http://nonexistent-subdomain.python.org/']\n"
"\n"
"# Retrieve a single page and report the URL and contents\n"
"def load_url(url, timeout):\n"
"    with urllib.request.urlopen(url, timeout=timeout) as conn:\n"
"        return conn.read()\n"
"\n"
"# We can use a with statement to ensure threads are cleaned up promptly\n"
"with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n"
"    # Start the load operations and mark each future with its URL\n"
"    future_to_url = {executor.submit(load_url, url, 60): url for url in "
"URLS}\n"
"    for future in concurrent.futures.as_completed(future_to_url):\n"
"        url = future_to_url[future]\n"
"        try:\n"
"            data = future.result()\n"
"        except Exception as exc:\n"
"            print('%r generated an exception: %s' % (url, exc))\n"
"        else:\n"
"            print('%r page is %d bytes' % (url, len(data)))"
msgstr ""

#: ../../library/concurrent.futures.rst:240
msgid "InterpreterPoolExecutor"
msgstr ""

#: ../../library/concurrent.futures.rst:242
msgid ""
"The :class:`InterpreterPoolExecutor` class uses a pool of interpreters to "
"execute calls asynchronously.  It is a :class:`ThreadPoolExecutor` subclass, "
"which means each worker is running in its own thread. The difference here is "
"that each worker has its own interpreter, and runs each task using that "
"interpreter."
msgstr ""

#: ../../library/concurrent.futures.rst:248
msgid ""
"The biggest benefit to using interpreters instead of only threads is true "
"multi-core parallelism.  Each interpreter has its own :term:`Global "
"Interpreter Lock <global interpreter lock>`, so code running in one "
"interpreter can run on one CPU core, while code in another interpreter runs "
"unblocked on a different core."
msgstr ""

#: ../../library/concurrent.futures.rst:254
msgid ""
"The tradeoff is that writing concurrent code for use with multiple "
"interpreters can take extra effort.  However, this is because it forces you "
"to be deliberate about how and when interpreters interact, and to be "
"explicit about what data is shared between interpreters. This results in "
"several benefits that help balance the extra effort, including true multi-"
"core parallelism,  For example, code written this way can make it easier to "
"reason about concurrency.  Another major benefit is that you don't have to "
"deal with several of the big pain points of using threads, like race "
"conditions."
msgstr ""

#: ../../library/concurrent.futures.rst:264
msgid ""
"Each worker's interpreter is isolated from all the other interpreters. "
"\"Isolated\" means each interpreter has its own runtime state and operates "
"completely independently.  For example, if you redirect :data:`sys.stdout` "
"in one interpreter, it will not be automatically redirected to any other "
"interpreter.  If you import a module in one interpreter, it is not "
"automatically imported in any other.  You would need to import the module "
"separately in interpreter where you need it.  In fact, each module imported "
"in an interpreter is a completely separate object from the same module in a "
"different interpreter, including :mod:`sys`, :mod:`builtins`, and even "
"``__main__``."
msgstr ""

#: ../../library/concurrent.futures.rst:276
msgid ""
"Isolation means a mutable object, or other data, cannot be used by more than "
"one interpreter at the same time.  That effectively means interpreters "
"cannot actually share such objects or data.  Instead, each interpreter must "
"have its own copy, and you will have to synchronize any changes between the "
"copies manually.  Immutable objects and data, like the builtin singletons, "
"strings, and tuples of immutable objects, don't have these limitations."
msgstr ""

#: ../../library/concurrent.futures.rst:284
msgid ""
"Communicating and synchronizing between interpreters is most effectively "
"done using dedicated tools, like those proposed in :pep:`734`.  One less "
"efficient alternative is to serialize with :mod:`pickle` and then send the "
"bytes over a shared :mod:`socket <socket>` or :func:`pipe <os.pipe>`."
msgstr ""

#: ../../library/concurrent.futures.rst:292
msgid ""
"A :class:`ThreadPoolExecutor` subclass that executes calls asynchronously "
"using a pool of at most *max_workers* threads.  Each thread runs tasks in "
"its own interpreter.  The worker interpreters are isolated from each other, "
"which means each has its own runtime state and that they can't share any "
"mutable objects or other data.  Each interpreter has its own :term:`Global "
"Interpreter Lock <global interpreter lock>`, which means code run with this "
"executor has true multi-core parallelism."
msgstr ""

#: ../../library/concurrent.futures.rst:300
msgid ""
"The optional *initializer* and *initargs* arguments have the same meaning as "
"for :class:`!ThreadPoolExecutor`: the initializer is run when each worker is "
"created, though in this case it is run in the worker's interpreter.  The "
"executor serializes the *initializer* and *initargs* using :mod:`pickle` "
"when sending them to the worker's interpreter."
msgstr ""

#: ../../library/concurrent.futures.rst:308
msgid ""
"The executor may replace uncaught exceptions from *initializer* with :class:"
"`~concurrent.futures.interpreter.ExecutionFailed`."
msgstr ""

#: ../../library/concurrent.futures.rst:311
msgid "Other caveats from parent :class:`ThreadPoolExecutor` apply here."
msgstr ""

#: ../../library/concurrent.futures.rst:313
msgid ""
":meth:`~Executor.submit` and :meth:`~Executor.map` work like normal, except "
"the worker serializes the callable and arguments using :mod:`pickle` when "
"sending them to its interpreter.  The worker likewise serializes the return "
"value when sending it back."
msgstr ""

#: ../../library/concurrent.futures.rst:318
msgid ""
"When a worker's current task raises an uncaught exception, the worker always "
"tries to preserve the exception as-is.  If that is successful then it also "
"sets the ``__cause__`` to a corresponding :class:`~concurrent.futures."
"interpreter.ExecutionFailed` instance, which contains a summary of the "
"original exception. In the uncommon case that the worker is not able to "
"preserve the original as-is then it directly preserves the corresponding :"
"class:`~concurrent.futures.interpreter.ExecutionFailed` instance instead."
msgstr ""

#: ../../library/concurrent.futures.rst:330
msgid "ProcessPoolExecutor"
msgstr "ProcessPoolExecutor"

#: ../../library/concurrent.futures.rst:332
msgid ""
"The :class:`ProcessPoolExecutor` class is an :class:`Executor` subclass that "
"uses a pool of processes to execute calls asynchronously. :class:"
"`ProcessPoolExecutor` uses the :mod:`multiprocessing` module, which allows "
"it to side-step the :term:`Global Interpreter Lock <global interpreter "
"lock>` but also means that only picklable objects can be executed and "
"returned."
msgstr ""
"La clase :class:`ProcessPoolExecutor` es una subclase de :class:`Executor` "
"que utiliza un conjunto de procesos para ejecutar llamadas de forma "
"asíncrona. :class:`ProcessPoolExecutor` utiliza el módulo :mod:"
"`multiprocessing`, lo que le permite evitar el:term:`Global Interpreter Lock "
"<global interpreter lock>` pero también significa que sólo se pueden "
"ejecutar y devolver objetos seleccionables."

#: ../../library/concurrent.futures.rst:339
msgid ""
"The ``__main__`` module must be importable by worker subprocesses. This "
"means that :class:`ProcessPoolExecutor` will not work in the interactive "
"interpreter."
msgstr ""
"El módulo ``__main__`` debe ser importable por los subprocesos de los "
"trabajadores. Esto significa que :class:`ProcessPoolExecutor` no funcionará "
"en el intérprete interactivo."

#: ../../library/concurrent.futures.rst:342
msgid ""
"Calling :class:`Executor` or :class:`Future` methods from a callable "
"submitted to a :class:`ProcessPoolExecutor` will result in deadlock."
msgstr ""
"La llamada a los métodos :class:`Executor` o :class:`Future` desde una "
"llamada enviada a :class:`ProcessPoolExecutor` provocará un bloqueo."

#: ../../library/concurrent.futures.rst:345
msgid ""
"Note that the restrictions on functions and arguments needing to picklable "
"as per :class:`multiprocessing.Process` apply when using :meth:`~Executor."
"submit` and :meth:`~Executor.map` on a :class:`ProcessPoolExecutor`. A "
"function defined in a REPL or a lambda should not be expected to work."
msgstr ""

#: ../../library/concurrent.futures.rst:352
msgid ""
"An :class:`Executor` subclass that executes calls asynchronously using a "
"pool of at most *max_workers* processes.  If *max_workers* is ``None`` or "
"not given, it will default to :func:`os.process_cpu_count`. If *max_workers* "
"is less than or equal to ``0``, then a :exc:`ValueError` will be raised. On "
"Windows, *max_workers* must be less than or equal to ``61``. If it is not "
"then :exc:`ValueError` will be raised. If *max_workers* is ``None``, then "
"the default chosen will be at most ``61``, even if more processors are "
"available. *mp_context* can be a :mod:`multiprocessing` context or ``None``. "
"It will be used to launch the workers. If *mp_context* is ``None`` or not "
"given, the default :mod:`multiprocessing` context is used. See :ref:"
"`multiprocessing-start-methods`."
msgstr ""

#: ../../library/concurrent.futures.rst:366
msgid ""
"*initializer* is an optional callable that is called at the start of each "
"worker process; *initargs* is a tuple of arguments passed to the "
"initializer.  Should *initializer* raise an exception, all currently pending "
"jobs will raise a :exc:`~concurrent.futures.process.BrokenProcessPool`, as "
"well as any attempt to submit more jobs to the pool."
msgstr ""
"*initializer* es una llamada opcional que se realiza al inicio de cada "
"proceso de trabajo; *initargs* es una tupla de argumentos pasados al "
"inicializador.  Si *initializer* lanza una excepción, todos los trabajos "
"actualmente pendientes lanzarán un :exc:`~concurrent.futures.process."
"BrokenProcessPool`, así como cualquier intento de enviar más trabajos al "
"pool."

#: ../../library/concurrent.futures.rst:372
msgid ""
"*max_tasks_per_child* is an optional argument that specifies the maximum "
"number of tasks a single process can execute before it will exit and be "
"replaced with a fresh worker process. By default *max_tasks_per_child* is "
"``None`` which means worker processes will live as long as the pool. When a "
"max is specified, the \"spawn\" multiprocessing start method will be used by "
"default in absence of a *mp_context* parameter. This feature is incompatible "
"with the \"fork\" start method."
msgstr ""
"*max_tasks_per_child* es un argumento opcional que especifica el número "
"máximo de tareas que un único proceso puede ejecutar antes de salir y ser "
"reemplazado por un nuevo proceso trabajador. Por defecto, "
"*max_tasks_per_child* es ``None``, lo que significa que los procesos "
"trabajadores vivirán tanto como el pool. Cuando se especifica un max, el "
"método de inicio de multiprocesamiento \"spawn\" se utilizará por defecto en "
"ausencia de un parámetro *mp_context*. Esta característica es incompatible "
"con el método de inicio \"fork\"."

#: ../../library/concurrent.futures.rst:380
msgid ""
"When one of the worker processes terminates abruptly, a :exc:`~concurrent."
"futures.process.BrokenProcessPool` error is now raised. Previously, "
"behaviour was undefined but operations on the executor or its futures would "
"often freeze or deadlock."
msgstr ""
"Cuando uno de los procesos de trabajo termina abruptamente, ahora se genera "
"un error :exc:`~concurrent.futures.process.BrokenProcessPool`. "
"Anteriormente, el comportamiento era indefinido, pero las operaciones sobre "
"el ejecutor o sus futuros a menudo se congelaban o bloqueaban."

#: ../../library/concurrent.futures.rst:387
msgid ""
"The *mp_context* argument was added to allow users to control the "
"start_method for worker processes created by the pool."
msgstr ""
"Se ha añadido el argumento *mp_context* para permitir a los usuarios "
"controlar el método de inicio de los procesos de trabajo creados por el pool."

#: ../../library/concurrent.futures.rst:393
msgid ""
"The *max_tasks_per_child* argument was added to allow users to control the "
"lifetime of workers in the pool."
msgstr ""
"Se ha añadido el argumento *max_tasks_per_child* para permitir a los "
"usuarios controlar el tiempo de vida de los trabajadores en el pool."

#: ../../library/concurrent.futures.rst:397
msgid ""
"On POSIX systems, if your application has multiple threads and the :mod:"
"`multiprocessing` context uses the ``\"fork\"`` start method: The :func:`os."
"fork` function called internally to spawn workers may raise a :exc:"
"`DeprecationWarning`. Pass a *mp_context* configured to use a different "
"start method. See the :func:`os.fork` documentation for further explanation."
msgstr ""
"En sistemas POSIX, si su aplicación tiene múltiples hilos y el contexto :mod:"
"`multiprocessing` utiliza el método de inicio ``\"fork\"``: La función :func:"
"`os.fork` llamada internamente para desovar trabajadores puede lanzar un :"
"exc:`DeprecationWarning`. Pase un *mp_context* configurado para usar un "
"método de inicio diferente. Consulte la documentación de :func:`os.fork` "
"para más información."

#: ../../library/concurrent.futures.rst:405
msgid ""
"*max_workers* uses :func:`os.process_cpu_count` by default, instead of :func:"
"`os.cpu_count`."
msgstr ""

#: ../../library/concurrent.futures.rst:409
msgid ""
"The default process start method (see :ref:`multiprocessing-start-methods`) "
"changed away from *fork*. If you require the *fork* start method for :class:"
"`ProcessPoolExecutor` you must explicitly pass ``mp_context=multiprocessing."
"get_context(\"fork\")``."
msgstr ""

#: ../../library/concurrent.futures.rst:417
msgid ""
"Attempt to terminate all living worker processes immediately by calling :"
"meth:`Process.terminate <multiprocessing.Process.terminate>` on each of "
"them. Internally, it will also call :meth:`Executor.shutdown` to ensure that "
"all other resources associated with the executor are freed."
msgstr ""

#: ../../library/concurrent.futures.rst:422
#: ../../library/concurrent.futures.rst:434
msgid ""
"After calling this method the caller should no longer submit tasks to the "
"executor."
msgstr ""

#: ../../library/concurrent.futures.rst:429
msgid ""
"Attempt to kill all living worker processes immediately by calling :meth:"
"`Process.kill <multiprocessing.Process.kill>` on each of them. Internally, "
"it will also call :meth:`Executor.shutdown` to ensure that all other "
"resources associated with the executor are freed."
msgstr ""

#: ../../library/concurrent.futures.rst:442
msgid "ProcessPoolExecutor Example"
msgstr "Ejemplo de ProcessPoolExecutor"

#: ../../library/concurrent.futures.rst:445
msgid ""
"import concurrent.futures\n"
"import math\n"
"\n"
"PRIMES = [\n"
"    112272535095293,\n"
"    112582705942171,\n"
"    112272535095293,\n"
"    115280095190773,\n"
"    115797848077099,\n"
"    1099726899285419]\n"
"\n"
"def is_prime(n):\n"
"    if n < 2:\n"
"        return False\n"
"    if n == 2:\n"
"        return True\n"
"    if n % 2 == 0:\n"
"        return False\n"
"\n"
"    sqrt_n = int(math.floor(math.sqrt(n)))\n"
"    for i in range(3, sqrt_n + 1, 2):\n"
"        if n % i == 0:\n"
"            return False\n"
"    return True\n"
"\n"
"def main():\n"
"    with concurrent.futures.ProcessPoolExecutor() as executor:\n"
"        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):\n"
"            print('%d is prime: %s' % (number, prime))\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"
msgstr ""
"import concurrent.futures\n"
"import math\n"
"\n"
"PRIMES = [\n"
"    112272535095293,\n"
"    112582705942171,\n"
"    112272535095293,\n"
"    115280095190773,\n"
"    115797848077099,\n"
"    1099726899285419]\n"
"\n"
"def is_prime(n):\n"
"    if n < 2:\n"
"        return False\n"
"    if n == 2:\n"
"        return True\n"
"    if n % 2 == 0:\n"
"        return False\n"
"\n"
"    sqrt_n = int(math.floor(math.sqrt(n)))\n"
"    for i in range(3, sqrt_n + 1, 2):\n"
"        if n % i == 0:\n"
"            return False\n"
"    return True\n"
"\n"
"def main():\n"
"    with concurrent.futures.ProcessPoolExecutor() as executor:\n"
"        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):\n"
"            print('%d is prime: %s' % (number, prime))\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"

#: ../../library/concurrent.futures.rst:480
msgid "Future Objects"
msgstr "Objetos del futuro"

#: ../../library/concurrent.futures.rst:482
msgid ""
"The :class:`Future` class encapsulates the asynchronous execution of a "
"callable. :class:`Future` instances are created by :meth:`Executor.submit`."
msgstr ""
"La clase :class:`Future` encapsula la ejecución asíncrona de un callable. "
"Las instancias de :class:`Future` son creadas por :meth:`Executor.submit`."

#: ../../library/concurrent.futures.rst:487
msgid ""
"Encapsulates the asynchronous execution of a callable.  :class:`Future` "
"instances are created by :meth:`Executor.submit` and should not be created "
"directly except for testing."
msgstr ""
"Encapsula la ejecución asíncrona de un callable. :class:`Future` instancias "
"son creadas por :meth:`Executor.submit` y no deben ser creadas directamente "
"excepto para pruebas."

#: ../../library/concurrent.futures.rst:493
msgid ""
"Attempt to cancel the call.  If the call is currently being executed or "
"finished running and cannot be cancelled then the method will return "
"``False``, otherwise the call will be cancelled and the method will return "
"``True``."
msgstr ""
"Intento de cancelar la llamada.  Si la llamada se está ejecutando "
"actualmente o ha terminado de ejecutarse y no puede cancelarse, el método "
"devolverá ``False``, de lo contrario, la llamada se cancelará y el método "
"devolverá ``True``."

#: ../../library/concurrent.futures.rst:500
msgid "Return ``True`` if the call was successfully cancelled."
msgstr "Devuelve ``True`` si la llamada se ha cancelado correctamente."

#: ../../library/concurrent.futures.rst:504
msgid ""
"Return ``True`` if the call is currently being executed and cannot be "
"cancelled."
msgstr ""
"Devuelve ``True`` si la llamada se está ejecutando en ese momento y no se "
"puede cancelar."

#: ../../library/concurrent.futures.rst:509
msgid ""
"Return ``True`` if the call was successfully cancelled or finished running."
msgstr ""
"Devuelve ``True`` si la llamada se canceló con éxito o terminó de ejecutarse."

#: ../../library/concurrent.futures.rst:514
msgid ""
"Return the value returned by the call. If the call hasn't yet completed then "
"this method will wait up to *timeout* seconds.  If the call hasn't completed "
"in *timeout* seconds, then a :exc:`TimeoutError` will be raised. *timeout* "
"can be an int or float.  If *timeout* is not specified or ``None``, there is "
"no limit to the wait time."
msgstr ""
"Devuelve el valor devuelto por la llamada. Si la llamada aún no se ha "
"completado, este método esperará hasta *timeout* segundos.  Si la llamada no "
"se ha completado en *timeout* segundos, se mostrará un mensaje :exc:"
"`TimeoutError`. *timeout* puede ser un int o un float.  Si *timeout* no se "
"especifica o ``None``, no hay límite para el tiempo de espera."

#: ../../library/concurrent.futures.rst:521
#: ../../library/concurrent.futures.rst:535
msgid ""
"If the future is cancelled before completing then :exc:`.CancelledError` "
"will be raised."
msgstr ""
"Si el futuro se cancela antes de completarse, se creará :exc:`."
"CancelledError`."

#: ../../library/concurrent.futures.rst:524
msgid ""
"If the call raised an exception, this method will raise the same exception."
msgstr ""
"Si la llamada lanzó una excepción, este método lanzará la misma excepción."

#: ../../library/concurrent.futures.rst:528
msgid ""
"Return the exception raised by the call.  If the call hasn't yet completed "
"then this method will wait up to *timeout* seconds.  If the call hasn't "
"completed in *timeout* seconds, then a :exc:`TimeoutError` will be raised.  "
"*timeout* can be an int or float.  If *timeout* is not specified or "
"``None``, there is no limit to the wait time."
msgstr ""
"Devuelve la excepción lanzada por la llamada.  Si la llamada aún no se ha "
"completado, este método esperará hasta *timeout* segundos.  Si la llamada no "
"se ha completado en *timeout* segundos, entonces se lanzará un :exc:"
"`TimeoutError`.  *timeout* puede ser un int o un float.  Si *timeout* no se "
"especifica o ``None``, no hay límite para el tiempo de espera."

#: ../../library/concurrent.futures.rst:538
msgid "If the call completed without raising, ``None`` is returned."
msgstr "Si la llamada finaliza sin elevarse, se devuelve ``None``."

#: ../../library/concurrent.futures.rst:542
msgid ""
"Attaches the callable *fn* to the future.  *fn* will be called, with the "
"future as its only argument, when the future is cancelled or finishes "
"running."
msgstr ""
"Adjunta la llamada *fn* al futuro.  *fn* será llamada, con el futuro como "
"único argumento, cuando el futuro se cancele o termine de ejecutarse."

#: ../../library/concurrent.futures.rst:546
msgid ""
"Added callables are called in the order that they were added and are always "
"called in a thread belonging to the process that added them.  If the "
"callable raises an :exc:`Exception` subclass, it will be logged and "
"ignored.  If the callable raises a :exc:`BaseException` subclass, the "
"behavior is undefined."
msgstr ""
"Las llamadas añadidas se ejecutan en el orden en que fueron añadidas y "
"siempre se ejecutan en un subproceso perteneciente al proceso que las "
"añadió.  Si la llamada genera una subclase :exc:`Exception`, será registrada "
"e ignorada.  Si la llamada genera una subclase :exc:`BaseException`, el "
"comportamiento es indefinido."

#: ../../library/concurrent.futures.rst:552
msgid ""
"If the future has already completed or been cancelled, *fn* will be called "
"immediately."
msgstr ""
"Si el futuro ya se ha completado o cancelado, *fn* será llamado "
"inmediatamente."

#: ../../library/concurrent.futures.rst:555
msgid ""
"The following :class:`Future` methods are meant for use in unit tests and :"
"class:`Executor` implementations."
msgstr ""
"Los siguientes métodos de :class:`Future` están pensados para su uso en "
"pruebas unitarias e implementaciones de :class:`Executor`."

#: ../../library/concurrent.futures.rst:560
msgid ""
"This method should only be called by :class:`Executor` implementations "
"before executing the work associated with the :class:`Future` and by unit "
"tests."
msgstr ""
"Este método sólo debe ser llamado por las implementaciones de :class:"
"`Executor` antes de ejecutar el trabajo asociado a :class:`Future` y por las "
"pruebas unitarias."

#: ../../library/concurrent.futures.rst:564
msgid ""
"If the method returns ``False`` then the :class:`Future` was cancelled, i."
"e. :meth:`Future.cancel` was called and returned ``True``.  Any threads "
"waiting on the :class:`Future` completing (i.e. through :func:`as_completed` "
"or :func:`wait`) will be woken up."
msgstr ""
"Si el método devuelve ``False`` entonces el :class:`Future` fue cancelado, "
"es decir, :meth:`Future.cancel` fue llamado y devolvió ``True``.  Cualquier "
"hilo que esté esperando la finalización de :class:`Future` (es decir, a "
"través de :func:`as_completed` o :func:`wait`) será despertado."

#: ../../library/concurrent.futures.rst:569
msgid ""
"If the method returns ``True`` then the :class:`Future` was not cancelled "
"and has been put in the running state, i.e. calls to :meth:`Future.running` "
"will return ``True``."
msgstr ""
"Si el método devuelve ``True`` entonces el :class:`Future` no se ha "
"cancelado y se ha puesto en estado de ejecución, es decir, las llamadas a :"
"meth:`Future.running` devolverán ``True``."

#: ../../library/concurrent.futures.rst:573
msgid ""
"This method can only be called once and cannot be called after :meth:`Future."
"set_result` or :meth:`Future.set_exception` have been called."
msgstr ""
"Este método sólo puede invocarse una vez y no puede invocarse después de "
"haber invocado :meth:`Future.set_result` o :meth:`Future.set_exception`."

#: ../../library/concurrent.futures.rst:579
msgid ""
"Sets the result of the work associated with the :class:`Future` to *result*."
msgstr ""
"Establece el resultado del trabajo asociado a :class:`Future` en *result*."

#: ../../library/concurrent.futures.rst:582
#: ../../library/concurrent.futures.rst:595
msgid ""
"This method should only be used by :class:`Executor` implementations and "
"unit tests."
msgstr ""
"Este método sólo debe ser utilizado por :class:`Executor` implementaciones y "
"pruebas unitarias."

#: ../../library/concurrent.futures.rst:585
#: ../../library/concurrent.futures.rst:598
msgid ""
"This method raises :exc:`concurrent.futures.InvalidStateError` if the :class:"
"`Future` is already done."
msgstr ""
"Este método muestra :exc:`concurrent.futures.InvalidStateError` si :class:"
"`Future` ya está hecho."

#: ../../library/concurrent.futures.rst:592
msgid ""
"Sets the result of the work associated with the :class:`Future` to the :"
"class:`Exception` *exception*."
msgstr ""
"Establece el resultado del trabajo asociado con la :class:`Future` a la :"
"class:`Exception` *exception*."

#: ../../library/concurrent.futures.rst:604
msgid "Module Functions"
msgstr "Funciones del módulo"

#: ../../library/concurrent.futures.rst:608
msgid ""
"Wait for the :class:`Future` instances (possibly created by different :class:"
"`Executor` instances) given by *fs* to complete. Duplicate futures given to "
"*fs* are removed and will be returned only once. Returns a named 2-tuple of "
"sets.  The first set, named ``done``, contains the futures that completed "
"(finished or cancelled futures) before the wait completed.  The second set, "
"named ``not_done``, contains the futures that did not complete (pending or "
"running futures)."
msgstr ""
"Espera a que se completen las instancias de :class:`Future` (posiblemente "
"creadas por diferentes instancias de :class:`Executor` ) dadas por *fs*. Los "
"futuros duplicados dados a *fs* se eliminan y se devolverán sólo una vez. "
"Devuelve una 2-tupla de conjuntos con nombre.  El primer conjunto, llamado "
"``done``, contiene los futuros que se completaron (futuros terminados o "
"cancelados) antes de que se completara la espera.  El segundo conjunto, "
"denominado ``not_done``, contiene los futuros que no se completaron (futuros "
"pendientes o en ejecución)."

#: ../../library/concurrent.futures.rst:616
msgid ""
"*timeout* can be used to control the maximum number of seconds to wait "
"before returning.  *timeout* can be an int or float.  If *timeout* is not "
"specified or ``None``, there is no limit to the wait time."
msgstr ""
"*timeout* se puede utilizar para controlar el número máximo de segundos que "
"se debe esperar antes de volver.  *timeout* puede ser un int o un float.  Si "
"*timeout* no se especifica o ``None``, no hay límite para el tiempo de "
"espera."

#: ../../library/concurrent.futures.rst:620
msgid ""
"*return_when* indicates when this function should return.  It must be one of "
"the following constants:"
msgstr ""
"*return_when* indica cuándo debe retornar esta función.  Debe ser una de las "
"siguientes constantes:"

#: ../../library/concurrent.futures.rst:626
msgid "Constant"
msgstr "Constante"

#: ../../library/concurrent.futures.rst:627
msgid "Description"
msgstr "Description"

#: ../../library/concurrent.futures.rst:630
msgid "The function will return when any future finishes or is cancelled."
msgstr "La función volverá cuando cualquier futuro termine o se cancele."

#: ../../library/concurrent.futures.rst:633
msgid ""
"The function will return when any future finishes by raising an exception. "
"If no future raises an exception then it is equivalent to :const:"
"`ALL_COMPLETED`."
msgstr ""
"La función regresará cuando cualquier futuro termine lanzando una excepción. "
"Si ningún futuro lanza una excepción entonces es equivalente a :const:"
"`ALL_COMPLETED`."

#: ../../library/concurrent.futures.rst:638
msgid "The function will return when all futures finish or are cancelled."
msgstr "La función regresará cuando todos los futuros finalicen o se cancelen."

#: ../../library/concurrent.futures.rst:642
msgid ""
"Returns an iterator over the :class:`Future` instances (possibly created by "
"different :class:`Executor` instances) given by *fs* that yields futures as "
"they complete (finished or cancelled futures). Any futures given by *fs* "
"that are duplicated will be returned once. Any futures that completed "
"before :func:`as_completed` is called will be yielded first.  The returned "
"iterator raises a :exc:`TimeoutError` if :meth:`~iterator.__next__` is "
"called and the result isn't available after *timeout* seconds from the "
"original call to :func:`as_completed`.  *timeout* can be an int or float. If "
"*timeout* is not specified or ``None``, there is no limit to the wait time."
msgstr ""
"Devuelve un iterador sobre las instancias de :class:`Future` (posiblemente "
"creadas por diferentes instancias de :class:`Executor` ) dadas por *fs* que "
"devuelve futuros a medida que se completan (futuros finalizados o "
"cancelados). Cualquier futuro dado por *fs* que esté duplicado será devuelto "
"una vez. Cualquier futuro que se haya completado antes de llamar a :func:"
"`as_completed` se devolverá primero.  El iterador devuelto genera un :exc:"
"`TimeoutError` si se llama a :meth:`~iterator.__next__` y el resultado no "
"está disponible después de *timeout* segundos desde la llamada original a :"
"func:`as_completed`.  *timeout* puede ser un int o un float. Si *timeout* no "
"se especifica o ``None``, no hay límite para el tiempo de espera."

#: ../../library/concurrent.futures.rst:655
msgid ":pep:`3148` -- futures - execute computations asynchronously"
msgstr ":pep:`3148` -- futures: ejecutan cálculos de forma asíncrona."

#: ../../library/concurrent.futures.rst:656
msgid ""
"The proposal which described this feature for inclusion in the Python "
"standard library."
msgstr ""
"La propuesta que describía esta característica para su inclusión en la "
"biblioteca estándar de Python."

#: ../../library/concurrent.futures.rst:661
msgid "Exception classes"
msgstr "Clases de excepción"

#: ../../library/concurrent.futures.rst:667
msgid "Raised when a future is cancelled."
msgstr "Aparece cuando se cancela un futuro."

#: ../../library/concurrent.futures.rst:671
msgid ""
"A deprecated alias of :exc:`TimeoutError`, raised when a future operation "
"exceeds the given timeout."
msgstr ""
"Un alias obsoleto de :exc:`TimeoutError`, que se activa cuando una operación "
"futura supera el tiempo de espera dado."

#: ../../library/concurrent.futures.rst:676
msgid "This class was made an alias of :exc:`TimeoutError`."
msgstr "Esta clase se convirtió en un alias de :exc:`TimeoutError`."

#: ../../library/concurrent.futures.rst:681
msgid ""
"Derived from :exc:`RuntimeError`, this exception class is raised when an "
"executor is broken for some reason, and cannot be used to submit or execute "
"new tasks."
msgstr ""
"Derivada de :exc:`RuntimeError`, esta clase de excepción se lanza cuando un "
"ejecutor está roto por alguna razón, y no se puede utilizar para enviar o "
"ejecutar nuevas tareas."

#: ../../library/concurrent.futures.rst:689
msgid ""
"Raised when an operation is performed on a future that is not allowed in the "
"current state."
msgstr ""
"Se produce cuando se realiza una operación en un futuro que no está "
"permitida en el estado actual."

#: ../../library/concurrent.futures.rst:698
msgid ""
"Derived from :exc:`~concurrent.futures.BrokenExecutor`, this exception class "
"is raised when one of the workers of a :class:`~concurrent.futures."
"ThreadPoolExecutor` has failed initializing."
msgstr ""
"Derivada de :exc:`~concurrent.futures.BrokenExecutor`, esta clase de "
"excepción se lanza cuando uno de los trabajadores de :class:`~concurrent."
"futures.ThreadPoolExecutor` ha fallado al inicializarse."

#: ../../library/concurrent.futures.rst:709
msgid ""
"Derived from :exc:`~concurrent.futures.thread.BrokenThreadPool`, this "
"exception class is raised when one of the workers of a :class:`~concurrent."
"futures.InterpreterPoolExecutor` has failed initializing."
msgstr ""

#: ../../library/concurrent.futures.rst:718
msgid ""
"Raised from :class:`~concurrent.futures.InterpreterPoolExecutor` when the "
"given initializer fails or from :meth:`~concurrent.futures.Executor.submit` "
"when there's an uncaught exception from the submitted task."
msgstr ""

#: ../../library/concurrent.futures.rst:729
msgid ""
"Derived from :exc:`~concurrent.futures.BrokenExecutor` (formerly :exc:"
"`RuntimeError`), this exception class is raised when one of the workers of "
"a :class:`~concurrent.futures.ProcessPoolExecutor` has terminated in a non-"
"clean fashion (for example, if it was killed from the outside)."
msgstr ""
"Derivada de :exc:`~concurrent.futures.BrokenExecutor` (antes :exc:"
"`RuntimeError`), esta clase de excepción se lanza cuando uno de los "
"trabajadores de un :class:`~concurrent.futures.ProcessPoolExecutor` ha "
"terminado de forma no limpia (por ejemplo, si ha sido matado desde el "
"exterior)."
