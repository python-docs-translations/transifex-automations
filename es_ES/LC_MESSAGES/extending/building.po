# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../extending/building.rst:7
msgid "Building C and C++ Extensions"
msgstr "Construyendo extensiones de C y C++"

#: ../../extending/building.rst:9
msgid ""
"A C extension for CPython is a shared library (e.g. a ``.so`` file on Linux, "
"``.pyd`` on Windows), which exports an *initialization function*."
msgstr ""
"Una extensión C para CPython es una biblioteca compartida (por ejemplo, un "
"archivo ``.so`` en Linux, ``.pyd`` en Windows), que exporta una *función de "
"inicialización*."

#: ../../extending/building.rst:12
msgid ""
"To be importable, the shared library must be available on :envvar:"
"`PYTHONPATH`, and must be named after the module name, with an appropriate "
"extension. When using distutils, the correct filename is generated "
"automatically."
msgstr ""
"Para ser importable, la biblioteca compartida debe estar disponible en :"
"envvar:`PYTHONPATH`, y debe llamarse como el nombre del módulo, con una "
"extensión apropiada. Cuando se utiliza distutils, el nombre de archivo "
"correcto se genera automáticamente."

#: ../../extending/building.rst:16
msgid "The initialization function has the signature:"
msgstr "La función de inicialización tiene la firma:"

#: ../../extending/building.rst:20
msgid ""
"It returns either a fully initialized module, or a :c:type:`PyModuleDef` "
"instance. See :ref:`initializing-modules` for details."
msgstr ""
"Devuelve un módulo totalmente inicializado o una instancia de :c:type:"
"`PyModuleDef`. Ver :ref:`initializing-modules` para más detalles."

#: ../../extending/building.rst:25
msgid ""
"For modules with ASCII-only names, the function must be named "
"``PyInit_<modulename>``, with ``<modulename>`` replaced by the name of the "
"module. When using :ref:`multi-phase-initialization`, non-ASCII module names "
"are allowed. In this case, the initialization function name is "
"``PyInitU_<modulename>``, with ``<modulename>`` encoded using Python's "
"*punycode* encoding with hyphens replaced by underscores. In Python::"
msgstr ""
"Para módulos con nombres sólo ASCII, la función debe llamarse "
"``PyInit_<modulename>``, sustituyendo ``<modulename>`` por el nombre del "
"módulo. Cuando se utiliza :ref:`multi-phase-initialization`, se permiten "
"nombres de módulo que no sean ASCII. En este caso, el nombre de la función "
"de inicialización es ``PyInitU_<modulename>``, con ``<modulename>`` "
"codificado usando la codificación *punycode* de Python con guiones "
"reemplazados por guiones bajos. En Python::"

#: ../../extending/building.rst:39
msgid ""
"It is possible to export multiple modules from a single shared library by "
"defining multiple initialization functions. However, importing them requires "
"using symbolic links or a custom importer, because by default only the "
"function corresponding to the filename is found. See the *\"Multiple modules "
"in one library\"* section in :pep:`489` for details."
msgstr ""
"Es posible exportar varios módulos desde una única biblioteca compartida "
"definiendo varias funciones de inicialización. Sin embargo, para importarlos "
"es necesario utilizar enlaces simbólicos o un importador personalizado, ya "
"que por defecto sólo se encuentra la función correspondiente al nombre de "
"archivo. Consulte la sección *\"Múltiples módulos en una biblioteca \"* en :"
"pep:`489` para más detalles."

#: ../../extending/building.rst:49
msgid "Building C and C++ Extensions with distutils"
msgstr "Construyendo extensiones de C y C++ con distutils"

#: ../../extending/building.rst:53
msgid ""
"Extension modules can be built using distutils,  which is included in "
"Python. Since distutils also supports creation of binary packages, users "
"don't necessarily need a compiler and distutils to install the extension."
msgstr ""
"Los módulos de extensión se pueden construir utilizando distutils, que está "
"incluido en Python. Dado que distutils también admite la creación de "
"paquetes binarios, los usuarios no necesariamente necesitan un compilador y "
"distutils para instalar la extensión."

#: ../../extending/building.rst:57
msgid ""
"A distutils package contains a driver script, :file:`setup.py`. This is a "
"plain Python file, which, in the most simple case, could look like this:"
msgstr ""
"Un paquete de distutils contiene un script de controlador, :file:`setup.py`. "
"Este es un archivo de Python simple, que, en el caso más sencillo, podría "
"verse así:"

#: ../../extending/building.rst:73
msgid "With this :file:`setup.py`, and a file :file:`demo.c`, running ::"
msgstr "Con este :file:`setup.py`, y un archivo :file:`demo.c`, ejecutando ::"

#: ../../extending/building.rst:77
msgid ""
"will compile :file:`demo.c`, and produce an extension module named ``demo`` "
"in the :file:`build` directory. Depending on the system, the module file "
"will end up in a subdirectory :file:`build/lib.system`, and may have a name "
"like :file:`demo.so` or :file:`demo.pyd`."
msgstr ""
"compilará :file:`demo.c`, y producirá un módulo de extensión llamado "
"``demo`` en el directorio :file:`build`. Dependiendo del sistema, el archivo "
"del módulo terminará en un subdirectorio :file:`build/lib.system`, y puede "
"tener un nombre como :file:`demo.so` o :file:`demo.pyd`."

#: ../../extending/building.rst:82
msgid ""
"In the :file:`setup.py`, all execution is performed by calling the ``setup`` "
"function. This takes a variable number of keyword arguments, of which the "
"example above uses only a subset. Specifically, the example specifies meta-"
"information to build packages, and it specifies the contents of the "
"package.  Normally, a package will contain additional modules, like Python "
"source modules, documentation, subpackages, etc. Please refer to the "
"distutils documentation in :ref:`distutils-index` to learn more about the "
"features of distutils; this section explains building extension modules only."
msgstr ""
"En :file:`setup.py`, toda la ejecución se realiza llamando a la función "
"``setup``. Ésta toma un número variable de argumentos de palabra clave, de "
"los cuales el ejemplo anterior utiliza sólo un subconjunto. Específicamente, "
"el ejemplo especifica meta-información para construir paquetes, y especifica "
"el contenido del paquete.  Normalmente, un paquete contendrá módulos "
"adicionales, como módulos fuente de Python, documentación, subpaquetes, etc. "
"Por favor, consulte la documentación de distutils en :ref:`distutils-index` "
"para aprender más sobre las características de distutils; esta sección sólo "
"explica la construcción de módulos de extensión."

#: ../../extending/building.rst:91
msgid ""
"It is common to pre-compute arguments to :func:`setup`, to better structure "
"the driver script. In the example above, the ``ext_modules`` argument to :"
"func:`~distutils.core.setup` is a list of extension modules, each of which "
"is an instance of the :class:`~distutils.extension.Extension`. In the "
"example, the instance defines an extension named ``demo`` which is build by "
"compiling a single source file, :file:`demo.c`."
msgstr ""
"Es común precompilar argumentos a :func:`setup`, para estructurar mejor el "
"script del controlador. En el ejemplo anterior, el argumento ``ext_modules`` "
"para :func:`~distutils.core.setup` es una lista de módulos de extensión, "
"cada uno de los cuales es una instancia de :class:`~distutils.extension."
"Extension`. En el ejemplo, la instancia define una extensión llamada "
"``demo`` que se construye compilando un único archivo fuente, :file:`demo.c`."

#: ../../extending/building.rst:99
msgid ""
"In many cases, building an extension is more complex, since additional "
"preprocessor defines and libraries may be needed. This is demonstrated in "
"the example below."
msgstr ""
"En muchos casos, construir una extensión es más complejo, ya que pueden ser "
"necesarios definiciones adicionales del preprocesador y bibliotecas. Esto se "
"demuestra en el ejemplo a continuación."

#: ../../extending/building.rst:127
msgid ""
"In this example, :func:`~distutils.core.setup` is called with additional "
"meta-information, which is recommended when distribution packages have to be "
"built. For the extension itself, it specifies preprocessor defines, include "
"directories, library directories, and libraries. Depending on the compiler, "
"distutils passes this information in different ways to the compiler. For "
"example, on Unix, this may result in the compilation commands ::"
msgstr ""
"En este ejemplo, se llama a :func:`~distutils.core.setup` con meta-"
"información adicional, lo cual se recomienda cuando se deben construir "
"paquetes de distribución. Para la extensión en sí, especifica definiciones "
"de preprocesador, directorios de inclusión, directorios de bibliotecas y "
"bibliotecas. Dependiendo del compilador, distutils pasa esta información de "
"diferentes formas al compilador. Por ejemplo, en Unix, esto puede resultar "
"en los comandos de compilación ::"

#: ../../extending/building.rst:139
msgid ""
"These lines are for demonstration purposes only; distutils users should "
"trust that distutils gets the invocations right."
msgstr ""
"Estas líneas son solo para fines de demostración; los usuarios de distutils "
"deben confiar en que distutils realiza las invocaciones correctamente."

#: ../../extending/building.rst:146
msgid "Distributing your extension modules"
msgstr "Distribuyendo tus módulos de extensión"

#: ../../extending/building.rst:148
msgid ""
"When an extension has been successfully built, there are three ways to use "
"it."
msgstr ""
"Cuando una extensión se ha construido con éxito, hay tres formas de usarla."

#: ../../extending/building.rst:150
msgid ""
"End-users will typically want to install the module, they do so by running ::"
msgstr ""
"Los usuarios finales normalmente querrán instalar el módulo, se hace "
"ejecutando ::"

#: ../../extending/building.rst:154
msgid ""
"Module maintainers should produce source packages; to do so, they run ::"
msgstr ""
"Los mantenedores del módulo deben producir paquetes de código fuente; para "
"hacerlo, ejecutan ::"

#: ../../extending/building.rst:158
msgid ""
"In some cases, additional files need to be included in a source "
"distribution; this is done through a :file:`MANIFEST.in` file; see :ref:"
"`manifest` for details."
msgstr ""
"En algunos casos, es necesario incluir archivos adicionales en una "
"distribución fuente; esto se hace a través de un archivo :file:`MANIFEST."
"in`; ver :ref:`manifest` para más detalles."

#: ../../extending/building.rst:161
msgid ""
"If the source distribution has been built successfully, maintainers can also "
"create binary distributions. Depending on the platform, one of the following "
"commands can be used to do so. ::"
msgstr ""
"Si la distribución fuente se ha construido correctamente, los mantenedores "
"también pueden crear distribuciones binarias. Dependiendo de la plataforma, "
"se puede utilizar uno de los siguientes comandos para hacerlo. ::"
