# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-18 16:29+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../extending/building.rst:7
msgid "Building C and C++ Extensions"
msgstr "Створення розширень C і C++"

#: ../../extending/building.rst:9
msgid ""
"A C extension for CPython is a shared library (e.g. a ``.so`` file on Linux, "
"``.pyd`` on Windows), which exports an *initialization function*."
msgstr ""
"Розширення C для CPython — це спільна бібліотека (наприклад, файл ``.so`` у "
"Linux, ``.pyd`` у Windows), яка експортує *функцію ініціалізації*."

#: ../../extending/building.rst:12
msgid ""
"To be importable, the shared library must be available on :envvar:"
"`PYTHONPATH`, and must be named after the module name, with an appropriate "
"extension. When using setuptools, the correct filename is generated "
"automatically."
msgstr ""
"Чтобы общая библиотека была доступна для импорта, она должна быть доступна "
"по адресу :envvar:`PYTHONPATH` и должна быть названа в честь имени модуля с "
"соответствующим расширением. При использовании инструментов настройки "
"правильное имя файла генерируется автоматически."

#: ../../extending/building.rst:16
msgid "The initialization function has the signature:"
msgstr "Функція ініціалізації має сигнатуру:"

#: ../../extending/building.rst:20
msgid ""
"It returns either a fully initialized module, or a :c:type:`PyModuleDef` "
"instance. See :ref:`initializing-modules` for details."
msgstr ""
"Он возвращает либо полностью инициализированный модуль, либо экземпляр :c:"
"type:`PyModuleDef`. Подробности смотрите в разделе :ref:`initializing-"
"modules`."

#: ../../extending/building.rst:25
msgid ""
"For modules with ASCII-only names, the function must be named "
"``PyInit_<modulename>``, with ``<modulename>`` replaced by the name of the "
"module. When using :ref:`multi-phase-initialization`, non-ASCII module names "
"are allowed. In this case, the initialization function name is "
"``PyInitU_<modulename>``, with ``<modulename>`` encoded using Python's "
"*punycode* encoding with hyphens replaced by underscores. In Python::"
msgstr ""
"Para módulos con nombres sólo ASCII, la función debe llamarse "
"``PyInit_<modulename>``, sustituyendo ``<modulename>`` por el nombre del "
"módulo. Cuando se utiliza :ref:`multi-phase-initialization`, se permiten "
"nombres de módulo que no sean ASCII. En este caso, el nombre de la función "
"de inicialización es ``PyInitU_<modulename>``, con ``<modulename>`` "
"codificado usando la codificación *punycode* de Python con guiones "
"reemplazados por guiones bajos. En Python::"

#: ../../extending/building.rst:32
msgid ""
"def initfunc_name(name):\n"
"    try:\n"
"        suffix = b'_' + name.encode('ascii')\n"
"    except UnicodeEncodeError:\n"
"        suffix = b'U_' + name.encode('punycode').replace(b'-', b'_')\n"
"    return b'PyInit' + suffix"
msgstr ""
"def initfunc_name(name):\n"
"    try:\n"
"        suffix = b'_' + name.encode('ascii')\n"
"    except UnicodeEncodeError:\n"
"        suffix = b'U_' + name.encode('punycode').replace(b'-', b'_')\n"
"    return b'PyInit' + suffix"

#: ../../extending/building.rst:39
msgid ""
"It is possible to export multiple modules from a single shared library by "
"defining multiple initialization functions. However, importing them requires "
"using symbolic links or a custom importer, because by default only the "
"function corresponding to the filename is found. See the *\"Multiple modules "
"in one library\"* section in :pep:`489` for details."
msgstr ""
"Можна експортувати кілька модулів з однієї спільної бібліотеки, визначивши "
"кілька функцій ініціалізації. Однак для їх імпортування потрібно "
"використовувати символічні посилання або спеціальний імпортер, оскільки за "
"замовчуванням знайдено лише функцію, яка відповідає назві файлу. Подробиці "
"див. у розділі *\"Кілька модулів в одній бібліотеці\"* у :pep:`489`."

#: ../../extending/building.rst:52
msgid "Building C and C++ Extensions with setuptools"
msgstr "Создание расширений C и C++ с помощью инструментов настройки"

#: ../../extending/building.rst:54
msgid ""
"Python 3.12 and newer no longer come with distutils. Please refer to the "
"``setuptools`` documentation at https://setuptools.readthedocs.io/en/latest/"
"setuptools.html to learn more about how build and distribute C/C++ "
"extensions with setuptools."
msgstr ""
"Python версии 3.12 и новее больше не поставляется с distutils. Пожалуйста, "
"ознакомьтесь с документацией ``setuptools`` по адресу https://setuptools."
"readthedocs.io/en/latest/setuptools.html, чтобы узнать больше о том, как "
"создавать и распространять расширения C/C++ с помощью инструментов настройки."
