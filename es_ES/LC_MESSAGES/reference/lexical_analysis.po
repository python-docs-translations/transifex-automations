# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-09 14:15+0000\n"
"PO-Revision-Date: 2025-08-15 19:01+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../reference/lexical_analysis.rst:6
msgid "Lexical analysis"
msgstr ""

#: ../../reference/lexical_analysis.rst:10
msgid ""
"A Python program is read by a *parser*.  Input to the parser is a stream of :"
"term:`tokens <token>`, generated by the *lexical analyzer* (also known as "
"the *tokenizer*). This chapter describes how the lexical analyzer breaks a "
"file into tokens."
msgstr ""

#: ../../reference/lexical_analysis.rst:15
msgid ""
"Python reads program text as Unicode code points; the encoding of a source "
"file can be given by an encoding declaration and defaults to UTF-8, see :pep:"
"`3120` for details.  If the source file cannot be decoded, a :exc:"
"`SyntaxError` is raised."
msgstr ""

#: ../../reference/lexical_analysis.rst:24
msgid "Line structure"
msgstr ""

#: ../../reference/lexical_analysis.rst:28
msgid "A Python program is divided into a number of *logical lines*."
msgstr ""

#: ../../reference/lexical_analysis.rst:34
msgid "Logical lines"
msgstr ""

#: ../../reference/lexical_analysis.rst:38
msgid ""
"The end of a logical line is represented by the token :data:`~token."
"NEWLINE`. Statements cannot cross logical line boundaries except where :data:"
"`!NEWLINE` is allowed by the syntax (e.g., between statements in compound "
"statements). A logical line is constructed from one or more *physical lines* "
"by following the :ref:`explicit <explicit-joining>` or :ref:`implicit "
"<implicit-joining>` *line joining* rules."
msgstr ""

#: ../../reference/lexical_analysis.rst:49
msgid "Physical lines"
msgstr ""

#: ../../reference/lexical_analysis.rst:51
msgid ""
"A physical line is a sequence of characters terminated by one the following "
"end-of-line sequences:"
msgstr ""

#: ../../reference/lexical_analysis.rst:54
msgid "the Unix form using ASCII LF (linefeed),"
msgstr ""

#: ../../reference/lexical_analysis.rst:55
msgid ""
"the Windows form using the ASCII sequence CR LF (return followed by "
"linefeed),"
msgstr ""

#: ../../reference/lexical_analysis.rst:56
msgid "the '`Classic Mac OS`__' form using the ASCII CR (return) character."
msgstr ""

#: ../../reference/lexical_analysis.rst:60
msgid ""
"Regardless of platform, each of these sequences is replaced by a single "
"ASCII LF (linefeed) character. (This is done even inside :ref:`string "
"literals <strings>`.) Each line can use any of the sequences; they do not "
"need to be consistent within a file."
msgstr ""

#: ../../reference/lexical_analysis.rst:66
msgid ""
"The end of input also serves as an implicit terminator for the final "
"physical line."
msgstr ""

#: ../../reference/lexical_analysis.rst:69
msgid "Formally:"
msgstr ""

#: ../../reference/lexical_analysis.rst:80
msgid "Comments"
msgstr ""

#: ../../reference/lexical_analysis.rst:85
msgid ""
"A comment starts with a hash character (``#``) that is not part of a string "
"literal, and ends at the end of the physical line.  A comment signifies the "
"end of the logical line unless the implicit line joining rules are invoked. "
"Comments are ignored by the syntax."
msgstr ""

#: ../../reference/lexical_analysis.rst:94
msgid "Encoding declarations"
msgstr ""

#: ../../reference/lexical_analysis.rst:99
msgid ""
"If a comment in the first or second line of the Python script matches the "
"regular expression ``coding[=:]\\s*([-\\w.]+)``, this comment is processed "
"as an encoding declaration; the first group of this expression names the "
"encoding of the source code file. The encoding declaration must appear on a "
"line of its own. If it is the second line, the first line must also be a "
"comment-only line. The recommended forms of an encoding expression are ::"
msgstr ""

#: ../../reference/lexical_analysis.rst:106
msgid "# -*- coding: <encoding-name> -*-"
msgstr ""

#: ../../reference/lexical_analysis.rst:108
msgid "which is recognized also by GNU Emacs, and ::"
msgstr ""

#: ../../reference/lexical_analysis.rst:110
msgid "# vim:fileencoding=<encoding-name>"
msgstr ""

#: ../../reference/lexical_analysis.rst:112
msgid "which is recognized by Bram Moolenaar's VIM."
msgstr ""

#: ../../reference/lexical_analysis.rst:114
msgid ""
"If no encoding declaration is found, the default encoding is UTF-8.  If the "
"implicit or explicit encoding of a file is UTF-8, an initial UTF-8 byte-"
"order mark (``b'\\xef\\xbb\\xbf'``) is ignored rather than being a syntax "
"error."
msgstr ""

#: ../../reference/lexical_analysis.rst:118
msgid ""
"If an encoding is declared, the encoding name must be recognized by Python "
"(see :ref:`standard-encodings`). The encoding is used for all lexical "
"analysis, including string literals, comments and identifiers."
msgstr ""

#: ../../reference/lexical_analysis.rst:123
msgid ""
"All lexical analysis, including string literals, comments and identifiers, "
"works on Unicode text decoded using the source encoding. Any Unicode code "
"point, except the NUL control character, can appear in Python source."
msgstr ""

#: ../../reference/lexical_analysis.rst:137
msgid "Explicit line joining"
msgstr ""

#: ../../reference/lexical_analysis.rst:141
msgid ""
"Two or more physical lines may be joined into logical lines using backslash "
"characters (``\\``), as follows: when a physical line ends in a backslash "
"that is not part of a string literal or comment, it is joined with the "
"following forming a single logical line, deleting the backslash and the "
"following end-of-line character.  For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:147
msgid ""
"if 1900 < year < 2100 and 1 <= month <= 12 \\\n"
"   and 1 <= day <= 31 and 0 <= hour < 24 \\\n"
"   and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date\n"
"        return 1"
msgstr ""

#: ../../reference/lexical_analysis.rst:152
msgid ""
"A line ending in a backslash cannot carry a comment.  A backslash does not "
"continue a comment.  A backslash does not continue a token except for string "
"literals (i.e., tokens other than string literals cannot be split across "
"physical lines using a backslash).  A backslash is illegal elsewhere on a "
"line outside a string literal."
msgstr ""

#: ../../reference/lexical_analysis.rst:162
msgid "Implicit line joining"
msgstr ""

#: ../../reference/lexical_analysis.rst:164
msgid ""
"Expressions in parentheses, square brackets or curly braces can be split "
"over more than one physical line without using backslashes. For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:167
msgid ""
"month_names = ['Januari', 'Februari', 'Maart',      # These are the\n"
"               'April',   'Mei',      'Juni',       # Dutch names\n"
"               'Juli',    'Augustus', 'September',  # for the months\n"
"               'Oktober', 'November', 'December']   # of the year"
msgstr ""

#: ../../reference/lexical_analysis.rst:172
msgid ""
"Implicitly continued lines can carry comments.  The indentation of the "
"continuation lines is not important.  Blank continuation lines are allowed. "
"There is no NEWLINE token between implicit continuation lines.  Implicitly "
"continued lines can also occur within triple-quoted strings (see below); in "
"that case they cannot carry comments."
msgstr ""

#: ../../reference/lexical_analysis.rst:182
msgid "Blank lines"
msgstr ""

#: ../../reference/lexical_analysis.rst:186
msgid ""
"A logical line that contains only spaces, tabs, formfeeds and possibly a "
"comment, is ignored (i.e., no :data:`~token.NEWLINE` token is generated). "
"During interactive input of statements, handling of a blank line may differ "
"depending on the implementation of the read-eval-print loop. In the standard "
"interactive interpreter, an entirely blank logical line (that is, one "
"containing not even whitespace or a comment) terminates a multi-line "
"statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:198
msgid "Indentation"
msgstr ""

#: ../../reference/lexical_analysis.rst:202
msgid ""
"Leading whitespace (spaces and tabs) at the beginning of a logical line is "
"used to compute the indentation level of the line, which in turn is used to "
"determine the grouping of statements."
msgstr ""

#: ../../reference/lexical_analysis.rst:206
msgid ""
"Tabs are replaced (from left to right) by one to eight spaces such that the "
"total number of characters up to and including the replacement is a multiple "
"of eight (this is intended to be the same rule as used by Unix).  The total "
"number of spaces preceding the first non-blank character then determines the "
"line's indentation.  Indentation cannot be split over multiple physical "
"lines using backslashes; the whitespace up to the first backslash determines "
"the indentation."
msgstr ""

#: ../../reference/lexical_analysis.rst:214
msgid ""
"Indentation is rejected as inconsistent if a source file mixes tabs and "
"spaces in a way that makes the meaning dependent on the worth of a tab in "
"spaces; a :exc:`TabError` is raised in that case."
msgstr ""

#: ../../reference/lexical_analysis.rst:218
msgid ""
"**Cross-platform compatibility note:** because of the nature of text editors "
"on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for "
"the indentation in a single source file.  It should also be noted that "
"different platforms may explicitly limit the maximum indentation level."
msgstr ""

#: ../../reference/lexical_analysis.rst:223
msgid ""
"A formfeed character may be present at the start of the line; it will be "
"ignored for the indentation calculations above.  Formfeed characters "
"occurring elsewhere in the leading whitespace have an undefined effect (for "
"instance, they may reset the space count to zero)."
msgstr ""

#: ../../reference/lexical_analysis.rst:230
msgid ""
"The indentation levels of consecutive lines are used to generate :data:"
"`~token.INDENT` and :data:`~token.DEDENT` tokens, using a stack, as follows."
msgstr ""

#: ../../reference/lexical_analysis.rst:234
msgid ""
"Before the first line of the file is read, a single zero is pushed on the "
"stack; this will never be popped off again.  The numbers pushed on the stack "
"will always be strictly increasing from bottom to top.  At the beginning of "
"each logical line, the line's indentation level is compared to the top of "
"the stack. If it is equal, nothing happens. If it is larger, it is pushed on "
"the stack, and one :data:`!INDENT` token is generated.  If it is smaller, it "
"*must* be one of the numbers occurring on the stack; all numbers on the "
"stack that are larger are popped off, and for each number popped off a :data:"
"`!DEDENT` token is generated. At the end of the file, a :data:`!DEDENT` "
"token is generated for each number remaining on the stack that is larger "
"than zero."
msgstr ""

#: ../../reference/lexical_analysis.rst:245
msgid ""
"Here is an example of a correctly (though confusingly) indented piece of "
"Python code::"
msgstr ""

#: ../../reference/lexical_analysis.rst:248
msgid ""
"def perm(l):\n"
"        # Compute the list of all permutations of l\n"
"    if len(l) <= 1:\n"
"                  return [l]\n"
"    r = []\n"
"    for i in range(len(l)):\n"
"             s = l[:i] + l[i+1:]\n"
"             p = perm(s)\n"
"             for x in p:\n"
"              r.append(l[i:i+1] + x)\n"
"    return r"
msgstr ""

#: ../../reference/lexical_analysis.rst:260
msgid "The following example shows various indentation errors::"
msgstr ""

#: ../../reference/lexical_analysis.rst:262
msgid ""
" def perm(l):                       # error: first line indented\n"
"for i in range(len(l)):             # error: not indented\n"
"    s = l[:i] + l[i+1:]\n"
"        p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n"
"        for x in p:\n"
"                r.append(l[i:i+1] + x)\n"
"            return r                # error: inconsistent dedent"
msgstr ""

#: ../../reference/lexical_analysis.rst:270
msgid ""
"(Actually, the first three errors are detected by the parser; only the last "
"error is found by the lexical analyzer --- the indentation of ``return r`` "
"does not match a level popped off the stack.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:278
msgid "Whitespace between tokens"
msgstr ""

#: ../../reference/lexical_analysis.rst:280
msgid ""
"Except at the beginning of a logical line or in string literals, the "
"whitespace characters space, tab and formfeed can be used interchangeably to "
"separate tokens.  Whitespace is needed between two tokens only if their "
"concatenation could otherwise be interpreted as a different token. For "
"example, ``ab`` is one token, but ``a b`` is two tokens. However, ``+a`` and "
"``+ a`` both produce two tokens, ``+`` and ``a``, as ``+a`` is not a valid "
"token."
msgstr ""

#: ../../reference/lexical_analysis.rst:291
msgid "End marker"
msgstr ""

#: ../../reference/lexical_analysis.rst:293
msgid ""
"At the end of non-interactive input, the lexical analyzer generates an :data:"
"`~token.ENDMARKER` token."
msgstr ""

#: ../../reference/lexical_analysis.rst:300
msgid "Other tokens"
msgstr ""

#: ../../reference/lexical_analysis.rst:302
msgid ""
"Besides :data:`~token.NEWLINE`, :data:`~token.INDENT` and :data:`~token."
"DEDENT`, the following categories of tokens exist: *identifiers* and "
"*keywords* (:data:`~token.NAME`), *literals* (such as :data:`~token.NUMBER` "
"and :data:`~token.STRING`), and other symbols (*operators* and "
"*delimiters*, :data:`~token.OP`). Whitespace characters (other than logical "
"line terminators, discussed earlier) are not tokens, but serve to delimit "
"tokens. Where ambiguity exists, a token comprises the longest possible "
"string that forms a legal token, when read from left to right."
msgstr ""

#: ../../reference/lexical_analysis.rst:316
msgid "Names (identifiers and keywords)"
msgstr ""

#: ../../reference/lexical_analysis.rst:320
msgid ""
":data:`~token.NAME` tokens represent *identifiers*, *keywords*, and *soft "
"keywords*."
msgstr ""

#: ../../reference/lexical_analysis.rst:323
msgid ""
"Within the ASCII range (U+0001..U+007F), the valid characters for names "
"include the uppercase and lowercase letters (``A-Z`` and ``a-z``), the "
"underscore ``_`` and, except for the first character, the digits ``0`` "
"through ``9``."
msgstr ""

#: ../../reference/lexical_analysis.rst:328
msgid ""
"Names must contain at least one character, but have no upper length limit. "
"Case is significant."
msgstr ""

#: ../../reference/lexical_analysis.rst:331
msgid ""
"Besides ``A-Z``, ``a-z``, ``_`` and ``0-9``, names can also use \"letter-"
"like\" and \"number-like\" characters from outside the ASCII range, as "
"detailed below."
msgstr ""

#: ../../reference/lexical_analysis.rst:334
msgid ""
"All identifiers are converted into the `normalization form`_ NFKC while "
"parsing; comparison of identifiers is based on NFKC."
msgstr ""

#: ../../reference/lexical_analysis.rst:337
msgid ""
"Formally, the first character of a normalized identifier must belong to the "
"set ``id_start``, which is the union of:"
msgstr ""

#: ../../reference/lexical_analysis.rst:340
msgid "Unicode category ``<Lu>`` - uppercase letters (includes ``A`` to ``Z``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:341
msgid "Unicode category ``<Ll>`` - lowercase letters (includes ``a`` to ``z``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:342
msgid "Unicode category ``<Lt>`` - titlecase letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:343
msgid "Unicode category ``<Lm>`` - modifier letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:344
msgid "Unicode category ``<Lo>`` - other letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:345
msgid "Unicode category ``<Nl>`` - letter numbers"
msgstr ""

#: ../../reference/lexical_analysis.rst:346
msgid "{``\"_\"``} - the underscore"
msgstr ""

#: ../../reference/lexical_analysis.rst:347
msgid ""
"``<Other_ID_Start>`` - an explicit set of characters in `PropList.txt`_ to "
"support backwards compatibility"
msgstr ""

#: ../../reference/lexical_analysis.rst:350
msgid ""
"The remaining characters must belong to the set ``id_continue``, which is "
"the union of:"
msgstr ""

#: ../../reference/lexical_analysis.rst:353
msgid "all characters in ``id_start``"
msgstr ""

#: ../../reference/lexical_analysis.rst:354
msgid "Unicode category ``<Nd>`` - decimal numbers (includes ``0`` to ``9``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:355
msgid "Unicode category ``<Pc>`` - connector punctuations"
msgstr ""

#: ../../reference/lexical_analysis.rst:356
msgid "Unicode category ``<Mn>`` - nonspacing marks"
msgstr ""

#: ../../reference/lexical_analysis.rst:357
msgid "Unicode category ``<Mc>`` - spacing combining marks"
msgstr ""

#: ../../reference/lexical_analysis.rst:358
msgid ""
"``<Other_ID_Continue>`` - another explicit set of characters in `PropList."
"txt`_ to support backwards compatibility"
msgstr ""

#: ../../reference/lexical_analysis.rst:361
msgid ""
"Unicode categories use the version of the Unicode Character Database as "
"included in the :mod:`unicodedata` module."
msgstr ""

#: ../../reference/lexical_analysis.rst:364
msgid ""
"These sets are based on the Unicode standard annex `UAX-31`_. See also :pep:"
"`3131` for further details."
msgstr ""

#: ../../reference/lexical_analysis.rst:367
msgid ""
"Even more formally, names are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:381
msgid ""
"A non-normative listing of all valid identifier characters as defined by "
"Unicode is available in the `DerivedCoreProperties.txt`_ file in the Unicode "
"Character Database."
msgstr ""

#: ../../reference/lexical_analysis.rst:395
msgid "Keywords"
msgstr ""

#: ../../reference/lexical_analysis.rst:401
msgid ""
"The following names are used as reserved words, or *keywords* of the "
"language, and cannot be used as ordinary identifiers.  They must be spelled "
"exactly as written here:"
msgstr ""

#: ../../reference/lexical_analysis.rst:405
msgid ""
"False      await      else       import     pass\n"
"None       break      except     in         raise\n"
"True       class      finally    is         return\n"
"and        continue   for        lambda     try\n"
"as         def        from       nonlocal   while\n"
"assert     del        global     not        with\n"
"async      elif       if         or         yield"
msgstr ""

#: ../../reference/lexical_analysis.rst:419
msgid "Soft Keywords"
msgstr ""

#: ../../reference/lexical_analysis.rst:425
msgid ""
"Some names are only reserved under specific contexts. These are known as "
"*soft keywords*:"
msgstr ""

#: ../../reference/lexical_analysis.rst:428
msgid ""
"``match``, ``case``, and ``_``, when used in the :keyword:`match` statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:429
msgid "``type``, when used in the :keyword:`type` statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:431
msgid ""
"These syntactically act as keywords in their specific contexts, but this "
"distinction is done at the parser level, not when tokenizing."
msgstr ""

#: ../../reference/lexical_analysis.rst:434
msgid ""
"As soft keywords, their use in the grammar is possible while still "
"preserving compatibility with existing code that uses these names as "
"identifier names."
msgstr ""

#: ../../reference/lexical_analysis.rst:438
msgid "``type`` is now a soft keyword."
msgstr ""

#: ../../reference/lexical_analysis.rst:447
msgid "Reserved classes of identifiers"
msgstr ""

#: ../../reference/lexical_analysis.rst:449
msgid ""
"Certain classes of identifiers (besides keywords) have special meanings.  "
"These classes are identified by the patterns of leading and trailing "
"underscore characters:"
msgstr ""

#: ../../reference/lexical_analysis.rst:453
msgid "``_*``"
msgstr ""

#: ../../reference/lexical_analysis.rst:454
msgid "Not imported by ``from module import *``."
msgstr ""

#: ../../reference/lexical_analysis.rst:456
msgid "``_``"
msgstr ""

#: ../../reference/lexical_analysis.rst:457
msgid ""
"In a ``case`` pattern within a :keyword:`match` statement, ``_`` is a :ref:"
"`soft keyword <soft-keywords>` that denotes a :ref:`wildcard <wildcard-"
"patterns>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:461
msgid ""
"Separately, the interactive interpreter makes the result of the last "
"evaluation available in the variable ``_``. (It is stored in the :mod:"
"`builtins` module, alongside built-in functions like ``print``.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:466
msgid ""
"Elsewhere, ``_`` is a regular identifier. It is often used to name "
"\"special\" items, but it is not special to Python itself."
msgstr ""

#: ../../reference/lexical_analysis.rst:471
msgid ""
"The name ``_`` is often used in conjunction with internationalization; refer "
"to the documentation for the :mod:`gettext` module for more information on "
"this convention."
msgstr ""

#: ../../reference/lexical_analysis.rst:475
msgid "It is also commonly used for unused variables."
msgstr ""

#: ../../reference/lexical_analysis.rst:477
msgid "``__*__``"
msgstr ""

#: ../../reference/lexical_analysis.rst:478
msgid ""
"System-defined names, informally known as \"dunder\" names. These names are "
"defined by the interpreter and its implementation (including the standard "
"library). Current system names are discussed in the :ref:`specialnames` "
"section and elsewhere. More will likely be defined in future versions of "
"Python.  *Any* use of ``__*__`` names, in any context, that does not follow "
"explicitly documented use, is subject to breakage without warning."
msgstr ""

#: ../../reference/lexical_analysis.rst:485
msgid "``__*``"
msgstr ""

#: ../../reference/lexical_analysis.rst:486
msgid ""
"Class-private names.  Names in this category, when used within the context "
"of a class definition, are re-written to use a mangled form to help avoid "
"name clashes between \"private\" attributes of base and derived classes. See "
"section :ref:`atom-identifiers`."
msgstr ""

#: ../../reference/lexical_analysis.rst:495
msgid "Literals"
msgstr "Literales"

#: ../../reference/lexical_analysis.rst:499
msgid "Literals are notations for constant values of some built-in types."
msgstr ""

#: ../../reference/lexical_analysis.rst:501
msgid ""
"In terms of lexical analysis, Python has :ref:`string, bytes <strings>` and :"
"ref:`numeric <numbers>` literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:504
msgid ""
"Other \"literals\" are lexically denoted using :ref:`keywords <keywords>` "
"(``None``, ``True``, ``False``) and the special :ref:`ellipsis token "
"<lexical-ellipsis>` (``...``)."
msgstr ""

#: ../../reference/lexical_analysis.rst:515
msgid "String and Bytes literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:517
msgid ""
"String literals are text enclosed in single quotes (``'``) or double quotes "
"(``\"``). For example:"
msgstr ""

#: ../../reference/lexical_analysis.rst:520
msgid ""
"\"spam\"\n"
"'eggs'"
msgstr ""

#: ../../reference/lexical_analysis.rst:525
msgid ""
"The quote used to start the literal also terminates it, so a string literal "
"can only contain the other quote (except with escape sequences, see below). "
"For example:"
msgstr ""

#: ../../reference/lexical_analysis.rst:529
msgid ""
"'Say \"Hello\", please.'\n"
"\"Don't do that!\""
msgstr ""

#: ../../reference/lexical_analysis.rst:534
msgid ""
"Except for this limitation, the choice of quote character (``'`` or ``\"``) "
"does not affect how the literal is parsed."
msgstr ""

#: ../../reference/lexical_analysis.rst:537
msgid ""
"Inside a string literal, the backslash (``\\``) character introduces an :dfn:"
"`escape sequence`, which has special meaning depending on the character "
"after the backslash. For example, ``\\\"`` denotes the double quote "
"character, and does *not* end the string:"
msgstr ""

#: ../../reference/lexical_analysis.rst:543
msgid ""
">>> print(\"Say \\\"Hello\\\" to everyone!\")\n"
"Say \"Hello\" to everyone!"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid ""
"See :ref:`escape sequences <escape-sequences>` below for a full list of such "
"sequences, and more details."
msgstr ""

#: ../../reference/lexical_analysis.rst:557
msgid "Triple-quoted strings"
msgstr ""

#: ../../reference/lexical_analysis.rst:559
msgid ""
"Strings can also be enclosed in matching groups of three single or double "
"quotes. These are generally referred to as :dfn:`triple-quoted strings`::"
msgstr ""

#: ../../reference/lexical_analysis.rst:563
msgid "\"\"\"This is a triple-quoted string.\"\"\""
msgstr ""

#: ../../reference/lexical_analysis.rst:565
msgid ""
"In triple-quoted literals, unescaped quotes are allowed (and are retained), "
"except that three unescaped quotes in a row terminate the literal, if they "
"are of the same kind (``'`` or ``\"``) used at the start::"
msgstr ""

#: ../../reference/lexical_analysis.rst:569
msgid "\"\"\"This string has \"quotes\" inside.\"\"\""
msgstr ""

#: ../../reference/lexical_analysis.rst:571
msgid "Unescaped newlines are also allowed and retained::"
msgstr ""

#: ../../reference/lexical_analysis.rst:573
msgid ""
"'''This triple-quoted string\n"
"continues on the next line.'''"
msgstr ""

#: ../../reference/lexical_analysis.rst:582
msgid "String prefixes"
msgstr ""

#: ../../reference/lexical_analysis.rst:584
msgid ""
"String literals can have an optional :dfn:`prefix` that influences how the "
"content of the literal is parsed, for example:"
msgstr ""

#: ../../reference/lexical_analysis.rst:587
msgid ""
"b\"data\"\n"
"f'{result=}'"
msgstr ""

#: ../../reference/lexical_analysis.rst:592
msgid "The allowed prefixes are:"
msgstr ""

#: ../../reference/lexical_analysis.rst:594
msgid "``b``: :ref:`Bytes literal <bytes-literal>`"
msgstr ""

#: ../../reference/lexical_analysis.rst:595
msgid "``r``: :ref:`Raw string <raw-strings>`"
msgstr ""

#: ../../reference/lexical_analysis.rst:596
msgid "``f``: :ref:`Formatted string literal <f-strings>` (\"f-string\")"
msgstr ""

#: ../../reference/lexical_analysis.rst:597
msgid "``t``: :ref:`Template string literal <t-strings>` (\"t-string\")"
msgstr ""

#: ../../reference/lexical_analysis.rst:598
msgid "``u``: No effect (allowed for backwards compatibility)"
msgstr ""

#: ../../reference/lexical_analysis.rst:600
msgid "See the linked sections for details on each type."
msgstr ""

#: ../../reference/lexical_analysis.rst:602
msgid ""
"Prefixes are case-insensitive (for example, '``B``' works the same as "
"'``b``'). The '``r``' prefix can be combined with '``f``', '``t``' or "
"'``b``', so '``fr``', '``rf``', '``tr``', '``rt``', '``br``', and '``rb``' "
"are also valid prefixes."
msgstr ""

#: ../../reference/lexical_analysis.rst:606
msgid ""
"The ``'rb'`` prefix of raw bytes literals has been added as a synonym of "
"``'br'``."
msgstr ""

#: ../../reference/lexical_analysis.rst:610
msgid ""
"Support for the unicode legacy literal (``u'value'``) was reintroduced to "
"simplify the maintenance of dual Python 2.x and 3.x codebases. See :pep:"
"`414` for more information."
msgstr ""

#: ../../reference/lexical_analysis.rst:616
msgid "Formal grammar"
msgstr ""

#: ../../reference/lexical_analysis.rst:618
msgid ""
"String literals, except :ref:`\"f-strings\" <f-strings>` and :ref:`\"t-"
"strings\" <t-strings>`, are described by the following lexical definitions."
msgstr ""

#: ../../reference/lexical_analysis.rst:622
msgid ""
"These definitions use :ref:`negative lookaheads <lexical-lookaheads>` (``!"
"``) to indicate that an ending quote ends the literal."
msgstr ""

#: ../../reference/lexical_analysis.rst:640
msgid ""
"Note that as in all lexical definitions, whitespace is significant. In "
"particular, the prefix (if any) must be immediately followed by the starting "
"quote."
msgstr ""

#: ../../reference/lexical_analysis.rst:662
msgid "Escape sequences"
msgstr ""

#: ../../reference/lexical_analysis.rst:664
msgid ""
"Unless an '``r``' or '``R``' prefix is present, escape sequences in string "
"and bytes literals are interpreted according to rules similar to those used "
"by Standard C.  The recognized escape sequences are:"
msgstr ""

#: ../../reference/lexical_analysis.rst:672
msgid "Escape Sequence"
msgstr ""

#: ../../reference/lexical_analysis.rst:673
msgid "Meaning"
msgstr "Significado"

#: ../../reference/lexical_analysis.rst:674
msgid "``\\``\\ <newline>"
msgstr ""

#: ../../reference/lexical_analysis.rst:675
msgid ":ref:`string-escape-ignore`"
msgstr ""

#: ../../reference/lexical_analysis.rst:676
msgid "``\\\\``"
msgstr ""

#: ../../reference/lexical_analysis.rst:677
msgid ":ref:`Backslash <string-escape-escaped-char>`"
msgstr ""

#: ../../reference/lexical_analysis.rst:678
msgid "``\\'``"
msgstr ""

#: ../../reference/lexical_analysis.rst:679
msgid ":ref:`Single quote <string-escape-escaped-char>`"
msgstr ""

#: ../../reference/lexical_analysis.rst:680
msgid "``\\\"``"
msgstr ""

#: ../../reference/lexical_analysis.rst:681
msgid ":ref:`Double quote <string-escape-escaped-char>`"
msgstr ""

#: ../../reference/lexical_analysis.rst:682
msgid "``\\a``"
msgstr ""

#: ../../reference/lexical_analysis.rst:683
msgid "ASCII Bell (BEL)"
msgstr ""

#: ../../reference/lexical_analysis.rst:684
msgid "``\\b``"
msgstr "``\\b``"

#: ../../reference/lexical_analysis.rst:685
msgid "ASCII Backspace (BS)"
msgstr ""

#: ../../reference/lexical_analysis.rst:686
msgid "``\\f``"
msgstr ""

#: ../../reference/lexical_analysis.rst:687
msgid "ASCII Formfeed (FF)"
msgstr ""

#: ../../reference/lexical_analysis.rst:688
msgid "``\\n``"
msgstr ""

#: ../../reference/lexical_analysis.rst:689
msgid "ASCII Linefeed (LF)"
msgstr ""

#: ../../reference/lexical_analysis.rst:690
msgid "``\\r``"
msgstr ""

#: ../../reference/lexical_analysis.rst:691
msgid "ASCII Carriage Return (CR)"
msgstr ""

#: ../../reference/lexical_analysis.rst:692
msgid "``\\t``"
msgstr ""

#: ../../reference/lexical_analysis.rst:693
msgid "ASCII Horizontal Tab (TAB)"
msgstr ""

#: ../../reference/lexical_analysis.rst:694
msgid "``\\v``"
msgstr ""

#: ../../reference/lexical_analysis.rst:695
msgid "ASCII Vertical Tab (VT)"
msgstr ""

#: ../../reference/lexical_analysis.rst:696
msgid ":samp:`\\\\\\\\{ooo}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:697
msgid ":ref:`string-escape-oct`"
msgstr ""

#: ../../reference/lexical_analysis.rst:698
msgid ":samp:`\\\\x{hh}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:699
msgid ":ref:`string-escape-hex`"
msgstr ""

#: ../../reference/lexical_analysis.rst:700
msgid ":samp:`\\\\N\\\\{{name}\\\\}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:701
msgid ":ref:`string-escape-named`"
msgstr ""

#: ../../reference/lexical_analysis.rst:702
msgid ":samp:`\\\\u{xxxx}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:703
#: ../../reference/lexical_analysis.rst:705
msgid ":ref:`Hexadecimal Unicode character <string-escape-long-hex>`"
msgstr ""

#: ../../reference/lexical_analysis.rst:704
msgid ":samp:`\\\\U{xxxxxxxx}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:710
msgid "Ignored end of line"
msgstr ""

#: ../../reference/lexical_analysis.rst:712
msgid "A backslash can be added at the end of a line to ignore the newline::"
msgstr ""

#: ../../reference/lexical_analysis.rst:714
msgid ""
">>> 'This string will not include \\\n"
"... backslashes or newline characters.'\n"
"'This string will not include backslashes or newline characters.'"
msgstr ""

#: ../../reference/lexical_analysis.rst:718
msgid ""
"The same result can be achieved using :ref:`triple-quoted strings "
"<strings>`, or parentheses and :ref:`string literal concatenation <string-"
"concatenation>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:724
msgid "Escaped characters"
msgstr ""

#: ../../reference/lexical_analysis.rst:726
msgid ""
"To include a backslash in a non-:ref:`raw <raw-strings>` Python string "
"literal, it must be doubled. The ``\\\\`` escape sequence denotes a single "
"backslash character::"
msgstr ""

#: ../../reference/lexical_analysis.rst:730
msgid ""
">>> print('C:\\\\Program Files')\n"
"C:\\Program Files"
msgstr ""

#: ../../reference/lexical_analysis.rst:733
msgid ""
"Similarly, the ``\\'`` and ``\\\"`` sequences denote the single and double "
"quote character, respectively::"
msgstr ""

#: ../../reference/lexical_analysis.rst:736
msgid ""
">>> print('\\' and \\\"')\n"
"' and \""
msgstr ""

#: ../../reference/lexical_analysis.rst:742
msgid "Octal character"
msgstr ""

#: ../../reference/lexical_analysis.rst:744
msgid ""
"The sequence :samp:`\\\\\\\\{ooo}` denotes a *character* with the octal "
"(base 8) value *ooo*::"
msgstr ""

#: ../../reference/lexical_analysis.rst:747
msgid ""
">>> '\\120'\n"
"'P'"
msgstr ""

#: ../../reference/lexical_analysis.rst:750
msgid "Up to three octal digits (0 through 7) are accepted."
msgstr ""

#: ../../reference/lexical_analysis.rst:752
#: ../../reference/lexical_analysis.rst:777
msgid ""
"In a bytes literal, *character* means a *byte* with the given value. In a "
"string literal, it means a Unicode character with the given value."
msgstr ""

#: ../../reference/lexical_analysis.rst:755
msgid ""
"Octal escapes with value larger than ``0o377`` (255) produce a :exc:"
"`DeprecationWarning`."
msgstr ""

#: ../../reference/lexical_analysis.rst:759
msgid ""
"Octal escapes with value larger than ``0o377`` (255) produce a :exc:"
"`SyntaxWarning`. In a future Python version they will raise a :exc:"
"`SyntaxError`."
msgstr ""

#: ../../reference/lexical_analysis.rst:767
msgid "Hexadecimal character"
msgstr ""

#: ../../reference/lexical_analysis.rst:769
msgid ""
"The sequence :samp:`\\\\x{hh}` denotes a *character* with the hex (base 16) "
"value *hh*::"
msgstr ""

#: ../../reference/lexical_analysis.rst:772
msgid ""
">>> '\\x50'\n"
"'P'"
msgstr ""

#: ../../reference/lexical_analysis.rst:775
msgid "Unlike in Standard C, exactly two hex digits are required."
msgstr ""

#: ../../reference/lexical_analysis.rst:783
msgid "Named Unicode character"
msgstr ""

#: ../../reference/lexical_analysis.rst:785
msgid ""
"The sequence :samp:`\\\\N\\\\{{name}\\\\}` denotes a Unicode character with "
"the given *name*::"
msgstr ""

#: ../../reference/lexical_analysis.rst:788
msgid ""
">>> '\\N{LATIN CAPITAL LETTER P}'\n"
"'P'\n"
">>> '\\N{SNAKE}'\n"
"'🐍'"
msgstr ""

#: ../../reference/lexical_analysis.rst:793
msgid "This sequence cannot appear in :ref:`bytes literals <bytes-literal>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:795
msgid ""
"Support for `name aliases <https://www.unicode.org/Public/16.0.0/ucd/"
"NameAliases.txt>`__ has been added."
msgstr ""

#: ../../reference/lexical_analysis.rst:802
msgid "Hexadecimal Unicode characters"
msgstr ""

#: ../../reference/lexical_analysis.rst:804
msgid ""
"These sequences :samp:`\\\\u{xxxx}` and :samp:`\\\\U{xxxxxxxx}` denote the "
"Unicode character with the given hex (base 16) value. Exactly four digits "
"are required for ``\\u``; exactly eight digits are required for ``\\U``. The "
"latter can encode any Unicode character."
msgstr ""

#: ../../reference/lexical_analysis.rst:810
msgid ""
">>> '\\u1234'\n"
"'ሴ'\n"
">>> '\\U0001f40d'\n"
"'🐍'"
msgstr ""

#: ../../reference/lexical_analysis.rst:817
msgid "These sequences cannot appear in :ref:`bytes literals <bytes-literal>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:823
msgid "Unrecognized escape sequences"
msgstr ""

#: ../../reference/lexical_analysis.rst:825
msgid ""
"Unlike in Standard C, all unrecognized escape sequences are left in the "
"string unchanged, that is, *the backslash is left in the result*::"
msgstr ""

#: ../../reference/lexical_analysis.rst:828
msgid ""
">>> print('\\q')\n"
"\\q\n"
">>> list('\\q')\n"
"['\\\\', 'q']"
msgstr ""

#: ../../reference/lexical_analysis.rst:833
msgid ""
"Note that for bytes literals, the escape sequences only recognized in string "
"literals (``\\N...``, ``\\u...``, ``\\U...``) fall into the category of "
"unrecognized escapes."
msgstr ""

#: ../../reference/lexical_analysis.rst:837
msgid "Unrecognized escape sequences produce a :exc:`DeprecationWarning`."
msgstr ""

#: ../../reference/lexical_analysis.rst:840
msgid ""
"Unrecognized escape sequences produce a :exc:`SyntaxWarning`. In a future "
"Python version they will raise a :exc:`SyntaxError`."
msgstr ""

#: ../../reference/lexical_analysis.rst:853
msgid "Bytes literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:855
msgid ""
":dfn:`Bytes literals` are always prefixed with '``b``' or '``B``'; they "
"produce an instance of the :class:`bytes` type instead of the :class:`str` "
"type. They may only contain ASCII characters; bytes with a numeric value of "
"128 or greater must be expressed with escape sequences (typically :ref:"
"`string-escape-hex` or :ref:`string-escape-oct`):"
msgstr ""

#: ../../reference/lexical_analysis.rst:861
msgid ""
">>> b'\\x89PNG\\r\\n\\x1a\\n'\n"
"b'\\x89PNG\\r\\n\\x1a\\n'\n"
">>> list(b'\\x89PNG\\r\\n\\x1a\\n')\n"
"[137, 80, 78, 71, 13, 10, 26, 10]"
msgstr ""

#: ../../reference/lexical_analysis.rst:868
msgid ""
"Similarly, a zero byte must be expressed using an escape sequence (typically "
"``\\0`` or ``\\x00``)."
msgstr ""

#: ../../reference/lexical_analysis.rst:879
msgid "Raw string literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:881
msgid ""
"Both string and bytes literals may optionally be prefixed with a letter "
"'``r``' or '``R``'; such constructs are called :dfn:`raw string literals` "
"and :dfn:`raw bytes literals` respectively and treat backslashes as literal "
"characters. As a result, in raw string literals, :ref:`escape sequences "
"<escape-sequences>` are not treated specially:"
msgstr ""

#: ../../reference/lexical_analysis.rst:888
msgid ""
">>> r'\\d{4}-\\d{2}-\\d{2}'\n"
"'\\\\d{4}-\\\\d{2}-\\\\d{2}'"
msgstr ""

#: ../../reference/lexical_analysis.rst:893
msgid ""
"Even in a raw literal, quotes can be escaped with a backslash, but the "
"backslash remains in the result; for example, ``r\"\\\"\"`` is a valid "
"string literal consisting of two characters: a backslash and a double quote; "
"``r\"\\\"`` is not a valid string literal (even a raw string cannot end in "
"an odd number of backslashes).  Specifically, *a raw literal cannot end in a "
"single backslash* (since the backslash would escape the following quote "
"character).  Note also that a single backslash followed by a newline is "
"interpreted as those two characters as part of the literal, *not* as a line "
"continuation."
msgstr ""

#: ../../reference/lexical_analysis.rst:921
msgid "f-strings"
msgstr ""

#: ../../reference/lexical_analysis.rst:925
msgid ""
"A :dfn:`formatted string literal` or :dfn:`f-string` is a string literal "
"that is prefixed with '``f``' or '``F``'.  These strings may contain "
"replacement fields, which are expressions delimited by curly braces ``{}``. "
"While other string literals always have a constant value, formatted strings "
"are really expressions evaluated at run time."
msgstr ""

#: ../../reference/lexical_analysis.rst:931
msgid ""
"Escape sequences are decoded like in ordinary string literals (except when a "
"literal is also marked as a raw string).  After decoding, the grammar for "
"the contents of the string is:"
msgstr ""

#: ../../reference/lexical_analysis.rst:945
msgid ""
"The parts of the string outside curly braces are treated literally, except "
"that any doubled curly braces ``'{{'`` or ``'}}'`` are replaced with the "
"corresponding single curly brace.  A single opening curly bracket ``'{'`` "
"marks a replacement field, which starts with a Python expression. To display "
"both the expression text and its value after evaluation, (useful in "
"debugging), an equal sign ``'='`` may be added after the expression. A "
"conversion field, introduced by an exclamation point ``'!'`` may follow.  A "
"format specifier may also be appended, introduced by a colon ``':'``. A "
"replacement field ends with a closing curly bracket ``'}'``."
msgstr ""

#: ../../reference/lexical_analysis.rst:955
msgid ""
"Expressions in formatted string literals are treated like regular Python "
"expressions surrounded by parentheses, with a few exceptions. An empty "
"expression is not allowed, and both :keyword:`lambda`  and assignment "
"expressions ``:=`` must be surrounded by explicit parentheses. Each "
"expression is evaluated in the context where the formatted string literal "
"appears, in order from left to right.  Replacement expressions can contain "
"newlines in both single-quoted and triple-quoted f-strings and they can "
"contain comments.  Everything that comes after a ``#`` inside a replacement "
"field is a comment (even closing braces and quotes). In that case, "
"replacement fields must be closed in a different line."
msgstr ""

#: ../../reference/lexical_analysis.rst:966
msgid ""
">>> f\"abc{a # This is a comment }\"\n"
"... + 3}\"\n"
"'abc5'"
msgstr ""

#: ../../reference/lexical_analysis.rst:972
msgid ""
"Prior to Python 3.7, an :keyword:`await` expression and comprehensions "
"containing an :keyword:`async for` clause were illegal in the expressions in "
"formatted string literals due to a problem with the implementation."
msgstr ""

#: ../../reference/lexical_analysis.rst:977
msgid ""
"Prior to Python 3.12, comments were not allowed inside f-string replacement "
"fields."
msgstr ""

#: ../../reference/lexical_analysis.rst:981
msgid ""
"When the equal sign ``'='`` is provided, the output will have the expression "
"text, the ``'='`` and the evaluated value. Spaces after the opening brace "
"``'{'``, within the expression and after the ``'='`` are all retained in the "
"output. By default, the ``'='`` causes the :func:`repr` of the expression to "
"be provided, unless there is a format specified. When a format is specified "
"it defaults to the :func:`str` of the expression unless a conversion ``'!"
"r'`` is declared."
msgstr ""

#: ../../reference/lexical_analysis.rst:989
msgid "The equal sign ``'='``."
msgstr ""

#: ../../reference/lexical_analysis.rst:992
msgid ""
"If a conversion is specified, the result of evaluating the expression is "
"converted before formatting.  Conversion ``'!s'`` calls :func:`str` on the "
"result, ``'!r'`` calls :func:`repr`, and ``'!a'`` calls :func:`ascii`."
msgstr ""

#: ../../reference/lexical_analysis.rst:996
msgid ""
"The result is then formatted using the :func:`format` protocol.  The format "
"specifier is passed to the :meth:`~object.__format__` method of the "
"expression or conversion result.  An empty string is passed when the format "
"specifier is omitted.  The formatted result is then included in the final "
"value of the whole string."
msgstr ""

#: ../../reference/lexical_analysis.rst:1002
msgid ""
"Top-level format specifiers may include nested replacement fields. These "
"nested fields may include their own conversion fields and :ref:`format "
"specifiers <formatspec>`, but may not include more deeply nested replacement "
"fields. The :ref:`format specifier mini-language <formatspec>` is the same "
"as that used by the :meth:`str.format` method."
msgstr ""

#: ../../reference/lexical_analysis.rst:1008
msgid ""
"Formatted string literals may be concatenated, but replacement fields cannot "
"be split across literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:1011
msgid "Some examples of formatted string literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1013
msgid ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name!r}.\"\n"
"\"He said his name is 'Fred'.\"\n"
">>> f\"He said his name is {repr(name)}.\"  # repr() is equivalent to !r\n"
"\"He said his name is 'Fred'.\"\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'\n"
">>> today = datetime(year=2017, month=1, day=27)\n"
">>> f\"{today:%B %d, %Y}\"  # using date format specifier\n"
"'January 27, 2017'\n"
">>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n"
"'today=January 27, 2017'\n"
">>> number = 1024\n"
">>> f\"{number:#0x}\"  # using integer format specifier\n"
"'0x400'\n"
">>> foo = \"bar\"\n"
">>> f\"{ foo = }\" # preserves whitespace\n"
"\" foo = 'bar'\"\n"
">>> line = \"The mill's closed\"\n"
">>> f\"{line = }\"\n"
"'line = \"The mill\\'s closed\"'\n"
">>> f\"{line = :20}\"\n"
"\"line = The mill's closed   \"\n"
">>> f\"{line = !r:20}\"\n"
"'line = \"The mill\\'s closed\" '"
msgstr ""

#: ../../reference/lexical_analysis.rst:1043
msgid ""
"Reusing the outer f-string quoting type inside a replacement field is "
"permitted::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1046
msgid ""
">>> a = dict(x=2)\n"
">>> f\"abc {a[\"x\"]} def\"\n"
"'abc 2 def'"
msgstr ""

#: ../../reference/lexical_analysis.rst:1050
msgid ""
"Prior to Python 3.12, reuse of the same quoting type of the outer f-string "
"inside a replacement field was not possible."
msgstr ""

#: ../../reference/lexical_analysis.rst:1054
msgid ""
"Backslashes are also allowed in replacement fields and are evaluated the "
"same way as in any other context::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1057
msgid ""
">>> a = [\"a\", \"b\", \"c\"]\n"
">>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\n"
"List a contains:\n"
"a\n"
"b\n"
"c"
msgstr ""

#: ../../reference/lexical_analysis.rst:1064
msgid ""
"Prior to Python 3.12, backslashes were not permitted inside an f-string "
"replacement field."
msgstr ""

#: ../../reference/lexical_analysis.rst:1068
msgid ""
"Formatted string literals cannot be used as docstrings, even if they do not "
"include expressions."
msgstr ""

#: ../../reference/lexical_analysis.rst:1073
msgid ""
">>> def foo():\n"
"...     f\"Not a docstring\"\n"
"...\n"
">>> foo.__doc__ is None\n"
"True"
msgstr ""

#: ../../reference/lexical_analysis.rst:1079
msgid ""
"See also :pep:`498` for the proposal that added formatted string literals, "
"and :meth:`str.format`, which uses a related format string mechanism."
msgstr ""

#: ../../reference/lexical_analysis.rst:1087
msgid "t-strings"
msgstr ""

#: ../../reference/lexical_analysis.rst:1091
msgid ""
"A :dfn:`template string literal` or :dfn:`t-string` is a string literal that "
"is prefixed with '``t``' or '``T``'. These strings follow the same syntax "
"and evaluation rules as :ref:`formatted string literals <f-strings>`, with "
"the following differences:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1096
msgid ""
"Rather than evaluating to a ``str`` object, template string literals "
"evaluate to a :class:`string.templatelib.Template` object."
msgstr ""

#: ../../reference/lexical_analysis.rst:1099
msgid ""
"The :func:`format` protocol is not used. Instead, the format specifier and "
"conversions (if any) are passed to a new :class:`~string.templatelib."
"Interpolation` object that is created for each evaluated expression. It is "
"up to code that processes the resulting :class:`~string.templatelib."
"Template` object to decide how to handle format specifiers and conversions."
msgstr ""

#: ../../reference/lexical_analysis.rst:1106
msgid ""
"Format specifiers containing nested replacement fields are evaluated "
"eagerly, prior to being passed to the :class:`~string.templatelib."
"Interpolation` object. For instance, an interpolation of the form ``{amount:."
"{precision}f}`` will evaluate the inner expression ``{precision}`` to "
"determine the value of the ``format_spec`` attribute. If ``precision`` were "
"to be ``2``, the resulting format specifier would be ``'.2f'``."
msgstr ""

#: ../../reference/lexical_analysis.rst:1114
msgid ""
"When the equals sign ``'='`` is provided in an interpolation expression, the "
"text of the expression is appended to the literal string that precedes the "
"relevant interpolation. This includes the equals sign and any surrounding "
"whitespace. The :class:`!Interpolation` instance for the expression will be "
"created as normal, except that :attr:`~string.templatelib.Interpolation."
"conversion` will be set to '``r``' (:func:`repr`) by default. If an explicit "
"conversion or format specifier are provided, this will override the default "
"behaviour."
msgstr ""

#: ../../reference/lexical_analysis.rst:1128
msgid "Numeric literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:1134
msgid ""
":data:`~token.NUMBER` tokens represent numeric literals, of which there are "
"three types: integers, floating-point numbers, and imaginary numbers."
msgstr ""

#: ../../reference/lexical_analysis.rst:1142
msgid ""
"The numeric value of a numeric literal is the same as if it were passed as a "
"string to the :class:`int`, :class:`float` or :class:`complex` class "
"constructor, respectively. Note that not all valid inputs for those "
"constructors are also valid literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:1147
msgid ""
"Numeric literals do not include a sign; a phrase like ``-1`` is actually an "
"expression composed of the unary operator '``-``' and the literal ``1``."
msgstr ""

#: ../../reference/lexical_analysis.rst:1161
msgid "Integer literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:1163
msgid "Integer literals denote whole numbers. For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1165
msgid ""
"7\n"
"3\n"
"2147483647"
msgstr ""

#: ../../reference/lexical_analysis.rst:1169
msgid ""
"There is no limit for the length of integer literals apart from what can be "
"stored in available memory::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1172
msgid "7922816251426433759354395033679228162514264337593543950336"
msgstr ""

#: ../../reference/lexical_analysis.rst:1174
msgid ""
"Underscores can be used to group digits for enhanced readability, and are "
"ignored for determining the numeric value of the literal. For example, the "
"following literals are equivalent::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1178
msgid ""
"100_000_000_000\n"
"100000000000\n"
"1_00_00_00_00_000"
msgstr ""

#: ../../reference/lexical_analysis.rst:1182
msgid ""
"Underscores can only occur between digits. For example, ``_123``, ``321_``, "
"and ``123__321`` are *not* valid literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:1185
msgid ""
"Integers can be specified in binary (base 2), octal (base 8), or hexadecimal "
"(base 16) using the prefixes ``0b``, ``0o`` and ``0x``, respectively. "
"Hexadecimal digits 10 through 15 are represented by letters ``A``-``F``, "
"case-insensitive.  For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1190
msgid ""
"0b100110111\n"
"0b_1110_0101\n"
"0o177\n"
"0o377\n"
"0xdeadbeef\n"
"0xDead_Beef"
msgstr ""

#: ../../reference/lexical_analysis.rst:1197
msgid ""
"An underscore can follow the base specifier. For example, ``0x_1f`` is a "
"valid literal, but ``0_x1f`` and ``0x__1f`` are not."
msgstr ""

#: ../../reference/lexical_analysis.rst:1201
msgid ""
"Leading zeros in a non-zero decimal number are not allowed. For example, "
"``0123`` is not a valid literal. This is for disambiguation with C-style "
"octal literals, which Python used before version 3.0."
msgstr ""

#: ../../reference/lexical_analysis.rst:1206
msgid ""
"Formally, integer literals are described by the following lexical "
"definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1223
#: ../../reference/lexical_analysis.rst:1287
msgid "Underscores are now allowed for grouping purposes in literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:1234
msgid "Floating-point literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:1236
msgid ""
"Floating-point (float) literals, such as ``3.14`` or ``1.5``, denote :ref:"
"`approximations of real numbers <datamodel-float>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:1239
msgid ""
"They consist of *integer* and *fraction* parts, each composed of decimal "
"digits. The parts are separated by a decimal point, ``.``::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1242
msgid ""
"2.71828\n"
"4.0"
msgstr ""

#: ../../reference/lexical_analysis.rst:1245
msgid ""
"Unlike in integer literals, leading zeros are allowed in the numeric parts. "
"For example, ``077.010`` is legal, and denotes the same number as ``77.10``."
msgstr ""

#: ../../reference/lexical_analysis.rst:1248
msgid ""
"As in integer literals, single underscores may occur between digits to help "
"readability::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1251
msgid ""
"96_485.332_123\n"
"3.14_15_93"
msgstr ""

#: ../../reference/lexical_analysis.rst:1254
msgid "Either of these parts, but not both, can be empty. For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1256
msgid ""
"10.  # (equivalent to 10.0)\n"
".001  # (equivalent to 0.001)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1259
msgid ""
"Optionally, the integer and fraction may be followed by an *exponent*: the "
"letter ``e`` or ``E``, followed by an optional sign, ``+`` or ``-``, and a "
"number in the same format as the integer and fraction parts. The ``e`` or "
"``E`` represents \"times ten raised to the power of\"::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1264
msgid ""
"1.0e3  # (represents 1.0×10³, or 1000.0)\n"
"1.166e-5  # (represents 1.166×10⁻⁵, or 0.00001166)\n"
"6.02214076e+23  # (represents 6.02214076×10²³, or 602214076000000000000000.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1268
msgid ""
"In floats with only integer and exponent parts, the decimal point may be "
"omitted::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1271
msgid ""
"1e3  # (equivalent to 1.e3 and 1.0e3)\n"
"0e0  # (equivalent to 0.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1274
msgid ""
"Formally, floating-point literals are described by the following lexical "
"definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1296
msgid "Imaginary literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:1298
msgid ""
"Python has :ref:`complex number <typesnumeric>` objects, but no complex "
"literals. Instead, *imaginary literals* denote complex numbers with a zero "
"real part."
msgstr ""

#: ../../reference/lexical_analysis.rst:1303
msgid ""
"For example, in math, the complex number 3+4.2\\ *i* is written as the real "
"number 3 added to the imaginary number 4.2\\ *i*. Python uses a similar "
"syntax, except the imaginary unit is written as ``j`` rather than *i*::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1308
msgid "3+4.2j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1310
msgid ""
"This is an expression composed of the :ref:`integer literal <integers>` "
"``3``, the :ref:`operator <operators>` '``+``', and the :ref:`imaginary "
"literal <imaginary>` ``4.2j``. Since these are three separate tokens, "
"whitespace is allowed between them::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1316
msgid "3 + 4.2j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1318
msgid ""
"No whitespace is allowed *within* each token. In particular, the ``j`` "
"suffix, may not be separated from the number before it."
msgstr ""

#: ../../reference/lexical_analysis.rst:1322
msgid ""
"The number before the ``j`` has the same syntax as a floating-point literal. "
"Thus, the following are valid imaginary literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1325
msgid ""
"4.2j\n"
"3.14j\n"
"10.j\n"
".001j\n"
"1e100j\n"
"3.14e-10j\n"
"3.14_15_93j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1333
msgid ""
"Unlike in a floating-point literal the decimal point can be omitted if the "
"imaginary number only has an integer part. The number is still evaluated as "
"a floating-point number, not an integer::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1337
msgid ""
"10j\n"
"0j\n"
"1000000000000000000000000j   # equivalent to 1e+24j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1341
msgid ""
"The ``j`` suffix is case-insensitive. That means you can use ``J`` instead::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1344
msgid "3.14J   # equivalent to 3.14j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1346
msgid ""
"Formally, imaginary literals are described by the following lexical "
"definition:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1357
msgid "Operators"
msgstr ""

#: ../../reference/lexical_analysis.rst:1361
msgid "The following tokens are operators:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1363
msgid ""
"+       -       *       **      /       //      %      @\n"
"<<      >>      &       |       ^       ~       :=\n"
"<       >       <=      >=      ==      !="
msgstr ""

#: ../../reference/lexical_analysis.rst:1374
msgid "Delimiters"
msgstr ""

#: ../../reference/lexical_analysis.rst:1378
msgid "The following tokens serve as delimiters in the grammar:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1380
msgid ""
"(       )       [       ]       {       }\n"
",       :       !       .       ;       @       ="
msgstr ""

#: ../../reference/lexical_analysis.rst:1385
msgid "The period can also occur in floating-point and imaginary literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:1389
msgid ""
"A sequence of three periods has a special meaning as an :py:data:`Ellipsis` "
"literal:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1392
msgid "..."
msgstr ""

#: ../../reference/lexical_analysis.rst:1396
msgid ""
"The following *augmented assignment operators* serve lexically as "
"delimiters, but also perform an operation:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1399
msgid ""
"->      +=      -=      *=      /=      //=     %=\n"
"@=      &=      |=      ^=      >>=     <<=     **="
msgstr ""

#: ../../reference/lexical_analysis.rst:1404
msgid ""
"The following printing ASCII characters have special meaning as part of "
"other tokens or are otherwise significant to the lexical analyzer:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1407
msgid "'       \"       #       \\"
msgstr ""

#: ../../reference/lexical_analysis.rst:1411
msgid ""
"The following printing ASCII characters are not used in Python.  Their "
"occurrence outside string literals and comments is an unconditional error:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1414
msgid "$       ?       `"
msgstr ""

#: ../../reference/lexical_analysis.rst:8
msgid "lexical analysis"
msgstr ""

#: ../../reference/lexical_analysis.rst:8
msgid "parser"
msgstr ""

#: ../../reference/lexical_analysis.rst:8
msgid "token"
msgstr ""

#: ../../reference/lexical_analysis.rst:26
msgid "line structure"
msgstr ""

#: ../../reference/lexical_analysis.rst:36
msgid "logical line"
msgstr ""

#: ../../reference/lexical_analysis.rst:36
#: ../../reference/lexical_analysis.rst:139
#: ../../reference/lexical_analysis.rst:644
msgid "physical line"
msgstr ""

#: ../../reference/lexical_analysis.rst:36
#: ../../reference/lexical_analysis.rst:139
msgid "line joining"
msgstr ""

#: ../../reference/lexical_analysis.rst:36
msgid "NEWLINE token"
msgstr ""

#: ../../reference/lexical_analysis.rst:82
msgid "comment"
msgstr ""

#: ../../reference/lexical_analysis.rst:82
msgid "hash character"
msgstr ""

#: ../../reference/lexical_analysis.rst:82
#: ../../reference/lexical_analysis.rst:96
msgid "# (hash)"
msgstr ""

#: ../../reference/lexical_analysis.rst:96
msgid "source character set"
msgstr ""

#: ../../reference/lexical_analysis.rst:96
msgid "encoding declarations (source file)"
msgstr ""

#: ../../reference/lexical_analysis.rst:96
msgid "source encoding declaration"
msgstr ""

#: ../../reference/lexical_analysis.rst:139
msgid "line continuation"
msgstr ""

#: ../../reference/lexical_analysis.rst:139
msgid "backslash character"
msgstr ""

#: ../../reference/lexical_analysis.rst:184
msgid "blank line"
msgstr ""

#: ../../reference/lexical_analysis.rst:200
msgid "indentation"
msgstr ""

#: ../../reference/lexical_analysis.rst:200
msgid "leading whitespace"
msgstr ""

#: ../../reference/lexical_analysis.rst:200
msgid "space"
msgstr ""

#: ../../reference/lexical_analysis.rst:200
msgid "tab"
msgstr ""

#: ../../reference/lexical_analysis.rst:200
msgid "grouping"
msgstr ""

#: ../../reference/lexical_analysis.rst:200
msgid "statement grouping"
msgstr ""

#: ../../reference/lexical_analysis.rst:228
msgid "INDENT token"
msgstr ""

#: ../../reference/lexical_analysis.rst:228
msgid "DEDENT token"
msgstr ""

#: ../../reference/lexical_analysis.rst:318
msgid "identifier"
msgstr ""

#: ../../reference/lexical_analysis.rst:318
msgid "name"
msgstr "nombre"

#: ../../reference/lexical_analysis.rst:397
#: ../../reference/lexical_analysis.rst:421
msgid "keyword"
msgstr ""

#: ../../reference/lexical_analysis.rst:397
msgid "reserved word"
msgstr ""

#: ../../reference/lexical_analysis.rst:421
msgid "soft keyword"
msgstr ""

#: ../../reference/lexical_analysis.rst:441
msgid "_, identifiers"
msgstr ""

#: ../../reference/lexical_analysis.rst:441
msgid "__, identifiers"
msgstr ""

#: ../../reference/lexical_analysis.rst:497
msgid "literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:497
msgid "constant"
msgstr ""

#: ../../reference/lexical_analysis.rst:509
#: ../../reference/lexical_analysis.rst:552
#: ../../reference/lexical_analysis.rst:577
msgid "string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:509
#: ../../reference/lexical_analysis.rst:845
msgid "bytes literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:509
msgid "ASCII"
msgstr ""

#: ../../reference/lexical_analysis.rst:509
msgid "' (single quote)"
msgstr ""

#: ../../reference/lexical_analysis.rst:509
msgid "\" (double quote)"
msgstr ""

#: ../../reference/lexical_analysis.rst:552
msgid "triple-quoted string"
msgstr "cadena entre comillas triples"

#: ../../reference/lexical_analysis.rst:552
msgid "\"\"\""
msgstr ""

#: ../../reference/lexical_analysis.rst:552
msgid "'''"
msgstr ""

#: ../../reference/lexical_analysis.rst:577
msgid "u'"
msgstr ""

#: ../../reference/lexical_analysis.rst:577
msgid "u\""
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "escape sequence"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "Standard C"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "C"
msgstr "C"

#: ../../reference/lexical_analysis.rst:644
msgid "\\ (backslash)"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\\\"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\a"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\b"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\f"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\n"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\r"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\t"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\v"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\x"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\u"
msgstr ""

#: ../../reference/lexical_analysis.rst:644
msgid "\\U"
msgstr ""

#: ../../reference/lexical_analysis.rst:820
msgid "unrecognized escape sequence"
msgstr ""

#: ../../reference/lexical_analysis.rst:845
msgid "b'"
msgstr ""

#: ../../reference/lexical_analysis.rst:845
msgid "b\""
msgstr ""

#: ../../reference/lexical_analysis.rst:872
msgid "r'"
msgstr ""

#: ../../reference/lexical_analysis.rst:872
msgid "raw string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:872
msgid "r\""
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "formatted string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "interpolated string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "string"
msgstr "cadena"

#: ../../reference/lexical_analysis.rst:903
msgid "formatted literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "interpolated literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "f-string"
msgstr "cadena-f"

#: ../../reference/lexical_analysis.rst:903
msgid "fstring"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "f'"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "f\""
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "{} (curly brackets)"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "in formatted string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "! (exclamation)"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid ": (colon)"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "= (equals)"
msgstr ""

#: ../../reference/lexical_analysis.rst:903
msgid "for help in debugging using string literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:1130
msgid "number"
msgstr ""

#: ../../reference/lexical_analysis.rst:1130
msgid "numeric literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:1130
#: ../../reference/lexical_analysis.rst:1152
msgid "integer literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:1130
msgid "floating-point literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:1130
msgid "hexadecimal literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:1130
msgid "octal literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:1130
msgid "binary literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:1130
msgid "decimal literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:1130
msgid "imaginary literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:1130
msgid "complex literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:1152
msgid "0b"
msgstr ""

#: ../../reference/lexical_analysis.rst:1152
msgid "0o"
msgstr ""

#: ../../reference/lexical_analysis.rst:1152
msgid "0x"
msgstr ""

#: ../../reference/lexical_analysis.rst:1152
#: ../../reference/lexical_analysis.rst:1227
msgid "_ (underscore)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1152
#: ../../reference/lexical_analysis.rst:1227
#: ../../reference/lexical_analysis.rst:1291
msgid "in numeric literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:1227
msgid ". (dot)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1227
msgid "e"
msgstr ""

#: ../../reference/lexical_analysis.rst:1291
msgid "j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1359
msgid "operators"
msgstr ""

#: ../../reference/lexical_analysis.rst:1376
msgid "delimiters"
msgstr ""
