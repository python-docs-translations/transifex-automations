# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Persian (https://app.transifex.com/python-doc/teams/5390/"
"fa/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fa\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/floatingpoint.rst:10
msgid "Floating-Point Arithmetic:  Issues and Limitations"
msgstr "ممیز شناور: مشکلات و محدودیت ها"

#: ../../tutorial/floatingpoint.rst:16
msgid ""
"Floating-point numbers are represented in computer hardware as base 2 "
"(binary) fractions.  For example, the **decimal** fraction ``0.625`` has "
"value 6/10 + 2/100 + 5/1000, and in the same way the **binary** fraction "
"``0.101`` has value 1/2 + 0/4 + 1/8. These two fractions have identical "
"values, the only real difference being that the first is written in base 10 "
"fractional notation, and the second in base 2."
msgstr ""
"اعداد اعشاری در سخت افزار کامپیوتر به صورت کسرهای پایه ۲ (دودویی) نمایش داده "
"می شوند. به عنوان مثال، کسر **decimal** مقدار ۶/۱۰ + ۲/۱۰۰ + ۵/۱۰۰۰ دارد و "
"به همان ترتیب کسر **binary** مقدار ۱/۲ + ۰/۴ + ۱/۸ دارد. این دو کسر مقادیر "
"یکسانی دارند، تنها تفاوت واقعی این است که اولی به صورت نشانه گذاری کسر پایه "
"۱۰ نوشته شده و دومی در پایه ۲."

#: ../../tutorial/floatingpoint.rst:23
msgid ""
"Unfortunately, most decimal fractions cannot be represented exactly as "
"binary fractions.  A consequence is that, in general, the decimal floating-"
"point numbers you enter are only approximated by the binary floating-point "
"numbers actually stored in the machine."
msgstr ""
"متأسفانه، بیشتر کسرهای اعشاری نمی توانند به طور دقیق به صورت کسرهای دودویی "
"نمایش داده شوند. نتیجه این است که، به طور کلی، اعداد اعشاری شناوری که وارد "
"می کنید تنها تقریباً توسط اعداد اعشاری شناور دودویی که در واقع در ماشین ذخیره "
"می شوند، نمایش داده می شوند."

#: ../../tutorial/floatingpoint.rst:28
msgid ""
"The problem is easier to understand at first in base 10.  Consider the "
"fraction 1/3.  You can approximate that as a base 10 fraction::"
msgstr ""
"ابتدا مسئله در مبنای ۱۰ آسان تر قابل درک است. به کسر 1/3 توجه کنید. شما می "
"توانید آن را به صورت یک کسر در مبنای ۱۰ تقریب بزنید::"

#: ../../tutorial/floatingpoint.rst:31
msgid "0.3"
msgstr "۰.۳"

#: ../../tutorial/floatingpoint.rst:33 ../../tutorial/floatingpoint.rst:37
msgid "or, better, ::"
msgstr "یا، بهتر است:"

#: ../../tutorial/floatingpoint.rst:35
msgid "0.33"
msgstr "۰.۳۳"

#: ../../tutorial/floatingpoint.rst:39
msgid "0.333"
msgstr "۰.۳۳۳"

#: ../../tutorial/floatingpoint.rst:41
msgid ""
"and so on.  No matter how many digits you're willing to write down, the "
"result will never be exactly 1/3, but will be an increasingly better "
"approximation of 1/3."
msgstr ""
"و به همین ترتیب. مهم نیست چقدر رقم ها را بخواهید بنویسید، نتیجه هرگز دقیقا "
"1/3 نخواهد بود، بلکه به طور فزاینده ای تقریب بهتری از 1/3 خواهد بود."

#: ../../tutorial/floatingpoint.rst:45
msgid ""
"In the same way, no matter how many base 2 digits you're willing to use, the "
"decimal value 0.1 cannot be represented exactly as a base 2 fraction.  In "
"base 2, 1/10 is the infinitely repeating fraction ::"
msgstr ""
"به همان صورت، مهم نیست که چقدر رقم در مبنای ۲ می خواهید استفاده کنید، مقدار "
"اعشاری 0.1 نمی تواند به طور دقیق به صورت یک کسر در مبنای ۲ نمایش داده شود. "
"در مبنای ۲، 1/10 یک کسر بی نهایت تکرارشونده است::"

#: ../../tutorial/floatingpoint.rst:49
msgid "0.0001100110011001100110011001100110011001100110011..."
msgstr "0.0001100110011001100110011001100110011001100110011..."

#: ../../tutorial/floatingpoint.rst:51
msgid ""
"Stop at any finite number of bits, and you get an approximation.  On most "
"machines today, floats are approximated using a binary fraction with the "
"numerator using the first 53 bits starting with the most significant bit and "
"with the denominator as a power of two.  In the case of 1/10, the binary "
"fraction is ``3602879701896397 / 2 ** 55`` which is close to but not exactly "
"equal to the true value of 1/10."
msgstr ""
"در هر تعداد محدودی از بیت ها متوقف شوید و یک تخمین به دست می آورید. در اکثر "
"ماشین های امروزی، اعشاری ها با استفاده از یک کسر دودویی تقریب زده می شوند که "
"شمارنده ی آن از ۵۳ بیت اول شروع شده از بیت با ارزش بالاتر استفاده می کند و "
"مخرج آن به صورت توان های دو است. در مورد 1/10، کسر دودویی "
"``3602879701896397 / 2 ** 55`` است که نزدیک به اما دقیقا برابر با مقدار "
"واقعی 1/10 نمی باشد."

#: ../../tutorial/floatingpoint.rst:58
msgid ""
"Many users are not aware of the approximation because of the way values are "
"displayed.  Python only prints a decimal approximation to the true decimal "
"value of the binary approximation stored by the machine.  On most machines, "
"if Python were to print the true decimal value of the binary approximation "
"stored for 0.1, it would have to display::"
msgstr ""
"بسیاری از کاربران به خاطر طریقه نمایش مقادیر از تقریب ها آگاه نیستند. پایتون "
"تنها یک تقریب اعشاری از مقدار واقعی اعشاری تقریب دودویی ذخیره شده توسط ماشین "
"را چاپ می کند. در بیشتر ماشین ها، اگر پایتون بخواهد مقدار واقعی اعشاری تقریب "
"دودویی ذخیره شده برای 0.1 را چاپ کند، باید به صورت زیر نمایش دهد::"

#: ../../tutorial/floatingpoint.rst:64
msgid ""
">>> 0.1\n"
"0.1000000000000000055511151231257827021181583404541015625"
msgstr ""
">>> 0.1\n"
"0.1000000000000000055511151231257827021181583404541015625"

#: ../../tutorial/floatingpoint.rst:67
msgid ""
"That is more digits than most people find useful, so Python keeps the number "
"of digits manageable by displaying a rounded value instead:"
msgstr ""
"این تعداد رقم بیشتری است نسبت به چیزی که اکثر افراد مفید می دانند، بنابراین "
"پایتون تعداد ارقام را با نمایش یک مقدار گرد شده کنترل می کند:"

#: ../../tutorial/floatingpoint.rst:70
msgid ""
">>> 1 / 10\n"
"0.1"
msgstr ""
">>> 1 / 10\n"
"0.1"

#: ../../tutorial/floatingpoint.rst:75
msgid ""
"Just remember, even though the printed result looks like the exact value of "
"1/10, the actual stored value is the nearest representable binary fraction."
msgstr ""
"فقط به خاطر داشته باشید که اگرچه نتیجه چاپ شده شبیه به مقدار دقیق 1/10 به "
"نظر می رسد، اما مقدار ذخیره شده واقعی نزدیک ترین کسر دودویی قابل نمایش است."

#: ../../tutorial/floatingpoint.rst:78
msgid ""
"Interestingly, there are many different decimal numbers that share the same "
"nearest approximate binary fraction.  For example, the numbers ``0.1`` and "
"``0.10000000000000001`` and "
"``0.1000000000000000055511151231257827021181583404541015625`` are all "
"approximated by ``3602879701896397 / 2 ** 55``.  Since all of these decimal "
"values share the same approximation, any one of them could be displayed "
"while still preserving the invariant ``eval(repr(x)) == x``."
msgstr ""
"جالب است که بسیاری از اعداد اعشاری مختلف وجود دارند که نزدیک ترین تقریب "
"دودویی مشترکی دارند. به عنوان مثال، اعداد ``0.1`` و ``0.10000000000000001`` "
"و ``0.1000000000000000055511151231257827021181583404541015625`` همگی توسط "
"``3602879701896397 / 2 ** 55`` تقریب زده می شوند. از آنجا که تمام این مقادیر "
"اعشاری تقریب یکسانی دارند، هر یک از آنها می توانند نمایش داده شوند در حالی "
"که همچنان ثابت ``eval(repr(x)) == x`` حفظ می شود."

#: ../../tutorial/floatingpoint.rst:86
msgid ""
"Historically, the Python prompt and built-in :func:`repr` function would "
"choose the one with 17 significant digits, ``0.10000000000000001``.   "
"Starting with Python 3.1, Python (on most systems) is now able to choose the "
"shortest of these and simply display ``0.1``."
msgstr ""
"به طور تاریخی، اعلان پایتون و تابع داخلی :func:`repr` تصمیم گیری می کردند که "
"یکی با 17 رقم معنادار، یعنی ``0.10000000000000001``، را انتخاب کنند. از "
"پایتون 3.1 به بعد، پایتون (در اکثر سیستم ها) قادر است کوتاه ترین آن ها را "
"انتخاب کرده و به سادگی ``0.1`` را نمایش دهد."

#: ../../tutorial/floatingpoint.rst:91
msgid ""
"Note that this is in the very nature of binary floating point: this is not a "
"bug in Python, and it is not a bug in your code either.  You'll see the same "
"kind of thing in all languages that support your hardware's floating-point "
"arithmetic (although some languages may not *display* the difference by "
"default, or in all output modes)."
msgstr ""
"توجه داشته باشید که این از ویژگی های ذاتی اعداد اعشاری در مبنای دودویی است: "
"این یک باگ در پایتون نیست و همچنین یک باگ در کد شما هم نمی باشد. شما همین "
"نوع مسئله را در تمامی زبان هایی که از محاسبات اعشاری سخت افزارتان پشتیبانی "
"می کنند مشاهده خواهید کرد (اگرچه ممکن است برخی زبان ها به طور پیش فرض یا در "
"تمامی حالت های خروجی تفاوت را *display* نکنند)."

#: ../../tutorial/floatingpoint.rst:97
msgid ""
"For more pleasant output, you may wish to use string formatting to produce a "
"limited number of significant digits:"
msgstr ""
"برای خروجی بهتر، ممکن است بخواهید از فرمت دهی رشته ای استفاده کنید تا تعداد "
"محدودی از ارقام مهم تولید کنید:"

#: ../../tutorial/floatingpoint.rst:100
msgid ""
">>> format(math.pi, '.12g')  # give 12 significant digits\n"
"'3.14159265359'\n"
"\n"
">>> format(math.pi, '.2f')   # give 2 digits after the point\n"
"'3.14'\n"
"\n"
">>> repr(math.pi)\n"
"'3.141592653589793'"
msgstr ""
">>> format(math.pi, '.12g')  # give 12 significant digits\n"
"'3.14159265359'\n"
"\n"
">>> format(math.pi, '.2f')   # give 2 digits after the point\n"
"'3.14'\n"
"\n"
">>> repr(math.pi)\n"
"'3.141592653589793'"

#: ../../tutorial/floatingpoint.rst:111
msgid ""
"It's important to realize that this is, in a real sense, an illusion: you're "
"simply rounding the *display* of the true machine value."
msgstr ""
"این موضوع مهم است که متوجه شوید که این، به معنای واقعی، یک توهم است: شما "
"صرفاً مقدار `*display*` از مقدار واقعی ماشین را گرد می کنید."

#: ../../tutorial/floatingpoint.rst:114
msgid ""
"One illusion may beget another.  For example, since 0.1 is not exactly 1/10, "
"summing three values of 0.1 may not yield exactly 0.3, either:"
msgstr ""
"یک توهم ممکن است توهم دیگری را ایجاد کند. به عنوان مثال، از آنجا که 0.1 "
"دقیقاً برابر با 1/10 نیست، جمع سه مقدار 0.1 نیز ممکن است دقیقاً برابر 0.3 "
"نباشد:"

#: ../../tutorial/floatingpoint.rst:117
msgid ""
">>> 0.1 + 0.1 + 0.1 == 0.3\n"
"False"
msgstr ""
">>> 0.1 + 0.1 + 0.1 == 0.3\n"
"False"

#: ../../tutorial/floatingpoint.rst:122
msgid ""
"Also, since the 0.1 cannot get any closer to the exact value of 1/10 and 0.3 "
"cannot get any closer to the exact value of 3/10, then pre-rounding with :"
"func:`round` function cannot help:"
msgstr ""
"همچنین، از آنجا که 0.1 نمی تواند به مقدار دقیق 1/10 و 0.3 نمی تواند به مقدار "
"دقیق 3/10 نزدیک تر شود، بنابراین پیش گرد کردن با تابع :func:`round` کمکی نمی "
"کند:"

#: ../../tutorial/floatingpoint.rst:126
msgid ""
">>> round(0.1, 1) + round(0.1, 1) + round(0.1, 1) == round(0.3, 1)\n"
"False"
msgstr ""
">>> round(0.1, 1) + round(0.1, 1) + round(0.1, 1) == round(0.3, 1)\n"
"False"

#: ../../tutorial/floatingpoint.rst:131
msgid ""
"Though the numbers cannot be made closer to their intended exact values, "
"the :func:`math.isclose` function can be useful for comparing inexact values:"
msgstr ""
"گرچه نمی توان اعداد را به مقادیر دقیق دلخواه شان نزدیک تر کرد، تابع :func:"
"`math.isclose` می تواند برای مقایسه مقادیر نادقیق مفید باشد:\n"

#: ../../tutorial/floatingpoint.rst:134
msgid ""
">>> math.isclose(0.1 + 0.1 + 0.1, 0.3)\n"
"True"
msgstr ""
">>> math.isclose(0.1 + 0.1 + 0.1, 0.3)\n"
"True"

#: ../../tutorial/floatingpoint.rst:139
msgid ""
"Alternatively, the :func:`round` function can be used to compare rough "
"approximations:"
msgstr ""
"به طور متناوب، می توان از تابع :func:`round` برای مقایسه تقریب های تقریبی "
"استفاده کرد:"

#: ../../tutorial/floatingpoint.rst:142
msgid ""
">>> round(math.pi, ndigits=2) == round(22 / 7, ndigits=2)\n"
"True"
msgstr ""
">>> round(math.pi, ndigits=2) == round(22 / 7, ndigits=2)\n"
"True"

#: ../../tutorial/floatingpoint.rst:147
msgid ""
"Binary floating-point arithmetic holds many surprises like this.  The "
"problem with \"0.1\" is explained in precise detail below, in the "
"\"Representation Error\" section.  See `Examples of Floating Point Problems "
"<https://jvns.ca/blog/2023/01/13/examples-of-floating-point-problems/>`_ for "
"a pleasant summary of how binary floating point works and the kinds of "
"problems commonly encountered in practice.  Also see `The Perils of Floating "
"Point <http://www.indowsway.com/floatingpoint.htm>`_ for a more complete "
"account of other common surprises."
msgstr ""
"حساب شناور دودویی بسیاری از شگفتی ها مانند این دارد. مشکل \"0.1\" به طور "
"دقیق در بخش \"خطای نمایش\" زیر توضیح داده شده است. برای خلاصه ای خوش آیند از "
"نحوه کار اعداد شناور دودویی و انواع مشکلاتی که اغلب در عمل با آنها مواجه می "
"شویم، به `Examples of Floating Point Problems <https://jvns.ca/"
"blog/2023/01/13/examples-of-floating-point-problems/>`_ مراجعه کنید. همچنین "
"برای توضیح کاملتری از دیگر شگفتی های رایج به `The Perils of Floating Point "
"<http://www.indowsway.com/floatingpoint.htm>`_ مراجعه کنید."

#: ../../tutorial/floatingpoint.rst:156
msgid ""
"As that says near the end, \"there are no easy answers.\"  Still, don't be "
"unduly wary of floating point!  The errors in Python float operations are "
"inherited from the floating-point hardware, and on most machines are on the "
"order of no more than 1 part in 2\\*\\*53 per operation.  That's more than "
"adequate for most tasks, but you do need to keep in mind that it's not "
"decimal arithmetic and that every float operation can suffer a new rounding "
"error."
msgstr ""
"همانطور که در پایان گفته شده، \"پاسخ های آسانی وجود ندارد.\" اما از اعداد "
"اعشاری بی جهت نگران نباشید! خطاهای عملیات های اعشاری در پایتون از سخت افزار "
"اعشاری به ارث می رسند و در بیشتر ماشین ها در حدود کمتر از 1 قسمت در "
"2\\*\\*53 به ازای هر عملیات هستند. این دقت برای اکثر کارها بیش از حد کافی "
"است، اما باید به خاطر داشته باشید که این عملیات ها حساب اعشاری نیستند و هر "
"عملیات اعشاری می تواند دچار خطای گرد کردن جدیدی شود."

#: ../../tutorial/floatingpoint.rst:163
msgid ""
"While pathological cases do exist, for most casual use of floating-point "
"arithmetic you'll see the result you expect in the end if you simply round "
"the display of your final results to the number of decimal digits you "
"expect. :func:`str` usually suffices, and for finer control see the :meth:"
"`str.format` method's format specifiers in :ref:`formatstrings`."
msgstr ""
"در حالی که موارد غیرعادی وجود دارند، در بیشتر استفاده های معمولی از حساب "
"اعشاری، در نهایت نتیجه ای را که انتظار دارید مشاهده خواهید کرد، اگر به سادگی "
"نمایش نتایج نهایی خود را به تعداد ارقام اعشاری مورد انتظارتان گرد کنید. :"
"func:`str` معمولاً کافی است و برای کنترل دقیق تر، به مشخصات قالب روش :meth:"
"`str.format` در :ref:`formatstrings` مراجعه کنید."

#: ../../tutorial/floatingpoint.rst:169
msgid ""
"For use cases which require exact decimal representation, try using the :mod:"
"`decimal` module which implements decimal arithmetic suitable for accounting "
"applications and high-precision applications."
msgstr ""
"برای موارد استفاده ای که نیاز به نمایش دقیق اعشاری دارند، سعی کنید از ماژول :"
"mod:`decimal` استفاده کنید که محاسبات اعشاری مناسب برای برنامه های حسابداری "
"و برنامه های با دقت بالا را پیاده سازی می کند."

#: ../../tutorial/floatingpoint.rst:173
msgid ""
"Another form of exact arithmetic is supported by the :mod:`fractions` module "
"which implements arithmetic based on rational numbers (so the numbers like "
"1/3 can be represented exactly)."
msgstr ""
"شکل دیگری از محاسبات دقیق توسط ماژول :mod:`fractions` پشتیبانی می شود که "
"محاسبات مبتنی بر اعداد گویا را پیاده سازی می کند (بنابراین اعدادی مانند 1/3 "
"می توانند به طور دقیق نمایش داده شوند)."

#: ../../tutorial/floatingpoint.rst:177
msgid ""
"If you are a heavy user of floating-point operations you should take a look "
"at the NumPy package and many other packages for mathematical and "
"statistical operations supplied by the SciPy project. See <https://scipy."
"org>."
msgstr ""
"اگر شما کاربر حرفه ای از عملیات ممیز شناور هستید، باید نگاهی به پکیج NumPy و "
"بسیاری از پکیج های دیگر برای عملیات ریاضی و آماری ارائه شده توسط پروژه SciPy "
"بیندازید. به <https://scipy.org> مراجعه کنید."

#: ../../tutorial/floatingpoint.rst:181
msgid ""
"Python provides tools that may help on those rare occasions when you really "
"*do* want to know the exact value of a float.  The :meth:`float."
"as_integer_ratio` method expresses the value of a float as a fraction:"
msgstr ""
"پایتون ابزارهایی فراهم می کند که ممکن است در آن موارد نادری که واقعاً می "
"خواهید از مقدار دقیق یک عدد اعشاری (float) مطلع شوید، کمک کنند. متد :meth:"
"`float.as_integer_ratio` مقدار یک عدد اعشاری را به صورت یک کسر بیان می کند:"

#: ../../tutorial/floatingpoint.rst:186
msgid ""
">>> x = 3.14159\n"
">>> x.as_integer_ratio()\n"
"(3537115888337719, 1125899906842624)"
msgstr ""
">>> x = 3.14159\n"
">>> x.as_integer_ratio()\n"
"(3537115888337719, 1125899906842624)"

#: ../../tutorial/floatingpoint.rst:192
msgid ""
"Since the ratio is exact, it can be used to losslessly recreate the original "
"value:"
msgstr ""
"از آنجا که نسبت دقیق است، می توان از آن برای بازسازی بدون افت ارزش اصلی "
"استفاده کرد:"

#: ../../tutorial/floatingpoint.rst:195
msgid ""
">>> x == 3537115888337719 / 1125899906842624\n"
"True"
msgstr ""
">>> x == 3537115888337719 / 1125899906842624\n"
"True"

#: ../../tutorial/floatingpoint.rst:200
msgid ""
"The :meth:`float.hex` method expresses a float in hexadecimal (base 16), "
"again giving the exact value stored by your computer:"
msgstr ""
"روش :meth:`float.hex` یک عدد اعشاری را به شکل هگزادسیمال (مبنای 16) ارائه می "
"دهد و دقیقاً مقداری را که در رایانه شما ذخیره شده است نشان می دهد:"

#: ../../tutorial/floatingpoint.rst:203
msgid ""
">>> x.hex()\n"
"'0x1.921f9f01b866ep+1'"
msgstr ""
">>> x.hex()\n"
"'0x1.921f9f01b866ep+1'"

#: ../../tutorial/floatingpoint.rst:208
msgid ""
"This precise hexadecimal representation can be used to reconstruct the float "
"value exactly:"
msgstr ""
"این نمایش دقیق هگزادسیمال می تواند برای بازسازی مقدار float به طور دقیق "
"استفاده شود:"

#: ../../tutorial/floatingpoint.rst:211
msgid ""
">>> x == float.fromhex('0x1.921f9f01b866ep+1')\n"
"True"
msgstr ""
">>> x == float.fromhex('0x1.921f9f01b866ep+1')\n"
"True"

#: ../../tutorial/floatingpoint.rst:216
msgid ""
"Since the representation is exact, it is useful for reliably porting values "
"across different versions of Python (platform independence) and exchanging "
"data with other languages that support the same format (such as Java and "
"C99)."
msgstr ""
"از آنجا که نمایش دقیق است، برای انتقال مطمئن مقادیر بین نسخه های مختلف "
"پایتون (استقلال پلتفرم) و تبادل داده با زبان های دیگر که از همان فرمت "
"پشتیبانی می کنند (مانند جاوا و C99) مفید است."

#: ../../tutorial/floatingpoint.rst:220
msgid ""
"Another helpful tool is the :func:`sum` function which helps mitigate loss-"
"of-precision during summation.  It uses extended precision for intermediate "
"rounding steps as values are added onto a running total. That can make a "
"difference in overall accuracy so that the errors do not accumulate to the "
"point where they affect the final total:"
msgstr ""
"ابزار مفید دیگر تابع :func:`sum` است که به کاهش از دست دادن دقت در هنگام جمع "
"زنی کمک می کند. این تابع از دقت بالا برای مراحل گرد کردن میانی زمانی که "
"مقادیر به مجموع در حال اجرا اضافه می شوند، استفاده می کند. این می تواند "
"تفاوتی در دقت کلی ایجاد کند تا خطاها به حدی تجمع نکنند که بر مجموع نهایی "
"تأثیر بگذارند:"

#: ../../tutorial/floatingpoint.rst:226
msgid ""
">>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0\n"
"False\n"
">>> sum([0.1] * 10) == 1.0\n"
"True"
msgstr ""
">>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0\n"
"False\n"
">>> sum([0.1] * 10) == 1.0\n"
"True"

#: ../../tutorial/floatingpoint.rst:233
msgid ""
"The :func:`math.fsum` goes further and tracks all of the \"lost digits\" as "
"values are added onto a running total so that the result has only a single "
"rounding.  This is slower than :func:`sum` but will be more accurate in "
"uncommon cases where large magnitude inputs mostly cancel each other out "
"leaving a final sum near zero:"
msgstr ""
":func:`math.fsum` جلوتر رفته و تمامی \"ارقام گم شده\" را وقتی که مقادیر به "
"مجموع در حال اجرا اضافه می شوند پیگیری می کند تا نتیجه فقط یک گرد کردن داشته "
"باشد. این کندتر از :func:`sum` است اما در موارد نادری که ورودی های بزرگ "
"مقدار عمدتاً یکدیگر را خنثی می کنند و یک جمع نهایی نزدیک به صفر باقی می "
"گذارند، دقیق تر خواهد بود:"

#: ../../tutorial/floatingpoint.rst:239
msgid ""
">>> arr = [-0.10430216751806065, -266310978.67179024, 143401161448607.16,\n"
"...        -143401161400469.7, 266262841.31058735, -0.003244936839808227]\n"
">>> float(sum(map(Fraction, arr)))   # Exact summation with single rounding\n"
"8.042173697819788e-13\n"
">>> math.fsum(arr)                   # Single rounding\n"
"8.042173697819788e-13\n"
">>> sum(arr)                         # Multiple roundings in extended "
"precision\n"
"8.042178034628478e-13\n"
">>> total = 0.0\n"
">>> for x in arr:\n"
"...     total += x                   # Multiple roundings in standard "
"precision\n"
"...\n"
">>> total                            # Straight addition has no correct "
"digits!\n"
"-0.0051575902860057365"
msgstr ""
">>> arr = [-0.10430216751806065, -266310978.67179024, 143401161448607.16,\n"
"...        -143401161400469.7, 266262841.31058735, -0.003244936839808227]\n"
">>> float(sum(map(Fraction, arr)))   # Exact summation with single rounding\n"
"8.042173697819788e-13\n"
">>> math.fsum(arr)                   # Single rounding\n"
"8.042173697819788e-13\n"
">>> sum(arr)                         # Multiple roundings in extended "
"precision\n"
"8.042178034628478e-13\n"
">>> total = 0.0\n"
">>> for x in arr:\n"
"...     total += x                   # Multiple roundings in standard "
"precision\n"
"...\n"
">>> total                            # Straight addition has no correct "
"digits!\n"
"-0.0051575902860057365"

#: ../../tutorial/floatingpoint.rst:260
msgid "Representation Error"
msgstr "خطای نمایش"

#: ../../tutorial/floatingpoint.rst:262
msgid ""
"This section explains the \"0.1\" example in detail, and shows how you can "
"perform an exact analysis of cases like this yourself.  Basic familiarity "
"with binary floating-point representation is assumed."
msgstr ""
"این بخش مثال \"0.1\" را به صورت دقیق توضیح می دهد و نشان می دهد چگونه می "
"توانید خودتان تحلیل دقیقی از موارد مشابه انجام دهید. آشنایی پایه با نمایش "
"اعداد شناور دودویی فرض شده است."

#: ../../tutorial/floatingpoint.rst:266
msgid ""
":dfn:`Representation error` refers to the fact that some (most, actually) "
"decimal fractions cannot be represented exactly as binary (base 2) "
"fractions. This is the chief reason why Python (or Perl, C, C++, Java, "
"Fortran, and many others) often won't display the exact decimal number you "
"expect."
msgstr ""
"خطای نمایش به این واقعیت اشاره دارد که برخی (در واقع بیشتر) کسرهای اعشاری "
"نمی توانند به طور دقیق به صورت کسرهای دودویی (مبنای ۲) نمایش داده شوند. این "
"دلیل اصلی است که چرا پایتون (یا پرل, C, C++, جاوا, فورترن و بسیاری دیگر) "
"اغلب نمی توانند عدد اعشاری دقیقی را که انتظار دارید نمایش دهند."

#: ../../tutorial/floatingpoint.rst:271
msgid ""
"Why is that?  1/10 is not exactly representable as a binary fraction.  Since "
"at least 2000, almost all machines use IEEE 754 binary floating-point "
"arithmetic, and almost all platforms map Python floats to IEEE 754 binary64 "
"\"double precision\" values.  IEEE 754 binary64 values contain 53 bits of "
"precision, so on input the computer strives to convert 0.1 to the closest "
"fraction it can of the form *J*/2**\\ *N* where *J* is an integer containing "
"exactly 53 bits. Rewriting ::"
msgstr ""
"چرا اینطور است؟ 1/10 به صورت یک کسر دودویی دقیق نمایان نمی شود. از سال 2000 "
"به بعد، تقریباً تمام ماشین ها از محاسبات اعشاری دودویی IEEE 754 استفاده می "
"کنند و تقریباً تمام پلتفرم ها اعداد اعشاری پایتون را به مقادیر \"دقت "
"دوبرابر\" IEEE 754 binary64 نگاشت می کنند. مقادیر IEEE 754 binary64 شامل 53 "
"بیت دقت هستند، بنابراین در ورودی، کامپیوتر تلاش می کند 0.1 را به نزدیک ترین "
"کسری که می تواند از فرم تبدیل کند، که در آن *J*/2**\\ *N* where *J* یک عدد "
"صحیح است که دقیقا شامل 53 بیت می باشد. بازنویسی ::"

#: ../../tutorial/floatingpoint.rst:280
msgid "1 / 10 ~= J / (2**N)"
msgstr "1 / 10 ~= J / (2**N)"

#: ../../tutorial/floatingpoint.rst:282
msgid "as ::"
msgstr "همانطور كه ::"

#: ../../tutorial/floatingpoint.rst:284
msgid "J ~= 2**N / 10"
msgstr "J ~= 2**N / 10"

#: ../../tutorial/floatingpoint.rst:286
msgid ""
"and recalling that *J* has exactly 53 bits (is ``>= 2**52`` but ``< "
"2**53``), the best value for *N* is 56:"
msgstr ""
"و با یادآوری اینکه *J* دقیقا ۵۳ بیت دارد (``>= 2**52`` است اما ``< 2**53`` "
"نیست), بهترین مقدار برای *N* برابر ۵۶ است:"

#: ../../tutorial/floatingpoint.rst:289
msgid ""
">>> 2**52 <=  2**56 // 10  < 2**53\n"
"True"
msgstr ""
">>> 2**52 <=  2**56 // 10  < 2**53\n"
"True"

#: ../../tutorial/floatingpoint.rst:294
msgid ""
"That is, 56 is the only value for *N* that leaves *J* with exactly 53 bits.  "
"The best possible value for *J* is then that quotient rounded:"
msgstr ""
"یعنی، 56 تنها مقداری است برای *N* که *J* را دقیقا با 53 بیت باقی می گذارد. "
"بهترین مقدار ممکن برای *J* سپس آن خارج قسمت گرد شده است:"

#: ../../tutorial/floatingpoint.rst:297
msgid ""
">>> q, r = divmod(2**56, 10)\n"
">>> r\n"
"6"
msgstr ""
">>> q, r = divmod(2**56, 10)\n"
">>> r\n"
"6"

#: ../../tutorial/floatingpoint.rst:303
msgid ""
"Since the remainder is more than half of 10, the best approximation is "
"obtained by rounding up:"
msgstr ""
"از آنجا که باقیمانده بیش از نصف 10 است، بهترین تقریب با گرد کردن به بالا به "
"دست می آید:"

#: ../../tutorial/floatingpoint.rst:306
msgid ""
">>> q+1\n"
"7205759403792794"
msgstr ""
">>> q+1\n"
"7205759403792794"

#: ../../tutorial/floatingpoint.rst:313
msgid ""
"Therefore the best possible approximation to 1/10 in IEEE 754 double "
"precision is::"
msgstr ""
"بنابراین بهترین تقریب ممکن برای 1/10 در دقت مضاعف IEEE 754 به صورت زیر است::"

#: ../../tutorial/floatingpoint.rst:316
msgid "7205759403792794 / 2 ** 56"
msgstr "7205759403792794 / 2 ** 56"

#: ../../tutorial/floatingpoint.rst:318
msgid ""
"Dividing both the numerator and denominator by two reduces the fraction to::"
msgstr ""
"با تقسیم همزمان صورت و مخرج بر عدد دو، کسر به فرم ساده تری تبدیل می شود::"

#: ../../tutorial/floatingpoint.rst:320
msgid "3602879701896397 / 2 ** 55"
msgstr "3602879701896397 / 2 ** 55"

#: ../../tutorial/floatingpoint.rst:322
msgid ""
"Note that since we rounded up, this is actually a little bit larger than "
"1/10; if we had not rounded up, the quotient would have been a little bit "
"smaller than 1/10.  But in no case can it be *exactly* 1/10!"
msgstr ""
"توجه داشته باشید که از آنجایی که ما به بالا گرد کردیم، این مقدار در واقع کمی "
"بیشتر از 1/10 است؛ اگر ما گرد نکرده بودیم، خارج قسمت کمی کمتر از 1/10 می "
"بود. اما در هیچ صورت نمی تواند *exactly* 1/10 باشد!"

#: ../../tutorial/floatingpoint.rst:326
msgid ""
"So the computer never \"sees\" 1/10:  what it sees is the exact fraction "
"given above, the best IEEE 754 double approximation it can get:"
msgstr ""
"پس کامپیوتر هرگز 1/10 را \"نمی بیند\": چیزی که می بیند همان کسری دقیق ذکر "
"شده در بالا است، یعنی بهترین تقریب double در استاندارد IEEE 754 که می تواند "
"بدست آورد:"

#: ../../tutorial/floatingpoint.rst:329
msgid ""
">>> 0.1 * 2 ** 55\n"
"3602879701896397.0"
msgstr ""
">>> 0.1 * 2 ** 55\n"
"3602879701896397.0"

#: ../../tutorial/floatingpoint.rst:334
msgid ""
"If we multiply that fraction by 10\\*\\*55, we can see the value out to 55 "
"decimal digits:"
msgstr ""
"اگر آن کسر را در 10\\*\\*55 ضرب کنیم، می توانیم مقدار را تا 55 رقم اعشار "
"ببینیم:"

#: ../../tutorial/floatingpoint.rst:337
msgid ""
">>> 3602879701896397 * 10 ** 55 // 2 ** 55\n"
"1000000000000000055511151231257827021181583404541015625"
msgstr ""
">>> 3602879701896397 * 10 ** 55 // 2 ** 55\n"
"1000000000000000055511151231257827021181583404541015625"

#: ../../tutorial/floatingpoint.rst:342
msgid ""
"meaning that the exact number stored in the computer is equal to the decimal "
"value 0.1000000000000000055511151231257827021181583404541015625. Instead of "
"displaying the full decimal value, many languages (including older versions "
"of Python), round the result to 17 significant digits:"
msgstr ""
"به این معنا که عدد دقیق ذخیره شده در کامپیوتر برابر با مقدار دهدهی "
"0.1000000000000000055511151231257827021181583404541015625 است. به جای نمایش "
"مقدار کامل دهدهی، بسیاری از زبان ها (شامل نسخه های قدیمی تر پایتون), نتیجه "
"را به 17 رقم معنادار گرد می کنند:"

#: ../../tutorial/floatingpoint.rst:347
msgid ""
">>> format(0.1, '.17f')\n"
"'0.10000000000000001'"
msgstr ""
">>> format(0.1, '.17f')\n"
"'0.10000000000000001'"

#: ../../tutorial/floatingpoint.rst:352
msgid ""
"The :mod:`fractions` and :mod:`decimal` modules make these calculations easy:"
msgstr ""
"ماژول های :mod:`fractions` و :mod:`decimal` این محاسبات را آسان می کنند:"

#: ../../tutorial/floatingpoint.rst:355
msgid ""
">>> from decimal import Decimal\n"
">>> from fractions import Fraction\n"
"\n"
">>> Fraction.from_float(0.1)\n"
"Fraction(3602879701896397, 36028797018963968)\n"
"\n"
">>> (0.1).as_integer_ratio()\n"
"(3602879701896397, 36028797018963968)\n"
"\n"
">>> Decimal.from_float(0.1)\n"
"Decimal('0.1000000000000000055511151231257827021181583404541015625')\n"
"\n"
">>> format(Decimal.from_float(0.1), '.17')\n"
"'0.10000000000000001'"
msgstr ""
">>> from decimal import Decimal\n"
">>> from fractions import Fraction\n"
"\n"
">>> Fraction.from_float(0.1)\n"
"Fraction(3602879701896397, 36028797018963968)\n"
"\n"
">>> (0.1).as_integer_ratio()\n"
"(3602879701896397, 36028797018963968)\n"
"\n"
">>> Decimal.from_float(0.1)\n"
"Decimal('0.1000000000000000055511151231257827021181583404541015625')\n"
"\n"
">>> format(Decimal.from_float(0.1), '.17')\n"
"'0.10000000000000001'"
