# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-04 16:17+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Persian (https://app.transifex.com/python-doc/teams/5390/"
"fa/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fa\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/introduction.rst:5
msgid "An Informal Introduction to Python"
msgstr "یک معرفی غیررسمی به پایتون"

#: ../../tutorial/introduction.rst:7
msgid ""
"In the following examples, input and output are distinguished by the "
"presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the "
"example, you must type everything after the prompt, when the prompt appears; "
"lines that do not begin with a prompt are output from the interpreter. Note "
"that a secondary prompt on a line by itself in an example means you must "
"type a blank line; this is used to end a multi-line command."
msgstr ""
"در مثال های زیر، ورودی و خروجی با حضور یا عدم حضور اعلان ها (:term:`>>>` و :"
"term:`...`) قابل تشخیص هستند: برای تکرار مثال، باید همه چیزی که بعد از اعلان "
"می آید را تایپ کنید، هنگامی که اعلان ظاهر می شود؛ خطوطی که با اعلان شروع نمی "
"شوند خروجی از مفسر هستند. توجه داشته باشید که یک اعلان ثانویه در خطی به صورت "
"تنها در یک مثال به معنای این است که باید یک خط خالی تایپ کنید؛ این برای "
"پایان دادن به یک دستور چند خطی استفاده می شود."

#: ../../tutorial/introduction.rst:16
msgid ""
"You can toggle the display of prompts and output by clicking on ``>>>`` in "
"the upper-right corner of an example box.  If you hide the prompts and "
"output for an example, then you can easily copy and paste the input lines "
"into your interpreter."
msgstr ""
"می توانید نمایش درخواست ها و خروجی ها را با کلیک روی ``>>>`` در گوشه بالا-"
"راست یک جعبه مثال تغییر دهید. اگر درخواست ها و خروجی ها را برای یک مثال "
"پنهان کنید، می توانید به راحتی خطوط ورودی را در مفسر خود کپی و جای گذاری "
"کنید."

#: ../../tutorial/introduction.rst:23
msgid ""
"Many of the examples in this manual, even those entered at the interactive "
"prompt, include comments.  Comments in Python start with the hash character, "
"``#``, and extend to the end of the physical line.  A comment may appear at "
"the start of a line or following whitespace or code, but not within a string "
"literal.  A hash character within a string literal is just a hash character. "
"Since comments are to clarify code and are not interpreted by Python, they "
"may be omitted when typing in examples."
msgstr ""
"بسیاری از مثال های موجود در این راهنما، حتی آن هایی که در خط فرمان تعاملی "
"وارد می شوند، شامل توضیحات هستند. توضیحات در پایتون با کاراکتر هشتگ، ``#``، "
"آغاز می شوند و تا انتهای خط فیزیکی ادامه دارند. توضیحات می توانند در ابتدای "
"یک خط یا پس از فاصله یا کد ظاهر شوند، اما نه در داخل یک رشته. کاراکتر هشتگ "
"در یک رشته تنها یک کاراکتر هشتگ است. از آنجایی که توضیحات برای واضح کردن کد "
"هستند و توسط پایتون تفسیر نمی شوند، ممکن است هنگام وارد کردن مثال ها حذف "
"شوند."

#: ../../tutorial/introduction.rst:31
msgid "Some examples::"
msgstr "چند نمونه::"

#: ../../tutorial/introduction.rst:42
msgid "Using Python as a Calculator"
msgstr "استفاده از پایتون به عنوان یک ماشین حساب"

#: ../../tutorial/introduction.rst:44
msgid ""
"Let's try some simple Python commands.  Start the interpreter and wait for "
"the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr ""
"بیایید چند فرمان ساده ی پایتون را امتحان کنیم. مفسر را اجرا کنید و منتظر "
"اعلان اولیه، ``>>>`` بمانید. (نباید زمان زیادی ببرد.)"

#: ../../tutorial/introduction.rst:51
msgid "Numbers"
msgstr "اعداد"

#: ../../tutorial/introduction.rst:53
msgid ""
"The interpreter acts as a simple calculator: you can type an expression at "
"it and it will write the value.  Expression syntax is straightforward: the "
"operators ``+``, ``-``, ``*`` and ``/`` work just like in most other "
"languages (for example, Pascal or C); parentheses (``()``) can be used for "
"grouping. For example::"
msgstr ""

#: ../../tutorial/introduction.rst:68
msgid ""
"The integer numbers (e.g. ``2``, ``4``, ``20``) have type :class:`int`, the "
"ones with a fractional part (e.g. ``5.0``, ``1.6``) have type :class:"
"`float`.  We will see more about numeric types later in the tutorial."
msgstr ""
"اعداد صحیح (مثال: ``2``، ``4``، ``20``) نوع :class:`int` دارند، و اعدادی که "
"دارای بخش اعشاری هستند (مثال: ``5.0``، ``1.6``) نوع :class:`float` دارند. در "
"ادامه آموزش، بیشتر درباره انواع عددی صحبت خواهیم کرد."

#: ../../tutorial/introduction.rst:72
msgid ""
"Division (``/``) always returns a float.  To do :term:`floor division` and "
"get an integer result you can use the ``//`` operator; to calculate the "
"remainder you can use ``%``::"
msgstr ""
"تقسیم (``/``) همیشه یک عدد اعشاری را برمی گرداند. برای انجام :term:`floor "
"division` و دریافت نتیجه ی صحیح شما می توانید از عملگر ``//`` استفاده کنید؛ "
"برای محاسبه باقیمانده می توانید از ``%`` استفاده کنید::"

#: ../../tutorial/introduction.rst:86
msgid ""
"With Python, it is possible to use the ``**`` operator to calculate powers "
"[#]_::"
msgstr ""
"با پایتون، امکان استفاده از عملگر ``**`` وجود دارد تا توان ها را محاسبه کنید "
"[#]_:"

#: ../../tutorial/introduction.rst:93
msgid ""
"The equal sign (``=``) is used to assign a value to a variable. Afterwards, "
"no result is displayed before the next interactive prompt::"
msgstr ""
"علامت تساوی (``=``) برای اختصاص دادن یک مقدار به یک متغیر استفاده می شود. پس "
"از آن، هیچ نتیجه ای قبل از اعلان تعاملی بعدی نمایش داده نمی شود::"

#: ../../tutorial/introduction.rst:101
msgid ""
"If a variable is not \"defined\" (assigned a value), trying to use it will "
"give you an error::"
msgstr ""
"اگر یک متغیر \"تعریف\" نشده باشد (به آن مقداری اختصاص داده نشده باشد)، تلاش "
"برای استفاده از آن به شما یک خطا می دهد:"

#: ../../tutorial/introduction.rst:109
msgid ""
"There is full support for floating point; operators with mixed type operands "
"convert the integer operand to floating point::"
msgstr ""
"پشتیبانی کامل از اعداد اعشاری وجود دارد؛ عملگرهایی که با عملوندهایی از انواع "
"مختلف کار می کنند، عملوند صحیح را به عدد اعشاری تبدیل می کنند::"

#: ../../tutorial/introduction.rst:115
msgid ""
"In interactive mode, the last printed expression is assigned to the variable "
"``_``.  This means that when you are using Python as a desk calculator, it "
"is somewhat easier to continue calculations, for example::"
msgstr ""
"در حالت تعاملی، آخرین عبارت چاپ شده به متغیر ``_`` اختصاص داده می شود. این "
"بدان معناست که هنگامی که از پایتون به عنوان ماشین حساب رومیزی استفاده می "
"کنید، ادامه محاسبات تا حدی آسان تر است، به عنوان مثال:"

#: ../../tutorial/introduction.rst:128
msgid ""
"This variable should be treated as read-only by the user.  Don't explicitly "
"assign a value to it --- you would create an independent local variable with "
"the same name masking the built-in variable with its magic behavior."
msgstr ""
"این متغیر باید به صورت فقط خواندنی توسط کاربر در نظر گرفته شود. به طور صریح "
"به آن مقدار اختصاص ندهید --- در این صورت یک متغیر محلی مستقل با همان نام "
"ایجاد می کنید که متغیر داخلی با رفتار خاصش را مخفی می کند."

#: ../../tutorial/introduction.rst:132
msgid ""
"In addition to :class:`int` and :class:`float`, Python supports other types "
"of numbers, such as :class:`~decimal.Decimal` and :class:`~fractions."
"Fraction`. Python also has built-in support for :ref:`complex numbers "
"<typesnumeric>`, and uses the ``j`` or ``J`` suffix to indicate the "
"imaginary part (e.g. ``3+5j``)."
msgstr ""
"علاوه بر :class:`int` و :class:`float`، پایتون از انواع دیگری از اعداد، "
"مانند :class:`~decimal.Decimal` و :class:`~fractions.Fraction` نیز پشتیبانی "
"می کند. پایتون همچنین پشتیبانی داخلی برای :ref:`complex numbers "
"<typesnumeric>` دارد، و از پسوندهای ``j`` یا ``J`` برای نشان دادن بخش موهومی "
"استفاده می کند (مثلاً ``3+5j``)."

#: ../../tutorial/introduction.rst:142
msgid "Strings"
msgstr ""

#: ../../tutorial/introduction.rst:144
msgid ""
"Besides numbers, Python can also manipulate strings, which can be expressed "
"in several ways.  They can be enclosed in single quotes (``'...'``) or "
"double quotes (``\"...\"``) with the same result [#]_.  ``\\`` can be used "
"to escape quotes::"
msgstr ""

#: ../../tutorial/introduction.rst:162
msgid ""
"In the interactive interpreter, the output string is enclosed in quotes and "
"special characters are escaped with backslashes.  While this might sometimes "
"look different from the input (the enclosing quotes could change), the two "
"strings are equivalent.  The string is enclosed in double quotes if the "
"string contains a single quote and no double quotes, otherwise it is "
"enclosed in single quotes.  The :func:`print` function produces a more "
"readable output, by omitting the enclosing quotes and by printing escaped "
"and special characters::"
msgstr ""

#: ../../tutorial/introduction.rst:182
msgid ""
"If you don't want characters prefaced by ``\\`` to be interpreted as special "
"characters, you can use *raw strings* by adding an ``r`` before the first "
"quote::"
msgstr ""
"اگر نمی خواهید کاراکترهایی که با ``\\`` پیشوند شده اند به عنوان کاراکترهای "
"ویژه تفسیر شوند، می توانید از *raw strings* با اضافه کردن یک ``r`` قبل از "
"اولین نقل قول استفاده کنید::"

#: ../../tutorial/introduction.rst:192
msgid ""
"There is one subtle aspect to raw strings: a raw string may not end in an "
"odd number of ``\\`` characters; see :ref:`the FAQ entry <faq-programming-"
"raw-string-backslash>` for more information and workarounds."
msgstr ""
"یک نکتهٔ ظریف در مورد رشته های خام وجود دارد: یک رشتهٔ خام نباید با تعداد فردی "
"از کاراکترهای ``\\`` به پایان برسد؛ برای اطلاعات بیشتر و راه حل ها به :ref:"
"`the FAQ entry <faq-programming-raw-string-backslash>` مراجعه کنید."

#: ../../tutorial/introduction.rst:197
msgid ""
"String literals can span multiple lines.  One way is using triple-quotes: "
"``\"\"\"...\"\"\"`` or ``'''...'''``.  End of lines are automatically "
"included in the string, but it's possible to prevent this by adding a ``\\`` "
"at the end of the line.  The following example::"
msgstr ""

#: ../../tutorial/introduction.rst:208
msgid ""
"produces the following output (note that the initial newline is not "
"included):"
msgstr ""

#: ../../tutorial/introduction.rst:216
msgid ""
"Strings can be concatenated (glued together) with the ``+`` operator, and "
"repeated with ``*``::"
msgstr ""
"رشته ها می توانند با عملگر ``+`` به هم متصل شوند و با ``*`` تکرار شوند::"

#: ../../tutorial/introduction.rst:223
msgid ""
"Two or more *string literals* (i.e. the ones enclosed between quotes) next "
"to each other are automatically concatenated. ::"
msgstr ""
"دو یا چند *string literals* (یعنی آن هایی که بین علامت نقل قول قرار گرفته "
"اند) که کنار هم هستند به صورت خودکار با یکدیگر ترکیب می شوند. ::"

#: ../../tutorial/introduction.rst:229
msgid ""
"This feature is particularly useful when you want to break long strings::"
msgstr ""
"این ویژگی به ویژه زمانی مفید است که می خواهید رشته های طولانی را بشکنید::"

#: ../../tutorial/introduction.rst:236
msgid ""
"This only works with two literals though, not with variables or expressions::"
msgstr "این تنها با دو مقدار ثابت کار می کند، نه با متغیرها یا عبارات::"

#: ../../tutorial/introduction.rst:250
msgid ""
"If you want to concatenate variables or a variable and a literal, use ``+``::"
msgstr ""
"اگر می خواهید متغیرها یا یک متغیر و یک مقدار ثابت را به هم متصل کنید، از "
"``+`` استفاده کنید::"

#: ../../tutorial/introduction.rst:255
msgid ""
"Strings can be *indexed* (subscripted), with the first character having "
"index 0. There is no separate character type; a character is simply a string "
"of size one::"
msgstr ""
"رشته ها می توانند به صورت *indexed* (اندیس دار) باشند، به طوری که اولین "
"کاراکتر دارای شاخص 0 است. نوع کاراکتر مجزایی وجود ندارد؛ یک کاراکتر به سادگی "
"یک رشته با اندازه یک است::"

#: ../../tutorial/introduction.rst:265
msgid ""
"Indices may also be negative numbers, to start counting from the right::"
msgstr ""
"اندیس ها همچنین می توانند اعداد منفی باشند تا شمارش را از سمت راست شروع "
"کنند::"

#: ../../tutorial/introduction.rst:274
msgid "Note that since -0 is the same as 0, negative indices start from -1."
msgstr ""
"توجه داشته باشید که از آنجا که -0 با 0 برابر است، اندیس های منفی از -1 شروع "
"می شوند."

#: ../../tutorial/introduction.rst:276
msgid ""
"In addition to indexing, *slicing* is also supported.  While indexing is "
"used to obtain individual characters, *slicing* allows you to obtain "
"substring::"
msgstr ""

#: ../../tutorial/introduction.rst:284
msgid ""
"Slice indices have useful defaults; an omitted first index defaults to zero, "
"an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""
"شاخص های برش دارای مقادیر پیش فرض مفید هستند؛ زمانی که اولین شاخص حذف شود، "
"به طور پیش فرض روی صفر قرار می گیرد و زمانی که شاخص دوم حذف شود، به طور پیش "
"فرض به اندازه ی رشته ای که در حال برش دادن است، تنظیم می شود."

#: ../../tutorial/introduction.rst:294
msgid ""
"Note how the start is always included, and the end always excluded.  This "
"makes sure that ``s[:i] + s[i:]`` is always equal to ``s``::"
msgstr ""
"توجه داشته باشید که شروع همیشه شامل شده است و پایان همیشه مستثنی است. این "
"موضوع تضمین می کند که ``s[:i] + s[i:]`` همیشه مساوی با ``s`` است::"

#: ../../tutorial/introduction.rst:302
msgid ""
"One way to remember how slices work is to think of the indices as pointing "
"*between* characters, with the left edge of the first character numbered 0. "
"Then the right edge of the last character of a string of *n* characters has "
"index *n*, for example::"
msgstr ""
"یک روش برای به خاطر سپردن نحوه کار برش ها این است که اندیس ها را به عنوان "
"اشاره گر به کاراکترهای *between* تصور کنید، با این فرض که لبه چپ اولین "
"کاراکتر شماره 0 است. سپس لبه راست آخرین کاراکتر یک رشته *n* کاراکتری دارای "
"اندیس *n* است، برای مثال:"

#: ../../tutorial/introduction.rst:313
msgid ""
"The first row of numbers gives the position of the indices 0...6 in the "
"string; the second row gives the corresponding negative indices. The slice "
"from *i* to *j* consists of all characters between the edges labeled *i* and "
"*j*, respectively."
msgstr ""
"ردیف اول اعداد موقعیت اندیس های 0...6 را در رشته نشان می دهد؛ ردیف دوم اندیس "
"های منفی متناظر را ارائه می دهد. برش از *i* تا *j* شامل تمام کاراکترهایی است "
"که بین لبه های برچسب گذاری شده *i* و *j* قرار دارند."

#: ../../tutorial/introduction.rst:318
msgid ""
"For non-negative indices, the length of a slice is the difference of the "
"indices, if both are within bounds.  For example, the length of "
"``word[1:3]`` is 2."
msgstr ""
"برای ایندکس های غیر منفی، طول یک برش از تفاوت ایندکس ها به دست می آید، اگر "
"هر دو در محدوده باشند. به عنوان مثال، طول ``word[1:3]`` برابر ۲ است."

#: ../../tutorial/introduction.rst:322
msgid "Attempting to use an index that is too large will result in an error::"
msgstr "استفاده از یک اندکس که بیش از حد بزرگ است منجر به ایجاد خطا خواهد شد::"

#: ../../tutorial/introduction.rst:329
msgid ""
"However, out of range slice indexes are handled gracefully when used for "
"slicing::"
msgstr ""
"با این حال، اندیس های برش خارج از محدوده وقتی که برای برش استفاده می شوند، "
"به طور ملایم مدیریت می شوند::"

#: ../../tutorial/introduction.rst:337
msgid ""
"Python strings cannot be changed --- they are :term:`immutable`. Therefore, "
"assigning to an indexed position in the string results in an error::"
msgstr ""
"رشته های پایتون نمی توانند تغییر کنند --- آنها :term:`immutable` هستند. "
"بنابراین، تخصیص به یک موقعیت معین در رشته منجر به خطا می شود::"

#: ../../tutorial/introduction.rst:349
msgid "If you need a different string, you should create a new one::"
msgstr "اگر به یک رشته متفاوت نیاز دارید، باید یک رشته جدید ایجاد کنید::"

#: ../../tutorial/introduction.rst:356
msgid "The built-in function :func:`len` returns the length of a string::"
msgstr "تابع داخلی :func:`len` طول یک رشته را برمی گرداند::"

#: ../../tutorial/introduction.rst:367
msgid ":ref:`textseq`"
msgstr ":ref:`textseq`"

#: ../../tutorial/introduction.rst:366
msgid ""
"Strings are examples of *sequence types*, and support the common operations "
"supported by such types."
msgstr ""
"رشته ها نمونه هایی از *sequence types* هستند و از عملیاتی که برای این نوع ها "
"معمول است، پشتیبانی می کنند."

#: ../../tutorial/introduction.rst:371
msgid ":ref:`string-methods`"
msgstr ":ref:`string-methods`"

#: ../../tutorial/introduction.rst:370
msgid ""
"Strings support a large number of methods for basic transformations and "
"searching."
msgstr ""
"رشته ها از تعداد زیادی متد برای تغییرات پایه ای و جستجو پشتیبانی می کنند."

#: ../../tutorial/introduction.rst:374
msgid ":ref:`f-strings`"
msgstr ":ref:`f-strings`"

#: ../../tutorial/introduction.rst:374
msgid "String literals that have embedded expressions."
msgstr "رشته های متنی که شامل عبارات تعبیه شده هستند."

#: ../../tutorial/introduction.rst:377
msgid ":ref:`formatstrings`"
msgstr ":ref:`formatstrings`"

#: ../../tutorial/introduction.rst:377
msgid "Information about string formatting with :meth:`str.format`."
msgstr "اطلاعاتی درباره قالب بندی رشته با :meth:`str.format`."

#: ../../tutorial/introduction.rst:380
msgid ":ref:`old-string-formatting`"
msgstr ":ref:`old-string-formatting`"

#: ../../tutorial/introduction.rst:380
msgid ""
"The old formatting operations invoked when strings are the left operand of "
"the ``%`` operator are described in more detail here."
msgstr ""
"عملیات قالب بندی قدیمی که زمانی فراخوانی می شوند که رشته ها عملوند چپ عملگر "
"``%`` هستند، به طور کامل تر در اینجا توضیح داده شده اند."

#: ../../tutorial/introduction.rst:387
msgid "Lists"
msgstr "لیست ها"

#: ../../tutorial/introduction.rst:389
msgid ""
"Python knows a number of *compound* data types, used to group together other "
"values.  The most versatile is the *list*, which can be written as a list of "
"comma-separated values (items) between square brackets.  Lists might contain "
"items of different types, but usually the items all have the same type. ::"
msgstr ""
"پایتون تعدادی *compound* نوع داده می شناسد که برای گروه بندی مقادیر دیگر "
"استفاده می شوند. انعطاف پذیرترین آن ها *list* است که می تواند به صورت یک "
"فهرست از مقادیر جدا شده با ویرگول (آیتم ها) در میان کروشه نوشته شود. فهرست "
"ها ممکن است آیتم هایی از انواع مختلف داشته باشند، اما معمولاً همه ی آیتم ها "
"از یک نوع هستند."

#: ../../tutorial/introduction.rst:398
msgid ""
"Like strings (and all other built-in :term:`sequence` types), lists can be "
"indexed and sliced::"
msgstr ""
"مانند رشته ها (و همه انواع توکار دیگر :term:`sequence`)، لیست ها را می توان "
"فهرست بندی و برش داد::"

#: ../../tutorial/introduction.rst:408
msgid ""
"All slice operations return a new list containing the requested elements.  "
"This means that the following slice returns a :ref:`shallow copy "
"<shallow_vs_deep_copy>` of the list::"
msgstr ""
"همه عملیات برشی یک لیست جدید حاوی عناصر درخواست شده را بر می گردانند. این "
"بدان معناست که برش زیر یک :ref:`shallow copy <shallow_vs_deep_copy>` از لیست "
"را بر می گرداند::"

#: ../../tutorial/introduction.rst:415
msgid "Lists also support operations like concatenation::"
msgstr "لیست ها همچنین عملیات هایی مانند الحاق را پشتیبانی می کنند::"

#: ../../tutorial/introduction.rst:420
msgid ""
"Unlike strings, which are :term:`immutable`, lists are a :term:`mutable` "
"type, i.e. it is possible to change their content::"
msgstr ""
"برخلاف رشته ها که :term:`immutable` هستند، لیست ها :term:`mutable` نوع "
"هستند، به این معنی که امکان تغییر محتوای آن ها وجود دارد::"

#: ../../tutorial/introduction.rst:430
msgid ""
"You can also add new items at the end of the list, by using the :meth:`~list."
"append` *method* (we will see more about methods later)::"
msgstr ""

#: ../../tutorial/introduction.rst:438
msgid ""
"Assignment to slices is also possible, and this can even change the size of "
"the list or clear it entirely::"
msgstr ""
"انتساب به بُرش ها نیز ممکن است و می تواند حتی اندازه ی لیست را تغییر دهد یا "
"آن را به طور کامل خالی کند:"

#: ../../tutorial/introduction.rst:457
msgid "The built-in function :func:`len` also applies to lists::"
msgstr "تابع داخلی :func:`len` همچنین برای لیست ها نیز اعمال می شود::"

#: ../../tutorial/introduction.rst:463
msgid ""
"It is possible to nest lists (create lists containing other lists), for "
"example::"
msgstr ""
"امکان دارد که لیست ها را تو در تو کرد (لیست هایی ایجاد کرد که شامل لیست های "
"دیگر باشند)، به عنوان مثال:"

#: ../../tutorial/introduction.rst:479
msgid "First Steps Towards Programming"
msgstr "اولین گام ها به سوی برنامه نویسی"

#: ../../tutorial/introduction.rst:481
msgid ""
"Of course, we can use Python for more complicated tasks than adding two and "
"two together.  For instance, we can write an initial sub-sequence of the "
"`Fibonacci series <https://en.wikipedia.org/wiki/Fibonacci_number>`_ as "
"follows::"
msgstr ""

#: ../../tutorial/introduction.rst:501
msgid "This example introduces several new features."
msgstr "این مثال چند ویژگی جدید را معرفی می کند."

#: ../../tutorial/introduction.rst:503
msgid ""
"The first line contains a *multiple assignment*: the variables ``a`` and "
"``b`` simultaneously get the new values 0 and 1.  On the last line this is "
"used again, demonstrating that the expressions on the right-hand side are "
"all evaluated first before any of the assignments take place.  The right-"
"hand side expressions are evaluated  from the left to the right."
msgstr ""
"اولین خط حاوی یک *multiple assignment* است: متغیرهای ``a`` و ``b`` به طور "
"همزمان مقادیر جدید ۰ و ۱ را دریافت می کنند. در خط آخر این مورد دوباره "
"استفاده می شود و نشان می دهد که ابتدا تمام عبارات در سمت راست ارزیابی می "
"شوند قبل از اینکه هر یک از تخصیص ها انجام شوند. عبارات سمت راست از چپ به "
"راست ارزیابی می شوند."

#: ../../tutorial/introduction.rst:509
msgid ""
"The :keyword:`while` loop executes as long as the condition (here: ``a < "
"10``) remains true.  In Python, like in C, any non-zero integer value is "
"true; zero is false.  The condition may also be a string or list value, in "
"fact any sequence; anything with a non-zero length is true, empty sequences "
"are false.  The test used in the example is a simple comparison.  The "
"standard comparison operators are written the same as in C: ``<`` (less "
"than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal "
"to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""
"حلقه :keyword:`while` تا زمانی که شرط (اینجا: ``a < 10``) همچنان درست باشد، "
"اجرا می شود. در پایتون، مانند C، هر مقدار صحیح غیر صفر درست است؛ صفر نادرست "
"است. شرط همچنین می تواند یک مقدار رشته ای یا لیست باشد، در واقع هر دنباله "
"ای؛ هر چیزی با طول غیر صفر درست است، دنباله های خالی نادرست هستند. آزمون "
"استفاده شده در مثال یک مقایسه ساده است. عملگرهای مقایسه استاندارد به همان "
"شکلی هستند که در C نوشته می شوند: ``<`` (کمتر از)، ``>`` (بزرگتر از)، ``==`` "
"(مساوی)، ``<=`` (کمتر یا مساوی)، ``>=`` (بزرگتر یا مساوی) و ``!=`` (نامساوی)."

#: ../../tutorial/introduction.rst:518
msgid ""
"The *body* of the loop is *indented*: indentation is Python's way of "
"grouping statements.  At the interactive prompt, you have to type a tab or "
"space(s) for each indented line.  In practice you will prepare more "
"complicated input for Python with a text editor; all decent text editors "
"have an auto-indent facility.  When a compound statement is entered "
"interactively, it must be followed by a blank line to indicate completion "
"(since the parser cannot guess when you have typed the last line).  Note "
"that each line within a basic block must be indented by the same amount."
msgstr ""
"*body* حلقه *indented*: در پایتون، فاصله گذاری راهی برای گروه بندی "
"دستورهاست. در محیط تعاملی، باید برای هر خط با تورفتگی، یک تب یا فاصله تایپ "
"کنید. در عمل، با استفاده از یک ویرایشگر متن، ورودی های پیچیده تری برای "
"پایتون آماده خواهید کرد؛ تمامی ویرایشگرهای متن مناسب دارای قابلیت تورفتگی "
"خودکار هستند. هنگامی که یک عبارت مرکب به صورت تعاملی وارد می شود، باید با یک "
"خط خالی دنبال شود تا نشان دهنده تکمیل باشد (زیرا تجزیه گر نمی تواند حدس بزند "
"که چه زمانی خط آخر را تایپ کرده اید). توجه داشته باشید که هر خط درون یک بلوک "
"پایه باید به همان میزان تورفته باشد."

#: ../../tutorial/introduction.rst:527
msgid ""
"The :func:`print` function writes the value of the argument(s) it is given. "
"It differs from just writing the expression you want to write (as we did "
"earlier in the calculator examples) in the way it handles multiple "
"arguments, floating point quantities, and strings.  Strings are printed "
"without quotes, and a space is inserted between items, so you can format "
"things nicely, like this::"
msgstr ""

#: ../../tutorial/introduction.rst:538
msgid ""
"The keyword argument *end* can be used to avoid the newline after the "
"output, or end the output with a different string::"
msgstr ""
"آرگومان کلیدواژه *end* می تواند برای جلوگیری از ایجاد خط جدید پس از خروجی، "
"یا پایان دادن به خروجی با یک رشته متفاوت استفاده شود::"

#: ../../tutorial/introduction.rst:550
msgid "Footnotes"
msgstr "پاورقی ها"

#: ../../tutorial/introduction.rst:551
msgid ""
"Since ``**`` has higher precedence than ``-``, ``-3**2`` will be interpreted "
"as ``-(3**2)`` and thus result in ``-9``.  To avoid this and get ``9``, you "
"can use ``(-3)**2``."
msgstr ""
"از آنجا که ``**`` دارای تقدم بیشتری نسبت به ``-`` است، ``-3**2`` به صورت ``-"
"(3**2)`` تفسیر می شود و در نتیجه ``-9`` به دست می آید. برای اجتناب از این و "
"دریافت ``9``، می توانید از ``(-3)**2`` استفاده کنید."

#: ../../tutorial/introduction.rst:555
msgid ""
"Unlike other languages, special characters such as ``\\n`` have the same "
"meaning with both single (``'...'``) and double (``\"...\"``) quotes. The "
"only difference between the two is that within single quotes you don't need "
"to escape ``\"`` (but you have to escape ``\\'``) and vice versa."
msgstr ""
"برخلاف زبان های دیگر، کاراکترهای ویژه ای مانند ``\\n`` با هر دو نوع نقل قول، "
"یعنی نقل قول تکی (``'...'``) و نقل قول دوتایی (``\"...\"``)، معنای یکسانی "
"دارند. تنها تفاوت میان این دو در این است که در نقل قول تکی نیاز نیست که "
"``\"`` را Escape کنید (اما باید ``\\'`` را Escape کنید) و بالعکس."
