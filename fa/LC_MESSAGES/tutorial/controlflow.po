# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 17:01+0000\n"
"PO-Revision-Date: 2025-09-22 15:58+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Persian (https://app.transifex.com/python-doc/teams/5390/"
"fa/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fa\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "ابزارهای کنترل جریان بیشتر"

#: ../../tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr "بیانیه های :keyword:`!if`"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"شاید شناخته شده ترین نوع عبارت عبارت :keyword:`if` باشد.  به عنوان مثال::"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"ممکن است تعداد قطعات :keyword:`elif` صفر یا بیشتر باشد و قسمت :keyword:"
"`else` اختیاری است.  کلمه کلیدی ':keyword:`!elif`' مخفف 'alse if' است و برای "
"جلوگیری از فرورفتگی بیش از حد مفید است.  یک دنباله :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... جایگزینی برای دستورات ``switch`` یا "
"``case`` موجود در زبان های دیگر است."

#: ../../tutorial/controlflow.rst:39
msgid ""
"If you're comparing the same value to several constants, or checking for "
"specific types or attributes, you may also find the :keyword:`!match` "
"statement useful. For more details see :ref:`tut-match`."
msgstr ""
"اگر در حال مقایسه یک مقدار با چندین ثابت هستید، یا بررسی نوع های خاص یا "
"ویژگی ها را انجام می دهید، ممکن است دستور :keyword:`!match` برای شما مفید "
"باشد. برای جزئیات بیشتر به :ref:`tut-match` مراجعه کنید."

#: ../../tutorial/controlflow.rst:46
msgid ":keyword:`!for` Statements"
msgstr "بیانیه های :keyword:`!for`"

#: ../../tutorial/controlflow.rst:51
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"دستور :keyword:`for` در پایتون با آنچه ممکن است در C یا پاسکال به آن عادت "
"داشته باشید کمی متفاوت است.  دستور :keyword:`!for` پایتون به جای اینکه همیشه "
"روی یک پیشرفت حسابی اعداد تکرار شود (مانند پاسکال), یا به کاربر توانایی "
"تعریف مرحله تکرار و شرط توقف (به عنوان C) را بدهد، عبارت :keyword:`!for` "
"پایتون روی آیتم‌های هر دنباله (یک لیست یا یک رشته), به ترتیب ظاهر شدن آنها در "
"دنباله تکرار می‌شود.  به عنوان مثال (بدون جناس):"

#: ../../tutorial/controlflow.rst:72
msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to "
"loop over a copy of the collection or to create a new collection::"
msgstr ""
"کدی که یک مجموعه را در حین تکرار روی همان مجموعه تغییر می‌دهد، می‌تواند برای "
"درست کردن آن مشکل باشد.  در عوض، معمولا ساده‌تر است که روی یک کپی از مجموعه "
"حلقه بزنید یا یک مجموعه جدید ایجاد کنید:"

#: ../../tutorial/controlflow.rst:94
msgid "The :func:`range` Function"
msgstr "عملکرد :func:`range`"

#: ../../tutorial/controlflow.rst:96
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"اگر نیاز به تکرار بر روی یک دنباله از اعداد دارید، عملکرد داخلی :func:"
"`range` مفید است.  پیشرفت های حسابی را ایجاد می کند:"

#: ../../tutorial/controlflow.rst:108
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"نقطه پایانی داده شده هرگز بخشی از توالی تولید شده نیست. ``range(10)`` 10 "
"مقدار تولید می کند، شاخص های قانونی برای مواردی با یک دنباله به طول 10. می "
"توان اجازه داد که محدوده از یک عدد دیگر شروع شود، یا یک افزایش متفاوت (حتی "
"منفی، گاهی اوقات به این مرحله \"گام\" می گویند:"

#: ../../tutorial/controlflow.rst:122
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"برای تکرار بر روی شاخص های یک دنباله، می توانید :func:`range` و :func:`len` "
"را به صورت زیر ترکیب کنید:"

#: ../../tutorial/controlflow.rst:135
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"با این حال، در بیشتر چنین مواردی، استفاده از عملکرد :func:`enumerate` راحت "
"است، به :ref:`tut-loopidioms` مراجعه کنید."

#: ../../tutorial/controlflow.rst:138
msgid "A strange thing happens if you just print a range::"
msgstr "اگر فقط یک محدوده را چاپ کنید یک اتفاق عجیب رخ می دهد::"

#: ../../tutorial/controlflow.rst:143
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"از بسیاری جهات، شی ای که توسط :func:`range` برگردانده می شود طوری رفتار می "
"کند که انگار یک لیست است، اما در واقع اینطور نیست. این شیئی است که وقتی روی "
"آن تکرار می‌کنید آیتم‌های متوالی دنباله مورد نظر را برمی‌گرداند، اما واقعاً در "
"لیست قرار نمی‌گیرد، بنابراین در فضا صرفه‌جویی می‌شود."

#: ../../tutorial/controlflow.rst:148
msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the :"
"keyword:`for` statement is such a construct, while an example of a function "
"that takes an iterable is :func:`sum`::"
msgstr ""
"ما می گوییم چنین شی ای :term:`iterable` است، یعنی به عنوان یک هدف برای توابع "
"و ساختارهایی که انتظار چیزی را دارند که می توانند موارد متوالی را از آن به "
"دست آورند تا زمانی که عرضه تمام شود، مناسب است.  ما دیدیم که دستور :keyword:"
"`for` چنین ساختاری است، در حالی که نمونه ای از تابعی که یک تکرار پذیر می "
"گیرد :func:`sum`::"

#: ../../tutorial/controlflow.rst:157
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"arguments.  In chapter :ref:`tut-structures`, we will discuss in more detail "
"about :func:`list`."
msgstr ""
"بعداً توابع بیشتری را خواهیم دید که تکرارپذیرها را برمی‌گردانند و تکرارپذیرها "
"را به عنوان آرگومان می‌گیرند.  در فصل :ref:`tut-structures`، با جزئیات بیشتری "
"در مورد :func:`list` بحث خواهیم کرد."

#: ../../tutorial/controlflow.rst:164
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""

#: ../../tutorial/controlflow.rst:166
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""

#: ../../tutorial/controlflow.rst:169
msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the "
"loop terminates through exhaustion of the iterable (with :keyword:`for`) or "
"when the condition becomes false (with :keyword:`while`), but not when the "
"loop is terminated by a :keyword:`break` statement.  This is exemplified by "
"the following loop, which searches for prime numbers::"
msgstr ""

#: ../../tutorial/controlflow.rst:193
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""

#: ../../tutorial/controlflow.rst:196
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of :"
"keyword:`if` statements: a :keyword:`try` statement's ``else`` clause runs "
"when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""

#: ../../tutorial/controlflow.rst:203
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""

#: ../../tutorial/controlflow.rst:224
msgid ":keyword:`!pass` Statements"
msgstr "بیانیه های :keyword:`!pass`"

#: ../../tutorial/controlflow.rst:226
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"دستور :keyword:`pass` هیچ کاری انجام نمی دهد. زمانی می توان از آن استفاده "
"کرد که یک دستور به صورت نحوی مورد نیاز باشد اما برنامه نیازی به هیچ اقدامی "
"نداشته باشد. به عنوان مثال::"

#: ../../tutorial/controlflow.rst:233
msgid "This is commonly used for creating minimal classes::"
msgstr "این معمولا برای ایجاد کلاس های حداقل استفاده می شود:"

#: ../../tutorial/controlflow.rst:239
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"مکان دیگری که می‌توان از :keyword:`pass` استفاده کرد، به‌عنوان نگه‌دارنده مکان "
"برای یک تابع یا بدنه شرطی در هنگام کار بر روی کد جدید است که به شما امکان "
"می‌دهد در سطح انتزاعی‌تری فکر کنید.  :keyword:`!pass` بی سر و صدا نادیده گرفته "
"می شود::"

#: ../../tutorial/controlflow.rst:251
msgid ":keyword:`!match` Statements"
msgstr ":keyword:`!match` دستورات"

#: ../../tutorial/controlflow.rst:253
msgid ""
"A :keyword:`match` statement takes an expression and compares its value to "
"successive patterns given as one or more case blocks.  This is superficially "
"similar to a switch statement in C, Java or JavaScript (and many other "
"languages), but it's more similar to pattern matching in languages like Rust "
"or Haskell. Only the first pattern that matches gets executed and it can "
"also extract components (sequence elements or object attributes) from the "
"value into variables."
msgstr ""
"یک دستور :keyword:`match` یک عبارت را می گیرد و مقدار آن را با الگوهای "
"متوالی مقایسه می کند که به صورت یک یا چند بلوک case ارائه شده اند. این به "
"طور سطحی شبیه به یک دستور switch در زبان های C، Java یا JavaScript (و بسیاری "
"زبان های دیگر) است، اما بیشتر شبیه به تطابق الگو در زبان هایی مانند Rust یا "
"Haskell است. فقط اولین الگویی که مطابقت دارد اجرا می شود و همچنین می تواند "
"اجزا (عناصر دنباله یا ویژگی های شیء) را از مقدار درون متغیرها استخراج کند."

#: ../../tutorial/controlflow.rst:261
msgid ""
"The simplest form compares a subject value against one or more literals::"
msgstr ""
"ساده ترین شکل، یک مقدار موضوع را با یک یا چند مقدار ثابت مقایسه می کند::"

#: ../../tutorial/controlflow.rst:274
msgid ""
"Note the last block: the \"variable name\" ``_`` acts as a *wildcard* and "
"never fails to match. If no case matches, none of the branches is executed."
msgstr ""
"توجه داشته باشید که در آخرین بلوک: \"نام متغیر\" ``_`` به عنوان یک "
"*wildcard* عمل می کند و هرگز در تطابق شکست نمی خورد. اگر هیچ موردی مطابقت "
"نداشته باشد، هیچ کدام از شاخه ها اجرا نمی شوند."

#: ../../tutorial/controlflow.rst:277
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr ""
"با استفاده از ``|`` (\"یا\") می توانید چندین کلمه را در یک الگو ترکیب کنید:"

#: ../../tutorial/controlflow.rst:282
msgid ""
"Patterns can look like unpacking assignments, and can be used to bind "
"variables::"
msgstr ""
"الگوها می توانند شبیه به تخصیص های باز کردن باشند و می توانند برای بستن "
"متغیرها استفاده شوند::"

#: ../../tutorial/controlflow.rst:298
msgid ""
"Study that one carefully!  The first pattern has two literals, and can be "
"thought of as an extension of the literal pattern shown above.  But the next "
"two patterns combine a literal and a variable, and the variable *binds* a "
"value from the subject (``point``).  The fourth pattern captures two values, "
"which makes it conceptually similar to the unpacking assignment ``(x, y) = "
"point``."
msgstr ""
"به دقت این را مطالعه کنید! الگوی اول دو مقدار ثابت دارد و می توان آن را به "
"عنوان یک گسترش از الگوی مقدار ثابت نشان داده شده در بالا در نظر گرفت. اما، "
"دو الگوی بعدی یک مقدار ثابت و یک متغیر را ترکیب می کنند و متغیر *binds* یک "
"مقدار از موضوع (``point``) را می گیرد. الگوی چهارم دو مقدار را ضبط می کند که "
"این باعث می شود از نظر مفهومی به تخصیص بازکردن ``(x, y) = point`` شبیه باشد."

#: ../../tutorial/controlflow.rst:305
msgid ""
"If you are using classes to structure your data you can use the class name "
"followed by an argument list resembling a constructor, but with the ability "
"to capture attributes into variables::"
msgstr ""
"اگر از کلاس ها برای ساختاردهی داده ها استفاده می کنید، می توانید از نام کلاس "
"به همراه یک لیست از آرگومان ها استفاده کنید که شبیه به یک سازنده عمل می کند، "
"اما با این قابلیت که ویژگی ها را در متغیرها ذخیره کنید::"

#: ../../tutorial/controlflow.rst:326
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"می‌توانید از پارامترهای موقعیتی با برخی کلاس‌های داخلی استفاده کنید که ترتیبی "
"برای ویژگی‌های آن‌ها ارائه می‌کنند (مانند کلاس‌های داده). همچنین می توانید با "
"تنظیم ویژگی خاص ``__match_args__`` در کلاس های خود، یک موقعیت خاص برای ویژگی "
"ها در الگوها تعریف کنید. اگر روی (\"x\", \"y\" تنظیم شده باشد), الگوهای زیر "
"همگی معادل هستند (و همه ویژگی ``y`` را به متغیر ``var`` متصل می کنند):"

#: ../../tutorial/controlflow.rst:337
msgid ""
"A recommended way to read patterns is to look at them as an extended form of "
"what you would put on the left of an assignment, to understand which "
"variables would be set to what. Only the standalone names (like ``var`` "
"above) are assigned to by a match statement. Dotted names (like ``foo."
"bar``), attribute names (the ``x=`` and ``y=`` above) or class names "
"(recognized by the \"(...)\" next to them like ``Point`` above) are never "
"assigned to."
msgstr ""
"روش توصیه شده برای خواندن الگوها این است که به آنها به عنوان شکلی گسترش "
"یافته از چیزی که در سمت چپ یک تخصیص قرار می دهید نگاه کنید، تا بفهمید کدام "
"متغیرها به چه چیزی تنظیم می شوند. تنها نام های مستقل (مثل ``var`` بالا) توسط "
"یک عبارت match تخصیص داده می شوند. نام های نقطه دار (مثل ``foo.bar``)، نام "
"های ویژگی (``x=`` و ``y=`` بالا) یا نام های کلاس (که با \"(...)\" کنارشان "
"شناخته می شوند مثل ``Point`` بالا) هرگز تخصیص داده نمی شوند."

#: ../../tutorial/controlflow.rst:344
msgid ""
"Patterns can be arbitrarily nested.  For example, if we have a short list of "
"points, we could match it like this::"
msgstr ""

#: ../../tutorial/controlflow.rst:359
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"ما می توانیم یک بند ``if`` به یک الگو اضافه کنیم که به عنوان \"گارد\" شناخته "
"می شود.  اگر گارد نادرست باشد، ``match`` بلاک کیس بعدی را امتحان می کند.  "
"توجه داشته باشید که گرفتن ارزش قبل از ارزیابی گارد اتفاق می افتد:"

#: ../../tutorial/controlflow.rst:369
msgid "Several other key features of this statement:"
msgstr "چند ویژگی  کلیدی دیگر این عبارت:"

#: ../../tutorial/controlflow.rst:371
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences.  An important exception is "
"that they don't match iterators or strings."
msgstr ""
"مانند تخصیص های بازکردن بسته، الگوهای تاپل و لیست دقیقا همان معنا را دارند و "
"در واقع با توالی های دلخواه تطابق دارند. یک استثنای مهم این است که آنها با "
"iteratorها یا رشته ها مطابقت ندارند."

#: ../../tutorial/controlflow.rst:375
msgid ""
"Sequence patterns support extended unpacking: ``[x, y, *rest]`` and ``(x, y, "
"*rest)`` work similar to unpacking assignments.  The name after ``*`` may "
"also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two items "
"without binding the remaining items."
msgstr ""
"الگوهای دنباله ای از باز کردن توسعه یافته پشتیبانی می کنند: ``[x, y, "
"*rest]`` و ``(x, y, *rest)`` به صورت مشابه با اختصاص باز کردن کار می کنند. "
"نام بعد از ``*`` ممکن است ``_`` باشد، بنابراین ``(x, y, *_)`` با دنباله ای "
"از حداقل دو آیتم مطابقت دارد بدون اینکه آیتم ها ی باقی مانده را متصل کند."

#: ../../tutorial/controlflow.rst:380
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dictionary.  Unlike "
"sequence patterns, extra keys are ignored.  An unpacking like ``**rest`` is "
"also supported.  (But ``**_`` would be redundant, so it is not allowed.)"
msgstr ""
"الگوهای نگاشت: ``{\"bandwidth\": b, \"latency\": l}`` مقادیر "
"``\"bandwidth\"`` و ``\"latency\"`` را از یک دیکشنری استخراج می کند. بر خلاف "
"الگوهای دنباله ای، کلیدهای اضافی نادیده گرفته می شوند. مشابه ``**rest`` نیز "
"پشتیبانی می شود. (اما ``**_`` زائد خواهد بود، بنابراین مجاز نیست.)"

#: ../../tutorial/controlflow.rst:385
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "الگوهای فرعی ممکن است با استفاده از کلمه کلیدی ``as`` ثبت شوند:"

#: ../../tutorial/controlflow.rst:389
msgid ""
"will capture the second element of the input as ``p2`` (as long as the input "
"is a sequence of two points)"
msgstr ""
"عنصر دوم ورودی را به عنوان ``p2`` در نظر می گیرد (تا زمانی که ورودی یک "
"دنباله از دو نقطه باشد)"

#: ../../tutorial/controlflow.rst:392
msgid ""
"Most literals are compared by equality, however the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"بیشتر لیترال ها بر اساس برابری مقایسه می شوند، اما تک تایی ها ``True``، "
"``False`` و ``None`` بر اساس هویت مقایسه می شوند."

#: ../../tutorial/controlflow.rst:395
msgid ""
"Patterns may use named constants.  These must be dotted names to prevent "
"them from being interpreted as capture variable::"
msgstr ""
"الگوها ممکن است از ثابت های نام گذاری شده استفاده کنند. این ها باید به صورت "
"نام های نقطه دار باشند تا از تفسیر آن ها به عنوان متغیر قابل ضبط جلوگیری "
"شود::"

#: ../../tutorial/controlflow.rst:414
msgid ""
"For a more detailed explanation and additional examples, you can look into :"
"pep:`636` which is written in a tutorial format."
msgstr ""
"برای توضیح بیشتر و مثال های اضافی، می توانید به :pep:`636` که به صورت یک "
"آموزش نوشته شده است، مراجعه کنید."

#: ../../tutorial/controlflow.rst:420
msgid "Defining Functions"
msgstr "تعریف توابع"

#: ../../tutorial/controlflow.rst:422
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"ما می توانیم تابعی ایجاد کنیم که سری فیبوناچی را روی یک مرز دلخواه بنویسد:"

#: ../../tutorial/controlflow.rst:442
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"کلمه کلیدی :keyword:`def` یک تابع *definition* را معرفی می کند.  پس از آن "
"باید نام تابع و لیست پارامترهای رسمی پرانتز شده باشد. عباراتی که بدنه تابع "
"را تشکیل می دهند از خط بعدی شروع می شوند و باید تورفتگی داشته باشند."

#: ../../tutorial/controlflow.rst:447
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"اولین دستور بدن تابع به صورت اختیاری می تواند یک رشته واقعی باشد. این رشته "
"تحت اللفظی رشته مستندات تابع یا :dfn:`docstring` است. (اطلاعات بیشتر در مورد "
"رشته‌های اسناد را می‌توانید در بخش :ref:`tut-docstrings` بیابید.) ابزارهایی "
"وجود دارند که از رشته‌های اسنادی برای تولید خودکار اسناد آنلاین یا چاپی "
"استفاده می‌کنند، یا به کاربر اجازه می‌دهند به صورت تعاملی کد را مرور کنند. این "
"تمرین خوبی است که رشته‌های docstrings را در کدهایی که می‌نویسید قرار دهید، "
"بنابراین عادت کنید."

#: ../../tutorial/controlflow.rst:454
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"*execution* یک تابع یک جدول نماد جدید را معرفی می کند که برای متغیرهای محلی "
"تابع استفاده می شود.  به‌طور دقیق‌تر، همه تخصیص‌های متغیر در یک تابع، مقدار را "
"در جدول نمادهای محلی ذخیره می‌کنند. در حالی که مراجع متغیر ابتدا در جدول "
"نمادهای محلی، سپس در جداول نمادهای محلی توابع محصور، سپس در جدول نمادهای "
"سراسری، و در نهایت در جدول نام‌های داخلی نگاه می‌کنند. بنابراین، متغیرهای "
"سراسری و متغیرهای توابع محصور را نمی‌توان مستقیماً یک مقدار در یک تابع اختصاص "
"داد (مگر اینکه برای متغیرهای سراسری, نام‌گذاری شده در یک دستور :keyword:"
"`global`, یا برای متغیرهای توابع محصور, در یک عبارت :keyword:`nonlocal` "
"نامگذاری شده باشد), اگرچه ممکن است به آنها ارجاع داده شود."

#: ../../tutorial/controlflow.rst:465
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, or calls itself recursively, a new local symbol table is "
"created for that call."
msgstr ""
"هنگام فراخوانی تابع فراخوانی، پارامترهای واقعی (آگومان ها) در جدول نمادهای "
"محلی تابع فراخوانی شده معرفی می شوند. بنابراین، آرگومان ها با استفاده از "
"*call by value* ارسال می شوند (که در آن *value* همیشه یک شی *reference* است, "
"نه مقدار شی). [#]_ وقتی یک تابع تابع دیگری را فراخوانی می کند، یا خود را به "
"صورت بازگشتی فرا می خواند، یک جدول نماد محلی جدید برای آن فراخوانی ایجاد می "
"شود."

#: ../../tutorial/controlflow.rst:472
msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"یک تعریف تابع نام تابع را با شی تابع در جدول نماد فعلی مرتبط می کند.  مفسر "
"شی مورد اشاره با آن نام را به عنوان یک تابع تعریف شده توسط کاربر تشخیص می "
"دهد.  نام های دیگر نیز می توانند به همان شی تابع اشاره کنند و همچنین می "
"توانند برای دسترسی به تابع استفاده شوند:"

#: ../../tutorial/controlflow.rst:483
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"از زبان های دیگر، ممکن است اعتراض کنید که ``fib`` یک تابع نیست بلکه یک رویه "
"است زیرا مقداری را بر نمی گرداند.  در واقع، حتی توابع بدون دستور :keyword:"
"`return`، مقداری را برمی‌گردانند، البته نسبتاً خسته کننده.  این مقدار ``None`` "
"نامیده می شود (این یک نام داخلی است).  نوشتن مقدار ``None`` معمولاً توسط مفسر "
"سرکوب می شود اگر تنها مقدار نوشته شده باشد. اگر واقعاً می خواهید از :func:"
"`print` استفاده کنید، می توانید آن را ببینید::"

#: ../../tutorial/controlflow.rst:494
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"نوشتن تابعی که لیستی از اعداد سری فیبوناچی را برمی گرداند، به جای چاپ کردن، "
"ساده است:"

#: ../../tutorial/controlflow.rst:510
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "این مثال، طبق معمول، برخی از ویژگی های جدید پایتون را نشان می دهد:"

#: ../../tutorial/controlflow.rst:512
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"دستور :keyword:`return` با مقداری از یک تابع برمی گردد. :keyword:`!return` "
"بدون آرگومان عبارت ``None`` را برمی گرداند. افتادن انتهای یک تابع نیز "
"``None`` را برمی گرداند."

#: ../../tutorial/controlflow.rst:516
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`append` shown in the example is defined "
"for list objects; it adds a new element at the end of the list.  In this "
"example it is equivalent to ``result = result + [a]``, but more efficient."
msgstr ""

#: ../../tutorial/controlflow.rst:531
msgid "More on Defining Functions"
msgstr "بیشتر در مورد تعریف توابع"

#: ../../tutorial/controlflow.rst:533
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"همچنین امکان تعریف توابع با تعداد متغیر آرگومان وجود دارد. سه شکل وجود دارد "
"که می توان آنها را با هم ترکیب کرد."

#: ../../tutorial/controlflow.rst:540
msgid "Default Argument Values"
msgstr "مقادیر آرگومان پیش فرض"

#: ../../tutorial/controlflow.rst:542
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"مفیدترین شکل، تعیین یک مقدار پیش فرض برای یک یا چند آرگومان است. این تابعی "
"را ایجاد می‌کند که می‌توان آن را با آرگومان‌های کمتری فراخوانی کرد.  به عنوان "
"مثال::"

#: ../../tutorial/controlflow.rst:558
msgid "This function can be called in several ways:"
msgstr "این تابع را می توان به چند روش فراخوانی کرد:"

#: ../../tutorial/controlflow.rst:560
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"فقط آرگومان اجباری را ارائه می دهد: ``ask_ok('Do you really want to quit?')``"

#: ../../tutorial/controlflow.rst:562
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"ارائه یکی از آرگومان های اختیاری: ``ask_ok('OK to overwrite the file?', 2)``"

#: ../../tutorial/controlflow.rst:564
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"یا حتی ارائه تمام آرگومان ها: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"

#: ../../tutorial/controlflow.rst:567
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"این مثال همچنین کلمه کلیدی :keyword:`in` را معرفی می کند. این آزمایش می کند "
"که آیا یک دنباله دارای مقدار خاصی است یا خیر."

#: ../../tutorial/controlflow.rst:570
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"مقادیر پیش فرض در نقطه تعریف تابع در محدوده *defining* ارزیابی می شوند، به "
"طوری که::"

#: ../../tutorial/controlflow.rst:581
msgid "will print ``5``."
msgstr "``5`` را چاپ خواهد کرد."

#: ../../tutorial/controlflow.rst:583
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Important warning:** مقدار پیش فرض فقط یک بار ارزیابی می شود. زمانی که "
"پیش‌فرض یک شیء قابل تغییر مانند فهرست، فرهنگ لغت یا نمونه‌های بیشتر کلاس‌ها "
"باشد، این تفاوت ایجاد می‌کند.  به عنوان مثال، تابع زیر آرگومان های ارسال شده "
"به آن را در فراخوانی های بعدی جمع می کند:"

#: ../../tutorial/controlflow.rst:596
msgid "This will print ::"
msgstr "این چاپ خواهد شد::"

#: ../../tutorial/controlflow.rst:602
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"اگر نمی‌خواهید پیش‌فرض بین تماس‌های بعدی به اشتراک گذاشته شود، می‌توانید تابع را "
"به این صورت بنویسید:"

#: ../../tutorial/controlflow.rst:615
msgid "Keyword Arguments"
msgstr "آرگومان های کلیدواژه"

#: ../../tutorial/controlflow.rst:617
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"همچنین می توان توابع را با استفاده از :term:`keyword arguments <keyword "
"argument>` از فرم ``kwarg=value`` فراخوانی کرد.  به عنوان مثال، تابع زیر:"

#: ../../tutorial/controlflow.rst:626
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"یک آرگومان مورد نیاز (``voltage``) و سه آرگومان اختیاری (``state``, "
"``action`` و ``type``) را می پذیرد.  این تابع را می توان به یکی از روش های "
"زیر فراخوانی کرد:"

#: ../../tutorial/controlflow.rst:637
msgid "but all the following calls would be invalid::"
msgstr "اما همه تماس های زیر نامعتبر خواهد بود:"

#: ../../tutorial/controlflow.rst:644
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"در فراخوانی تابع، آرگومان های کلیدواژه باید از آرگومان های موقعیتی پیروی "
"کنند. همه آرگومان های کلمه کلیدی ارسال شده باید با یکی از آرگومان های "
"پذیرفته شده توسط تابع مطابقت داشته باشند (مثلاً ``actor`` یک آرگومان معتبر "
"برای تابع ``parrot`` نیست) و ترتیب آنها مهم نیست.  این شامل آرگومان های غیر "
"اختیاری نیز می شود (مثلاً ``parrot(voltage=1000)`` نیز معتبر است). هیچ "
"آرگومانی ممکن است بیش از یک بار مقدار دریافت کند. در اینجا یک مثال وجود دارد "
"که به دلیل این محدودیت ناموفق است:"

#: ../../tutorial/controlflow.rst:660
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"هنگامی که یک پارامتر رسمی نهایی از فرم ``**name`` وجود دارد، یک فرهنگ لغت "
"دریافت می کند (به :ref:`typesmapping` مراجعه کنید) که شامل همه آرگومان های "
"کلیدواژه به جز آنهایی است که با یک پارامتر رسمی مطابقت دارند.  این ممکن است "
"با یک پارامتر رسمی از فرم ``*name`` (شرح شده در زیربخش بعدی) ترکیب شود که "
"یک :ref:`tuple <tut-tuples>` حاوی آرگومان های موقعیتی فراتر از لیست "
"پارامترهای رسمی را دریافت می کند.  (``*name`` باید قبل از ``**name`` رخ "
"دهد.) برای مثال، اگر تابعی را به این صورت تعریف کنیم:"

#: ../../tutorial/controlflow.rst:677
msgid "It could be called like this::"
msgstr "می توان آن را اینگونه نامید:"

#: ../../tutorial/controlflow.rst:685
msgid "and of course it would print:"
msgstr "و البته چاپ می کرد:"

#: ../../tutorial/controlflow.rst:698
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"توجه داشته باشید که ترتیب چاپ آرگومان‌های کلیدواژه با ترتیبی که در فراخوانی "
"تابع ارائه شده‌اند مطابقت دارد."

#: ../../tutorial/controlflow.rst:702
msgid "Special parameters"
msgstr "پارامترهای خاص"

#: ../../tutorial/controlflow.rst:704
msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to "
"restrict the way arguments can be passed so that a developer need only look "
"at the function definition to determine if items are passed by position, by "
"position or keyword, or by keyword."
msgstr ""
"به‌طور پیش‌فرض، آرگومان‌ها ممکن است به یک تابع پایتون بر اساس موقعیت یا صریحاً "
"با کلمه کلیدی ارسال شوند. برای خوانایی و عملکرد، منطقی است که روش ارسال "
"آرگومان‌ها را محدود کنیم، به طوری که یک توسعه‌دهنده فقط باید به تعریف تابع "
"نگاه کند تا تعیین کند آیا موارد بر اساس موقعیت، موقعیت یا کلمه کلیدی یا "
"کلیدواژه ارسال می‌شوند."

#: ../../tutorial/controlflow.rst:710
msgid "A function definition may look like:"
msgstr "یک تعریف تابع ممکن است به صورت زیر باشد:"

#: ../../tutorial/controlflow.rst:721
msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind "
"of parameter by how the arguments may be passed to the function: positional-"
"only, positional-or-keyword, and keyword-only. Keyword parameters are also "
"referred to as named parameters."
msgstr ""
"که در آن ``/`` و ``*`` اختیاری هستند. در صورت استفاده، این نمادها نوع "
"پارامتر را با نحوه ارسال آرگومان ها به تابع نشان می دهند: فقط موقعیتی، کلمه "
"کلیدی موقعیتی و فقط کلمه کلیدی. به پارامترهای کلیدواژه به عنوان پارامترهای "
"نامگذاری شده نیز گفته می شود."

#: ../../tutorial/controlflow.rst:728
msgid "Positional-or-Keyword Arguments"
msgstr "آرگومان های موقعیت یا کلیدواژه"

#: ../../tutorial/controlflow.rst:730
msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may "
"be passed to a function by position or by keyword."
msgstr ""
"اگر ``/`` و ``*`` در تعریف تابع وجود نداشته باشند، ممکن است آرگومان ها بر "
"اساس موقعیت یا کلیدواژه به یک تابع ارسال شوند."

#: ../../tutorial/controlflow.rst:735
msgid "Positional-Only Parameters"
msgstr "پارامترهای فقط موقعیت"

#: ../../tutorial/controlflow.rst:737
msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order "
"matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""
"با نگاهی جزئی تر به این موضوع، می توان پارامترهای خاصی را به عنوان "
"*positional-only* علامت گذاری کرد. اگر *positional-only*، ترتیب پارامترها "
"مهم است و پارامترها نمی توانند با کلمه کلیدی منتقل شوند. پارامترهای فقط "
"موقعیتی قبل از یک ``/`` قرار می‌گیرند (میز به جلو). ``/`` برای جداسازی منطقی "
"پارامترهای فقط موقعیتی از بقیه پارامترها استفاده می شود. اگر ``/`` در تعریف "
"تابع وجود نداشته باشد، هیچ پارامتر فقط موقعیتی وجود ندارد."

#: ../../tutorial/controlflow.rst:745
msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""
"پارامترهای پس از ``/`` ممکن است *positional-or-keyword* یا *keyword-only* "
"باشند."

#: ../../tutorial/controlflow.rst:749
msgid "Keyword-Only Arguments"
msgstr "آرگومان های فقط کلمه کلیدی"

#: ../../tutorial/controlflow.rst:751
msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before "
"the first *keyword-only* parameter."
msgstr ""
"برای علامت گذاری پارامترها به عنوان *keyword-only*، که نشان می دهد پارامترها "
"باید توسط آرگومان کلمه کلیدی ارسال شوند، یک ``*`` را در لیست آرگومان ها درست "
"قبل از اولین پارامتر *keyword-only* قرار دهید."

#: ../../tutorial/controlflow.rst:757
msgid "Function Examples"
msgstr "نمونه های تابع"

#: ../../tutorial/controlflow.rst:759
msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""
"تعاریف تابع مثال زیر را با توجه دقیق به نشانگرهای ``/`` و ``*`` در نظر "
"بگیرید:"

#: ../../tutorial/controlflow.rst:775
msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed "
"by position or keyword::"
msgstr ""
"اولین تعریف تابع، ``standard_arg``، آشناترین شکل، هیچ محدودیتی برای قرارداد "
"فراخوانی قائل نیست و آرگومان ها ممکن است با موقعیت یا کلیدواژه منتقل شوند:"

#: ../../tutorial/controlflow.rst:785
msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""
"تابع دوم ``pos_only_arg`` فقط به استفاده از پارامترهای موقعیتی محدود شده است "
"زیرا یک ``/`` در تعریف تابع وجود دارد::"

#: ../../tutorial/controlflow.rst:796
msgid ""
"The third function ``kwd_only_args`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""

#: ../../tutorial/controlflow.rst:807
msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr "و آخرین از هر سه قرارداد فراخوانی در یک تعریف تابع استفاده می کند:"

#: ../../tutorial/controlflow.rst:827
msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""
"در نهایت، این تعریف تابع را در نظر بگیرید که دارای برخورد بالقوه بین آرگومان "
"موقعیتی ``name`` و ``**kwds`` است که دارای ``name`` به عنوان یک کلید است:"

#: ../../tutorial/controlflow.rst:832
msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""
"هیچ فراخوانی ممکنی وجود ندارد که باعث شود ``True`` برگردد زیرا کلمه کلیدی "
"``'name'`` همیشه به پارامتر اول متصل می شود. به عنوان مثال::"

#: ../../tutorial/controlflow.rst:841
msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""
"اما با استفاده از ``/`` (فقط آرگومان های موقعیتی), این امکان وجود دارد زیرا "
"به ``name`` به عنوان آرگومان موقعیتی و ``'name'`` به عنوان یک کلید در "
"آرگومان های کلیدواژه اجازه می دهد:"

#: ../../tutorial/controlflow.rst:848
msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""
"به عبارت دیگر، نام پارامترهای فقط موقعیتی را می توان در ``**kwds`` بدون "
"ابهام استفاده کرد."

#: ../../tutorial/controlflow.rst:853
msgid "Recap"
msgstr "خلاصه"

#: ../../tutorial/controlflow.rst:855
msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""
"مورد استفاده تعیین می کند که از کدام پارامترها در تعریف تابع استفاده شود:"

#: ../../tutorial/controlflow.rst:859
msgid "As guidance:"
msgstr "به عنوان راهنمایی:"

#: ../../tutorial/controlflow.rst:861
msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function "
"is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""
"اگر می‌خواهید نام پارامترها در دسترس کاربر نباشد، فقط از موقعیتی استفاده "
"کنید. این زمانی مفید است که نام پارامترها معنای واقعی نداشته باشند، اگر "
"می‌خواهید ترتیب آرگومان‌ها را هنگام فراخوانی تابع اعمال کنید یا اگر نیاز به "
"گرفتن برخی از پارامترهای موقعیتی و کلمات کلیدی دلخواه دارید."

#: ../../tutorial/controlflow.rst:866
msgid ""
"Use keyword-only when names have meaning and the function definition is more "
"understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""
"زمانی از کلمه کلیدی استفاده کنید که نام‌ها معنی داشته باشند و تعریف تابع با "
"صریح بودن نام‌ها قابل درک‌تر باشد یا بخواهید از تکیه کاربران به موقعیت آرگومان "
"ارسالی جلوگیری کنید."

#: ../../tutorial/controlflow.rst:869
msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""
"برای یک API، از فقط موقعیتی استفاده کنید تا در صورت تغییر نام پارامتر در "
"آینده، از شکستن تغییرات API جلوگیری کنید."

#: ../../tutorial/controlflow.rst:875
msgid "Arbitrary Argument Lists"
msgstr "فهرست های استدلال دلخواه"

#: ../../tutorial/controlflow.rst:880
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"در نهایت، گزینه ای که کمتر مورد استفاده قرار می گیرد، تعیین این است که یک "
"تابع را می توان با تعداد دلخواه آرگومان فراخوانی کرد.  این آرگومان ها در یک "
"تاپل جمع می شوند (به :ref:`tut-tuples` مراجعه کنید).  قبل از تعداد متغیر "
"آرگومان ها، ممکن است آرگومان های عادی صفر یا بیشتر رخ دهند. ::"

#: ../../tutorial/controlflow.rst:889
msgid ""
"Normally, these *variadic* arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"به طور معمول، این آرگومان‌های *variadic* آخرین آرگومان‌های فهرست پارامترهای "
"رسمی خواهند بود، زیرا همه آرگومان‌های ورودی باقی‌مانده را که به تابع ارسال "
"می‌شوند، جمع‌آوری می‌کنند. هر پارامتر رسمی که بعد از پارامتر ``*args`` رخ می "
"دهد، آرگومان های \"فقط کلمه کلیدی\" هستند، به این معنی که آنها فقط می توانند "
"به عنوان کلمات کلیدی به جای آرگومان های موقعیتی استفاده شوند. ::"

#: ../../tutorial/controlflow.rst:906
msgid "Unpacking Argument Lists"
msgstr "باز کردن لیست های استدلال"

#: ../../tutorial/controlflow.rst:908
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"وضعیت معکوس زمانی اتفاق می‌افتد که آرگومان‌ها از قبل در یک لیست یا چند تایی "
"هستند، اما برای فراخوانی تابعی که نیاز به آرگومان‌های موقعیتی جداگانه دارد، "
"باید بسته‌بندی شوند.  به عنوان مثال، تابع داخلی :func:`range` آرگومان های "
"جداگانه *start* و *stop* را انتظار دارد.  اگر آنها به طور جداگانه در دسترس "
"نیستند، فراخوانی تابع را با عملگر ``*``\\ - بنویسید تا آرگومان ها از یک لیست "
"یا تاپل باز شوند::"

#: ../../tutorial/controlflow.rst:924
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""
"به همین ترتیب، دیکشنری ها می توانند آرگومان های کلمه کلیدی را با ``**``\\ -"
"operator::"

#: ../../tutorial/controlflow.rst:940
msgid "Lambda Expressions"
msgstr "عبارات لامبدا"

#: ../../tutorial/controlflow.rst:942
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"توابع ناشناس کوچک را می توان با کلمه کلیدی :keyword:`lambda` ایجاد کرد. این "
"تابع مجموع دو آرگومان خود را برمی گرداند: ``lambda a, b: a+b``. توابع لامبدا "
"را می توان در هر جایی که به اشیاء تابع مورد نیاز است استفاده کرد.  آنها از "
"نظر نحوی به یک عبارت محدود می شوند.  از نظر معنایی، آنها فقط قند نحوی برای "
"تعریف عملکرد عادی هستند.  مانند تعاریف توابع تو در تو، توابع لامبدا می "
"توانند به متغیرها از محدوده حاوی::"

#: ../../tutorial/controlflow.rst:959
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"مثال بالا از عبارت lambda برای برگرداندن یک تابع استفاده می کند.  استفاده "
"دیگر ارسال یک تابع کوچک به عنوان آرگومان است:"

#: ../../tutorial/controlflow.rst:971
msgid "Documentation Strings"
msgstr "رشته های مستندات"

#: ../../tutorial/controlflow.rst:978
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"در اینجا چند قرارداد در مورد محتوا و قالب بندی رشته های مستندات وجود دارد."

#: ../../tutorial/controlflow.rst:981
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"خط اول همیشه باید خلاصه ای کوتاه و مختصر از هدف شی باشد.  برای اختصار، نباید "
"به صراحت نام یا نوع شیء را بیان کند، زیرا این موارد با ابزارهای دیگری در "
"دسترس هستند (به جز اگر نام فعل توصیف کننده عملکرد یک تابع باشد).  این خط "
"باید با حرف بزرگ شروع شود و با نقطه پایان یابد."

#: ../../tutorial/controlflow.rst:987
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"اگر خطوط بیشتری در رشته مستندات وجود دارد، خط دوم باید خالی باشد و خلاصه را "
"از بقیه توضیحات جدا کند.  خطوط زیر باید یک یا چند پاراگراف باشد که "
"قراردادهای فراخوانی شیء، عوارض جانبی آن و غیره را توضیح دهد."

#: ../../tutorial/controlflow.rst:992
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"تجزیه‌کننده پایتون تورفتگی را از رشته‌های چند خطی در پایتون حذف نمی‌کند، "
"بنابراین ابزارهایی که مستندات را پردازش می‌کنند در صورت تمایل باید تورفتگی را "
"حذف کنند.  این کار با استفاده از قرارداد زیر انجام می شود. اولین خط غیر خالی "
"*after* اولین خط رشته مقدار تورفتگی را برای کل رشته مستندات تعیین می کند.  "
"(ما نمی‌توانیم از خط اول استفاده کنیم, زیرا معمولاً در مجاورت نقل قول‌های "
"ابتدایی رشته است, بنابراین تورفتگی آن در کلمه‌ی رشته مشخص نیست.) فضای سفید "
"«معادل» این تورفتگی از ابتدای تمام خطوط رشته حذف می‌شود.  خطوطی که تورفتگی "
"کمتری دارند، نباید رخ دهند، اما اگر رخ دهند، تمام فضای سفید اصلی آنها باید "
"حذف شود.  معادل سازی فضای خالی باید پس از گسترش زبانه ها (به طور معمول به 8 "
"فاصله) آزمایش شود."

#: ../../tutorial/controlflow.rst:1004
msgid "Here is an example of a multi-line docstring::"
msgstr "در اینجا یک نمونه از یک رشته مستند چند خطی آورده شده است:"

#: ../../tutorial/controlflow.rst:1022
msgid "Function Annotations"
msgstr "حاشیه نویسی تابع"

#: ../../tutorial/controlflow.rst:1030
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`Function annotations <function>` اطلاعات فراداده کاملاً اختیاری در مورد "
"انواع استفاده شده توسط توابع تعریف شده توسط کاربر است (برای اطلاعات بیشتر "
"به :pep:`3107` و :pep:`484` مراجعه کنید)."

#: ../../tutorial/controlflow.rst:1034
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:"
"`__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a required argument, an optional argument, and the return value annotated::"
msgstr ""

#: ../../tutorial/controlflow.rst:1056
msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: سبک کدنویسی"

#: ../../tutorial/controlflow.rst:1061
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"اکنون که می خواهید قطعات طولانی تر و پیچیده تری از پایتون بنویسید، زمان خوبی "
"است که در مورد *coding style* صحبت کنید.  اکثر زبان ها را می توان (یا "
"مختصرتر, *formatted*) به سبک های مختلف نوشت. برخی از آنها خواناتر از دیگران "
"هستند. آسان کردن خواندن کد شما برای دیگران همیشه یک ایده خوب است و اتخاذ یک "
"سبک کدنویسی خوب کمک بزرگی به آن می کند."

#: ../../tutorial/controlflow.rst:1067
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"برای پایتون، :pep:`8` به عنوان راهنمای سبکی ظاهر شده است که اکثر پروژه ها به "
"آن پایبند هستند. این یک سبک کدنویسی بسیار خوانا و چشم نواز را ترویج می کند.  "
"هر توسعه دهنده پایتون باید آن را در نقطه ای بخواند. در اینجا مهمترین نکات "
"استخراج شده برای شما آورده شده است:"

#: ../../tutorial/controlflow.rst:1072
msgid "Use 4-space indentation, and no tabs."
msgstr "از تورفتگی 4 فاصله و بدون زبانه استفاده کنید."

#: ../../tutorial/controlflow.rst:1074
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"4 فاصله بین تورفتگی کوچک (به عمق بیشتر لانه سازی اجازه می دهد) و فرورفتگی "
"بزرگ (خواندن آسان تر) خوب است.  برگه‌ها باعث سردرگمی می‌شوند و بهتر است کنار "
"گذاشته شوند."

#: ../../tutorial/controlflow.rst:1078
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "خطوط را طوری بپیچید که از 79 کاراکتر تجاوز نکنند."

#: ../../tutorial/controlflow.rst:1080
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"این به کاربران با نمایشگرهای کوچک کمک می کند و امکان داشتن چندین فایل کد را "
"در کنار هم در نمایشگرهای بزرگتر فراهم می کند."

#: ../../tutorial/controlflow.rst:1083
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"از خطوط خالی برای جدا کردن توابع و کلاس ها و بلوک های بزرگتر کد در داخل "
"توابع استفاده کنید."

#: ../../tutorial/controlflow.rst:1086
msgid "When possible, put comments on a line of their own."
msgstr "در صورت امکان، نظرات خود را در یک خط قرار دهید."

#: ../../tutorial/controlflow.rst:1088
msgid "Use docstrings."
msgstr "از Docstrings استفاده کنید."

#: ../../tutorial/controlflow.rst:1090
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"از فضاهای اطراف عملگرها و بعد از کاما استفاده کنید، اما نه مستقیماً در "
"ساختارهای براکت: ``a = f(1, 2) + g(3, 4)``."

#: ../../tutorial/controlflow.rst:1093
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"کلاس ها و توابع خود را به طور مداوم نام ببرید. قرارداد استفاده از "
"``UpperCamelCase`` برای کلاس ها و ``lowercase_with_underscores`` برای توابع "
"و متدها است.  همیشه از ``self`` به عنوان نام آرگومان متد اول استفاده کنید "
"(برای اطلاعات بیشتر در مورد کلاس ها و متدها به :ref:`tut-firstclasses` "
"مراجعه کنید)."

#: ../../tutorial/controlflow.rst:1098
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"اگر قرار است کد شما در محیط های بین المللی استفاده شود، از رمزگذاری های "
"فانتزی استفاده نکنید.  پیش‌فرض پایتون، UTF-8 یا حتی ASCII ساده در هر صورت "
"بهترین عملکرد را دارد."

#: ../../tutorial/controlflow.rst:1102
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"به همین ترتیب، اگر فقط کوچکترین احتمالی وجود دارد که افرادی که به زبان دیگری "
"صحبت می کنند، کد را بخوانند یا حفظ کنند، از کاراکترهای غیر ASCII در شناسه ها "
"استفاده نکنید."

#: ../../tutorial/controlflow.rst:1108
msgid "Footnotes"
msgstr "پاورقی ها"

#: ../../tutorial/controlflow.rst:1109
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"در واقع، *call by object reference* توصیف بهتری خواهد بود، زیرا اگر یک شیء "
"قابل تغییر ارسال شود، تماس گیرنده هر تغییری را که تماس گیرنده در آن ایجاد می "
"کند (موارد درج شده در یک لیست) مشاهده خواهد کرد."
