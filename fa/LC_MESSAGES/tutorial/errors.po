# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-28 15:41+0000\n"
"PO-Revision-Date: 2023-05-24 02:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Persian (https://app.transifex.com/python-doc/teams/5390/"
"fa/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fa\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/errors.rst:5
msgid "Errors and Exceptions"
msgstr "Errors and Exceptions"

#: ../../tutorial/errors.rst:7
msgid ""
"Until now error messages haven't been more than mentioned, but if you have "
"tried out the examples you have probably seen some.  There are (at least) "
"two distinguishable kinds of errors: *syntax errors* and *exceptions*."
msgstr ""
"تاکنون پیام های خطا بیش از آنچه که ذکر شد نبوده اند، اما اگر مثال ها را "
"امتحان کرده باشید احتمالاً برخی از آن ها را دیده اید. حداقل دو نوع اشتباه "
"قابل تمایز وجود دارد: *syntax errors* و *exceptions*."

#: ../../tutorial/errors.rst:15
msgid "Syntax Errors"
msgstr "خطاهای نحوی"

#: ../../tutorial/errors.rst:17
msgid ""
"Syntax errors, also known as parsing errors, are perhaps the most common "
"kind of complaint you get while you are still learning Python::"
msgstr ""
"خطاهای نحوی، که به عنوان خطاهای تجزیه نیز شناخته می شوند، شاید رایج ترین نوع "
"شکایتی هستند که هنگام یادگیری پایتون دریافت می کنید::"

#: ../../tutorial/errors.rst:26
msgid ""
"The parser repeats the offending line and displays little 'arrow's pointing "
"at the token in the line where the error was detected.  The error may be "
"caused by the absence of a token *before* the indicated token.  In the "
"example, the error is detected at the function :func:`print`, since a colon "
"(``':'``) is missing before it.  File name and line number are printed so "
"you know where to look in case the input came from a script."
msgstr ""

#: ../../tutorial/errors.rst:37
msgid "Exceptions"
msgstr "استثناء ها"

#: ../../tutorial/errors.rst:39
msgid ""
"Even if a statement or expression is syntactically correct, it may cause an "
"error when an attempt is made to execute it. Errors detected during "
"execution are called *exceptions* and are not unconditionally fatal: you "
"will soon learn how to handle them in Python programs.  Most exceptions are "
"not handled by programs, however, and result in error messages as shown "
"here::"
msgstr ""
"حتی اگر یک دستور یا عبارت از نظر نحوی درست باشد، ممکن است هنگام تلاش برای "
"اجرای آن باعث خطا شود. خطاهایی که در حین اجرا شناسایی می شوند به نام "
"*exceptions* شناخته می شوند و کشنده بی شرط نیستند: به زودی یاد خواهید گرفت "
"که چگونه آنها را در برنامه های Python مدیریت کنید. با این حال، بیشتر "
"استثناها توسط برنامه ها مدیریت نمی شوند و منجر به پیام های خطا می شوند "
"همانطور که اینجا نمایش داده شده است::"

#: ../../tutorial/errors.rst:58
msgid ""
"The last line of the error message indicates what happened. Exceptions come "
"in different types, and the type is printed as part of the message: the "
"types in the example are :exc:`ZeroDivisionError`, :exc:`NameError` and :exc:"
"`TypeError`. The string printed as the exception type is the name of the "
"built-in exception that occurred.  This is true for all built-in exceptions, "
"but need not be true for user-defined exceptions (although it is a useful "
"convention). Standard exception names are built-in identifiers (not reserved "
"keywords)."
msgstr ""
"آخرین خط از پیام خطا نشان می دهد که چه اتفاقی افتاده است. استثناها دارای "
"انواع مختلفی هستند و نوع آنها به عنوان بخشی از پیام چاپ می شود: انواع موجود "
"در مثال عبارتند از :exc:`ZeroDivisionError`، :exc:`NameError` و :exc:"
"`TypeError`. رشته ای که به عنوان نوع استثنا چاپ می شود، نام استثنای داخلی "
"است که رخ داده است. این موضوع برای تمام استثناهای داخلی صدق می کند، اما برای "
"استثناهای تعریف شده توسط کاربر لزوماً صحیح نیست (اگرچه این یک قرارداد مفید "
"است). نام های استثنای استاندارد شناسه های داخلی هستند (نه کلمات کلیدی رزرو "
"شده)."

#: ../../tutorial/errors.rst:66
msgid ""
"The rest of the line provides detail based on the type of exception and what "
"caused it."
msgstr ""
"بقیه خط بر اساس نوع استثنا و چیزی که باعث آن شده است، جزئیات ارائه می دهد."

#: ../../tutorial/errors.rst:69
msgid ""
"The preceding part of the error message shows the context where the "
"exception occurred, in the form of a stack traceback. In general it contains "
"a stack traceback listing source lines; however, it will not display lines "
"read from standard input."
msgstr ""
"قسمت قبلی پیام خطا، زمینه ای را که استثناء رخ داده است، به صورت یک traceback "
"پشته نشان می دهد. به طور کلی، این بخش شامل یک traceback پشته با خطوط منبع "
"است؛ با این حال، خطوطی که از ورودی استاندارد خوانده شده اند را نمایش نمی دهد."

#: ../../tutorial/errors.rst:74
msgid ""
":ref:`bltin-exceptions` lists the built-in exceptions and their meanings."
msgstr ""
":ref:`bltin-exceptions` لیستی از استثناهای داخلی و معانی آن ها را ارائه می "
"دهد."

#: ../../tutorial/errors.rst:80
msgid "Handling Exceptions"
msgstr "مدیریت استثناها"

#: ../../tutorial/errors.rst:82
msgid ""
"It is possible to write programs that handle selected exceptions. Look at "
"the following example, which asks the user for input until a valid integer "
"has been entered, but allows the user to interrupt the program (using :kbd:"
"`Control-C` or whatever the operating system supports); note that a user-"
"generated interruption is signalled by raising the :exc:`KeyboardInterrupt` "
"exception. ::"
msgstr ""
"این امکان وجود دارد که برنامه هایی بنویسیم که استثناهای انتخاب شده را مدیریت "
"کنند. به مثال زیر نگاه کنید که از کاربر می خواهد تا زمانی که یک عدد صحیح "
"معتبر وارد نکرده است، ورودی بدهد، اما به کاربر اجازه می دهد تا برنامه را قطع "
"کند (با استفاده از :kbd:`Control-C` یا هرچی که سیستم عامل پشتیبانی می کند)؛ "
"توجه کنید که یک وقفه ایجاد شده توسط کاربر با افزایش استثنای :exc:"
"`KeyboardInterrupt` اعلام می شود. ::"

#: ../../tutorial/errors.rst:96
msgid "The :keyword:`try` statement works as follows."
msgstr "بیانیه :keyword:`try` به صورت زیر کار می کند."

#: ../../tutorial/errors.rst:98
msgid ""
"First, the *try clause* (the statement(s) between the :keyword:`try` and :"
"keyword:`except` keywords) is executed."
msgstr ""
"ابتدا، *try clause* (عبارتی که بین کلیدواژه های :keyword:`try` و :keyword:"
"`except` قرار دارد) اجرا می شود."

#: ../../tutorial/errors.rst:101
msgid ""
"If no exception occurs, the *except clause* is skipped and execution of the :"
"keyword:`try` statement is finished."
msgstr ""
"اگر هیچ استثنایی رخ ندهد، *except clause* نادیده گرفته می شود و اجرای دستور :"
"keyword:`try` به پایان می رسد."

#: ../../tutorial/errors.rst:104
msgid ""
"If an exception occurs during execution of the :keyword:`try` clause, the "
"rest of the clause is skipped.  Then, if its type matches the exception "
"named after the :keyword:`except` keyword, the *except clause* is executed, "
"and then execution continues after the try/except block."
msgstr ""
"اگر استثنایی در حین اجرای عبارت :keyword:`try` رخ دهد، بقیه عبارت نادیده "
"گرفته می شود. سپس، اگر نوع آن با استثنای نام برده شده پس از کلمه کلیدی :"
"keyword:`except` مطابقت داشته باشد، *except clause* اجرا می شود و سپس اجرای "
"برنامه بعد از بلوک try/except ادامه می یابد."

#: ../../tutorial/errors.rst:109
msgid ""
"If an exception occurs which does not match the exception named in the "
"*except clause*, it is passed on to outer :keyword:`try` statements; if no "
"handler is found, it is an *unhandled exception* and execution stops with an "
"error message."
msgstr ""
"اگر یک استثنا رخ دهد که با استثنای نام برده شده در *except clause* مطابقت "
"نداشته باشد، به دستورات :keyword:`try` بیرونی منتقل می شود؛ اگر هیچ مدیریت "
"کننده ای پیدا نشود، یک *unhandled exception* است و اجرا با یک پیام خطا متوقف "
"می شود."

#: ../../tutorial/errors.rst:113
msgid ""
"A :keyword:`try` statement may have more than one *except clause*, to "
"specify handlers for different exceptions.  At most one handler will be "
"executed. Handlers only handle exceptions that occur in the corresponding "
"*try clause*, not in other handlers of the same :keyword:`!try` statement.  "
"An *except clause* may name multiple exceptions as a parenthesized tuple, "
"for example::"
msgstr ""
"یک عبارت :keyword:`try` ممکن است بیش از یک *except clause* داشته باشد، تا "
"دستگیره هایی برای استثناهای مختلف مشخص کند. حداکثر یک دستگیره اجرا خواهد شد. "
"دستگیره ها تنها استثناهایی را که در *try clause* مربوطه اتفاق می افتند را "
"مدیریت می کنند، نه در دیگر دستگیره های همان عبارت :keyword:`!try`. یک "
"*except clause* ممکن است چندین استثنا را به عنوان یک تپول در پرانتز نام "
"ببرد، برای مثال::"

#: ../../tutorial/errors.rst:122
msgid ""
"A class in an :keyword:`except` clause is compatible with an exception if it "
"is the same class or a base class thereof (but not the other way around --- "
"an *except clause* listing a derived class is not compatible with a base "
"class). For example, the following code will print B, C, D in that order::"
msgstr ""

#: ../../tutorial/errors.rst:146
msgid ""
"Note that if the *except clauses* were reversed (with ``except B`` first), "
"it would have printed B, B, B --- the first matching *except clause* is "
"triggered."
msgstr ""
"توجه داشته باشید که اگر *except clauses* معکوس شود (با ``except B`` به عنوان "
"اول), خروجی B، B، B خواهد بود --- اولین *except clause* مطابقت داده شده فعال "
"می شود."

#: ../../tutorial/errors.rst:149
msgid ""
"When an exception occurs, it may have associated values, also known as the "
"exception's *arguments*. The presence and types of the arguments depend on "
"the exception type."
msgstr ""
"زمانی که استثنایی رخ می دهد، ممکن است مقادیر مرتبطی داشته باشد که به عنوان "
"*arguments* استثناء شناخته می شوند. وجود و نوع آرگومان ها به نوع استثناء "
"بستگی دارد."

#: ../../tutorial/errors.rst:153
msgid ""
"The *except clause* may specify a variable after the exception name.  The "
"variable is bound to the exception instance which typically has an ``args`` "
"attribute that stores the arguments. For convenience, builtin exception "
"types define :meth:`~object.__str__` to print all the arguments without "
"explicitly accessing ``.args``.  ::"
msgstr ""
"ممکن است *except clause* یک متغیر بعد از نام استثنا مشخص کند. این متغیر به "
"نمونه استثنا باند می شود که معمولاً یک ویژگی ``args`` دارد که آرگومان ها را "
"ذخیره می کند. برای راحتی، نوع های استثنای داخلی :meth:`~object.__str__` را "
"تعریف می کنند تا همه آرگومان ها را بدون دسترسی صریح به ``.args`` چاپ کند.::"

#: ../../tutorial/errors.rst:176
msgid ""
"The exception's :meth:`~object.__str__` output is printed as the last part "
"('detail') of the message for unhandled exceptions."
msgstr ""
"خروجی استثنای :meth:`~object.__str__` به عنوان آخرین بخش ('جزئیات') پیام "
"برای استثناهای مدیریت نشده چاپ می شود."

#: ../../tutorial/errors.rst:179
msgid ""
":exc:`BaseException` is the common base class of all exceptions. One of its "
"subclasses, :exc:`Exception`, is the base class of all the non-fatal "
"exceptions. Exceptions which are not subclasses of :exc:`Exception` are not "
"typically handled, because they are used to indicate that the program should "
"terminate. They include :exc:`SystemExit` which is raised by :meth:`sys."
"exit` and :exc:`KeyboardInterrupt` which is raised when a user wishes to "
"interrupt the program."
msgstr ""
"کلاس پایه مشترک تمام استثناها :exc:`BaseException` است. یکی از زیرکلاس های "
"آن، :exc:`Exception`، کلاس پایه تمام استثناهای غیرمهلک است. استثناهایی که "
"زیرکلاس :exc:`Exception` نیستند، معمولاً مدیریت نمی شوند، زیرا آنها برای نشان "
"دادن این موضوع استفاده می شوند که برنامه باید خاتمه یابد. آنها شامل :exc:"
"`SystemExit` هستند که توسط :meth:`sys.exit` ایجاد می شوند و :exc:"
"`KeyboardInterrupt` که زمانی ایجاد می شود که کاربر بخواهد برنامه را متوقف "
"کند."

#: ../../tutorial/errors.rst:187
msgid ""
":exc:`Exception` can be used as a wildcard that catches (almost) everything. "
"However, it is good practice to be as specific as possible with the types of "
"exceptions that we intend to handle, and to allow any unexpected exceptions "
"to propagate on."
msgstr ""
"می توان از :exc:`Exception` به عنوان یک علامت جایگزین استفاده کرد که "
"(تقریباً) همه چیز را می گیرد. با این حال، بهتر است تا حد امکان در مورد نوع  "
"استثناهایی که قصد داریم مدیریت کنیم خاص باشیم و اجازه دهیم تا هر استثنای "
"غیرمنتظره ای به جلو برود."

#: ../../tutorial/errors.rst:192
msgid ""
"The most common pattern for handling :exc:`Exception` is to print or log the "
"exception and then re-raise it (allowing a caller to handle the exception as "
"well)::"
msgstr ""
"الگوی معمول برای رسیدگی به :exc:`Exception` این است که خطا را چاپ یا ثبت "
"کرده و سپس دوباره آن را منتشر کنید (با این کار به فراخواننده اجازه می دهید "
"که به خطا رسیدگی کند)::"

#: ../../tutorial/errors.rst:210
msgid ""
"The :keyword:`try` ... :keyword:`except` statement has an optional *else "
"clause*, which, when present, must follow all *except clauses*.  It is "
"useful for code that must be executed if the *try clause* does not raise an "
"exception. For example::"
msgstr ""
"بیانیه :keyword:`try` ... :keyword:`except` دارای یک *else clause* اختیاری "
"است که در صورت حضور، باید پس از همه *except clauses* بیاید. این امر برای کدی "
"که باید اجرا شود اگر *try clause* استثنایی را به وجود نیاورد مفید است. برای "
"مثال::"

#: ../../tutorial/errors.rst:224
msgid ""
"The use of the :keyword:`!else` clause is better than adding additional code "
"to the :keyword:`try` clause because it avoids accidentally catching an "
"exception that wasn't raised by the code being protected by the :keyword:`!"
"try` ... :keyword:`!except` statement."
msgstr ""
"استفاده از بند :keyword:`!else` بهتر از اضافه کردن کد اضافی به بند :keyword:"
"`try` است زیرا این کار از گیر افتادن تصادفی یک استثنا که توسط کدی که توسط "
"عبارت :keyword:`!try` ... :keyword:`!except` محافظت می شود، جلوگیری می کند."

#: ../../tutorial/errors.rst:229
msgid ""
"Exception handlers do not handle only exceptions that occur immediately in "
"the *try clause*, but also those that occur inside functions that are called "
"(even indirectly) in the *try clause*. For example::"
msgstr ""
"مدیریت کننده های استثنا تنها استثناهایی را که بلافاصله در *try clause* رخ می "
"دهند مدیریت نمی کنند، بلکه آن هایی که در داخل توابعی که (حتی به صورت "
"غیرمستقیم) در *try clause* فراخوانده می شوند نیز مدیریت می کنند. برای مثال::"

#: ../../tutorial/errors.rst:247
msgid "Raising Exceptions"
msgstr "برخواستن استثنائات"

#: ../../tutorial/errors.rst:249
msgid ""
"The :keyword:`raise` statement allows the programmer to force a specified "
"exception to occur. For example::"
msgstr ""
"دستور :keyword:`raise` به برنامه نویس این امکان را می دهد که یک استثنا خاص "
"را وادار به وقوع کند. به عنوان مثال::"

#: ../../tutorial/errors.rst:257
msgid ""
"The sole argument to :keyword:`raise` indicates the exception to be raised. "
"This must be either an exception instance or an exception class (a class "
"that derives from :class:`BaseException`, such as :exc:`Exception` or one of "
"its subclasses).  If an exception class is passed, it will be implicitly "
"instantiated by calling its constructor with no arguments::"
msgstr ""
"تنها آرگومان به :keyword:`raise` نشان دهنده استثنایی است که باید برانگیخته "
"شود. این باید یا یک نمونه استثناء یا یک کلاس استثناء باشد (کلاسی که از :"
"class:`BaseException` مشتق شده است, مانند :exc:`Exception` یا یکی از زیرکلاس "
"های آن). اگر یک کلاس استثناء ارسال شود، به صورت ضمنی با فراخوانی سازنده اش "
"بدون آرگومان نمونه سازی می شود::"

#: ../../tutorial/errors.rst:265
msgid ""
"If you need to determine whether an exception was raised but don't intend to "
"handle it, a simpler form of the :keyword:`raise` statement allows you to re-"
"raise the exception::"
msgstr ""
"اگر نیاز دارید مشخص کنید که آیا یک استثنا ایجاد شده است یا خیر، اما قصد "
"مدیریت آن را ندارید، یک فرم ساده تر از عبارت :keyword:`raise` به شما اجازه "
"می دهد استثنا را دوباره ایجاد کنید::"

#: ../../tutorial/errors.rst:284
msgid "Exception Chaining"
msgstr "زنجیره سازی استثنا ها"

#: ../../tutorial/errors.rst:286
msgid ""
"If an unhandled exception occurs inside an :keyword:`except` section, it "
"will have the exception being handled attached to it and included in the "
"error message::"
msgstr ""
"اگر یک استثنای پردازش نشده در یک بخش :keyword:`except` رخ دهد، استثنای در "
"حال پردازش به آن متصل می شود و در پیام خطا درج می گردد::"

#: ../../tutorial/errors.rst:305
msgid ""
"To indicate that an exception is a direct consequence of another, the :"
"keyword:`raise` statement allows an optional :keyword:`from<raise>` clause::"
msgstr ""
"برای نشان دادن اینکه یک استثنا نتیجه مستقیم یک استثنای دیگر است، دستور :"
"keyword:`raise` اجازه استفاده از بند اختیاری :keyword:`from<raise>` را می "
"دهد::"

#: ../../tutorial/errors.rst:311
msgid "This can be useful when you are transforming exceptions. For example::"
msgstr ""
"این می تواند زمانی که شما در حال تبدیل استثناها هستید مفید باشد. برای مثال::"

#: ../../tutorial/errors.rst:332
msgid ""
"It also allows disabling automatic exception chaining using the ``from "
"None`` idiom::"
msgstr ""
"همچنین اجازه می دهد غیرفعال کردن زنجیره سازی خودکار استثناها با استفاده از "
"ایدیوم ``from None``::"

#: ../../tutorial/errors.rst:344
msgid ""
"For more information about chaining mechanics, see :ref:`bltin-exceptions`."
msgstr ""
"برای اطلاعات بیشتر در مورد مکانیک های زنجیره ای، به :ref:`bltin-exceptions` "
"مراجعه کنید."

#: ../../tutorial/errors.rst:350
msgid "User-defined Exceptions"
msgstr "استثناهای تعریف شده توسط کاربر"

#: ../../tutorial/errors.rst:352
msgid ""
"Programs may name their own exceptions by creating a new exception class "
"(see :ref:`tut-classes` for more about Python classes).  Exceptions should "
"typically be derived from the :exc:`Exception` class, either directly or "
"indirectly."
msgstr ""
"برنامه ها می توانند با ایجاد یک کلاس استثنای جدید، استثناهای خود را نام "
"گذاری کنند (برای اطلاعات بیشتر درباره کلاس های پایتون به :ref:`tut-classes` "
"مراجعه کنید). به طور معمول استثناها باید به طور مستقیم یا غیرمستقیم از کلاس :"
"exc:`Exception` مشتق شوند."

#: ../../tutorial/errors.rst:356
msgid ""
"Exception classes can be defined which do anything any other class can do, "
"but are usually kept simple, often only offering a number of attributes that "
"allow information about the error to be extracted by handlers for the "
"exception."
msgstr ""
"کلاس های استثنا می توانند تعریف شوند و هر کاری که هر کلاس دیگری می تواند "
"انجام دهد را انجام دهند، اما معمولاً به صورت ساده نگه داشته می شوند و اغلب "
"فقط تعدادی ویژگی ارائه می دهند که به مدیران استثنا اجازه می دهد اطلاعاتی "
"درباره خطا استخراج کنند."

#: ../../tutorial/errors.rst:360
msgid ""
"Most exceptions are defined with names that end in \"Error\", similar to the "
"naming of the standard exceptions."
msgstr ""
"بیشتر استثناها با نام هایی که به \"Error\" ختم می شوند تعریف شده اند، مشابه "
"نام گذاری استثناهای استاندارد."

#: ../../tutorial/errors.rst:363
msgid ""
"Many standard modules define their own exceptions to report errors that may "
"occur in functions they define."
msgstr ""
"بسیاری از ماژول های استاندارد استثناهای خود را تعریف می کنند تا خطاهایی که "
"ممکن است در توابعی که تعریف می کنند رخ دهند را گزارش دهند."

#: ../../tutorial/errors.rst:370
msgid "Defining Clean-up Actions"
msgstr "تعریف اقدامات پاکسازی"

#: ../../tutorial/errors.rst:372
msgid ""
"The :keyword:`try` statement has another optional clause which is intended "
"to define clean-up actions that must be executed under all circumstances.  "
"For example::"
msgstr ""
"عبارت :keyword:`try` شامل یک بند اختیاری دیگر است که هدف آن تعریف اقداماتی "
"برای پاکسازی است که باید تحت هر شرایطی اجرا شوند. برای مثال::"

#: ../../tutorial/errors.rst:386
msgid ""
"If a :keyword:`finally` clause is present, the :keyword:`!finally` clause "
"will execute as the last task before the :keyword:`try` statement completes. "
"The :keyword:`!finally` clause runs whether or not the :keyword:`!try` "
"statement produces an exception. The following points discuss more complex "
"cases when an exception occurs:"
msgstr ""
"اگر یک بند :keyword:`finally` موجود باشد، بند :keyword:`!finally` به عنوان "
"آخرین وظیفه قبل از کامل شدن دستور :keyword:`try` اجرا خواهد شد. بند :keyword:"
"`!finally` اجرا می شود چه دستور :keyword:`!try` استثناء تولید کند یا نه. "
"نکات زیر موارد پیچیده تری را زمانی که یک استثناء رخ می دهد مورد بحث قرار می "
"دهند:"

#: ../../tutorial/errors.rst:392
msgid ""
"If an exception occurs during execution of the :keyword:`!try` clause, the "
"exception may be handled by an :keyword:`except` clause. If the exception is "
"not handled by an :keyword:`!except` clause, the exception is re-raised "
"after the :keyword:`!finally` clause has been executed."
msgstr ""
"اگر استثنایی در حین اجرای بند :keyword:`!try` رخ دهد، ممکن است استثناء توسط "
"بند :keyword:`except` مدیریت شود. اگر استثناء توسط بند :keyword:`!except` "
"مدیریت نشود، پس از اجرای بند :keyword:`!finally` استثناء دوباره مطرح خواهد "
"شد."

#: ../../tutorial/errors.rst:398
msgid ""
"An exception could occur during execution of an :keyword:`!except` or :"
"keyword:`!else` clause. Again, the exception is re-raised after the :keyword:"
"`!finally` clause has been executed."
msgstr ""
"ممکن است یک استثناء در حین اجرای بند :keyword:`!except` یا :keyword:`!else` "
"رخ دهد. دوباره، استثناء پس از اجرای بند :keyword:`!finally` مجدداً ایجاد می "
"شود."

#: ../../tutorial/errors.rst:402
msgid ""
"If the :keyword:`!finally` clause executes a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, exceptions are not re-raised."
msgstr ""
"اگر شرط :keyword:`!finally` یک عبارت :keyword:`break`، :keyword:`continue` "
"یا :keyword:`return` را اجرا کند، استثناها دوباره ایجاد نمی شوند."

#: ../../tutorial/errors.rst:406
msgid ""
"If the :keyword:`!try` statement reaches a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, the :keyword:`!finally` clause "
"will execute just prior to the :keyword:`!break`, :keyword:`!continue` or :"
"keyword:`!return` statement's execution."
msgstr ""
"اگر دستور :keyword:`!try` به یک دستور :keyword:`break`، :keyword:`continue` "
"یا :keyword:`return` برسد، عبارت :keyword:`!finally` دقیقاً قبل از اجرای "
"دستور :keyword:`!break`، :keyword:`!continue` یا :keyword:`!return` اجرا "
"خواهد شد."

#: ../../tutorial/errors.rst:412
msgid ""
"If a :keyword:`!finally` clause includes a :keyword:`!return` statement, the "
"returned value will be the one from the :keyword:`!finally` clause's :"
"keyword:`!return` statement, not the value from the :keyword:`!try` "
"clause's :keyword:`!return` statement."
msgstr ""
"اگر یک عبارت :keyword:`!finally` شامل یک دستور :keyword:`!return` باشد، "
"مقدار بازگشتی، مقداری از دستور :keyword:`!return` در عبارت :keyword:`!"
"finally` خواهد بود، نه مقداری از دستور :keyword:`!return` در عبارت :keyword:"
"`!try`."

#: ../../tutorial/errors.rst:418
msgid "For example::"
msgstr "به عنوان مثال::"

#: ../../tutorial/errors.rst:429
msgid "A more complicated example::"
msgstr "یک مثال پیچیده تر::"

#: ../../tutorial/errors.rst:454
msgid ""
"As you can see, the :keyword:`finally` clause is executed in any event.  "
"The :exc:`TypeError` raised by dividing two strings is not handled by the :"
"keyword:`except` clause and therefore re-raised after the :keyword:`!"
"finally` clause has been executed."
msgstr ""
"همانطور که می بینید، بند :keyword:`finally` در هر حالتی اجرا می شود. خطای :"
"exc:`TypeError` که از تقسیم دو رشته ایجاد شده است، توسط بند :keyword:"
"`except` پردازش نمی شود و بنابراین پس از اجرای بند :keyword:`!finally` "
"دوباره منتشر می شود."

#: ../../tutorial/errors.rst:459
msgid ""
"In real world applications, the :keyword:`finally` clause is useful for "
"releasing external resources (such as files or network connections), "
"regardless of whether the use of the resource was successful."
msgstr ""
"در برنامه های کاربردی دنیای واقعی، عبارت :keyword:`finally` برای آزادسازی "
"منابع خارجی (مانند فایل ها یا اتصالات شبکه) مفید است، بدون توجه به اینکه "
"استفاده از منبع موفقیت آمیز بوده است یا خیر."

#: ../../tutorial/errors.rst:467
msgid "Predefined Clean-up Actions"
msgstr "اقدامات پاک سازی از پیش تعریف شده"

#: ../../tutorial/errors.rst:469
msgid ""
"Some objects define standard clean-up actions to be undertaken when the "
"object is no longer needed, regardless of whether or not the operation using "
"the object succeeded or failed. Look at the following example, which tries "
"to open a file and print its contents to the screen. ::"
msgstr ""
"برخی اشیاء اقدام های پاکسازی استانداردی را تعریف می کنند که هنگامی که دیگر "
"به آن ها نیازی نیست، مستقل از اینکه عملیات با استفاده از آن شیء موفقیت آمیز "
"بوده یا با شکست مواجه شده، انجام می شود. به مثال زیر نگاه کنید که تلاش می "
"کند یک فایل را باز کرده و محتوای آن را به صفحه نمایش چاپ کند. ::"

#: ../../tutorial/errors.rst:477
msgid ""
"The problem with this code is that it leaves the file open for an "
"indeterminate amount of time after this part of the code has finished "
"executing. This is not an issue in simple scripts, but can be a problem for "
"larger applications. The :keyword:`with` statement allows objects like files "
"to be used in a way that ensures they are always cleaned up promptly and "
"correctly. ::"
msgstr ""
"مشکل این کد این است که فایل را برای مدتی نامشخص پس از اجرای این بخش از کد "
"باز می گذارد. این مسئله در اسکریپت های ساده مشکلی ایجاد نمی کند، اما می "
"تواند برای برنامه های بزرگتر مشکلی باشد. دستور :keyword:`with` به اشیایی "
"مانند فایل ها اجازه می دهد به گونه ای استفاده شوند که اطمینان حاصل شود "
"همواره به موقع و به درستی پاکسازی می شوند. ::"

#: ../../tutorial/errors.rst:487
msgid ""
"After the statement is executed, the file *f* is always closed, even if a "
"problem was encountered while processing the lines. Objects which, like "
"files, provide predefined clean-up actions will indicate this in their "
"documentation."
msgstr ""
"پس از اجرای عبارت، فایل *f* همیشه بسته می شود، حتی اگر در حین پردازش خطوط "
"مشکلی رخ دهد. اشیایی که مانند فایل ها، اقدامات پاکسازی از پیش تعریف شده ای "
"را ارائه می دهند، این را در مستندات خود نشان خواهند داد."

#: ../../tutorial/errors.rst:495
msgid "Raising and Handling Multiple Unrelated Exceptions"
msgstr "بالا بردن و مدیریت چندین استثنای نامرتبط"

#: ../../tutorial/errors.rst:497
msgid ""
"There are situations where it is necessary to report several exceptions that "
"have occurred. This is often the case in concurrency frameworks, when "
"several tasks may have failed in parallel, but there are also other use "
"cases where it is desirable to continue execution and collect multiple "
"errors rather than raise the first exception."
msgstr ""
"زمان هایی وجود دارد که نیاز است چندین استثنا که رخ داده اند گزارش شوند. این "
"موضوع اغلب در چارچوب های هم زمانی اتفاق می افتد، وقتی که ممکن است چندین کار "
"به صورت موازی شکست بخورند، اما موارد استفاده دیگری هم وجود دارد که در آن "
"ادامه اجرای برنامه و جمع آوری خطاهای متعدد به جای ایجاد اولین استثنا مطلوب "
"است."

#: ../../tutorial/errors.rst:503
msgid ""
"The builtin :exc:`ExceptionGroup` wraps a list of exception instances so "
"that they can be raised together. It is an exception itself, so it can be "
"caught like any other exception. ::"
msgstr ""
"تابع داخلی :exc:`ExceptionGroup` فهرستی از نمونه های استثنا را داخل خود "
"محصور می کند تا بتوان آن ها را با هم فراخوانی کرد. این خود یک استثنا است، "
"بنابراین می توان آن را مانند هر استثنای دیگری گرفت. ::"

#: ../../tutorial/errors.rst:529
msgid ""
"By using ``except*`` instead of ``except``, we can selectively handle only "
"the exceptions in the group that match a certain type. In the following "
"example, which shows a nested exception group, each ``except*`` clause "
"extracts from the group exceptions of a certain type while letting all other "
"exceptions propagate to other clauses and eventually to be reraised. ::"
msgstr ""
"با استفاده از ``except*`` به جای ``except``، می توانیم تنها استثناهایی را که "
"در گروهی هستند و با نوع خاصی مطابقت دارند، به صورت انتخابی مدیریت کنیم. در "
"مثال زیر که یک گروه استثنای تودرتو را نشان می دهد، هر عبارت ``except*`` "
"استثناهای نوع خاصی را از گروه استخراج می کند، در حالی که به همه استثناهای "
"دیگر اجازه می دهد به بندهای دیگر منتقل شوند و در نهایت دوباره پراکنده "
"شوند. ::"

#: ../../tutorial/errors.rst:572
msgid ""
"Note that the exceptions nested in an exception group must be instances, not "
"types. This is because in practice the exceptions would typically be ones "
"that have already been raised and caught by the program, along the following "
"pattern::"
msgstr ""
"توجه داشته باشید که استثناهایی که به صورت تو در تو در یک گروه استثنا قرار می "
"گیرند باید نمونه هایی از استثناها باشند، نه نوع آن ها. دلیل این امر این است "
"که در عمل، استثناها معمولاً مواردی هستند که پیش تر توسط برنامه ایجاد و اعلام "
"شده اند و روال کار معمولاً به صورت زیر است::"

#: ../../tutorial/errors.rst:592
msgid "Enriching Exceptions with Notes"
msgstr "غنی سازی استثناها با یادداشت ها"

#: ../../tutorial/errors.rst:594
msgid ""
"When an exception is created in order to be raised, it is usually "
"initialized with information that describes the error that has occurred. "
"There are cases where it is useful to add information after the exception "
"was caught. For this purpose, exceptions have a method ``add_note(note)`` "
"that accepts a string and adds it to the exception's notes list. The "
"standard traceback rendering includes all notes, in the order they were "
"added, after the exception. ::"
msgstr ""
"هنگامی که یک استثناء ایجاد می شود تا پرتاب شود، معمولاً با اطلاعاتی که خطای "
"رخ داده را توصیف می کند، مقداردهی اولیه می شود. در برخی موارد، اضافه کردن "
"اطلاعات پس از آنکه استثناء گرفته شد، مفید است. برای این منظور، استثناء ها یک "
"متد به نام ``add_note(note)`` دارند که یک رشته را قبول می کند و آن را به "
"لیست یادداشت های استثناء اضافه می کند. نمایش استاندارد traceback شامل تمام "
"یادداشت ها، به ترتیبی که اضافه شده اند، بعد از استثناء می باشد. ::"

#: ../../tutorial/errors.rst:615
msgid ""
"For example, when collecting exceptions into an exception group, we may want "
"to add context information for the individual errors. In the following each "
"exception in the group has a note indicating when this error has occurred. ::"
msgstr ""
"برای مثال، زمانی که در حال جمع آوری استثناء ها به یک گروه استثناء هستیم، "
"ممکن است بخواهیم اطلاعات زمینه ای برای خطاهای منفرد اضافه کنیم. در زیر، هر "
"استثناء در گروه یک یادداشت دارد که نشان می دهد این خطا چه زمانی رخ داده "
"است. ::"
