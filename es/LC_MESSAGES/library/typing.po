# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
# Translators:
# Ivan Nieto <ivan.n.s@tuta.io>, 2021
# Luis Martínez <lagwyf@gmail.com>, 2023
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-10 22:50-0300\n"
"PO-Revision-Date: 2021-06-28 01:16+0000\n"
"Last-Translator: Luis Martínez <lagwyf@gmail.com>, 2023\n"
"Language: es\n"
"Language-Team: Spanish (https://app.transifex.com/python-doc/teams/5390/"
"es/)\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ""

#: ../../library/typing.rst:16
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr ""

#: ../../library/typing.rst:20
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as :term:`type checkers <static "
"type checker>`, IDEs, linters, etc."
msgstr ""

#: ../../library/typing.rst:26
msgid "This module provides runtime support for type hints."
msgstr ""

#: ../../library/typing.rst:28
msgid "Consider the function below::"
msgstr ""

#: ../../library/typing.rst:33
msgid ""
"The function ``moon_weight`` takes an argument expected to be an instance "
"of :class:`float`, as indicated by the *type hint* ``earth_weight: float``. "
"The function is expected to return an instance of :class:`str`, as indicated "
"by the ``-> str`` hint."
msgstr ""

#: ../../library/typing.rst:37
msgid ""
"While type hints can be simple classes like :class:`float` or :class:`str`, "
"they can also be more complex. The :mod:`typing` module provides a "
"vocabulary of more advanced type hints."
msgstr ""

#: ../../library/typing.rst:41
msgid ""
"New features are frequently added to the ``typing`` module. "
"The :pypi:`typing_extensions` package provides backports of these new "
"features to older versions of Python."
msgstr ""

#: ../../library/typing.rst:47
msgid ""
"`\"Typing cheat sheet\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"
msgstr ""

#: ../../library/typing.rst:48
msgid "A quick overview of type hints (hosted at the mypy docs)"
msgstr ""

#: ../../library/typing.rst:50
msgid ""
"\"Type System Reference\" section of `the mypy docs <https://"
"mypy.readthedocs.io/en/stable/index.html>`_"
msgstr ""

#: ../../library/typing.rst:51
msgid ""
"The Python typing system is standardised via PEPs, so this reference should "
"broadly apply to most Python type checkers. (Some parts may still be "
"specific to mypy.)"
msgstr ""

#: ../../library/typing.rst:55
msgid ""
"`\"Static Typing with Python\" <https://typing.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../../library/typing.rst:56
msgid ""
"Type-checker-agnostic documentation written by the community detailing type "
"system features, useful typing related tools and typing best practices."
msgstr ""

#: ../../library/typing.rst:63
msgid "Specification for the Python Type System"
msgstr ""

#: ../../library/typing.rst:65
msgid ""
"The canonical, up-to-date specification of the Python type system can be "
"found at `\"Specification for the Python type system\" <https://"
"typing.readthedocs.io/en/latest/spec/index.html>`_."
msgstr ""

#: ../../library/typing.rst:71
msgid "Type aliases"
msgstr ""

#: ../../library/typing.rst:73
msgid ""
"A type alias is defined using the :keyword:`type` statement, which creates "
"an instance of :class:`TypeAliasType`. In this example, ``Vector`` and "
"``list[float]`` will be treated equivalently by static type checkers::"
msgstr ""

#: ../../library/typing.rst:86
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""

#: ../../library/typing.rst:104
msgid ""
"The :keyword:`type` statement is new in Python 3.12. For backwards "
"compatibility, type aliases can also be created through simple assignment::"
msgstr ""

#: ../../library/typing.rst:109
msgid ""
"Or marked with :data:`TypeAlias` to make it explicit that this is a type "
"alias, not a normal variable assignment::"
msgstr ""

#: ../../library/typing.rst:119
msgid "NewType"
msgstr ""

#: ../../library/typing.rst:121
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr ""

#: ../../library/typing.rst:128
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""

#: ../../library/typing.rst:140
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""

#: ../../library/typing.rst:148
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""

#: ../../library/typing.rst:154
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""

#: ../../library/typing.rst:157
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr ""

#: ../../library/typing.rst:166
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""

#: ../../library/typing.rst:174
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr ""

#: ../../library/typing.rst:176
msgid "See :pep:`484` for more details."
msgstr ""

#: ../../library/typing.rst:180
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``type Alias = Original`` will make the static type "
"checker treat ``Alias`` as being *exactly equivalent* to ``Original`` in all "
"cases. This is useful when you want to simplify complex type signatures."
msgstr ""

#: ../../library/typing.rst:185
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""

#: ../../library/typing.rst:194
msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr ""

#: ../../library/typing.rst:199
msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr ""

#: ../../library/typing.rst:206
msgid "Annotating callable objects"
msgstr ""

#: ../../library/typing.rst:208
msgid ""
"Functions -- or other :term:`callable` objects -- can be annotated "
"using :class:`collections.abc.Callable` or :data:`typing.Callable`. "
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""

#: ../../library/typing.rst:213 ../../library/typing.rst:3026
#: ../../library/typing.rst:3202
msgid "For example:"
msgstr ""

#: ../../library/typing.rst:231
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return "
"type must be a single type."
msgstr ""

#: ../../library/typing.rst:236
msgid ""
"If a literal ellipsis ``...`` is given as the argument list, it indicates "
"that a callable with any arbitrary parameter list would be acceptable:"
msgstr ""

#: ../../library/typing.rst:248
msgid ""
"``Callable`` cannot express complex signatures such as functions that take a "
"variadic number of arguments, :ref:`overloaded functions <overload>`, or "
"functions that have keyword-only parameters. However, these signatures can "
"be expressed by defining a :class:`Protocol` class with "
"a :meth:`~object.__call__` method:"
msgstr ""

#: ../../library/typing.rst:275
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""

#: ../../library/typing.rst:283 ../../library/typing.rst:3745
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. "
"See :pep:`612` for more details."
msgstr ""

#: ../../library/typing.rst:288
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""

#: ../../library/typing.rst:294
msgid "Generics"
msgstr ""

#: ../../library/typing.rst:296
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr ""

#: ../../library/typing.rst:313
msgid ""
"Generic functions and classes can be parameterized by using :ref:`type "
"parameter syntax <type-params>`::"
msgstr ""

#: ../../library/typing.rst:321
msgid "Or by using the :class:`TypeVar` factory directly::"
msgstr ""

#: ../../library/typing.rst:331
msgid "Syntactic support for generics is new in Python 3.12."
msgstr ""

#: ../../library/typing.rst:337
msgid "Annotating tuples"
msgstr ""

#: ../../library/typing.rst:339
msgid ""
"For most containers in Python, the typing system assumes that all elements "
"in the container will be of the same type. For example::"
msgstr ""

#: ../../library/typing.rst:354
msgid ""
":class:`list` only accepts one type argument, so a type checker would emit "
"an error on the ``y`` assignment above. "
"Similarly, :class:`~collections.abc.Mapping` only accepts two type "
"arguments: the first indicates the type of the keys, and the second "
"indicates the type of the values."
msgstr ""

#: ../../library/typing.rst:360
msgid ""
"Unlike most other Python containers, however, it is common in idiomatic "
"Python code for tuples to have elements which are not all of the same type. "
"For this reason, tuples are special-cased in Python's typing "
"system. :class:`tuple` accepts *any number* of type arguments::"
msgstr ""

#: ../../library/typing.rst:376
msgid ""
"To denote a tuple which could be of *any* length, and in which all elements "
"are of the same type ``T``, use ``tuple[T, ...]``. To denote an empty tuple, "
"use ``tuple[()]``. Using plain ``tuple`` as an annotation is equivalent to "
"using ``tuple[Any, ...]``::"
msgstr ""

#: ../../library/typing.rst:399
msgid "The type of class objects"
msgstr ""

#: ../../library/typing.rst:401
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` (or :class:`typing.Type[C] "
"<Type>`) may accept values that are classes themselves -- specifically, it "
"will accept the *class object* of ``C``. For example::"
msgstr ""

#: ../../library/typing.rst:411
msgid "Note that ``type[C]`` is covariant::"
msgstr ""

#: ../../library/typing.rst:427
msgid ""
"The only legal parameters for :class:`type` are "
"classes, :data:`Any`, :ref:`type variables <generics>`, and unions of any of "
"these types. For example::"
msgstr ""

#: ../../library/typing.rst:439
msgid ""
"``type[Any]`` is equivalent to :class:`type`, which is the root of "
"Python's :ref:`metaclass hierarchy <metaclasses>`."
msgstr ""

#: ../../library/typing.rst:445
msgid "User-defined generic types"
msgstr ""

#: ../../library/typing.rst:447
msgid "A user-defined class can be defined as a generic class."
msgstr ""

#: ../../library/typing.rst:470
msgid ""
"This syntax indicates that the class ``LoggedVar`` is parameterised around a "
"single :ref:`type variable <typevar>` ``T`` . This also makes ``T`` valid as "
"a type within the class body."
msgstr ""

#: ../../library/typing.rst:474
msgid ""
"Generic classes implicitly inherit from :class:`Generic`. For compatibility "
"with Python 3.11 and lower, it is also possible to inherit explicitly "
"from :class:`Generic` to indicate a generic class::"
msgstr ""

#: ../../library/typing.rst:485
msgid ""
"Generic classes have :meth:`~object.__class_getitem__` methods, meaning they "
"can be parameterised at runtime (e.g. ``LoggedVar[int]`` below)::"
msgstr ""

#: ../../library/typing.rst:494
msgid ""
"A generic type can have any number of type variables. All varieties "
"of :class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""

#: ../../library/typing.rst:509
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""

#: ../../library/typing.rst:523
msgid "Generic classes can also inherit from other classes::"
msgstr ""

#: ../../library/typing.rst:530
msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr ""

#: ../../library/typing.rst:537
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr ""

#: ../../library/typing.rst:539
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""

#: ../../library/typing.rst:550
msgid "User-defined generic type aliases are also supported. Examples::"
msgstr ""

#: ../../library/typing.rst:565
msgid ""
"For backward compatibility, generic type aliases can also be created through "
"a simple assignment::"
msgstr ""

#: ../../library/typing.rst:574
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ""

#: ../../library/typing.rst:577
msgid ""
"Syntactic support for generics and type aliases is new in version 3.12. "
"Previously, generic classes had to explicitly inherit from :class:`Generic` "
"or contain a type variable in one of their bases."
msgstr ""

#: ../../library/typing.rst:582
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``[**P]``.  The behavior is "
"consistent with type variables' described above as parameter specification "
"variables are treated by the typing module as a specialized type variable.  "
"The one exception to this is that a list of types can be used to substitute "
"a :class:`ParamSpec`::"
msgstr ""

#: ../../library/typing.rst:593
msgid ""
"Classes generic over a :class:`ParamSpec` can also be created using explicit "
"inheritance from :class:`Generic`. In this case, ``**`` is not used::"
msgstr ""

#: ../../library/typing.rst:603
msgid ""
"Another difference between :class:`TypeVar` and :class:`ParamSpec` is that a "
"generic with only one parameter specification variable will accept parameter "
"lists in the forms ``X[[Type1, Type2, ...]]`` and also ``X[Type1, "
"Type2, ...]`` for aesthetic reasons.  Internally, the latter is converted to "
"the former, so the following are equivalent::"
msgstr ""

#: ../../library/typing.rst:616
msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""

#: ../../library/typing.rst:620
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. "
"See :class:`ParamSpec` and :pep:`612` for more details."
msgstr ""

#: ../../library/typing.rst:624
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module "
"are :term:`hashable` and comparable for equality."
msgstr ""

#: ../../library/typing.rst:631
msgid "The :data:`Any` type"
msgstr ""

#: ../../library/typing.rst:633
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""

#: ../../library/typing.rst:637
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""

#: ../../library/typing.rst:655
msgid ""
"Notice that no type checking is performed when assigning a value of "
"type :data:`Any` to a more precise type. For example, the static type "
"checker did not report an error when assigning ``a`` to ``s`` even though "
"``s`` was declared to be of type :class:`str` and receives an :class:`int` "
"value at runtime!"
msgstr ""

#: ../../library/typing.rst:661
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""

#: ../../library/typing.rst:674
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""

#: ../../library/typing.rst:677
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""

#: ../../library/typing.rst:682
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""

#: ../../library/typing.rst:704
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""

#: ../../library/typing.rst:709
msgid "Nominal vs structural subtyping"
msgstr ""

#: ../../library/typing.rst:711
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""

#: ../../library/typing.rst:715
msgid ""
"This requirement previously also applied to abstract base classes, such "
"as :class:`~collections.abc.Iterable`. The problem with this approach is "
"that a class had to be explicitly marked to support them, which is "
"unpythonic and unlike what one would normally do in idiomatic dynamically "
"typed Python code. For example, this conforms to :pep:`484`::"
msgstr ""

#: ../../library/typing.rst:728
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""

#: ../../library/typing.rst:744
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""

#: ../../library/typing.rst:749
msgid "Module contents"
msgstr ""

#: ../../library/typing.rst:751
msgid ""
"The ``typing`` module defines the following classes, functions and "
"decorators."
msgstr ""

#: ../../library/typing.rst:754
msgid "Special typing primitives"
msgstr ""

#: ../../library/typing.rst:757
msgid "Special types"
msgstr ""

#: ../../library/typing.rst:759
msgid ""
"These can be used as types in annotations. They do not support subscription "
"using ``[]``."
msgstr ""

#: ../../library/typing.rst:764
msgid "Special type indicating an unconstrained type."
msgstr ""

#: ../../library/typing.rst:766
msgid "Every type is compatible with :data:`Any`."
msgstr ""

#: ../../library/typing.rst:767
msgid ":data:`Any` is compatible with every type."
msgstr ""

#: ../../library/typing.rst:769
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""

#: ../../library/typing.rst:776
msgid "A :ref:`constrained type variable <typing-constrained-typevar>`."
msgstr ""

#: ../../library/typing.rst:778
msgid "Definition::"
msgstr ""

#: ../../library/typing.rst:782
msgid ""
"``AnyStr`` is meant to be used for functions that may accept :class:`str` "
"or :class:`bytes` arguments but cannot allow the two to mix."
msgstr ""

#: ../../library/typing.rst:785 ../../library/typing.rst:903
#: ../../library/typing.rst:960 ../../library/typing.rst:1126
#: ../../library/typing.rst:1187 ../../library/typing.rst:1229
#: ../../library/typing.rst:1427 ../../library/typing.rst:1488
#: ../../library/typing.rst:2963 ../../library/typing.rst:3187
msgid "For example::"
msgstr ""

#: ../../library/typing.rst:794
msgid ""
"Note that, despite its name, ``AnyStr`` has nothing to do with "
"the :class:`Any` type, nor does it mean \"any string\". In particular, "
"``AnyStr`` and ``str | bytes`` are different from each other and have "
"different use cases::"
msgstr ""

#: ../../library/typing.rst:817
msgid ""
"Deprecated in favor of the new :ref:`type parameter syntax <type-params>`. "
"Use ``class A[T: (str, bytes)]: ...`` instead of importing ``AnyStr``. "
"See :pep:`695` for more details."
msgstr ""

#: ../../library/typing.rst:814
msgid ""
"In Python 3.16, ``AnyStr`` will be removed from ``typing.__all__``, and "
"deprecation warnings will be emitted at runtime when it is accessed or "
"imported from ``typing``. ``AnyStr`` will be removed from ``typing`` in "
"Python 3.18."
msgstr ""

#: ../../library/typing.rst:821
msgid "Special type that includes only literal strings."
msgstr ""

#: ../../library/typing.rst:823
msgid ""
"Any string literal is compatible with ``LiteralString``, as is another "
"``LiteralString``. However, an object typed as just ``str`` is not. A string "
"created by composing ``LiteralString``-typed objects is also acceptable as a "
"``LiteralString``."
msgstr ""

#: ../../library/typing.rst:829 ../../library/typing.rst:2059
msgid "Example:"
msgstr ""

#: ../../library/typing.rst:845
msgid ""
"``LiteralString`` is useful for sensitive APIs where arbitrary user-"
"generated strings could generate problems. For example, the two cases above "
"that generate type checker errors could be vulnerable to an SQL injection "
"attack."
msgstr ""

#: ../../library/typing.rst:850
msgid "See :pep:`675` for more details."
msgstr ""

#: ../../library/typing.rst:857
msgid ""
":data:`!Never` and :data:`!NoReturn` represent the `bottom type <https://"
"en.wikipedia.org/wiki/Bottom_type>`_, a type that has no members."
msgstr ""

#: ../../library/typing.rst:861
msgid ""
"They can be used to indicate that a function never returns, such "
"as :func:`sys.exit`::"
msgstr ""

#: ../../library/typing.rst:869
msgid ""
"Or to define a function that should never be called, as there are no valid "
"arguments, such as :func:`assert_never`::"
msgstr ""

#: ../../library/typing.rst:888
msgid ""
":data:`!Never` and :data:`!NoReturn` have the same meaning in the type "
"system and static type checkers treat both equivalently."
msgstr ""

#: ../../library/typing.rst:893
msgid "Added :data:`NoReturn`."
msgstr ""

#: ../../library/typing.rst:897
msgid "Added :data:`Never`."
msgstr ""

#: ../../library/typing.rst:901
msgid "Special type to represent the current enclosed class."
msgstr ""

#: ../../library/typing.rst:917
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""

#: ../../library/typing.rst:929
msgid ""
"In general, if something returns ``self``, as in the above examples, you "
"should use ``Self`` as the return annotation. If ``Foo.return_self`` was "
"annotated as returning ``\"Foo\"``, then the type checker would infer the "
"object returned from ``SubclassOfFoo.return_self`` as being of type ``Foo`` "
"rather than ``SubclassOfFoo``."
msgstr ""

#: ../../library/typing.rst:935
msgid "Other common use cases include:"
msgstr ""

#: ../../library/typing.rst:937
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr ""

#: ../../library/typing.rst:939
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr ""

#: ../../library/typing.rst:941
msgid ""
"You should not use ``Self`` as the return annotation if the method is not "
"guaranteed to return an instance of a subclass when the class is subclassed::"
msgstr ""

#: ../../library/typing.rst:952
msgid "See :pep:`673` for more details."
msgstr ""

#: ../../library/typing.rst:958
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr ""

#: ../../library/typing.rst:966
msgid ""
"``TypeAlias`` is particularly useful on older Python versions for annotating "
"aliases that make use of forward references, as it can be hard for type "
"checkers to distinguish these from normal variable assignments:"
msgstr ""

#: ../../library/typing.rst:986
msgid "See :pep:`613` for more details."
msgstr ""

#: ../../library/typing.rst:990
msgid ""
":data:`TypeAlias` is deprecated in favor of the :keyword:`type` statement, "
"which creates instances of :class:`TypeAliasType` and which natively "
"supports forward references. Note that while :data:`TypeAlias` "
"and :class:`TypeAliasType` serve similar purposes and have similar names, "
"they are distinct and the latter is not the type of the former. Removal "
"of :data:`TypeAlias` is not currently planned, but users are encouraged to "
"migrate to :keyword:`type` statements."
msgstr ""

#: ../../library/typing.rst:1001
msgid "Special forms"
msgstr ""

#: ../../library/typing.rst:1003
msgid ""
"These can be used as types in annotations. They all support subscription "
"using ``[]``, but each has a unique syntax."
msgstr ""

#: ../../library/typing.rst:1008
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""

#: ../../library/typing.rst:1010
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""

#: ../../library/typing.rst:1012
msgid "The arguments must be types and there must be at least one."
msgstr ""

#: ../../library/typing.rst:1014
msgid "Unions of unions are flattened, e.g.::"
msgstr ""

#: ../../library/typing.rst:1018
msgid "Unions of a single argument vanish, e.g.::"
msgstr ""

#: ../../library/typing.rst:1022
msgid "Redundant arguments are skipped, e.g.::"
msgstr ""

#: ../../library/typing.rst:1026
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr ""

#: ../../library/typing.rst:1030
msgid "You cannot subclass or instantiate a ``Union``."
msgstr ""

#: ../../library/typing.rst:1032
msgid "You cannot write ``Union[X][Y]``."
msgstr ""

#: ../../library/typing.rst:1034
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr ""

#: ../../library/typing.rst:1037
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""

#: ../../library/typing.rst:1043
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr ""

#: ../../library/typing.rst:1045
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""

#: ../../library/typing.rst:1053
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""

#: ../../library/typing.rst:1060
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""

#: ../../library/typing.rst:1066
msgid "Special form for annotating higher-order functions."
msgstr ""

#: ../../library/typing.rst:1068
msgid ""
"``Concatenate`` can be used in conjunction with :ref:`Callable <annotating-"
"callables>` and :class:`ParamSpec` to annotate a higher-order callable which "
"adds, removes, or transforms parameters of another callable.  Usage is in "
"the form ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. "
"``Concatenate`` is currently only valid when used as the first argument to "
"a :ref:`Callable <annotating-callables>`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""

#: ../../library/typing.rst:1077
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides "
"a :class:`threading.Lock` to the decorated function,  ``Concatenate`` can be "
"used to indicate that ``with_lock`` expects a callable which takes in a "
"``Lock`` as the first argument, and returns a callable with a different type "
"signature.  In this case, the :class:`ParamSpec` indicates that the returned "
"callable's parameter types are dependent on the parameter types of the "
"callable being passed in::"
msgstr ""

#: ../../library/typing.rst:1113 ../../library/typing.rst:2027
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)"
msgstr ""

#: ../../library/typing.rst:1115
msgid ":class:`ParamSpec`"
msgstr ""

#: ../../library/typing.rst:1116 ../../library/typing.rst:2030
msgid ":ref:`annotating-callables`"
msgstr ""

#: ../../library/typing.rst:1120
msgid "Special typing form to define \"literal types\"."
msgstr ""

#: ../../library/typing.rst:1122
msgid ""
"``Literal`` can be used to indicate to type checkers that the annotated "
"object has a value equivalent to one of the provided literals."
msgstr ""

#: ../../library/typing.rst:1138
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""

#: ../../library/typing.rst:1144
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""

#: ../../library/typing.rst:1152
msgid "Special type construct to mark class variables."
msgstr ""

#: ../../library/typing.rst:1154
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""

#: ../../library/typing.rst:1162
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""

#: ../../library/typing.rst:1164
msgid ""
":data:`ClassVar` is not a class itself, and should not be used "
"with :func:`isinstance` or :func:`issubclass`. :data:`ClassVar` does not "
"change Python runtime behavior, but it can be used by third-party type "
"checkers. For example, a type checker might flag the following code as an "
"error::"
msgstr ""

#: ../../library/typing.rst:1178
msgid ":data:`ClassVar` can now be nested in :data:`Final` and vice versa."
msgstr ""

#: ../../library/typing.rst:1182
msgid "Special typing construct to indicate final names to type checkers."
msgstr ""

#: ../../library/typing.rst:1184
msgid ""
"Final names cannot be reassigned in any scope. Final names declared in class "
"scopes cannot be overridden in subclasses."
msgstr ""

#: ../../library/typing.rst:1198 ../../library/typing.rst:2979
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1205
msgid ":data:`Final` can now be nested in :data:`ClassVar` and vice versa."
msgstr ""

#: ../../library/typing.rst:1209
msgid "Special typing construct to mark a :class:`TypedDict` key as required."
msgstr ""

#: ../../library/typing.rst:1211
msgid ""
"This is mainly useful for ``total=False`` TypedDicts. See :class:`TypedDict` "
"and :pep:`655` for more details."
msgstr ""

#: ../../library/typing.rst:1218
msgid ""
"Special typing construct to mark a :class:`TypedDict` key as potentially "
"missing."
msgstr ""

#: ../../library/typing.rst:1221
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr ""

#: ../../library/typing.rst:1227
msgid ""
"A special typing construct to mark an item of a :class:`TypedDict` as read-"
"only."
msgstr ""

#: ../../library/typing.rst:1239
msgid "There is no runtime checking for this property."
msgstr ""

#: ../../library/typing.rst:1241
msgid "See :class:`TypedDict` and :pep:`705` for more details."
msgstr ""

#: ../../library/typing.rst:1247
msgid "Special typing form to add context-specific metadata to an annotation."
msgstr ""

#: ../../library/typing.rst:1249
msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in "
"a :attr:`!__metadata__` attribute."
msgstr ""

#: ../../library/typing.rst:1254
msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no "
"special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code "
"that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""

#: ../../library/typing.rst:1260
msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking "
"for a function or class."
msgstr ""

#: ../../library/typing.rst:1267
msgid ""
"The responsibility of how to interpret the metadata lies with the tool or "
"library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to "
"determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""

#: ../../library/typing.rst:1275
msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr ""

#: ../../library/typing.rst:1288
msgid "Details of the syntax:"
msgstr ""

#: ../../library/typing.rst:1290
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr ""

#: ../../library/typing.rst:1292
msgid ""
"Multiple metadata elements can be supplied (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../library/typing.rst:1301
msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr ""

#: ../../library/typing.rst:1305
msgid ""
"``Annotated`` must be subscripted with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""

#: ../../library/typing.rst:1308
msgid ""
"The order of the metadata elements is preserved and matters for equality "
"checks::"
msgstr ""

#: ../../library/typing.rst:1315
msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements "
"starts with the innermost annotation::"
msgstr ""

#: ../../library/typing.rst:1322
msgid "Duplicated metadata elements are not removed::"
msgstr ""

#: ../../library/typing.rst:1328
msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr ""

#: ../../library/typing.rst:1342
msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr ""

#: ../../library/typing.rst:1346
msgid "This would be equivalent to::"
msgstr ""

#: ../../library/typing.rst:1350
msgid ""
"where ``T1``, ``T2``, etc. are :class:`TypeVars <TypeVar>`. This would be "
"invalid: only one type should be passed to Annotated."
msgstr ""

#: ../../library/typing.rst:1353
msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""

#: ../../library/typing.rst:1366
msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr ""

#: ../../library/typing.rst:1380
msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ""

#: ../../library/typing.rst:1381
msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr ""

#: ../../library/typing.rst:1388 ../../library/typing.rst:1472
msgid ""
"Special typing construct for marking user-defined type predicate functions."
msgstr ""

#: ../../library/typing.rst:1390
msgid ""
"``TypeIs`` can be used to annotate the return type of a user-defined type "
"predicate function.  ``TypeIs`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean and take at least "
"one positional argument."
msgstr ""

#: ../../library/typing.rst:1395
msgid ""
"``TypeIs`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type "
"predicate\"::"
msgstr ""

#: ../../library/typing.rst:1410
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type predicate.  Such a function should use ``TypeIs[...]`` "
"or :data:`TypeGuard` as its return type to alert static type checkers to "
"this intention.  ``TypeIs`` usually has more intuitive behavior than "
"``TypeGuard``, but it cannot be used when the input and output types are "
"incompatible (e.g., ``list[object]`` to ``list[int]``) or when the function "
"does not return ``True`` for all instances of the narrowed type."
msgstr ""

#: ../../library/typing.rst:1418
msgid ""
"Using  ``-> TypeIs[NarrowedType]`` tells the static type checker that for a "
"given function:"
msgstr ""

#: ../../library/typing.rst:1421 ../../library/typing.rst:1482
msgid "The return value is a boolean."
msgstr ""

#: ../../library/typing.rst:1422
msgid ""
"If the return value is ``True``, the type of its argument is the "
"intersection of the argument's original type and ``NarrowedType``."
msgstr ""

#: ../../library/typing.rst:1424
msgid ""
"If the return value is ``False``, the type of its argument is narrowed to "
"exclude ``NarrowedType``."
msgstr ""

#: ../../library/typing.rst:1450
msgid ""
"The type inside ``TypeIs`` must be consistent with the type of the "
"function's argument; if it is not, static type checkers will raise an "
"error.  An incorrectly written ``TypeIs`` function can lead to unsound "
"behavior in the type system; it is the user's responsibility to write such "
"functions in a type-safe manner."
msgstr ""

#: ../../library/typing.rst:1456
msgid ""
"If a ``TypeIs`` function is a class or instance method, then the type in "
"``TypeIs`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""

#: ../../library/typing.rst:1460
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeIs[TypeB]: ...``, means that "
"if ``foo(arg)`` returns ``True``, then ``arg`` is an instance of ``TypeB``, "
"and if it returns ``False``, it is not an instance of ``TypeB``."
msgstr ""

#: ../../library/typing.rst:1464
msgid ""
"``TypeIs`` also works with type variables.  For more information, "
"see :pep:`742` (Narrowing types with ``TypeIs``)."
msgstr ""

#: ../../library/typing.rst:1474
msgid ""
"Type predicate functions are user-defined functions that return whether "
"their argument is an instance of a particular type. ``TypeGuard`` works "
"similarly to :data:`TypeIs`, but has subtly different effects on type "
"checking behavior (see below)."
msgstr ""

#: ../../library/typing.rst:1479
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""

#: ../../library/typing.rst:1483
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""

#: ../../library/typing.rst:1486
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1502
msgid "``TypeIs`` and ``TypeGuard`` differ in the following ways:"
msgstr ""

#: ../../library/typing.rst:1504
msgid ""
"``TypeIs`` requires the narrowed type to be a subtype of the input type, "
"while ``TypeGuard`` does not.  The main reason is to allow for things like "
"narrowing ``list[object]`` to ``list[str]`` even though the latter is not a "
"subtype of the former, since ``list`` is invariant."
msgstr ""

#: ../../library/typing.rst:1508
msgid ""
"When a ``TypeGuard`` function returns ``True``, type checkers narrow the "
"type of the variable to exactly the ``TypeGuard`` type. When a ``TypeIs`` "
"function returns ``True``, type checkers can infer a more precise type "
"combining the previously known type of the variable with the ``TypeIs`` "
"type. (Technically, this is known as an intersection type.)"
msgstr ""

#: ../../library/typing.rst:1512
msgid ""
"When a ``TypeGuard`` function returns ``False``, type checkers cannot narrow "
"the type of the variable at all. When a ``TypeIs`` function returns "
"``False``, type checkers can narrow the type of the variable to exclude the "
"``TypeIs`` type."
msgstr ""

#: ../../library/typing.rst:1521
msgid "Typing operator to conceptually mark an object as having been unpacked."
msgstr ""

#: ../../library/typing.rst:1523
msgid ""
"For example, using the unpack operator ``*`` on a :ref:`type variable tuple "
"<typevartuple>` is equivalent to using ``Unpack`` to mark the type variable "
"tuple as having been unpacked::"
msgstr ""

#: ../../library/typing.rst:1532
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context "
"of :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""

#: ../../library/typing.rst:1546
msgid ""
"``Unpack`` can also be used along with :class:`typing.TypedDict` for typing "
"``**kwargs`` in a function signature::"
msgstr ""

#: ../../library/typing.rst:1559
msgid ""
"See :pep:`692` for more details on using ``Unpack`` for ``**kwargs`` typing."
msgstr ""

#: ../../library/typing.rst:1564
msgid "Building generic types and type aliases"
msgstr ""

#: ../../library/typing.rst:1566
msgid ""
"The following classes should not be used directly as annotations. Their "
"intended purpose is to be building blocks for creating generic types and "
"type aliases."
msgstr ""

#: ../../library/typing.rst:1570
msgid ""
"These objects can be created through special syntax (:ref:`type parameter "
"lists <type-params>` and the :keyword:`type` statement). For compatibility "
"with Python 3.11 and earlier, they can also be created without the dedicated "
"syntax, as documented below."
msgstr ""

#: ../../library/typing.rst:1577
msgid "Abstract base class for generic types."
msgstr ""

#: ../../library/typing.rst:1579
msgid ""
"A generic type is typically declared by adding a list of type parameters "
"after the class name::"
msgstr ""

#: ../../library/typing.rst:1587
msgid ""
"Such a class implicitly inherits from ``Generic``. The runtime semantics of "
"this syntax are discussed in the :ref:`Language Reference <generic-classes>`."
msgstr ""

#: ../../library/typing.rst:1591
msgid "This class can then be used as follows::"
msgstr ""

#: ../../library/typing.rst:1599
msgid ""
"Here the brackets after the function name indicate a :ref:`generic function "
"<generic-functions>`."
msgstr ""

#: ../../library/typing.rst:1602
msgid ""
"For backwards compatibility, generic classes can also be declared by "
"explicitly inheriting from ``Generic``. In this case, the type parameters "
"must be declared separately::"
msgstr ""

#: ../../library/typing.rst:1619
msgid "Type variable."
msgstr ""

#: ../../library/typing.rst:1621
msgid ""
"The preferred way to construct a type variable is via the dedicated syntax "
"for :ref:`generic functions <generic-functions>`, :ref:`generic classes "
"<generic-classes>`, and :ref:`generic type aliases <generic-type-aliases>`::"
msgstr ""

#: ../../library/typing.rst:1629
msgid ""
"This syntax can also be used to create bound and constrained type variables::"
msgstr ""

#: ../../library/typing.rst:1639
msgid ""
"However, if desired, reusable type variables can also be constructed "
"manually, like so::"
msgstr ""

#: ../../library/typing.rst:1645
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""

#: ../../library/typing.rst:1666
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""

#: ../../library/typing.rst:1669
msgid ""
"The variance of type variables is inferred by type checkers when they are "
"created through the :ref:`type parameter syntax <type-params>` or when "
"``infer_variance=True`` is passed. Manually created type variables may be "
"explicitly marked covariant or contravariant by passing ``covariant=True`` "
"or ``contravariant=True``. By default, manually created type variables are "
"invariant. See :pep:`484` and :pep:`695` for more details."
msgstr ""

#: ../../library/typing.rst:1677
msgid ""
"Bound type variables and constrained type variables have different semantics "
"in several important ways. Using a *bound* type variable means that the "
"``TypeVar`` will be solved using the most specific type possible::"
msgstr ""

#: ../../library/typing.rst:1692
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""

#: ../../library/typing.rst:1704
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr ""

#: ../../library/typing.rst:1715
msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr ""

#: ../../library/typing.rst:1719
msgid "The name of the type variable."
msgstr ""

#: ../../library/typing.rst:1723
msgid "Whether the type var has been explicitly marked as covariant."
msgstr ""

#: ../../library/typing.rst:1727
msgid "Whether the type var has been explicitly marked as contravariant."
msgstr ""

#: ../../library/typing.rst:1731
msgid ""
"Whether the type variable's variance should be inferred by type checkers."
msgstr ""

#: ../../library/typing.rst:1737
msgid "The bound of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1741
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the bound is evaluated only when the attribute is accessed, not "
"when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""

#: ../../library/typing.rst:1747
msgid "A tuple containing the constraints of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1751
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the constraints are evaluated only when the attribute is accessed, "
"not when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""

#: ../../library/typing.rst:1757
msgid ""
"The default value of the type variable, or :data:`typing.NoDefault` if it "
"has no default."
msgstr ""

#: ../../library/typing.rst:1764
msgid ""
"Return whether or not the type variable has a default value. This is "
"equivalent to checking whether :attr:`__default__` is not "
"the :data:`typing.NoDefault` singleton, except that it does not force "
"evaluation of the :ref:`lazily evaluated <lazy-evaluation>` default value."
msgstr ""

#: ../../library/typing.rst:1773
msgid ""
"Type variables can now be declared using the :ref:`type parameter <type-"
"params>` syntax introduced by :pep:`695`. The ``infer_variance`` parameter "
"was added."
msgstr ""

#: ../../library/typing.rst:1779 ../../library/typing.rst:1918
#: ../../library/typing.rst:2020
msgid "Support for default values was added."
msgstr ""

#: ../../library/typing.rst:1785
msgid ""
"Type variable tuple. A specialized form of :ref:`type variable <typevar>` "
"that enables *variadic* generics."
msgstr ""

#: ../../library/typing.rst:1788
msgid ""
"Type variable tuples can be declared in :ref:`type parameter lists <type-"
"params>` using a single asterisk (``*``) before the name::"
msgstr ""

#: ../../library/typing.rst:1794
msgid "Or by explicitly invoking the ``TypeVarTuple`` constructor::"
msgstr ""

#: ../../library/typing.rst:1802
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""

#: ../../library/typing.rst:1824
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""

#: ../../library/typing.rst:1832
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""

#: ../../library/typing.rst:1839
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""

#: ../../library/typing.rst:1847
msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr ""

#: ../../library/typing.rst:1863
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr ""

#: ../../library/typing.rst:1870
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr ""

#: ../../library/typing.rst:1880
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""

#: ../../library/typing.rst:1887
msgid "See :pep:`646` for more details on type variable tuples."
msgstr ""

#: ../../library/typing.rst:1891
msgid "The name of the type variable tuple."
msgstr ""

#: ../../library/typing.rst:1895
msgid ""
"The default value of the type variable tuple, or :data:`typing.NoDefault` if "
"it has no default."
msgstr ""

#: ../../library/typing.rst:1902
msgid ""
"Return whether or not the type variable tuple has a default value. This is "
"equivalent to checking whether :attr:`__default__` is not "
"the :data:`typing.NoDefault` singleton, except that it does not force "
"evaluation of the :ref:`lazily evaluated <lazy-evaluation>` default value."
msgstr ""

#: ../../library/typing.rst:1913
msgid ""
"Type variable tuples can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""

#: ../../library/typing.rst:1922
msgid ""
"Parameter specification variable.  A specialized version of :ref:`type "
"variables <typevar>`."
msgstr ""

#: ../../library/typing.rst:1925
msgid ""
"In :ref:`type parameter lists <type-params>`, parameter specifications can "
"be declared with two asterisks (``**``)::"
msgstr ""

#: ../../library/typing.rst:1930
msgid ""
"For compatibility with Python 3.11 and earlier, ``ParamSpec`` objects can "
"also be created as follows::"
msgstr ""

#: ../../library/typing.rst:1935
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""

#: ../../library/typing.rst:1942
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""

#: ../../library/typing.rst:1962
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""

#: ../../library/typing.rst:1966
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""

#: ../../library/typing.rst:1968
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""

#: ../../library/typing.rst:1975
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, "
"``P.args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` "
"and :class:`ParamSpecKwargs`."
msgstr ""

#: ../../library/typing.rst:1987
msgid "The name of the parameter specification."
msgstr ""

#: ../../library/typing.rst:1991
msgid ""
"The default value of the parameter specification, "
"or :data:`typing.NoDefault` if it has no default."
msgstr ""

#: ../../library/typing.rst:1998
msgid ""
"Return whether or not the parameter specification has a default value. This "
"is equivalent to checking whether :attr:`__default__` is not "
"the :data:`typing.NoDefault` singleton, except that it does not force "
"evaluation of the :ref:`lazily evaluated <lazy-evaluation>` default value."
msgstr ""

#: ../../library/typing.rst:2005
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar "
"to :class:`TypeVar`.  However the actual semantics of these keywords are yet "
"to be decided."
msgstr ""

#: ../../library/typing.rst:2015
msgid ""
"Parameter specifications can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""

#: ../../library/typing.rst:2023
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""

#: ../../library/typing.rst:2029
msgid ":data:`Concatenate`"
msgstr ""

#: ../../library/typing.rst:2035
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The "
"``P.args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, "
"and ``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended "
"for runtime introspection and have no special meaning to static type "
"checkers."
msgstr ""

#: ../../library/typing.rst:2040
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``:"
msgstr ""

#: ../../library/typing.rst:2057
msgid "The type of type aliases created through the :keyword:`type` statement."
msgstr ""

#: ../../library/typing.rst:2071
msgid "The name of the type alias:"
msgstr ""

#: ../../library/typing.rst:2081
msgid "The module in which the type alias was defined::"
msgstr ""

#: ../../library/typing.rst:2089
msgid ""
"The type parameters of the type alias, or an empty tuple if the alias is not "
"generic:"
msgstr ""

#: ../../library/typing.rst:2103
msgid ""
"The type alias's value. This is :ref:`lazily evaluated <lazy-evaluation>`, "
"so names used in the definition of the alias are not resolved until the "
"``__value__`` attribute is accessed:"
msgstr ""

#: ../../library/typing.rst:2121
msgid "Other special directives"
msgstr ""

#: ../../library/typing.rst:2123
msgid ""
"These functions and classes should not be used directly as annotations. "
"Their intended purpose is to be building blocks for creating and declaring "
"types."
msgstr ""

#: ../../library/typing.rst:2129
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ""

#: ../../library/typing.rst:2131 ../../library/typing.rst:2221
#: ../../library/typing.rst:3258
msgid "Usage::"
msgstr ""

#: ../../library/typing.rst:2137
msgid "This is equivalent to::"
msgstr "Esto equivale a::"

#: ../../library/typing.rst:2141
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""

#: ../../library/typing.rst:2150
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""

#: ../../library/typing.rst:2152
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""

#: ../../library/typing.rst:2158
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr ""

#: ../../library/typing.rst:2168
msgid "``NamedTuple`` subclasses can be generic::"
msgstr ""

#: ../../library/typing.rst:2174
msgid "Backward-compatible usage::"
msgstr ""

#: ../../library/typing.rst:2184
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ""

#: ../../library/typing.rst:2187
msgid "Added support for default values, methods, and docstrings."
msgstr ""

#: ../../library/typing.rst:2190
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""

#: ../../library/typing.rst:2194
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""

#: ../../library/typing.rst:2198
msgid "Added support for generic namedtuples."
msgstr ""

#: ../../library/typing.rst:2205
msgid ""
"The undocumented keyword argument syntax for creating NamedTuple classes "
"(``NT = NamedTuple(\"NT\", x=int)``) is deprecated, and will be disallowed "
"in 3.15. Use the class-based syntax or the functional syntax instead."
msgstr ""

#: ../../library/typing.rst:2212
msgid ""
"When using the functional syntax to create a NamedTuple class, failing to "
"pass a value to the 'fields' parameter (``NT = NamedTuple(\"NT\")``) is "
"deprecated. Passing ``None`` to the 'fields' parameter (``NT = "
"NamedTuple(\"NT\", None)``) is also deprecated. Both will be disallowed in "
"Python 3.15. To create a NamedTuple class with 0 fields, use ``class "
"NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", [])``."
msgstr ""

#: ../../library/typing.rst:2216
msgid "Helper class to create low-overhead :ref:`distinct types <distinct>`."
msgstr ""

#: ../../library/typing.rst:2218
msgid ""
"A ``NewType`` is considered a distinct type by a typechecker. At runtime, "
"however, calling a ``NewType`` returns its argument unchanged."
msgstr ""

#: ../../library/typing.rst:2228
msgid "The module in which the new type is defined."
msgstr ""

#: ../../library/typing.rst:2232
msgid "The name of the new type."
msgstr ""

#: ../../library/typing.rst:2236
msgid "The type that the new type is based on."
msgstr ""

#: ../../library/typing.rst:2240
msgid "``NewType`` is now a class rather than a function."
msgstr ""

#: ../../library/typing.rst:2245
msgid "Base class for protocol classes."
msgstr ""

#: ../../library/typing.rst:2247
msgid "Protocol classes are defined like this::"
msgstr ""

#: ../../library/typing.rst:2253
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""

#: ../../library/typing.rst:2265
msgid ""
"See :pep:`544` for more details. Protocol classes decorated "
"with :func:`runtime_checkable` (described later) act as simple-minded "
"runtime protocols that check only the presence of given attributes, ignoring "
"their type signatures."
msgstr ""

#: ../../library/typing.rst:2270
msgid "Protocol classes can be generic, for example::"
msgstr ""

#: ../../library/typing.rst:2276
msgid ""
"In code that needs to be compatible with Python 3.11 or older, generic "
"Protocols can be written as follows::"
msgstr ""

#: ../../library/typing.rst:2289
msgid "Mark a protocol class as a runtime protocol."
msgstr ""

#: ../../library/typing.rst:2291
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such "
"as :class:`~collections.abc.Iterable`.  For example::"
msgstr ""

#: ../../library/typing.rst:2311
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For "
"example, :class:`ssl.SSLObject` is a class, therefore it passes "
"an :func:`issubclass` check against :ref:`Callable <annotating-callables>`. "
"However, the ``ssl.SSLObject.__init__`` method exists only to raise "
"a :exc:`TypeError` with a more informative message, therefore making it "
"impossible to call (instantiate) :class:`ssl.SSLObject`."
msgstr ""

#: ../../library/typing.rst:2322
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""

#: ../../library/typing.rst:2330
msgid ""
"The internal implementation of :func:`isinstance` checks against runtime-"
"checkable protocols now uses :func:`inspect.getattr_static` to look up "
"attributes (previously, :func:`hasattr` was used). As a result, some objects "
"which used to be considered instances of a runtime-checkable protocol may no "
"longer be considered instances of that protocol on Python 3.12+, and vice "
"versa. Most users are unlikely to be affected by this change."
msgstr ""

#: ../../library/typing.rst:2339
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. "
"See :ref:`\"What's new in Python 3.12\" <whatsnew-typing-py312>` for more "
"details."
msgstr ""

#: ../../library/typing.rst:2350
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""

#: ../../library/typing.rst:2353
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""

#: ../../library/typing.rst:2369
msgid ""
"An alternative way to create a ``TypedDict`` is by using function-call "
"syntax. The second argument must be a literal :class:`dict`::"
msgstr ""

#: ../../library/typing.rst:2374
msgid ""
"This functional syntax allows defining keys which are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens::"
msgstr ""

#: ../../library/typing.rst:2386
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""

#: ../../library/typing.rst:2397
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""

#: ../../library/typing.rst:2400
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""

#: ../../library/typing.rst:2410
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""

#: ../../library/typing.rst:2415
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr ""

#: ../../library/typing.rst:2430
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""

#: ../../library/typing.rst:2437
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""

#: ../../library/typing.rst:2445
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""

#: ../../library/typing.rst:2460
msgid "A ``TypedDict`` can be generic::"
msgstr ""

#: ../../library/typing.rst:2466
msgid ""
"To create a generic ``TypedDict`` that is compatible with Python 3.11 or "
"lower, inherit from :class:`Generic` explicitly:"
msgstr ""

#: ../../library/typing.rst:2477
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts "
"(see :ref:`annotations-howto` for more information on annotations best "
"practices), :attr:`__total__`, :attr:`__required_keys__`, "
"and :attr:`__optional_keys__`."
msgstr ""

#: ../../library/typing.rst:2483
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr ""

#: ../../library/typing.rst:2499
msgid ""
"This attribute reflects *only* the value of the ``total`` argument to the "
"current ``TypedDict`` class, not whether the class is semantically total. "
"For example, a ``TypedDict`` with ``__total__`` set to ``True`` may have "
"keys marked with :data:`NotRequired`, or it may inherit from another "
"``TypedDict`` with ``total=False``. Therefore, it is generally better to "
"use :attr:`__required_keys__` and :attr:`__optional_keys__` for "
"introspection."
msgstr ""

#: ../../library/typing.rst:2512
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` "
"return :class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""

#: ../../library/typing.rst:2515
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""

#: ../../library/typing.rst:2518
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""

#: ../../library/typing.rst:2543
msgid ""
"If ``from __future__ import annotations`` is used or if annotations are "
"given as strings, annotations are not evaluated when the ``TypedDict`` is "
"defined. Therefore, the runtime introspection that ``__required_keys__`` and "
"``__optional_keys__`` rely on may not work properly, and the values of the "
"attributes may be incorrect."
msgstr ""

#: ../../library/typing.rst:2549
msgid "Support for :data:`ReadOnly` is reflected in the following attributes::"
msgstr ""

#: ../../library/typing.rst:2553
msgid ""
"A :class:`frozenset` containing the names of all read-only keys. Keys are "
"read-only if they carry the :data:`ReadOnly` qualifier."
msgstr ""

#: ../../library/typing.rst:2560
msgid ""
"A :class:`frozenset` containing the names of all mutable keys. Keys are "
"mutable if they do not carry the :data:`ReadOnly` qualifier."
msgstr ""

#: ../../library/typing.rst:2565
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""

#: ../../library/typing.rst:2569
msgid ""
"Added support for marking individual keys as :data:`Required` "
"or :data:`NotRequired`. See :pep:`655`."
msgstr ""

#: ../../library/typing.rst:2573
msgid "Added support for generic ``TypedDict``\\ s."
msgstr ""

#: ../../library/typing.rst:2576
msgid ""
"Removed support for the keyword-argument method of creating ``TypedDict``\\ "
"s."
msgstr ""

#: ../../library/typing.rst:2579
msgid "Support for the :data:`ReadOnly` qualifier was added."
msgstr ""

#: ../../library/typing.rst:2588
msgid ""
"When using the functional syntax to create a TypedDict class, failing to "
"pass a value to the 'fields' parameter (``TD = TypedDict(\"TD\")``) is "
"deprecated. Passing ``None`` to the 'fields' parameter (``TD = "
"TypedDict(\"TD\", None)``) is also deprecated. Both will be disallowed in "
"Python 3.15. To create a TypedDict class with 0 fields, use ``class "
"TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``."
msgstr ""

#: ../../library/typing.rst:2591
msgid "Protocols"
msgstr ""

#: ../../library/typing.rst:2593
msgid ""
"The following protocols are provided by the typing module. All are decorated "
"with :func:`@runtime_checkable <runtime_checkable>`."
msgstr ""

#: ../../library/typing.rst:2598
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""

#: ../../library/typing.rst:2603
msgid "An ABC with one abstract method ``__bytes__``."
msgstr ""

#: ../../library/typing.rst:2607
msgid "An ABC with one abstract method ``__complex__``."
msgstr ""

#: ../../library/typing.rst:2611
msgid "An ABC with one abstract method ``__float__``."
msgstr ""

#: ../../library/typing.rst:2615
msgid "An ABC with one abstract method ``__index__``."
msgstr ""

#: ../../library/typing.rst:2621
msgid "An ABC with one abstract method ``__int__``."
msgstr ""

#: ../../library/typing.rst:2625
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""

#: ../../library/typing.rst:2629
msgid "ABCs for working with IO"
msgstr ""

#: ../../library/typing.rst:2635
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""

#: ../../library/typing.rst:2641
msgid "Functions and decorators"
msgstr ""

#: ../../library/typing.rst:2645
msgid "Cast a value to a type."
msgstr ""

#: ../../library/typing.rst:2647
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""

#: ../../library/typing.rst:2654
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""

#: ../../library/typing.rst:2656
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""

#: ../../library/typing.rst:2659
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""

#: ../../library/typing.rst:2666
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr ""

#: ../../library/typing.rst:2680
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr ""

#: ../../library/typing.rst:2682
msgid "Example::"
msgstr ""

#: ../../library/typing.rst:2693
msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases."
msgstr ""

#: ../../library/typing.rst:2698
msgid ""
"If a type checker finds that a call to ``assert_never()`` is reachable, it "
"will emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error pointing "
"out that ``unreachable`` is of type :class:`float`. For a call to "
"``assert_never`` to pass type checking, the inferred type of the argument "
"passed in must be the bottom type, :data:`Never`, and nothing else."
msgstr ""

#: ../../library/typing.rst:2706
msgid "At runtime, this throws an exception when called."
msgstr ""

#: ../../library/typing.rst:2709
msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ has more information about "
"exhaustiveness checking with static typing."
msgstr ""

#: ../../library/typing.rst:2717
msgid "Ask a static type checker to reveal the inferred type of an expression."
msgstr ""

#: ../../library/typing.rst:2719
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the inferred type of the argument. For example::"
msgstr ""

#: ../../library/typing.rst:2725
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr ""

#: ../../library/typing.rst:2728
msgid ""
"At runtime, this function prints the runtime type of its argument "
"to :data:`sys.stderr` and returns the argument unchanged (allowing the call "
"to be used within an expression)::"
msgstr ""

#: ../../library/typing.rst:2735
msgid ""
"Note that the runtime type may be different from (more or less specific "
"than) the type statically inferred by a type checker."
msgstr ""

#: ../../library/typing.rst:2738
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing``, however, "
"allows your code to run without runtime errors and communicates intent more "
"clearly."
msgstr ""

#: ../../library/typing.rst:2749
msgid ""
"Decorator to mark an object as providing :func:`dataclass "
"<dataclasses.dataclass>`-like behavior."
msgstr ""

#: ../../library/typing.rst:2752
msgid ""
"``dataclass_transform`` may be used to decorate a class, metaclass, or a "
"function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class in a similar way "
"to :func:`@dataclasses.dataclass <dataclasses.dataclass>`."
msgstr ""

#: ../../library/typing.rst:2759
msgid "Example usage with a decorator function:"
msgstr ""

#: ../../library/typing.rst:2773
msgid "On a base class::"
msgstr ""

#: ../../library/typing.rst:2782
msgid "On a metaclass::"
msgstr ""

#: ../../library/typing.rst:2793
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass "
"<dataclasses.dataclass>`. For example, type checkers will assume these "
"classes have ``__init__`` methods that accept ``id`` and ``name``."
msgstr ""

#: ../../library/typing.rst:2799
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""

#: ../../library/typing.rst:2807
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""

#: ../../library/typing.rst
msgid "Parameters"
msgstr ""

#: ../../library/typing.rst:2811
msgid ""
"Indicates whether the ``eq`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``True``."
msgstr ""

#: ../../library/typing.rst:2816
msgid ""
"Indicates whether the ``order`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2821
msgid ""
"Indicates whether the ``kw_only`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2826
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``.  .. "
"versionadded:: 3.12"
msgstr ""

#: ../../library/typing.rst:2827
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2833
msgid ""
"Specifies a static list of supported classes or functions that describe "
"fields, similar to :func:`dataclasses.field`. Defaults to ``()``."
msgstr ""

#: ../../library/typing.rst:2839
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""

#: ../../library/typing.rst:2843
msgid ""
"Type checkers recognize the following optional parameters on field "
"specifiers:"
msgstr ""

#: ../../library/typing.rst:2846
msgid "**Recognised parameters for field specifiers**"
msgstr ""

#: ../../library/typing.rst:2850
msgid "Parameter name"
msgstr ""

#: ../../library/typing.rst:2851
msgid "Description"
msgstr "Descripción"

#: ../../library/typing.rst:2852
msgid "``init``"
msgstr ""

#: ../../library/typing.rst:2853
msgid ""
"Indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""

#: ../../library/typing.rst:2856
msgid "``default``"
msgstr ""

#: ../../library/typing.rst:2857
msgid "Provides the default value for the field."
msgstr ""

#: ../../library/typing.rst:2858
msgid "``default_factory``"
msgstr ""

#: ../../library/typing.rst:2859
msgid ""
"Provides a runtime callback that returns the default value for the field. If "
"neither ``default`` nor ``default_factory`` are specified, the field is "
"assumed to have no default value and must be provided a value when the class "
"is instantiated."
msgstr ""

#: ../../library/typing.rst:2864
msgid "``factory``"
msgstr ""

#: ../../library/typing.rst:2865
msgid "An alias for the ``default_factory`` parameter on field specifiers."
msgstr ""

#: ../../library/typing.rst:2866
msgid "``kw_only``"
msgstr ""

#: ../../library/typing.rst:2867
msgid ""
"Indicates whether the field should be marked as keyword-only. If ``True``, "
"the field will be keyword-only. If ``False``, it will not be keyword-only. "
"If unspecified, the value of the ``kw_only`` parameter on the object "
"decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""

#: ../../library/typing.rst:2873
msgid "``alias``"
msgstr ""

#: ../../library/typing.rst:2874
msgid ""
"Provides an alternative name for the field. This alternative name is used in "
"the synthesized ``__init__`` method."
msgstr ""

#: ../../library/typing.rst:2877
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""

#: ../../library/typing.rst:2881
msgid "See :pep:`681` for more details."
msgstr ""

#: ../../library/typing.rst:2889
msgid "Decorator for creating overloaded functions and methods."
msgstr ""

#: ../../library/typing.rst:2891
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method)."
msgstr ""

#: ../../library/typing.rst:2896
msgid ""
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition. The non-``@overload``-decorated definition, meanwhile, will be "
"used at runtime but should be ignored by a type checker.  At runtime, "
"calling an ``@overload``-decorated function directly will "
"raise :exc:`NotImplementedError`."
msgstr ""

#: ../../library/typing.rst:2904
msgid ""
"An example of overload that gives a more precise type than can be expressed "
"using a union or a type variable:"
msgstr ""

#: ../../library/typing.rst:2921
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""

#: ../../library/typing.rst:2923
msgid ""
"Overloaded functions can now be introspected at runtime "
"using :func:`get_overloads`."
msgstr ""

#: ../../library/typing.rst:2930
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*."
msgstr ""

#: ../../library/typing.rst:2933
msgid ""
"*func* is the function object for the implementation of the overloaded "
"function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""

#: ../../library/typing.rst:2940
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr ""

#: ../../library/typing.rst:2948
msgid "Clear all registered overloads in the internal registry."
msgstr ""

#: ../../library/typing.rst:2950
msgid "This can be used to reclaim the memory used by the registry."
msgstr ""

#: ../../library/typing.rst:2957
msgid "Decorator to indicate final methods and final classes."
msgstr ""

#: ../../library/typing.rst:2959
msgid ""
"Decorating a method with ``@final`` indicates to a type checker that the "
"method cannot be overridden in a subclass. Decorating a class with "
"``@final`` indicates that it cannot be subclassed."
msgstr ""

#: ../../library/typing.rst:2984
msgid ""
"The decorator will now attempt to set a ``__final__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""

#: ../../library/typing.rst:2995
msgid "Decorator to indicate that annotations are not type hints."
msgstr ""

#: ../../library/typing.rst:2997
msgid ""
"This works as a class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but "
"not to methods defined in its superclasses or subclasses). Type checkers "
"will ignore all annotations in a function or class with this decorator."
msgstr ""

#: ../../library/typing.rst:3003
msgid "``@no_type_check`` mutates the decorated object in place."
msgstr ""

#: ../../library/typing.rst:3007
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr ""

#: ../../library/typing.rst:3009
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""

#: ../../library/typing.rst:3014
msgid ""
"No type checker ever added support for ``@no_type_check_decorator``. It is "
"therefore deprecated, and will be removed in Python 3.15."
msgstr ""

#: ../../library/typing.rst:3018
msgid ""
"Decorator to indicate that a method in a subclass is intended to override a "
"method or attribute in a superclass."
msgstr ""

#: ../../library/typing.rst:3021
msgid ""
"Type checkers should emit an error if a method decorated with ``@override`` "
"does not, in fact, override anything. This helps prevent bugs that may occur "
"when a base class is changed without an equivalent change to a child class."
msgstr ""

#: ../../library/typing.rst:3043
msgid "There is no runtime checking of this property."
msgstr ""

#: ../../library/typing.rst:3045
msgid ""
"The decorator will attempt to set an ``__override__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, "
"\"__override__\", False)`` can be used at runtime to determine whether an "
"object ``obj`` has been marked as an override.  If the decorated object does "
"not support setting attributes, the decorator returns the object unchanged "
"without raising an exception."
msgstr ""

#: ../../library/typing.rst:3052
msgid "See :pep:`698` for more details."
msgstr ""

#: ../../library/typing.rst:3059
msgid "Decorator to mark a class or function as unavailable at runtime."
msgstr ""

#: ../../library/typing.rst:3061
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

#: ../../library/typing.rst:3072
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""

#: ../../library/typing.rst:3076
msgid "Introspection helpers"
msgstr ""

#: ../../library/typing.rst:3080
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""

#: ../../library/typing.rst:3083
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals``, ``locals`` and (where applicable) :ref:`type parameter <type-"
"params>` namespaces. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""

#: ../../library/typing.rst:3091
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example:"
msgstr ""

#: ../../library/typing.rst:3108
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""

#: ../../library/typing.rst:3113
msgid ""
"Added ``include_extras`` parameter as part of :pep:`593`. See the "
"documentation on :data:`Annotated` for more information."
msgstr ""

#: ../../library/typing.rst:3117
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""

#: ../../library/typing.rst:3124
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``."
msgstr ""

#: ../../library/typing.rst:3127
msgid ""
"If ``X`` is a typing-module alias for a builtin or :mod:`collections` class, "
"it will be normalized to the original class. If ``X`` is an instance "
"of :class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return the "
"underlying :class:`ParamSpec`. Return ``None`` for unsupported objects."
msgstr ""

#: ../../library/typing.rst:3133 ../../library/typing.rst:3156
msgid "Examples:"
msgstr ""

#: ../../library/typing.rst:3148
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``."
msgstr ""

#: ../../library/typing.rst:3151
msgid ""
"If ``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original "
"arguments ``[Y, Z, ...]`` due to type caching. Return ``()`` for unsupported "
"objects."
msgstr ""

#: ../../library/typing.rst:3168
msgid "Return the set of members defined in a :class:`Protocol`."
msgstr ""

#: ../../library/typing.rst:3179
msgid "Raise :exc:`TypeError` for arguments that are not Protocols."
msgstr ""

#: ../../library/typing.rst:3185
msgid "Determine if a type is a :class:`Protocol`."
msgstr ""

#: ../../library/typing.rst:3200
msgid "Check if a type is a :class:`TypedDict`."
msgstr ""

#: ../../library/typing.rst:3221
msgid ""
"Class used for internal typing representation of string forward references."
msgstr ""

#: ../../library/typing.rst:3223
msgid ""
"For example, ``List[\"SomeClass\"]`` is implicitly transformed into "
"``List[ForwardRef(\"SomeClass\")]``.  ``ForwardRef`` should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../library/typing.rst:3228
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""

#: ../../library/typing.rst:3236
msgid ""
"A sentinel object used to indicate that a type parameter has no default "
"value. For example:"
msgstr ""

#: ../../library/typing.rst:3251
msgid "Constant"
msgstr ""

#: ../../library/typing.rst:3255
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime."
msgstr ""

#: ../../library/typing.rst:3266
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""

#: ../../library/typing.rst:3273
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""

#: ../../library/typing.rst:3285
msgid "Deprecated aliases"
msgstr ""

#: ../../library/typing.rst:3287
msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the typing module in "
"order to support parameterizing these generic classes using ``[]``. However, "
"the aliases became redundant in Python 3.9 when the corresponding pre-"
"existing classes were enhanced to support ``[]`` (see :pep:`585`)."
msgstr ""

#: ../../library/typing.rst:3294
msgid ""
"The redundant types are deprecated as of Python 3.9. However, while the "
"aliases may be removed at some point, removal of these aliases is not "
"currently planned. As such, no deprecation warnings are currently issued by "
"the interpreter for these aliases."
msgstr ""

#: ../../library/typing.rst:3299
msgid ""
"If at some point it is decided to remove these deprecated aliases, a "
"deprecation warning will be issued by the interpreter for at least two "
"releases prior to removal. The aliases are guaranteed to remain in the "
"typing module without deprecation warnings until at least Python 3.14."
msgstr ""

#: ../../library/typing.rst:3304
msgid ""
"Type checkers are encouraged to flag uses of the deprecated types if the "
"program they are checking targets a minimum Python version of 3.9 or newer."
msgstr ""

#: ../../library/typing.rst:3310
msgid "Aliases to built-in types"
msgstr ""

#: ../../library/typing.rst:3314
msgid "Deprecated alias to :class:`dict`."
msgstr ""

#: ../../library/typing.rst:3316
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Mapping` rather than to use :class:`dict` "
"or :class:`!typing.Dict`."
msgstr ""

#: ../../library/typing.rst:3320 ../../library/typing.rst:3551
msgid "This type can be used as follows::"
msgstr ""

#: ../../library/typing.rst:3325
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3331
msgid "Deprecated alias to :class:`list`."
msgstr ""

#: ../../library/typing.rst:3333
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Sequence` or :class:`Iterable` rather than "
"to use :class:`list` or :class:`!typing.List`."
msgstr ""

#: ../../library/typing.rst:3337
msgid "This type may be used as follows::"
msgstr ""

#: ../../library/typing.rst:3345
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3351
msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr ""

#: ../../library/typing.rst:3353
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`AbstractSet` rather than to use :class:`set` "
"or :class:`!typing.Set`."
msgstr ""

#: ../../library/typing.rst:3357
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3363
msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr ""

#: ../../library/typing.rst:3365
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3372
msgid "Deprecated alias for :class:`tuple`."
msgstr ""

#: ../../library/typing.rst:3374
msgid ""
":class:`tuple` and ``Tuple`` are special-cased in the type system; "
"see :ref:`annotating-tuples` for more details."
msgstr ""

#: ../../library/typing.rst:3377
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3383
msgid "Deprecated alias to :class:`type`."
msgstr ""

#: ../../library/typing.rst:3385
msgid ""
"See :ref:`type-of-class-objects` for details on using :class:`type` or "
"``typing.Type`` in type annotations."
msgstr ""

#: ../../library/typing.rst:3390
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3397
msgid "Aliases to types in :mod:`collections`"
msgstr ""

#: ../../library/typing.rst:3401
msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr ""

#: ../../library/typing.rst:3405
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3411
msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr ""

#: ../../library/typing.rst:3415
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3421
msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr ""

#: ../../library/typing.rst:3425
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3431
msgid "Deprecated alias to :class:`collections.Counter`."
msgstr ""

#: ../../library/typing.rst:3435
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3441
msgid "Deprecated alias to :class:`collections.deque`."
msgstr ""

#: ../../library/typing.rst:3445
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3452
msgid "Aliases to other concrete types"
msgstr ""

#: ../../library/typing.rst:3457
msgid ""
"Deprecated aliases corresponding to the return types from :func:`re.compile` "
"and :func:`re.match`."
msgstr ""

#: ../../library/typing.rst:3460
msgid ""
"These types (and the corresponding functions) are generic "
"over :data:`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."
msgstr ""

#: ../../library/typing.rst:3465
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3471
msgid "Deprecated alias for :class:`str`."
msgstr ""

#: ../../library/typing.rst:3473
msgid ""
"``Text`` is provided to supply a forward compatible path for Python 2 code: "
"in Python 2, ``Text`` is an alias for ``unicode``."
msgstr ""

#: ../../library/typing.rst:3477
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""

#: ../../library/typing.rst:3485
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""

#: ../../library/typing.rst:3495
msgid "Aliases to container ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3499
msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr ""

#: ../../library/typing.rst:3501
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3507
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, "
"and :class:`memoryview` of byte sequences."
msgstr ""

#: ../../library/typing.rst:3511
msgid ""
"Prefer :class:`collections.abc.Buffer`, or a union like ``bytes | bytearray "
"| memoryview``."
msgstr ""

#: ../../library/typing.rst:3515
msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr ""

#: ../../library/typing.rst:3519
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3525
msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr ""

#: ../../library/typing.rst:3527
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3533
msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr ""

#: ../../library/typing.rst:3535
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3541
msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr ""

#: ../../library/typing.rst:3543
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3549
msgid "Deprecated alias to :class:`collections.abc.Mapping`."
msgstr ""

#: ../../library/typing.rst:3556
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3562
msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr ""

#: ../../library/typing.rst:3564
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3570
msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr ""

#: ../../library/typing.rst:3572
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3579
msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr ""

#: ../../library/typing.rst:3581
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3588
msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr ""

#: ../../library/typing.rst:3590
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3596
msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr ""

#: ../../library/typing.rst:3598
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3604
msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr ""

#: ../../library/typing.rst:3606
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3613
msgid "Aliases to asynchronous ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3617
msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr ""

#: ../../library/typing.rst:3619
msgid ""
"The variance and order of type variables correspond to those "
"of :class:`Generator`, for example::"
msgstr ""

#: ../../library/typing.rst:3630
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3636
msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr ""

#: ../../library/typing.rst:3638
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3647
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../library/typing.rst:3651
msgid "The ``SendType`` defaults to :const:`!None`::"
msgstr ""

#: ../../library/typing.rst:3658
msgid "It is also possible to set this type explicitly::"
msgstr ""

#: ../../library/typing.rst:3665
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3675
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3680
msgid "The ``SendType`` parameter now has a default."
msgstr ""

#: ../../library/typing.rst:3685
msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr ""

#: ../../library/typing.rst:3689
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3695
msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr ""

#: ../../library/typing.rst:3699
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3705
msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr ""

#: ../../library/typing.rst:3709
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3716
msgid "Aliases to other ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3720
msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr ""

#: ../../library/typing.rst:3722
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3728
msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr ""

#: ../../library/typing.rst:3730
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3736
msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr ""

#: ../../library/typing.rst:3738
msgid ""
"See :ref:`annotating-callables` for details on how to "
"use :class:`collections.abc.Callable` and ``typing.Callable`` in type "
"annotations."
msgstr ""

#: ../../library/typing.rst:3741
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3751
msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr ""

#: ../../library/typing.rst:3753
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3762
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../library/typing.rst:3766
msgid ""
"The ``SendType`` and ``ReturnType`` parameters default to :const:`!None`::"
msgstr ""

#: ../../library/typing.rst:3773
msgid "It is also possible to set these types explicitly::"
msgstr ""

#: ../../library/typing.rst:3780
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3788
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3792
msgid "Default values for the send and return types were added."
msgstr ""

#: ../../library/typing.rst:3797
msgid "Deprecated alias to :class:`collections.abc.Hashable`."
msgstr ""

#: ../../library/typing.rst:3799
msgid "Use :class:`collections.abc.Hashable` directly instead."
msgstr ""

#: ../../library/typing.rst:3804
msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr ""

#: ../../library/typing.rst:3806
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3812
msgid "Deprecated alias to :class:`collections.abc.Sized`."
msgstr ""

#: ../../library/typing.rst:3814
msgid "Use :class:`collections.abc.Sized` directly instead."
msgstr ""

#: ../../library/typing.rst:3820
msgid "Aliases to :mod:`contextlib` ABCs"
msgstr ""

#: ../../library/typing.rst:3824
msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr ""

#: ../../library/typing.rst:3826
msgid ""
"The first type parameter, ``T_co``, represents the type returned by "
"the :meth:`~object.__enter__` method. The optional second type parameter, "
"``ExitT_co``, which defaults to ``bool | None``, represents the type "
"returned by the :meth:`~object.__exit__` method."
msgstr ""

#: ../../library/typing.rst:3833
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3838
msgid "Added the optional second type parameter, ``ExitT_co``."
msgstr ""

#: ../../library/typing.rst:3843
msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""

#: ../../library/typing.rst:3845
msgid ""
"The first type parameter, ``T_co``, represents the type returned by "
"the :meth:`~object.__aenter__` method. The optional second type parameter, "
"``AExitT_co``, which defaults to ``bool | None``, represents the type "
"returned by the :meth:`~object.__aexit__` method."
msgstr ""

#: ../../library/typing.rst:3852
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3857
msgid "Added the optional second type parameter, ``AExitT_co``."
msgstr ""

#: ../../library/typing.rst:3861
msgid "Deprecation Timeline of Major Features"
msgstr ""

#: ../../library/typing.rst:3863
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""

#: ../../library/typing.rst:3870
msgid "Feature"
msgstr ""

#: ../../library/typing.rst:3871
msgid "Deprecated in"
msgstr ""

#: ../../library/typing.rst:3872
msgid "Projected removal"
msgstr ""

#: ../../library/typing.rst:3873
msgid "PEP/issue"
msgstr ""

#: ../../library/typing.rst:3874
msgid "``typing`` versions of standard collections"
msgstr ""

#: ../../library/typing.rst:3875 ../../library/typing.rst:3879
msgid "3.9"
msgstr ""

#: ../../library/typing.rst:3876
msgid "Undecided (see :ref:`deprecated-aliases` for more information)"
msgstr ""

#: ../../library/typing.rst:3877
msgid ":pep:`585`"
msgstr ""

#: ../../library/typing.rst:3878
msgid ":class:`typing.ByteString`"
msgstr ""

#: ../../library/typing.rst:3880
msgid "3.14"
msgstr ""

#: ../../library/typing.rst:3881
msgid ":gh:`91896`"
msgstr ""

#: ../../library/typing.rst:3882
msgid ":data:`typing.Text`"
msgstr ""

#: ../../library/typing.rst:3883
msgid "3.11"
msgstr ""

#: ../../library/typing.rst:3884 ../../library/typing.rst:3888
#: ../../library/typing.rst:3892
msgid "Undecided"
msgstr ""

#: ../../library/typing.rst:3885
msgid ":gh:`92332`"
msgstr ""

#: ../../library/typing.rst:3886
msgid ":class:`typing.Hashable` and :class:`typing.Sized`"
msgstr ""

#: ../../library/typing.rst:3887 ../../library/typing.rst:3891
msgid "3.12"
msgstr ""

#: ../../library/typing.rst:3889
msgid ":gh:`94309`"
msgstr ""

#: ../../library/typing.rst:3890
msgid ":data:`typing.TypeAlias`"
msgstr ""

#: ../../library/typing.rst:3893
msgid ":pep:`695`"
msgstr ""

#: ../../library/typing.rst:3894
msgid ":func:`@typing.no_type_check_decorator <no_type_check_decorator>`"
msgstr ""

#: ../../library/typing.rst:3895 ../../library/typing.rst:3899
msgid "3.13"
msgstr ""

#: ../../library/typing.rst:3896
msgid "3.15"
msgstr ""

#: ../../library/typing.rst:3897
msgid ":gh:`106309`"
msgstr ""

#: ../../library/typing.rst:3898
msgid ":data:`typing.AnyStr`"
msgstr ""

#: ../../library/typing.rst:3900
msgid "3.18"
msgstr ""

#: ../../library/typing.rst:3901
msgid ":gh:`105578`"
msgstr ""
