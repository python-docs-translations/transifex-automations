# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-11 14:18+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/init.rst:8
msgid "Initialization, Finalization, and Threads"
msgstr "Inicialização, finalização e threads"

#: ../../c-api/init.rst:10
msgid ""
"See :ref:`Python Initialization Configuration <init-config>` for details on "
"how to configure the interpreter prior to initialization."
msgstr ""
"Consulte :ref:`Configuração de inicialização do Python <init-config>` para "
"obter detalhes sobre como configurar o interpretador antes da inicialização."

#: ../../c-api/init.rst:16
msgid "Before Python Initialization"
msgstr "Antes da inicialização do Python"

#: ../../c-api/init.rst:18
msgid ""
"In an application embedding  Python, the :c:func:`Py_Initialize` function "
"must be called before using any other Python/C API functions; with the "
"exception of a few functions and the :ref:`global configuration variables "
"<global-conf-vars>`."
msgstr ""
"Numa aplicação que incorpora Python, a função :c:func:`Py_Initialize` deve "
"ser chamada antes de usar qualquer outra função da API C/Python, com exceção "
"de algumas funções e das :ref:`variáveis de configuração global <global-conf-"
"vars>`."

#: ../../c-api/init.rst:23
msgid ""
"The following functions can be safely called before Python is initialized:"
msgstr ""
"As seguintes funções podem ser chamadas com segurança antes da inicialização "
"do Python:"

#: ../../c-api/init.rst:25
msgid "Functions that initialize the interpreter:"
msgstr "Funções que inicializam o interpretador:"

#: ../../c-api/init.rst:27
msgid ":c:func:`Py_Initialize`"
msgstr ":c:func:`Py_Initialize`"

#: ../../c-api/init.rst:28
msgid ":c:func:`Py_InitializeEx`"
msgstr ":c:func:`Py_InitializeEx`"

#: ../../c-api/init.rst:29
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ":c:func:`Py_InitializeFromConfig`"

#: ../../c-api/init.rst:30
msgid ":c:func:`Py_BytesMain`"
msgstr ":c:func:`Py_BytesMain`"

#: ../../c-api/init.rst:31
msgid ":c:func:`Py_Main`"
msgstr ":c:func:`Py_Main`"

#: ../../c-api/init.rst:32
msgid "the runtime pre-initialization functions covered in :ref:`init-config`"
msgstr ""
"as funções de pré-inicialização do tempo de execução abordadas em :ref:`init-"
"config`"

#: ../../c-api/init.rst:34
msgid "Configuration functions:"
msgstr "Funções de configuração:"

#: ../../c-api/init.rst:36
msgid ":c:func:`PyImport_AppendInittab`"
msgstr ":c:func:`PyImport_AppendInittab`"

#: ../../c-api/init.rst:37
msgid ":c:func:`PyImport_ExtendInittab`"
msgstr ":c:func:`PyImport_ExtendInittab`"

#: ../../c-api/init.rst:38
msgid ":c:func:`!PyInitFrozenExtensions`"
msgstr ":c:func:`!PyInitFrozenExtensions`"

#: ../../c-api/init.rst:39
msgid ":c:func:`PyMem_SetAllocator`"
msgstr ":c:func:`PyMem_SetAllocator`"

#: ../../c-api/init.rst:40
msgid ":c:func:`PyMem_SetupDebugHooks`"
msgstr ":c:func:`PyMem_SetupDebugHooks`"

#: ../../c-api/init.rst:41
msgid ":c:func:`PyObject_SetArenaAllocator`"
msgstr ":c:func:`PyObject_SetArenaAllocator`"

#: ../../c-api/init.rst:42
msgid ":c:func:`Py_SetProgramName`"
msgstr ":c:func:`Py_SetProgramName`"

#: ../../c-api/init.rst:43
msgid ":c:func:`Py_SetPythonHome`"
msgstr ":c:func:`Py_SetPythonHome`"

#: ../../c-api/init.rst:44
msgid ":c:func:`PySys_ResetWarnOptions`"
msgstr ":c:func:`PySys_ResetWarnOptions`"

#: ../../c-api/init.rst:45
msgid "the configuration functions covered in :ref:`init-config`"
msgstr "as funções de configuração abordadas em :ref:`init-config`"

#: ../../c-api/init.rst:47
msgid "Informative functions:"
msgstr "Funções informativas:"

#: ../../c-api/init.rst:49 ../../c-api/init.rst:57
msgid ":c:func:`Py_IsInitialized`"
msgstr ":c:func:`Py_IsInitialized`"

#: ../../c-api/init.rst:50
msgid ":c:func:`PyMem_GetAllocator`"
msgstr ":c:func:`PyMem_GetAllocator`"

#: ../../c-api/init.rst:51
msgid ":c:func:`PyObject_GetArenaAllocator`"
msgstr ":c:func:`PyObject_GetArenaAllocator`"

#: ../../c-api/init.rst:52
msgid ":c:func:`Py_GetBuildInfo`"
msgstr ":c:func:`Py_GetBuildInfo`"

#: ../../c-api/init.rst:53
msgid ":c:func:`Py_GetCompiler`"
msgstr ":c:func:`Py_GetCompiler`"

#: ../../c-api/init.rst:54
msgid ":c:func:`Py_GetCopyright`"
msgstr ":c:func:`Py_GetCopyright`"

#: ../../c-api/init.rst:55
msgid ":c:func:`Py_GetPlatform`"
msgstr ":c:func:`Py_GetPlatform`"

#: ../../c-api/init.rst:56
msgid ":c:func:`Py_GetVersion`"
msgstr ":c:func:`Py_GetVersion`"

#: ../../c-api/init.rst:59
msgid "Utilities:"
msgstr "Utilidades:"

#: ../../c-api/init.rst:61
msgid ":c:func:`Py_DecodeLocale`"
msgstr ":c:func:`Py_DecodeLocale`"

#: ../../c-api/init.rst:62
msgid ""
"the status reporting and utility functions covered in :ref:`init-config`"
msgstr ""
"as funções de relatório de estado e utilitárias abrangidas em :ref:`init-"
"config`"

#: ../../c-api/init.rst:64
msgid "Memory allocators:"
msgstr "Alocadores de memória:"

#: ../../c-api/init.rst:66
msgid ":c:func:`PyMem_RawMalloc`"
msgstr ":c:func:`PyMem_RawMalloc`"

#: ../../c-api/init.rst:67
msgid ":c:func:`PyMem_RawRealloc`"
msgstr ":c:func:`PyMem_RawRealloc`"

#: ../../c-api/init.rst:68
msgid ":c:func:`PyMem_RawCalloc`"
msgstr ":c:func:`PyMem_RawCalloc`"

#: ../../c-api/init.rst:69
msgid ":c:func:`PyMem_RawFree`"
msgstr ":c:func:`PyMem_RawFree`"

#: ../../c-api/init.rst:71
msgid "Synchronization:"
msgstr "Sincronização:"

#: ../../c-api/init.rst:73
msgid ":c:func:`PyMutex_Lock`"
msgstr ":c:func:`PyMutex_Lock`"

#: ../../c-api/init.rst:74
msgid ":c:func:`PyMutex_Unlock`"
msgstr ":c:func:`PyMutex_Unlock`"

#: ../../c-api/init.rst:78
msgid ""
"Despite their apparent similarity to some of the functions listed above, the "
"following functions **should not be called** before the interpreter has been "
"initialized: :c:func:`Py_EncodeLocale`, :c:func:`Py_GetPath`, :c:func:"
"`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:func:"
"`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome`, :c:func:"
"`Py_GetProgramName`, :c:func:`PyEval_InitThreads`, and :c:func:`Py_RunMain`."
msgstr ""
"Apesar da sua aparente semelhança com algumas das funções listadas acima, as "
"seguintes funções **não devem ser chamadas** antes da inicialização do "
"interpretador: :c:func:`Py_EncodeLocale`, :c:func:`Py_GetPath`, :c:func:"
"`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:func:"
"`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome`, :c:func:"
"`Py_GetProgramName`, :c:func:`PyEval_InitThreads` e :c:func:`Py_RunMain`."

#: ../../c-api/init.rst:90
msgid "Global configuration variables"
msgstr "Variáveis de configuração global"

#: ../../c-api/init.rst:92
msgid ""
"Python has variables for the global configuration to control different "
"features and options. By default, these flags are controlled by :ref:"
"`command line options <using-on-interface-options>`."
msgstr ""
"O Python possui variáveis para a configuração global para controlar "
"diferentes funcionalidades e opções. Por predefinição, estes sinalizadores "
"são controlados por :ref:`opções da linha de comando <using-on-interface-"
"options>`."

#: ../../c-api/init.rst:96
msgid ""
"When a flag is set by an option, the value of the flag is the number of "
"times that the option was set. For example, ``-b`` sets :c:data:"
"`Py_BytesWarningFlag` to 1 and ``-bb`` sets :c:data:`Py_BytesWarningFlag` to "
"2."
msgstr ""
"Quando um sinalizador é definido por uma opção, o valor do sinalizador é o "
"número de vezes que a opção foi definida. Por exemplo, ``-b`` define :c:data:"
"`Py_BytesWarningFlag` como 1 e ``-bb`` define :c:data:`Py_BytesWarningFlag` "
"como 2."

#: ../../c-api/init.rst:102
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"bytes_warning` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.bytes_warning` deve ser usada em seu lugar, "
"consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:106
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with :"
"class:`str` or :class:`bytes` with :class:`int`.  Issue an error if greater "
"or equal to ``2``."
msgstr ""
"Emitir um aviso ao comparar :class:`bytes` ou :class:`bytearray` com :class:"
"`str` ou :class:`bytes` com :class:`int`. Emitir um erro se for maior ou "
"igual a ``2``."

#: ../../c-api/init.rst:110
msgid "Set by the :option:`-b` option."
msgstr "Definida pela opção :option:`-b`."

#: ../../c-api/init.rst:116
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"parser_debug` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.parser_debug` deve ser usada em seu lugar, "
"consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:120
msgid ""
"Turn on parser debugging output (for expert only, depending on compilation "
"options)."
msgstr ""
"Ativa a saída de depuração do analisador sintático (somente para "
"especialistas, dependendo das opções de compilação)."

#: ../../c-api/init.rst:123
msgid ""
"Set by the :option:`-d` option and the :envvar:`PYTHONDEBUG` environment "
"variable."
msgstr ""
"Definida pela a opção :option:`-d` e a variável de ambiente :envvar:"
"`PYTHONDEBUG`."

#: ../../c-api/init.rst:130
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"write_bytecode` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.write_bytecode` deve ser usada em seu "
"lugar, consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:134
msgid ""
"If set to non-zero, Python won't try to write ``.pyc`` files on the import "
"of source modules."
msgstr ""
"Se definido como diferente de zero, o Python não tentará gravar ficheiros ``."
"pyc`` na importação de módulos de origem."

#: ../../c-api/init.rst:137
msgid ""
"Set by the :option:`-B` option and the :envvar:`PYTHONDONTWRITEBYTECODE` "
"environment variable."
msgstr ""
"Definido pela opção :option:`-B` e pela variável de ambiente :envvar:"
"`PYTHONDONTWRITEBYTECODE`."

#: ../../c-api/init.rst:144
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"pathconfig_warnings` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.pathconfig_warnings` deve ser usada em seu "
"lugar, consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:148
msgid ""
"Suppress error messages when calculating the module search path in :c:func:"
"`Py_GetPath`."
msgstr ""
"Suprimir mensagens de erro ao calcular o caminho de pesquisa do módulo em :c:"
"func:`Py_GetPath`."

#: ../../c-api/init.rst:151
msgid "Private flag used by ``_freeze_module`` and ``frozenmain`` programs."
msgstr ""
"Sinalizador privado usado pelos programas ``_freeze_module`` e "
"``frozenmain``."

#: ../../c-api/init.rst:157
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"hash_seed` and :c:member:`PyConfig.use_hash_seed` should be used instead, "
"see :ref:`Python Initialization Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: em vez "
"disso, deve-se usar as configurações :c:member:`PyConfig.hash_seed` e :c:"
"member:`PyConfig.use_hash_seed`. Consulte :ref:`Configuração de "
"inicialização do Python <init-config>`."

#: ../../c-api/init.rst:162
msgid ""
"Set to ``1`` if the :envvar:`PYTHONHASHSEED` environment variable is set to "
"a non-empty string."
msgstr ""
"Defina como ``1`` se a variável de ambiente :envvar:`PYTHONHASHSEED` estiver "
"definida como uma string não vazia."

#: ../../c-api/init.rst:165
msgid ""
"If the flag is non-zero, read the :envvar:`PYTHONHASHSEED` environment "
"variable to initialize the secret hash seed."
msgstr ""
"Se o sinalizador for diferente de zero, leia a variável de ambiente :envvar:"
"`PYTHONHASHSEED` para inicializar a semente secreta do hash."

#: ../../c-api/init.rst:172
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"use_environment` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.use_environment` deve ser usada em seu "
"lugar, consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:176
msgid ""
"Ignore all :envvar:`!PYTHON*` environment variables, e.g. :envvar:"
"`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""
"Ignore todas as variáveis de ambiente :envvar:`!PYTHON*`, por exemplo :"
"envvar:`PYTHONPATH` e :envvar:`PYTHONHOME`, que possam estar definidas."

#: ../../c-api/init.rst:179
msgid "Set by the :option:`-E` and :option:`-I` options."
msgstr "Definido pelas opções :option:`-E` e :option:`-I`."

#: ../../c-api/init.rst:185
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"inspect` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.inspect` deve ser usada em seu lugar, "
"consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:189
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal."
msgstr ""
"Quando um script é passado como primeiro argumento ou a opção :option:`-c` é "
"utilizada, entre no modo interativo após executar o script ou o comando, "
"mesmo quando :data:`sys.stdin` não parecer ser um terminal."

#: ../../c-api/init.rst:193
msgid ""
"Set by the :option:`-i` option and the :envvar:`PYTHONINSPECT` environment "
"variable."
msgstr ""
"Definido pela opção :option:`-i` e pela variável de ambiente :envvar:"
"`PYTHONINSPECT`."

#: ../../c-api/init.rst:200
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"interactive` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.interactive` deve ser usada em seu lugar, "
"consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:204
msgid "Set by the :option:`-i` option."
msgstr "Definido pela opção :option:`-i`."

#: ../../c-api/init.rst:210
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"isolated` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.isolated` deve ser usada em seu lugar, "
"consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:214
msgid ""
"Run Python in isolated mode. In isolated mode :data:`sys.path` contains "
"neither the script's directory nor the user's site-packages directory."
msgstr ""
"Execute o Python no modo isolado. No modo isolado, :data:`sys.path` não "
"contém nem o diretório do script nem o diretório site-packages do utilizador."

#: ../../c-api/init.rst:217
msgid "Set by the :option:`-I` option."
msgstr "Definido pela opção :option:`-I`."

#: ../../c-api/init.rst:225
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` should be used instead, see :ref:`Python "
"Initialization Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyPreConfig.legacy_windows_fs_encoding` deve ser "
"usada em seu lugar, consulte :ref:`Configuração de inicialização do Python "
"<init-config>`."

#: ../../c-api/init.rst:229
msgid ""
"If the flag is non-zero, use the ``mbcs`` encoding with ``replace`` error "
"handler, instead of the UTF-8 encoding with ``surrogatepass`` error handler, "
"for the :term:`filesystem encoding and error handler`."
msgstr ""
"Se o sinalizador for diferente de zero, use a codificação ``mbcs`` com o "
"manipulador de erros ``replace``, em vez da codificação UTF-8 com o "
"manipulador de erros ``surrogatepass``, para a :term:`codificação do sistema "
"de ficheiros e manipulador de erros`."

#: ../../c-api/init.rst:233
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable is set to a non-empty string."
msgstr ""
"Defina como ``1`` se a variável de ambiente :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING` estiver definida como uma string não vazia."

#: ../../c-api/init.rst:236
msgid "See :pep:`529` for more details."
msgstr "Veja :pep:`529` para mais detalhes."

#: ../../c-api/init.rst:238 ../../c-api/init.rst:256
msgid "Availability"
msgstr "Disponibilidade"

#: ../../c-api/init.rst:244
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"legacy_windows_stdio` should be used instead, see :ref:`Python "
"Initialization Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.legacy_windows_stdio` deve ser usada em seu "
"lugar, consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:248
msgid ""
"If the flag is non-zero, use :class:`io.FileIO` instead of :class:`!io."
"_WindowsConsoleIO` for :mod:`sys` standard streams."
msgstr ""
"Se o sinalizador for diferente de zero, usa :class:`io.FileIO` em vez de :"
"class:`!io._WindowsConsoleIO` para fluxos padrão :mod:`sys`."

#: ../../c-api/init.rst:251
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr ""
"Defina como ``1`` se a variável de ambiente :envvar:"
"`PYTHONLEGACYWINDOWSSTDIO` estiver definida como uma string não vazia."

#: ../../c-api/init.rst:254
msgid "See :pep:`528` for more details."
msgstr "Veja a :pep:`528` para mais detalhes."

#: ../../c-api/init.rst:262
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"site_import` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.site_import` deve ser usada em seu lugar, "
"consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:266
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""
"Desative a importação do módulo :mod:`site` e as manipulações dependentes do "
"site de :data:`sys.path` que ele implica. Desative também essas manipulações "
"se :mod:`site` for explicitamente importado posteriormente (chame :func:"
"`site.main` se quiser que elas sejam acionadas)."

#: ../../c-api/init.rst:271
msgid "Set by the :option:`-S` option."
msgstr "Definida pela opção :option:`-S`."

#: ../../c-api/init.rst:277
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"user_site_directory` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.user_site_directory` deve ser usada em seu "
"lugar, consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:281
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""
"Não adicione o :data:`diretório site-packages do utilizador <site."
"USER_SITE>` ao :data:`sys.path`."

#: ../../c-api/init.rst:284
msgid ""
"Set by the :option:`-s` and :option:`-I` options, and the :envvar:"
"`PYTHONNOUSERSITE` environment variable."
msgstr ""
"Definido pelas opções :option:`-s` e :option:`-I`, e pela variável de "
"ambiente :envvar:`PYTHONNOUSERSITE`."

#: ../../c-api/init.rst:291
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"optimization_level` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.optimization_level` deve ser usada em seu "
"lugar, consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:295
msgid ""
"Set by the :option:`-O` option and the :envvar:`PYTHONOPTIMIZE` environment "
"variable."
msgstr ""
"Definida pela opção :option:`-O` e pela variável de ambiente :envvar:"
"`PYTHONOPTIMIZE`."

#: ../../c-api/init.rst:302
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"quiet` should be used instead, see :ref:`Python Initialization Configuration "
"<init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.quiet` deve ser usada em seu lugar, "
"consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:306
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""
"Não exiba as mensagens de direitos de autor e versão, mesmo no modo "
"interativo."

#: ../../c-api/init.rst:308
msgid "Set by the :option:`-q` option."
msgstr "Definida pela opção :option:`-q`."

#: ../../c-api/init.rst:316
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"buffered_stdio` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.buffered_stdio` deve ser usada em seu "
"lugar, consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:320
msgid "Force the stdout and stderr streams to be unbuffered."
msgstr "Força os fluxos stdout e stderr a não serem armazenados em buffer."

#: ../../c-api/init.rst:322
msgid ""
"Set by the :option:`-u` option and the :envvar:`PYTHONUNBUFFERED` "
"environment variable."
msgstr ""
"Definida pela opção :option:`-u` e pela variável de ambiente :envvar:"
"`PYTHONUNBUFFERED`."

#: ../../c-api/init.rst:329
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"verbose` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.verbose` deve ser usada em seu lugar, "
"consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:333
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  If greater or equal "
"to ``2``, print a message for each file that is checked for when searching "
"for a module. Also provides information on module cleanup at exit."
msgstr ""
"Imprime uma mensagem cada vez que um módulo é inicializado, mostrando o "
"local (nome do ficheiro ou módulo incorporado) a partir do qual é carregado. "
"Se for maior ou igual a ``2``, imprime uma mensagem para cada ficheiro que é "
"verificado durante a pesquisa de um módulo. Também fornece informações sobre "
"a limpeza do módulo ao sair."

#: ../../c-api/init.rst:338
msgid ""
"Set by the :option:`-v` option and the :envvar:`PYTHONVERBOSE` environment "
"variable."
msgstr ""
"Definida pela a opção :option:`-v` e a variável de ambiente :envvar:"
"`PYTHONVERBOSE`."

#: ../../c-api/init.rst:345
msgid "Initializing and finalizing the interpreter"
msgstr "Inicializando e finalizando o interpretador"

#: ../../c-api/init.rst:360
msgid ""
"Initialize the Python interpreter.  In an application embedding  Python, "
"this should be called before using any other Python/C API functions; see :"
"ref:`Before Python Initialization <pre-init-safe>` for the few exceptions."
msgstr ""
"Inicializa o interpretador Python. Em uma aplicação que incorpora o Python, "
"isto deve ser chamado antes do uso de qualquer outra função do Python/C API; "
"veja :ref:`Antes da Inicialização do Python <pre-init-safe>` para algumas "
"exceções."

#: ../../c-api/init.rst:364
msgid ""
"This initializes the table of loaded modules (``sys.modules``), and creates "
"the fundamental modules :mod:`builtins`, :mod:`__main__` and :mod:`sys`. It "
"also initializes the module search path (``sys.path``). It does not set "
"``sys.argv``; use the :ref:`Python Initialization Configuration <init-"
"config>` API for that. This is a no-op when called for a second time "
"(without calling :c:func:`Py_FinalizeEx` first).  There is no return value; "
"it is a fatal error if the initialization fails."
msgstr ""
"Isso inicializa a tabela de módulos carregados (``sys.modules``) e cria os "
"módulos fundamentais :mod:`builtins`, :mod:`__main__` e :mod:`sys`. Também "
"inicializa o caminho de pesquisa do módulo (``sys.path``). Não define ``sys."
"argv``; use a API :ref:`Python Initialization Configuration <init-config>` "
"para isso. Isto é uma operação nula quando chamado pela segunda vez (sem "
"chamar primeiro :c:func:`Py_FinalizeEx`). Não há valor de retorno; é um erro "
"fatal se a inicialização falhar."

#: ../../c-api/init.rst:372 ../../c-api/init.rst:386
msgid ""
"Use :c:func:`Py_InitializeFromConfig` to customize the :ref:`Python "
"Initialization Configuration <init-config>`."
msgstr ""
"Usa :c:func:`Py_InitializeFromConfig` para personalizar a :ref:`Configuração "
"de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:376
msgid ""
"On Windows, changes the console mode from ``O_TEXT`` to ``O_BINARY``, which "
"will also affect non-Python uses of the console using the C Runtime."
msgstr ""
"No Windows, altera o modo da consola de ``O_TEXT`` para ``O_BINARY``, o que "
"também afetará os usos não Python da consola usando o C Runtime."

#: ../../c-api/init.rst:382
msgid ""
"This function works like :c:func:`Py_Initialize` if *initsigs* is ``1``. If "
"*initsigs* is ``0``, it skips initialization registration of signal "
"handlers, which may be useful when CPython is embedded as part of a larger "
"application."
msgstr ""
"Esta função funciona como :c:func:`Py_Initialize` se *initsigs* for ``1``. "
"Se *initsigs* for ``0``, ela ignora o registo de inicialização dos "
"manipuladores de sinal, o que pode ser útil quando o CPython está "
"incorporado como parte de uma aplicação maior."

#: ../../c-api/init.rst:392
msgid ""
"Initialize Python from *config* configuration, as described in :ref:`init-"
"from-config`."
msgstr ""
"Inicializa o Python a partir da configuração *config*, conforme descrito em :"
"ref:`init-from-config`."

#: ../../c-api/init.rst:395
msgid ""
"See the :ref:`init-config` section for details on pre-initializing the "
"interpreter, populating the runtime configuration structure, and querying "
"the returned status structure."
msgstr ""
"Consulte a secção :ref:`init-config` para obter detalhes sobre a pré-"
"inicialização do interpretador, o preenchimento da estrutura de configuração "
"de tempo de execução e a consulta da estrutura de estado devolvida."

#: ../../c-api/init.rst:402
msgid ""
"Return true (nonzero) when the Python interpreter has been initialized, "
"false (zero) if not.  After :c:func:`Py_FinalizeEx` is called, this returns "
"false until :c:func:`Py_Initialize` is called again."
msgstr ""
"Retorna verdadeiro (diferente de zero) quando o interpretador Python foi "
"inicializado, falso (zero) se não. Depois que :c:func:`Py_FinalizeEx` é "
"chamado, isso retorna falso até que :c:func:`Py_Initialize` seja chamado "
"novamente."

#: ../../c-api/init.rst:409
msgid ""
"Return true (non-zero) if the main Python interpreter is :term:`shutting "
"down <interpreter shutdown>`. Return false (zero) otherwise."
msgstr ""
"Retorne verdadeiro (diferente de zero) se o interpretador Python principal "
"estiver :term:`a desligar <interpreter shutdown>`. Retorne falso (zero) caso "
"contrário."

#: ../../c-api/init.rst:417
msgid ""
"Undo all initializations made by :c:func:`Py_Initialize` and subsequent use "
"of Python/C API functions, and destroy all sub-interpreters (see :c:func:"
"`Py_NewInterpreter` below) that were created and not yet destroyed since the "
"last call to :c:func:`Py_Initialize`.  This is a no-op when called for a "
"second time (without calling :c:func:`Py_Initialize` again first)."
msgstr ""
"Desfaz todas as inicializações feitas por :c:func:`Py_Initialize` e o uso "
"subsequente das funções da API C/Python, e destrói todos os "
"subinterpretadores (veja :c:func:`Py_NewInterpreter` abaixo) que foram "
"criados e ainda não foram destruídos desde a última chamada para :c:func:"
"`Py_Initialize`. Esta é uma operação nula quando chamada pela segunda vez "
"(sem chamar :c:func:`Py_Initialize` novamente primeiro)."

#: ../../c-api/init.rst:423
msgid ""
"Since this is the reverse of :c:func:`Py_Initialize`, it should be called in "
"the same thread with the same interpreter active.  That means the main "
"thread and the main interpreter. This should never be called while :c:func:"
"`Py_RunMain` is running."
msgstr ""
"Como este é o inverso de :c:func:`Py_Initialize`, deve ser chamado na mesma "
"thread com o mesmo interpretador ativo. Isso significa a thread principal e "
"o interpretador principal. Nunca deve ser chamado enquanto :c:func:"
"`Py_RunMain` estiver em execução."

#: ../../c-api/init.rst:428
msgid ""
"Normally the return value is ``0``. If there were errors during finalization "
"(flushing buffered data), ``-1`` is returned."
msgstr ""
"Normalmente, o valor de retorno é ``0``. Se ocorreram erros durante a "
"finalização (limpeza dos dados armazenados em buffer), é retornado ``-1``."

#: ../../c-api/init.rst:432
msgid ""
"Note that Python will do a best effort at freeing all memory allocated by "
"the Python interpreter.  Therefore, any C-Extension should make sure to "
"correctly clean up all of the preveiously allocated PyObjects before using "
"them in subsequent calls to :c:func:`Py_Initialize`.  Otherwise it could "
"introduce vulnerabilities and incorrect behavior."
msgstr ""
"Observe que o Python fará o possível para liberar toda a memória alocada "
"pelo interpretador Python. Portanto, qualquer extensão C deve garantir a "
"limpeza correta de todos os PyObjects alocados anteriormente antes de usá-"
"los em chamadas subsequentes para :c:func:`Py_Initialize`. Caso contrário, "
"isso poderá introduzir vulnerabilidades e comportamentos incorretos."

#: ../../c-api/init.rst:438
msgid ""
"This function is provided for a number of reasons.  An embedding application "
"might want to restart Python without having to restart the application "
"itself. An application that has loaded the Python interpreter from a "
"dynamically loadable library (or DLL) might want to free all memory "
"allocated by Python before unloading the DLL. During a hunt for memory leaks "
"in an application a developer might want to free all memory allocated by "
"Python before exiting from the application."
msgstr ""
"Esta função é fornecida por vários motivos. Uma aplicação incorporada pode "
"querer reiniciar o Python sem ter de reiniciar a própria aplicação. Uma "
"aplicação que tenha carregado o interpretador Python a partir de uma "
"biblioteca carregável dinamicamente (ou DLL) pode querer libertar toda a "
"memória alocada pelo Python antes de descarregar a DLL. Durante uma busca "
"por fugas de memória numa aplicação, um programador pode querer libertar "
"toda a memória alocada pelo Python antes de sair da aplicação."

#: ../../c-api/init.rst:446
msgid ""
"**Bugs and caveats:** The destruction of modules and objects in modules is "
"done in random order; this may cause destructors (:meth:`~object.__del__` "
"methods) to fail when they depend on other objects (even functions) or "
"modules.  Dynamically loaded extension modules loaded by Python are not "
"unloaded.  Small amounts of memory allocated by the Python interpreter may "
"not be freed (if you find a leak, please report it).  Memory tied up in "
"circular references between objects is not freed.  Interned strings will all "
"be deallocated regardless of their reference count. Some memory allocated by "
"extension modules may not be freed.  Some extensions may not work properly "
"if their initialization routine is called more than once; this can happen if "
"an application calls :c:func:`Py_Initialize` and :c:func:`Py_FinalizeEx` "
"more than once.  :c:func:`Py_FinalizeEx` must not be called recursively from "
"within itself.  Therefore, it must not be called by any code that may be run "
"as part of the interpreter shutdown process, such as :py:mod:`atexit` "
"handlers, object finalizers, or any code that may be run while flushing the "
"stdout and stderr files."
msgstr ""
"**Erros e advertências:** A destruição de módulos e objetos em módulos é "
"feita em ordem aleatória; isso pode fazer com que os destrutores (métodos :"
"meth:`~object.__del__`) falhem quando dependem de outros objetos (mesmo "
"funções) ou módulos. Os módulos de extensão carregados dinamicamente pelo "
"Python não são descarregados. Pequenas quantidades de memória alocadas pelo "
"interpretador Python podem não ser liberadas (se você encontrar uma fuga, "
"por favor, reporte-a). A memória ocupada em referências circulares entre "
"objetos não é liberada. Todas as strings internadas serão desalocadas, "
"independentemente da sua contagem de referências. Algumas memórias alocadas "
"por módulos de extensão podem não ser liberadas. Algumas extensões podem não "
"funcionar corretamente se a sua rotina de inicialização for chamada mais de "
"uma vez; isso pode acontecer se uma aplicação chamar :c:func:`Py_Initialize` "
"e :c:func:`Py_FinalizeEx` mais de uma vez. :c:func:`Py_FinalizeEx` não deve "
"ser chamado recursivamente a partir de si mesmo. Portanto, não deve ser "
"chamado por nenhum código que possa ser executado como parte do processo de "
"encerramento do interpretador, como manipuladores :py:mod:`atexit`, "
"finalizadores de objetos ou qualquer código que possa ser executado durante "
"a limpeza dos ficheiros stdout e stderr."

#: ../../c-api/init.rst:462
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"_PySys_ClearAuditHooks`` with no arguments."
msgstr ""
"Gera um :ref:`evento de auditoria <auditing>` ``cpython."
"_PySys_ClearAuditHooks`` sem argumentos."

#: ../../c-api/init.rst:469
msgid ""
"This is a backwards-compatible version of :c:func:`Py_FinalizeEx` that "
"disregards the return value."
msgstr ""
"Esta é uma versão compatível com versões anteriores de :c:func:"
"`Py_FinalizeEx` que ignora o valor de retorno."

#: ../../c-api/init.rst:475
msgid ""
"Similar to :c:func:`Py_Main` but *argv* is an array of bytes strings, "
"allowing the calling application to delegate the text decoding step to the "
"CPython runtime."
msgstr ""
"Semelhante a :c:func:`Py_Main`, mas *argv* é uma matriz de cadeias de bytes, "
"permitindo que a aplicação chamadora delegue a etapa de descodificação de "
"texto ao tempo de execução do CPython."

#: ../../c-api/init.rst:484
msgid ""
"The main program for the standard interpreter, encapsulating a full "
"initialization/finalization cycle, as well as additional behaviour to "
"implement reading configurations settings from the environment and command "
"line, and then executing ``__main__`` in accordance with :ref:`using-on-"
"cmdline`."
msgstr ""
"O programa principal para o interpretador padrão, encapsulando um ciclo "
"completo de inicialização/finalização, bem como comportamento adicional para "
"implementar a leitura de configurações do ambiente e da linha de comando e, "
"em seguida, executar ``__main__`` de acordo com :ref:`using-on-cmdline`."

#: ../../c-api/init.rst:490
msgid ""
"This is made available for programs which wish to support the full CPython "
"command line interface, rather than just embedding a Python runtime in a "
"larger application."
msgstr ""
"Isso está disponível para programas que desejam suportar a interface de "
"linha de comando CPython completa, em vez de apenas incorporar um tempo de "
"execução Python em uma aplicação maior."

#: ../../c-api/init.rst:494
msgid ""
"The *argc* and *argv* parameters are similar to those which are passed to a "
"C program's :c:func:`main` function, except that the *argv* entries are "
"first converted to ``wchar_t`` using :c:func:`Py_DecodeLocale`. It is also "
"important to note that the argument list entries may be modified to point to "
"strings other than those passed in (however, the contents of the strings "
"pointed to by the argument list are not modified)."
msgstr ""
"Os parâmetros *argc* e *argv* são semelhantes aos que são passados para a "
"função :c:func:`main` de um programa C, exceto que as entradas *argv* são "
"primeiro convertidas para ``wchar_t`` usando :c:func:`Py_DecodeLocale`. "
"Também é importante observar que as entradas da lista de argumentos podem "
"ser modificadas para apontar para strings diferentes daquelas passadas (no "
"entanto, o conteúdo das strings apontadas pela lista de argumentos não é "
"modificado)."

#: ../../c-api/init.rst:501
msgid ""
"The return value is ``2`` if the argument list does not represent a valid "
"Python command line, and otherwise the same as :c:func:`Py_RunMain`."
msgstr ""
"O valor de retorno é ``2`` se a lista de argumentos não representar uma "
"linha de comando Python válida e, caso contrário, o mesmo que :c:func:"
"`Py_RunMain`."

#: ../../c-api/init.rst:504
msgid ""
"In terms of the CPython runtime configuration APIs documented in the :ref:"
"`runtime configuration <init-config>` section (and without accounting for "
"error handling), ``Py_Main`` is approximately equivalent to::"
msgstr ""
"Em termos das APIs de configuração de tempo de execução do CPython "
"documentadas na secção :ref:`configuração de tempo de execução <init-"
"config>` (e sem levar em conta o tratamento de erros), ``Py_Main`` é "
"aproximadamente equivalente a::"

#: ../../c-api/init.rst:508
msgid ""
"PyConfig config;\n"
"PyConfig_InitPythonConfig(&config);\n"
"PyConfig_SetArgv(&config, argc, argv);\n"
"Py_InitializeFromConfig(&config);\n"
"PyConfig_Clear(&config);\n"
"\n"
"Py_RunMain();"
msgstr ""
"PyConfig config;\n"
"PyConfig_InitPythonConfig(&config);\n"
"PyConfig_SetArgv(&config, argc, argv);\n"
"Py_InitializeFromConfig(&config);\n"
"PyConfig_Clear(&config);\n"
"\n"
"Py_RunMain();"

#: ../../c-api/init.rst:516
msgid ""
"In normal usage, an embedding application will call this function *instead* "
"of calling :c:func:`Py_Initialize`, :c:func:`Py_InitializeEx` or :c:func:"
"`Py_InitializeFromConfig` directly, and all settings will be applied as "
"described elsewhere in this documentation. If this function is instead "
"called *after* a preceding runtime initialization API call, then exactly "
"which environmental and command line configuration settings will be updated "
"is version dependent (as it depends on which settings correctly support "
"being modified after they have already been set once when the runtime was "
"first initialized)."
msgstr ""
"Em uso normal, uma aplicação incorporada chamará esta função *em vez* de "
"chamar diretamente :c:func:`Py_Initialize`, :c:func:`Py_InitializeEx` ou :c:"
"func:`Py_InitializeFromConfig`, e todas as configurações serão aplicadas "
"conforme descrito em outra parte desta documentação. Se esta função for "
"chamada *após* uma chamada de API de inicialização de tempo de execução "
"anterior, então exatamente quais configurações ambientais e de linha de "
"comando serão atualizadas dependerá da versão (já que depende de quais "
"configurações suportam corretamente a modificação após já terem sido "
"definidas uma vez quando o tempo de execução foi inicializado pela primeira "
"vez)."

#: ../../c-api/init.rst:529
msgid "Executes the main module in a fully configured CPython runtime."
msgstr ""
"Executa o módulo principal num ambiente de execução CPython totalmente "
"configurado."

#: ../../c-api/init.rst:531
msgid ""
"Executes the command (:c:member:`PyConfig.run_command`), the script (:c:"
"member:`PyConfig.run_filename`) or the module (:c:member:`PyConfig."
"run_module`) specified on the command line or in the configuration. If none "
"of these values are set, runs the interactive Python prompt (REPL) using the "
"``__main__`` module's global namespace."
msgstr ""
"Executa o comando (:c:member:`PyConfig.run_command`), o script (:c:member:"
"`PyConfig.run_filename`) ou o módulo (:c:member:`PyConfig.run_module`) "
"especificado na linha de comando ou na configuração. Se nenhum desses "
"valores estiver definido, executa o prompt interativo do Python (REPL) "
"usando o namespace global do módulo ``__main__``."

#: ../../c-api/init.rst:537
msgid ""
"If :c:member:`PyConfig.inspect` is not set (the default), the return value "
"will be ``0`` if the interpreter exits normally (that is, without raising an "
"exception), the exit status of an unhandled :exc:`SystemExit`, or ``1`` for "
"any other unhandled exception."
msgstr ""
"Se :c:member:`PyConfig.inspect` não estiver definido (padrão), o valor de "
"retorno será ``0`` se o interpretador sair normalmente (ou seja, sem gerar "
"uma exceção), o estado de saída de um :exc:`SystemExit` não tratado ou ``1`` "
"para qualquer outra exceção não tratada."

#: ../../c-api/init.rst:542
msgid ""
"If :c:member:`PyConfig.inspect` is set (such as when the :option:`-i` option "
"is used), rather than returning when the interpreter exits, execution will "
"instead resume in an interactive Python prompt (REPL) using the ``__main__`` "
"module's global namespace. If the interpreter exited with an exception, it "
"is immediately raised in the REPL session. The function return value is then "
"determined by the way the *REPL session* terminates: ``0``, ``1``, or the "
"status of a :exc:`SystemExit`, as specified above."
msgstr ""
"Se :c:member:`PyConfig.inspect` estiver definido (como quando a opção :"
"option:`-i` é usada), em vez de retornar quando o interpretador sair, a "
"execução será retomada em um prompt Python interativo (REPL) usando o "
"namespace global do módulo ``__main__``. Se o interpretador sair com uma "
"exceção, ela será imediatamente levantada na sessão REPL. O valor de retorno "
"da função é então determinado pela forma como a sessão REPL termina: ``0``, "
"``1`` ou o estado de um :exc:`SystemExit`, conforme especificado acima."

#: ../../c-api/init.rst:550
msgid ""
"This function always finalizes the Python interpreter before it returns."
msgstr "Esta função finaliza sempre o interpretador Python antes de retornar."

#: ../../c-api/init.rst:552
msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of a "
"customized Python that always runs in isolated mode using :c:func:"
"`Py_RunMain`."
msgstr ""
"Consulte :ref:`Configuração Python <init-python-config>` para obter um "
"exemplo de um Python personalizado que é sempre executado em modo isolado "
"usando :c:func:`Py_RunMain`."

#: ../../c-api/init.rst:558
msgid ""
"Register an :mod:`atexit` callback for the target interpreter *interp*. This "
"is similar to :c:func:`Py_AtExit`, but takes an explicit interpreter and "
"data pointer for the callback."
msgstr ""
"Regista uma chamada de retorno :mod:`atexit` para o interpretador de destino "
"*interp*. É semelhante a :c:func:`Py_AtExit`, mas recebe um interpretador "
"explícito e um ponteiro de dados para a chamada de retorno."

#: ../../c-api/init.rst:562
msgid "There must be an :term:`attached thread state` for *interp*."
msgstr "Deve haver um :term:`estado de thread anexado` para *interp*."

#: ../../c-api/init.rst:567
msgid "Process-wide parameters"
msgstr "Parâmetros de todo o processo"

#: ../../c-api/init.rst:577
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"program_name` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: a "
"configuração :c:member:`PyConfig.program_name` deve ser usada em seu lugar, "
"consulte :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:581
msgid ""
"This function should be called before :c:func:`Py_Initialize` is called for "
"the first time, if it is called at all.  It tells the interpreter the value "
"of the ``argv[0]`` argument to the :c:func:`main` function of the program "
"(converted to wide characters). This is used by :c:func:`Py_GetPath` and "
"some other functions below to find the Python run-time libraries relative to "
"the interpreter executable.  The default value is ``'python'``.  The "
"argument should point to a zero-terminated wide character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""
"Esta função deve ser chamada antes de :c:func:`Py_Initialize` ser chamada "
"pela primeira vez, se for chamada. Ela informa ao interpretador o valor do "
"argumento ``argv[0]`` para a função :c:func:`main` do programa (convertido "
"para caracteres largos). Isto é usado por :c:func:`Py_GetPath` e algumas "
"outras funções abaixo para encontrar as bibliotecas de tempo de execução do "
"Python relativas ao executável do interpretador. O valor padrão é "
"``'python'``. O argumento deve apontar para uma string de caracteres largos "
"terminada em zero em armazenamento estático cujo conteúdo não mudará durante "
"a execução do programa. Nenhum código no interpretador Python alterará o "
"conteúdo deste armazenamento."

#: ../../c-api/init.rst:592 ../../c-api/init.rst:840 ../../c-api/init.rst:876
#: ../../c-api/init.rst:902
msgid ""
"Use :c:func:`Py_DecodeLocale` to decode a bytes string to get a :c:expr:"
"`wchar_t*` string."
msgstr ""
"Use :c:func:`Py_DecodeLocale` para descodificar uma cadeia de bytes e obter "
"uma cadeia :c:expr:`wchar_t*`."

#: ../../c-api/init.rst:600
msgid ""
"Return the program name set with :c:member:`PyConfig.program_name`, or the "
"default. The returned string points into static storage; the caller should "
"not modify its value."
msgstr ""
"Retorna o nome do programa definido com :c:member:`PyConfig.program_name` ou "
"o padrão. A string retornada aponta para o armazenamento estático; o "
"chamador não deve modificar o seu valor."

#: ../../c-api/init.rst:604 ../../c-api/init.rst:627 ../../c-api/init.rst:675
#: ../../c-api/init.rst:699 ../../c-api/init.rst:726 ../../c-api/init.rst:914
msgid ""
"This function should not be called before :c:func:`Py_Initialize`, otherwise "
"it returns ``NULL``."
msgstr ""
"Esta função não deve ser chamada antes de :c:func:`Py_Initialize`, caso "
"contrário, ela retornará ``NULL``."

#: ../../c-api/init.rst:607 ../../c-api/init.rst:630 ../../c-api/init.rst:678
#: ../../c-api/init.rst:702 ../../c-api/init.rst:731 ../../c-api/init.rst:917
msgid "It now returns ``NULL`` if called before :c:func:`Py_Initialize`."
msgstr "Agora retorna ``NULL`` se chamado antes de :c:func:`Py_Initialize`."

#: ../../c-api/init.rst:610 ../../c-api/init.rst:705
msgid ""
"Use :c:func:`PyConfig_Get(\"executable\") <PyConfig_Get>` (:data:`sys."
"executable`) instead."
msgstr ""
"Use :c:func:`PyConfig_Get(\"executable\") <PyConfig_Get>` (:data:`sys."
"executable`) em vez disso."

#: ../../c-api/init.rst:617
msgid ""
"Return the *prefix* for installed platform-independent files. This is "
"derived through a number of complicated rules from the program name set "
"with :c:member:`PyConfig.program_name` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the prefix is "
"``'/usr/local'``. The returned string points into static storage; the caller "
"should not modify its value.  This corresponds to the :makevar:`prefix` "
"variable in the top-level :file:`Makefile` and the :option:`--prefix` "
"argument to the :program:`configure` script at build time.  The value is "
"available to Python code as ``sys.base_prefix``. It is only useful on Unix.  "
"See also the next function."
msgstr ""
"Retorna o *prefixo* para ficheiros independentes da plataforma instalados. "
"Isto é derivado através de várias regras complicadas a partir do nome do "
"programa definido com :c:member:`PyConfig.program_name` e algumas variáveis "
"de ambiente; por exemplo, se o nome do programa for ``'/usr/local/bin/"
"python'``, o prefixo é ``'/usr/local'``. A string retornada aponta para o "
"armazenamento estático; o chamador não deve modificar o seu valor. Isso "
"corresponde à variável :makevar:`prefix` no :file:`Makefile` de nível "
"superior e ao argumento :option:`--prefix` para o script :program:"
"`configure` no momento da compilação. O valor está disponível para o código "
"Python como ``sys.base_prefix``. Só é útil no Unix. Veja também a próxima "
"função."

#: ../../c-api/init.rst:633
msgid ""
"Use :c:func:`PyConfig_Get(\"base_prefix\") <PyConfig_Get>` (:data:`sys."
"base_prefix`) instead. Use :c:func:`PyConfig_Get(\"prefix\") <PyConfig_Get>` "
"(:data:`sys.prefix`) if :ref:`virtual environments <venv-def>` need to be "
"handled."
msgstr ""
"Use :c:func:`PyConfig_Get(\"base_prefix\") <PyConfig_Get>` (:data:`sys."
"base_prefix`) em vez disso. Use :c:func:`PyConfig_Get(\"prefix\") "
"<PyConfig_Get>` (:data:`sys.prefix`) se :ref:`ambientes virtuais <venv-def>` "
"precisarem ser tratados."

#: ../../c-api/init.rst:642
msgid ""
"Return the *exec-prefix* for installed platform-*dependent* files.  This is "
"derived through a number of complicated rules from the program name set "
"with :c:member:`PyConfig.program_name` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the exec-prefix "
"is ``'/usr/local'``.  The returned string points into static storage; the "
"caller should not modify its value.  This corresponds to the :makevar:"
"`exec_prefix` variable in the top-level :file:`Makefile` and the ``--exec-"
"prefix`` argument to the :program:`configure` script at build  time.  The "
"value is available to Python code as ``sys.base_exec_prefix``.  It is only "
"useful on Unix."
msgstr ""
"Retorna o *prefixo-exec* para ficheiros instalados *dependentes* da "
"plataforma. Isso é derivado através de várias regras complicadas do nome do "
"programa definido com :c:member:`PyConfig.program_name` e algumas variáveis "
"de ambiente; por exemplo, se o nome do programa for ``'/usr/local/bin/"
"python'``, o prefixo-exec será ``'/usr/local'``. A string devolvida aponta "
"para o armazenamento estático; o chamador não deve modificar o seu valor. "
"Isto corresponde à variável :makevar:`exec_prefix` no :file:`Makefile` de "
"nível superior e ao argumento ``--exec-prefix`` para o script :program:"
"`configure` no momento da compilação. O valor está disponível para o código "
"Python como ``sys.base_exec_prefix``. Só é útil no Unix."

#: ../../c-api/init.rst:653
msgid ""
"Background: The exec-prefix differs from the prefix when platform dependent "
"files (such as executables and shared libraries) are installed in a "
"different directory tree.  In a typical installation, platform dependent "
"files may be installed in the :file:`/usr/local/plat` subtree while platform "
"independent may be installed in :file:`/usr/local`."
msgstr ""
"Contexto: O prefixo exec difere do prefixo quando ficheiros dependentes da "
"plataforma (como executáveis e bibliotecas partilhadas) são instalados numa "
"árvore de diretórios diferente. Numa instalação típica, os ficheiros "
"dependentes da plataforma podem ser instalados na subárvore :file:`/usr/"
"local/plat`, enquanto os independentes da plataforma podem ser instalados "
"em :file:`/usr/local`."

#: ../../c-api/init.rst:659
msgid ""
"Generally speaking, a platform is a combination of hardware and software "
"families, e.g.  Sparc machines running the Solaris 2.x operating system are "
"considered the same platform, but Intel machines running Solaris 2.x are "
"another platform, and Intel machines running Linux are yet another "
"platform.  Different major revisions of the same operating system generally "
"also form different platforms.  Non-Unix operating systems are a different "
"story; the installation strategies on those systems are so different that "
"the prefix and exec-prefix are meaningless, and set to the empty string. "
"Note that compiled Python bytecode files are platform independent (but not "
"independent from the Python version by which they were compiled!)."
msgstr ""
"De modo geral, uma plataforma é uma combinação de famílias de hardware e "
"software, por exemplo, máquinas Sparc que executam o sistema operativo "
"Solaris 2.x são consideradas a mesma plataforma, mas máquinas Intel que "
"executam Solaris 2.x são outra plataforma, e máquinas Intel que executam "
"Linux são ainda outra plataforma. Diferentes revisões principais do mesmo "
"sistema operativo geralmente também formam plataformas diferentes. Os "
"sistemas operativos não Unix são uma história diferente; as estratégias de "
"instalação nesses sistemas são tão diferentes que o prefixo e o prefixo de "
"execução não têm significado e são definidos como uma string vazia. Observe "
"que os ficheiros de bytecode Python compilados são independentes da "
"plataforma (mas não independentes da versão Python pela qual foram "
"compilados!)."

#: ../../c-api/init.rst:670
msgid ""
"System administrators will know how to configure the :program:`mount` or :"
"program:`automount` programs to share :file:`/usr/local` between platforms "
"while having :file:`/usr/local/plat` be a different filesystem for each "
"platform."
msgstr ""
"Os administradores de sistema saberão como configurar os programas :program:"
"`mount` ou :program:`automount` para partilhar :file:`/usr/local` entre "
"plataformas, mantendo :file:`/usr/local/plat` como um sistema de ficheiros "
"diferente para cada plataforma."

#: ../../c-api/init.rst:681
msgid ""
"Use :c:func:`PyConfig_Get(\"base_exec_prefix\") <PyConfig_Get>` (:data:`sys."
"base_exec_prefix`) instead. Use :c:func:`PyConfig_Get(\"exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.exec_prefix`) if :ref:`virtual environments "
"<venv-def>` need to be handled."
msgstr ""
"Use :c:func:`PyConfig_Get(\"base_exec_prefix\") <PyConfig_Get>` (:data:`sys."
"base_exec_prefix`) em vez disso. Use :c:func:`PyConfig_Get(\"exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.exec_prefix`) se :ref:`ambientes virtuais <venv-"
"def>` precisarem ser tratados."

#: ../../c-api/init.rst:693
msgid ""
"Return the full program name of the Python executable; this is  computed as "
"a side-effect of deriving the default module search path  from the program "
"name (set by :c:member:`PyConfig.program_name`). The returned string points "
"into static storage; the caller should not modify its value.  The value is "
"available to Python code as ``sys.executable``."
msgstr ""
"Retorna o nome completo do programa executável Python; isso é calculado como "
"um efeito colateral da derivação do caminho de pesquisa do módulo padrão a "
"partir do nome do programa (definido por :c:member:`PyConfig.program_name`). "
"A string retornada aponta para o armazenamento estático; o chamador não deve "
"modificar o seu valor. O valor está disponível para o código Python como "
"``sys.executable``."

#: ../../c-api/init.rst:716
msgid ""
"Return the default module search path; this is computed from the program "
"name (set by :c:member:`PyConfig.program_name`) and some environment "
"variables. The returned string consists of a series of directory names "
"separated by a platform dependent delimiter character.  The delimiter "
"character is ``':'`` on Unix and macOS, ``';'`` on Windows.  The returned "
"string points into static storage; the caller should not modify its value.  "
"The list :data:`sys.path` is initialized with this value on interpreter "
"startup; it can be (and usually is) modified later to change the search path "
"for loading modules."
msgstr ""
"Retorna o caminho de pesquisa padrão do módulo; ele é calculado a partir do "
"nome do programa (definido por :c:member:`PyConfig.program_name`) e algumas "
"variáveis de ambiente. A string retornada consiste em uma série de nomes de "
"diretórios separados por um caractere delimitador dependente da plataforma. "
"O caractere delimitador é ``':'`` no Unix e macOS, ``';'`` no Windows. A "
"string retornada aponta para o armazenamento estático; o chamador não deve "
"modificar o seu valor. A lista :data:`sys.path` é inicializada com este "
"valor na inicialização do interpretador; ela pode ser (e geralmente é) "
"modificada posteriormente para alterar o caminho de pesquisa para carregar "
"módulos."

#: ../../c-api/init.rst:734
msgid ""
"Use :c:func:`PyConfig_Get(\"module_search_paths\") <PyConfig_Get>` (:data:"
"`sys.path`) instead."
msgstr ""
"Use :c:func:`PyConfig_Get(\"module_search_paths\") <PyConfig_Get>` (:data:"
"`sys.path`) em vez disso."

#: ../../c-api/init.rst:740
msgid ""
"Return the version of this Python interpreter.  This is a string that looks "
"something like ::"
msgstr ""
"Retorna a versão deste interpretador Python. Esta é uma string semelhante "
"a ::"

#: ../../c-api/init.rst:743
msgid "\"3.0a5+ (py3k:63103M, May 12 2008, 00:53:55) \\n[GCC 4.2.3]\""
msgstr "\"3.0a5+ (py3k:63103M, May 12 2008, 00:53:55) \\n[GCC 4.2.3]\""

#: ../../c-api/init.rst:747
msgid ""
"The first word (up to the first space character) is the current Python "
"version; the first characters are the major and minor version separated by a "
"period.  The returned string points into static storage; the caller should "
"not modify its value.  The value is available to Python code as :data:`sys."
"version`."
msgstr ""
"A primeira palavra (até ao primeiro caractere de espaço) é a versão atual do "
"Python; os primeiros caracteres são a versão principal e secundária "
"separadas por um ponto. A string retornada aponta para o armazenamento "
"estático; o chamador não deve modificar o seu valor. O valor está disponível "
"para o código Python como :data:`sys.version`."

#: ../../c-api/init.rst:752
msgid "See also the :c:var:`Py_Version` constant."
msgstr "Veja também a constante :c:var:`Py_Version`."

#: ../../c-api/init.rst:759
msgid ""
"Return the platform identifier for the current platform.  On Unix, this is "
"formed from the \"official\" name of the operating system, converted to "
"lower case, followed by the major revision number; e.g., for Solaris 2.x, "
"which is also known as SunOS 5.x, the value is ``'sunos5'``.  On macOS, it "
"is ``'darwin'``.  On Windows, it is ``'win'``.  The returned string points "
"into static storage; the caller should not modify its value.  The value is "
"available to Python code as ``sys.platform``."
msgstr ""
"Retorna o identificador da plataforma atual. No Unix, ele é formado a partir "
"do nome \"oficial\" do sistema operativo, convertido para minúsculas, "
"seguido pelo número da revisão principal; por exemplo, para o Solaris 2.x, "
"também conhecido como SunOS 5.x, o valor é ``'sunos5'``. No macOS, é "
"``'darwin'``. No Windows, é ``'win'``. A string retornada aponta para o "
"armazenamento estático; o chamador não deve modificar o seu valor. O valor "
"está disponível para o código Python como ``sys.platform``."

#: ../../c-api/init.rst:770
msgid ""
"Return the official copyright string for the current Python version, for "
"example"
msgstr ""
"Retorne a string oficial de direitos de autor da versão atual do Python, por "
"exemplo, ."

#: ../../c-api/init.rst:772
msgid "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'``"
msgstr "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'``"

#: ../../c-api/init.rst:776
msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as ``sys.copyright``."
msgstr ""
"A string retornada aponta para o armazenamento estático; o chamador não deve "
"modificar o seu valor. O valor está disponível para o código Python como "
"``sys.copyright``."

#: ../../c-api/init.rst:782
msgid ""
"Return an indication of the compiler used to build the current Python "
"version, in square brackets, for example::"
msgstr ""
"Retorne uma indicação do compilador usado para construir a versão atual do "
"Python, entre parênteses retos, por exemplo:"

#: ../../c-api/init.rst:785
msgid "\"[GCC 2.7.2.2]\""
msgstr "\"[GCC 2.7.2.2]\""

#: ../../c-api/init.rst:789 ../../c-api/init.rst:803
msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as part of the variable "
"``sys.version``."
msgstr ""
"A string retornada aponta para o armazenamento estático; o chamador não deve "
"modificar o seu valor. O valor está disponível para o código Python como "
"parte da variável ``sys.version``."

#: ../../c-api/init.rst:796
msgid ""
"Return information about the sequence number and build date and time  of the "
"current Python interpreter instance, for example ::"
msgstr ""
"Retorna informações sobre o número de sequência e a data e hora de "
"compilação da instância atual do interpretador Python, por exemplo:"

#: ../../c-api/init.rst:799
msgid "\"#67, Aug  1 1997, 22:34:28\""
msgstr "\"#67, Aug  1 1997, 22:34:28\""

#: ../../c-api/init.rst:815
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"argv`, :c:member:`PyConfig.parse_argv` and :c:member:`PyConfig.safe_path` "
"should be used instead, see :ref:`Python Initialization Configuration <init-"
"config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: em vez "
"disso, deve-se usar as configurações :c:member:`PyConfig.argv`, :c:member:"
"`PyConfig.parse_argv` e :c:member:`PyConfig.safe_path`. Consulte :ref:"
"`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:820
msgid ""
"Set :data:`sys.argv` based on *argc* and *argv*.  These parameters are "
"similar to those passed to the program's :c:func:`main` function with the "
"difference that the first entry should refer to the script file to be "
"executed rather than the executable hosting the Python interpreter.  If "
"there isn't a script that will be run, the first entry in *argv* can be an "
"empty string.  If this function fails to initialize :data:`sys.argv`, a "
"fatal condition is signalled using :c:func:`Py_FatalError`."
msgstr ""
"Defina :data:`sys.argv` com base em *argc* e *argv*. Estes parâmetros são "
"semelhantes aos passados para a função :c:func:`main` do programa, com a "
"diferença de que a primeira entrada deve referir-se ao ficheiro de script a "
"ser executado, em vez do executável que hospeda o interpretador Python. Se "
"não houver um script a ser executado, a primeira entrada em *argv* pode ser "
"uma string vazia. Se esta função falhar ao inicializar :data:`sys.argv`, uma "
"condição fatal é sinalizada usando :c:func:`Py_FatalError`."

#: ../../c-api/init.rst:828
msgid ""
"If *updatepath* is zero, this is all the function does.  If *updatepath* is "
"non-zero, the function also modifies :data:`sys.path` according to the "
"following algorithm:"
msgstr ""
"Se *updatepath* for zero, esta é toda a função que a função executa. Se "
"*updatepath* for diferente de zero, a função também modifica :data:`sys."
"path` de acordo com o seguinte algoritmo:"

#: ../../c-api/init.rst:832
msgid ""
"If the name of an existing script is passed in ``argv[0]``, the absolute "
"path of the directory where the script is located is prepended to :data:`sys."
"path`."
msgstr ""
"Se o nome de um script existente for passado em ``argv[0]``, o caminho "
"absoluto do diretório onde o script está localizado é prefixado a :data:`sys."
"path`."

#: ../../c-api/init.rst:835
msgid ""
"Otherwise (that is, if *argc* is ``0`` or ``argv[0]`` doesn't point to an "
"existing file name), an empty string is prepended to :data:`sys.path`, which "
"is the same as prepending the current working directory (``\".\"``)."
msgstr ""
"Caso contrário (ou seja, se *argc* for ``0`` ou ``argv[0]`` não apontar para "
"um nome de ficheiro existente), uma string vazia é anexada ao :data:`sys."
"path`, o que é o mesmo que anexar o diretório de trabalho atual (``\".\"``)."

#: ../../c-api/init.rst:843 ../../c-api/init.rst:879
msgid ""
"See also :c:member:`PyConfig.orig_argv` and :c:member:`PyConfig.argv` "
"members of the :ref:`Python Initialization Configuration <init-config>`."
msgstr ""
"Veja também: :c:member:`PyConfig.orig_argv` e :c:member:`PyConfig.argv` "
"membros do :ref:`Configuração de inicialização do Python <init-config>`."

#: ../../c-api/init.rst:847
msgid ""
"It is recommended that applications embedding the Python interpreter for "
"purposes other than executing a single script pass ``0`` as *updatepath*, "
"and update :data:`sys.path` themselves if desired. See :cve:`2008-5983`."
msgstr ""
"Recomenda-se que as aplicações que incorporam o interpretador Python para "
"fins que não sejam a execução de um único script passem ``0`` como "
"*updatepath* e atualizem :data:`sys.path` elas mesmas, se desejado. "
"Consulte :cve:`2008-5983`."

#: ../../c-api/init.rst:852
msgid ""
"On versions before 3.1.3, you can achieve the same effect by manually "
"popping the first :data:`sys.path` element after having called :c:func:"
"`PySys_SetArgv`, for example using::"
msgstr ""
"Nas versões anteriores à 3.1.3, é possível obter o mesmo efeito removendo "
"manualmente o primeiro elemento :data:`sys.path` após chamar :c:func:"
"`PySys_SetArgv`, por exemplo, usando::"

#: ../../c-api/init.rst:856
msgid "PyRun_SimpleString(\"import sys; sys.path.pop(0)\\n\");"
msgstr "PyRun_SimpleString(\"import sys; sys.path.pop(0)\\n\");"

#: ../../c-api/init.rst:868
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"argv` and :c:member:`PyConfig.parse_argv` should be used instead, see :ref:"
"`Python Initialization Configuration <init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: em vez "
"disso, deve-se usar a configuração :c:member:`PyConfig.argv` e :c:member:"
"`PyConfig.parse_argv`, consulte :ref:`Configuração de inicialização do "
"Python <init-config>`."

#: ../../c-api/init.rst:872
msgid ""
"This function works like :c:func:`PySys_SetArgvEx` with *updatepath* set to "
"``1`` unless the :program:`python` interpreter was started with the :option:"
"`-I`."
msgstr ""
"Esta função funciona como :c:func:`PySys_SetArgvEx` com *updatepath* "
"definido como ``1``, a menos que o interpretador :program:`python` tenha "
"sido iniciado com a :option:`-I`."

#: ../../c-api/init.rst:882
msgid "The *updatepath* value depends on :option:`-I`."
msgstr "O valor *updatepath* depende de :option:`-I`."

#: ../../c-api/init.rst:889
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"home` should be used instead, see :ref:`Python Initialization Configuration "
"<init-config>`."
msgstr ""
"Esta API é mantida para compatibilidade com versões anteriores: deve-se usar "
"a configuração :c:member:`PyConfig.home`, consulte :ref:`Configuração de "
"inicialização do Python <init-config>`."

#: ../../c-api/init.rst:893
msgid ""
"Set the default \"home\" directory, that is, the location of the standard "
"Python libraries.  See :envvar:`PYTHONHOME` for the meaning of the argument "
"string."
msgstr ""
"Defina o diretório \"home\" padrão, ou seja, a localização das bibliotecas "
"padrão do Python. Consulte :envvar:`PYTHONHOME` para saber o significado da "
"string do argumento."

#: ../../c-api/init.rst:897
msgid ""
"The argument should point to a zero-terminated character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""
"O argumento deve apontar para uma cadeia de caracteres terminada em zero na "
"memória estática, cujo conteúdo não será alterado durante a execução do "
"programa. Nenhum código no interpretador Python alterará o conteúdo desta "
"memória."

#: ../../c-api/init.rst:910
msgid ""
"Return the default \"home\", that is, the value set by :c:member:`PyConfig."
"home`, or the value of the :envvar:`PYTHONHOME` environment variable if it "
"is set."
msgstr ""
"Retorna o \"home\" padrão, ou seja, o valor definido por :c:member:`PyConfig."
"home`, ou o valor da variável de ambiente :envvar:`PYTHONHOME`, se estiver "
"definida."

#: ../../c-api/init.rst:920
msgid ""
"Use :c:func:`PyConfig_Get(\"home\") <PyConfig_Get>` or the :envvar:"
"`PYTHONHOME` environment variable instead."
msgstr ""
"Use :c:func:`PyConfig_Get(\"home\") <PyConfig_Get>` ou a variável de "
"ambiente :envvar:`PYTHONHOME` em vez disso."

#: ../../c-api/init.rst:928
msgid "Thread State and the Global Interpreter Lock"
msgstr "Estado da thread e o bloqueio global do interpretador"

#: ../../c-api/init.rst:935
msgid ""
"Unless on a :term:`free-threaded <free threading>` build of :term:`CPython`, "
"the Python interpreter is not fully thread-safe.  In order to support multi-"
"threaded Python programs, there's a global lock, called the :term:`global "
"interpreter lock` or :term:`GIL`, that must be held by the current thread "
"before it can safely access Python objects. Without the lock, even the "
"simplest operations could cause problems in a multi-threaded program: for "
"example, when two threads simultaneously increment the reference count of "
"the same object, the reference count could end up being incremented only "
"once instead of twice."
msgstr ""
"A menos que esteja numa compilação :term:`free-threaded <free threading>` "
"do :term:`CPython`, o interpretador Python não é totalmente seguro para "
"threads. Para suportar programas Python multithread, existe um bloqueio "
"global, chamado :term:`global interpreter lock` ou :term:`GIL`, que deve ser "
"mantido pela thread atual antes que ela possa aceder com segurança aos "
"objetos Python. Sem o bloqueio, mesmo as operações mais simples podem causar "
"problemas num programa multithread: por exemplo, quando dois threads "
"incrementam simultaneamente a contagem de referências do mesmo objeto, a "
"contagem de referências pode acabar sendo incrementada apenas uma vez em vez "
"de duas vezes."

#: ../../c-api/init.rst:946
msgid ""
"Therefore, the rule exists that only the thread that has acquired the :term:"
"`GIL` may operate on Python objects or call Python/C API functions. In order "
"to emulate concurrency of execution, the interpreter regularly tries to "
"switch threads (see :func:`sys.setswitchinterval`).  The lock is also "
"released around potentially blocking I/O operations like reading or writing "
"a file, so that other Python threads can run in the meantime."
msgstr ""
"Portanto, existe a regra de que apenas o segmento que adquiriu o :term:`GIL` "
"pode operar em objetos Python ou chamar funções da API C/Python. Para emular "
"a concorrência de execução, o interpretador tenta regularmente alternar "
"entre threads (consulte :func:`sys.setswitchinterval`). O bloqueio também é "
"liberado em torno de operações de E/S potencialmente bloqueantes, como "
"leitura ou gravação de um ficheiro, para que outras threads Python possam "
"ser executadas nesse intervalo."

#: ../../c-api/init.rst:956
msgid ""
"The Python interpreter keeps some thread-specific bookkeeping information "
"inside a data structure called :c:type:`PyThreadState`, known as a :term:"
"`thread state`. Each OS thread has a thread-local pointer to a :c:type:"
"`PyThreadState`; a thread state referenced by this pointer is considered to "
"be :term:`attached <attached thread state>`."
msgstr ""
"O interpretador Python mantém algumas informações contábeis específicas da "
"thread dentro de uma estrutura de dados chamada :c:type:`PyThreadState`, "
"conhecida como :term:`estado da thread`. Cada thread do sistema operativo "
"tem um ponteiro local da thread para um :c:type:`PyThreadState`; um estado "
"da thread referenciado por este ponteiro é considerado :term:`anexado "
"<attached thread state>`."

#: ../../c-api/init.rst:961
msgid ""
"A thread can only have one :term:`attached thread state` at a time. An "
"attached thread state is typically analogous with holding the :term:`GIL`, "
"except on :term:`free-threaded <free threading>` builds.  On builds with "
"the :term:`GIL` enabled, :term:`attaching <attached thread state>` a thread "
"state will block until the :term:`GIL` can be acquired. However,  even on "
"builds with the :term:`GIL` disabled, it is still required to have an "
"attached thread state to call most of the C API."
msgstr ""
"Uma thread só pode ter um :term:`estado do thread anexado` de cada vez. Um "
"estado do thread anexado é normalmente análogo a manter o :term:`GIL`, "
"exceto em compilações :term:`free-threaded <free threading>`. Em compilações "
"com o :term:`GIL` ativado, :term:`anexar <attached thread state>` um estado "
"de thread irá bloquear até que o :term:`GIL` possa ser adquirido. No "
"entanto, mesmo em compilações com o :term:`GIL` desativado, ainda é "
"necessário ter um estado de thread anexado para chamar a maior parte da API "
"C."

#: ../../c-api/init.rst:968
msgid ""
"In general, there will always be an :term:`attached thread state` when using "
"Python's C API. Only in some specific cases (such as in a :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` block) will the thread not have an attached thread "
"state. If uncertain, check if :c:func:`PyThreadState_GetUnchecked` returns "
"``NULL``."
msgstr ""
"Em geral, haverá sempre um :term:`estado de thread anexado` ao usar a API C "
"do Python. Apenas em alguns casos específicos (como num bloco :c:macro:"
"`Py_BEGIN_ALLOW_THREADS`) é que o segmento não terá um estado do thread "
"anexado. Se não tiver a certeza, verifique se :c:func:"
"`PyThreadState_GetUnchecked` retorna ``NULL``."

#: ../../c-api/init.rst:974
msgid "Detaching the thread state from extension code"
msgstr "Desligar o estado da thread do código de extensão"

#: ../../c-api/init.rst:976
msgid ""
"Most extension code manipulating the :term:`thread state` has the following "
"simple structure::"
msgstr ""
"A maioria dos códigos de extensão que manipulam o :term:`estado da thread` "
"tem a seguinte estrutura simples::"

#: ../../c-api/init.rst:979
msgid ""
"Save the thread state in a local variable.\n"
"... Do some blocking I/O operation ...\n"
"Restore the thread state from the local variable."
msgstr ""
"Guarde o estado da thread numa variável local.\n"
"... Faça alguma operação de E/S de bloqueio ...\n"
"Restaure o estado da thread a partir da variável local."

#: ../../c-api/init.rst:983
msgid "This is so common that a pair of macros exists to simplify it::"
msgstr "Isso é tão comum que existe um par de macros para simplificá-lo:"

#: ../../c-api/init.rst:985
msgid ""
"Py_BEGIN_ALLOW_THREADS\n"
"... Do some blocking I/O operation ...\n"
"Py_END_ALLOW_THREADS"
msgstr ""
"Py_BEGIN_ALLOW_THREADS\n"
"... Faça algumas operações de E/S de bloqueio ...\n"
"Py_END_ALLOW_THREADS"

#: ../../c-api/init.rst:993
msgid ""
"The :c:macro:`Py_BEGIN_ALLOW_THREADS` macro opens a new block and declares a "
"hidden local variable; the :c:macro:`Py_END_ALLOW_THREADS` macro closes the "
"block."
msgstr ""
"A macro :c:macro:`Py_BEGIN_ALLOW_THREADS` abre um novo bloco e declara uma "
"variável local oculta; a macro :c:macro:`Py_END_ALLOW_THREADS` fecha o bloco."

#: ../../c-api/init.rst:997
msgid "The block above expands to the following code::"
msgstr "O bloco acima expande-se para o seguinte código:"

#: ../../c-api/init.rst:999
msgid ""
"PyThreadState *_save;\n"
"\n"
"_save = PyEval_SaveThread();\n"
"... Do some blocking I/O operation ...\n"
"PyEval_RestoreThread(_save);"
msgstr ""
"PyThreadState *_save;\n"
"\n"
"_save = PyEval_SaveThread();\n"
"... Faça alguma operação de E/S de bloqueio...\n"
"PyEval_RestoreThread(_save);"

#: ../../c-api/init.rst:1009
msgid "Here is how these functions work:"
msgstr "Veja como essas funções funcionam:"

#: ../../c-api/init.rst:1011
msgid ""
"The :term:`attached thread state` holds the :term:`GIL` for the entire "
"interpreter. When detaching the :term:`attached thread state`, the :term:"
"`GIL` is released, allowing other threads to attach a thread state to their "
"own thread, thus getting the :term:`GIL` and can start executing. The "
"pointer to the prior :term:`attached thread state` is stored as a local "
"variable. Upon reaching :c:macro:`Py_END_ALLOW_THREADS`, the thread state "
"that was previously :term:`attached <attached thread state>` is passed to :c:"
"func:`PyEval_RestoreThread`. This function will block until another releases "
"its :term:`thread state <attached thread state>`, thus allowing the old :"
"term:`thread state <attached thread state>` to get re-attached and the C API "
"can be called again."
msgstr ""
"O :term:`estado da thread anexada` mantém o :term:`GIL` para todo o "
"interpretador. Ao desanexar o :term:`estado da thread anexada`, o :term:"
"`GIL` é liberado, permitindo que outras threads anexem um estado de thread à "
"sua própria thread, obtendo assim o :term:`GIL` e podendo começar a ser "
"executadas. O ponteiro para o :term:`estado da thread anexada` anterior é "
"armazenado como uma variável local. Ao atingir :c:macro:"
"`Py_END_ALLOW_THREADS`, o estado da thread que era anteriormente :term:"
"`anexado <attached thread state>` é passado para :c:func:"
"`PyEval_RestoreThread`. Esta função irá bloquear até que outro libere o seu :"
"term:`estado da thread <attached thread state>`, permitindo assim que o "
"antigo :term:`estado da thread <attached thread state>` seja anexado "
"novamente e a API C possa ser chamada novamente."

#: ../../c-api/init.rst:1021
msgid ""
"For :term:`free-threaded <free threading>` builds, the :term:`GIL` is "
"normally out of the question, but detaching the :term:`thread state "
"<attached thread state>` is still required for blocking I/O and long "
"operations. The difference is that threads don't have to wait for the :term:"
"`GIL` to be released to attach their thread state, allowing true multi-core "
"parallelism."
msgstr ""
"Para compilações :term:`free-threaded <free threading>`, o :term:`GIL` "
"normalmente está fora de questão, mas ainda é necessário separar o :term:"
"`estado da thread <attached thread state>` para bloquear E/S e operações "
"longas. A diferença é que as threads não precisam esperar que o :term:`GIL` "
"seja liberado para anexar seu estado de thread, permitindo um verdadeiro "
"paralelismo multi-core."

#: ../../c-api/init.rst:1027
msgid ""
"Calling system I/O functions is the most common use case for detaching the :"
"term:`thread state <attached thread state>`, but it can also be useful "
"before calling long-running computations which don't need access to Python "
"objects, such as compression or cryptographic functions operating over "
"memory buffers. For example, the standard :mod:`zlib` and :mod:`hashlib` "
"modules detach the :term:`thread state <attached thread state>` when "
"compressing or hashing data."
msgstr ""
"Chamar funções de E/S do sistema é o caso de uso mais comum para separar o :"
"term:`estado da thread <attached thread state>`, mas também pode ser útil "
"antes de chamar cálculos de longa duração que não precisam de acesso a "
"objetos Python, como funções de compressão ou criptográficas que operam em "
"buffers de memória. Por exemplo, os módulos padrão :mod:`zlib` e :mod:"
"`hashlib` destacam o :term:`estado da thread <attached thread state>` ao "
"comprimir ou fazer o hash de dados."

#: ../../c-api/init.rst:1038
msgid "Non-Python created threads"
msgstr "Threads não criados em Python"

#: ../../c-api/init.rst:1040
msgid ""
"When threads are created using the dedicated Python APIs (such as the :mod:"
"`threading` module), a thread state is automatically associated to them and "
"the code showed above is therefore correct.  However, when threads are "
"created from C (for example by a third-party library with its own thread "
"management), they don't hold the :term:`GIL`, because they don't have an :"
"term:`attached thread state`."
msgstr ""
"Quando os threads são criados usando as APIs Python dedicadas (como o "
"módulo :mod:`threading`), um estado de thread é automaticamente associado a "
"eles e, portanto, o código mostrado acima está correto. No entanto, quando "
"os threads são criados a partir de C (por exemplo, por uma biblioteca de "
"terceiros com o seu próprio gerenciamento de threads), eles não mantêm o :"
"term:`GIL`, porque não têm um :term:`estado de thread anexado`."

#: ../../c-api/init.rst:1047
msgid ""
"If you need to call Python code from these threads (often this will be part "
"of a callback API provided by the aforementioned third-party library), you "
"must first register these threads with the interpreter by creating an :term:"
"`attached thread state` before you can start using the Python/C API.  When "
"you are done, you should detach the :term:`thread state <attached thread "
"state>`, and finally free it."
msgstr ""
"Se precisar chamar código Python a partir destas threads (muitas vezes isso "
"fará parte de uma API de retorno de chamada fornecida pela biblioteca de "
"terceiros mencionada acima), deve primeiro registar estas threads no "
"interpretador, criando um :term:`estado de thread anexado` antes de poder "
"começar a usar a API C/Python. Quando terminar, deve separar o :term:`estado "
"de thread <attached thread state>` e, finalmente, liberá-lo."

#: ../../c-api/init.rst:1054
msgid ""
"The :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release` functions "
"do all of the above automatically.  The typical idiom for calling into "
"Python from a C thread is::"
msgstr ""
"As funções :c:func:`PyGILState_Ensure` e :c:func:`PyGILState_Release` fazem "
"tudo isso automaticamente. A expressão típica para chamar o Python a partir "
"de um thread C é:"

#: ../../c-api/init.rst:1058
msgid ""
"PyGILState_STATE gstate;\n"
"gstate = PyGILState_Ensure();\n"
"\n"
"/* Perform Python actions here. */\n"
"result = CallSomeFunction();\n"
"/* evaluate result or handle exception */\n"
"\n"
"/* Release the thread. No Python API allowed beyond this point. */\n"
"PyGILState_Release(gstate);"
msgstr ""
"PyGILState_STATE gstate;\n"
"gstate = PyGILState_Ensure();\n"
"\n"
"/* Realize ações Python aqui. */\n"
"result = CallSomeFunction();\n"
"/* avaliar resultado ou lidar com exceção */\n"
"\n"
"/* Liberar o thread. Nenhuma API Python é permitida além deste ponto. */\n"
"PyGILState_Release(gstate);"

#: ../../c-api/init.rst:1068
msgid ""
"Note that the ``PyGILState_*`` functions assume there is only one global "
"interpreter (created automatically by :c:func:`Py_Initialize`).  Python "
"supports the creation of additional interpreters (using :c:func:"
"`Py_NewInterpreter`), but mixing multiple interpreters and the "
"``PyGILState_*`` API is unsupported. This is because :c:func:"
"`PyGILState_Ensure` and similar functions default to :term:`attaching "
"<attached thread state>` a :term:`thread state` for the main interpreter, "
"meaning that the thread can't safely interact with the calling "
"subinterpreter."
msgstr ""
"Observe que as funções ``PyGILState_*`` assumem que existe apenas um "
"interpretador global (criado automaticamente por :c:func:`Py_Initialize`). O "
"Python suporta a criação de interpretadores adicionais (usando :c:func:"
"`Py_NewInterpreter`), mas a mistura de vários interpretadores e a API "
"``PyGILState_*`` não é suportada. Isso ocorre porque :c:func:"
"`PyGILState_Ensure` e funções semelhantes padronizam :term:`anexar <attached "
"thread state>` um :term:`estado de thread` para o interpretador principal, o "
"que significa que a thread não pode interagir com segurança com o "
"subinterpretador de chamada."

#: ../../c-api/init.rst:1078
msgid "Supporting subinterpreters in non-Python threads"
msgstr "Suporte a subinterpretadores em threads não Python"

#: ../../c-api/init.rst:1080
msgid ""
"If you would like to support subinterpreters with non-Python created "
"threads, you must use the ``PyThreadState_*`` API instead of the traditional "
"``PyGILState_*`` API."
msgstr ""
"Se desejar suportar subinterpretadores com threads criadas fora do Python, "
"deve usar a API ``PyThreadState_*`` em vez da API tradicional "
"``PyGILState_*``."

#: ../../c-api/init.rst:1084
msgid ""
"In particular, you must store the interpreter state from the calling "
"function and pass it to :c:func:`PyThreadState_New`, which will ensure that "
"the :term:`thread state` is targeting the correct interpreter::"
msgstr ""
"Em particular, deve armazenar o estado do interpretador da função de chamada "
"e passá-lo para :c:func:`PyThreadState_New`, o que garantirá que o :term:"
"`estado da thread` esteja direcionado para o interpretador correto::"

#: ../../c-api/init.rst:1088
msgid ""
"/* The return value of PyInterpreterState_Get() from the\n"
"   function that created this thread. */\n"
"PyInterpreterState *interp = ThreadData->interp;\n"
"PyThreadState *tstate = PyThreadState_New(interp);\n"
"PyThreadState_Swap(tstate);\n"
"\n"
"/* GIL of the subinterpreter is now held.\n"
"   Perform Python actions here. */\n"
"result = CallSomeFunction();\n"
"/* evaluate result or handle exception */\n"
"\n"
"/* Destroy the thread state. No Python API allowed beyond this point. */\n"
"PyThreadState_Clear(tstate);\n"
"PyThreadState_DeleteCurrent();"
msgstr ""
"/* O valor de retorno de PyInterpreterState_Get() da função que criou este "
"thread. */\n"
"PyInterpreterState *interp = ThreadData->interp;\n"
"PyThreadState *tstate = PyThreadState_New(interp);\n"
"PyThreadState_Swap(tstate);\n"
"\n"
"/* O GIL do subinterpretador agora está retido. \n"
"Execute ações Python aqui. */\n"
"result = CallSomeFunction();\n"
"/* avalie o resultado ou trate a exceção */\n"
"\n"
"/* Destrua o estado da thread. Nenhuma API Python é permitida além deste "
"ponto. */\n"
"PyThreadState_Clear(tstate);\n"
"PyThreadState_DeleteCurrent();"

#: ../../c-api/init.rst:1106
msgid "Cautions about fork()"
msgstr "Precauções sobre fork()"

#: ../../c-api/init.rst:1108
msgid ""
"Another important thing to note about threads is their behaviour in the face "
"of the C :c:func:`fork` call. On most systems with :c:func:`fork`, after a "
"process forks only the thread that issued the fork will exist.  This has a "
"concrete impact both on how locks must be handled and on all stored state in "
"CPython's runtime."
msgstr ""
"Outra coisa importante a notar sobre os threads é o seu comportamento face à "
"chamada C :c:func:`fork`. Na maioria dos sistemas com :c:func:`fork`, após "
"um processo se bifurcar, apenas o thread que emitiu a bifurcação continuará "
"a existir. Isto tem um impacto concreto tanto na forma como os bloqueios "
"devem ser tratados como em todos os estados armazenados no tempo de execução "
"do CPython."

#: ../../c-api/init.rst:1114
msgid ""
"The fact that only the \"current\" thread remains means any locks held by "
"other threads will never be released. Python solves this for :func:`os.fork` "
"by acquiring the locks it uses internally before the fork, and releasing "
"them afterwards. In addition, it resets any :ref:`lock-objects` in the "
"child. When extending or embedding Python, there is no way to inform Python "
"of additional (non-Python) locks that need to be acquired before or reset "
"after a fork. OS facilities such as :c:func:`!pthread_atfork` would need to "
"be used to accomplish the same thing. Additionally, when extending or "
"embedding Python, calling :c:func:`fork` directly rather than through :func:"
"`os.fork` (and returning to or calling into Python) may result in a deadlock "
"by one of Python's internal locks being held by a thread that is defunct "
"after the fork. :c:func:`PyOS_AfterFork_Child` tries to reset the necessary "
"locks, but is not always able to."
msgstr ""
"O facto de apenas o thread «atual» permanecer significa que quaisquer "
"bloqueios mantidos por outros threads nunca serão libertados. O Python "
"resolve isso para :func:`os.fork` adquirindo os bloqueios que usa "
"internamente antes da bifurcação e libertando-os depois. Além disso, ele "
"redefine quaisquer :ref:`lock-objects` na criança. Ao estender ou incorporar "
"o Python, não há como informar ao Python sobre bloqueios adicionais (não "
"Python) que precisam ser adquiridos antes ou redefinidos após um fork. "
"Recursos do sistema operativo, como :c:func:`!pthread_atfork`, precisariam "
"ser usados para realizar a mesma coisa. Além disso, ao estender ou "
"incorporar o Python, chamar :c:func:`fork` diretamente em vez de através de :"
"func:`os.fork` (e retornar ou chamar o Python) pode resultar num impasse por "
"um dos bloqueios internos do Python ser mantido por um thread que está "
"inativo após o fork. :c:func:`PyOS_AfterFork_Child` tenta redefinir os "
"bloqueios necessários, mas nem sempre é possível."

#: ../../c-api/init.rst:1129
msgid ""
"The fact that all other threads go away also means that CPython's runtime "
"state there must be cleaned up properly, which :func:`os.fork` does.  This "
"means finalizing all other :c:type:`PyThreadState` objects belonging to the "
"current interpreter and all other :c:type:`PyInterpreterState` objects.  Due "
"to this and the special nature of the :ref:`\"main\" interpreter <sub-"
"interpreter-support>`, :c:func:`fork` should only be called in that "
"interpreter's \"main\" thread, where the CPython global runtime was "
"originally initialized. The only exception is if :c:func:`exec` will be "
"called immediately after."
msgstr ""
"O facto de todos os outros threads desaparecerem também significa que o "
"estado de tempo de execução do CPython deve ser limpo adequadamente, o que é "
"feito pelo :func:`os.fork`. Isso significa finalizar todos os outros "
"objetos :c:type:`PyThreadState` pertencentes ao interpretador atual e todos "
"os outros objetos :c:type:`PyInterpreterState`. Devido a isso e à natureza "
"especial do :ref:`\"intérprete principal <sub-interpreter-support>`, :c:func:"
"`fork` só deve ser chamado na thread \"principal\" desse intérprete, onde o "
"tempo de execução global do CPython foi originalmente inicializado. A única "
"exceção é se :c:func:`exec` for chamado imediatamente depois."

#: ../../c-api/init.rst:1143
msgid "Cautions regarding runtime finalization"
msgstr "Precauções relativas à finalização do tempo de execução"

#: ../../c-api/init.rst:1145
msgid ""
"In the late stage of :term:`interpreter shutdown`, after attempting to wait "
"for non-daemon threads to exit (though this can be interrupted by :class:"
"`KeyboardInterrupt`) and running the :mod:`atexit` functions, the runtime is "
"marked as *finalizing*: :c:func:`Py_IsFinalizing` and :func:`sys."
"is_finalizing` return true.  At this point, only the *finalization thread* "
"that initiated finalization (typically the main thread) is allowed to "
"acquire the :term:`GIL`."
msgstr ""
"Na fase final do :term:`encerramento do interpretador`, após tentar aguardar "
"a saída das threads não-daemon (embora isso possa ser interrompido por :"
"class:`KeyboardInterrupt`) e executar as funções :mod:`atexit`, o tempo de "
"execução é marcado como *finalizando*: :c:func:`Py_IsFinalizing` e :func:"
"`sys.is_finalizing` retornam verdadeiro. Neste ponto, apenas o *thread de "
"finalização* que iniciou a finalização (normalmente o thread principal) tem "
"permissão para adquirir o :term:`GIL`."

#: ../../c-api/init.rst:1153
msgid ""
"If any thread, other than the finalization thread, attempts to attach a :"
"term:`thread state` during finalization, either explicitly or implicitly, "
"the thread enters **a permanently blocked state** where it remains until the "
"program exits.  In most cases this is harmless, but this can result in "
"deadlock if a later stage of finalization attempts to acquire a lock owned "
"by the blocked thread, or otherwise waits on the blocked thread."
msgstr ""
"Se qualquer thread, exceto a thread de finalização, tentar anexar um :term:"
"`estado da thread` durante a finalização, seja explicitamente ou "
"implicitamente, a thread entrará em **um estado permanentemente bloqueado**, "
"onde permanecerá até que o programa seja encerrado. Na maioria dos casos, "
"isso é inofensivo, mas pode resultar em um impasse se uma etapa posterior da "
"finalização tentar adquirir um bloqueio pertencente à thread bloqueada ou, "
"de outra forma, aguardar a thread bloqueada."

#: ../../c-api/init.rst:1160
msgid ""
"Gross? Yes. This prevents random crashes and/or unexpectedly skipped C++ "
"finalizations further up the call stack when such threads were forcibly "
"exited here in CPython 3.13 and earlier. The CPython runtime :term:`thread "
"state` C APIs have never had any error reporting or handling expectations "
"at :term:`thread state` attachment time that would've allowed for graceful "
"exit from this situation. Changing that would require new stable C APIs and "
"rewriting the majority of C code in the CPython ecosystem to use those with "
"error handling."
msgstr ""
"Nojento? Sim. Isso evita falhas aleatórias e/ou finalizações C++ "
"inesperadamente ignoradas mais acima na pilha de chamadas quando tais "
"threads eram encerradas forçosamente aqui no CPython 3.13 e versões "
"anteriores. As APIs C do tempo de execução do CPython :term:`thread state` "
"nunca tiveram qualquer expectativa de relatório ou tratamento de erros no "
"momento da anexação do :term:`thread state` que permitisse uma saída "
"elegante dessa situação. Mudar isso exigiria novas APIs C estáveis e "
"reescrever a maior parte do código C no ecossistema CPython para usar "
"aquelas com tratamento de erros."

#: ../../c-api/init.rst:1170
msgid "High-level API"
msgstr "API de alto nível"

#: ../../c-api/init.rst:1172
msgid ""
"These are the most commonly used types and functions when writing C "
"extension code, or when embedding the Python interpreter:"
msgstr ""
"Estes são os tipos e funções mais comumente usados ao escrever código de "
"extensão C ou ao incorporar o interpretador Python:"

#: ../../c-api/init.rst:1177
msgid ""
"This data structure represents the state shared by a number of cooperating "
"threads.  Threads belonging to the same interpreter share their module "
"administration and a few other internal items. There are no public members "
"in this structure."
msgstr ""
"Esta estrutura de dados representa o estado partilhado por várias threads "
"cooperantes. As threads pertencentes ao mesmo interpretador partilham a sua "
"administração de módulos e alguns outros itens internos. Não há membros "
"públicos nesta estrutura."

#: ../../c-api/init.rst:1182
msgid ""
"Threads belonging to different interpreters initially share nothing, except "
"process state like available memory, open file descriptors and such.  The "
"global interpreter lock is also shared by all threads, regardless of to "
"which interpreter they belong."
msgstr ""
"Os threads pertencentes a diferentes interpretadores inicialmente não "
"partilham nada, exceto o estado do processo, como memória disponível, "
"descritores de ficheiros abertos e similares. O bloqueio global do "
"interpretador também é partilhado por todos os threads, independentemente do "
"interpretador ao qual pertencem."

#: ../../c-api/init.rst:1189
msgid ""
":pep:`684` introduced the possibility of a :ref:`per-interpreter GIL <per-"
"interpreter-gil>`. See :c:func:`Py_NewInterpreterFromConfig`."
msgstr ""

#: ../../c-api/init.rst:1196
msgid ""
"This data structure represents the state of a single thread.  The only "
"public data member is:"
msgstr ""
"Esta estrutura de dados representa o estado de um único thread. O único "
"membro de dados público é:"

#: ../../c-api/init.rst:1201
msgid "This thread's interpreter state."
msgstr "Estado do interpretador deste thread."

#: ../../c-api/init.rst:1212
msgid "Deprecated function which does nothing."
msgstr "Função obsoleta que não faz nada."

#: ../../c-api/init.rst:1214
msgid ""
"In Python 3.6 and older, this function created the GIL if it didn't exist."
msgstr ""
"No Python 3.6 e versões anteriores, esta função criava o GIL se ele não "
"existisse."

#: ../../c-api/init.rst:1216
msgid "The function now does nothing."
msgstr "A função agora não faz nada."

#: ../../c-api/init.rst:1219
msgid ""
"This function is now called by :c:func:`Py_Initialize()`, so you don't have "
"to call it yourself anymore."
msgstr ""
"Esta função agora é chamada por :c:func:`Py_Initialize()`, portanto, não é "
"mais necessário chamá-la manualmente."

#: ../../c-api/init.rst:1223
msgid ""
"This function cannot be called before :c:func:`Py_Initialize()` anymore."
msgstr ""
"Esta função não pode mais ser chamada antes de :c:func:`Py_Initialize()`."

#: ../../c-api/init.rst:1233
msgid ""
"Detach the :term:`attached thread state` and return it. The thread will have "
"no :term:`thread state` upon returning."
msgstr ""
"Desanexe o :term:`estado da thread anexada` e retorne-o. A thread não terá "
"nenhum :term:`estado da thread` ao retornar."

#: ../../c-api/init.rst:1239
msgid ""
"Set the :term:`attached thread state` to *tstate*. The passed :term:`thread "
"state` **should not** be :term:`attached <attached thread state>`, otherwise "
"deadlock ensues. *tstate* will be attached upon returning."
msgstr ""
"Defina o :term:`estado da thread anexada` como *tstate*. O :term:`estado da "
"thread` passado **não deve** ser :term:`anexado <attached thread state>`, "
"caso contrário, ocorrerá um impasse. *tstate* será anexado ao retornar."

#: ../../c-api/init.rst:1244 ../../c-api/init.rst:1615
msgid ""
"Calling this function from a thread when the runtime is finalizing will hang "
"the thread until the program exits, even if the thread was not created by "
"Python.  Refer to :ref:`cautions-regarding-runtime-finalization` for more "
"details."
msgstr ""
"Chamar esta função a partir de um thread quando o tempo de execução estiver "
"a ser finalizado irá bloquear o thread até que o programa seja encerrado, "
"mesmo que o thread não tenha sido criado pelo Python. Consulte :ref:"
"`cautions-regarding-runtime-finalization` para obter mais detalhes."

#: ../../c-api/init.rst:1249 ../../c-api/init.rst:1320
#: ../../c-api/init.rst:1625
msgid ""
"Hangs the current thread, rather than terminating it, if called while the "
"interpreter is finalizing."
msgstr ""
"Suspende o thread atual, em vez de o encerrar, se for chamado enquanto o "
"interpretador estiver a finalizar."

#: ../../c-api/init.rst:1255
msgid ""
"Return the :term:`attached thread state`. If the thread has no attached "
"thread state, (such as when inside of :c:macro:`Py_BEGIN_ALLOW_THREADS` "
"block), then this issues a fatal error (so that the caller needn't check for "
"``NULL``)."
msgstr ""
"Retorna o :term:`estado da thread anexada`. Se a thread não tiver um estado "
"do thread anexado (como quando estiver dentro do bloco :c:macro:"
"`Py_BEGIN_ALLOW_THREADS`), isso gera um erro fatal (para que o chamador não "
"precise verificar se há ``NULL``)."

#: ../../c-api/init.rst:1260
msgid "See also :c:func:`PyThreadState_GetUnchecked`."
msgstr "Veja também: :c:func:`PyThreadState_GetUnchecked`."

#: ../../c-api/init.rst:1264
msgid ""
"Similar to :c:func:`PyThreadState_Get`, but don't kill the process with a "
"fatal error if it is NULL. The caller is responsible to check if the result "
"is NULL."
msgstr ""
"Semelhante a :c:func:`PyThreadState_Get`, mas não encerra o processo com um "
"erro fatal se for NULL. O chamador é responsável por verificar se o "
"resultado é NULL."

#: ../../c-api/init.rst:1268
msgid ""
"In Python 3.5 to 3.12, the function was private and known as "
"``_PyThreadState_UncheckedGet()``."
msgstr ""
"No Python 3.5 a 3.12, a função era privada e conhecida como "
"``_PyThreadState_UncheckedGet()``."

#: ../../c-api/init.rst:1275
msgid ""
"Set the :term:`attached thread state` to *tstate*, and return the :term:"
"`thread state` that was attached prior to calling."
msgstr ""
"Defina o :term:`estado do thread anexado` como *tstate* e retorne o :term:"
"`estado da thread` que estava anexado antes da chamada."

#: ../../c-api/init.rst:1278
msgid ""
"This function is safe to call without an :term:`attached thread state`; it "
"will simply return ``NULL`` indicating that there was no prior thread state."
msgstr ""
"Esta função é segura para chamar sem um :term:`estado de thread anexado`; "
"ela simplesmente retornará ``NULL`` indicando que não havia nenhum estado de "
"thread anterior."

#: ../../c-api/init.rst:1285
msgid ""
"Similar to :c:func:`PyGILState_Ensure`, this function will hang the thread "
"if the runtime is finalizing."
msgstr ""
"Semelhante a :c:func:`PyGILState_Ensure`, esta função irá suspender o thread "
"se o tempo de execução estiver a finalizar."

#: ../../c-api/init.rst:1289
msgid ""
"The following functions use thread-local storage, and are not compatible "
"with sub-interpreters:"
msgstr ""
"As seguintes funções utilizam armazenamento local de thread e não são "
"compatíveis com subinterpretadores:"

#: ../../c-api/init.rst:1294
msgid ""
"Ensure that the current thread is ready to call the Python C API regardless "
"of the current state of Python, or of the :term:`attached thread state`. "
"This may be called as many times as desired by a thread as long as each call "
"is matched with a call to :c:func:`PyGILState_Release`. In general, other "
"thread-related APIs may be used between :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls as long as the thread state is restored to "
"its previous state before the Release().  For example, normal usage of the :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` and :c:macro:`Py_END_ALLOW_THREADS` macros "
"is acceptable."
msgstr ""
"Certifique-se de que o thread atual está pronto para chamar a API C do "
"Python, independentemente do estado atual do Python ou do :term:`estado do "
"thread anexado`. Isso pode ser chamado quantas vezes desejar por um thread, "
"desde que cada chamada seja correspondida por uma chamada para :c:func:"
"`PyGILState_Release`. Em geral, outras APIs relacionadas com threads podem "
"ser usadas entre as chamadas :c:func:`PyGILState_Ensure` e :c:func:"
"`PyGILState_Release`, desde que o estado da thread seja restaurado ao seu "
"estado anterior antes do Lançamento(). Por exemplo, o uso normal das macros :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` e :c:macro:`Py_END_ALLOW_THREADS` é "
"aceitável."

#: ../../c-api/init.rst:1304
msgid ""
"The return value is an opaque \"handle\" to the :term:`attached thread "
"state` when :c:func:`PyGILState_Ensure` was called, and must be passed to :c:"
"func:`PyGILState_Release` to ensure Python is left in the same state. Even "
"though recursive calls are allowed, these handles *cannot* be shared - each "
"unique call to :c:func:`PyGILState_Ensure` must save the handle for its call "
"to :c:func:`PyGILState_Release`."
msgstr ""
"O valor de retorno é um \"identificador\" opaco para o :term:`estado da "
"thread anexada` quando :c:func:`PyGILState_Ensure` foi chamado, e deve ser "
"passado para :c:func:`PyGILState_Release` para garantir que o Python "
"permaneça no mesmo estado. Embora chamadas recursivas sejam permitidas, "
"esses identificadores *não podem* ser partilhados — cada chamada única para :"
"c:func:`PyGILState_Ensure` deve guardar o identificador para a sua chamada "
"para :c:func:`PyGILState_Release`."

#: ../../c-api/init.rst:1311
msgid ""
"When the function returns, there will be an :term:`attached thread state` "
"and the thread will be able to call arbitrary Python code.  Failure is a "
"fatal error."
msgstr ""
"Quando a função retornar, haverá um :term:`estado de thread anexado` e a "
"thread poderá chamar código Python arbitrário. A falha é um erro fatal."

#: ../../c-api/init.rst:1315
msgid ""
"Calling this function when the runtime is finalizing is unsafe. Doing so "
"will either hang the thread until the program ends, or fully crash the "
"interpreter in rare cases. Refer to :ref:`cautions-regarding-runtime-"
"finalization` for more details."
msgstr ""
"Chamar esta função quando o tempo de execução está a ser finalizado não é "
"seguro. Isso irá travar o thread até o programa terminar ou, em casos raros, "
"travar completamente o interpretador. Consulte :ref:`cautions-regarding-"
"runtime-finalization` para obter mais detalhes."

#: ../../c-api/init.rst:1326
msgid ""
"Release any resources previously acquired.  After this call, Python's state "
"will be the same as it was prior to the corresponding :c:func:"
"`PyGILState_Ensure` call (but generally this state will be unknown to the "
"caller, hence the use of the GILState API)."
msgstr ""
"Liberte todos os recursos adquiridos anteriormente. Após esta chamada, o "
"estado do Python será o mesmo que era antes da chamada correspondente :c:"
"func:`PyGILState_Ensure` (mas geralmente este estado será desconhecido para "
"o chamador, daí o uso da API GILState)."

#: ../../c-api/init.rst:1331
msgid ""
"Every call to :c:func:`PyGILState_Ensure` must be matched by a call to :c:"
"func:`PyGILState_Release` on the same thread."
msgstr ""
"Cada chamada para :c:func:`PyGILState_Ensure` deve ser acompanhada por uma "
"chamada para :c:func:`PyGILState_Release` na mesma thread."

#: ../../c-api/init.rst:1336
msgid ""
"Get the :term:`attached thread state` for this thread.  May return ``NULL`` "
"if no GILState API has been used on the current thread.  Note that the main "
"thread always has such a thread-state, even if no auto-thread-state call has "
"been made on the main thread.  This is mainly a helper/diagnostic function."
msgstr ""
"Obtém o :term:`estado da thread anexada` para esta thread. Pode retornar "
"``NULL`` se nenhuma API GILState tiver sido usada na thread atual. Observe "
"que a thread principal sempre tem esse estado de thread, mesmo que nenhuma "
"chamada de estado de thread automático tenha sido feita na thread principal. "
"Esta é principalmente uma função auxiliar/de diagnóstico."

#: ../../c-api/init.rst:1342
msgid ""
"This function does not account for :term:`thread states <thread state>` "
"created by something other than :c:func:`PyGILState_Ensure` (such as :c:func:"
"`PyThreadState_New`). Prefer :c:func:`PyThreadState_Get` or :c:func:"
"`PyThreadState_GetUnchecked` for most cases."
msgstr ""
"Esta função não leva em consideração :term:`estados de thread <thread "
"state>` criados por algo diferente de :c:func:`PyGILState_Ensure` (como :c:"
"func:`PyThreadState_New`). Prefira :c:func:`PyThreadState_Get` ou :c:func:"
"`PyThreadState_GetUnchecked` na maioria dos casos."

#: ../../c-api/init.rst:1351
msgid ""
"Return ``1`` if the current thread is holding the :term:`GIL` and ``0`` "
"otherwise. This function can be called from any thread at any time. Only if "
"it has had its :term:`thread state <attached thread state>` initialized via :"
"c:func:`PyGILState_Ensure` will it return ``1``. This is mainly a helper/"
"diagnostic function.  It can be useful for example in callback contexts or "
"memory allocation functions when knowing that the :term:`GIL` is locked can "
"allow the caller to perform sensitive actions or otherwise behave "
"differently."
msgstr ""
"Retorne ``1`` se o thread atual estiver mantendo o :term:`GIL` e ``0`` caso "
"contrário. Esta função pode ser chamada a partir de qualquer thread a "
"qualquer momento. Somente se tiver seu :term:`estado da thread <attached "
"thread state>` inicializado via :c:func:`PyGILState_Ensure` é que retornará "
"``1``. Esta é principalmente uma função auxiliar/de diagnóstico. Pode ser "
"útil, por exemplo, em contextos de retorno de chamada ou funções de alocação "
"de memória, quando saber que o :term:`GIL` está bloqueado pode permitir que "
"o chamador execute ações sensíveis ou se comporte de maneira diferente."

#: ../../c-api/init.rst:1361
msgid ""
"If the current Python process has ever created a subinterpreter, this "
"function will *always* return ``1``. Prefer :c:func:"
"`PyThreadState_GetUnchecked` for most cases."
msgstr ""
"Se o processo Python atual já criou um subinterpretador, esta função irá "
"*sempre* retornar ``1``. Prefira :c:func:`PyThreadState_GetUnchecked` na "
"maioria dos casos."

#: ../../c-api/init.rst:1368
msgid ""
"The following macros are normally used without a trailing semicolon; look "
"for example usage in the Python source distribution."
msgstr ""
"As seguintes macros são normalmente utilizadas sem um ponto-e-vírgula no "
"final; veja exemplos de utilização na distribuição de código-fonte Python."

#: ../../c-api/init.rst:1374
msgid ""
"This macro expands to ``{ PyThreadState *_save; _save = PyEval_SaveThread();"
"``. Note that it contains an opening brace; it must be matched with a "
"following :c:macro:`Py_END_ALLOW_THREADS` macro.  See above for further "
"discussion of this macro."
msgstr ""
"Esta macro expande-se para ``{ PyThreadState *_save; _save = "
"PyEval_SaveThread();``. Note que contém uma chave de abertura; deve ser "
"combinada com a macro seguinte :c:macro:`Py_END_ALLOW_THREADS`. Veja acima "
"para mais discussões sobre esta macro."

#: ../../c-api/init.rst:1382
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save); }``. Note that it "
"contains a closing brace; it must be matched with an earlier :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` macro.  See above for further discussion of this "
"macro."
msgstr ""
"Esta macro expande-se para ``PyEval_RestoreThread(_save); }``. Note que "
"contém uma chave de fecho; deve corresponder a uma macro :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` anterior. Veja acima para mais discussões sobre "
"esta macro."

#: ../../c-api/init.rst:1390
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save);``: it is equivalent to :"
"c:macro:`Py_END_ALLOW_THREADS` without the closing brace."
msgstr ""
"Esta macro expande-se para ``PyEval_RestoreThread(_save);``: é equivalente "
"a :c:macro:`Py_END_ALLOW_THREADS` sem a chave de fecho."

#: ../../c-api/init.rst:1396
msgid ""
"This macro expands to ``_save = PyEval_SaveThread();``: it is equivalent to :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` without the opening brace and variable "
"declaration."
msgstr ""
"Esta macro expande-se para ``_save = PyEval_SaveThread();``: é equivalente "
"a :c:macro:`Py_BEGIN_ALLOW_THREADS` sem a chave de abertura e a declaração "
"da variável."

#: ../../c-api/init.rst:1402
msgid "Low-level API"
msgstr "API de baixo nível"

#: ../../c-api/init.rst:1404
msgid ""
"All of the following functions must be called after :c:func:`Py_Initialize`."
msgstr ""
"Todas as funções a seguir devem ser chamadas após :c:func:`Py_Initialize`."

#: ../../c-api/init.rst:1406
msgid ""
":c:func:`Py_Initialize()` now initializes the :term:`GIL` and sets an :term:"
"`attached thread state`."
msgstr ""
":c:func:`Py_Initialize()` agora inicializa o :term:`GIL` e define um :term:"
"`estado de thread anexado`."

#: ../../c-api/init.rst:1413
msgid ""
"Create a new interpreter state object.  An :term:`attached thread state` is "
"not needed, but may optionally exist if it is necessary to serialize calls "
"to this function."
msgstr ""
"Crie um novo objeto de estado do interpretador. Um :term:`estado de thread "
"anexado` não é necessário, mas pode existir opcionalmente se for necessário "
"serializar chamadas para esta função."

#: ../../c-api/init.rst:1417
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_New`` with no arguments."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``cpython."
"PyInterpreterState_New`` sem argumentos."

#: ../../c-api/init.rst:1422
msgid ""
"Reset all information in an interpreter state object.  There must be an :"
"term:`attached thread state` for the interpreter."
msgstr ""
"Redefinir todas as informações num objeto de estado do interpretador. Deve "
"haver um :term:`estado de thread anexado` para o interpretador."

#: ../../c-api/init.rst:1425
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_Clear`` with no arguments."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``cpython."
"PyInterpreterState_Clear`` sem argumentos."

#: ../../c-api/init.rst:1430
msgid ""
"Destroy an interpreter state object.  There **should not** be an :term:"
"`attached thread state` for the target interpreter. The interpreter state "
"must have been reset with a previous call to :c:func:"
"`PyInterpreterState_Clear`."
msgstr ""
"Destrua um objeto de estado do interpretador. Não deve haver um estado de "
"thread anexado para o interpretador de destino. O estado do interpretador "
"deve ter sido reiniciado com uma chamada anterior para :c:func:"
"`PyInterpreterState_Clear`."

#: ../../c-api/init.rst:1437
msgid ""
"Create a new thread state object belonging to the given interpreter object. "
"An :term:`attached thread state` is not needed."
msgstr ""
"Cria um novo objeto de estado de thread pertencente ao objeto interpretador "
"fornecido. Não é necessário um :term:`estado de thread anexado`."

#: ../../c-api/init.rst:1442
msgid ""
"Reset all information in a :term:`thread state` object.  *tstate* must be :"
"term:`attached <attached thread state>`"
msgstr ""
"Redefinir todas as informações num objeto :term:`estado do thread`. *tstate* "
"deve estar :term:`anexado <attached thread state>`"

#: ../../c-api/init.rst:1445
msgid ""
"This function now calls the :c:member:`PyThreadState.on_delete` callback. "
"Previously, that happened in :c:func:`PyThreadState_Delete`."
msgstr ""
"Esta função agora chama a chamada de retorno :c:member:`PyThreadState."
"on_delete`. Anteriormente, isso acontecia em :c:func:`PyThreadState_Delete`."

#: ../../c-api/init.rst:1449
msgid "The :c:member:`PyThreadState.on_delete` callback was removed."
msgstr "A chamada de retorno :c:member:`PyThreadState.on_delete` foi removida."

#: ../../c-api/init.rst:1455
msgid ""
"Destroy a :term:`thread state` object.  *tstate* should not be :term:"
"`attached <attached thread state>` to any thread. *tstate* must have been "
"reset with a previous call to :c:func:`PyThreadState_Clear`."
msgstr ""
"Destrói um objeto :term:`thread state`. *tstate* não deve estar :term:"
"`anexado <attached thread state>` a nenhum thread. *tstate* deve ter sido "
"reiniciado com uma chamada anterior para :c:func:`PyThreadState_Clear`."

#: ../../c-api/init.rst:1463
msgid ""
"Detach the :term:`attached thread state` (which must have been reset with a "
"previous call to :c:func:`PyThreadState_Clear`) and then destroy it."
msgstr ""
"Desanexe o :term:`estado da thread anexada` (que deve ter sido reiniciado "
"com uma chamada anterior para :c:func:`PyThreadState_Clear`) e, em seguida, "
"destrua-o."

#: ../../c-api/init.rst:1466
msgid ""
"No :term:`thread state` will be :term:`attached <attached thread state>` "
"upon returning."
msgstr ""
"Nenhum :term:`estado do thread` será :term:`anexado <attached thread state>` "
"ao retornar."

#: ../../c-api/init.rst:1471
msgid "Get the current frame of the Python thread state *tstate*."
msgstr "Obter o quadro atual do estado da thread Python *tstate*."

#: ../../c-api/init.rst:1473
msgid ""
"Return a :term:`strong reference`. Return ``NULL`` if no frame is currently "
"executing."
msgstr ""
"Retorna uma :term:`referência forte`. Retorna ``NULL`` se nenhum quadro "
"estiver a ser executado no momento."

#: ../../c-api/init.rst:1476
msgid "See also :c:func:`PyEval_GetFrame`."
msgstr "Veja também: :c:func:`PyEval_GetFrame`."

#: ../../c-api/init.rst:1478 ../../c-api/init.rst:1487
#: ../../c-api/init.rst:1496
msgid ""
"*tstate* must not be ``NULL``, and must be :term:`attached <attached thread "
"state>`."
msgstr ""
"*tstate* não pode ser ``NULL`` e deve ser :term:`anexado <attached thread "
"state>`."

#: ../../c-api/init.rst:1485
msgid ""
"Get the unique :term:`thread state` identifier of the Python thread state "
"*tstate*."
msgstr ""
"Obtenha o identificador exclusivo :term:`thread state` do estado da thread "
"Python *tstate*."

#: ../../c-api/init.rst:1494
msgid "Get the interpreter of the Python thread state *tstate*."
msgstr "Obter o interpretador do estado da thread Python *tstate*."

#: ../../c-api/init.rst:1503
msgid "Suspend tracing and profiling in the Python thread state *tstate*."
msgstr ""
"Suspender o rastreamento e a criação de perfis no estado da thread Python "
"*tstate*."

#: ../../c-api/init.rst:1505
msgid "Resume them using the :c:func:`PyThreadState_LeaveTracing` function."
msgstr "Retome-os usando a função :c:func:`PyThreadState_LeaveTracing`."

#: ../../c-api/init.rst:1512
msgid ""
"Resume tracing and profiling in the Python thread state *tstate* suspended "
"by the :c:func:`PyThreadState_EnterTracing` function."
msgstr ""
"Retomar o rastreamento e a criação de perfis no estado da thread Python "
"*tstate* suspenso pela função :c:func:`PyThreadState_EnterTracing`."

#: ../../c-api/init.rst:1515
msgid ""
"See also :c:func:`PyEval_SetTrace` and :c:func:`PyEval_SetProfile` functions."
msgstr ""
"Veja também: funções :c:func:`PyEval_SetTrace` e :c:func:`PyEval_SetProfile`."

#: ../../c-api/init.rst:1523
msgid "Get the current interpreter."
msgstr "Obter o intérprete atual."

#: ../../c-api/init.rst:1525
msgid ""
"Issue a fatal error if there no :term:`attached thread state`. It cannot "
"return NULL."
msgstr ""
"Emita um erro fatal se não houver :term:`estado do thread anexado`. Não pode "
"retornar NULL."

#: ../../c-api/init.rst:1533
msgid ""
"Return the interpreter's unique ID.  If there was any error in doing so then "
"``-1`` is returned and an error is set."
msgstr ""
"Retorna o ID exclusivo do intérprete. Se ocorrer algum erro ao fazer isso, "
"``-1`` é retornado e um erro é definido."

#: ../../c-api/init.rst:1536 ../../c-api/init.rst:2125
#: ../../c-api/init.rst:2132 ../../c-api/init.rst:2151
#: ../../c-api/init.rst:2158
msgid "The caller must have an :term:`attached thread state`."
msgstr "O chamador deve ter um :term:`estado de thread anexado`."

#: ../../c-api/init.rst:1543
msgid ""
"Return a dictionary in which interpreter-specific data may be stored. If "
"this function returns ``NULL`` then no exception has been raised and the "
"caller should assume no interpreter-specific dict is available."
msgstr ""
"Retorna um dicionário no qual dados específicos do interpretador podem ser "
"armazenados. Se esta função retornar ``NULL``, então nenhuma exceção foi "
"levantada e o chamador deve assumir que nenhum dicionário específico do "
"interpretador está disponível."

#: ../../c-api/init.rst:1547
msgid ""
"This is not a replacement for :c:func:`PyModule_GetState()`, which "
"extensions should use to store interpreter-specific state information."
msgstr ""
"Isto não substitui :c:func:`PyModule_GetState()`, que as extensões devem "
"usar para armazenar informações de estado específicas do interpretador."

#: ../../c-api/init.rst:1555
msgid "Type of a frame evaluation function."
msgstr "Tipo de função de avaliação de quadro."

#: ../../c-api/init.rst:1557
msgid ""
"The *throwflag* parameter is used by the ``throw()`` method of generators: "
"if non-zero, handle the current exception."
msgstr ""
"O parâmetro *throwflag* é usado pelo método ``throw()`` dos geradores: se "
"diferente de zero, trata a exceção atual."

#: ../../c-api/init.rst:1560
msgid "The function now takes a *tstate* parameter."
msgstr "A função agora aceita um parâmetro *tstate*."

#: ../../c-api/init.rst:1563
msgid ""
"The *frame* parameter changed from ``PyFrameObject*`` to "
"``_PyInterpreterFrame*``."
msgstr ""
"O parâmetro *frame* mudou de ``PyFrameObject*`` para "
"``_PyInterpreterFrame*``."

#: ../../c-api/init.rst:1568
msgid "Get the frame evaluation function."
msgstr "Obter a função de avaliação do quadro."

#: ../../c-api/init.rst:1570 ../../c-api/init.rst:1578
msgid "See the :pep:`523` \"Adding a frame evaluation API to CPython\"."
msgstr ""
"Consulte o :pep:`523` «Adicionar uma API de avaliação de quadros ao CPython»."

#: ../../c-api/init.rst:1576
msgid "Set the frame evaluation function."
msgstr "Defina a função de avaliação do quadro."

#: ../../c-api/init.rst:1585
msgid ""
"Return a dictionary in which extensions can store thread-specific state "
"information.  Each extension should use a unique key to use to store state "
"in the dictionary.  It is okay to call this function when no :term:`thread "
"state` is :term:`attached <attached thread state>`. If this function returns "
"``NULL``, no exception has been raised and the caller should assume no "
"thread state is attached."
msgstr ""
"Retorna um dicionário no qual as extensões podem armazenar informações de "
"estado específicas da thread. Cada extensão deve usar uma chave única para "
"armazenar o estado no dicionário. É possível chamar esta função quando "
"nenhum :term:`estado da thread` estiver :term:`anexado <attached thread "
"state>`. Se esta função retornar ``NULL``, nenhuma exceção foi levantada e o "
"chamador deve assumir que nenhum estado da thread está anexado."

#: ../../c-api/init.rst:1595
msgid ""
"Asynchronously raise an exception in a thread. The *id* argument is the "
"thread id of the target thread; *exc* is the exception object to be raised. "
"This function does not steal any references to *exc*. To prevent naive "
"misuse, you must write your own C extension to call this.  Must be called "
"with an :term:`attached thread state`. Returns the number of thread states "
"modified; this is normally one, but will be zero if the thread id isn't "
"found.  If *exc* is ``NULL``, the pending exception (if any) for the thread "
"is cleared. This raises no exceptions."
msgstr ""
"Levanta uma exceção de forma assíncrona numa thread. O argumento *id* é o ID "
"da thread de destino; *exc* é o objeto de exceção a ser levantado. Esta "
"função não rouba nenhuma referência a *exc*. Para evitar o uso indevido, "
"você deve escrever sua própria extensão C para chamá-la. Deve ser chamada "
"com um :term:`estado de thread anexado`. Retorna o número de estados de "
"thread modificados; normalmente é um, mas será zero se o id da thread não "
"for encontrado. Se *exc* for ``NULL``, a exceção pendente (se houver) para a "
"thread é limpa. Isso não gera exceções."

#: ../../c-api/init.rst:1603
msgid ""
"The type of the *id* parameter changed from :c:expr:`long` to :c:expr:"
"`unsigned long`."
msgstr ""
"O tipo do parâmetro *id* mudou de :c:expr:`long` para :c:expr:`unsigned "
"long`."

#: ../../c-api/init.rst:1609
msgid ""
":term:`Attach <attached thread state>` *tstate* to the current thread, which "
"must not be ``NULL`` or already :term:`attached <attached thread state>`."
msgstr ""
":term:`Anexar <attached thread state>` *tstate* ao thread atual, que não "
"deve ser ``NULL`` ou já :term:`anexado <attached thread state>`."

#: ../../c-api/init.rst:1612
msgid ""
"The calling thread must not already have an :term:`attached thread state`."
msgstr ""
"O thread de chamada não deve já ter um :term:`estado de thread anexado`."

#: ../../c-api/init.rst:1620
msgid ""
"Updated to be consistent with :c:func:`PyEval_RestoreThread`, :c:func:"
"`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`, and terminate the "
"current thread if called while the interpreter is finalizing."
msgstr ""
"Atualizado para ser consistente com :c:func:`PyEval_RestoreThread`, :c:func:"
"`Py_END_ALLOW_THREADS` e :c:func:`PyGILState_Ensure`, e encerrar o thread "
"atual se chamado enquanto o interpretador estiver a finalizar."

#: ../../c-api/init.rst:1629
msgid ""
":c:func:`PyEval_RestoreThread` is a higher-level function which is always "
"available (even when threads have not been initialized)."
msgstr ""
":c:func:`PyEval_RestoreThread` é uma função de nível superior que está "
"sempre disponível (mesmo quando os threads não foram inicializados)."

#: ../../c-api/init.rst:1635
msgid ""
"Detach the :term:`attached thread state`. The *tstate* argument, which must "
"not be ``NULL``, is only used to check that it represents the :term:"
"`attached thread state` --- if it isn't, a fatal error is reported."
msgstr ""
"Desanexe o :term:`estado da thread anexada`. O argumento *tstate*, que não "
"deve ser ``NULL``, é usado apenas para verificar se representa o :term:"
"`estado da thread anexada` --- se não for, um erro fatal é relatado."

#: ../../c-api/init.rst:1640
msgid ""
":c:func:`PyEval_SaveThread` is a higher-level function which is always "
"available (even when threads have not been initialized)."
msgstr ""
":c:func:`PyEval_SaveThread` é uma função de nível superior que está sempre "
"disponível (mesmo quando os threads não foram inicializados)."

#: ../../c-api/init.rst:1647
msgid "Sub-interpreter support"
msgstr "Suporte ao subintérprete"

#: ../../c-api/init.rst:1649
msgid ""
"While in most uses, you will only embed a single Python interpreter, there "
"are cases where you need to create several independent interpreters in the "
"same process and perhaps even in the same thread. Sub-interpreters allow you "
"to do that."
msgstr ""
"Embora na maioria dos casos você incorpore apenas um único interpretador "
"Python, há situações em que é necessário criar vários interpretadores "
"independentes no mesmo processo e talvez até mesmo no mesmo thread. Os "
"subinterpretadores permitem que você faça isso."

#: ../../c-api/init.rst:1654
msgid ""
"The \"main\" interpreter is the first one created when the runtime "
"initializes. It is usually the only Python interpreter in a process.  Unlike "
"sub-interpreters, the main interpreter has unique process-global "
"responsibilities like signal handling.  It is also responsible for execution "
"during runtime initialization and is usually the active interpreter during "
"runtime finalization.  The :c:func:`PyInterpreterState_Main` function "
"returns a pointer to its state."
msgstr ""
"O interpretador \"principal\" é o primeiro criado quando o tempo de execução "
"é inicializado. Geralmente, é o único interpretador Python em um processo. "
"Ao contrário dos subinterpretadores, o interpretador principal tem "
"responsabilidades globais exclusivas do processo, como o tratamento de "
"sinais. Ele também é responsável pela execução durante a inicialização do "
"tempo de execução e geralmente é o interpretador ativo durante a finalização "
"do tempo de execução. A função :c:func:`PyInterpreterState_Main` retorna um "
"ponteiro para o seu estado."

#: ../../c-api/init.rst:1661
msgid ""
"You can switch between sub-interpreters using the :c:func:"
"`PyThreadState_Swap` function. You can create and destroy them using the "
"following functions:"
msgstr ""
"Você pode alternar entre subinterpretadores usando a função :c:func:"
"`PyThreadState_Swap`. Você pode criá-los e destruí-los usando as seguintes "
"funções:"

#: ../../c-api/init.rst:1667
msgid ""
"Structure containing most parameters to configure a sub-interpreter. Its "
"values are used only in :c:func:`Py_NewInterpreterFromConfig` and never "
"modified by the runtime."
msgstr ""
"Estrutura que contém a maioria dos parâmetros para configurar um "
"subinterpretador. Os seus valores são usados apenas em :c:func:"
"`Py_NewInterpreterFromConfig` e nunca são modificados pelo tempo de execução."

#: ../../c-api/init.rst:1673
msgid "Structure fields:"
msgstr "Campos da estrutura:"

#: ../../c-api/init.rst:1677
msgid ""
"If this is ``0`` then the sub-interpreter will use its own \"object\" "
"allocator state. Otherwise it will use (share) the main interpreter's."
msgstr ""
"Se for ``0``, o subinterpretador utilizará o seu próprio estado de alocador "
"de \"objetos\". Caso contrário, utilizará (partilhará) o do interpretador "
"principal."

#: ../../c-api/init.rst:1681
msgid ""
"If this is ``0`` then :c:member:`~PyInterpreterConfig."
"check_multi_interp_extensions` must be ``1`` (non-zero). If this is ``1`` "
"then :c:member:`~PyInterpreterConfig.gil` must not be :c:macro:"
"`PyInterpreterConfig_OWN_GIL`."
msgstr ""
"Se for ``0``, então :c:member:`~PyInterpreterConfig."
"check_multi_interp_extensions` deve ser ``1`` (diferente de zero). Se for "
"``1``, então :c:member:`~PyInterpreterConfig.gil` não deve ser :c:macro:"
"`PyInterpreterConfig_OWN_GIL`."

#: ../../c-api/init.rst:1689
msgid ""
"If this is ``0`` then the runtime will not support forking the process in "
"any thread where the sub-interpreter is currently active. Otherwise fork is "
"unrestricted."
msgstr ""
"Se for ``0``, o tempo de execução não suportará a bifurcação do processo em "
"qualquer thread onde o subinterpretador esteja atualmente ativo. Caso "
"contrário, a bifurcação fica sem restrições."

#: ../../c-api/init.rst:1693
msgid ""
"Note that the :mod:`subprocess` module still works when fork is disallowed."
msgstr ""
"Observe que o módulo :mod:`subprocess` continua a funcionar quando o fork é "
"desativado."

#: ../../c-api/init.rst:1698
msgid ""
"If this is ``0`` then the runtime will not support replacing the current "
"process via exec (e.g. :func:`os.execv`) in any thread where the sub-"
"interpreter is currently active. Otherwise exec is unrestricted."
msgstr ""
"Se for ``0``, o tempo de execução não suportará a substituição do processo "
"atual via exec (por exemplo: :func:`os.execv`) em qualquer thread onde o "
"subinterpretador esteja atualmente ativo. Caso contrário, o exec não terá "
"restrições."

#: ../../c-api/init.rst:1703
msgid ""
"Note that the :mod:`subprocess` module still works when exec is disallowed."
msgstr ""
"Observe que o módulo :mod:`subprocess` continua a funcionar quando o exec é "
"desativado."

#: ../../c-api/init.rst:1708
msgid ""
"If this is ``0`` then the sub-interpreter's :mod:`threading` module won't "
"create threads. Otherwise threads are allowed."
msgstr ""
"Se for ``0``, o módulo :mod:`threading` do subinterpretador não criará "
"threads. Caso contrário, as threads serão permitidas."

#: ../../c-api/init.rst:1714
msgid ""
"If this is ``0`` then the sub-interpreter's :mod:`threading` module won't "
"create daemon threads. Otherwise daemon threads are allowed (as long as :c:"
"member:`~PyInterpreterConfig.allow_threads` is non-zero)."
msgstr ""
"Se for ``0``, o módulo :mod:`threading` do subinterpretador não criará "
"threads daemon. Caso contrário, as threads daemon serão permitidas (desde "
"que :c:member:`~PyInterpreterConfig.allow_threads` seja diferente de zero)."

#: ../../c-api/init.rst:1721
msgid ""
"If this is ``0`` then all extension modules may be imported, including "
"legacy (single-phase init) modules, in any thread where the sub-interpreter "
"is currently active. Otherwise only multi-phase init extension modules (see :"
"pep:`489`) may be imported. (Also see :c:macro:"
"`Py_mod_multiple_interpreters`.)"
msgstr ""
"Se for ``0``, todos os módulos de extensão podem ser importados, incluindo "
"módulos legados (inicialização monofásica), em qualquer thread onde o "
"subinterpretador estiver ativo no momento. Caso contrário, apenas módulos de "
"extensão de inicialização multifásica (consulte :pep:`489`) podem ser "
"importados. (Consulte também :c:macro:`Py_mod_multiple_interpreters`.)"

#: ../../c-api/init.rst:1728
msgid ""
"This must be ``1`` (non-zero) if :c:member:`~PyInterpreterConfig."
"use_main_obmalloc` is ``0``."
msgstr ""
"Isto deve ser ``1`` (diferente de zero) se :c:member:`~PyInterpreterConfig."
"use_main_obmalloc` for ``0``.."

#: ../../c-api/init.rst:1733
msgid ""
"This determines the operation of the GIL for the sub-interpreter. It may be "
"one of the following:"
msgstr ""
"Isso determina o funcionamento do GIL para o subinterpretador. Pode ser um "
"dos seguintes:"

#: ../../c-api/init.rst:1740
msgid "Use the default selection (:c:macro:`PyInterpreterConfig_SHARED_GIL`)."
msgstr "Use a seleção padrão (:c:macro:`PyInterpreterConfig_SHARED_GIL`)."

#: ../../c-api/init.rst:1744
msgid "Use (share) the main interpreter's GIL."
msgstr "Usa (partilha) o GIL do interpretador principal."

#: ../../c-api/init.rst:1748
msgid "Use the sub-interpreter's own GIL."
msgstr "Use o próprio GIL do subinterpretador."

#: ../../c-api/init.rst:1750
msgid ""
"If this is :c:macro:`PyInterpreterConfig_OWN_GIL` then :c:member:"
"`PyInterpreterConfig.use_main_obmalloc` must be ``0``."
msgstr ""
"Se for :c:macro:`PyInterpreterConfig_OWN_GIL`, então :c:member:"
"`PyInterpreterConfig.use_main_obmalloc` deve ser ``0``."

#: ../../c-api/init.rst:1764
msgid ""
"Create a new sub-interpreter.  This is an (almost) totally separate "
"environment for the execution of Python code.  In particular, the new "
"interpreter has separate, independent versions of all imported modules, "
"including the fundamental modules :mod:`builtins`, :mod:`__main__` and :mod:"
"`sys`.  The table of loaded modules (``sys.modules``) and the module search "
"path (``sys.path``) are also separate.  The new environment has no ``sys."
"argv`` variable.  It has new standard I/O stream file objects ``sys.stdin``, "
"``sys.stdout`` and ``sys.stderr`` (however these refer to the same "
"underlying file descriptors)."
msgstr ""
"Cria um novo subinterpretador. Este é um ambiente (quase) totalmente "
"separado para a execução de código Python. Em particular, o novo "
"interpretador tem versões separadas e independentes de todos os módulos "
"importados, incluindo os módulos fundamentais :mod:`builtins`, :mod:"
"`__main__` e :mod:`sys`. A tabela de módulos carregados (``sys.modules``) e "
"o caminho de pesquisa do módulo (``sys.path``) também são separados. O novo "
"ambiente não tem a variável ``sys.argv``. Tem novos objetos de ficheiro de "
"fluxo de E/S padrão ``sys.stdin``, ``sys.stdout`` e ``sys.stderr`` (no "
"entanto, estes referem-se aos mesmos descritores de ficheiro subjacentes)."

#: ../../c-api/init.rst:1774
msgid ""
"The given *config* controls the options with which the interpreter is "
"initialized."
msgstr ""
"A *config* fornecida controla as opções com as quais o interpretador é "
"inicializado."

#: ../../c-api/init.rst:1777
msgid ""
"Upon success, *tstate_p* will be set to the first :term:`thread state` "
"created in the new sub-interpreter.  This thread state is :term:`attached "
"<attached thread state>`. Note that no actual thread is created; see the "
"discussion of thread states below.  If creation of the new interpreter is "
"unsuccessful, *tstate_p* is set to ``NULL``; no exception is set since the "
"exception state is stored in the :term:`attached thread state`, which might "
"not exist."
msgstr ""
"Em caso de sucesso, *tstate_p* será definido como o primeiro :term:`estado "
"da thread` criado no novo subinterpretador. Este estado da thread é :term:"
"`anexado <attached thread state>`. Observe que nenhuma thread real é criada; "
"consulte a discussão sobre estados da thread abaixo. Se a criação do novo "
"interpretador não for bem-sucedida, *tstate_p* é definido como ``NULL``; "
"nenhuma exceção é definida, pois o estado de exceção é armazenado no :term:"
"`estado de thread anexado`, que pode não existir."

#: ../../c-api/init.rst:1786
msgid ""
"Like all other Python/C API functions, an :term:`attached thread state` must "
"be present before calling this function, but it might be detached upon "
"returning. On success, the returned thread state will be :term:`attached "
"<attached thread state>`. If the sub-interpreter is created with its own :"
"term:`GIL` then the :term:`attached thread state` of the calling interpreter "
"will be detached. When the function returns, the new interpreter's :term:"
"`thread state` will be :term:`attached <attached thread state>` to the "
"current thread and the previous interpreter's :term:`attached thread state` "
"will remain detached."
msgstr ""
"Como todas as outras funções da API C/Python, um :term:`estado de thread "
"anexado` deve estar presente antes de chamar esta função, mas pode ser "
"destacado ao retornar. Em caso de sucesso, o estado da thread retornado "
"será :term:`anexado <attached thread state>`. Se o subinterpretador for "
"criado com seu próprio :term:`GIL`, então o :term:`estado de thread anexado` "
"do interpretador de chamada será destacado. Quando a função retornar, o :"
"term:`estado da thread` do novo interpretador será :term:`anexado <attached "
"thread state>` à thread atual e o :term:`estado da thread anexada` do "
"interpretador anterior permanecerá desanexado."

#: ../../c-api/init.rst:1797
msgid ""
"Sub-interpreters are most effective when isolated from each other, with "
"certain functionality restricted::"
msgstr ""
"Os subinterpretadores são mais eficazes quando isolados uns dos outros, com "
"certas funcionalidades restritas::"

#: ../../c-api/init.rst:1800
msgid ""
"PyInterpreterConfig config = {\n"
"    .use_main_obmalloc = 0,\n"
"    .allow_fork = 0,\n"
"    .allow_exec = 0,\n"
"    .allow_threads = 1,\n"
"    .allow_daemon_threads = 0,\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""
"PyInterpreterConfig config = {\n"
"    .use_main_obmalloc = 0,\n"
"    .allow_fork = 0,\n"
"    .allow_exec = 0,\n"
"    .allow_threads = 1,\n"
"    .allow_daemon_threads = 0,\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}"

#: ../../c-api/init.rst:1815
msgid ""
"Note that the config is used only briefly and does not get modified. During "
"initialization the config's values are converted into various :c:type:"
"`PyInterpreterState` values.  A read-only copy of the config may be stored "
"internally on the :c:type:`PyInterpreterState`."
msgstr ""
"Observe que a configuração é usada apenas brevemente e não fica modificada. "
"Durante a inicialização, os valores da configuração são convertidos em "
"vários valores :c:type:`PyInterpreterState`. Uma cópia somente leitura da "
"configuração pode ser armazenada internamente no :c:type:"
"`PyInterpreterState`."

#: ../../c-api/init.rst:1824
msgid "Extension modules are shared between (sub-)interpreters as follows:"
msgstr ""
"Os módulos de extensão são partilhados entre (sub)intérpretes da seguinte "
"forma:"

#: ../../c-api/init.rst:1826
msgid ""
"For modules using multi-phase initialization, e.g. :c:func:"
"`PyModule_FromDefAndSpec`, a separate module object is created and "
"initialized for each interpreter. Only C-level static and global variables "
"are shared between these module objects."
msgstr ""
"Para módulos que utilizam inicialização multifásica, por exemplo: :c:func:"
"`PyModule_FromDefAndSpec`, um objeto de módulo separado é criado e "
"inicializado para cada interpretador. Apenas variáveis estáticas e globais "
"de nível C são partilhadas entre esses objetos de módulo."

#: ../../c-api/init.rst:1832
msgid ""
"For modules using single-phase initialization, e.g. :c:func:"
"`PyModule_Create`, the first time a particular extension is imported, it is "
"initialized normally, and a (shallow) copy of its module's dictionary is "
"squirreled away. When the same extension is imported by another "
"(sub-)interpreter, a new module is initialized and filled with the contents "
"of this copy; the extension's ``init`` function is not called. Objects in "
"the module's dictionary thus end up shared across (sub-)interpreters, which "
"might cause unwanted behavior (see `Bugs and caveats`_ below)."
msgstr ""
"Para módulos que utilizam inicialização monofásica, por exemplo: :c:func:"
"`PyModule_Create`, na primeira vez que uma extensão específica é importada, "
"ela é inicializada normalmente e uma cópia (superficial) do dicionário do "
"seu módulo é guardada. Quando a mesma extensão é importada por outro "
"(sub)interpretador, um novo módulo é inicializado e preenchido com o "
"conteúdo dessa cópia; a função ``init`` da extensão não é chamada. Os "
"objetos no dicionário do módulo acabam sendo compartilhados entre "
"(sub)interpretadores, o que pode causar um comportamento indesejado "
"(consulte `Bugs e advertências`_ abaixo)."

#: ../../c-api/init.rst:1843
msgid ""
"Note that this is different from what happens when an extension is imported "
"after the interpreter has been completely re-initialized by calling :c:func:"
"`Py_FinalizeEx` and :c:func:`Py_Initialize`; in that case, the extension's "
"``initmodule`` function *is* called again. As with multi-phase "
"initialization, this means that only C-level static and global variables are "
"shared between these modules."
msgstr ""
"Note que isto é diferente do que acontece quando uma extensão é importada "
"após o interpretador ter sido completamente reinicializado chamando :c:func:"
"`Py_FinalizeEx` e :c:func:`Py_Initialize`; nesse caso, a função "
"``initmodule`` da extensão *é* chamada novamente. Tal como na inicialização "
"multifásica, isto significa que apenas as variáveis estáticas e globais ao "
"nível C são partilhadas entre estes módulos."

#: ../../c-api/init.rst:1863
msgid ""
"Create a new sub-interpreter.  This is essentially just a wrapper around :c:"
"func:`Py_NewInterpreterFromConfig` with a config that preserves the existing "
"behavior.  The result is an unisolated sub-interpreter that shares the main "
"interpreter's GIL, allows fork/exec, allows daemon threads, and allows "
"single-phase init modules."
msgstr ""
"Cria um novo subinterpretador. Essencialmente, trata-se apenas de um "
"invólucro em torno de :c:func:`Py_NewInterpreterFromConfig` com uma "
"configuração que preserva o comportamento existente. O resultado é um "
"subinterpretador não isolado que partilha o GIL do interpretador principal, "
"permite fork/exec, permite threads daemon e permite módulos de inicialização "
"de fase única."

#: ../../c-api/init.rst:1875
msgid ""
"Destroy the (sub-)interpreter represented by the given :term:`thread state`. "
"The given thread state must be :term:`attached <attached thread state>`. "
"When the call returns, there will be no :term:`attached thread state`. All "
"thread states associated with this interpreter are destroyed."
msgstr ""
"Destrói o (sub)intérprete representado pelo :term:`estado da thread` "
"fornecido. O estado da thread fornecido deve ser :term:`anexado <attached "
"thread state>`. Quando a chamada retornar, não haverá :term:`estado do "
"thread anexado`. Todos os estados da thread associados a este intérprete são "
"destruídos."

#: ../../c-api/init.rst:1880
msgid ""
":c:func:`Py_FinalizeEx` will destroy all sub-interpreters that haven't been "
"explicitly destroyed at that point."
msgstr ""
":c:func:`Py_FinalizeEx` destruirá todos os subinterpretadores que não tenham "
"sido explicitamente destruídos até esse momento."

#: ../../c-api/init.rst:1887
msgid "A Per-Interpreter GIL"
msgstr "Um GIL por intérprete"

#: ../../c-api/init.rst:1889
msgid ""
"Using :c:func:`Py_NewInterpreterFromConfig` you can create a sub-interpreter "
"that is completely isolated from other interpreters, including having its "
"own GIL.  The most important benefit of this isolation is that such an "
"interpreter can execute Python code without being blocked by other "
"interpreters or blocking any others.  Thus a single Python process can truly "
"take advantage of multiple CPU cores when running Python code.  The "
"isolation also encourages a different approach to concurrency than that of "
"just using threads. (See :pep:`554` and :pep:`684`.)"
msgstr ""

#: ../../c-api/init.rst:1899
msgid ""
"Using an isolated interpreter requires vigilance in preserving that "
"isolation.  That especially means not sharing any objects or mutable state "
"without guarantees about thread-safety.  Even objects that are otherwise "
"immutable (e.g. ``None``, ``(1, 5)``) can't normally be shared because of "
"the refcount.  One simple but less-efficient approach around this is to use "
"a global lock around all use of some state (or object). Alternately, "
"effectively immutable objects (like integers or strings) can be made safe in "
"spite of their refcounts by making them :term:`immortal`. In fact, this has "
"been done for the builtin singletons, small integers, and a number of other "
"builtin objects."
msgstr ""
"Usar um interpretador isolado requer vigilância para preservar esse "
"isolamento. Isso significa, especialmente, não partilhar quaisquer objetos "
"ou estados mutáveis sem garantias sobre a segurança da thread. Mesmo objetos "
"que são imutáveis (por exemplo, ``None``, ``(1, 5)``) normalmente não podem "
"ser partilhados devido à contagem de referências. Uma abordagem simples, mas "
"menos eficiente, para contornar isso é usar um bloqueio global em torno de "
"todo o uso de algum estado (ou objeto). Alternativamente, objetos "
"efetivamente imutáveis (como inteiros ou strings) podem ser tornados "
"seguros, apesar de suas contagens de referência, tornando-os :term:"
"`imortais`. Na verdade, isso foi feito para os singletons embutidos, "
"pequenos inteiros e vários outros objetos embutidos."

#: ../../c-api/init.rst:1910
msgid ""
"If you preserve isolation then you will have access to proper multi-core "
"computing without the complications that come with free-threading. Failure "
"to preserve isolation will expose you to the full consequences of free-"
"threading, including races and hard-to-debug crashes."
msgstr ""
"Se mantiver o isolamento, terá acesso à computação multi-core adequada sem "
"as complicações que acompanham o free-threading. Não manter o isolamento irá "
"expô-lo a todas as consequências do free-threading, incluindo corridas e "
"falhas difíceis de depurar."

#: ../../c-api/init.rst:1915
msgid ""
"Aside from that, one of the main challenges of using multiple isolated "
"interpreters is how to communicate between them safely (not break isolation) "
"and efficiently.  The runtime and stdlib do not provide any standard "
"approach to this yet.  A future stdlib module would help mitigate the effort "
"of preserving isolation and expose effective tools for communicating (and "
"sharing) data between interpreters."
msgstr ""
"Além disso, um dos principais desafios de usar vários interpretadores "
"isolados é como comunicar entre eles de forma segura (sem quebrar o "
"isolamento) e eficiente. O runtime e a stdlib ainda não oferecem nenhuma "
"abordagem padrão para isso. Um futuro módulo stdlib ajudaria a mitigar o "
"esforço de preservar o isolamento e expor ferramentas eficazes para "
"comunicar (e partilhar) dados entre interpretadores."

#: ../../c-api/init.rst:1926
msgid "Bugs and caveats"
msgstr "Erros e advertências"

#: ../../c-api/init.rst:1928
msgid ""
"Because sub-interpreters (and the main interpreter) are part of the same "
"process, the insulation between them isn't perfect --- for example, using "
"low-level file operations like  :func:`os.close` they can (accidentally or "
"maliciously) affect each other's open files.  Because of the way extensions "
"are shared between (sub-)interpreters, some extensions may not work "
"properly; this is especially likely when using single-phase initialization "
"or (static) global variables. It is possible to insert objects created in "
"one sub-interpreter into a namespace of another (sub-)interpreter; this "
"should be avoided if possible."
msgstr ""
"Como os subinterpretadores (e o interpretador principal) fazem parte do "
"mesmo processo, o isolamento entre eles não é perfeito — por exemplo, usando "
"operações de ficheiro de baixo nível como :func:`os.close`, eles podem "
"(acidentalmente ou maliciosamente) afetar os ficheiros abertos uns dos "
"outros. Devido à forma como as extensões são partilhadas entre "
"(sub)intérpretes, algumas extensões podem não funcionar corretamente; isto é "
"especialmente provável ao usar inicialização monofásica ou variáveis globais "
"(estáticas). É possível inserir objetos criados num subintérprete num "
"namespace de outro (sub)intérprete; isto deve ser evitado, se possível."

#: ../../c-api/init.rst:1938
msgid ""
"Special care should be taken to avoid sharing user-defined functions, "
"methods, instances or classes between sub-interpreters, since import "
"operations executed by such objects may affect the wrong (sub-)interpreter's "
"dictionary of loaded modules. It is equally important to avoid sharing "
"objects from which the above are reachable."
msgstr ""
"Deve-se tomar cuidado especial para evitar o compartilhamento de funções, "
"métodos, instâncias ou classes definidos pelo utilizador entre "
"subinterpretadores, uma vez que as operações de importação executadas por "
"tais objetos podem afetar o dicionário de módulos carregados do "
"(sub)interpretador errado. É igualmente importante evitar o compartilhamento "
"de objetos a partir dos quais os itens acima são acessíveis."

#: ../../c-api/init.rst:1944
msgid ""
"Also note that combining this functionality with ``PyGILState_*`` APIs is "
"delicate, because these APIs assume a bijection between Python thread states "
"and OS-level threads, an assumption broken by the presence of sub-"
"interpreters. It is highly recommended that you don't switch sub-"
"interpreters between a pair of matching :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls. Furthermore, extensions (such as :mod:"
"`ctypes`) using these APIs to allow calling of Python code from non-Python "
"created threads will probably be broken when using sub-interpreters."
msgstr ""
"Observe também que combinar essa funcionalidade com as APIs ``PyGILState_*`` "
"é delicado, porque essas APIs assumem uma bijeção entre os estados de thread "
"do Python e os threads no nível do sistema operativo, uma suposição quebrada "
"pela presença de subinterpretadores. É altamente recomendável que você não "
"alterne subinterpretadores entre um par de chamadas correspondentes :c:func:"
"`PyGILState_Ensure` e :c:func:`PyGILState_Release`. Além disso, extensões "
"(como :mod:`ctypes`) que usam essas APIs para permitir a chamada de código "
"Python a partir de threads não criadas em Python provavelmente serão "
"interrompidas ao usar subinterpretadores."

#: ../../c-api/init.rst:1955
msgid "Asynchronous Notifications"
msgstr "Notificações assíncronas"

#: ../../c-api/init.rst:1957
msgid ""
"A mechanism is provided to make asynchronous notifications to the main "
"interpreter thread.  These notifications take the form of a function pointer "
"and a void pointer argument."
msgstr ""
"É fornecido um mecanismo para fazer notificações assíncronas à thread "
"principal do interpretador. Essas notificações assumem a forma de um "
"ponteiro de função e um argumento de ponteiro nulo."

#: ../../c-api/init.rst:1964
msgid ""
"Schedule a function to be called from the main interpreter thread.  On "
"success, ``0`` is returned and *func* is queued for being called in the main "
"thread.  On failure, ``-1`` is returned without setting any exception."
msgstr ""
"Agende uma função a ser chamada a partir do thread principal do "
"interpretador. Em caso de sucesso, ``0`` é retornado e *func* é colocado na "
"fila para ser chamado no thread principal. Em caso de falha, ``-1`` é "
"retornado sem definir nenhuma exceção."

#: ../../c-api/init.rst:1968
msgid ""
"When successfully queued, *func* will be *eventually* called from the main "
"interpreter thread with the argument *arg*.  It will be called "
"asynchronously with respect to normally running Python code, but with both "
"these conditions met:"
msgstr ""
"Quando colocada na fila com sucesso, *func* será *eventualmente* chamada a "
"partir do thread principal do interpretador com o argumento *arg*. Ela será "
"chamada de forma assíncrona em relação ao código Python em execução normal, "
"mas com ambas as condições atendidas:"

#: ../../c-api/init.rst:1973
msgid "on a :term:`bytecode` boundary;"
msgstr "em um :term:`bytecode` boundary;"

#: ../../c-api/init.rst:1974
msgid ""
"with the main thread holding an :term:`attached thread state` (*func* can "
"therefore use the full C API)."
msgstr ""
"com o thread principal mantendo um :term:`estado de thread anexado` (*func* "
"pode, portanto, usar a API C completa)."

#: ../../c-api/init.rst:1977
msgid ""
"*func* must return ``0`` on success, or ``-1`` on failure with an exception "
"set.  *func* won't be interrupted to perform another asynchronous "
"notification recursively, but it can still be interrupted to switch threads "
"if the :term:`thread state <attached thread state>` is detached."
msgstr ""
"*func* deve retornar ``0`` em caso de sucesso ou ``-1`` em caso de falha com "
"uma exceção definida. *func* não será interrompido para realizar outra "
"notificação assíncrona recursivamente, mas ainda pode ser interrompido para "
"alternar threads se o :term:`estado da thread <attached thread state>` "
"estiver destacado."

#: ../../c-api/init.rst:1982
msgid ""
"This function doesn't need an :term:`attached thread state`. However, to "
"call this function in a subinterpreter, the caller must have an :term:"
"`attached thread state`. Otherwise, the function *func* can be scheduled to "
"be called from the wrong interpreter."
msgstr ""
"Esta função não necessita de um :term:`estado de thread anexado`. No "
"entanto, para chamar esta função num subinterpretador, o chamador deve ter "
"um :term:`estado de thread anexado`. Caso contrário, a função *func* pode "
"ser agendada para ser chamada a partir do interpretador errado."

#: ../../c-api/init.rst:1987
msgid ""
"This is a low-level function, only useful for very special cases. There is "
"no guarantee that *func* will be called as quick as possible.  If the main "
"thread is busy executing a system call, *func* won't be called before the "
"system call returns.  This function is generally **not** suitable for "
"calling Python code from arbitrary C threads.  Instead, use the :ref:"
"`PyGILState API<gilstate>`."
msgstr ""
"Esta é uma função de baixo nível, útil apenas em casos muito especiais. Não "
"há garantia de que *func* será chamada o mais rápido possível. Se o thread "
"principal estiver ocupado a executar uma chamada do sistema, *func* não será "
"chamada antes que a chamada do sistema retorne. Esta função geralmente "
"**não** é adequada para chamar código Python a partir de threads C "
"arbitrários. Em vez disso, use a :ref:`PyGILState API<gilstate>`."

#: ../../c-api/init.rst:1996
msgid ""
"If this function is called in a subinterpreter, the function *func* is now "
"scheduled to be called from the subinterpreter, rather than being called "
"from the main interpreter. Each subinterpreter now has its own list of "
"scheduled calls."
msgstr ""
"Se esta função for chamada num subinterpretador, a função *func* será agora "
"agendada para ser chamada a partir do subinterpretador, em vez de ser "
"chamada a partir do interpretador principal. Cada subinterpretador tem agora "
"a sua própria lista de chamadas agendadas."

#: ../../c-api/init.rst:2005
msgid "Profiling and Tracing"
msgstr "Perfilagem e rastreamento"

#: ../../c-api/init.rst:2010
msgid ""
"The Python interpreter provides some low-level support for attaching "
"profiling and execution tracing facilities.  These are used for profiling, "
"debugging, and coverage analysis tools."
msgstr ""
"O interpretador Python fornece algum suporte de baixo nível para anexar "
"recursos de perfilagem e rastreamento de execução. Estes são usados para "
"ferramentas de perfilagem, depuração e análise de cobertura."

#: ../../c-api/init.rst:2014
msgid ""
"This C interface allows the profiling or tracing code to avoid the overhead "
"of calling through Python-level callable objects, making a direct C function "
"call instead.  The essential attributes of the facility have not changed; "
"the interface allows trace functions to be installed per-thread, and the "
"basic events reported to the trace function are the same as had been "
"reported to the Python-level trace functions in previous versions."
msgstr ""
"Esta interface C permite que o código de perfilagem ou rastreamento evite a "
"sobrecarga de chamadas através de objetos chamáveis no nível Python, fazendo "
"uma chamada direta à função C. Os atributos essenciais do recurso não "
"mudaram; a interface permite que funções de rastreamento sejam instaladas "
"por thread, e os eventos básicos relatados à função de rastreamento são os "
"mesmos que foram relatados às funções de rastreamento no nível Python nas "
"versões anteriores."

#: ../../c-api/init.rst:2024
msgid ""
"The type of the trace function registered using :c:func:`PyEval_SetProfile` "
"and :c:func:`PyEval_SetTrace`. The first parameter is the object passed to "
"the registration function as *obj*, *frame* is the frame object to which the "
"event pertains, *what* is one of the constants :c:data:`PyTrace_CALL`, :c:"
"data:`PyTrace_EXCEPTION`, :c:data:`PyTrace_LINE`, :c:data:`PyTrace_RETURN`, :"
"c:data:`PyTrace_C_CALL`, :c:data:`PyTrace_C_EXCEPTION`, :c:data:"
"`PyTrace_C_RETURN`, or :c:data:`PyTrace_OPCODE`, and *arg* depends on the "
"value of *what*:"
msgstr ""
"O tipo da função de rastreamento registrada usando :c:func:"
"`PyEval_SetProfile` e :c:func:`PyEval_SetTrace`. O primeiro parâmetro é o "
"objeto passado para a função de registo como *obj*, *frame* é o objeto de "
"quadro ao qual o evento pertence, *what* é uma das constantes :c:data:"
"`PyTrace_CALL`, :c:data:`PyTrace_EXCEPTION`, :c:data:`PyTrace_LINE`, :c:data:"
"`PyTrace_RETURN`, :c:data:`PyTrace_C_CALL`, :c:data:`PyTrace_C_EXCEPTION`, :"
"c:data:`PyTrace_C_RETURN` ou :c:data:`PyTrace_OPCODE`, e *arg* depende do "
"valor de *what*:"

#: ../../c-api/init.rst:2033
msgid "Value of *what*"
msgstr "Valor de *what*"

#: ../../c-api/init.rst:2033
msgid "Meaning of *arg*"
msgstr "Significado de *arg*"

#: ../../c-api/init.rst:2035
msgid ":c:data:`PyTrace_CALL`"
msgstr ":c:data:`PyTrace_CALL`"

#: ../../c-api/init.rst:2035 ../../c-api/init.rst:2040
#: ../../c-api/init.rst:2051
msgid "Always :c:data:`Py_None`."
msgstr "Sempre :c:data:`Py_None`."

#: ../../c-api/init.rst:2037
msgid ":c:data:`PyTrace_EXCEPTION`"
msgstr ":c:data:`PyTrace_EXCEPTION`"

#: ../../c-api/init.rst:2037
msgid "Exception information as returned by :func:`sys.exc_info`."
msgstr "Informações de exceção retornadas por :func:`sys.exc_info`."

#: ../../c-api/init.rst:2040
msgid ":c:data:`PyTrace_LINE`"
msgstr ":c:data:`PyTrace_LINE`"

#: ../../c-api/init.rst:2042
msgid ":c:data:`PyTrace_RETURN`"
msgstr ":c:data:`PyTrace_RETURN`"

#: ../../c-api/init.rst:2042
msgid ""
"Value being returned to the caller, or ``NULL`` if caused by an exception."
msgstr "Valor devolvido ao chamador ou ``NULL`` se causado por uma exceção."

#: ../../c-api/init.rst:2045
msgid ":c:data:`PyTrace_C_CALL`"
msgstr ":c:data:`PyTrace_C_CALL`"

#: ../../c-api/init.rst:2045 ../../c-api/init.rst:2047
#: ../../c-api/init.rst:2049
msgid "Function object being called."
msgstr "Objeto de função a ser chamado."

#: ../../c-api/init.rst:2047
msgid ":c:data:`PyTrace_C_EXCEPTION`"
msgstr ":c:data:`PyTrace_C_EXCEPTION`"

#: ../../c-api/init.rst:2049
msgid ":c:data:`PyTrace_C_RETURN`"
msgstr ":c:data:`PyTrace_C_RETURN`"

#: ../../c-api/init.rst:2051
msgid ":c:data:`PyTrace_OPCODE`"
msgstr ":c:data:`PyTrace_OPCODE`"

#: ../../c-api/init.rst:2056
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"a new call to a function or method is being reported, or a new entry into a "
"generator. Note that the creation of the iterator for a generator function "
"is not reported as there is no control transfer to the Python bytecode in "
"the corresponding frame."
msgstr ""
"O valor do parâmetro *what* para uma função :c:type:`Py_tracefunc` quando "
"uma nova chamada para uma função ou método está a ser reportada, ou uma nova "
"entrada num gerador. Note que a criação do iterador para uma função geradora "
"não é reportada, pois não há transferência de controlo para o bytecode "
"Python no quadro correspondente."

#: ../../c-api/init.rst:2065
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"an exception has been raised.  The callback function is called with this "
"value for *what* when after any bytecode is processed after which the "
"exception becomes set within the frame being executed.  The effect of this "
"is that as exception propagation causes the Python stack to unwind, the "
"callback is called upon return to each frame as the exception propagates.  "
"Only trace functions receives these events; they are not needed by the "
"profiler."
msgstr ""
"O valor do parâmetro *what* para uma função :c:type:`Py_tracefunc` quando "
"uma exceção é levantada. A função de retorno de chamada é chamada com este "
"valor para *what* quando, após qualquer bytecode ser processado, a exceção é "
"definida dentro do quadro que está a ser executado. O efeito disso é que, à "
"medida que a propagação da exceção faz com que a pilha Python se desenrole, "
"a função de retorno de chamada é chamada ao retornar a cada quadro à medida "
"que a exceção se propaga. Apenas as funções de rastreamento recebem esses "
"eventos; eles não são necessários para o profiler."

#: ../../c-api/init.rst:2076
msgid ""
"The value passed as the *what* parameter to a :c:type:`Py_tracefunc` "
"function (but not a profiling function) when a line-number event is being "
"reported. It may be disabled for a frame by setting :attr:`~frame."
"f_trace_lines` to *0* on that frame."
msgstr ""
"O valor passado como parâmetro *what* para uma função :c:type:`Py_tracefunc` "
"(mas não para uma função de perfilagem) quando um evento de número de linha "
"está a ser relatado. Pode ser desativado para um quadro definindo :attr:"
"`~frame.f_trace_lines` como *0* nesse quadro."

#: ../../c-api/init.rst:2084
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a call is about to return."
msgstr ""
"O valor do parâmetro *what* para as funções :c:type:`Py_tracefunc` quando "
"uma chamada está prestes a retornar."

#: ../../c-api/init.rst:2090
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function is about to be called."
msgstr ""
"O valor para o parâmetro *what* para funções :c:type:`Py_tracefunc` quando "
"uma função C está prestes a ser chamada."

#: ../../c-api/init.rst:2096
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has raised an exception."
msgstr ""
"O valor do parâmetro *what* para as funções :c:type:`Py_tracefunc` quando "
"uma função C levantou uma exceção."

#: ../../c-api/init.rst:2102
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has returned."
msgstr ""
"O valor do parâmetro *what* para as funções :c:type:`Py_tracefunc` quando "
"uma função C é retornada."

#: ../../c-api/init.rst:2108
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions (but "
"not profiling functions) when a new opcode is about to be executed.  This "
"event is not emitted by default: it must be explicitly requested by setting :"
"attr:`~frame.f_trace_opcodes` to *1* on the frame."
msgstr ""
"O valor para o parâmetro *what* das funções :c:type:`Py_tracefunc` (mas não "
"das funções de perfilagem) quando um novo código de operação está prestes a "
"ser executado. Este evento não é emitido por predefinição: deve ser "
"explicitamente solicitado definindo :attr:`~frame.f_trace_opcodes` como *1* "
"no quadro."

#: ../../c-api/init.rst:2116
msgid ""
"Set the profiler function to *func*.  The *obj* parameter is passed to the "
"function as its first parameter, and may be any Python object, or ``NULL``.  "
"If the profile function needs to maintain state, using a different value for "
"*obj* for each thread provides a convenient and thread-safe place to store "
"it.  The profile function is called for all monitored events except :c:data:"
"`PyTrace_LINE` :c:data:`PyTrace_OPCODE` and :c:data:`PyTrace_EXCEPTION`."
msgstr ""
"Defina a função do profiler como *func*. O parâmetro *obj* é passado para a "
"função como seu primeiro parâmetro e pode ser qualquer objeto Python ou "
"``NULL``. Se a função do perfil precisar manter o estado, usar um valor "
"diferente para *obj* para cada thread fornece um local seguro para thread "
"para armazená-lo. A função de perfil é chamada para todos os eventos "
"monitorados, exceto :c:data:`PyTrace_LINE` :c:data:`PyTrace_OPCODE` e :c:"
"data:`PyTrace_EXCEPTION`."

#: ../../c-api/init.rst:2123
msgid "See also the :func:`sys.setprofile` function."
msgstr "Veja também a função :func:`sys.setprofile`."

#: ../../c-api/init.rst:2129
msgid ""
"Like :c:func:`PyEval_SetProfile` but sets the profile function in all "
"running threads belonging to the current interpreter instead of the setting "
"it only on the current thread."
msgstr ""
"Semelhante a :c:func:`PyEval_SetProfile`, mas define a função de perfil em "
"todos os threads em execução pertencentes ao interpretador atual, em vez de "
"defini-la apenas no thread atual."

#: ../../c-api/init.rst:2134
msgid ""
"As :c:func:`PyEval_SetProfile`, this function ignores any exceptions raised "
"while setting the profile functions in all threads."
msgstr ""
"Tal como :c:func:`PyEval_SetProfile`, esta função ignora quaisquer exceções "
"levantadas durante a definição das funções de perfil em todos os threads."

#: ../../c-api/init.rst:2142
msgid ""
"Set the tracing function to *func*.  This is similar to :c:func:"
"`PyEval_SetProfile`, except the tracing function does receive line-number "
"events and per-opcode events, but does not receive any event related to C "
"function objects being called.  Any trace function registered using :c:func:"
"`PyEval_SetTrace` will not receive :c:data:`PyTrace_C_CALL`, :c:data:"
"`PyTrace_C_EXCEPTION` or :c:data:`PyTrace_C_RETURN` as a value for the "
"*what* parameter."
msgstr ""
"Defina a função de rastreamento como *func*. Isso é semelhante a :c:func:"
"`PyEval_SetProfile`, exceto que a função de rastreamento recebe eventos de "
"número de linha e eventos por código de operação, mas não recebe nenhum "
"evento relacionado a objetos de função C que estão sendo chamados. Qualquer "
"função de rastreamento registrada usando :c:func:`PyEval_SetTrace` não "
"receberá :c:data:`PyTrace_C_CALL`, :c:data:`PyTrace_C_EXCEPTION` ou :c:data:"
"`PyTrace_C_RETURN` como um valor para o parâmetro *what*."

#: ../../c-api/init.rst:2149
msgid "See also the :func:`sys.settrace` function."
msgstr "Veja também a função :func:`sys.settrace`."

#: ../../c-api/init.rst:2155
msgid ""
"Like :c:func:`PyEval_SetTrace` but sets the tracing function in all running "
"threads belonging to the current interpreter instead of the setting it only "
"on the current thread."
msgstr ""
"Semelhante a :c:func:`PyEval_SetTrace`, mas define a função de rastreamento "
"em todos os threads em execução pertencentes ao interpretador atual, em vez "
"de defini-la apenas no thread atual."

#: ../../c-api/init.rst:2160
msgid ""
"As :c:func:`PyEval_SetTrace`, this function ignores any exceptions raised "
"while setting the trace functions in all threads."
msgstr ""
"Tal como :c:func:`PyEval_SetTrace`, esta função ignora quaisquer exceções "
"levantadas durante a definição das funções de rastreio em todos os threads."

#: ../../c-api/init.rst:2166
msgid "Reference tracing"
msgstr "Rastreamento de referência"

#: ../../c-api/init.rst:2172
msgid ""
"The type of the trace function registered using :c:func:"
"`PyRefTracer_SetTracer`. The first parameter is a Python object that has "
"been just created (when **event** is set to :c:data:`PyRefTracer_CREATE`) or "
"about to be destroyed (when **event** is set to :c:data:"
"`PyRefTracer_DESTROY`). The **data** argument is the opaque pointer that was "
"provided when :c:func:`PyRefTracer_SetTracer` was called."
msgstr ""
"O tipo da função de rastreamento registrada usando :c:func:"
"`PyRefTracer_SetTracer`. O primeiro parâmetro é um objeto Python que acabou "
"de ser criado (quando **event** é definido como :c:data:"
"`PyRefTracer_CREATE`) ou está prestes a ser destruído (quando **event** é "
"definido como :c:data:`PyRefTracer_DESTROY`). O argumento **data** é o "
"ponteiro opaco que foi fornecido quando :c:func:`PyRefTracer_SetTracer` foi "
"chamado."

#: ../../c-api/init.rst:2182
msgid ""
"The value for the *event* parameter to :c:type:`PyRefTracer` functions when "
"a Python object has been created."
msgstr ""
"O valor do parâmetro *event* para as funções :c:type:`PyRefTracer` quando um "
"objeto Python é criado."

#: ../../c-api/init.rst:2187
msgid ""
"The value for the *event* parameter to :c:type:`PyRefTracer` functions when "
"a Python object has been destroyed."
msgstr ""
"O valor do parâmetro *event* para as funções :c:type:`PyRefTracer` quando um "
"objeto Python é destruído."

#: ../../c-api/init.rst:2192
msgid ""
"Register a reference tracer function. The function will be called when a new "
"Python has been created or when an object is going to be destroyed. If "
"**data** is provided it must be an opaque pointer that will be provided when "
"the tracer function is called. Return ``0`` on success. Set an exception and "
"return ``-1`` on error."
msgstr ""
"Regista uma função de rastreamento de referência. A função será chamada "
"quando um novo Python for criado ou quando um objeto for destruído. Se "
"**data** for fornecida, deve ser um ponteiro opaco que será fornecido quando "
"a função de rastreamento for chamada. Retorna ``0`` em caso de sucesso. "
"Define uma exceção e retorna ``-1`` em caso de erro."

#: ../../c-api/init.rst:2198
msgid ""
"Not that tracer functions **must not** create Python objects inside or "
"otherwise the call will be re-entrant. The tracer also **must not** clear "
"any existing exception or set an exception.  A :term:`thread state` will be "
"active every time the tracer function is called."
msgstr ""
"Não que as funções de rastreamento **não devam** criar objetos Python "
"internamente, caso contrário a chamada será reentrante. O rastreador também "
"**não deve** limpar nenhuma exceção existente ou definir uma exceção. Um :"
"term:`estado de thread` ficará ativo sempre que a função de rastreamento for "
"chamada."

#: ../../c-api/init.rst:2203 ../../c-api/init.rst:2214
msgid ""
"There must be an :term:`attached thread state` when calling this function."
msgstr ""
"Deve existir um :term:`estado de thread anexado` ao chamar esta função."

#: ../../c-api/init.rst:2209
msgid ""
"Get the registered reference tracer function and the value of the opaque "
"data pointer that was registered when :c:func:`PyRefTracer_SetTracer` was "
"called. If no tracer was registered this function will return NULL and will "
"set the **data** pointer to NULL."
msgstr ""
"Obtém a função de rastreamento de referência registada e o valor do ponteiro "
"de dados opaco que foi registado quando :c:func:`PyRefTracer_SetTracer` foi "
"chamado. Se nenhum rastreador foi registado, esta função retornará NULL e "
"definirá o ponteiro **data** como NULL."

#: ../../c-api/init.rst:2221
msgid "Advanced Debugger Support"
msgstr "Suporte avançado ao depurador"

#: ../../c-api/init.rst:2226
msgid ""
"These functions are only intended to be used by advanced debugging tools."
msgstr ""
"Estas funções destinam-se apenas a ser utilizadas por ferramentas de "
"depuração avançadas."

#: ../../c-api/init.rst:2231
msgid ""
"Return the interpreter state object at the head of the list of all such "
"objects."
msgstr ""
"Retorna o objeto do estado do interpretador no início da lista de todos "
"esses objetos."

#: ../../c-api/init.rst:2236
msgid "Return the main interpreter state object."
msgstr "Retorna o objeto do estado do interpretador principal."

#: ../../c-api/init.rst:2241
msgid ""
"Return the next interpreter state object after *interp* from the list of all "
"such objects."
msgstr ""
"Retorna o próximo objeto de estado do interpretador após *interp* da lista "
"de todos esses objetos."

#: ../../c-api/init.rst:2247
msgid ""
"Return the pointer to the first :c:type:`PyThreadState` object in the list "
"of threads associated with the interpreter *interp*."
msgstr ""
"Retorna o ponteiro para o primeiro objeto :c:type:`PyThreadState` na lista "
"de threads associadas ao interpretador *interp*."

#: ../../c-api/init.rst:2253
msgid ""
"Return the next thread state object after *tstate* from the list of all such "
"objects belonging to the same :c:type:`PyInterpreterState` object."
msgstr ""
"Retorna o próximo objeto de estado da thread após *tstate* da lista de todos "
"os objetos pertencentes ao mesmo objeto :c:type:`PyInterpreterState`."

#: ../../c-api/init.rst:2260
msgid "Thread Local Storage Support"
msgstr "Suporte para armazenamento local de threads"

#: ../../c-api/init.rst:2264
msgid ""
"The Python interpreter provides low-level support for thread-local storage "
"(TLS) which wraps the underlying native TLS implementation to support the "
"Python-level thread local storage API (:class:`threading.local`).  The "
"CPython C level APIs are similar to those offered by pthreads and Windows: "
"use a thread key and functions to associate a :c:expr:`void*` value per "
"thread."
msgstr ""
"O interpretador Python fornece suporte de baixo nível para armazenamento "
"local de threads (TLS), que envolve a implementação TLS nativa subjacente "
"para suportar a API de armazenamento local de threads no nível Python (:"
"class:`threading.local`). As APIs no nível C do CPython são semelhantes às "
"oferecidas pelo pthreads e pelo Windows: use uma chave de thread e funções "
"para associar um valor :c:expr:`void*` por thread."

#: ../../c-api/init.rst:2271
msgid ""
"A :term:`thread state` does *not* need to be :term:`attached <attached "
"thread state>` when calling these functions; they suppl their own locking."
msgstr ""
"A :term:`thread state` não precisa estar :term:`anexado <attached thread "
"state>` ao chamar essas funções; elas fornecem o seu próprio bloqueio."

#: ../../c-api/init.rst:2274
msgid ""
"Note that :file:`Python.h` does not include the declaration of the TLS APIs, "
"you need to include :file:`pythread.h` to use thread-local storage."
msgstr ""
"Observe que :file:`Python.h` não inclui a declaração das APIs TLS. É "
"necessário incluir :file:`pythread.h` para usar o armazenamento local de "
"threads."

#: ../../c-api/init.rst:2278
msgid ""
"None of these API functions handle memory management on behalf of the :c:"
"expr:`void*` values.  You need to allocate and deallocate them yourself. If "
"the :c:expr:`void*` values happen to be :c:expr:`PyObject*`, these functions "
"don't do refcount operations on them either."
msgstr ""
"Nenhuma destas funções API lida com a gestão de memória em nome dos valores :"
"c:expr:`void*`. Você precisa alocá-los e desalocá-los por conta própria. Se "
"os valores :c:expr:`void*` forem :c:expr:`PyObject*`, estas funções também "
"não realizam operações de contagem de referências neles."

#: ../../c-api/init.rst:2286
msgid "Thread Specific Storage (TSS) API"
msgstr "API de armazenamento específico da thread (TSS)"

#: ../../c-api/init.rst:2288
msgid ""
"TSS API is introduced to supersede the use of the existing TLS API within "
"the CPython interpreter.  This API uses a new type :c:type:`Py_tss_t` "
"instead of :c:expr:`int` to represent thread keys."
msgstr ""
"A API TSS foi introduzida para substituir o uso da API TLS existente no "
"interpretador CPython. Esta API usa um novo tipo :c:type:`Py_tss_t` em vez "
"de :c:expr:`int` para representar chaves de thread."

#: ../../c-api/init.rst:2294
msgid "\"A New C-API for Thread-Local Storage in CPython\" (:pep:`539`)"
msgstr ""
"\"Uma nova C-API para armazenamento local de threads no CPython\" (:pep:"
"`539`)"

#: ../../c-api/init.rst:2299
msgid ""
"This data structure represents the state of a thread key, the definition of "
"which may depend on the underlying TLS implementation, and it has an "
"internal field representing the key's initialization state.  There are no "
"public members in this structure."
msgstr ""
"Esta estrutura de dados representa o estado de uma chave de thread, cuja "
"definição pode depender da implementação TLS subjacente, e possui um campo "
"interno que representa o estado de inicialização da chave. Não há membros "
"públicos nesta estrutura."

#: ../../c-api/init.rst:2304
msgid ""
"When :ref:`Py_LIMITED_API <stable>` is not defined, static allocation of "
"this type by :c:macro:`Py_tss_NEEDS_INIT` is allowed."
msgstr ""
"Quando :ref:`Py_LIMITED_API <stable>` não está definido, a alocação estática "
"deste tipo por :c:macro:`Py_tss_NEEDS_INIT` é permitida."

#: ../../c-api/init.rst:2310
msgid ""
"This macro expands to the initializer for :c:type:`Py_tss_t` variables. Note "
"that this macro won't be defined with :ref:`Py_LIMITED_API <stable>`."
msgstr ""
"Esta macro expande-se para o inicializador das variáveis :c:type:`Py_tss_t`. "
"Note que esta macro não será definida com :ref:`Py_LIMITED_API <stable>`."

#: ../../c-api/init.rst:2315
msgid "Dynamic Allocation"
msgstr "Alocação dinâmica"

#: ../../c-api/init.rst:2317
msgid ""
"Dynamic allocation of the :c:type:`Py_tss_t`, required in extension modules "
"built with :ref:`Py_LIMITED_API <stable>`, where static allocation of this "
"type is not possible due to its implementation being opaque at build time."
msgstr ""
"Alocação dinâmica do :c:type:`Py_tss_t`, necessário em módulos de extensão "
"compilados com :ref:`Py_LIMITED_API <stable>`, onde a alocação estática "
"deste tipo não é possível devido à sua implementação ser opaca no momento da "
"compilação."

#: ../../c-api/init.rst:2324
msgid ""
"Return a value which is the same state as a value initialized with :c:macro:"
"`Py_tss_NEEDS_INIT`, or ``NULL`` in the case of dynamic allocation failure."
msgstr ""
"Retorna um valor que é o mesmo estado de um valor inicializado com :c:macro:"
"`Py_tss_NEEDS_INIT`, ou ``NULL`` no caso de falha na alocação dinâmica."

#: ../../c-api/init.rst:2331
msgid ""
"Free the given *key* allocated by :c:func:`PyThread_tss_alloc`, after first "
"calling :c:func:`PyThread_tss_delete` to ensure any associated thread locals "
"have been unassigned. This is a no-op if the *key* argument is ``NULL``."
msgstr ""
"Libera a *chave* atribuída por :c:func:`PyThread_tss_alloc`, após primeiro "
"chamar :c:func:`PyThread_tss_delete` para garantir que quaisquer variáveis "
"locais associadas à thread tenham sido desatribuídas. Isto é uma operação "
"nula se o argumento *chave* for ``NULL``."

#: ../../c-api/init.rst:2337
msgid ""
"A freed key becomes a dangling pointer. You should reset the key to ``NULL``."
msgstr ""
"Uma chave liberada torna-se um ponteiro pendente. Deve redefinir a chave "
"para ``NULL``."

#: ../../c-api/init.rst:2342
msgid "Methods"
msgstr "Métodos"

#: ../../c-api/init.rst:2344
msgid ""
"The parameter *key* of these functions must not be ``NULL``.  Moreover, the "
"behaviors of :c:func:`PyThread_tss_set` and :c:func:`PyThread_tss_get` are "
"undefined if the given :c:type:`Py_tss_t` has not been initialized by :c:"
"func:`PyThread_tss_create`."
msgstr ""
"O parâmetro *key* destas funções não deve ser ``NULL``. Além disso, os "
"comportamentos de :c:func:`PyThread_tss_set` e :c:func:`PyThread_tss_get` "
"são indefinidos se o :c:type:`Py_tss_t` fornecido não tiver sido "
"inicializado por :c:func:`PyThread_tss_create`."

#: ../../c-api/init.rst:2352
msgid ""
"Return a non-zero value if the given :c:type:`Py_tss_t` has been initialized "
"by :c:func:`PyThread_tss_create`."
msgstr ""
"Retorna um valor diferente de zero se o :c:type:`Py_tss_t` fornecido tiver "
"sido inicializado por :c:func:`PyThread_tss_create`."

#: ../../c-api/init.rst:2358
msgid ""
"Return a zero value on successful initialization of a TSS key.  The behavior "
"is undefined if the value pointed to by the *key* argument is not "
"initialized by :c:macro:`Py_tss_NEEDS_INIT`.  This function can be called "
"repeatedly on the same key -- calling it on an already initialized key is a "
"no-op and immediately returns success."
msgstr ""
"Retorna um valor zero na inicialização bem-sucedida de uma chave TSS. O "
"comportamento é indefinido se o valor apontado pelo argumento *key* não for "
"inicializado por :c:macro:`Py_tss_NEEDS_INIT`. Esta função pode ser chamada "
"repetidamente na mesma chave — chamá-la em uma chave já inicializada é uma "
"operação nula e retorna imediatamente sucesso."

#: ../../c-api/init.rst:2367
msgid ""
"Destroy a TSS key to forget the values associated with the key across all "
"threads, and change the key's initialization state to uninitialized.  A "
"destroyed key is able to be initialized again by :c:func:"
"`PyThread_tss_create`. This function can be called repeatedly on the same "
"key -- calling it on an already destroyed key is a no-op."
msgstr ""
"Destrua uma chave TSS para esquecer os valores associados à chave em todos "
"os threads e altere o estado de inicialização da chave para não "
"inicializado. Uma chave destruída pode ser inicializada novamente por :c:"
"func:`PyThread_tss_create`. Esta função pode ser chamada repetidamente na "
"mesma chave — chamá-la em uma chave já destruída não tem efeito."

#: ../../c-api/init.rst:2376
msgid ""
"Return a zero value to indicate successfully associating a :c:expr:`void*` "
"value with a TSS key in the current thread.  Each thread has a distinct "
"mapping of the key to a :c:expr:`void*` value."
msgstr ""
"Retorna um valor zero para indicar que associou com sucesso um valor :c:expr:"
"`void*` a uma chave TSS na thread atual. Cada thread tem um mapeamento "
"distinto da chave para um valor :c:expr:`void*`."

#: ../../c-api/init.rst:2383
msgid ""
"Return the :c:expr:`void*` value associated with a TSS key in the current "
"thread.  This returns ``NULL`` if no value is associated with the key in the "
"current thread."
msgstr ""
"Retorna o valor :c:expr:`void*` associado a uma chave TSS na thread atual. "
"Isso retorna ``NULL`` se nenhum valor estiver associado à chave na thread "
"atual."

#: ../../c-api/init.rst:2391
msgid "Thread Local Storage (TLS) API"
msgstr "API de armazenamento local de threads (TLS)"

#: ../../c-api/init.rst:2393
msgid ""
"This API is superseded by :ref:`Thread Specific Storage (TSS) API <thread-"
"specific-storage-api>`."
msgstr ""
"Esta API foi substituída pela :ref:`API de armazenamento específico da "
"thread (TSS) <thread-specific-storage-api>`."

#: ../../c-api/init.rst:2398
msgid ""
"This version of the API does not support platforms where the native TLS key "
"is defined in a way that cannot be safely cast to ``int``.  On such "
"platforms, :c:func:`PyThread_create_key` will return immediately with a "
"failure status, and the other TLS functions will all be no-ops on such "
"platforms."
msgstr ""
"Esta versão da API não suporta plataformas nas quais a chave TLS nativa é "
"definida de forma que não pode ser convertida com segurança para ``int``. "
"Nessas plataformas, :c:func:`PyThread_create_key` retornará imediatamente "
"com um status de falha, e as outras funções TLS serão todas no-ops nessas "
"plataformas."

#: ../../c-api/init.rst:2403
msgid ""
"Due to the compatibility problem noted above, this version of the API should "
"not be used in new code."
msgstr ""
"Devido ao problema de compatibilidade mencionado acima, esta versão da API "
"não deve ser utilizada em código novo."

#: ../../c-api/init.rst:2414
msgid "Synchronization Primitives"
msgstr "Primitivas de sincronização"

#: ../../c-api/init.rst:2416
msgid "The C-API provides a basic mutual exclusion lock."
msgstr "A C-API fornece um bloqueio básico de exclusão mútua."

#: ../../c-api/init.rst:2420
msgid ""
"A mutual exclusion lock.  The :c:type:`!PyMutex` should be initialized to "
"zero to represent the unlocked state.  For example::"
msgstr ""
"Um bloqueio de exclusão mútua. O :c:type:`!PyMutex` deve ser inicializado "
"como zero para representar o estado desbloqueado. Por exemplo::"

#: ../../c-api/init.rst:2423
msgid "PyMutex mutex = {0};"
msgstr "PyMutex mutex = {0};"

#: ../../c-api/init.rst:2425
msgid ""
"Instances of :c:type:`!PyMutex` should not be copied or moved.  Both the "
"contents and address of a :c:type:`!PyMutex` are meaningful, and it must "
"remain at a fixed, writable location in memory."
msgstr ""
"As instâncias de :c:type:`!PyMutex` não devem ser copiadas ou movidas. Tanto "
"o conteúdo como o endereço de um :c:type:`!PyMutex` são significativos e "
"devem permanecer numa localização fixa e gravável na memória."

#: ../../c-api/init.rst:2431
msgid ""
"A :c:type:`!PyMutex` currently occupies one byte, but the size should be "
"considered unstable.  The size may change in future Python releases without "
"a deprecation period."
msgstr ""
"A :c:type:`!PyMutex` ocupa atualmente um byte, mas o tamanho deve ser "
"considerado instável. O tamanho pode mudar em futuras versões lançadas do "
"Python sem um período de descontinuação."

#: ../../c-api/init.rst:2439
msgid ""
"Lock mutex *m*.  If another thread has already locked it, the calling thread "
"will block until the mutex is unlocked.  While blocked, the thread will "
"temporarily detach the :term:`thread state <attached thread state>` if one "
"exists."
msgstr ""
"Bloqueia o mutex *m*. Se outro thread já o tiver bloqueado, o thread de "
"chamada ficará bloqueado até que o mutex seja desbloqueado. Enquanto estiver "
"bloqueado, o thread irá separar temporariamente o :term:`estado de thread "
"<attached thread state>`, se existir."

#: ../../c-api/init.rst:2447
msgid ""
"Unlock mutex *m*. The mutex must be locked --- otherwise, the function will "
"issue a fatal error."
msgstr ""
"Desbloquear mutex *m*. O mutex deve estar bloqueado --- caso contrário, a "
"função emitirá um erro fatal."

#: ../../c-api/init.rst:2454
msgid "Returns non-zero if the mutex *m* is currently locked, zero otherwise."
msgstr ""
"Retorna um valor diferente de zero se o mutex *m* estiver bloqueado no "
"momento, zero caso contrário."

#: ../../c-api/init.rst:2458
msgid ""
"This function is intended for use in assertions and debugging only and "
"should not be used to make concurrency control decisions, as the lock state "
"may change immediately after the check."
msgstr ""
"Esta função destina-se apenas a ser utilizada em afirmações e depuração e "
"não deve ser utilizada para tomar decisões de controlo de concorrência, uma "
"vez que o estado do bloqueio pode mudar imediatamente após a verificação."

#: ../../c-api/init.rst:2467
msgid "Python Critical Section API"
msgstr "API de secção crítica Python"

#: ../../c-api/init.rst:2469
msgid ""
"The critical section API provides a deadlock avoidance layer on top of per-"
"object locks for :term:`free-threaded <free threading>` CPython.  They are "
"intended to replace reliance on the :term:`global interpreter lock`, and are "
"no-ops in versions of Python with the global interpreter lock."
msgstr ""
"A API da secção crítica fornece uma camada de prevenção de impasses sobre os "
"bloqueios por objeto para :term:`free-threaded <free threading>` CPython. "
"Elas têm como objetivo substituir a dependência do :term:`bloqueio global do "
"interpretador` e são operações nulas nas versões do Python com o bloqueio "
"global do interpretador."

#: ../../c-api/init.rst:2474
msgid ""
"Critical sections are intended to be used for custom types implemented in C-"
"API extensions. They should generally not be used with built-in types like :"
"class:`list` and :class:`dict` because their public C-APIs already use "
"critical sections internally, with the notable exception of :c:func:"
"`PyDict_Next`, which requires critical section to be acquired externally."
msgstr ""
"As secções críticas destinam-se a ser utilizadas para tipos personalizados "
"implementados em extensões C-API. Geralmente, não devem ser utilizadas com "
"tipos incorporados como :class:`list` e :class:`dict`, porque as suas C-APIs "
"públicas já utilizam secções críticas internamente, com a notável exceção "
"de :c:func:`PyDict_Next`, que requer que a secção crítica seja adquirida "
"externamente."

#: ../../c-api/init.rst:2481
msgid ""
"Critical sections avoid deadlocks by implicitly suspending active critical "
"sections, hence, they do not provide exclusive access such as provided by "
"traditional locks like :c:type:`PyMutex`.  When a critical section is "
"started, the per-object lock for the object is acquired. If the code "
"executed inside the critical section calls C-API functions then it can "
"suspend the critical section thereby releasing the per-object lock, so other "
"threads can acquire the per-object lock for the same object."
msgstr ""
"As secções críticas evitam impasses ao suspender implicitamente as secções "
"críticas ativas, portanto, não fornecem acesso exclusivo, como o fornecido "
"por bloqueios tradicionais, como :c:type:`PyMutex`. Quando uma secção "
"crítica é iniciada, o bloqueio por objeto para o objeto é adquirido. Se o "
"código executado dentro da secção crítica chamar funções C-API, ele poderá "
"suspender a secção crítica, liberando assim o bloqueio por objeto, para que "
"outras threads possam adquirir o bloqueio por objeto para o mesmo objeto."

#: ../../c-api/init.rst:2489
msgid ""
"Variants that accept :c:type:`PyMutex` pointers rather than Python objects "
"are also available. Use these variants to start a critical section in a "
"situation where there is no :c:type:`PyObject` -- for example, when working "
"with a C type that does not extend or wrap :c:type:`PyObject` but still "
"needs to call into the C API in a manner that might lead to deadlocks."
msgstr ""
"Variantes que aceitam ponteiros :c:type:`PyMutex` em vez de objetos Python "
"também estão disponíveis. Use essas variantes para iniciar uma seção crítica "
"em uma situação em que não há :c:type:`PyObject` — por exemplo, ao trabalhar "
"com um tipo C que não estende ou envolve :c:type:`PyObject`, mas ainda "
"precisa chamar a API C de uma maneira que pode levar a deadlocks."

#: ../../c-api/init.rst:2495
msgid ""
"The functions and structs used by the macros are exposed for cases where C "
"macros are not available. They should only be used as in the given macro "
"expansions. Note that the sizes and contents of the structures may change in "
"future Python versions."
msgstr ""
"As funções e estruturas utilizadas pelas macros são expostas para casos em "
"que as macros C não estão disponíveis. Elas só devem ser utilizadas como nas "
"expansões de macro fornecidas. Note que os tamanhos e conteúdos das "
"estruturas podem mudar em versões futuras do Python."

#: ../../c-api/init.rst:2502
msgid ""
"Operations that need to lock two objects at once must use :c:macro:"
"`Py_BEGIN_CRITICAL_SECTION2`.  You *cannot* use nested critical sections to "
"lock more than one object at once, because the inner critical section may "
"suspend the outer critical sections.  This API does not provide a way to "
"lock more than two objects at once."
msgstr ""
"As operações que precisam bloquear dois objetos ao mesmo tempo devem usar :c:"
"macro:`Py_BEGIN_CRITICAL_SECTION2`. Você *não pode* usar seções críticas "
"aninhadas para bloquear mais de um objeto ao mesmo tempo, porque a seção "
"crítica interna pode suspender as seções críticas externas. Esta API não "
"fornece uma maneira de bloquear mais de dois objetos ao mesmo tempo."

#: ../../c-api/init.rst:2508
msgid "Example usage::"
msgstr "Exemplo de utilização::"

#: ../../c-api/init.rst:2510
msgid ""
"static PyObject *\n"
"set_field(MyObject *self, PyObject *value)\n"
"{\n"
"   Py_BEGIN_CRITICAL_SECTION(self);\n"
"   Py_SETREF(self->field, Py_XNewRef(value));\n"
"   Py_END_CRITICAL_SECTION();\n"
"   Py_RETURN_NONE;\n"
"}"
msgstr ""
"static PyObject *\n"
"set_field(MyObject *self, PyObject *value)\n"
"{\n"
"   Py_BEGIN_CRITICAL_SECTION(self);\n"
"   Py_SETREF(self->field, Py_XNewRef(value));\n"
"   Py_END_CRITICAL_SECTION();\n"
"   Py_RETURN_NONE;\n"
"}"

#: ../../c-api/init.rst:2519
msgid ""
"In the above example, :c:macro:`Py_SETREF` calls :c:macro:`Py_DECREF`, which "
"can call arbitrary code through an object's deallocation function.  The "
"critical section API avoids potential deadlocks due to reentrancy and lock "
"ordering by allowing the runtime to temporarily suspend the critical section "
"if the code triggered by the finalizer blocks and calls :c:func:"
"`PyEval_SaveThread`."
msgstr ""
"No exemplo acima, :c:macro:`Py_SETREF` chama :c:macro:`Py_DECREF`, que pode "
"chamar código arbitrário através da função de desalocação de um objeto. A "
"API da secção crítica evita potenciais bloqueios devido à reentrada e à "
"ordenação de bloqueios, permitindo que o tempo de execução suspenda "
"temporariamente a secção crítica se o código acionado pelo finalizador "
"bloquear e chamar :c:func:`PyEval_SaveThread`."

#: ../../c-api/init.rst:2527
msgid ""
"Acquires the per-object lock for the object *op* and begins a critical "
"section."
msgstr ""
"Adquire o bloqueio por objeto para o objeto *op* e inicia uma secção crítica."

#: ../../c-api/init.rst:2530 ../../c-api/init.rst:2544
#: ../../c-api/init.rst:2561 ../../c-api/init.rst:2576
#: ../../c-api/init.rst:2590 ../../c-api/init.rst:2607
msgid "In the free-threaded build, this macro expands to::"
msgstr "Na compilação de thread livre, esta macro expande-se para::"

#: ../../c-api/init.rst:2532
msgid ""
"{\n"
"    PyCriticalSection _py_cs;\n"
"    PyCriticalSection_Begin(&_py_cs, (PyObject*)(op))"
msgstr ""
"{\n"
"    PyCriticalSection _py_cs;\n"
"    PyCriticalSection_Begin(&_py_cs, (PyObject*)(op))"

#: ../../c-api/init.rst:2536 ../../c-api/init.rst:2582
msgid "In the default build, this macro expands to ``{``."
msgstr "Na compilação padrão, esta macro expande-se para ``{``."

#: ../../c-api/init.rst:2542
msgid "Locks the mutex *m* and begins a critical section."
msgstr "Bloqueia o mutex *m* e inicia uma secção crítica."

#: ../../c-api/init.rst:2546
msgid ""
"{\n"
"     PyCriticalSection _py_cs;\n"
"     PyCriticalSection_BeginMutex(&_py_cs, m)"
msgstr ""
"{\n"
"     PyCriticalSection _py_cs;\n"
"     PyCriticalSection_BeginMutex(&_py_cs, m)"

#: ../../c-api/init.rst:2550
msgid ""
"Note that unlike :c:macro:`Py_BEGIN_CRITICAL_SECTION`, there is no cast for "
"the argument of the macro - it must be a :c:type:`PyMutex` pointer."
msgstr ""
"Note que, ao contrário de :c:macro:`Py_BEGIN_CRITICAL_SECTION`, não há "
"conversão para o argumento da macro — ele deve ser um ponteiro :c:type:"
"`PyMutex`."

#: ../../c-api/init.rst:2553 ../../c-api/init.rst:2599
msgid "On the default build, this macro expands to ``{``."
msgstr "Na compilação padrão, esta macro expande-se para ``{``."

#: ../../c-api/init.rst:2559
msgid "Ends the critical section and releases the per-object lock."
msgstr "Encerra a secção crítica e liberta o bloqueio por objeto."

#: ../../c-api/init.rst:2563
msgid ""
"    PyCriticalSection_End(&_py_cs);\n"
"}"
msgstr ""
"    PyCriticalSection_End(&_py_cs);\n"
"}"

#: ../../c-api/init.rst:2566 ../../c-api/init.rst:2612
msgid "In the default build, this macro expands to ``}``."
msgstr "Na compilação padrão, esta macro expande-se para ``}``."

#: ../../c-api/init.rst:2572
msgid ""
"Acquires the per-objects locks for the objects *a* and *b* and begins a "
"critical section.  The locks are acquired in a consistent order (lowest "
"address first) to avoid lock ordering deadlocks."
msgstr ""
"Adquire os bloqueios por objeto para os objetos *a* e *b* e inicia uma "
"secção crítica. Os bloqueios são adquiridos numa ordem consistente (primeiro "
"o endereço mais baixo) para evitar impasses na ordem dos bloqueios."

#: ../../c-api/init.rst:2578
msgid ""
"{\n"
"    PyCriticalSection2 _py_cs2;\n"
"    PyCriticalSection2_Begin(&_py_cs2, (PyObject*)(a), (PyObject*)(b))"
msgstr ""
"{\n"
"    PyCriticalSection2 _py_cs2;\n"
"    PyCriticalSection2_Begin(&_py_cs2, (PyObject*)(a), (PyObject*)(b))"

#: ../../c-api/init.rst:2588
msgid "Locks the mutexes *m1* and *m2* and begins a critical section."
msgstr "Bloqueia os mutexes *m1* e *m2* e inicia uma secção crítica."

#: ../../c-api/init.rst:2592
msgid ""
"{\n"
"     PyCriticalSection2 _py_cs2;\n"
"     PyCriticalSection2_BeginMutex(&_py_cs2, m1, m2)"
msgstr ""
"{\n"
"     PyCriticalSection2 _py_cs2;\n"
"     PyCriticalSection2_BeginMutex(&_py_cs2, m1, m2)"

#: ../../c-api/init.rst:2596
msgid ""
"Note that unlike :c:macro:`Py_BEGIN_CRITICAL_SECTION2`, there is no cast for "
"the arguments of the macro - they must be :c:type:`PyMutex` pointers."
msgstr ""
"Note que, ao contrário de :c:macro:`Py_BEGIN_CRITICAL_SECTION2`, não há "
"conversão para os argumentos da macro — eles devem ser ponteiros :c:type:"
"`PyMutex`."

#: ../../c-api/init.rst:2605
msgid "Ends the critical section and releases the per-object locks."
msgstr "Encerra a secção crítica e liberta os bloqueios por objeto."

#: ../../c-api/init.rst:2609
msgid ""
"    PyCriticalSection2_End(&_py_cs2);\n"
"}"
msgstr ""
"    PyCriticalSection2_End(&_py_cs2);\n"
"}"

#: ../../c-api/init.rst:350
msgid "PyEval_InitThreads()"
msgstr "PyEval_InitThreads()"

#: ../../c-api/init.rst:350
msgid "modules (in module sys)"
msgstr "módulos (no módulo sys)"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:712
msgid "path (in module sys)"
msgstr "path (no módulo sys)"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:712 ../../c-api/init.rst:1228
#: ../../c-api/init.rst:1756 ../../c-api/init.rst:1855
msgid "module"
msgstr "módulo"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:1756 ../../c-api/init.rst:1855
msgid "builtins"
msgstr "embutidos"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:1756 ../../c-api/init.rst:1855
msgid "__main__"
msgstr "__main__"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:1756 ../../c-api/init.rst:1855
msgid "sys"
msgstr "sys"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:712
msgid "search"
msgstr "pesquisar"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:712
msgid "path"
msgstr "caminho"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:1820 ../../c-api/init.rst:1873
msgid "Py_FinalizeEx (C function)"
msgstr "Py_FinalizeEx (função C)"

#: ../../c-api/init.rst:572
msgid "Py_Initialize()"
msgstr "Py_Initialize()"

#: ../../c-api/init.rst:572 ../../c-api/init.rst:810
msgid "main()"
msgstr "main()"

#: ../../c-api/init.rst:572
msgid "Py_GetPath()"
msgstr "Py_GetPath()"

#: ../../c-api/init.rst:690
msgid "executable (in module sys)"
msgstr "executável (no módulo sys)"

#: ../../c-api/init.rst:745 ../../c-api/init.rst:787 ../../c-api/init.rst:801
msgid "version (in module sys)"
msgstr "versão (no módulo sys)"

#: ../../c-api/init.rst:757
msgid "platform (in module sys)"
msgstr "plataforma (no módulo sys)"

#: ../../c-api/init.rst:774
msgid "copyright (in module sys)"
msgstr "direitos de autor (no módulo sys)"

#: ../../c-api/init.rst:810
msgid "Py_FatalError()"
msgstr "Py_FatalError()"

#: ../../c-api/init.rst:810
msgid "argv (in module sys)"
msgstr "argv (no módulo sys)"

#: ../../c-api/init.rst:930
msgid "global interpreter lock"
msgstr "bloqueio global do interpretador"

#: ../../c-api/init.rst:930
msgid "interpreter lock"
msgstr "bloqueio do intérprete"

#: ../../c-api/init.rst:930
msgid "lock, interpreter"
msgstr "bloqueio, intérprete"

#: ../../c-api/init.rst:944
msgid "setswitchinterval (in module sys)"
msgstr "setswitchinterval (no módulo sys)"

#: ../../c-api/init.rst:953
msgid "PyThreadState (C type)"
msgstr "PyThreadState (tipo C)"

#: ../../c-api/init.rst:989
msgid "Py_BEGIN_ALLOW_THREADS (C macro)"
msgstr "Py_BEGIN_ALLOW_THREADS (macro C)"

#: ../../c-api/init.rst:989
msgid "Py_END_ALLOW_THREADS (C macro)"
msgstr "Py_END_ALLOW_THREADS (macro C)"

#: ../../c-api/init.rst:1005
msgid "PyEval_RestoreThread (C function)"
msgstr "PyEval_RestoreThread (função C)"

#: ../../c-api/init.rst:1005
msgid "PyEval_SaveThread (C function)"
msgstr "PyEval_SaveThread (função C)"

#: ../../c-api/init.rst:1206
msgid "PyEval_AcquireThread()"
msgstr "PyEval_AcquireThread()"

#: ../../c-api/init.rst:1206
msgid "PyEval_ReleaseThread()"
msgstr "PyEval_ReleaseThread()"

#: ../../c-api/init.rst:1206
msgid "PyEval_SaveThread()"
msgstr "PyEval_SaveThread()"

#: ../../c-api/init.rst:1206
msgid "PyEval_RestoreThread()"
msgstr "PyEval_RestoreThread()"

#: ../../c-api/init.rst:1228
msgid "_thread"
msgstr "_thread"

#: ../../c-api/init.rst:1756 ../../c-api/init.rst:1855
msgid "stdout (in module sys)"
msgstr "stdout (no módulo sys)"

#: ../../c-api/init.rst:1756 ../../c-api/init.rst:1855
msgid "stderr (in module sys)"
msgstr "stderr (no módulo sys)"

#: ../../c-api/init.rst:1756 ../../c-api/init.rst:1855
msgid "stdin (in module sys)"
msgstr "stdin (no módulo sys)"

#: ../../c-api/init.rst:1820
msgid "Py_Initialize (C function)"
msgstr "Py_Initialize (função C)"

#: ../../c-api/init.rst:1850
msgid "close (in module os)"
msgstr "fechar (no módulo os)"
