# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 17:19+0000\n"
"PO-Revision-Date: 2025-09-22 15:57+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/init.rst:8
msgid "Initialization, Finalization, and Threads"
msgstr "Inicialização, finalização e threads"

#: ../../c-api/init.rst:10
msgid "See also :ref:`Python Initialization Configuration <init-config>`."
msgstr ""

#: ../../c-api/init.rst:15
msgid "Before Python Initialization"
msgstr "Antes da inicialização do Python"

#: ../../c-api/init.rst:17
msgid ""
"In an application embedding  Python, the :c:func:`Py_Initialize` function "
"must be called before using any other Python/C API functions; with the "
"exception of a few functions and the :ref:`global configuration variables "
"<global-conf-vars>`."
msgstr ""
"Numa aplicação que incorpora Python, a função :c:func:`Py_Initialize` deve "
"ser chamada antes de usar qualquer outra função da API C/Python, com exceção "
"de algumas funções e das :ref:`variáveis de configuração global <global-conf-"
"vars>`."

#: ../../c-api/init.rst:22
msgid ""
"The following functions can be safely called before Python is initialized:"
msgstr ""
"As seguintes funções podem ser chamadas com segurança antes da inicialização "
"do Python:"

#: ../../c-api/init.rst:24
msgid "Configuration functions:"
msgstr "Funções de configuração:"

#: ../../c-api/init.rst:26
msgid ":c:func:`PyImport_AppendInittab`"
msgstr ":c:func:`PyImport_AppendInittab`"

#: ../../c-api/init.rst:27
msgid ":c:func:`PyImport_ExtendInittab`"
msgstr ":c:func:`PyImport_ExtendInittab`"

#: ../../c-api/init.rst:28
msgid ":c:func:`PyInitFrozenExtensions`"
msgstr ""

#: ../../c-api/init.rst:29
msgid ":c:func:`PyMem_SetAllocator`"
msgstr ":c:func:`PyMem_SetAllocator`"

#: ../../c-api/init.rst:30
msgid ":c:func:`PyMem_SetupDebugHooks`"
msgstr ":c:func:`PyMem_SetupDebugHooks`"

#: ../../c-api/init.rst:31
msgid ":c:func:`PyObject_SetArenaAllocator`"
msgstr ":c:func:`PyObject_SetArenaAllocator`"

#: ../../c-api/init.rst:32
msgid ":c:func:`Py_SetPath`"
msgstr ""

#: ../../c-api/init.rst:33
msgid ":c:func:`Py_SetProgramName`"
msgstr ":c:func:`Py_SetProgramName`"

#: ../../c-api/init.rst:34
msgid ":c:func:`Py_SetPythonHome`"
msgstr ":c:func:`Py_SetPythonHome`"

#: ../../c-api/init.rst:35
msgid ":c:func:`Py_SetStandardStreamEncoding`"
msgstr ""

#: ../../c-api/init.rst:36
msgid ":c:func:`PySys_AddWarnOption`"
msgstr ""

#: ../../c-api/init.rst:37
msgid ":c:func:`PySys_AddXOption`"
msgstr ""

#: ../../c-api/init.rst:38
msgid ":c:func:`PySys_ResetWarnOptions`"
msgstr ":c:func:`PySys_ResetWarnOptions`"

#: ../../c-api/init.rst:40
msgid "Informative functions:"
msgstr "Funções informativas:"

#: ../../c-api/init.rst:42
msgid ":c:func:`Py_IsInitialized`"
msgstr ":c:func:`Py_IsInitialized`"

#: ../../c-api/init.rst:43
msgid ":c:func:`PyMem_GetAllocator`"
msgstr ":c:func:`PyMem_GetAllocator`"

#: ../../c-api/init.rst:44
msgid ":c:func:`PyObject_GetArenaAllocator`"
msgstr ":c:func:`PyObject_GetArenaAllocator`"

#: ../../c-api/init.rst:45
msgid ":c:func:`Py_GetBuildInfo`"
msgstr ":c:func:`Py_GetBuildInfo`"

#: ../../c-api/init.rst:46
msgid ":c:func:`Py_GetCompiler`"
msgstr ":c:func:`Py_GetCompiler`"

#: ../../c-api/init.rst:47
msgid ":c:func:`Py_GetCopyright`"
msgstr ":c:func:`Py_GetCopyright`"

#: ../../c-api/init.rst:48
msgid ":c:func:`Py_GetPlatform`"
msgstr ":c:func:`Py_GetPlatform`"

#: ../../c-api/init.rst:49
msgid ":c:func:`Py_GetVersion`"
msgstr ":c:func:`Py_GetVersion`"

#: ../../c-api/init.rst:51
msgid "Utilities:"
msgstr "Utilidades:"

#: ../../c-api/init.rst:53
msgid ":c:func:`Py_DecodeLocale`"
msgstr ":c:func:`Py_DecodeLocale`"

#: ../../c-api/init.rst:55
msgid "Memory allocators:"
msgstr "Alocadores de memória:"

#: ../../c-api/init.rst:57
msgid ":c:func:`PyMem_RawMalloc`"
msgstr ":c:func:`PyMem_RawMalloc`"

#: ../../c-api/init.rst:58
msgid ":c:func:`PyMem_RawRealloc`"
msgstr ":c:func:`PyMem_RawRealloc`"

#: ../../c-api/init.rst:59
msgid ":c:func:`PyMem_RawCalloc`"
msgstr ":c:func:`PyMem_RawCalloc`"

#: ../../c-api/init.rst:60
msgid ":c:func:`PyMem_RawFree`"
msgstr ":c:func:`PyMem_RawFree`"

#: ../../c-api/init.rst:64
msgid ""
"The following functions **should not be called** before :c:func:"
"`Py_Initialize`: :c:func:`Py_EncodeLocale`, :c:func:`Py_GetPath`, :c:func:"
"`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:func:"
"`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome`, :c:func:"
"`Py_GetProgramName` and :c:func:`PyEval_InitThreads`."
msgstr ""

#: ../../c-api/init.rst:74
msgid "Global configuration variables"
msgstr "Variáveis de configuração global"

#: ../../c-api/init.rst:76
msgid ""
"Python has variables for the global configuration to control different "
"features and options. By default, these flags are controlled by :ref:"
"`command line options <using-on-interface-options>`."
msgstr ""
"O Python possui variáveis para a configuração global para controlar "
"diferentes funcionalidades e opções. Por predefinição, estes sinalizadores "
"são controlados por :ref:`opções da linha de comando <using-on-interface-"
"options>`."

#: ../../c-api/init.rst:80
msgid ""
"When a flag is set by an option, the value of the flag is the number of "
"times that the option was set. For example, ``-b`` sets :c:data:"
"`Py_BytesWarningFlag` to 1 and ``-bb`` sets :c:data:`Py_BytesWarningFlag` to "
"2."
msgstr ""
"Quando um sinalizador é definido por uma opção, o valor do sinalizador é o "
"número de vezes que a opção foi definida. Por exemplo, ``-b`` define :c:data:"
"`Py_BytesWarningFlag` como 1 e ``-bb`` define :c:data:`Py_BytesWarningFlag` "
"como 2."

#: ../../c-api/init.rst:86
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with :"
"class:`str` or :class:`bytes` with :class:`int`.  Issue an error if greater "
"or equal to ``2``."
msgstr ""
"Emitir um aviso ao comparar :class:`bytes` ou :class:`bytearray` com :class:"
"`str` ou :class:`bytes` com :class:`int`. Emitir um erro se for maior ou "
"igual a ``2``."

#: ../../c-api/init.rst:90
msgid "Set by the :option:`-b` option."
msgstr "Definida pela opção :option:`-b`."

#: ../../c-api/init.rst:94
msgid ""
"Turn on parser debugging output (for expert only, depending on compilation "
"options)."
msgstr ""
"Ativa a saída de depuração do analisador sintático (somente para "
"especialistas, dependendo das opções de compilação)."

#: ../../c-api/init.rst:97
msgid ""
"Set by the :option:`-d` option and the :envvar:`PYTHONDEBUG` environment "
"variable."
msgstr ""
"Definida pela a opção :option:`-d` e a variável de ambiente :envvar:"
"`PYTHONDEBUG`."

#: ../../c-api/init.rst:102
msgid ""
"If set to non-zero, Python won't try to write ``.pyc`` files on the import "
"of source modules."
msgstr ""
"Se definido como diferente de zero, o Python não tentará gravar ficheiros ``."
"pyc`` na importação de módulos de origem."

#: ../../c-api/init.rst:105
msgid ""
"Set by the :option:`-B` option and the :envvar:`PYTHONDONTWRITEBYTECODE` "
"environment variable."
msgstr ""
"Definido pela opção :option:`-B` e pela variável de ambiente :envvar:"
"`PYTHONDONTWRITEBYTECODE`."

#: ../../c-api/init.rst:110
msgid ""
"Suppress error messages when calculating the module search path in :c:func:"
"`Py_GetPath`."
msgstr ""
"Suprimir mensagens de erro ao calcular o caminho de pesquisa do módulo em :c:"
"func:`Py_GetPath`."

#: ../../c-api/init.rst:113
msgid "Private flag used by ``_freeze_importlib`` and ``frozenmain`` programs."
msgstr ""

#: ../../c-api/init.rst:117
msgid ""
"Set to ``1`` if the :envvar:`PYTHONHASHSEED` environment variable is set to "
"a non-empty string."
msgstr ""
"Defina como ``1`` se a variável de ambiente :envvar:`PYTHONHASHSEED` estiver "
"definida como uma string não vazia."

#: ../../c-api/init.rst:120
msgid ""
"If the flag is non-zero, read the :envvar:`PYTHONHASHSEED` environment "
"variable to initialize the secret hash seed."
msgstr ""
"Se o sinalizador for diferente de zero, leia a variável de ambiente :envvar:"
"`PYTHONHASHSEED` para inicializar a semente secreta do hash."

#: ../../c-api/init.rst:125
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. :envvar:"
"`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../c-api/init.rst:128
msgid "Set by the :option:`-E` and :option:`-I` options."
msgstr "Definido pelas opções :option:`-E` e :option:`-I`."

#: ../../c-api/init.rst:132
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal."
msgstr ""
"Quando um script é passado como primeiro argumento ou a opção :option:`-c` é "
"utilizada, entre no modo interativo após executar o script ou o comando, "
"mesmo quando :data:`sys.stdin` não parecer ser um terminal."

#: ../../c-api/init.rst:136
msgid ""
"Set by the :option:`-i` option and the :envvar:`PYTHONINSPECT` environment "
"variable."
msgstr ""
"Definido pela opção :option:`-i` e pela variável de ambiente :envvar:"
"`PYTHONINSPECT`."

#: ../../c-api/init.rst:141
msgid "Set by the :option:`-i` option."
msgstr "Definido pela opção :option:`-i`."

#: ../../c-api/init.rst:145
msgid ""
"Run Python in isolated mode. In isolated mode :data:`sys.path` contains "
"neither the script's directory nor the user's site-packages directory."
msgstr ""
"Execute o Python no modo isolado. No modo isolado, :data:`sys.path` não "
"contém nem o diretório do script nem o diretório site-packages do utilizador."

#: ../../c-api/init.rst:148
msgid "Set by the :option:`-I` option."
msgstr "Definido pela opção :option:`-I`."

#: ../../c-api/init.rst:154
msgid ""
"If the flag is non-zero, use the ``mbcs`` encoding with ``replace`` error "
"handler, instead of the UTF-8 encoding with ``surrogatepass`` error handler, "
"for the :term:`filesystem encoding and error handler`."
msgstr ""
"Se o sinalizador for diferente de zero, use a codificação ``mbcs`` com o "
"manipulador de erros ``replace``, em vez da codificação UTF-8 com o "
"manipulador de erros ``surrogatepass``, para a :term:`codificação do sistema "
"de ficheiros e manipulador de erros`."

#: ../../c-api/init.rst:158
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable is set to a non-empty string."
msgstr ""
"Defina como ``1`` se a variável de ambiente :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING` estiver definida como uma string não vazia."

#: ../../c-api/init.rst:161
msgid "See :pep:`529` for more details."
msgstr "Veja :pep:`529` para mais detalhes."

#: ../../c-api/init.rst:163 ../../c-api/init.rst:175
msgid ":ref:`Availability <availability>`: Windows."
msgstr ""

#: ../../c-api/init.rst:167
msgid ""
"If the flag is non-zero, use :class:`io.FileIO` instead of :class:"
"`WindowsConsoleIO` for :mod:`sys` standard streams."
msgstr ""

#: ../../c-api/init.rst:170
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr ""
"Defina como ``1`` se a variável de ambiente :envvar:"
"`PYTHONLEGACYWINDOWSSTDIO` estiver definida como uma string não vazia."

#: ../../c-api/init.rst:173
msgid "See :pep:`528` for more details."
msgstr "Veja a :pep:`528` para mais detalhes."

#: ../../c-api/init.rst:179
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""
"Desative a importação do módulo :mod:`site` e as manipulações dependentes do "
"site de :data:`sys.path` que ele implica. Desative também essas manipulações "
"se :mod:`site` for explicitamente importado posteriormente (chame :func:"
"`site.main` se quiser que elas sejam acionadas)."

#: ../../c-api/init.rst:184
msgid "Set by the :option:`-S` option."
msgstr "Definida pela opção :option:`-S`."

#: ../../c-api/init.rst:188
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""
"Não adicione o :data:`diretório site-packages do utilizador <site."
"USER_SITE>` ao :data:`sys.path`."

#: ../../c-api/init.rst:191
msgid ""
"Set by the :option:`-s` and :option:`-I` options, and the :envvar:"
"`PYTHONNOUSERSITE` environment variable."
msgstr ""
"Definido pelas opções :option:`-s` e :option:`-I`, e pela variável de "
"ambiente :envvar:`PYTHONNOUSERSITE`."

#: ../../c-api/init.rst:196
msgid ""
"Set by the :option:`-O` option and the :envvar:`PYTHONOPTIMIZE` environment "
"variable."
msgstr ""
"Definida pela opção :option:`-O` e pela variável de ambiente :envvar:"
"`PYTHONOPTIMIZE`."

#: ../../c-api/init.rst:201
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""
"Não exiba as mensagens de direitos de autor e versão, mesmo no modo "
"interativo."

#: ../../c-api/init.rst:203
msgid "Set by the :option:`-q` option."
msgstr "Definida pela opção :option:`-q`."

#: ../../c-api/init.rst:209
msgid "Force the stdout and stderr streams to be unbuffered."
msgstr "Força os fluxos stdout e stderr a não serem armazenados em buffer."

#: ../../c-api/init.rst:211
msgid ""
"Set by the :option:`-u` option and the :envvar:`PYTHONUNBUFFERED` "
"environment variable."
msgstr ""
"Definida pela opção :option:`-u` e pela variável de ambiente :envvar:"
"`PYTHONUNBUFFERED`."

#: ../../c-api/init.rst:216
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  If greater or equal "
"to ``2``, print a message for each file that is checked for when searching "
"for a module. Also provides information on module cleanup at exit."
msgstr ""
"Imprime uma mensagem cada vez que um módulo é inicializado, mostrando o "
"local (nome do ficheiro ou módulo incorporado) a partir do qual é carregado. "
"Se for maior ou igual a ``2``, imprime uma mensagem para cada ficheiro que é "
"verificado durante a pesquisa de um módulo. Também fornece informações sobre "
"a limpeza do módulo ao sair."

#: ../../c-api/init.rst:221
msgid ""
"Set by the :option:`-v` option and the :envvar:`PYTHONVERBOSE` environment "
"variable."
msgstr ""
"Definida pela a opção :option:`-v` e a variável de ambiente :envvar:"
"`PYTHONVERBOSE`."

#: ../../c-api/init.rst:226
msgid "Initializing and finalizing the interpreter"
msgstr "Inicializando e finalizando o interpretador"

#: ../../c-api/init.rst:244
msgid ""
"Initialize the Python interpreter.  In an application embedding  Python, "
"this should be called before using any other Python/C API functions; see :"
"ref:`Before Python Initialization <pre-init-safe>` for the few exceptions."
msgstr ""
"Inicializa o interpretador Python. Em uma aplicação que incorpora o Python, "
"isto deve ser chamado antes do uso de qualquer outra função do Python/C API; "
"veja :ref:`Antes da Inicialização do Python <pre-init-safe>` para algumas "
"exceções."

#: ../../c-api/init.rst:248
msgid ""
"This initializes the table of loaded modules (``sys.modules``), and creates "
"the fundamental modules :mod:`builtins`, :mod:`__main__` and :mod:`sys`.  It "
"also initializes the module search path (``sys.path``). It does not set "
"``sys.argv``; use :c:func:`PySys_SetArgvEx` for that.  This is a no-op when "
"called for a second time (without calling :c:func:`Py_FinalizeEx` first).  "
"There is no return value; it is a fatal error if the initialization fails."
msgstr ""

#: ../../c-api/init.rst:257
msgid ""
"On Windows, changes the console mode from ``O_TEXT`` to ``O_BINARY``, which "
"will also affect non-Python uses of the console using the C Runtime."
msgstr ""
"No Windows, altera o modo da consola de ``O_TEXT`` para ``O_BINARY``, o que "
"também afetará os usos não Python da consola usando o C Runtime."

#: ../../c-api/init.rst:263
msgid ""
"This function works like :c:func:`Py_Initialize` if *initsigs* is ``1``. If "
"*initsigs* is ``0``, it skips initialization registration of signal "
"handlers, which might be useful when Python is embedded."
msgstr ""

#: ../../c-api/init.rst:270
msgid ""
"Return true (nonzero) when the Python interpreter has been initialized, "
"false (zero) if not.  After :c:func:`Py_FinalizeEx` is called, this returns "
"false until :c:func:`Py_Initialize` is called again."
msgstr ""
"Retorna verdadeiro (diferente de zero) quando o interpretador Python foi "
"inicializado, falso (zero) se não. Depois que :c:func:`Py_FinalizeEx` é "
"chamado, isso retorna falso até que :c:func:`Py_Initialize` seja chamado "
"novamente."

#: ../../c-api/init.rst:277
msgid ""
"Undo all initializations made by :c:func:`Py_Initialize` and subsequent use "
"of Python/C API functions, and destroy all sub-interpreters (see :c:func:"
"`Py_NewInterpreter` below) that were created and not yet destroyed since the "
"last call to :c:func:`Py_Initialize`.  Ideally, this frees all memory "
"allocated by the Python interpreter.  This is a no-op when called for a "
"second time (without calling :c:func:`Py_Initialize` again first).  Normally "
"the return value is ``0``.  If there were errors during finalization "
"(flushing buffered data), ``-1`` is returned."
msgstr ""

#: ../../c-api/init.rst:286
msgid ""
"This function is provided for a number of reasons.  An embedding application "
"might want to restart Python without having to restart the application "
"itself. An application that has loaded the Python interpreter from a "
"dynamically loadable library (or DLL) might want to free all memory "
"allocated by Python before unloading the DLL. During a hunt for memory leaks "
"in an application a developer might want to free all memory allocated by "
"Python before exiting from the application."
msgstr ""
"Esta função é fornecida por vários motivos. Uma aplicação incorporada pode "
"querer reiniciar o Python sem ter de reiniciar a própria aplicação. Uma "
"aplicação que tenha carregado o interpretador Python a partir de uma "
"biblioteca carregável dinamicamente (ou DLL) pode querer libertar toda a "
"memória alocada pelo Python antes de descarregar a DLL. Durante uma busca "
"por fugas de memória numa aplicação, um programador pode querer libertar "
"toda a memória alocada pelo Python antes de sair da aplicação."

#: ../../c-api/init.rst:294
msgid ""
"**Bugs and caveats:** The destruction of modules and objects in modules is "
"done in random order; this may cause destructors (:meth:`__del__` methods) "
"to fail when they depend on other objects (even functions) or modules.  "
"Dynamically loaded extension modules loaded by Python are not unloaded.  "
"Small amounts of memory allocated by the Python interpreter may not be freed "
"(if you find a leak, please report it).  Memory tied up in circular "
"references between objects is not freed.  Some memory allocated by extension "
"modules may not be freed.  Some extensions may not work properly if their "
"initialization routine is called more than once; this can happen if an "
"application calls :c:func:`Py_Initialize` and :c:func:`Py_FinalizeEx` more "
"than once."
msgstr ""

#: ../../c-api/init.rst:305
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"_PySys_ClearAuditHooks`` with no arguments."
msgstr ""
"Gera um :ref:`evento de auditoria <auditing>` ``cpython."
"_PySys_ClearAuditHooks`` sem argumentos."

#: ../../c-api/init.rst:311
msgid ""
"This is a backwards-compatible version of :c:func:`Py_FinalizeEx` that "
"disregards the return value."
msgstr ""
"Esta é uma versão compatível com versões anteriores de :c:func:"
"`Py_FinalizeEx` que ignora o valor de retorno."

#: ../../c-api/init.rst:316
msgid "Process-wide parameters"
msgstr "Parâmetros de todo o processo"

#: ../../c-api/init.rst:326
msgid ""
"This function should be called before :c:func:`Py_Initialize`, if it is "
"called at all. It specifies which encoding and error handling to use with "
"standard IO, with the same meanings as in :func:`str.encode`."
msgstr ""

#: ../../c-api/init.rst:330
msgid ""
"It overrides :envvar:`PYTHONIOENCODING` values, and allows embedding code to "
"control IO encoding when the environment variable does not work."
msgstr ""

#: ../../c-api/init.rst:333
msgid ""
"*encoding* and/or *errors* may be ``NULL`` to use :envvar:`PYTHONIOENCODING` "
"and/or default values (depending on other settings)."
msgstr ""

#: ../../c-api/init.rst:337
msgid ""
"Note that :data:`sys.stderr` always uses the \"backslashreplace\" error "
"handler, regardless of this (or any other) setting."
msgstr ""

#: ../../c-api/init.rst:340
msgid ""
"If :c:func:`Py_FinalizeEx` is called, this function will need to be called "
"again in order to affect subsequent calls to :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/init.rst:343
msgid ""
"Returns ``0`` if successful, a nonzero value on error (e.g. calling after "
"the interpreter has already been initialized)."
msgstr ""

#: ../../c-api/init.rst:356
msgid ""
"This function should be called before :c:func:`Py_Initialize` is called for "
"the first time, if it is called at all.  It tells the interpreter the value "
"of the ``argv[0]`` argument to the :c:func:`main` function of the program "
"(converted to wide characters). This is used by :c:func:`Py_GetPath` and "
"some other functions below to find the Python run-time libraries relative to "
"the interpreter executable.  The default value is ``'python'``.  The "
"argument should point to a zero-terminated wide character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""
"Esta função deve ser chamada antes de :c:func:`Py_Initialize` ser chamada "
"pela primeira vez, se for chamada. Ela informa ao interpretador o valor do "
"argumento ``argv[0]`` para a função :c:func:`main` do programa (convertido "
"para caracteres largos). Isto é usado por :c:func:`Py_GetPath` e algumas "
"outras funções abaixo para encontrar as bibliotecas de tempo de execução do "
"Python relativas ao executável do interpretador. O valor padrão é "
"``'python'``. O argumento deve apontar para uma string de caracteres largos "
"terminada em zero em armazenamento estático cujo conteúdo não mudará durante "
"a execução do programa. Nenhum código no interpretador Python alterará o "
"conteúdo deste armazenamento."

#: ../../c-api/init.rst:367 ../../c-api/init.rst:511 ../../c-api/init.rst:617
#: ../../c-api/init.rst:644 ../../c-api/init.rst:661
msgid ""
"Use :c:func:`Py_DecodeLocale` to decode a bytes string to get a :c:expr:"
"`wchar_*` string."
msgstr ""

#: ../../c-api/init.rst:375
msgid ""
"Return the program name set with :c:func:`Py_SetProgramName`, or the "
"default. The returned string points into static storage; the caller should "
"not modify its value."
msgstr ""

#: ../../c-api/init.rst:379 ../../c-api/init.rst:398 ../../c-api/init.rst:439
#: ../../c-api/init.rst:458 ../../c-api/init.rst:482 ../../c-api/init.rst:671
msgid ""
"This function should not be called before :c:func:`Py_Initialize`, otherwise "
"it returns ``NULL``."
msgstr ""
"Esta função não deve ser chamada antes de :c:func:`Py_Initialize`, caso "
"contrário, ela retornará ``NULL``."

#: ../../c-api/init.rst:382 ../../c-api/init.rst:401 ../../c-api/init.rst:442
#: ../../c-api/init.rst:461 ../../c-api/init.rst:487 ../../c-api/init.rst:674
msgid "It now returns ``NULL`` if called before :c:func:`Py_Initialize`."
msgstr "Agora retorna ``NULL`` se chamado antes de :c:func:`Py_Initialize`."

#: ../../c-api/init.rst:388
msgid ""
"Return the *prefix* for installed platform-independent files. This is "
"derived through a number of complicated rules from the program name set "
"with :c:func:`Py_SetProgramName` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the prefix is "
"``'/usr/local'``. The returned string points into static storage; the caller "
"should not modify its value.  This corresponds to the :makevar:`prefix` "
"variable in the top-level :file:`Makefile` and the :option:`--prefix` "
"argument to the :program:`configure` script at build time.  The value is "
"available to Python code as ``sys.prefix``. It is only useful on Unix.  See "
"also the next function."
msgstr ""

#: ../../c-api/init.rst:407
msgid ""
"Return the *exec-prefix* for installed platform-*dependent* files.  This is "
"derived through a number of complicated rules from the program name set "
"with :c:func:`Py_SetProgramName` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the exec-prefix "
"is ``'/usr/local'``.  The returned string points into static storage; the "
"caller should not modify its value.  This corresponds to the :makevar:"
"`exec_prefix` variable in the top-level :file:`Makefile` and the ``--exec-"
"prefix`` argument to the :program:`configure` script at build  time.  The "
"value is available to Python code as ``sys.exec_prefix``.  It is only useful "
"on Unix."
msgstr ""

#: ../../c-api/init.rst:417
msgid ""
"Background: The exec-prefix differs from the prefix when platform dependent "
"files (such as executables and shared libraries) are installed in a "
"different directory tree.  In a typical installation, platform dependent "
"files may be installed in the :file:`/usr/local/plat` subtree while platform "
"independent may be installed in :file:`/usr/local`."
msgstr ""
"Contexto: O prefixo exec difere do prefixo quando ficheiros dependentes da "
"plataforma (como executáveis e bibliotecas partilhadas) são instalados numa "
"árvore de diretórios diferente. Numa instalação típica, os ficheiros "
"dependentes da plataforma podem ser instalados na subárvore :file:`/usr/"
"local/plat`, enquanto os independentes da plataforma podem ser instalados "
"em :file:`/usr/local`."

#: ../../c-api/init.rst:423
msgid ""
"Generally speaking, a platform is a combination of hardware and software "
"families, e.g.  Sparc machines running the Solaris 2.x operating system are "
"considered the same platform, but Intel machines running Solaris 2.x are "
"another platform, and Intel machines running Linux are yet another "
"platform.  Different major revisions of the same operating system generally "
"also form different platforms.  Non-Unix operating systems are a different "
"story; the installation strategies on those systems are so different that "
"the prefix and exec-prefix are meaningless, and set to the empty string. "
"Note that compiled Python bytecode files are platform independent (but not "
"independent from the Python version by which they were compiled!)."
msgstr ""
"De modo geral, uma plataforma é uma combinação de famílias de hardware e "
"software, por exemplo, máquinas Sparc que executam o sistema operativo "
"Solaris 2.x são consideradas a mesma plataforma, mas máquinas Intel que "
"executam Solaris 2.x são outra plataforma, e máquinas Intel que executam "
"Linux são ainda outra plataforma. Diferentes revisões principais do mesmo "
"sistema operativo geralmente também formam plataformas diferentes. Os "
"sistemas operativos não Unix são uma história diferente; as estratégias de "
"instalação nesses sistemas são tão diferentes que o prefixo e o prefixo de "
"execução não têm significado e são definidos como uma string vazia. Observe "
"que os ficheiros de bytecode Python compilados são independentes da "
"plataforma (mas não independentes da versão Python pela qual foram "
"compilados!)."

#: ../../c-api/init.rst:434
msgid ""
"System administrators will know how to configure the :program:`mount` or :"
"program:`automount` programs to share :file:`/usr/local` between platforms "
"while having :file:`/usr/local/plat` be a different filesystem for each "
"platform."
msgstr ""
"Os administradores de sistema saberão como configurar os programas :program:"
"`mount` ou :program:`automount` para partilhar :file:`/usr/local` entre "
"plataformas, mantendo :file:`/usr/local/plat` como um sistema de ficheiros "
"diferente para cada plataforma."

#: ../../c-api/init.rst:452
msgid ""
"Return the full program name of the Python executable; this is  computed as "
"a side-effect of deriving the default module search path  from the program "
"name (set by :c:func:`Py_SetProgramName` above). The returned string points "
"into static storage; the caller should not modify its value.  The value is "
"available to Python code as ``sys.executable``."
msgstr ""

#: ../../c-api/init.rst:472
msgid ""
"Return the default module search path; this is computed from the program "
"name (set by :c:func:`Py_SetProgramName` above) and some environment "
"variables. The returned string consists of a series of directory names "
"separated by a platform dependent delimiter character.  The delimiter "
"character is ``':'`` on Unix and macOS, ``';'`` on Windows.  The returned "
"string points into static storage; the caller should not modify its value.  "
"The list :data:`sys.path` is initialized with this value on interpreter "
"startup; it can be (and usually is) modified later to change the search path "
"for loading modules."
msgstr ""

#: ../../c-api/init.rst:498
msgid ""
"Set the default module search path.  If this function is called before :c:"
"func:`Py_Initialize`, then :c:func:`Py_GetPath` won't attempt to compute a "
"default search path but uses the one provided instead.  This is useful if "
"Python is embedded by an application that has full knowledge of the location "
"of all modules.  The path components should be separated by the platform "
"dependent delimiter character, which is ``':'`` on Unix and macOS, ``';'`` "
"on Windows."
msgstr ""

#: ../../c-api/init.rst:506
msgid ""
"This also causes :data:`sys.executable` to be set to the program full path "
"(see :c:func:`Py_GetProgramFullPath`) and for :data:`sys.prefix` and :data:"
"`sys.exec_prefix` to be empty.  It is up to the caller to modify these if "
"required after calling :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/init.rst:514
msgid ""
"The path argument is copied internally, so the caller may free it after the "
"call completes."
msgstr ""

#: ../../c-api/init.rst:517
msgid ""
"The program full path is now used for :data:`sys.executable`, instead of the "
"program name."
msgstr ""

#: ../../c-api/init.rst:524
msgid ""
"Return the version of this Python interpreter.  This is a string that looks "
"something like ::"
msgstr ""
"Retorna a versão deste interpretador Python. Esta é uma string semelhante "
"a ::"

#: ../../c-api/init.rst:531
msgid ""
"The first word (up to the first space character) is the current Python "
"version; the first characters are the major and minor version separated by a "
"period.  The returned string points into static storage; the caller should "
"not modify its value.  The value is available to Python code as :data:`sys."
"version`."
msgstr ""
"A primeira palavra (até ao primeiro caractere de espaço) é a versão atual do "
"Python; os primeiros caracteres são a versão principal e secundária "
"separadas por um ponto. A string retornada aponta para o armazenamento "
"estático; o chamador não deve modificar o seu valor. O valor está disponível "
"para o código Python como :data:`sys.version`."

#: ../../c-api/init.rst:541
msgid ""
"Return the platform identifier for the current platform.  On Unix, this is "
"formed from the \"official\" name of the operating system, converted to "
"lower case, followed by the major revision number; e.g., for Solaris 2.x, "
"which is also known as SunOS 5.x, the value is ``'sunos5'``.  On macOS, it "
"is ``'darwin'``.  On Windows, it is ``'win'``.  The returned string points "
"into static storage; the caller should not modify its value.  The value is "
"available to Python code as ``sys.platform``."
msgstr ""
"Retorna o identificador da plataforma atual. No Unix, ele é formado a partir "
"do nome \"oficial\" do sistema operativo, convertido para minúsculas, "
"seguido pelo número da revisão principal; por exemplo, para o Solaris 2.x, "
"também conhecido como SunOS 5.x, o valor é ``'sunos5'``. No macOS, é "
"``'darwin'``. No Windows, é ``'win'``. A string retornada aponta para o "
"armazenamento estático; o chamador não deve modificar o seu valor. O valor "
"está disponível para o código Python como ``sys.platform``."

#: ../../c-api/init.rst:552
msgid ""
"Return the official copyright string for the current Python version, for "
"example"
msgstr ""
"Retorne a string oficial de direitos de autor da versão atual do Python, por "
"exemplo, ."

#: ../../c-api/init.rst:554
msgid "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'``"
msgstr "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'``"

#: ../../c-api/init.rst:558
msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as ``sys.copyright``."
msgstr ""
"A string retornada aponta para o armazenamento estático; o chamador não deve "
"modificar o seu valor. O valor está disponível para o código Python como "
"``sys.copyright``."

#: ../../c-api/init.rst:564
msgid ""
"Return an indication of the compiler used to build the current Python "
"version, in square brackets, for example::"
msgstr ""
"Retorne uma indicação do compilador usado para construir a versão atual do "
"Python, entre parênteses retos, por exemplo:"

#: ../../c-api/init.rst:571 ../../c-api/init.rst:585
msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as part of the variable "
"``sys.version``."
msgstr ""
"A string retornada aponta para o armazenamento estático; o chamador não deve "
"modificar o seu valor. O valor está disponível para o código Python como "
"parte da variável ``sys.version``."

#: ../../c-api/init.rst:578
msgid ""
"Return information about the sequence number and build date and time  of the "
"current Python interpreter instance, for example ::"
msgstr ""
"Retorna informações sobre o número de sequência e a data e hora de "
"compilação da instância atual do interpretador Python, por exemplo:"

#: ../../c-api/init.rst:597
msgid ""
"Set :data:`sys.argv` based on *argc* and *argv*.  These parameters are "
"similar to those passed to the program's :c:func:`main` function with the "
"difference that the first entry should refer to the script file to be "
"executed rather than the executable hosting the Python interpreter.  If "
"there isn't a script that will be run, the first entry in *argv* can be an "
"empty string.  If this function fails to initialize :data:`sys.argv`, a "
"fatal condition is signalled using :c:func:`Py_FatalError`."
msgstr ""
"Defina :data:`sys.argv` com base em *argc* e *argv*. Estes parâmetros são "
"semelhantes aos passados para a função :c:func:`main` do programa, com a "
"diferença de que a primeira entrada deve referir-se ao ficheiro de script a "
"ser executado, em vez do executável que hospeda o interpretador Python. Se "
"não houver um script a ser executado, a primeira entrada em *argv* pode ser "
"uma string vazia. Se esta função falhar ao inicializar :data:`sys.argv`, uma "
"condição fatal é sinalizada usando :c:func:`Py_FatalError`."

#: ../../c-api/init.rst:605
msgid ""
"If *updatepath* is zero, this is all the function does.  If *updatepath* is "
"non-zero, the function also modifies :data:`sys.path` according to the "
"following algorithm:"
msgstr ""
"Se *updatepath* for zero, esta é toda a função que a função executa. Se "
"*updatepath* for diferente de zero, a função também modifica :data:`sys."
"path` de acordo com o seguinte algoritmo:"

#: ../../c-api/init.rst:609
msgid ""
"If the name of an existing script is passed in ``argv[0]``, the absolute "
"path of the directory where the script is located is prepended to :data:`sys."
"path`."
msgstr ""
"Se o nome de um script existente for passado em ``argv[0]``, o caminho "
"absoluto do diretório onde o script está localizado é prefixado a :data:`sys."
"path`."

#: ../../c-api/init.rst:612
msgid ""
"Otherwise (that is, if *argc* is ``0`` or ``argv[0]`` doesn't point to an "
"existing file name), an empty string is prepended to :data:`sys.path`, which "
"is the same as prepending the current working directory (``\".\"``)."
msgstr ""
"Caso contrário (ou seja, se *argc* for ``0`` ou ``argv[0]`` não apontar para "
"um nome de ficheiro existente), uma string vazia é anexada ao :data:`sys."
"path`, o que é o mesmo que anexar o diretório de trabalho atual (``\".\"``)."

#: ../../c-api/init.rst:621
msgid ""
"It is recommended that applications embedding the Python interpreter for "
"purposes other than executing a single script pass ``0`` as *updatepath*, "
"and update :data:`sys.path` themselves if desired. See `CVE-2008-5983 "
"<https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983>`_."
msgstr ""

#: ../../c-api/init.rst:626
msgid ""
"On versions before 3.1.3, you can achieve the same effect by manually "
"popping the first :data:`sys.path` element after having called :c:func:"
"`PySys_SetArgv`, for example using::"
msgstr ""
"Nas versões anteriores à 3.1.3, é possível obter o mesmo efeito removendo "
"manualmente o primeiro elemento :data:`sys.path` após chamar :c:func:"
"`PySys_SetArgv`, por exemplo, usando::"

#: ../../c-api/init.rst:640
msgid ""
"This function works like :c:func:`PySys_SetArgvEx` with *updatepath* set to "
"``1`` unless the :program:`python` interpreter was started with the :option:"
"`-I`."
msgstr ""
"Esta função funciona como :c:func:`PySys_SetArgvEx` com *updatepath* "
"definido como ``1``, a menos que o interpretador :program:`python` tenha "
"sido iniciado com a :option:`-I`."

#: ../../c-api/init.rst:647
msgid "The *updatepath* value depends on :option:`-I`."
msgstr "O valor *updatepath* depende de :option:`-I`."

#: ../../c-api/init.rst:652
msgid ""
"Set the default \"home\" directory, that is, the location of the standard "
"Python libraries.  See :envvar:`PYTHONHOME` for the meaning of the argument "
"string."
msgstr ""
"Defina o diretório \"home\" padrão, ou seja, a localização das bibliotecas "
"padrão do Python. Consulte :envvar:`PYTHONHOME` para saber o significado da "
"string do argumento."

#: ../../c-api/init.rst:656
msgid ""
"The argument should point to a zero-terminated character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""
"O argumento deve apontar para uma cadeia de caracteres terminada em zero na "
"memória estática, cujo conteúdo não será alterado durante a execução do "
"programa. Nenhum código no interpretador Python alterará o conteúdo desta "
"memória."

#: ../../c-api/init.rst:667
msgid ""
"Return the default \"home\", that is, the value set by a previous call to :c:"
"func:`Py_SetPythonHome`, or the value of the :envvar:`PYTHONHOME` "
"environment variable if it is set."
msgstr ""

#: ../../c-api/init.rst:681
msgid "Thread State and the Global Interpreter Lock"
msgstr "Estado da thread e o bloqueio global do interpretador"

#: ../../c-api/init.rst:688
msgid ""
"The Python interpreter is not fully thread-safe.  In order to support multi-"
"threaded Python programs, there's a global lock, called the :term:`global "
"interpreter lock` or :term:`GIL`, that must be held by the current thread "
"before it can safely access Python objects. Without the lock, even the "
"simplest operations could cause problems in a multi-threaded program: for "
"example, when two threads simultaneously increment the reference count of "
"the same object, the reference count could end up being incremented only "
"once instead of twice."
msgstr ""

#: ../../c-api/init.rst:698
msgid ""
"Therefore, the rule exists that only the thread that has acquired the :term:"
"`GIL` may operate on Python objects or call Python/C API functions. In order "
"to emulate concurrency of execution, the interpreter regularly tries to "
"switch threads (see :func:`sys.setswitchinterval`).  The lock is also "
"released around potentially blocking I/O operations like reading or writing "
"a file, so that other Python threads can run in the meantime."
msgstr ""
"Portanto, existe a regra de que apenas o segmento que adquiriu o :term:`GIL` "
"pode operar em objetos Python ou chamar funções da API C/Python. Para emular "
"a concorrência de execução, o interpretador tenta regularmente alternar "
"entre threads (consulte :func:`sys.setswitchinterval`). O bloqueio também é "
"liberado em torno de operações de E/S potencialmente bloqueantes, como "
"leitura ou gravação de um ficheiro, para que outras threads Python possam "
"ser executadas nesse intervalo."

#: ../../c-api/init.rst:709
msgid ""
"The Python interpreter keeps some thread-specific bookkeeping information "
"inside a data structure called :c:type:`PyThreadState`.  There's also one "
"global variable pointing to the current :c:type:`PyThreadState`: it can be "
"retrieved using :c:func:`PyThreadState_Get`."
msgstr ""

#: ../../c-api/init.rst:715
msgid "Releasing the GIL from extension code"
msgstr ""

#: ../../c-api/init.rst:717
msgid ""
"Most extension code manipulating the :term:`GIL` has the following simple "
"structure::"
msgstr ""

#: ../../c-api/init.rst:726
msgid "This is so common that a pair of macros exists to simplify it::"
msgstr "Isso é tão comum que existe um par de macros para simplificá-lo:"

#: ../../c-api/init.rst:736
msgid ""
"The :c:macro:`Py_BEGIN_ALLOW_THREADS` macro opens a new block and declares a "
"hidden local variable; the :c:macro:`Py_END_ALLOW_THREADS` macro closes the "
"block."
msgstr ""
"A macro :c:macro:`Py_BEGIN_ALLOW_THREADS` abre um novo bloco e declara uma "
"variável local oculta; a macro :c:macro:`Py_END_ALLOW_THREADS` fecha o bloco."

#: ../../c-api/init.rst:740
msgid "The block above expands to the following code::"
msgstr "O bloco acima expande-se para o seguinte código:"

#: ../../c-api/init.rst:752
msgid ""
"Here is how these functions work: the global interpreter lock is used to "
"protect the pointer to the current thread state.  When releasing the lock "
"and saving the thread state, the current thread state pointer must be "
"retrieved before the lock is released (since another thread could "
"immediately acquire the lock and store its own thread state in the global "
"variable). Conversely, when acquiring the lock and restoring the thread "
"state, the lock must be acquired before storing the thread state pointer."
msgstr ""

#: ../../c-api/init.rst:761
msgid ""
"Calling system I/O functions is the most common use case for releasing the "
"GIL, but it can also be useful before calling long-running computations "
"which don't need access to Python objects, such as compression or "
"cryptographic functions operating over memory buffers.  For example, the "
"standard :mod:`zlib` and :mod:`hashlib` modules release the GIL when "
"compressing or hashing data."
msgstr ""

#: ../../c-api/init.rst:772
msgid "Non-Python created threads"
msgstr "Threads não criados em Python"

#: ../../c-api/init.rst:774
msgid ""
"When threads are created using the dedicated Python APIs (such as the :mod:"
"`threading` module), a thread state is automatically associated to them and "
"the code showed above is therefore correct.  However, when threads are "
"created from C (for example by a third-party library with its own thread "
"management), they don't hold the GIL, nor is there a thread state structure "
"for them."
msgstr ""

#: ../../c-api/init.rst:781
msgid ""
"If you need to call Python code from these threads (often this will be part "
"of a callback API provided by the aforementioned third-party library), you "
"must first register these threads with the interpreter by creating a thread "
"state data structure, then acquiring the GIL, and finally storing their "
"thread state pointer, before you can start using the Python/C API.  When you "
"are done, you should reset the thread state pointer, release the GIL, and "
"finally free the thread state data structure."
msgstr ""

#: ../../c-api/init.rst:789
msgid ""
"The :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release` functions "
"do all of the above automatically.  The typical idiom for calling into "
"Python from a C thread is::"
msgstr ""
"As funções :c:func:`PyGILState_Ensure` e :c:func:`PyGILState_Release` fazem "
"tudo isso automaticamente. A expressão típica para chamar o Python a partir "
"de um thread C é:"

#: ../../c-api/init.rst:803
msgid ""
"Note that the ``PyGILState_*`` functions assume there is only one global "
"interpreter (created automatically by :c:func:`Py_Initialize`).  Python "
"supports the creation of additional interpreters (using :c:func:"
"`Py_NewInterpreter`), but mixing multiple interpreters and the "
"``PyGILState_*`` API is unsupported."
msgstr ""

#: ../../c-api/init.rst:813
msgid "Cautions about fork()"
msgstr "Precauções sobre fork()"

#: ../../c-api/init.rst:815
msgid ""
"Another important thing to note about threads is their behaviour in the face "
"of the C :c:func:`fork` call. On most systems with :c:func:`fork`, after a "
"process forks only the thread that issued the fork will exist.  This has a "
"concrete impact both on how locks must be handled and on all stored state in "
"CPython's runtime."
msgstr ""
"Outra coisa importante a notar sobre os threads é o seu comportamento face à "
"chamada C :c:func:`fork`. Na maioria dos sistemas com :c:func:`fork`, após "
"um processo se bifurcar, apenas o thread que emitiu a bifurcação continuará "
"a existir. Isto tem um impacto concreto tanto na forma como os bloqueios "
"devem ser tratados como em todos os estados armazenados no tempo de execução "
"do CPython."

#: ../../c-api/init.rst:821
msgid ""
"The fact that only the \"current\" thread remains means any locks held by "
"other threads will never be released. Python solves this for :func:`os.fork` "
"by acquiring the locks it uses internally before the fork, and releasing "
"them afterwards. In addition, it resets any :ref:`lock-objects` in the "
"child. When extending or embedding Python, there is no way to inform Python "
"of additional (non-Python) locks that need to be acquired before or reset "
"after a fork. OS facilities such as :c:func:`pthread_atfork` would need to "
"be used to accomplish the same thing. Additionally, when extending or "
"embedding Python, calling :c:func:`fork` directly rather than through :func:"
"`os.fork` (and returning to or calling into Python) may result in a deadlock "
"by one of Python's internal locks being held by a thread that is defunct "
"after the fork. :c:func:`PyOS_AfterFork_Child` tries to reset the necessary "
"locks, but is not always able to."
msgstr ""

#: ../../c-api/init.rst:836
msgid ""
"The fact that all other threads go away also means that CPython's runtime "
"state there must be cleaned up properly, which :func:`os.fork` does.  This "
"means finalizing all other :c:type:`PyThreadState` objects belonging to the "
"current interpreter and all other :c:type:`PyInterpreterState` objects.  Due "
"to this and the special nature of the :ref:`\"main\" interpreter <sub-"
"interpreter-support>`, :c:func:`fork` should only be called in that "
"interpreter's \"main\" thread, where the CPython global runtime was "
"originally initialized. The only exception is if :c:func:`exec` will be "
"called immediately after."
msgstr ""
"O facto de todos os outros threads desaparecerem também significa que o "
"estado de tempo de execução do CPython deve ser limpo adequadamente, o que é "
"feito pelo :func:`os.fork`. Isso significa finalizar todos os outros "
"objetos :c:type:`PyThreadState` pertencentes ao interpretador atual e todos "
"os outros objetos :c:type:`PyInterpreterState`. Devido a isso e à natureza "
"especial do :ref:`\"intérprete principal <sub-interpreter-support>`, :c:func:"
"`fork` só deve ser chamado na thread \"principal\" desse intérprete, onde o "
"tempo de execução global do CPython foi originalmente inicializado. A única "
"exceção é se :c:func:`exec` for chamado imediatamente depois."

#: ../../c-api/init.rst:849
msgid "High-level API"
msgstr "API de alto nível"

#: ../../c-api/init.rst:851
msgid ""
"These are the most commonly used types and functions when writing C "
"extension code, or when embedding the Python interpreter:"
msgstr ""
"Estes são os tipos e funções mais comumente usados ao escrever código de "
"extensão C ou ao incorporar o interpretador Python:"

#: ../../c-api/init.rst:856
msgid ""
"This data structure represents the state shared by a number of cooperating "
"threads.  Threads belonging to the same interpreter share their module "
"administration and a few other internal items. There are no public members "
"in this structure."
msgstr ""
"Esta estrutura de dados representa o estado partilhado por várias threads "
"cooperantes. As threads pertencentes ao mesmo interpretador partilham a sua "
"administração de módulos e alguns outros itens internos. Não há membros "
"públicos nesta estrutura."

#: ../../c-api/init.rst:861
msgid ""
"Threads belonging to different interpreters initially share nothing, except "
"process state like available memory, open file descriptors and such.  The "
"global interpreter lock is also shared by all threads, regardless of to "
"which interpreter they belong."
msgstr ""
"Os threads pertencentes a diferentes interpretadores inicialmente não "
"partilham nada, exceto o estado do processo, como memória disponível, "
"descritores de ficheiros abertos e similares. O bloqueio global do "
"interpretador também é partilhado por todos os threads, independentemente do "
"interpretador ao qual pertencem."

#: ../../c-api/init.rst:869
msgid ""
"This data structure represents the state of a single thread.  The only "
"public data member is :attr:`interp` (:c:expr:`PyInterpreterState *`), which "
"points to this thread's interpreter state."
msgstr ""

#: ../../c-api/init.rst:882
msgid "Deprecated function which does nothing."
msgstr "Função obsoleta que não faz nada."

#: ../../c-api/init.rst:884
msgid ""
"In Python 3.6 and older, this function created the GIL if it didn't exist."
msgstr ""
"No Python 3.6 e versões anteriores, esta função criava o GIL se ele não "
"existisse."

#: ../../c-api/init.rst:886
msgid "The function now does nothing."
msgstr "A função agora não faz nada."

#: ../../c-api/init.rst:889
msgid ""
"This function is now called by :c:func:`Py_Initialize()`, so you don't have "
"to call it yourself anymore."
msgstr ""
"Esta função agora é chamada por :c:func:`Py_Initialize()`, portanto, não é "
"mais necessário chamá-la manualmente."

#: ../../c-api/init.rst:893
msgid ""
"This function cannot be called before :c:func:`Py_Initialize()` anymore."
msgstr ""
"Esta função não pode mais ser chamada antes de :c:func:`Py_Initialize()`."

#: ../../c-api/init.rst:903
msgid ""
"Returns a non-zero value if :c:func:`PyEval_InitThreads` has been called.  "
"This function can be called without holding the GIL, and therefore can be "
"used to avoid calls to the locking API when running single-threaded."
msgstr ""

#: ../../c-api/init.rst:907
msgid "The :term:`GIL` is now initialized by :c:func:`Py_Initialize()`."
msgstr ""

#: ../../c-api/init.rst:915
msgid ""
"Release the global interpreter lock (if it has been created) and reset the "
"thread state to ``NULL``, returning the previous thread state (which is not "
"``NULL``).  If the lock has been created, the current thread must have "
"acquired it."
msgstr ""

#: ../../c-api/init.rst:923
msgid ""
"Acquire the global interpreter lock (if it has been created) and set the "
"thread state to *tstate*, which must not be ``NULL``.  If the lock has been "
"created, the current thread must not have acquired it, otherwise deadlock "
"ensues."
msgstr ""

#: ../../c-api/init.rst:929 ../../c-api/init.rst:975 ../../c-api/init.rst:1234
#: ../../c-api/init.rst:1272
msgid ""
"Calling this function from a thread when the runtime is finalizing will "
"terminate the thread, even if the thread was not created by Python. You can "
"use :c:func:`_Py_IsFinalizing` or :func:`sys.is_finalizing` to check if the "
"interpreter is in process of being finalized before calling this function to "
"avoid unwanted termination."
msgstr ""

#: ../../c-api/init.rst:937
msgid ""
"Return the current thread state.  The global interpreter lock must be held. "
"When the current thread state is ``NULL``, this issues a fatal error (so "
"that the caller needn't check for ``NULL``)."
msgstr ""

#: ../../c-api/init.rst:944
msgid ""
"Swap the current thread state with the thread state given by the argument "
"*tstate*, which may be ``NULL``.  The global interpreter lock must be held "
"and is not released."
msgstr ""

#: ../../c-api/init.rst:949
msgid ""
"The following functions use thread-local storage, and are not compatible "
"with sub-interpreters:"
msgstr ""
"As seguintes funções utilizam armazenamento local de thread e não são "
"compatíveis com subinterpretadores:"

#: ../../c-api/init.rst:954
msgid ""
"Ensure that the current thread is ready to call the Python C API regardless "
"of the current state of Python, or of the global interpreter lock. This may "
"be called as many times as desired by a thread as long as each call is "
"matched with a call to :c:func:`PyGILState_Release`. In general, other "
"thread-related APIs may be used between :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls as long as the thread state is restored to "
"its previous state before the Release().  For example, normal usage of the :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` and :c:macro:`Py_END_ALLOW_THREADS` macros "
"is acceptable."
msgstr ""

#: ../../c-api/init.rst:964
msgid ""
"The return value is an opaque \"handle\" to the thread state when :c:func:"
"`PyGILState_Ensure` was called, and must be passed to :c:func:"
"`PyGILState_Release` to ensure Python is left in the same state. Even though "
"recursive calls are allowed, these handles *cannot* be shared - each unique "
"call to :c:func:`PyGILState_Ensure` must save the handle for its call to :c:"
"func:`PyGILState_Release`."
msgstr ""

#: ../../c-api/init.rst:971
msgid ""
"When the function returns, the current thread will hold the GIL and be able "
"to call arbitrary Python code.  Failure is a fatal error."
msgstr ""

#: ../../c-api/init.rst:983
msgid ""
"Release any resources previously acquired.  After this call, Python's state "
"will be the same as it was prior to the corresponding :c:func:"
"`PyGILState_Ensure` call (but generally this state will be unknown to the "
"caller, hence the use of the GILState API)."
msgstr ""
"Liberte todos os recursos adquiridos anteriormente. Após esta chamada, o "
"estado do Python será o mesmo que era antes da chamada correspondente :c:"
"func:`PyGILState_Ensure` (mas geralmente este estado será desconhecido para "
"o chamador, daí o uso da API GILState)."

#: ../../c-api/init.rst:988
msgid ""
"Every call to :c:func:`PyGILState_Ensure` must be matched by a call to :c:"
"func:`PyGILState_Release` on the same thread."
msgstr ""
"Cada chamada para :c:func:`PyGILState_Ensure` deve ser acompanhada por uma "
"chamada para :c:func:`PyGILState_Release` na mesma thread."

#: ../../c-api/init.rst:994
msgid ""
"Get the current thread state for this thread.  May return ``NULL`` if no "
"GILState API has been used on the current thread.  Note that the main thread "
"always has such a thread-state, even if no auto-thread-state call has been "
"made on the main thread.  This is mainly a helper/diagnostic function."
msgstr ""

#: ../../c-api/init.rst:1002
msgid ""
"Return ``1`` if the current thread is holding the GIL and ``0`` otherwise. "
"This function can be called from any thread at any time. Only if it has had "
"its Python thread state initialized and currently is holding the GIL will it "
"return ``1``. This is mainly a helper/diagnostic function.  It can be useful "
"for example in callback contexts or memory allocation functions when knowing "
"that the GIL is locked can allow the caller to perform sensitive actions or "
"otherwise behave differently."
msgstr ""

#: ../../c-api/init.rst:1014
msgid ""
"The following macros are normally used without a trailing semicolon; look "
"for example usage in the Python source distribution."
msgstr ""
"As seguintes macros são normalmente utilizadas sem um ponto-e-vírgula no "
"final; veja exemplos de utilização na distribuição de código-fonte Python."

#: ../../c-api/init.rst:1020
msgid ""
"This macro expands to ``{ PyThreadState *_save; _save = PyEval_SaveThread();"
"``. Note that it contains an opening brace; it must be matched with a "
"following :c:macro:`Py_END_ALLOW_THREADS` macro.  See above for further "
"discussion of this macro."
msgstr ""
"Esta macro expande-se para ``{ PyThreadState *_save; _save = "
"PyEval_SaveThread();``. Note que contém uma chave de abertura; deve ser "
"combinada com a macro seguinte :c:macro:`Py_END_ALLOW_THREADS`. Veja acima "
"para mais discussões sobre esta macro."

#: ../../c-api/init.rst:1028
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save); }``. Note that it "
"contains a closing brace; it must be matched with an earlier :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` macro.  See above for further discussion of this "
"macro."
msgstr ""
"Esta macro expande-se para ``PyEval_RestoreThread(_save); }``. Note que "
"contém uma chave de fecho; deve corresponder a uma macro :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` anterior. Veja acima para mais discussões sobre "
"esta macro."

#: ../../c-api/init.rst:1036
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save);``: it is equivalent to :"
"c:macro:`Py_END_ALLOW_THREADS` without the closing brace."
msgstr ""
"Esta macro expande-se para ``PyEval_RestoreThread(_save);``: é equivalente "
"a :c:macro:`Py_END_ALLOW_THREADS` sem a chave de fecho."

#: ../../c-api/init.rst:1042
msgid ""
"This macro expands to ``_save = PyEval_SaveThread();``: it is equivalent to :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` without the opening brace and variable "
"declaration."
msgstr ""
"Esta macro expande-se para ``_save = PyEval_SaveThread();``: é equivalente "
"a :c:macro:`Py_BEGIN_ALLOW_THREADS` sem a chave de abertura e a declaração "
"da variável."

#: ../../c-api/init.rst:1048
msgid "Low-level API"
msgstr "API de baixo nível"

#: ../../c-api/init.rst:1050
msgid ""
"All of the following functions must be called after :c:func:`Py_Initialize`."
msgstr ""
"Todas as funções a seguir devem ser chamadas após :c:func:`Py_Initialize`."

#: ../../c-api/init.rst:1052
msgid ":c:func:`Py_Initialize()` now initializes the :term:`GIL`."
msgstr ""

#: ../../c-api/init.rst:1058
msgid ""
"Create a new interpreter state object.  The global interpreter lock need not "
"be held, but may be held if it is necessary to serialize calls to this "
"function."
msgstr ""

#: ../../c-api/init.rst:1062
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_New`` with no arguments."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``cpython."
"PyInterpreterState_New`` sem argumentos."

#: ../../c-api/init.rst:1067
msgid ""
"Reset all information in an interpreter state object.  The global "
"interpreter lock must be held."
msgstr ""

#: ../../c-api/init.rst:1070
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_Clear`` with no arguments."
msgstr ""
"Levanta um :ref:`evento de auditoria <auditing>` ``cpython."
"PyInterpreterState_Clear`` sem argumentos."

#: ../../c-api/init.rst:1075
msgid ""
"Destroy an interpreter state object.  The global interpreter lock need not "
"be held.  The interpreter state must have been reset with a previous call "
"to :c:func:`PyInterpreterState_Clear`."
msgstr ""

#: ../../c-api/init.rst:1082
msgid ""
"Create a new thread state object belonging to the given interpreter object. "
"The global interpreter lock need not be held, but may be held if it is "
"necessary to serialize calls to this function."
msgstr ""

#: ../../c-api/init.rst:1089
msgid ""
"Reset all information in a thread state object.  The global interpreter lock "
"must be held."
msgstr ""

#: ../../c-api/init.rst:1092
msgid ""
"This function now calls the :c:member:`PyThreadState.on_delete` callback. "
"Previously, that happened in :c:func:`PyThreadState_Delete`."
msgstr ""
"Esta função agora chama a chamada de retorno :c:member:`PyThreadState."
"on_delete`. Anteriormente, isso acontecia em :c:func:`PyThreadState_Delete`."

#: ../../c-api/init.rst:1099
msgid ""
"Destroy a thread state object.  The global interpreter lock need not be "
"held. The thread state must have been reset with a previous call to :c:func:"
"`PyThreadState_Clear`."
msgstr ""

#: ../../c-api/init.rst:1106
msgid ""
"Destroy the current thread state and release the global interpreter lock. "
"Like :c:func:`PyThreadState_Delete`, the global interpreter lock need not be "
"held. The thread state must have been reset with a previous call to :c:func:"
"`PyThreadState_Clear`."
msgstr ""

#: ../../c-api/init.rst:1114
msgid "Get the current frame of the Python thread state *tstate*."
msgstr "Obter o quadro atual do estado da thread Python *tstate*."

#: ../../c-api/init.rst:1116
msgid ""
"Return a :term:`strong reference`. Return ``NULL`` if no frame is currently "
"executing."
msgstr ""
"Retorna uma :term:`referência forte`. Retorna ``NULL`` se nenhum quadro "
"estiver a ser executado no momento."

#: ../../c-api/init.rst:1119
msgid "See also :c:func:`PyEval_GetFrame`."
msgstr "Veja também: :c:func:`PyEval_GetFrame`."

#: ../../c-api/init.rst:1121 ../../c-api/init.rst:1130
#: ../../c-api/init.rst:1139
msgid "*tstate* must not be ``NULL``."
msgstr ""

#: ../../c-api/init.rst:1128
msgid ""
"Get the unique thread state identifier of the Python thread state *tstate*."
msgstr ""

#: ../../c-api/init.rst:1137
msgid "Get the interpreter of the Python thread state *tstate*."
msgstr "Obter o interpretador do estado da thread Python *tstate*."

#: ../../c-api/init.rst:1146
msgid "Get the current interpreter."
msgstr "Obter o intérprete atual."

#: ../../c-api/init.rst:1148
msgid ""
"Issue a fatal error if there no current Python thread state or no current "
"interpreter. It cannot return NULL."
msgstr ""

#: ../../c-api/init.rst:1151 ../../c-api/init.rst:1161
msgid "The caller must hold the GIL."
msgstr ""

#: ../../c-api/init.rst:1158
msgid ""
"Return the interpreter's unique ID.  If there was any error in doing so then "
"``-1`` is returned and an error is set."
msgstr ""
"Retorna o ID exclusivo do intérprete. Se ocorrer algum erro ao fazer isso, "
"``-1`` é retornado e um erro é definido."

#: ../../c-api/init.rst:1168
msgid ""
"Return a dictionary in which interpreter-specific data may be stored. If "
"this function returns ``NULL`` then no exception has been raised and the "
"caller should assume no interpreter-specific dict is available."
msgstr ""
"Retorna um dicionário no qual dados específicos do interpretador podem ser "
"armazenados. Se esta função retornar ``NULL``, então nenhuma exceção foi "
"levantada e o chamador deve assumir que nenhum dicionário específico do "
"interpretador está disponível."

#: ../../c-api/init.rst:1172
msgid ""
"This is not a replacement for :c:func:`PyModule_GetState()`, which "
"extensions should use to store interpreter-specific state information."
msgstr ""
"Isto não substitui :c:func:`PyModule_GetState()`, que as extensões devem "
"usar para armazenar informações de estado específicas do interpretador."

#: ../../c-api/init.rst:1179
msgid "Type of a frame evaluation function."
msgstr "Tipo de função de avaliação de quadro."

#: ../../c-api/init.rst:1181
msgid ""
"The *throwflag* parameter is used by the ``throw()`` method of generators: "
"if non-zero, handle the current exception."
msgstr ""
"O parâmetro *throwflag* é usado pelo método ``throw()`` dos geradores: se "
"diferente de zero, trata a exceção atual."

#: ../../c-api/init.rst:1184
msgid "The function now takes a *tstate* parameter."
msgstr "A função agora aceita um parâmetro *tstate*."

#: ../../c-api/init.rst:1189
msgid "Get the frame evaluation function."
msgstr "Obter a função de avaliação do quadro."

#: ../../c-api/init.rst:1191 ../../c-api/init.rst:1199
msgid "See the :pep:`523` \"Adding a frame evaluation API to CPython\"."
msgstr ""
"Consulte o :pep:`523` «Adicionar uma API de avaliação de quadros ao CPython»."

#: ../../c-api/init.rst:1197
msgid "Set the frame evaluation function."
msgstr "Defina a função de avaliação do quadro."

#: ../../c-api/init.rst:1206
msgid ""
"Return a dictionary in which extensions can store thread-specific state "
"information.  Each extension should use a unique key to use to store state "
"in the dictionary.  It is okay to call this function when no current thread "
"state is available. If this function returns ``NULL``, no exception has been "
"raised and the caller should assume no current thread state is available."
msgstr ""

#: ../../c-api/init.rst:1215
msgid ""
"Asynchronously raise an exception in a thread. The *id* argument is the "
"thread id of the target thread; *exc* is the exception object to be raised. "
"This function does not steal any references to *exc*. To prevent naive "
"misuse, you must write your own C extension to call this.  Must be called "
"with the GIL held. Returns the number of thread states modified; this is "
"normally one, but will be zero if the thread id isn't found.  If *exc* is :"
"const:`NULL`, the pending exception (if any) for the thread is cleared. This "
"raises no exceptions."
msgstr ""

#: ../../c-api/init.rst:1223
msgid ""
"The type of the *id* parameter changed from :c:expr:`long` to :c:expr:"
"`unsigned long`."
msgstr ""
"O tipo do parâmetro *id* mudou de :c:expr:`long` para :c:expr:`unsigned "
"long`."

#: ../../c-api/init.rst:1229
msgid ""
"Acquire the global interpreter lock and set the current thread state to "
"*tstate*, which must not be ``NULL``.  The lock must have been created "
"earlier. If this thread already has the lock, deadlock ensues."
msgstr ""

#: ../../c-api/init.rst:1240 ../../c-api/init.rst:1278
msgid ""
"Updated to be consistent with :c:func:`PyEval_RestoreThread`, :c:func:"
"`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`, and terminate the "
"current thread if called while the interpreter is finalizing."
msgstr ""
"Atualizado para ser consistente com :c:func:`PyEval_RestoreThread`, :c:func:"
"`Py_END_ALLOW_THREADS` e :c:func:`PyGILState_Ensure`, e encerrar o thread "
"atual se chamado enquanto o interpretador estiver a finalizar."

#: ../../c-api/init.rst:1245
msgid ""
":c:func:`PyEval_RestoreThread` is a higher-level function which is always "
"available (even when threads have not been initialized)."
msgstr ""
":c:func:`PyEval_RestoreThread` é uma função de nível superior que está "
"sempre disponível (mesmo quando os threads não foram inicializados)."

#: ../../c-api/init.rst:1251
msgid ""
"Reset the current thread state to ``NULL`` and release the global "
"interpreter lock.  The lock must have been created earlier and must be held "
"by the current thread.  The *tstate* argument, which must not be ``NULL``, "
"is only used to check that it represents the current thread state --- if it "
"isn't, a fatal error is reported."
msgstr ""

#: ../../c-api/init.rst:1257
msgid ""
":c:func:`PyEval_SaveThread` is a higher-level function which is always "
"available (even when threads have not been initialized)."
msgstr ""
":c:func:`PyEval_SaveThread` é uma função de nível superior que está sempre "
"disponível (mesmo quando os threads não foram inicializados)."

#: ../../c-api/init.rst:1263
msgid ""
"Acquire the global interpreter lock.  The lock must have been created "
"earlier. If this thread already has the lock, a deadlock ensues."
msgstr ""

#: ../../c-api/init.rst:1266
msgid ""
"This function does not update the current thread state.  Please use :c:func:"
"`PyEval_RestoreThread` or :c:func:`PyEval_AcquireThread` instead."
msgstr ""

#: ../../c-api/init.rst:1286
msgid ""
"Release the global interpreter lock.  The lock must have been created "
"earlier."
msgstr ""

#: ../../c-api/init.rst:1288
msgid ""
"This function does not update the current thread state.  Please use :c:func:"
"`PyEval_SaveThread` or :c:func:`PyEval_ReleaseThread` instead."
msgstr ""

#: ../../c-api/init.rst:1297
msgid "Sub-interpreter support"
msgstr "Suporte ao subintérprete"

#: ../../c-api/init.rst:1299
msgid ""
"While in most uses, you will only embed a single Python interpreter, there "
"are cases where you need to create several independent interpreters in the "
"same process and perhaps even in the same thread. Sub-interpreters allow you "
"to do that."
msgstr ""
"Embora na maioria dos casos você incorpore apenas um único interpretador "
"Python, há situações em que é necessário criar vários interpretadores "
"independentes no mesmo processo e talvez até mesmo no mesmo thread. Os "
"subinterpretadores permitem que você faça isso."

#: ../../c-api/init.rst:1304
msgid ""
"The \"main\" interpreter is the first one created when the runtime "
"initializes. It is usually the only Python interpreter in a process.  Unlike "
"sub-interpreters, the main interpreter has unique process-global "
"responsibilities like signal handling.  It is also responsible for execution "
"during runtime initialization and is usually the active interpreter during "
"runtime finalization.  The :c:func:`PyInterpreterState_Main` function "
"returns a pointer to its state."
msgstr ""
"O interpretador \"principal\" é o primeiro criado quando o tempo de execução "
"é inicializado. Geralmente, é o único interpretador Python em um processo. "
"Ao contrário dos subinterpretadores, o interpretador principal tem "
"responsabilidades globais exclusivas do processo, como o tratamento de "
"sinais. Ele também é responsável pela execução durante a inicialização do "
"tempo de execução e geralmente é o interpretador ativo durante a finalização "
"do tempo de execução. A função :c:func:`PyInterpreterState_Main` retorna um "
"ponteiro para o seu estado."

#: ../../c-api/init.rst:1311
msgid ""
"You can switch between sub-interpreters using the :c:func:"
"`PyThreadState_Swap` function. You can create and destroy them using the "
"following functions:"
msgstr ""
"Você pode alternar entre subinterpretadores usando a função :c:func:"
"`PyThreadState_Swap`. Você pode criá-los e destruí-los usando as seguintes "
"funções:"

#: ../../c-api/init.rst:1325
msgid ""
"Create a new sub-interpreter.  This is an (almost) totally separate "
"environment for the execution of Python code.  In particular, the new "
"interpreter has separate, independent versions of all imported modules, "
"including the fundamental modules :mod:`builtins`, :mod:`__main__` and :mod:"
"`sys`.  The table of loaded modules (``sys.modules``) and the module search "
"path (``sys.path``) are also separate.  The new environment has no ``sys."
"argv`` variable.  It has new standard I/O stream file objects ``sys.stdin``, "
"``sys.stdout`` and ``sys.stderr`` (however these refer to the same "
"underlying file descriptors)."
msgstr ""
"Cria um novo subinterpretador. Este é um ambiente (quase) totalmente "
"separado para a execução de código Python. Em particular, o novo "
"interpretador tem versões separadas e independentes de todos os módulos "
"importados, incluindo os módulos fundamentais :mod:`builtins`, :mod:"
"`__main__` e :mod:`sys`. A tabela de módulos carregados (``sys.modules``) e "
"o caminho de pesquisa do módulo (``sys.path``) também são separados. O novo "
"ambiente não tem a variável ``sys.argv``. Tem novos objetos de ficheiro de "
"fluxo de E/S padrão ``sys.stdin``, ``sys.stdout`` e ``sys.stderr`` (no "
"entanto, estes referem-se aos mesmos descritores de ficheiro subjacentes)."

#: ../../c-api/init.rst:1335
msgid ""
"The return value points to the first thread state created in the new sub-"
"interpreter.  This thread state is made in the current thread state. Note "
"that no actual thread is created; see the discussion of thread states "
"below.  If creation of the new interpreter is unsuccessful, ``NULL`` is "
"returned; no exception is set since the exception state is stored in the "
"current thread state and there may not be a current thread state.  (Like all "
"other Python/C API functions, the global interpreter lock must be held "
"before calling this function and is still held when it returns; however, "
"unlike most other Python/C API functions, there needn't be a current thread "
"state on entry.)"
msgstr ""

#: ../../c-api/init.rst:1350
msgid "Extension modules are shared between (sub-)interpreters as follows:"
msgstr ""
"Os módulos de extensão são partilhados entre (sub)intérpretes da seguinte "
"forma:"

#: ../../c-api/init.rst:1352
msgid ""
"For modules using multi-phase initialization, e.g. :c:func:"
"`PyModule_FromDefAndSpec`, a separate module object is created and "
"initialized for each interpreter. Only C-level static and global variables "
"are shared between these module objects."
msgstr ""
"Para módulos que utilizam inicialização multifásica, por exemplo: :c:func:"
"`PyModule_FromDefAndSpec`, um objeto de módulo separado é criado e "
"inicializado para cada interpretador. Apenas variáveis estáticas e globais "
"de nível C são partilhadas entre esses objetos de módulo."

#: ../../c-api/init.rst:1358
msgid ""
"For modules using single-phase initialization, e.g. :c:func:"
"`PyModule_Create`, the first time a particular extension is imported, it is "
"initialized normally, and a (shallow) copy of its module's dictionary is "
"squirreled away. When the same extension is imported by another "
"(sub-)interpreter, a new module is initialized and filled with the contents "
"of this copy; the extension's ``init`` function is not called. Objects in "
"the module's dictionary thus end up shared across (sub-)interpreters, which "
"might cause unwanted behavior (see `Bugs and caveats`_ below)."
msgstr ""
"Para módulos que utilizam inicialização monofásica, por exemplo: :c:func:"
"`PyModule_Create`, na primeira vez que uma extensão específica é importada, "
"ela é inicializada normalmente e uma cópia (superficial) do dicionário do "
"seu módulo é guardada. Quando a mesma extensão é importada por outro "
"(sub)interpretador, um novo módulo é inicializado e preenchido com o "
"conteúdo dessa cópia; a função ``init`` da extensão não é chamada. Os "
"objetos no dicionário do módulo acabam sendo compartilhados entre "
"(sub)interpretadores, o que pode causar um comportamento indesejado "
"(consulte `Bugs e advertências`_ abaixo)."

#: ../../c-api/init.rst:1369
msgid ""
"Note that this is different from what happens when an extension is imported "
"after the interpreter has been completely re-initialized by calling :c:func:"
"`Py_FinalizeEx` and :c:func:`Py_Initialize`; in that case, the extension's "
"``initmodule`` function *is* called again. As with multi-phase "
"initialization, this means that only C-level static and global variables are "
"shared between these modules."
msgstr ""
"Note que isto é diferente do que acontece quando uma extensão é importada "
"após o interpretador ter sido completamente reinicializado chamando :c:func:"
"`Py_FinalizeEx` e :c:func:`Py_Initialize`; nesse caso, a função "
"``initmodule`` da extensão *é* chamada novamente. Tal como na inicialização "
"multifásica, isto significa que apenas as variáveis estáticas e globais ao "
"nível C são partilhadas entre estes módulos."

#: ../../c-api/init.rst:1383
msgid ""
"Destroy the (sub-)interpreter represented by the given thread state. The "
"given thread state must be the current thread state.  See the discussion of "
"thread states below.  When the call returns, the current thread state is "
"``NULL``.  All thread states associated with this interpreter are "
"destroyed.  (The global interpreter lock must be held before calling this "
"function and is still held when it returns.)  :c:func:`Py_FinalizeEx` will "
"destroy all sub-interpreters that haven't been explicitly destroyed at that "
"point."
msgstr ""

#: ../../c-api/init.rst:1393
msgid "Bugs and caveats"
msgstr "Erros e advertências"

#: ../../c-api/init.rst:1395
msgid ""
"Because sub-interpreters (and the main interpreter) are part of the same "
"process, the insulation between them isn't perfect --- for example, using "
"low-level file operations like  :func:`os.close` they can (accidentally or "
"maliciously) affect each other's open files.  Because of the way extensions "
"are shared between (sub-)interpreters, some extensions may not work "
"properly; this is especially likely when using single-phase initialization "
"or (static) global variables. It is possible to insert objects created in "
"one sub-interpreter into a namespace of another (sub-)interpreter; this "
"should be avoided if possible."
msgstr ""
"Como os subinterpretadores (e o interpretador principal) fazem parte do "
"mesmo processo, o isolamento entre eles não é perfeito — por exemplo, usando "
"operações de ficheiro de baixo nível como :func:`os.close`, eles podem "
"(acidentalmente ou maliciosamente) afetar os ficheiros abertos uns dos "
"outros. Devido à forma como as extensões são partilhadas entre "
"(sub)intérpretes, algumas extensões podem não funcionar corretamente; isto é "
"especialmente provável ao usar inicialização monofásica ou variáveis globais "
"(estáticas). É possível inserir objetos criados num subintérprete num "
"namespace de outro (sub)intérprete; isto deve ser evitado, se possível."

#: ../../c-api/init.rst:1405
msgid ""
"Special care should be taken to avoid sharing user-defined functions, "
"methods, instances or classes between sub-interpreters, since import "
"operations executed by such objects may affect the wrong (sub-)interpreter's "
"dictionary of loaded modules. It is equally important to avoid sharing "
"objects from which the above are reachable."
msgstr ""
"Deve-se tomar cuidado especial para evitar o compartilhamento de funções, "
"métodos, instâncias ou classes definidos pelo utilizador entre "
"subinterpretadores, uma vez que as operações de importação executadas por "
"tais objetos podem afetar o dicionário de módulos carregados do "
"(sub)interpretador errado. É igualmente importante evitar o compartilhamento "
"de objetos a partir dos quais os itens acima são acessíveis."

#: ../../c-api/init.rst:1411
msgid ""
"Also note that combining this functionality with ``PyGILState_*`` APIs is "
"delicate, because these APIs assume a bijection between Python thread states "
"and OS-level threads, an assumption broken by the presence of sub-"
"interpreters. It is highly recommended that you don't switch sub-"
"interpreters between a pair of matching :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls. Furthermore, extensions (such as :mod:"
"`ctypes`) using these APIs to allow calling of Python code from non-Python "
"created threads will probably be broken when using sub-interpreters."
msgstr ""
"Observe também que combinar essa funcionalidade com as APIs ``PyGILState_*`` "
"é delicado, porque essas APIs assumem uma bijeção entre os estados de thread "
"do Python e os threads no nível do sistema operativo, uma suposição quebrada "
"pela presença de subinterpretadores. É altamente recomendável que você não "
"alterne subinterpretadores entre um par de chamadas correspondentes :c:func:"
"`PyGILState_Ensure` e :c:func:`PyGILState_Release`. Além disso, extensões "
"(como :mod:`ctypes`) que usam essas APIs para permitir a chamada de código "
"Python a partir de threads não criadas em Python provavelmente serão "
"interrompidas ao usar subinterpretadores."

#: ../../c-api/init.rst:1422
msgid "Asynchronous Notifications"
msgstr "Notificações assíncronas"

#: ../../c-api/init.rst:1424
msgid ""
"A mechanism is provided to make asynchronous notifications to the main "
"interpreter thread.  These notifications take the form of a function pointer "
"and a void pointer argument."
msgstr ""
"É fornecido um mecanismo para fazer notificações assíncronas à thread "
"principal do interpretador. Essas notificações assumem a forma de um "
"ponteiro de função e um argumento de ponteiro nulo."

#: ../../c-api/init.rst:1433
msgid ""
"Schedule a function to be called from the main interpreter thread.  On "
"success, ``0`` is returned and *func* is queued for being called in the main "
"thread.  On failure, ``-1`` is returned without setting any exception."
msgstr ""
"Agende uma função a ser chamada a partir do thread principal do "
"interpretador. Em caso de sucesso, ``0`` é retornado e *func* é colocado na "
"fila para ser chamado no thread principal. Em caso de falha, ``-1`` é "
"retornado sem definir nenhuma exceção."

#: ../../c-api/init.rst:1437
msgid ""
"When successfully queued, *func* will be *eventually* called from the main "
"interpreter thread with the argument *arg*.  It will be called "
"asynchronously with respect to normally running Python code, but with both "
"these conditions met:"
msgstr ""
"Quando colocada na fila com sucesso, *func* será *eventualmente* chamada a "
"partir do thread principal do interpretador com o argumento *arg*. Ela será "
"chamada de forma assíncrona em relação ao código Python em execução normal, "
"mas com ambas as condições atendidas:"

#: ../../c-api/init.rst:1442
msgid "on a :term:`bytecode` boundary;"
msgstr "em um :term:`bytecode` boundary;"

#: ../../c-api/init.rst:1443
msgid ""
"with the main thread holding the :term:`global interpreter lock` (*func* can "
"therefore use the full C API)."
msgstr ""

#: ../../c-api/init.rst:1446
msgid ""
"*func* must return ``0`` on success, or ``-1`` on failure with an exception "
"set.  *func* won't be interrupted to perform another asynchronous "
"notification recursively, but it can still be interrupted to switch threads "
"if the global interpreter lock is released."
msgstr ""

#: ../../c-api/init.rst:1451
msgid ""
"This function doesn't need a current thread state to run, and it doesn't "
"need the global interpreter lock."
msgstr ""

#: ../../c-api/init.rst:1454
msgid ""
"To call this function in a subinterpreter, the caller must hold the GIL. "
"Otherwise, the function *func* can be scheduled to be called from the wrong "
"interpreter."
msgstr ""

#: ../../c-api/init.rst:1459
msgid ""
"This is a low-level function, only useful for very special cases. There is "
"no guarantee that *func* will be called as quick as possible.  If the main "
"thread is busy executing a system call, *func* won't be called before the "
"system call returns.  This function is generally **not** suitable for "
"calling Python code from arbitrary C threads.  Instead, use the :ref:"
"`PyGILState API<gilstate>`."
msgstr ""
"Esta é uma função de baixo nível, útil apenas em casos muito especiais. Não "
"há garantia de que *func* será chamada o mais rápido possível. Se o thread "
"principal estiver ocupado a executar uma chamada do sistema, *func* não será "
"chamada antes que a chamada do sistema retorne. Esta função geralmente "
"**não** é adequada para chamar código Python a partir de threads C "
"arbitrários. Em vez disso, use a :ref:`PyGILState API<gilstate>`."

#: ../../c-api/init.rst:1466
msgid ""
"If this function is called in a subinterpreter, the function *func* is now "
"scheduled to be called from the subinterpreter, rather than being called "
"from the main interpreter. Each subinterpreter now has its own list of "
"scheduled calls."
msgstr ""
"Se esta função for chamada num subinterpretador, a função *func* será agora "
"agendada para ser chamada a partir do subinterpretador, em vez de ser "
"chamada a partir do interpretador principal. Cada subinterpretador tem agora "
"a sua própria lista de chamadas agendadas."

#: ../../c-api/init.rst:1477
msgid "Profiling and Tracing"
msgstr "Perfilagem e rastreamento"

#: ../../c-api/init.rst:1482
msgid ""
"The Python interpreter provides some low-level support for attaching "
"profiling and execution tracing facilities.  These are used for profiling, "
"debugging, and coverage analysis tools."
msgstr ""
"O interpretador Python fornece algum suporte de baixo nível para anexar "
"recursos de perfilagem e rastreamento de execução. Estes são usados para "
"ferramentas de perfilagem, depuração e análise de cobertura."

#: ../../c-api/init.rst:1486
msgid ""
"This C interface allows the profiling or tracing code to avoid the overhead "
"of calling through Python-level callable objects, making a direct C function "
"call instead.  The essential attributes of the facility have not changed; "
"the interface allows trace functions to be installed per-thread, and the "
"basic events reported to the trace function are the same as had been "
"reported to the Python-level trace functions in previous versions."
msgstr ""
"Esta interface C permite que o código de perfilagem ou rastreamento evite a "
"sobrecarga de chamadas através de objetos chamáveis no nível Python, fazendo "
"uma chamada direta à função C. Os atributos essenciais do recurso não "
"mudaram; a interface permite que funções de rastreamento sejam instaladas "
"por thread, e os eventos básicos relatados à função de rastreamento são os "
"mesmos que foram relatados às funções de rastreamento no nível Python nas "
"versões anteriores."

#: ../../c-api/init.rst:1496
msgid ""
"The type of the trace function registered using :c:func:`PyEval_SetProfile` "
"and :c:func:`PyEval_SetTrace`. The first parameter is the object passed to "
"the registration function as *obj*, *frame* is the frame object to which the "
"event pertains, *what* is one of the constants :const:`PyTrace_CALL`, :const:"
"`PyTrace_EXCEPTION`, :const:`PyTrace_LINE`, :const:`PyTrace_RETURN`, :const:"
"`PyTrace_C_CALL`, :const:`PyTrace_C_EXCEPTION`, :const:`PyTrace_C_RETURN`, "
"or :const:`PyTrace_OPCODE`, and *arg* depends on the value of *what*:"
msgstr ""

#: ../../c-api/init.rst:1505
msgid "Value of *what*"
msgstr "Valor de *what*"

#: ../../c-api/init.rst:1505
msgid "Meaning of *arg*"
msgstr "Significado de *arg*"

#: ../../c-api/init.rst:1507
msgid ":const:`PyTrace_CALL`"
msgstr ""

#: ../../c-api/init.rst:1507 ../../c-api/init.rst:1512
#: ../../c-api/init.rst:1523
msgid "Always :c:data:`Py_None`."
msgstr "Sempre :c:data:`Py_None`."

#: ../../c-api/init.rst:1509
msgid ":const:`PyTrace_EXCEPTION`"
msgstr ""

#: ../../c-api/init.rst:1509
msgid "Exception information as returned by :func:`sys.exc_info`."
msgstr "Informações de exceção retornadas por :func:`sys.exc_info`."

#: ../../c-api/init.rst:1512
msgid ":const:`PyTrace_LINE`"
msgstr ""

#: ../../c-api/init.rst:1514
msgid ":const:`PyTrace_RETURN`"
msgstr ""

#: ../../c-api/init.rst:1514
msgid ""
"Value being returned to the caller, or ``NULL`` if caused by an exception."
msgstr "Valor devolvido ao chamador ou ``NULL`` se causado por uma exceção."

#: ../../c-api/init.rst:1517
msgid ":const:`PyTrace_C_CALL`"
msgstr ""

#: ../../c-api/init.rst:1517 ../../c-api/init.rst:1519
#: ../../c-api/init.rst:1521
msgid "Function object being called."
msgstr "Objeto de função a ser chamado."

#: ../../c-api/init.rst:1519
msgid ":const:`PyTrace_C_EXCEPTION`"
msgstr ""

#: ../../c-api/init.rst:1521
msgid ":const:`PyTrace_C_RETURN`"
msgstr ""

#: ../../c-api/init.rst:1523
msgid ":const:`PyTrace_OPCODE`"
msgstr ""

#: ../../c-api/init.rst:1528
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"a new call to a function or method is being reported, or a new entry into a "
"generator. Note that the creation of the iterator for a generator function "
"is not reported as there is no control transfer to the Python bytecode in "
"the corresponding frame."
msgstr ""
"O valor do parâmetro *what* para uma função :c:type:`Py_tracefunc` quando "
"uma nova chamada para uma função ou método está a ser reportada, ou uma nova "
"entrada num gerador. Note que a criação do iterador para uma função geradora "
"não é reportada, pois não há transferência de controlo para o bytecode "
"Python no quadro correspondente."

#: ../../c-api/init.rst:1537
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"an exception has been raised.  The callback function is called with this "
"value for *what* when after any bytecode is processed after which the "
"exception becomes set within the frame being executed.  The effect of this "
"is that as exception propagation causes the Python stack to unwind, the "
"callback is called upon return to each frame as the exception propagates.  "
"Only trace functions receives these events; they are not needed by the "
"profiler."
msgstr ""
"O valor do parâmetro *what* para uma função :c:type:`Py_tracefunc` quando "
"uma exceção é levantada. A função de retorno de chamada é chamada com este "
"valor para *what* quando, após qualquer bytecode ser processado, a exceção é "
"definida dentro do quadro que está a ser executado. O efeito disso é que, à "
"medida que a propagação da exceção faz com que a pilha Python se desenrole, "
"a função de retorno de chamada é chamada ao retornar a cada quadro à medida "
"que a exceção se propaga. Apenas as funções de rastreamento recebem esses "
"eventos; eles não são necessários para o profiler."

#: ../../c-api/init.rst:1548
msgid ""
"The value passed as the *what* parameter to a :c:type:`Py_tracefunc` "
"function (but not a profiling function) when a line-number event is being "
"reported. It may be disabled for a frame by setting :attr:`f_trace_lines` to "
"*0* on that frame."
msgstr ""

#: ../../c-api/init.rst:1555
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a call is about to return."
msgstr ""
"O valor do parâmetro *what* para as funções :c:type:`Py_tracefunc` quando "
"uma chamada está prestes a retornar."

#: ../../c-api/init.rst:1561
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function is about to be called."
msgstr ""
"O valor para o parâmetro *what* para funções :c:type:`Py_tracefunc` quando "
"uma função C está prestes a ser chamada."

#: ../../c-api/init.rst:1567
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has raised an exception."
msgstr ""
"O valor do parâmetro *what* para as funções :c:type:`Py_tracefunc` quando "
"uma função C levantou uma exceção."

#: ../../c-api/init.rst:1573
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has returned."
msgstr ""
"O valor do parâmetro *what* para as funções :c:type:`Py_tracefunc` quando "
"uma função C é retornada."

#: ../../c-api/init.rst:1579
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions (but "
"not profiling functions) when a new opcode is about to be executed.  This "
"event is not emitted by default: it must be explicitly requested by setting :"
"attr:`f_trace_opcodes` to *1* on the frame."
msgstr ""

#: ../../c-api/init.rst:1587
msgid ""
"Set the profiler function to *func*.  The *obj* parameter is passed to the "
"function as its first parameter, and may be any Python object, or ``NULL``.  "
"If the profile function needs to maintain state, using a different value for "
"*obj* for each thread provides a convenient and thread-safe place to store "
"it.  The profile function is called for all monitored events except :const:"
"`PyTrace_LINE` :const:`PyTrace_OPCODE` and :const:`PyTrace_EXCEPTION`."
msgstr ""

#: ../../c-api/init.rst:1594 ../../c-api/init.rst:1606
msgid "The caller must hold the :term:`GIL`."
msgstr ""

#: ../../c-api/init.rst:1599
msgid ""
"Set the tracing function to *func*.  This is similar to :c:func:"
"`PyEval_SetProfile`, except the tracing function does receive line-number "
"events and per-opcode events, but does not receive any event related to C "
"function objects being called.  Any trace function registered using :c:func:"
"`PyEval_SetTrace` will not receive :const:`PyTrace_C_CALL`, :const:"
"`PyTrace_C_EXCEPTION` or :const:`PyTrace_C_RETURN` as a value for the *what* "
"parameter."
msgstr ""

#: ../../c-api/init.rst:1612
msgid "Advanced Debugger Support"
msgstr "Suporte avançado ao depurador"

#: ../../c-api/init.rst:1617
msgid ""
"These functions are only intended to be used by advanced debugging tools."
msgstr ""
"Estas funções destinam-se apenas a ser utilizadas por ferramentas de "
"depuração avançadas."

#: ../../c-api/init.rst:1622
msgid ""
"Return the interpreter state object at the head of the list of all such "
"objects."
msgstr ""
"Retorna o objeto do estado do interpretador no início da lista de todos "
"esses objetos."

#: ../../c-api/init.rst:1627
msgid "Return the main interpreter state object."
msgstr "Retorna o objeto do estado do interpretador principal."

#: ../../c-api/init.rst:1632
msgid ""
"Return the next interpreter state object after *interp* from the list of all "
"such objects."
msgstr ""
"Retorna o próximo objeto de estado do interpretador após *interp* da lista "
"de todos esses objetos."

#: ../../c-api/init.rst:1638
msgid ""
"Return the pointer to the first :c:type:`PyThreadState` object in the list "
"of threads associated with the interpreter *interp*."
msgstr ""
"Retorna o ponteiro para o primeiro objeto :c:type:`PyThreadState` na lista "
"de threads associadas ao interpretador *interp*."

#: ../../c-api/init.rst:1644
msgid ""
"Return the next thread state object after *tstate* from the list of all such "
"objects belonging to the same :c:type:`PyInterpreterState` object."
msgstr ""
"Retorna o próximo objeto de estado da thread após *tstate* da lista de todos "
"os objetos pertencentes ao mesmo objeto :c:type:`PyInterpreterState`."

#: ../../c-api/init.rst:1651
msgid "Thread Local Storage Support"
msgstr "Suporte para armazenamento local de threads"

#: ../../c-api/init.rst:1655
msgid ""
"The Python interpreter provides low-level support for thread-local storage "
"(TLS) which wraps the underlying native TLS implementation to support the "
"Python-level thread local storage API (:class:`threading.local`).  The "
"CPython C level APIs are similar to those offered by pthreads and Windows: "
"use a thread key and functions to associate a :c:expr:`void*` value per "
"thread."
msgstr ""
"O interpretador Python fornece suporte de baixo nível para armazenamento "
"local de threads (TLS), que envolve a implementação TLS nativa subjacente "
"para suportar a API de armazenamento local de threads no nível Python (:"
"class:`threading.local`). As APIs no nível C do CPython são semelhantes às "
"oferecidas pelo pthreads e pelo Windows: use uma chave de thread e funções "
"para associar um valor :c:expr:`void*` por thread."

#: ../../c-api/init.rst:1662
msgid ""
"The GIL does *not* need to be held when calling these functions; they supply "
"their own locking."
msgstr ""

#: ../../c-api/init.rst:1665
msgid ""
"Note that :file:`Python.h` does not include the declaration of the TLS APIs, "
"you need to include :file:`pythread.h` to use thread-local storage."
msgstr ""
"Observe que :file:`Python.h` não inclui a declaração das APIs TLS. É "
"necessário incluir :file:`pythread.h` para usar o armazenamento local de "
"threads."

#: ../../c-api/init.rst:1669
msgid ""
"None of these API functions handle memory management on behalf of the :c:"
"expr:`void*` values.  You need to allocate and deallocate them yourself. If "
"the :c:expr:`void*` values happen to be :c:expr:`PyObject*`, these functions "
"don't do refcount operations on them either."
msgstr ""
"Nenhuma destas funções API lida com a gestão de memória em nome dos valores :"
"c:expr:`void*`. Você precisa alocá-los e desalocá-los por conta própria. Se "
"os valores :c:expr:`void*` forem :c:expr:`PyObject*`, estas funções também "
"não realizam operações de contagem de referências neles."

#: ../../c-api/init.rst:1677
msgid "Thread Specific Storage (TSS) API"
msgstr "API de armazenamento específico da thread (TSS)"

#: ../../c-api/init.rst:1679
msgid ""
"TSS API is introduced to supersede the use of the existing TLS API within "
"the CPython interpreter.  This API uses a new type :c:type:`Py_tss_t` "
"instead of :c:expr:`int` to represent thread keys."
msgstr ""
"A API TSS foi introduzida para substituir o uso da API TLS existente no "
"interpretador CPython. Esta API usa um novo tipo :c:type:`Py_tss_t` em vez "
"de :c:expr:`int` para representar chaves de thread."

#: ../../c-api/init.rst:1685
msgid "\"A New C-API for Thread-Local Storage in CPython\" (:pep:`539`)"
msgstr ""
"\"Uma nova C-API para armazenamento local de threads no CPython\" (:pep:"
"`539`)"

#: ../../c-api/init.rst:1690
msgid ""
"This data structure represents the state of a thread key, the definition of "
"which may depend on the underlying TLS implementation, and it has an "
"internal field representing the key's initialization state.  There are no "
"public members in this structure."
msgstr ""
"Esta estrutura de dados representa o estado de uma chave de thread, cuja "
"definição pode depender da implementação TLS subjacente, e possui um campo "
"interno que representa o estado de inicialização da chave. Não há membros "
"públicos nesta estrutura."

#: ../../c-api/init.rst:1695
msgid ""
"When :ref:`Py_LIMITED_API <stable>` is not defined, static allocation of "
"this type by :c:macro:`Py_tss_NEEDS_INIT` is allowed."
msgstr ""
"Quando :ref:`Py_LIMITED_API <stable>` não está definido, a alocação estática "
"deste tipo por :c:macro:`Py_tss_NEEDS_INIT` é permitida."

#: ../../c-api/init.rst:1701
msgid ""
"This macro expands to the initializer for :c:type:`Py_tss_t` variables. Note "
"that this macro won't be defined with :ref:`Py_LIMITED_API <stable>`."
msgstr ""
"Esta macro expande-se para o inicializador das variáveis :c:type:`Py_tss_t`. "
"Note que esta macro não será definida com :ref:`Py_LIMITED_API <stable>`."

#: ../../c-api/init.rst:1706
msgid "Dynamic Allocation"
msgstr "Alocação dinâmica"

#: ../../c-api/init.rst:1708
msgid ""
"Dynamic allocation of the :c:type:`Py_tss_t`, required in extension modules "
"built with :ref:`Py_LIMITED_API <stable>`, where static allocation of this "
"type is not possible due to its implementation being opaque at build time."
msgstr ""
"Alocação dinâmica do :c:type:`Py_tss_t`, necessário em módulos de extensão "
"compilados com :ref:`Py_LIMITED_API <stable>`, onde a alocação estática "
"deste tipo não é possível devido à sua implementação ser opaca no momento da "
"compilação."

#: ../../c-api/init.rst:1715
msgid ""
"Return a value which is the same state as a value initialized with :c:macro:"
"`Py_tss_NEEDS_INIT`, or ``NULL`` in the case of dynamic allocation failure."
msgstr ""
"Retorna um valor que é o mesmo estado de um valor inicializado com :c:macro:"
"`Py_tss_NEEDS_INIT`, ou ``NULL`` no caso de falha na alocação dinâmica."

#: ../../c-api/init.rst:1722
msgid ""
"Free the given *key* allocated by :c:func:`PyThread_tss_alloc`, after first "
"calling :c:func:`PyThread_tss_delete` to ensure any associated thread locals "
"have been unassigned. This is a no-op if the *key* argument is ``NULL``."
msgstr ""
"Libera a *chave* atribuída por :c:func:`PyThread_tss_alloc`, após primeiro "
"chamar :c:func:`PyThread_tss_delete` para garantir que quaisquer variáveis "
"locais associadas à thread tenham sido desatribuídas. Isto é uma operação "
"nula se o argumento *chave* for ``NULL``."

#: ../../c-api/init.rst:1728
msgid ""
"A freed key becomes a dangling pointer. You should reset the key to `NULL`."
msgstr ""

#: ../../c-api/init.rst:1733
msgid "Methods"
msgstr "Métodos"

#: ../../c-api/init.rst:1735
msgid ""
"The parameter *key* of these functions must not be ``NULL``.  Moreover, the "
"behaviors of :c:func:`PyThread_tss_set` and :c:func:`PyThread_tss_get` are "
"undefined if the given :c:type:`Py_tss_t` has not been initialized by :c:"
"func:`PyThread_tss_create`."
msgstr ""
"O parâmetro *key* destas funções não deve ser ``NULL``. Além disso, os "
"comportamentos de :c:func:`PyThread_tss_set` e :c:func:`PyThread_tss_get` "
"são indefinidos se o :c:type:`Py_tss_t` fornecido não tiver sido "
"inicializado por :c:func:`PyThread_tss_create`."

#: ../../c-api/init.rst:1743
msgid ""
"Return a non-zero value if the given :c:type:`Py_tss_t` has been initialized "
"by :c:func:`PyThread_tss_create`."
msgstr ""
"Retorna um valor diferente de zero se o :c:type:`Py_tss_t` fornecido tiver "
"sido inicializado por :c:func:`PyThread_tss_create`."

#: ../../c-api/init.rst:1749
msgid ""
"Return a zero value on successful initialization of a TSS key.  The behavior "
"is undefined if the value pointed to by the *key* argument is not "
"initialized by :c:macro:`Py_tss_NEEDS_INIT`.  This function can be called "
"repeatedly on the same key -- calling it on an already initialized key is a "
"no-op and immediately returns success."
msgstr ""
"Retorna um valor zero na inicialização bem-sucedida de uma chave TSS. O "
"comportamento é indefinido se o valor apontado pelo argumento *key* não for "
"inicializado por :c:macro:`Py_tss_NEEDS_INIT`. Esta função pode ser chamada "
"repetidamente na mesma chave — chamá-la em uma chave já inicializada é uma "
"operação nula e retorna imediatamente sucesso."

#: ../../c-api/init.rst:1758
msgid ""
"Destroy a TSS key to forget the values associated with the key across all "
"threads, and change the key's initialization state to uninitialized.  A "
"destroyed key is able to be initialized again by :c:func:"
"`PyThread_tss_create`. This function can be called repeatedly on the same "
"key -- calling it on an already destroyed key is a no-op."
msgstr ""
"Destrua uma chave TSS para esquecer os valores associados à chave em todos "
"os threads e altere o estado de inicialização da chave para não "
"inicializado. Uma chave destruída pode ser inicializada novamente por :c:"
"func:`PyThread_tss_create`. Esta função pode ser chamada repetidamente na "
"mesma chave — chamá-la em uma chave já destruída não tem efeito."

#: ../../c-api/init.rst:1767
msgid ""
"Return a zero value to indicate successfully associating a :c:expr:`void*` "
"value with a TSS key in the current thread.  Each thread has a distinct "
"mapping of the key to a :c:expr:`void*` value."
msgstr ""
"Retorna um valor zero para indicar que associou com sucesso um valor :c:expr:"
"`void*` a uma chave TSS na thread atual. Cada thread tem um mapeamento "
"distinto da chave para um valor :c:expr:`void*`."

#: ../../c-api/init.rst:1774
msgid ""
"Return the :c:expr:`void*` value associated with a TSS key in the current "
"thread.  This returns ``NULL`` if no value is associated with the key in the "
"current thread."
msgstr ""
"Retorna o valor :c:expr:`void*` associado a uma chave TSS na thread atual. "
"Isso retorna ``NULL`` se nenhum valor estiver associado à chave na thread "
"atual."

#: ../../c-api/init.rst:1782
msgid "Thread Local Storage (TLS) API"
msgstr "API de armazenamento local de threads (TLS)"

#: ../../c-api/init.rst:1784
msgid ""
"This API is superseded by :ref:`Thread Specific Storage (TSS) API <thread-"
"specific-storage-api>`."
msgstr ""
"Esta API foi substituída pela :ref:`API de armazenamento específico da "
"thread (TSS) <thread-specific-storage-api>`."

#: ../../c-api/init.rst:1789
msgid ""
"This version of the API does not support platforms where the native TLS key "
"is defined in a way that cannot be safely cast to ``int``.  On such "
"platforms, :c:func:`PyThread_create_key` will return immediately with a "
"failure status, and the other TLS functions will all be no-ops on such "
"platforms."
msgstr ""
"Esta versão da API não suporta plataformas nas quais a chave TLS nativa é "
"definida de forma que não pode ser convertida com segurança para ``int``. "
"Nessas plataformas, :c:func:`PyThread_create_key` retornará imediatamente "
"com um status de falha, e as outras funções TLS serão todas no-ops nessas "
"plataformas."

#: ../../c-api/init.rst:1794
msgid ""
"Due to the compatibility problem noted above, this version of the API should "
"not be used in new code."
msgstr ""
"Devido ao problema de compatibilidade mencionado acima, esta versão da API "
"não deve ser utilizada em código novo."
