# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-23 15:59+0000\n"
"PO-Revision-Date: 2025-07-18 19:57+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "Objetos Inteiros"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr ""
"Todos os inteiros são implementados como objetos inteiros \"long\" de "
"tamanho arbitrário."

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Em caso de erro, a maioria das APIs ``PyLong_As*`` retorna ``(return "
"type)-1``, que não pode ser distinguido de um número. Usa :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa um objeto inteiro Python."

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"Esta instância de :c:type:`PyTypeObject` representa o tipo inteiro Python. "
"Este é o mesmo objeto que :class:`int` na camada Python."

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Retorna verdadeiro se o argumento for um :c:type:`PyLongObject` ou um "
"subtipo de :c:type:`PyLongObject`. Esta função sempre tem sucesso."

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Retorna verdadeiro se o argumento for um :c:type:`PyLongObject`, mas não um "
"subtipo de :c:type:`PyLongObject`. Esta função sempre tem sucesso."

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` a partir de *v*, ou ``NULL`` "
"em caso de falha."

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""

#: ../../c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` a partir de um :c:expr:"
"`unsigned long` em C, ou ``NULL`` em caso de falha."

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` a partir de um :c:type:"
"`Py_ssize_t` em C, ou ``NULL`` em caso de falha."

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` a partir de um :c:type:"
"`size_t` em C, ou ``NULL`` em caso de falha."

#: ../../c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` a partir de um :c:expr:`long "
"long` em C, ou ``NULL`` em caso de falha."

#: ../../c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` a partir de um :c:expr:"
"`unsigned long long` em C, ou ``NULL`` em caso de falha."

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` a partir da parte inteira de "
"*v*, ou ``NULL`` em caso de falha."

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*, or ``NULL`` on "
"failure.  If *pend* is non-``NULL``, *\\*pend* will point to the end of "
"*str* on success or to the first character that could not be processed on "
"error.  If *base* is ``0``, *str* is interpreted using the :ref:`integers` "
"definition; in this case, leading zeros in a non-zero decimal number raises "
"a :exc:`ValueError`.  If *base* is not ``0``, it must be between ``2`` and "
"``36``, inclusive.  Leading and trailing whitespace and single underscores "
"after a base specifier and between digits are ignored.  If there are no "
"digits or *str* is not NULL-terminated following the digits and trailing "
"whitespace, :exc:`ValueError` will be raised."
msgstr ""
"Retorna um novo objeto :c:type:`PyLongObject` com base no valor da string em "
"*str*, interpretado de acordo com a base em *base*, ou ``NULL`` em caso de "
"falha. Se *pend* não for ``NULL``, *\\*pend* apontará para o final de *str* "
"em caso de sucesso ou para o primeiro caractere que não pôde ser processado "
"em caso de erro. Se *base* for ``0``, *str* é interpretado usando a "
"definição :ref:`integers`; neste caso, zeros à esquerda num número decimal "
"não nulo levanta um :exc:`ValueError`. Se *base* não for ``0``, deve estar "
"entre ``2`` e ``36``, inclusive. Espaços em branco à esquerda e à direita e "
"sublinhados únicos após um especificador de base e entre dígitos são "
"ignorados. Se não houver dígitos ou *str* não estiver terminado com NULL "
"após os dígitos e espaços em branco à direita, será levantado um :exc:"
"`ValueError`."

#: ../../c-api/long.rst:97
msgid ""
"Python methods :meth:`int.to_bytes` and :meth:`int.from_bytes` to convert a :"
"c:type:`PyLongObject` to/from an array of bytes in base ``256``. You can "
"call those from C using :c:func:`PyObject_CallMethod`."
msgstr ""

#: ../../c-api/long.rst:104
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr ""
"Converte uma sequência de dígitos Unicode na string *u* para um valor "
"inteiro Python."

#: ../../c-api/long.rst:112
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"Cria um inteiro Python a partir do ponteiro *p*. O valor do ponteiro pode "
"ser recuperado do valor resultante usando :c:func:`PyLong_AsVoidPtr`."

#: ../../c-api/long.rst:123 ../../c-api/long.rst:151
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação :c:expr:`long` em C de *obj*. Se *obj* não for uma "
"instância de :c:type:`PyLongObject`, primeiro chama o seu método :meth:"
"`~object.__index__` (se presente) para convertê-lo num :c:type:"
"`PyLongObject`."

#: ../../c-api/long.rst:127
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long`."
msgstr ""
"Levanta :exc:`OverflowError` se o valor de *obj* estiver fora do intervalo "
"para um :c:expr:`long`."

#: ../../c-api/long.rst:130 ../../c-api/long.rst:160 ../../c-api/long.rst:181
#: ../../c-api/long.rst:201 ../../c-api/long.rst:224
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Retorna ``-1`` em caso de erro. Usa :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:132 ../../c-api/long.rst:162 ../../c-api/long.rst:183
#: ../../c-api/long.rst:205 ../../c-api/long.rst:289 ../../c-api/long.rst:309
msgid "Use :meth:`~object.__index__` if available."
msgstr "Usa :meth:`~object.__index__`, se disponível."

#: ../../c-api/long.rst:135 ../../c-api/long.rst:165 ../../c-api/long.rst:186
#: ../../c-api/long.rst:208 ../../c-api/long.rst:292 ../../c-api/long.rst:312
msgid "This function will no longer use :meth:`~object.__int__`."
msgstr "Esta função já não usará :meth:`~object.__int__`."

#: ../../c-api/long.rst:142
msgid ""
"A :term:`soft deprecated` alias. Exactly equivalent to the preferred "
"``PyLong_AsLong``. In particular, it can fail with :exc:`OverflowError` or "
"another exception."
msgstr ""
"Um alias :term:`obsoleto`. Exatamente equivalente ao preferido "
"``PyLong_AsLong``. Em particular, pode falhar com :exc:`OverflowError` ou "
"outra exceção."

#: ../../c-api/long.rst:146
msgid "The function is soft deprecated."
msgstr "A função está obsoleta."

#: ../../c-api/long.rst:155
msgid ""
"If the value of *obj* is greater than :c:macro:`LONG_MAX` or less than :c:"
"macro:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Se o valor de *obj* for maior que :c:macro:`LONG_MAX` ou menor que :c:macro:"
"`LONG_MIN`, define *\\*overflow* para ``1`` ou ``-1``, respetivamente, e "
"retorna ``-1``; caso contrário, define *\\*overflow* para ``0``. Se ocorrer "
"outra exceção, define *\\*overflow* para ``0`` e retorna ``-1`` como "
"habitual."

#: ../../c-api/long.rst:174 ../../c-api/long.rst:192
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação :c:expr:`long long` em C de *obj*. Se *obj* não "
"for uma instância de :c:type:`PyLongObject`, primeiro chama o seu método :"
"meth:`~object.__index__` (se presente) para convertê-lo num :c:type:"
"`PyLongObject`."

#: ../../c-api/long.rst:178
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long long`."
msgstr ""
"Levanta :exc:`OverflowError` se o valor de *obj* estiver fora do intervalo "
"para um :c:expr:`long long`."

#: ../../c-api/long.rst:196
msgid ""
"If the value of *obj* is greater than :c:macro:`LLONG_MAX` or less than :c:"
"macro:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Se o valor de *obj* for maior que :c:macro:`LLONG_MAX` ou menor que :c:macro:"
"`LLONG_MIN`, define *\\*overflow* para ``1`` ou ``-1``, respetivamente, e "
"retorna ``-1``; caso contrário, define *\\*overflow* para ``0``. Se ocorrer "
"outra exceção, define *\\*overflow* para ``0`` e retorna ``-1`` como "
"habitual."

#: ../../c-api/long.rst:218
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação :c:type:`Py_ssize_t` de *pylong*. *pylong* deve "
"ser uma instância de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:221
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"Levanta :exc:`OverflowError` se o valor de *pylong* estiver fora do "
"intervalo para um :c:type:`Py_ssize_t`."

#: ../../c-api/long.rst:233
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação :c:expr:`unsigned long` de *pylong*. *pylong* deve "
"ser uma instância de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:236
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`unsigned long`."
msgstr ""
"Levanta :exc:`OverflowError` se o valor de *pylong* estiver fora do "
"intervalo para um :c:expr:`unsigned long`."

#: ../../c-api/long.rst:239
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(unsigned long)-1`` em caso de erro. Usa :c:func:`PyErr_Occurred` "
"para desambiguar."

#: ../../c-api/long.rst:249
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação :c:type:`size_t` de *pylong*. *pylong* deve ser "
"uma instância de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:252
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"Levanta :exc:`OverflowError` se o valor de *pylong* estiver fora do "
"intervalo para um :c:type:`size_t`."

#: ../../c-api/long.rst:255
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(size_t)-1`` em caso de erro. Usa :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:264
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação :c:expr:`unsigned long long` de *pylong*. *pylong* "
"deve ser uma instância de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:267
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:expr:`unsigned long long`."
msgstr ""
"Levanta :exc:`OverflowError` se o valor de *pylong* estiver fora do "
"intervalo para um :c:expr:`unsigned long long`."

#: ../../c-api/long.rst:270
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(unsigned long long)-1`` em caso de erro. Usa :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:273
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"Um *pylong* negativo agora levanta :exc:`OverflowError`, não :exc:"
"`TypeError`."

#: ../../c-api/long.rst:279
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação :c:expr:`unsigned long` de *obj*. Se *obj* não for "
"uma instância de :c:type:`PyLongObject`, primeiro chama o seu método :meth:"
"`~object.__index__` (se presente) para convertê-lo num :c:type:"
"`PyLongObject`."

#: ../../c-api/long.rst:283
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"Se o valor de *obj* estiver fora do intervalo para um :c:expr:`unsigned "
"long`, retorna a redução desse valor módulo ``ULONG_MAX + 1``."

#: ../../c-api/long.rst:286
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Retorna ``(unsigned long)-1`` em caso de erro. Usa :c:func:`PyErr_Occurred` "
"para desambiguar."

#: ../../c-api/long.rst:298
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação :c:expr:`unsigned long long` de *obj*. Se *obj* "
"não for uma instância de :c:type:`PyLongObject`, primeiro chama o seu "
"método :meth:`~object.__index__` (se presente) para convertê-lo num :c:type:"
"`PyLongObject`."

#: ../../c-api/long.rst:303
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"Se o valor de *obj* estiver fora do intervalo para um :c:expr:`unsigned long "
"long`, retorna a redução desse valor módulo ``ULLONG_MAX + 1``."

#: ../../c-api/long.rst:306
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"Retorna ``(unsigned long long)-1`` em caso de erro. Usa :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:318
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Retorna uma representação :c:expr:`double` de *pylong*. *pylong* deve ser "
"uma instância de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:321
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`double`."
msgstr ""
"Levanta :exc:`OverflowError` se o valor de *pylong* estiver fora do "
"intervalo para um :c:expr:`double`."

#: ../../c-api/long.rst:324
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Retorna ``-1.0`` em caso de erro. Usa :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:329
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""
"Converte um inteiro Python *pylong* para um ponteiro :c:expr:`void` em C. Se "
"*pylong* não puder ser convertido, será levantado um :exc:`OverflowError`. "
"Isto só é garantido produzir um ponteiro :c:expr:`void` utilizável para "
"valores criados com :c:func:`PyLong_FromVoidPtr`."

#: ../../c-api/long.rst:334
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Retorna ``NULL`` em caso de erro. Usa :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:339
msgid ""
"On success, return a read only :term:`named tuple`, that holds information "
"about Python's internal representation of integers. See :data:`sys.int_info` "
"for description of individual fields."
msgstr ""
"Em caso de sucesso, retorna uma :term:`tupla nomeada` somente de leitura, "
"que contém informações sobre a representação interna do Python de inteiros. "
"Consulte :data:`sys.int_info` para a descrição dos campos individuais."

#: ../../c-api/long.rst:343
msgid "On failure, return ``NULL`` with an exception set."
msgstr "Em caso de falha, retorna ``NULL`` com uma exceção definida."

#: ../../c-api/long.rst:350
msgid "Return 1 if *op* is compact, 0 otherwise."
msgstr "Retorna 1 se *op* for compacto, 0 caso contrário."

#: ../../c-api/long.rst:352
msgid ""
"This function makes it possible for performance-critical code to implement a "
"“fast path” for small integers. For compact values use :c:func:"
"`PyUnstable_Long_CompactValue`; for others fall back to a :c:func:"
"`PyLong_As* <PyLong_AsSize_t>` function or :c:func:`calling "
"<PyObject_CallMethod>` :meth:`int.to_bytes`."
msgstr ""

#: ../../c-api/long.rst:358
msgid "The speedup is expected to be negligible for most users."
msgstr ""
"Espera-se que o aumento de velocidade seja negligenciável para a maioria dos "
"utilizadores."

#: ../../c-api/long.rst:360
msgid ""
"Exactly what values are considered compact is an implementation detail and "
"is subject to change."
msgstr ""
"Exatamente quais valores são considerados compactos é um detalhe de "
"implementação e está sujeito a alterações."

#: ../../c-api/long.rst:368
msgid ""
"If *op* is compact, as determined by :c:func:`PyUnstable_Long_IsCompact`, "
"return its value."
msgstr ""
"Se *op* for compacto, conforme determinado por :c:func:"
"`PyUnstable_Long_IsCompact`, retorna o seu valor."

#: ../../c-api/long.rst:371
msgid "Otherwise, the return value is undefined."
msgstr "Caso contrário, o valor de retorno é indefinido."

#: ../../c-api/long.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/long.rst:8
msgid "long integer"
msgstr "inteiro longo"

#: ../../c-api/long.rst:8
msgid "integer"
msgstr "inteiro"

#: ../../c-api/long.rst:119
msgid "LONG_MAX (C macro)"
msgstr "LONG_MAX (macro C)"

#: ../../c-api/long.rst:119 ../../c-api/long.rst:171 ../../c-api/long.rst:214
#: ../../c-api/long.rst:229 ../../c-api/long.rst:245 ../../c-api/long.rst:261
msgid "OverflowError (built-in exception)"
msgstr "OverflowError (exceção integrada)"

#: ../../c-api/long.rst:214
msgid "PY_SSIZE_T_MAX (C macro)"
msgstr "PY_SSIZE_T_MAX (macro C)"

#: ../../c-api/long.rst:229
msgid "ULONG_MAX (C macro)"
msgstr "ULONG_MAX (macro C)"

#: ../../c-api/long.rst:245
msgid "SIZE_MAX (C macro)"
msgstr "SIZE_MAX (macro C)"
