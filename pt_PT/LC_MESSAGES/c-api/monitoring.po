# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 14:15+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/monitoring.rst:6
msgid "Monitoring C API"
msgstr "Monitorização da API C"

#: ../../c-api/monitoring.rst:8
msgid "Added in version 3.13."
msgstr "Adicionado na versão 3.13."

#: ../../c-api/monitoring.rst:10
msgid ""
"An extension may need to interact with the event monitoring system. "
"Subscribing to events and registering callbacks can be done via the Python "
"API exposed in :mod:`sys.monitoring`."
msgstr ""
"Uma extensão pode precisar interagir com o sistema de monitorização de "
"eventos. A subscrição de eventos e o registo de callbacks podem ser feitos "
"através da API Python exposta em :mod:`sys.monitoring`."

#: ../../c-api/monitoring.rst:15
msgid "Generating Execution Events"
msgstr "Gerando eventos de execução"

#: ../../c-api/monitoring.rst:17
msgid ""
"The functions below make it possible for an extension to fire monitoring "
"events as it emulates the execution of Python code. Each of these functions "
"accepts a ``PyMonitoringState`` struct which contains concise information "
"about the activation state of events, as well as the event arguments, which "
"include a ``PyObject*`` representing the code object, the instruction offset "
"and sometimes additional, event-specific arguments (see :mod:`sys."
"monitoring` for details about the signatures of the different event "
"callbacks). The ``codelike`` argument should be an instance of :class:`types."
"CodeType` or of a type that emulates it."
msgstr ""
"As funções abaixo permitem que uma extensão acione eventos de monitorização "
"ao emular a execução do código Python. Cada uma dessas funções aceita uma "
"estrutura ``PyMonitoringState`` que contém informações concisas sobre o "
"estado de ativação dos eventos, bem como os argumentos do evento, que "
"incluem um ``PyObject*`` representando o objeto de código, o deslocamento da "
"instrução e, às vezes, argumentos adicionais específicos do evento "
"(consulte :mod:`sys.monitoring` para obter detalhes sobre as assinaturas das "
"diferentes chamadas de retorno de evento). O argumento ``codelike`` deve ser "
"uma instância de :class:`types.CodeType` ou de um tipo que o emule."

#: ../../c-api/monitoring.rst:27
msgid ""
"The VM disables tracing when firing an event, so there is no need for user "
"code to do that."
msgstr ""
"A VM desativa o rastreamento ao disparar um evento, portanto, não há "
"necessidade de código do utilizador para fazer isso."

#: ../../c-api/monitoring.rst:30
msgid ""
"Monitoring functions should not be called with an exception set, except "
"those listed below as working with the current exception."
msgstr ""
"As funções de monitorização não devem ser chamadas com uma exceção definida, "
"exceto aquelas listadas abaixo como funcionando com a exceção atual."

#: ../../c-api/monitoring.rst:35
msgid ""
"Representation of the state of an event type. It is allocated by the user "
"while its contents are maintained by the monitoring API functions described "
"below."
msgstr ""
"Representação do estado de um tipo de evento. É atribuído pelo utilizador, "
"enquanto o seu conteúdo é mantido pelas funções da API de monitorização "
"descritas abaixo."

#: ../../c-api/monitoring.rst:39
msgid ""
"All of the functions below return 0 on success and -1 (with an exception "
"set) on error."
msgstr ""
"Todas as funções abaixo retornam 0 em caso de sucesso e -1 (com uma exceção "
"definida) em caso de erro."

#: ../../c-api/monitoring.rst:41
msgid "See :mod:`sys.monitoring` for descriptions of the events."
msgstr "Consulte :mod:`sys.monitoring` para obter descrições dos eventos."

#: ../../c-api/monitoring.rst:45
msgid "Fire a ``PY_START`` event."
msgstr "Disparar um evento ``PY_START``."

#: ../../c-api/monitoring.rst:50
msgid "Fire a ``PY_RESUME`` event."
msgstr "Disparar um evento ``PY_RESUME``."

#: ../../c-api/monitoring.rst:55
msgid "Fire a ``PY_RETURN`` event."
msgstr "Disparar um evento ``PY_RETURN``."

#: ../../c-api/monitoring.rst:60
msgid "Fire a ``PY_YIELD`` event."
msgstr "Disparar um evento ``PY_YIELD``."

#: ../../c-api/monitoring.rst:65
msgid "Fire a ``CALL`` event."
msgstr "Disparar um evento ``CALL``."

#: ../../c-api/monitoring.rst:70
msgid "Fire a ``LINE`` event."
msgstr "Disparar um evento ``LINE``."

#: ../../c-api/monitoring.rst:75
msgid "Fire a ``JUMP`` event."
msgstr "Disparar um evento ``JUMP``."

#: ../../c-api/monitoring.rst:80
msgid "Fire a ``BRANCH_LEFT`` event."
msgstr "Disparar um evento ``BRANCH_LEFT``."

#: ../../c-api/monitoring.rst:85
msgid "Fire a ``BRANCH_RIGHT`` event."
msgstr "Disparar um evento ``BRANCH_RIGHT``."

#: ../../c-api/monitoring.rst:90
msgid "Fire a ``C_RETURN`` event."
msgstr "Disparar um evento ``C_RETURN``."

#: ../../c-api/monitoring.rst:95
msgid ""
"Fire a ``PY_THROW`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""
"Disparar um evento ``PY_THROW`` com a exceção atual (conforme retornado por :"
"c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:101
msgid ""
"Fire a ``RAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""
"Disparar um evento ``RAISE`` com a exceção atual (conforme retornado por :c:"
"func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:107
msgid ""
"Fire a ``C_RAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""
"Disparar um evento ``C_RAISE`` com a exceção atual (conforme retornado por :"
"c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:113
msgid ""
"Fire a ``RERAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""
"Disparar um evento ``RERAISE`` com a exceção atual (conforme retornado por :"
"c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:119
msgid ""
"Fire an ``EXCEPTION_HANDLED`` event with the current exception (as returned "
"by :c:func:`PyErr_GetRaisedException`)."
msgstr ""
"Disparar um evento ``EXCEPTION_HANDLED`` com a exceção atual (conforme "
"retornado por :c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:125
msgid ""
"Fire a ``PY_UNWIND`` event with the current exception (as returned by :c:"
"func:`PyErr_GetRaisedException`)."
msgstr ""
"Disparar um evento ``PY_UNWIND`` com a exceção atual (conforme retornado "
"por :c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:131
msgid ""
"Fire a ``STOP_ITERATION`` event. If ``value`` is an instance of :exc:"
"`StopIteration`, it is used. Otherwise, a new :exc:`StopIteration` instance "
"is created with ``value`` as its argument."
msgstr ""
"Disparar um evento ``STOP_ITERATION``. Se ``value`` for uma instância de :"
"exc:`StopIteration`, ela será usada. Caso contrário, uma nova instância :exc:"
"`StopIteration` será criada com ``value`` como seu argumento."

#: ../../c-api/monitoring.rst:136
msgid "Managing the Monitoring State"
msgstr "Gerir o estado de monitorização"

#: ../../c-api/monitoring.rst:138
msgid ""
"Monitoring states can be managed with the help of monitoring scopes. A scope "
"would typically correspond to a python function."
msgstr ""
"Os estados de monitorização podem ser geridos com a ajuda de âmbitos de "
"monitorização. Um âmbito corresponderia normalmente a uma função python."

#: ../../c-api/monitoring.rst:143
msgid ""
"Enter a monitored scope. ``event_types`` is an array of the event IDs for "
"events that may be fired from the scope. For example, the ID of a "
"``PY_START`` event is the value ``PY_MONITORING_EVENT_PY_START``, which is "
"numerically equal to the base-2 logarithm of ``sys.monitoring.events."
"PY_START``. ``state_array`` is an array with a monitoring state entry for "
"each event in ``event_types``, it is allocated by the user but populated by :"
"c:func:`!PyMonitoring_EnterScope` with information about the activation "
"state of the event. The size of ``event_types`` (and hence also of "
"``state_array``) is given in ``length``."
msgstr ""
"Insira um escopo monitorado. ``event_types`` é uma matriz dos IDs de eventos "
"que podem ser disparados a partir do escopo. Por exemplo, o ID de um evento "
"``PY_START`` é o valor ``PY_MONITORING_EVENT_PY_START``, que é numericamente "
"igual ao logaritmo em base 2 de ``sys.monitoring.events.PY_START``. "
"``state_array`` é uma matriz com uma entrada de estado de monitorização para "
"cada evento em ``event_types``, é alocada pelo utilizador, mas preenchida "
"por :c:func:`!PyMonitoring_EnterScope` com informações sobre o estado de "
"ativação do evento. O tamanho de ``event_types`` (e, portanto, também de "
"``state_array``) é fornecido em ``length``."

#: ../../c-api/monitoring.rst:153
msgid ""
"The ``version`` argument is a pointer to a value which should be allocated "
"by the user together with ``state_array`` and initialized to 0, and then set "
"only by :c:func:`!PyMonitoring_EnterScope` itself. It allows this function "
"to determine whether event states have changed since the previous call, and "
"to return quickly if they have not."
msgstr ""
"O argumento ``version`` é um ponteiro para um valor que deve ser alocado "
"pelo utilizador juntamente com ``state_array`` e inicializado para 0, e "
"depois definido apenas por :c:func:`!PyMonitoring_EnterScope`. Permite que "
"esta função determine se os estados dos eventos mudaram desde a chamada "
"anterior e retorne rapidamente se não tiverem mudado."

#: ../../c-api/monitoring.rst:159
msgid ""
"The scopes referred to here are lexical scopes: a function, class or "
"method. :c:func:`!PyMonitoring_EnterScope` should be called whenever the "
"lexical scope is entered. Scopes can be reentered, reusing the same "
"*state_array* and *version*, in situations like when emulating a recursive "
"Python function. When a code-like's execution is paused, such as when "
"emulating a generator, the scope needs to be exited and re-entered."
msgstr ""
"Os escopos aqui referidos são escopos lexicais: uma função, classe ou "
"método. :c:func:`!PyMonitoring_EnterScope` deve ser chamado sempre que o "
"escopo lexical for entrado. Os escopos podem ser reentrados, reutilizando o "
"mesmo *state_array* e *version*, em situações como ao emular uma função "
"recursiva do Python. Quando a execução de um código semelhante é pausada, "
"como ao emular um gerador, o escopo precisa ser saído e reentrado."

#: ../../c-api/monitoring.rst:166
msgid "The macros for *event_types* are:"
msgstr "As macros para *event_types* são:"

#: ../../c-api/monitoring.rst:174
msgid "Macro"
msgstr "Macro"

#: ../../c-api/monitoring.rst:174
msgid "Event"
msgstr "Event"

#: ../../c-api/monitoring.rst:176
msgid ":monitoring-event:`BRANCH_LEFT`"
msgstr ":monitoring-event:`BRANCH_LEFT`"

#: ../../c-api/monitoring.rst:177
msgid ":monitoring-event:`BRANCH_RIGHT`"
msgstr ":monitoring-event:`BRANCH_RIGHT`"

#: ../../c-api/monitoring.rst:178
msgid ":monitoring-event:`CALL`"
msgstr ":monitoring-event:`CALL`"

#: ../../c-api/monitoring.rst:179
msgid ":monitoring-event:`C_RAISE`"
msgstr ":monitoring-event:`C_RAISE`"

#: ../../c-api/monitoring.rst:180
msgid ":monitoring-event:`C_RETURN`"
msgstr ":monitoring-event:`C_RETURN`"

#: ../../c-api/monitoring.rst:181
msgid ":monitoring-event:`EXCEPTION_HANDLED`"
msgstr ":monitoring-event:`EXCEPTION_HANDLED`"

#: ../../c-api/monitoring.rst:182
msgid ":monitoring-event:`INSTRUCTION`"
msgstr ":monitoring-event:`INSTRUCTION`"

#: ../../c-api/monitoring.rst:183
msgid ":monitoring-event:`JUMP`"
msgstr ":monitoring-event:`JUMP`"

#: ../../c-api/monitoring.rst:184
msgid ":monitoring-event:`LINE`"
msgstr ":monitoring-event:`LINE`"

#: ../../c-api/monitoring.rst:185
msgid ":monitoring-event:`PY_RESUME`"
msgstr ":monitoring-event:`PY_RESUME`"

#: ../../c-api/monitoring.rst:186
msgid ":monitoring-event:`PY_RETURN`"
msgstr ":monitoring-event:`PY_RETURN`"

#: ../../c-api/monitoring.rst:187
msgid ":monitoring-event:`PY_START`"
msgstr ":monitoring-event:`PY_START`"

#: ../../c-api/monitoring.rst:188
msgid ":monitoring-event:`PY_THROW`"
msgstr ":monitoring-event:`PY_THROW`"

#: ../../c-api/monitoring.rst:189
msgid ":monitoring-event:`PY_UNWIND`"
msgstr ":monitoring-event:`PY_UNWIND`"

#: ../../c-api/monitoring.rst:190
msgid ":monitoring-event:`PY_YIELD`"
msgstr ":monitoring-event:`PY_YIELD`"

#: ../../c-api/monitoring.rst:191
msgid ":monitoring-event:`RAISE`"
msgstr ":monitoring-event:`RAISE`"

#: ../../c-api/monitoring.rst:192
msgid ":monitoring-event:`RERAISE`"
msgstr ":monitoring-event:`RERAISE`"

#: ../../c-api/monitoring.rst:193
msgid ":monitoring-event:`STOP_ITERATION`"
msgstr ":monitoring-event:`STOP_ITERATION`"

#: ../../c-api/monitoring.rst:198
msgid ""
"Exit the last scope that was entered with :c:func:`!PyMonitoring_EnterScope`."
msgstr ""
"Sair do último escopo que foi inserido com :c:func:`!"
"PyMonitoring_EnterScope`."

#: ../../c-api/monitoring.rst:203
msgid ""
"Return true if the event corresponding to the event ID *ev* is a :ref:`local "
"event <monitoring-event-local>`."
msgstr ""
"Retorne verdadeiro se o evento correspondente ao ID do evento *ev* for um :"
"ref:`evento local <monitoring-event-local>`."

#: ../../c-api/monitoring.rst:210
msgid "This function is :term:`soft deprecated`."
msgstr "Esta função está :term:`descontinuada`."
