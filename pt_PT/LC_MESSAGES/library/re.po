# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# André Moreira <afrmscb@gmail.com>, 2025
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 17:21+0000\n"
"PO-Revision-Date: 2025-09-22 15:58+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../library/re.rst:2
msgid ":mod:`re` --- Regular expression operations"
msgstr ""

#: ../../library/re.rst:10
msgid "**Source code:** :source:`Lib/re.py`"
msgstr ""

#: ../../library/re.rst:14
msgid ""
"This module provides regular expression matching operations similar to those"
" found in Perl."
msgstr ""
"Este módulo fornece operações de correspondência de expressões regulares "
"semelhantes às encontradas em Perl."

#: ../../library/re.rst:17
msgid ""
"Both patterns and strings to be searched can be Unicode strings "
"(:class:`str`) as well as 8-bit strings (:class:`bytes`). However, Unicode "
"strings and 8-bit strings cannot be mixed: that is, you cannot match a "
"Unicode string with a byte pattern or vice-versa; similarly, when asking for"
" a substitution, the replacement string must be of the same type as both the"
" pattern and the search string."
msgstr ""

#: ../../library/re.rst:24
msgid ""
"Regular expressions use the backslash character (``'\\'``) to indicate "
"special forms or to allow special characters to be used without invoking "
"their special meaning.  This collides with Python's usage of the same "
"character for the same purpose in string literals; for example, to match a "
"literal backslash, one might have to write ``'\\\\\\\\'`` as the pattern "
"string, because the regular expression must be ``\\\\``, and each backslash "
"must be expressed as ``\\\\`` inside a regular Python string literal. Also, "
"please note that any invalid escape sequences in Python's usage of the "
"backslash in string literals now generate a :exc:`DeprecationWarning` and in"
" the future this will become a :exc:`SyntaxError`. This behaviour will "
"happen even if it is a valid escape sequence for a regular expression."
msgstr ""

#: ../../library/re.rst:36
msgid ""
"The solution is to use Python's raw string notation for regular expression "
"patterns; backslashes are not handled in any special way in a string literal"
" prefixed with ``'r'``.  So ``r\"\\n\"`` is a two-character string "
"containing ``'\\'`` and ``'n'``, while ``\"\\n\"`` is a one-character string"
" containing a newline.  Usually patterns will be expressed in Python code "
"using this raw string notation."
msgstr ""
"A solução é usar a notação de cadeias de caracteres brutas  do Python para "
"padrões de expressões regulares; as barras invertidas não são tratadas de "
"forma especial em um literal de cadeia de caracteres prefixado com ``'r'``. "
"Assim, ``r\"\\n\"`` é uma cadeia de caracteres de dois caracteres que contém"
" ``'\\'`` e ``'n'``, enquanto ``\"\\n\"`` é uma cadeia de caracteres de um "
"carácter que contém uma nova linha. Normalmente, os padrões serão expressos "
"em código Python usando esta notação de cadeias de caracteres brutas."

#: ../../library/re.rst:43
msgid ""
"It is important to note that most regular expression operations are "
"available as module-level functions and methods on :ref:`compiled regular "
"expressions <re-objects>`.  The functions are shortcuts that don't require "
"you to compile a regex object first, but miss some fine-tuning parameters."
msgstr ""
"É importante notar que a maioria das operações de expressões regulares estão"
" disponíveis como funções a nível de módulo e métodos em :ref:`expressões "
"regulares compiladas <re-objects>`. As funções são atalhos que não exigem "
"que compile primeiro um objeto regex, mas perdem alguns parâmetros de ajuste"
" fino."

#: ../../library/re.rst:51
msgid ""
"The third-party `regex <https://pypi.org/project/regex/>`_ module, which has"
" an API compatible with the standard library :mod:`re` module, but offers "
"additional functionality and a more thorough Unicode support."
msgstr ""

#: ../../library/re.rst:59
msgid "Regular Expression Syntax"
msgstr "Sintaxe de expressões regulares"

#: ../../library/re.rst:61
msgid ""
"A regular expression (or RE) specifies a set of strings that matches it; the"
" functions in this module let you check if a particular string matches a "
"given regular expression (or if a given regular expression matches a "
"particular string, which comes down to the same thing)."
msgstr ""
"Uma expressão regular (ou RE) especifica um conjunto de cadeias de "
"caracteres que lhe correspondem; as funções neste módulo permitem verificar "
"se uma determinada cadeia de caracteres corresponde a uma expressão regular "
"dada (ou se uma expressão regular dada corresponde a uma determinada cadeia "
"de caracteres, o que se resume ao mesmo)."

#: ../../library/re.rst:66
msgid ""
"Regular expressions can be concatenated to form new regular expressions; if "
"*A* and *B* are both regular expressions, then *AB* is also a regular "
"expression. In general, if a string *p* matches *A* and another string *q* "
"matches *B*, the string *pq* will match AB.  This holds unless *A* or *B* "
"contain low precedence operations; boundary conditions between *A* and *B*; "
"or have numbered group references.  Thus, complex expressions can easily be "
"constructed from simpler primitive expressions like the ones described here."
"  For details of the theory and implementation of regular expressions, "
"consult the Friedl book [Frie09]_, or almost any textbook about compiler "
"construction."
msgstr ""
"As expressões regulares podem ser concatenadas para formar novas expressões "
"regulares; se *A* e *B* forem ambas expressões regulares, então *AB* também "
"é uma expressão regular. Em geral, se uma cadeia de caracteres *p* "
"corresponder a *A* e outra cadeia de caracteres *q* corresponder a *B*, a "
"cadeia de caracteres *pq* corresponderá a *AB*. Isto mantém-se a menos que "
"*A* ou *B* contenham operações de baixa precedência; condições de fronteira "
"entre *A* e *B*; ou tenham referências a grupos numerados. Assim, expressões"
" complexas podem ser facilmente construídas a partir de expressões "
"primitivas mais simples como as descritas aqui. Para detalhes sobre a teoria"
" e implementação de expressões regulares, consulte o livro de Friedl "
"[Frie09]_, ou quase qualquer livro sobre construção de compiladores."

#: ../../library/re.rst:76
msgid ""
"A brief explanation of the format of regular expressions follows.  For "
"further information and a gentler presentation, consult the :ref:`regex-"
"howto`."
msgstr ""
"Segue-se uma breve explicação do formato das expressões regulares. Para mais"
" informações e uma apresentação mais suave, consulte o :ref:`regex-howto`."

#: ../../library/re.rst:79
msgid ""
"Regular expressions can contain both special and ordinary characters. Most "
"ordinary characters, like ``'A'``, ``'a'``, or ``'0'``, are the simplest "
"regular expressions; they simply match themselves.  You can concatenate "
"ordinary characters, so ``last`` matches the string ``'last'``.  (In the "
"rest of this section, we'll write RE's in ``this special style``, usually "
"without quotes, and strings to be matched ``'in single quotes'``.)"
msgstr ""
"As expressões regulares podem conter caracteres especiais e ordinários. A "
"maioria dos caracteres ordinários, como ``'A'``, ``'a'`` ou ``'0'``, são as "
"expressões regulares mais simples; correspondem simplesmente a si mesmos. "
"Pode concatenar caracteres ordinários, pelo que ``last`` corresponde à "
"cadeia de caracteres ``'last'``. (No resto desta secção, escreveremos REs em"
" ``this special style``, geralmente sem aspas, e cadeias de caracteres a "
"corresponder ``'in single quotes'``.)"

#: ../../library/re.rst:86
msgid ""
"Some characters, like ``'|'`` or ``'('``, are special. Special characters "
"either stand for classes of ordinary characters, or affect how the regular "
"expressions around them are interpreted."
msgstr ""
"Alguns caracteres, como ``'|'`` ou ``'('``, são especiais. Os caracteres "
"especiais representam classes de caracteres ordinários ou afetam a forma "
"como as expressões regulares à sua volta são interpretadas."

#: ../../library/re.rst:90
msgid ""
"Repetition qualifiers (``*``, ``+``, ``?``, ``{m,n}``, etc) cannot be "
"directly nested. This avoids ambiguity with the non-greedy modifier suffix "
"``?``, and with other modifiers in other implementations. To apply a second "
"repetition to an inner repetition, parentheses may be used. For example, the"
" expression ``(?:a{6})*`` matches any multiple of six ``'a'`` characters."
msgstr ""

#: ../../library/re.rst:97
msgid "The special characters are:"
msgstr "Os caracteres especiais são:"

#: ../../library/re.rst:104 ../../library/re.rst:1435
msgid "``.``"
msgstr "``.``"

#: ../../library/re.rst:102
msgid ""
"(Dot.)  In the default mode, this matches any character except a newline.  "
"If the :const:`DOTALL` flag has been specified, this matches any character "
"including a newline."
msgstr ""

#: ../../library/re.rst:110
msgid "``^``"
msgstr "``^``"

#: ../../library/re.rst:109
msgid ""
"(Caret.)  Matches the start of the string, and in :const:`MULTILINE` mode "
"also matches immediately after each newline."
msgstr ""
"(Circunflexo.) Corresponde ao início da cadeia de caracteres e, no modo "
":const:`MULTILINE`, também corresponde imediatamente após cada nova linha."

#: ../../library/re.rst:121
msgid "``$``"
msgstr "``$``"

#: ../../library/re.rst:115
msgid ""
"Matches the end of the string or just before the newline at the end of the "
"string, and in :const:`MULTILINE` mode also matches before a newline.  "
"``foo`` matches both 'foo' and 'foobar', while the regular expression "
"``foo$`` matches only 'foo'.  More interestingly, searching for ``foo.$`` in"
" ``'foo1\\nfoo2\\n'`` matches 'foo2' normally, but 'foo1' in "
":const:`MULTILINE` mode; searching for a single ``$`` in ``'foo\\n'`` will "
"find two (empty) matches: one just before the newline, and one at the end of"
" the string."
msgstr ""

#: ../../library/re.rst:128
msgid "``*``"
msgstr "``*``"

#: ../../library/re.rst:126
msgid ""
"Causes the resulting RE to match 0 or more repetitions of the preceding RE, "
"as many repetitions as are possible.  ``ab*`` will match 'a', 'ab', or 'a' "
"followed by any number of 'b's."
msgstr ""
"Faz com que a RE resultante corresponda a 0 ou mais repetições da RE "
"anterior, tantas repetições quantas forem possíveis. ``ab*`` corresponderá a"
" 'a', 'ab' ou 'a' seguido de qualquer número de 'b's."

#: ../../library/re.rst:135
msgid "``+``"
msgstr "``+``"

#: ../../library/re.rst:133
msgid ""
"Causes the resulting RE to match 1 or more repetitions of the preceding RE. "
"``ab+`` will match 'a' followed by any non-zero number of 'b's; it will not "
"match just 'a'."
msgstr ""
"Faz com que a RE resultante corresponda a 1 ou mais repetições da RE "
"anterior. ``ab+`` corresponderá a 'a' seguido de qualquer número não nulo de"
" 'b's; não corresponderá apenas a 'a'."

#: ../../library/re.rst:141
msgid "``?``"
msgstr "``?``"

#: ../../library/re.rst:140
msgid ""
"Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. "
"``ab?`` will match either 'a' or 'ab'."
msgstr ""
"Faz com que a RE resultante corresponda a 0 ou 1 repetições da RE anterior. "
"``ab?`` corresponderá a 'a' ou 'ab'."

#: ../../library/re.rst:155
msgid "``*?``, ``+?``, ``??``"
msgstr "``*?``, ``+?``, ``??``"

#: ../../library/re.rst:149
msgid ""
"The ``'*'``, ``'+'``, and ``'?'`` qualifiers are all :dfn:`greedy`; they "
"match as much text as possible.  Sometimes this behaviour isn't desired; if "
"the RE ``<.*>`` is matched against ``'<a> b <c>'``, it will match the entire"
" string, and not just ``'<a>'``.  Adding ``?`` after the qualifier makes it "
"perform the match in :dfn:`non-greedy` or :dfn:`minimal` fashion; as *few* "
"characters as possible will be matched.  Using the RE ``<.*?>`` will match "
"only ``'<a>'``."
msgstr ""

#: ../../library/re.rst:163
msgid "``{m}``"
msgstr "``{m}``"

#: ../../library/re.rst:161
msgid ""
"Specifies that exactly *m* copies of the previous RE should be matched; "
"fewer matches cause the entire RE not to match.  For example, ``a{6}`` will "
"match exactly six ``'a'`` characters, but not five."
msgstr ""
"Especifica que exatamente *m* cópias da RE anterior devem ser "
"correspondidas; um número menor de correspondências faz com que toda a RE "
"não corresponda. Por exemplo, ``a{6}`` corresponderá exatamente a seis "
"caracteres ``'a'``, mas não a cinco."

#: ../../library/re.rst:172
msgid "``{m,n}``"
msgstr "``{m,n}``"

#: ../../library/re.rst:166
msgid ""
"Causes the resulting RE to match from *m* to *n* repetitions of the "
"preceding RE, attempting to match as many repetitions as possible.  For "
"example, ``a{3,5}`` will match from 3 to 5 ``'a'`` characters.  Omitting *m*"
" specifies a lower bound of zero,  and omitting *n* specifies an infinite "
"upper bound.  As an example, ``a{4,}b`` will match ``'aaaab'`` or a thousand"
" ``'a'`` characters followed by a ``'b'``, but not ``'aaab'``. The comma may"
" not be omitted or the modifier would be confused with the previously "
"described form."
msgstr ""
"Faz com que a RE resultante corresponda de *m* a *n* repetições da RE "
"anterior, tentando corresponder ao maior número de repetições possível. Por "
"exemplo, ``a{3,5}`` corresponderá de 3 a 5 caracteres ``'a'``. Omitir *m* "
"especifica um limite inferior de zero e omitir *n* especifica um limite "
"superior infinito. Por exemplo, ``a{4,}b`` corresponderá a ``'aaaab'`` ou a "
"mil caracteres ``'a'`` seguidos de um ``'b'``, mas não a ``'aaab'``. A "
"vírgula não pode ser omitida ou o modificador seria confundido com a forma "
"descrita anteriormente."

#: ../../library/re.rst:179
msgid "``{m,n}?``"
msgstr "``{m,n}?``"

#: ../../library/re.rst:175
msgid ""
"Causes the resulting RE to match from *m* to *n* repetitions of the "
"preceding RE, attempting to match as *few* repetitions as possible.  This is"
" the non-greedy version of the previous qualifier.  For example, on the "
"6-character string ``'aaaaaa'``, ``a{3,5}`` will match 5 ``'a'`` characters,"
" while ``a{3,5}?`` will only match 3 characters."
msgstr ""

#: ../../library/re.rst:194
msgid "``\\``"
msgstr "``\\``"

#: ../../library/re.rst:184
msgid ""
"Either escapes special characters (permitting you to match characters like "
"``'*'``, ``'?'``, and so forth), or signals a special sequence; special "
"sequences are discussed below."
msgstr ""
"Ou escapa caracteres especiais (permitindo corresponder a caracteres como "
"``'*'``, ``'?'``, e assim por diante), ou sinaliza uma sequência especial; "
"as sequências especiais são discutidas abaixo."

#: ../../library/re.rst:188
msgid ""
"If you're not using a raw string to express the pattern, remember that "
"Python also uses the backslash as an escape sequence in string literals; if "
"the escape sequence isn't recognized by Python's parser, the backslash and "
"subsequent character are included in the resulting string.  However, if "
"Python would recognize the resulting sequence, the backslash should be "
"repeated twice.  This is complicated and hard to understand, so it's highly "
"recommended that you use raw strings for all but the simplest expressions."
msgstr ""
"Se não estiver a usar uma cadeia de caracteres bruta para expressar o "
"padrão, lembre-se de que o Python também usa a barra invertida como uma "
"sequência de escape em literais de cadeias de caracteres; se a sequência de "
"escape não for reconhecida pelo analisador do Python, a barra invertida e o "
"carácter seguinte são incluídos na cadeia de caracteres resultante. No "
"entanto, se o Python reconhecer a sequência resultante, a barra invertida "
"deve ser repetida duas vezes. Isto é complicado e difícil de compreender, "
"pelo que é altamente recomendado que utilize cadeias de caracteres brutas "
"para todas as expressões, exceto as mais simples."

#: ../../library/re.rst:255
msgid "``[]``"
msgstr "``[]``"

#: ../../library/re.rst:200
msgid "Used to indicate a set of characters.  In a set:"
msgstr "Usado para indicar um conjunto de caracteres. Num conjunto:"

#: ../../library/re.rst:202
msgid ""
"Characters can be listed individually, e.g. ``[amk]`` will match ``'a'``, "
"``'m'``, or ``'k'``."
msgstr ""
"Os caracteres podem ser listados individualmente, por exemplo, ``[amk]`` "
"corresponderá a ``'a'``, ``'m'`` ou ``'k'``."

#: ../../library/re.rst:207
msgid ""
"Ranges of characters can be indicated by giving two characters and "
"separating them by a ``'-'``, for example ``[a-z]`` will match any lowercase"
" ASCII letter, ``[0-5][0-9]`` will match all the two-digits numbers from "
"``00`` to ``59``, and ``[0-9A-Fa-f]`` will match any hexadecimal digit.  If "
"``-`` is escaped (e.g. ``[a\\-z]``) or if it's placed as the first or last "
"character (e.g. ``[-a]`` or ``[a-]``), it will match a literal ``'-'``."
msgstr ""
"Intervalos de caracteres podem ser indicados dando dois caracteres e "
"separando-os por um ``'-'``, por exemplo, ``[a-z]`` corresponderá a qualquer"
" letra minúscula ASCII, ``[0-5][0-9]`` corresponderá a todos os números de "
"dois dígitos de ``00`` a ``59``, e ``[0-9A-Fa-f]`` corresponderá a qualquer "
"dígito hexadecimal. Se ``-`` for escapado (por exemplo, ``[a\\-z]``) ou se "
"for colocado como o primeiro ou último carácter (por exemplo, ``[-a]`` ou "
"``[a-]``), corresponderá a um ``'-'`` literal."

#: ../../library/re.rst:214
msgid ""
"Special characters lose their special meaning inside sets.  For example, "
"``[(+*)]`` will match any of the literal characters ``'('``, ``'+'``, "
"``'*'``, or ``')'``."
msgstr ""

#: ../../library/re.rst:220
msgid ""
"Character classes such as ``\\w`` or ``\\S`` (defined below) are also "
"accepted inside a set, although the characters they match depends on whether"
" :const:`ASCII` or :const:`LOCALE` mode is in force."
msgstr ""

#: ../../library/re.rst:226
msgid ""
"Characters that are not within a range can be matched by "
":dfn:`complementing` the set.  If the first character of the set is ``'^'``,"
" all the characters that are *not* in the set will be matched.  For example,"
" ``[^5]`` will match any character except ``'5'``, and ``[^^]`` will match "
"any character except ``'^'``.  ``^`` has no special meaning if it's not the "
"first character in the set."
msgstr ""
"Os caracteres que não estão dentro de um intervalo podem ser correspondidos "
"através da :dfn:`complementação` do conjunto. Se o primeiro caractere do "
"conjunto for ``'^'``, todos os caracteres que *não* estão no conjunto serão "
"correspondidos. Por exemplo, ``[^5]`` corresponderá a qualquer caractere "
"exceto ``'5'``, e ``[^^]`` corresponderá a qualquer caractere exceto "
"``'^'``. ``^`` não tem significado especial se não for o primeiro caractere "
"no conjunto."

#: ../../library/re.rst:233
msgid ""
"To match a literal ``']'`` inside a set, precede it with a backslash, or "
"place it at the beginning of the set.  For example, both ``[()[\\]{}]`` and "
"``[]()[{}]`` will match a right bracket, as well as left bracket, braces, "
"and parentheses."
msgstr ""
"Para corresponder a um ``']'`` literal dentro de um conjunto, preceda-o com "
"uma barra invertida ou coloque-o no início do conjunto. Por exemplo, tanto "
"``[()[\\]{}]`` como ``[]()[{}]`` corresponderão a um colchete direito, bem "
"como a um colchete esquerdo, chavetas e parênteses."

#: ../../library/re.rst:243
msgid ""
"Support of nested sets and set operations as in `Unicode Technical Standard "
"#18`_ might be added in the future.  This would change the syntax, so to "
"facilitate this change a :exc:`FutureWarning` will be raised in ambiguous "
"cases for the time being. That includes sets starting with a literal ``'['``"
" or containing literal character sequences ``'--'``, ``'&&'``, ``'~~'``, and"
" ``'||'``.  To avoid a warning escape them with a backslash."
msgstr ""
"O suporte para conjuntos aninhados e operações de conjuntos, como no "
"`Unicode Technical Standard #18`_, pode ser adicionado no futuro. Isto "
"alteraria a sintaxe, pelo que, para facilitar esta alteração, um "
":exc:`FutureWarning` será gerado em casos ambíguos por enquanto. Isto inclui"
" conjuntos que começam com um ``'['`` literal ou que contêm sequências de "
"caracteres literais ``'--'``, ``'&&'``, ``'~~'`` e ``'||'``. Para evitar um "
"aviso, escape-os com uma barra invertida."

#: ../../library/re.rst:253
msgid ""
":exc:`FutureWarning` is raised if a character set contains constructs that "
"will change semantically in the future."
msgstr ""
"Um :exc:`FutureWarning` é gerado se um conjunto de caracteres contiver "
"construções que mudarão semanticamente no futuro."

#: ../../library/re.rst:268
msgid "``|``"
msgstr "``|``"

#: ../../library/re.rst:260
msgid ""
"``A|B``, where *A* and *B* can be arbitrary REs, creates a regular "
"expression that will match either *A* or *B*.  An arbitrary number of REs "
"can be separated by the ``'|'`` in this way.  This can be used inside groups"
" (see below) as well.  As the target string is scanned, REs separated by "
"``'|'`` are tried from left to right. When one pattern completely matches, "
"that branch is accepted. This means that once *A* matches, *B* will not be "
"tested further, even if it would produce a longer overall match.  In other "
"words, the ``'|'`` operator is never greedy.  To match a literal ``'|'``, "
"use ``\\|``, or enclose it inside a character class, as in ``[|]``."
msgstr ""

#: ../../library/re.rst:278
msgid "``(...)``"
msgstr "``(...)``"

#: ../../library/re.rst:274
msgid ""
"Matches whatever regular expression is inside the parentheses, and indicates"
" the start and end of a group; the contents of a group can be retrieved "
"after a match has been performed, and can be matched later in the string "
"with the ``\\number`` special sequence, described below.  To match the "
"literals ``'('`` or ``')'``, use ``\\(`` or ``\\)``, or enclose them inside "
"a character class: ``[(]``, ``[)]``."
msgstr ""

#: ../../library/re.rst:287
msgid "``(?...)``"
msgstr "``(?...)``"

#: ../../library/re.rst:283
msgid ""
"This is an extension notation (a ``'?'`` following a ``'('`` is not "
"meaningful otherwise).  The first character after the ``'?'`` determines "
"what the meaning and further syntax of the construct is. Extensions usually "
"do not create a new group; ``(?P<name>...)`` is the only exception to this "
"rule. Following are the currently supported extensions."
msgstr ""
"Isto é uma notação de extensão (um ``'?'`` seguinte a um ``'('`` não tem "
"outro significado). O primeiro caractere após o ``'?'`` determina o "
"significado e a sintaxe adicional da construção. As extensões geralmente não"
" criam um novo grupo; ``(?P<name>...)`` é a única exceção a esta regra. "
"Seguem-se as extensões atualmente suportadas."

#: ../../library/re.rst:301
msgid "``(?aiLmsux)``"
msgstr "``(?aiLmsux)``"

#: ../../library/re.rst:290
msgid ""
"(One or more letters from the set ``'a'``, ``'i'``, ``'L'``, ``'m'``, "
"``'s'``, ``'u'``, ``'x'``.)  The group matches the empty string; the letters"
" set the corresponding flags: :const:`re.A` (ASCII-only matching), "
":const:`re.I` (ignore case), :const:`re.L` (locale dependent), :const:`re.M`"
" (multi-line), :const:`re.S` (dot matches all), :const:`re.U` (Unicode "
"matching), and :const:`re.X` (verbose), for the entire regular expression. "
"(The flags are described in :ref:`contents-of-module-re`.) This is useful if"
" you wish to include the flags as part of the regular expression, instead of"
" passing a *flag* argument to the :func:`re.compile` function.  Flags should"
" be used first in the expression string."
msgstr ""

#: ../../library/re.rst:309
msgid "``(?:...)``"
msgstr "``(?:...)``"

#: ../../library/re.rst:306
msgid ""
"A non-capturing version of regular parentheses.  Matches whatever regular "
"expression is inside the parentheses, but the substring matched by the group"
" *cannot* be retrieved after performing a match or referenced later in the "
"pattern."
msgstr ""
"Uma versão não capturadora de parênteses regulares. Corresponde a qualquer "
"expressão regular dentro dos parênteses, mas a subcadeia correspondida pelo "
"grupo *não* pode ser recuperada após a realização de uma correspondência ou "
"referenciada mais tarde no padrão."

#: ../../library/re.rst:335
msgid "``(?aiLmsux-imsx:...)``"
msgstr "``(?aiLmsux-imsx:...)``"

#: ../../library/re.rst:312
msgid ""
"(Zero or more letters from the set ``'a'``, ``'i'``, ``'L'``, ``'m'``, "
"``'s'``, ``'u'``, ``'x'``, optionally followed by ``'-'`` followed by one or"
" more letters from the ``'i'``, ``'m'``, ``'s'``, ``'x'``.) The letters set "
"or remove the corresponding flags: :const:`re.A` (ASCII-only matching), "
":const:`re.I` (ignore case), :const:`re.L` (locale dependent), :const:`re.M`"
" (multi-line), :const:`re.S` (dot matches all), :const:`re.U` (Unicode "
"matching), and :const:`re.X` (verbose), for the part of the expression. (The"
" flags are described in :ref:`contents-of-module-re`.)"
msgstr ""

#: ../../library/re.rst:322
msgid ""
"The letters ``'a'``, ``'L'`` and ``'u'`` are mutually exclusive when used as"
" inline flags, so they can't be combined or follow ``'-'``.  Instead, when "
"one of them appears in an inline group, it overrides the matching mode in "
"the enclosing group.  In Unicode patterns ``(?a:...)`` switches to ASCII-"
"only matching, and ``(?u:...)`` switches to Unicode matching (default).  In "
"byte pattern ``(?L:...)`` switches to locale depending matching, and "
"``(?a:...)`` switches to ASCII-only matching (default). This override is "
"only in effect for the narrow inline group, and the original matching mode "
"is restored outside of the group."
msgstr ""

#: ../../library/re.rst:334
msgid "The letters ``'a'``, ``'L'`` and ``'u'`` also can be used in a group."
msgstr ""
"As letras ``'a'``, ``'L'`` e ``'u'`` também podem ser usadas num grupo."

#: ../../library/re.rst:362
msgid "``(?P<name>...)``"
msgstr "``(?P<name>...)``"

#: ../../library/re.rst:340
msgid ""
"Similar to regular parentheses, but the substring matched by the group is "
"accessible via the symbolic group name *name*.  Group names must be valid "
"Python identifiers, and each group name must be defined only once within a "
"regular expression.  A symbolic group is also a numbered group, just as if "
"the group were not named."
msgstr ""

#: ../../library/re.rst:346
msgid ""
"Named groups can be referenced in three contexts.  If the pattern is "
"``(?P<quote>['\"]).*?(?P=quote)`` (i.e. matching a string quoted with either"
" single or double quotes):"
msgstr ""
"Os grupos nomeados podem ser referenciados em três contextos. Se o padrão "
"for ``(?P<quote>['\"]).*?(?P=quote)`` (ou seja, correspondendo a uma cadeia "
"de caracteres entre aspas simples ou duplas):"

#: ../../library/re.rst:351
msgid "Context of reference to group \"quote\""
msgstr "Contexto de referência ao grupo \"quote\""

#: ../../library/re.rst:351
msgid "Ways to reference it"
msgstr "Formas de o referenciar"

#: ../../library/re.rst:353
msgid "in the same pattern itself"
msgstr "no próprio padrão"

#: ../../library/re.rst:353
msgid "``(?P=quote)`` (as shown)"
msgstr "``(?P=quote)`` (como mostrado)"

#: ../../library/re.rst:354 ../../library/re.rst:361
msgid "``\\1``"
msgstr "``\\1``"

#: ../../library/re.rst:356
msgid "when processing match object *m*"
msgstr "ao processar o objeto de correspondência *m*"

#: ../../library/re.rst:356
msgid "``m.group('quote')``"
msgstr "``m.group('quote')``"

#: ../../library/re.rst:357
msgid "``m.end('quote')`` (etc.)"
msgstr "``m.end('quote')`` (etc.)"

#: ../../library/re.rst:359
msgid "in a string passed to the *repl* argument of ``re.sub()``"
msgstr "numa cadeia de caracteres passada ao argumento *repl* de ``re.sub()``"

#: ../../library/re.rst:359
msgid "``\\g<quote>``"
msgstr "``\\g<quote>``"

#: ../../library/re.rst:360
msgid "``\\g<1>``"
msgstr "``\\g<1>``"

#: ../../library/re.rst:368
msgid "``(?P=name)``"
msgstr "``(?P=name)``"

#: ../../library/re.rst:367
msgid ""
"A backreference to a named group; it matches whatever text was matched by "
"the earlier group named *name*."
msgstr ""
"Uma referência retroativa a um grupo nomeado; corresponde a qualquer texto "
"que tenha sido correspondido pelo grupo anterior nomeado *name*."

#: ../../library/re.rst:373
msgid "``(?#...)``"
msgstr "``(?#...)``"

#: ../../library/re.rst:373
msgid "A comment; the contents of the parentheses are simply ignored."
msgstr "Um comentário; o conteúdo dos parênteses é simplesmente ignorado."

#: ../../library/re.rst:380
msgid "``(?=...)``"
msgstr "``(?=...)``"

#: ../../library/re.rst:378
msgid ""
"Matches if ``...`` matches next, but doesn't consume any of the string.  "
"This is called a :dfn:`lookahead assertion`.  For example, ``Isaac "
"(?=Asimov)`` will match ``'Isaac '`` only if it's followed by ``'Asimov'``."
msgstr ""
"Corresponde se ``...`` corresponder a seguir, mas não consome nenhuma parte "
"da cadeia de caracteres. Isto é chamado de :dfn:`afirmação de antevisão`. "
"Por exemplo, ``Isaac (?=Asimov)`` corresponderá a ``'Isaac '`` apenas se for"
" seguido por ``'Asimov'``."

#: ../../library/re.rst:387
msgid "``(?!...)``"
msgstr "``(?!...)``"

#: ../../library/re.rst:385
msgid ""
"Matches if ``...`` doesn't match next.  This is a :dfn:`negative lookahead "
"assertion`. For example, ``Isaac (?!Asimov)`` will match ``'Isaac '`` only "
"if it's *not* followed by ``'Asimov'``."
msgstr ""
"Corresponde se ``...`` não corresponder a seguir. Isto é uma :dfn:`afirmação"
" de antevisão negativa`. Por exemplo, ``Isaac (?!Asimov)`` corresponderá a "
"``'Isaac '`` apenas se *não* for seguido por ``'Asimov'``."

#: ../../library/re.rst:414
msgid "``(?<=...)``"
msgstr "``(?<=...)``"

#: ../../library/re.rst:392
msgid ""
"Matches if the current position in the string is preceded by a match for "
"``...`` that ends at the current position.  This is called a :dfn:`positive "
"lookbehind assertion`. ``(?<=abc)def`` will find a match in ``'abcdef'``, "
"since the lookbehind will back up 3 characters and check if the contained "
"pattern matches. The contained pattern must only match strings of some fixed"
" length, meaning that ``abc`` or ``a|b`` are allowed, but ``a*`` and "
"``a{3,4}`` are not.  Note that patterns which start with positive lookbehind"
" assertions will not match at the beginning of the string being searched; "
"you will most likely want to use the :func:`search` function rather than the"
" :func:`match` function:"
msgstr ""
"Corresponde se a posição atual na cadeia de caracteres for precedida por uma"
" correspondência para ``...`` que termina na posição atual. Isto é chamado "
"de :dfn:`afirmação de retrovisão positiva`. ``(?<=abc)def`` encontrará uma "
"correspondência em ``'abcdef'``, uma vez que a retrovisão retrocederá 3 "
"caracteres e verificará se o padrão contido corresponde. O padrão contido só"
" deve corresponder a cadeias de caracteres de algum comprimento fixo, o que "
"significa que ``abc`` ou ``a|b`` são permitidos, mas ``a*`` e ``a{3,4}`` não"
" são. Note que padrões que começam com afirmações de retrovisão positiva não"
" corresponderão no início da cadeia de caracteres a ser pesquisada; "
"provavelmente pretenderá usar a função :func:`search` em vez da função "
":func:`match`:"

#: ../../library/re.rst:407
msgid "This example looks for a word following a hyphen:"
msgstr "Este exemplo procura uma palavra seguinte a um hífen:"

#: ../../library/re.rst:413
msgid "Added support for group references of fixed length."
msgstr "Adicionado suporte para referências a grupos de comprimento fixo."

#: ../../library/re.rst:423
msgid "``(?<!...)``"
msgstr "``(?<!...)``"

#: ../../library/re.rst:419
msgid ""
"Matches if the current position in the string is not preceded by a match for"
" ``...``.  This is called a :dfn:`negative lookbehind assertion`.  Similar "
"to positive lookbehind assertions, the contained pattern must only match "
"strings of some fixed length.  Patterns which start with negative lookbehind"
" assertions may match at the beginning of the string being searched."
msgstr ""
"Corresponde se a posição atual na cadeia de caracteres não for precedida por"
" uma correspondência para ``...``. Isto é chamado de :dfn:`afirmação de "
"retrovisão negativa`. Semelhante às afirmações de retrovisão positiva, o "
"padrão contido só deve corresponder a cadeias de caracteres de algum "
"comprimento fixo. Padrões que começam com afirmações de retrovisão negativa "
"podem corresponder no início da cadeia de caracteres a ser pesquisada."

#: ../../library/re.rst:435
msgid "``(?(id/name)yes-pattern|no-pattern)``"
msgstr "``(?(id/name)yes-pattern|no-pattern)``"

#: ../../library/re.rst:429
msgid ""
"Will try to match with ``yes-pattern`` if the group with given *id* or "
"*name* exists, and with ``no-pattern`` if it doesn't. ``no-pattern`` is "
"optional and can be omitted. For example, "
"``(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)`` is a poor email matching pattern, "
"which will match with ``'<user@host.com>'`` as well as ``'user@host.com'``, "
"but not with ``'<user@host.com'`` nor ``'user@host.com>'``."
msgstr ""
"Tentará corresponder com ``yes-pattern`` se o grupo com o *id* ou *name* "
"dado existir e com ``no-pattern`` se não existir. ``no-pattern`` é opcional "
"e pode ser omitido. Por exemplo, ``(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)`` é "
"um padrão de correspondência de email fraco, que corresponderá a "
"``'<user@host.com>'`` assim como a ``'user@host.com'``, mas não a "
"``'<user@host.com'`` nem a ``'user@host.com>'``."

#: ../../library/re.rst:437
msgid ""
"The special sequences consist of ``'\\'`` and a character from the list "
"below. If the ordinary character is not an ASCII digit or an ASCII letter, "
"then the resulting RE will match the second character.  For example, ``\\$``"
" matches the character ``'$'``."
msgstr ""
"As sequências especiais consistem em ``'\\'`` e um caractere da lista "
"abaixo. Se o caractere ordinário não for um dígito ASCII ou uma letra ASCII,"
" então a RE resultante corresponderá ao segundo caractere. Por exemplo, "
"``\\$`` corresponde ao caractere ``'$'``."

#: ../../library/re.rst:452
msgid "``\\number``"
msgstr "``\\number``"

#: ../../library/re.rst:445
msgid ""
"Matches the contents of the group of the same number.  Groups are numbered "
"starting from 1.  For example, ``(.+) \\1`` matches ``'the the'`` or ``'55 "
"55'``, but not ``'thethe'`` (note the space after the group).  This special "
"sequence can only be used to match one of the first 99 groups.  If the first"
" digit of *number* is 0, or *number* is 3 octal digits long, it will not be "
"interpreted as a group match, but as the character with octal value "
"*number*. Inside the ``'['`` and ``']'`` of a character class, all numeric "
"escapes are treated as characters."
msgstr ""
"Corresponde ao conteúdo do grupo do mesmo número. Os grupos são numerados a "
"partir de 1. Por exemplo, ``(.+) \\1`` corresponde a ``'the the'`` ou ``'55 "
"55'``, mas não a ``'thethe'`` (note o espaço após o grupo). Esta sequência "
"especial só pode ser usada para corresponder a um dos primeiros 99 grupos. "
"Se o primeiro dígito de *number* for 0, ou se *number* tiver 3 dígitos "
"octais de comprimento, não será interpretado como uma correspondência de "
"grupo, mas como o carácter com valor octal *number*. Dentro de ``'['`` e "
"``']'`` de uma classe de caracteres, todos os escapes numéricos são tratados"
" como caracteres."

#: ../../library/re.rst:457
msgid "``\\A``"
msgstr "``\\A``"

#: ../../library/re.rst:457
msgid "Matches only at the start of the string."
msgstr "Corresponde apenas ao início da cadeia de caracteres."

#: ../../library/re.rst:473
msgid "``\\b``"
msgstr "``\\b``"

#: ../../library/re.rst:462
msgid ""
"Matches the empty string, but only at the beginning or end of a word. A word"
" is defined as a sequence of word characters.  Note that formally, ``\\b`` "
"is defined as the boundary between a ``\\w`` and a ``\\W`` character (or "
"vice versa), or between ``\\w`` and the beginning/end of the string. This "
"means that ``r'\\bfoo\\b'`` matches ``'foo'``, ``'foo.'``, ``'(foo)'``, "
"``'bar foo baz'`` but not ``'foobar'`` or ``'foo3'``."
msgstr ""

#: ../../library/re.rst:469
msgid ""
"By default Unicode alphanumerics are the ones used in Unicode patterns, but "
"this can be changed by using the :const:`ASCII` flag.  Word boundaries are "
"determined by the current locale if the :const:`LOCALE` flag is used. Inside"
" a character range, ``\\b`` represents the backspace character, for "
"compatibility with Python's string literals."
msgstr ""

#: ../../library/re.rst:484
msgid "``\\B``"
msgstr "``\\B``"

#: ../../library/re.rst:478
msgid ""
"Matches the empty string, but only when it is *not* at the beginning or end "
"of a word.  This means that ``r'py\\B'`` matches ``'python'``, ``'py3'``, "
"``'py2'``, but not ``'py'``, ``'py.'``, or ``'py!'``. ``\\B`` is just the "
"opposite of ``\\b``, so word characters in Unicode patterns are Unicode "
"alphanumerics or the underscore, although this can be changed by using the "
":const:`ASCII` flag.  Word boundaries are determined by the current locale "
"if the :const:`LOCALE` flag is used."
msgstr ""

#: ../../library/re.rst:496
msgid "``\\d``"
msgstr "``\\d``"

#: ../../library/re.rst:493 ../../library/re.rst:513 ../../library/re.rst:532
msgid "For Unicode (str) patterns:"
msgstr "Para padrões Unicode (str):"

#: ../../library/re.rst:490
msgid ""
"Matches any Unicode decimal digit (that is, any character in Unicode "
"character category [Nd]).  This includes ``[0-9]``, and also many other "
"digit characters.  If the :const:`ASCII` flag is used only ``[0-9]`` is "
"matched."
msgstr ""

#: ../../library/re.rst:496 ../../library/re.rst:517 ../../library/re.rst:538
msgid "For 8-bit (bytes) patterns:"
msgstr "Para padrões de 8 bits (bytes):"

#: ../../library/re.rst:496
msgid "Matches any decimal digit; this is equivalent to ``[0-9]``."
msgstr ""

#: ../../library/re.rst:503
msgid "``\\D``"
msgstr "``\\D``"

#: ../../library/re.rst:501
msgid ""
"Matches any character which is not a decimal digit. This is the opposite of "
"``\\d``. If the :const:`ASCII` flag is used this becomes the equivalent of "
"``[^0-9]``."
msgstr ""

#: ../../library/re.rst:517
msgid "``\\s``"
msgstr "``\\s``"

#: ../../library/re.rst:509
msgid ""
"Matches Unicode whitespace characters (which includes ``[ "
"\\t\\n\\r\\f\\v]``, and also many other characters, for example the non-"
"breaking spaces mandated by typography rules in many languages). If the "
":const:`ASCII` flag is used, only ``[ \\t\\n\\r\\f\\v]`` is matched."
msgstr ""

#: ../../library/re.rst:516
msgid ""
"Matches characters considered whitespace in the ASCII character set; this is"
" equivalent to ``[ \\t\\n\\r\\f\\v]``."
msgstr ""
"Corresponde a caracteres considerados espaços em branco no conjunto de "
"caracteres ASCII; isto é equivalente a ``[ \\t\\n\\r\\f\\v]``."

#: ../../library/re.rst:524
msgid "``\\S``"
msgstr "``\\S``"

#: ../../library/re.rst:522
msgid ""
"Matches any character which is not a whitespace character. This is the "
"opposite of ``\\s``. If the :const:`ASCII` flag is used this becomes the "
"equivalent of ``[^ \\t\\n\\r\\f\\v]``."
msgstr ""

#: ../../library/re.rst:538
msgid "``\\w``"
msgstr "``\\w``"

#: ../../library/re.rst:530
msgid ""
"Matches Unicode word characters; this includes alphanumeric characters (as "
"defined by :meth:`str.isalnum`) as well as the underscore (``_``). If the "
":const:`ASCII` flag is used, only ``[a-zA-Z0-9_]`` is matched."
msgstr ""

#: ../../library/re.rst:535
msgid ""
"Matches characters considered alphanumeric in the ASCII character set; this "
"is equivalent to ``[a-zA-Z0-9_]``.  If the :const:`LOCALE` flag is used, "
"matches characters considered alphanumeric in the current locale and the "
"underscore."
msgstr ""

#: ../../library/re.rst:547
msgid "``\\W``"
msgstr "``\\W``"

#: ../../library/re.rst:543
msgid ""
"Matches any character which is not a word character. This is the opposite of"
" ``\\w``. If the :const:`ASCII` flag is used this becomes the equivalent of "
"``[^a-zA-Z0-9_]``.  If the :const:`LOCALE` flag is used, matches characters "
"which are neither alphanumeric in the current locale nor the underscore."
msgstr ""

#: ../../library/re.rst:552
msgid "``\\Z``"
msgstr "``\\Z``"

#: ../../library/re.rst:552
msgid "Matches only at the end of the string."
msgstr "Corresponde apenas ao final da cadeia de caracteres."

#: ../../library/re.rst:568
msgid ""
"Most of the standard escapes supported by Python string literals are also "
"accepted by the regular expression parser::"
msgstr ""

#: ../../library/re.rst:575
msgid ""
"(Note that ``\\b`` is used to represent word boundaries, and means "
"\"backspace\" only inside character classes.)"
msgstr ""
"(Note que ``\\b`` é usado para representar fronteiras de palavras e "
"significa \"retrocesso\" apenas dentro de classes de caracteres.)"

#: ../../library/re.rst:578
msgid ""
"``'\\u'``, ``'\\U'``, and ``'\\N'`` escape sequences are only recognized in "
"Unicode patterns.  In bytes patterns they are errors.  Unknown escapes of "
"ASCII letters are reserved for future use and treated as errors."
msgstr ""

#: ../../library/re.rst:582
msgid ""
"Octal escapes are included in a limited form.  If the first digit is a 0, or"
" if there are three octal digits, it is considered an octal escape. "
"Otherwise, it is a group reference.  As for string literals, octal escapes "
"are always at most three digits in length."
msgstr ""
"Os escapes octais estão incluídos numa forma limitada. Se o primeiro dígito "
"for 0, ou se houver três dígitos octais, é considerado um escape octal. Caso"
" contrário, é uma referência a um grupo. Quanto aos literais de cadeias de "
"caracteres, os escapes octais têm sempre, no máximo, três dígitos de "
"comprimento."

#: ../../library/re.rst:587
msgid "The ``'\\u'`` and ``'\\U'`` escape sequences have been added."
msgstr "As sequências de escape ``'\\u'`` e ``'\\U'`` foram adicionadas."

#: ../../library/re.rst:590
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter now are errors."
msgstr ""
"Escapes desconhecidos consistindo em ``'\\'`` e uma letra ASCII são agora "
"erros."

#: ../../library/re.rst:593
msgid ""
"The ``'\\N{name}'`` escape sequence has been added. As in string literals, "
"it expands to the named Unicode character (e.g. ``'\\N{EM DASH}'``)."
msgstr ""

#: ../../library/re.rst:601
msgid "Module Contents"
msgstr "Conteúdo do módulo"

#: ../../library/re.rst:603
msgid ""
"The module defines several functions, constants, and an exception. Some of "
"the functions are simplified versions of the full featured methods for "
"compiled regular expressions.  Most non-trivial applications always use the "
"compiled form."
msgstr ""
"O módulo define várias funções, constantes e uma exceção. Algumas das "
"funções são versões simplificadas dos métodos completos para expressões "
"regulares compiladas. A maioria das aplicações não triviais usa sempre a "
"forma compilada."

#: ../../library/re.rst:610
msgid "Flags"
msgstr "*Flags*"

#: ../../library/re.rst:612
msgid ""
"Flag constants are now instances of :class:`RegexFlag`, which is a subclass "
"of :class:`enum.IntFlag`."
msgstr ""
"As constantes de *flags* são agora instâncias de :class:`RegexFlag`, que é "
"uma subclasse de :class:`enum.IntFlag`."

#: ../../library/re.rst:621
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\d``, ``\\D``, ``\\s`` and "
"``\\S`` perform ASCII-only matching instead of full Unicode matching.  This "
"is only meaningful for Unicode patterns, and is ignored for byte patterns. "
"Corresponds to the inline flag ``(?a)``."
msgstr ""

#: ../../library/re.rst:626
msgid ""
"Note that for backward compatibility, the :const:`re.U` flag still exists "
"(as well as its synonym :const:`re.UNICODE` and its embedded counterpart "
"``(?u)``), but these are redundant in Python 3 since matches are Unicode by "
"default for strings (and Unicode matching isn't allowed for bytes)."
msgstr ""

#: ../../library/re.rst:635
msgid ""
"Display debug information about compiled expression. No corresponding inline"
" flag."
msgstr ""

#: ../../library/re.rst:642
msgid ""
"Perform case-insensitive matching; expressions like ``[A-Z]`` will also "
"match lowercase letters.  Full Unicode matching (such as ``Ü`` matching "
"``ü``) also works unless the :const:`re.ASCII` flag is used to disable non-"
"ASCII matches.  The current locale does not change the effect of this flag "
"unless the :const:`re.LOCALE` flag is also used. Corresponds to the inline "
"flag ``(?i)``."
msgstr ""

#: ../../library/re.rst:649
msgid ""
"Note that when the Unicode patterns ``[a-z]`` or ``[A-Z]`` are used in "
"combination with the :const:`IGNORECASE` flag, they will match the 52 ASCII "
"letters and 4 additional non-ASCII letters: 'İ' (U+0130, Latin capital "
"letter I with dot above), 'ı' (U+0131, Latin small letter dotless i), 'ſ' "
"(U+017F, Latin small letter long s) and 'K' (U+212A, Kelvin sign). If the "
":const:`ASCII` flag is used, only letters 'a' to 'z' and 'A' to 'Z' are "
"matched."
msgstr ""

#: ../../library/re.rst:660
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B`` and case-insensitive matching "
"dependent on the current locale.  This flag can be used only with bytes "
"patterns.  The use of this flag is discouraged as the locale mechanism is "
"very unreliable, it only handles one \"culture\" at a time, and it only "
"works with 8-bit locales.  Unicode matching is already enabled by default in"
" Python 3 for Unicode (str) patterns, and it is able to handle different "
"locales/languages. Corresponds to the inline flag ``(?L)``."
msgstr ""

#: ../../library/re.rst:669
msgid ""
":const:`re.LOCALE` can be used only with bytes patterns and is not "
"compatible with :const:`re.ASCII`."
msgstr ""

#: ../../library/re.rst:673
msgid ""
"Compiled regular expression objects with the :const:`re.LOCALE` flag no "
"longer depend on the locale at compile time.  Only the locale at matching "
"time affects the result of matching."
msgstr ""

#: ../../library/re.rst:682
msgid ""
"When specified, the pattern character ``'^'`` matches at the beginning of "
"the string and at the beginning of each line (immediately following each "
"newline); and the pattern character ``'$'`` matches at the end of the string"
" and at the end of each line (immediately preceding each newline).  By "
"default, ``'^'`` matches only at the beginning of the string, and ``'$'`` "
"only at the end of the string and immediately before the newline (if any) at"
" the end of the string. Corresponds to the inline flag ``(?m)``."
msgstr ""

#: ../../library/re.rst:694
msgid ""
"Make the ``'.'`` special character match any character at all, including a "
"newline; without this flag, ``'.'`` will match anything *except* a newline. "
"Corresponds to the inline flag ``(?s)``."
msgstr ""

#: ../../library/re.rst:704
msgid ""
"This flag allows you to write regular expressions that look nicer and are "
"more readable by allowing you to visually separate logical sections of the "
"pattern and add comments. Whitespace within the pattern is ignored, except "
"when in a character class, or when preceded by an unescaped backslash, or "
"within tokens like ``*?``, ``(?:`` or ``(?P<...>``. For example, ``(? :`` "
"and ``* ?`` are not allowed. When a line contains a ``#`` that is not in a "
"character class and is not preceded by an unescaped backslash, all "
"characters from the leftmost such ``#`` through the end of the line are "
"ignored."
msgstr ""
"Esta *flag* permite escrever expressões regulares que parecem mais "
"agradáveis e são mais legíveis, permitindo separar visualmente secções "
"lógicas do padrão e adicionar comentários. Os espaços em branco dentro do "
"padrão são ignorados, exceto quando estão numa classe de caracteres, ou "
"quando precedidos por uma barra invertida não escapada, ou dentro de "
"*tokens* como ``*?``, ``(?:`` ou ``(?P<...>``. Por exemplo, ``(? :`` e ``* "
"?`` não são permitidos. Quando uma linha contém um ``#`` que não está numa "
"classe de caracteres e não é precedido por uma barra invertida não escapada,"
" todos os caracteres desde o ``#`` mais à esquerda até ao final da linha são"
" ignorados."

#: ../../library/re.rst:714
msgid ""
"This means that the two following regular expression objects that match a "
"decimal number are functionally equal::"
msgstr ""
"Isto significa que os dois objetos de expressão regular seguintes, que "
"correspondem a um número decimal, são funcionalmente iguais::"

#: ../../library/re.rst:722
msgid "Corresponds to the inline flag ``(?x)``."
msgstr "Corresponde à *flag* em linha ``(?x)``."

#: ../../library/re.rst:726
msgid "Functions"
msgstr "Funções"

#: ../../library/re.rst:730
msgid ""
"Compile a regular expression pattern into a :ref:`regular expression object "
"<re-objects>`, which can be used for matching using its "
":func:`~Pattern.match`, :func:`~Pattern.search` and other methods, described"
" below."
msgstr ""
"Compila um padrão de expressão regular num :ref:`objeto de expressão regular"
" <re-objects>`, que pode ser usado para correspondência usando os seus "
"métodos :func:`~Pattern.match`, :func:`~Pattern.search` e outros, descritos "
"abaixo."

#: ../../library/re.rst:735
msgid ""
"The expression's behaviour can be modified by specifying a *flags* value. "
"Values can be any of the following variables, combined using bitwise OR (the"
" ``|`` operator)."
msgstr ""

#: ../../library/re.rst:739
msgid "The sequence ::"
msgstr "A sequência ::"

#: ../../library/re.rst:744
msgid "is equivalent to ::"
msgstr "é equivalente a ::"

#: ../../library/re.rst:748
msgid ""
"but using :func:`re.compile` and saving the resulting regular expression "
"object for reuse is more efficient when the expression will be used several "
"times in a single program."
msgstr ""
"mas usar :func:`re.compile` e guardar o objeto de expressão regular "
"resultante para reutilização é mais eficiente quando a expressão será usada "
"várias vezes num único programa."

#: ../../library/re.rst:754
msgid ""
"The compiled versions of the most recent patterns passed to "
":func:`re.compile` and the module-level matching functions are cached, so "
"programs that use only a few regular expressions at a time needn't worry "
"about compiling regular expressions."
msgstr ""
"As versões compiladas dos padrões mais recentes passados para "
":func:`re.compile` e as funções de correspondência a nível de módulo são "
"guardadas em cache, pelo que os programas que usam apenas algumas expressões"
" regulares de cada vez não precisam de se preocupar com a compilação de "
"expressões regulares."

#: ../../library/re.rst:762
msgid ""
"Scan through *string* looking for the first location where the regular "
"expression *pattern* produces a match, and return a corresponding "
":ref:`match object <match-objects>`.  Return ``None`` if no position in the "
"string matches the pattern; note that this is different from finding a zero-"
"length match at some point in the string."
msgstr ""

#: ../../library/re.rst:771
msgid ""
"If zero or more characters at the beginning of *string* match the regular "
"expression *pattern*, return a corresponding :ref:`match object <match-"
"objects>`.  Return ``None`` if the string does not match the pattern; note "
"that this is different from a zero-length match."
msgstr ""

#: ../../library/re.rst:776
msgid ""
"Note that even in :const:`MULTILINE` mode, :func:`re.match` will only match "
"at the beginning of the string and not at the beginning of each line."
msgstr ""
"Note que, mesmo no modo :const:`MULTILINE`, :func:`re.match` só "
"corresponderá no início da cadeia de caracteres e não no início de cada "
"linha."

#: ../../library/re.rst:779
msgid ""
"If you want to locate a match anywhere in *string*, use :func:`search` "
"instead (see also :ref:`search-vs-match`)."
msgstr ""
"Se pretender localizar uma correspondência em qualquer lugar em *string*, "
"use :func:`search` em vez disso (consulte também :ref:`search-vs-match`)."

#: ../../library/re.rst:785
msgid ""
"If the whole *string* matches the regular expression *pattern*, return a "
"corresponding :ref:`match object <match-objects>`.  Return ``None`` if the "
"string does not match the pattern; note that this is different from a zero-"
"length match."
msgstr ""

#: ../../library/re.rst:795
msgid ""
"Split *string* by the occurrences of *pattern*.  If capturing parentheses "
"are used in *pattern*, then the text of all groups in the pattern are also "
"returned as part of the resulting list. If *maxsplit* is nonzero, at most "
"*maxsplit* splits occur, and the remainder of the string is returned as the "
"final element of the list. ::"
msgstr ""
"Divide *string* pelas ocorrências de *pattern*. Se parênteses de captura "
"forem usados em *pattern*, então o texto de todos os grupos no padrão também"
" é devolvido como parte da lista resultante. Se *maxsplit* for não nulo, "
"ocorrem, no máximo, *maxsplit* divisões e o restante da cadeia de caracteres"
" é devolvido como o último elemento da lista. ::"

#: ../../library/re.rst:810
msgid ""
"If there are capturing groups in the separator and it matches at the start "
"of the string, the result will start with an empty string.  The same holds "
"for the end of the string::"
msgstr ""
"Se houver grupos de captura no separador e este corresponder ao início da "
"cadeia de caracteres, o resultado começará com uma cadeia de caracteres "
"vazia. O mesmo aplica-se ao final da cadeia de caracteres::"

#: ../../library/re.rst:817
msgid ""
"That way, separator components are always found at the same relative indices"
" within the result list."
msgstr ""
"Dessa forma, os componentes do separador são sempre encontrados nos mesmos "
"índices relativos dentro da lista de resultados."

#: ../../library/re.rst:820
msgid ""
"Empty matches for the pattern split the string only when not adjacent to a "
"previous empty match."
msgstr ""

#: ../../library/re.rst:830 ../../library/re.rst:920 ../../library/re.rst:944
msgid "Added the optional flags argument."
msgstr "Adicionado o argumento opcional *flags*."

#: ../../library/re.rst:833
msgid ""
"Added support of splitting on a pattern that could match an empty string."
msgstr ""
"Adicionado suporte para dividir num padrão que pode corresponder a uma "
"cadeia de caracteres vazia."

#: ../../library/re.rst:839
msgid ""
"Return all non-overlapping matches of *pattern* in *string*, as a list of "
"strings or tuples.  The *string* is scanned left-to-right, and matches are "
"returned in the order found.  Empty matches are included in the result."
msgstr ""
"Devolve todas as correspondências não sobrepostas de *pattern* em *string*, "
"como uma lista de cadeias de caracteres ou tuplos. A *string* é analisada da"
" esquerda para a direita e as correspondências são devolvidas pela ordem em "
"que foram encontradas. Correspondências vazias são incluídas no resultado."

#: ../../library/re.rst:843
msgid ""
"The result depends on the number of capturing groups in the pattern. If "
"there are no groups, return a list of strings matching the whole pattern.  "
"If there is exactly one group, return a list of strings matching that group."
"  If multiple groups are present, return a list of tuples of strings "
"matching the groups.  Non-capturing groups do not affect the form of the "
"result."
msgstr ""
"O resultado depende do número de grupos de captura no padrão. Se não houver "
"grupos, devolve uma lista de cadeias de caracteres que correspondem a todo o"
" padrão. Se houver exatamente um grupo, devolve uma lista de cadeias de "
"caracteres que correspondem a esse grupo. Se estiverem presentes vários "
"grupos, devolve uma lista de tuplos de cadeias de caracteres que "
"correspondem aos grupos. Os grupos não capturadores não afetam a forma do "
"resultado."

#: ../../library/re.rst:855 ../../library/re.rst:866
msgid "Non-empty matches can now start just after a previous empty match."
msgstr ""
"Correspondências não vazias podem agora começar logo após uma "
"correspondência vazia anterior."

#: ../../library/re.rst:861
msgid ""
"Return an :term:`iterator` yielding :ref:`match objects <match-objects>` "
"over all non-overlapping matches for the RE *pattern* in *string*.  The "
"*string* is scanned left-to-right, and matches are returned in the order "
"found.  Empty matches are included in the result."
msgstr ""

#: ../../library/re.rst:872
msgid ""
"Return the string obtained by replacing the leftmost non-overlapping "
"occurrences of *pattern* in *string* by the replacement *repl*.  If the "
"pattern isn't found, *string* is returned unchanged.  *repl* can be a string"
" or a function; if it is a string, any backslash escapes in it are "
"processed.  That is, ``\\n`` is converted to a single newline character, "
"``\\r`` is converted to a carriage return, and so forth.  Unknown escapes of"
" ASCII letters are reserved for future use and treated as errors.  Other "
"unknown escapes such as ``\\&`` are left alone. Backreferences, such as "
"``\\6``, are replaced with the substring matched by group 6 in the pattern. "
"For example::"
msgstr ""
"Devolve a cadeia de caracteres obtida substituindo as ocorrências mais à "
"esquerda e não sobrepostas de *pattern* em *string* pela substituição "
"*repl*. Se o padrão não for encontrado, *string* é devolvida inalterada. "
"*repl* pode ser uma cadeia de caracteres ou uma função; se for uma cadeia de"
" caracteres, quaisquer escapes de barra invertida nela são processados. Ou "
"seja, ``\\n`` é convertido num único carácter de nova linha, ``\\r`` é "
"convertido num carácter de retorno de carro, e assim por diante. Escapes "
"desconhecidos de letras ASCII estão reservados para uso futuro e são "
"tratados como erros. Outros escapes desconhecidos, como ``\\&``, são "
"deixados como estão. Referências retroativas, como ``\\6``, são substituídas"
" pela subcadeia correspondida pelo grupo 6 no padrão. Por exemplo::"

#: ../../library/re.rst:888
msgid ""
"If *repl* is a function, it is called for every non-overlapping occurrence "
"of *pattern*.  The function takes a single :ref:`match object <match-"
"objects>` argument, and returns the replacement string.  For example::"
msgstr ""

#: ../../library/re.rst:900
msgid "The pattern may be a string or a :ref:`pattern object <re-objects>`."
msgstr ""

#: ../../library/re.rst:902
msgid ""
"The optional argument *count* is the maximum number of pattern occurrences "
"to be replaced; *count* must be a non-negative integer.  If omitted or zero,"
" all occurrences will be replaced. Empty matches for the pattern are "
"replaced only when not adjacent to a previous empty match, so ``sub('x*', "
"'-', 'abxd')`` returns ``'-a-b--d-'``."
msgstr ""

#: ../../library/re.rst:910
msgid ""
"In string-type *repl* arguments, in addition to the character escapes and "
"backreferences described above, ``\\g<name>`` will use the substring matched"
" by the group named ``name``, as defined by the ``(?P<name>...)`` syntax. "
"``\\g<number>`` uses the corresponding group number; ``\\g<2>`` is therefore"
" equivalent to ``\\2``, but isn't ambiguous in a replacement such as "
"``\\g<2>0``.  ``\\20`` would be interpreted as a reference to group 20, not "
"a reference to group 2 followed by the literal character ``'0'``.  The "
"backreference ``\\g<0>`` substitutes in the entire substring matched by the "
"RE."
msgstr ""
"Nos argumentos *repl* do tipo cadeia de caracteres, além dos escapes de "
"caracteres e das referências retroativas descritas acima, ``\\g<name>`` "
"utilizará a subcadeia correspondida pelo grupo nomeado ``name``, como "
"definido pela sintaxe ``(?P<name>...)``. ``\\g<number>`` usa o número de "
"grupo correspondente; ``\\g<2>`` é, portanto, equivalente a ``\\2``, mas não"
" é ambíguo numa substituição como ``\\g<2>0``. ``\\20`` seria interpretado "
"como uma referência ao grupo 20, não como uma referência ao grupo 2 seguida "
"do carácter literal ``'0'``. A referência retroativa ``\\g<0>`` substitui "
"toda a subcadeia correspondida pela RE."

#: ../../library/re.rst:923 ../../library/re.rst:947 ../../library/re.rst:1181
msgid "Unmatched groups are replaced with an empty string."
msgstr ""
"Grupos não correspondidos são substituídos por uma cadeia de caracteres "
"vazia."

#: ../../library/re.rst:926
msgid ""
"Unknown escapes in *pattern* consisting of ``'\\'`` and an ASCII letter now "
"are errors."
msgstr ""
"Escapes desconhecidos em *pattern* consistindo em ``'\\'`` e uma letra ASCII"
" são agora erros."

#: ../../library/re.rst:930
msgid ""
"Unknown escapes in *repl* consisting of ``'\\'`` and an ASCII letter now are"
" errors."
msgstr ""

#: ../../library/re.rst:934
msgid ""
"Empty matches for the pattern are replaced when adjacent to a previous non-"
"empty match."
msgstr ""

#: ../../library/re.rst:941
msgid ""
"Perform the same operation as :func:`sub`, but return a tuple ``(new_string,"
" number_of_subs_made)``."
msgstr ""
"Realiza a mesma operação que :func:`sub`, mas devolve um tuplo "
"``(new_string, number_of_subs_made)``."

#: ../../library/re.rst:953
msgid ""
"Escape special characters in *pattern*. This is useful if you want to match "
"an arbitrary literal string that may have regular expression metacharacters "
"in it.  For example::"
msgstr ""
"Escapa caracteres especiais em *pattern*. Isto é útil se pretender "
"corresponder a uma cadeia de caracteres literal arbitrária que pode conter "
"metacaracteres de expressões regulares. Por exemplo::"

#: ../../library/re.rst:968
msgid ""
"This function must not be used for the replacement string in :func:`sub` and"
" :func:`subn`, only backslashes should be escaped.  For example::"
msgstr ""
"Esta função não deve ser usada para a cadeia de caracteres de substituição "
"em :func:`sub` e :func:`subn`; apenas as barras invertidas devem ser "
"escapadas. Por exemplo::"

#: ../../library/re.rst:976
msgid "The ``'_'`` character is no longer escaped."
msgstr "O caractere ``'_'`` já não é escapado."

#: ../../library/re.rst:979
msgid ""
"Only characters that can have special meaning in a regular expression are "
"escaped. As a result, ``'!'``, ``'\"'``, ``'%'``, ``\"'\"``, ``','``, "
"``'/'``, ``':'``, ``';'``, ``'<'``, ``'='``, ``'>'``, ``'@'``, and ``\"`\"``"
" are no longer escaped."
msgstr ""
"Apenas os caracteres que podem ter significado especial numa expressão "
"regular são escapados. Como resultado, ``'!'``, ``'\"'``, ``'%'``, "
"``\"'\"``, ``','``, ``'/'``, ``':'``, ``';'``, ``'<'``, ``'='``, ``'>'``, "
"``'@'`` e ``\"`\"`` já não são escapados."

#: ../../library/re.rst:988
msgid "Clear the regular expression cache."
msgstr "Limpa a cache de expressões regulares."

#: ../../library/re.rst:992
msgid "Exceptions"
msgstr "Exceções"

#: ../../library/re.rst:996
msgid ""
"Exception raised when a string passed to one of the functions here is not a "
"valid regular expression (for example, it might contain unmatched "
"parentheses) or when some other error occurs during compilation or matching."
"  It is never an error if a string contains no match for a pattern.  The "
"error instance has the following additional attributes:"
msgstr ""

#: ../../library/re.rst:1004
msgid "The unformatted error message."
msgstr "A mensagem de erro não formatada."

#: ../../library/re.rst:1008
msgid "The regular expression pattern."
msgstr "O padrão de expressão regular."

#: ../../library/re.rst:1012
msgid "The index in *pattern* where compilation failed (may be ``None``)."
msgstr "O índice em *pattern* onde a compilação falhou (pode ser ``None``)."

#: ../../library/re.rst:1016
msgid "The line corresponding to *pos* (may be ``None``)."
msgstr "A linha correspondente a *pos* (pode ser ``None``)."

#: ../../library/re.rst:1020
msgid "The column corresponding to *pos* (may be ``None``)."
msgstr "A coluna correspondente a *pos* (pode ser ``None``)."

#: ../../library/re.rst:1022
msgid "Added additional attributes."
msgstr "Adicionados atributos adicionais."

#: ../../library/re.rst:1028
msgid "Regular Expression Objects"
msgstr "Objetos de expressão regular"

#: ../../library/re.rst:1030
msgid ""
"Compiled regular expression objects support the following methods and "
"attributes:"
msgstr ""

#: ../../library/re.rst:1035
msgid ""
"Scan through *string* looking for the first location where this regular "
"expression produces a match, and return a corresponding :ref:`match object "
"<match-objects>`.  Return ``None`` if no position in the string matches the "
"pattern; note that this is different from finding a zero-length match at "
"some point in the string."
msgstr ""

#: ../../library/re.rst:1041
msgid ""
"The optional second parameter *pos* gives an index in the string where the "
"search is to start; it defaults to ``0``.  This is not completely equivalent"
" to slicing the string; the ``'^'`` pattern character matches at the real "
"beginning of the string and at positions just after a newline, but not "
"necessarily at the index where the search is to start."
msgstr ""
"O segundo parâmetro opcional *pos* dá um índice na cadeia de caracteres onde"
" a pesquisa deve começar; o valor predefinido é ``0``. Isto não é "
"completamente equivalente a fatiar a cadeia de caracteres; o carácter de "
"padrão ``'^'`` corresponde ao início real da cadeia de caracteres e em "
"posições logo após uma nova linha, mas não necessariamente no índice onde a "
"pesquisa deve começar."

#: ../../library/re.rst:1047
msgid ""
"The optional parameter *endpos* limits how far the string will be searched; "
"it will be as if the string is *endpos* characters long, so only the "
"characters from *pos* to ``endpos - 1`` will be searched for a match.  If "
"*endpos* is less than *pos*, no match will be found; otherwise, if *rx* is a"
" compiled regular expression object, ``rx.search(string, 0, 50)`` is "
"equivalent to ``rx.search(string[:50], 0)``. ::"
msgstr ""
"O parâmetro opcional *endpos* limita até onde a cadeia de caracteres será "
"pesquisada; será como se a cadeia de caracteres tivesse *endpos* caracteres "
"de comprimento, pelo que apenas os caracteres de *pos* a ``endpos - 1`` "
"serão pesquisados para uma correspondência. Se *endpos* for menor que *pos*,"
" nenhuma correspondência será encontrada; caso contrário, se *rx* for um "
"objeto de expressão regular compilada, ``rx.search(string, 0, 50)`` é "
"equivalente a ``rx.search(string[:50], 0)``. ::"

#: ../../library/re.rst:1062
msgid ""
"If zero or more characters at the *beginning* of *string* match this regular"
" expression, return a corresponding :ref:`match object <match-objects>`. "
"Return ``None`` if the string does not match the pattern; note that this is "
"different from a zero-length match."
msgstr ""

#: ../../library/re.rst:1067 ../../library/re.rst:1085
msgid ""
"The optional *pos* and *endpos* parameters have the same meaning as for the "
":meth:`~Pattern.search` method. ::"
msgstr ""
"Os parâmetros opcionais *pos* e *endpos* têm o mesmo significado que para o "
"método :meth:`~Pattern.search`. ::"

#: ../../library/re.rst:1075
msgid ""
"If you want to locate a match anywhere in *string*, use "
":meth:`~Pattern.search` instead (see also :ref:`search-vs-match`)."
msgstr ""
"Se pretender localizar uma correspondência em qualquer lugar em *string*, "
"use :meth:`~Pattern.search` em vez disso (consulte também :ref:`search-vs-"
"match`)."

#: ../../library/re.rst:1081
msgid ""
"If the whole *string* matches this regular expression, return a "
"corresponding :ref:`match object <match-objects>`.  Return ``None`` if the "
"string does not match the pattern; note that this is different from a zero-"
"length match."
msgstr ""

#: ../../library/re.rst:1099
msgid "Identical to the :func:`split` function, using the compiled pattern."
msgstr "Idêntico à função :func:`split`, usando o padrão compilado."

#: ../../library/re.rst:1104
msgid ""
"Similar to the :func:`findall` function, using the compiled pattern, but "
"also accepts optional *pos* and *endpos* parameters that limit the search "
"region like for :meth:`search`."
msgstr ""
"Semelhante à função :func:`findall`, usando o padrão compilado, mas também "
"aceita parâmetros opcionais *pos* e *endpos* que limitam a região de "
"pesquisa, tal como para :meth:`search`."

#: ../../library/re.rst:1111
msgid ""
"Similar to the :func:`finditer` function, using the compiled pattern, but "
"also accepts optional *pos* and *endpos* parameters that limit the search "
"region like for :meth:`search`."
msgstr ""
"Semelhante à função :func:`finditer`, usando o padrão compilado, mas também "
"aceita parâmetros opcionais *pos* e *endpos* que limitam a região de "
"pesquisa, tal como para :meth:`search`."

#: ../../library/re.rst:1118
msgid "Identical to the :func:`sub` function, using the compiled pattern."
msgstr "Idêntico à função :func:`sub`, usando o padrão compilado."

#: ../../library/re.rst:1123
msgid "Identical to the :func:`subn` function, using the compiled pattern."
msgstr "Idêntico à função :func:`subn`, usando o padrão compilado."

#: ../../library/re.rst:1128
msgid ""
"The regex matching flags.  This is a combination of the flags given to "
":func:`.compile`, any ``(?...)`` inline flags in the pattern, and implicit "
"flags such as :data:`UNICODE` if the pattern is a Unicode string."
msgstr ""

#: ../../library/re.rst:1135
msgid "The number of capturing groups in the pattern."
msgstr "O número de grupos de captura no padrão."

#: ../../library/re.rst:1140
msgid ""
"A dictionary mapping any symbolic group names defined by ``(?P<id>)`` to "
"group numbers.  The dictionary is empty if no symbolic groups were used in "
"the pattern."
msgstr ""
"Um dicionário que mapeia quaisquer nomes de grupos simbólicos definidos por "
"``(?P<id>)`` para números de grupos. O dicionário está vazio se não forem "
"usados grupos simbólicos no padrão."

#: ../../library/re.rst:1147
msgid "The pattern string from which the pattern object was compiled."
msgstr ""
"A cadeia de caracteres de padrão a partir da qual o objeto de padrão foi "
"compilado."

#: ../../library/re.rst:1150
msgid ""
"Added support of :func:`copy.copy` and :func:`copy.deepcopy`.  Compiled "
"regular expression objects are considered atomic."
msgstr ""
"Adicionado suporte para :func:`copy.copy` e :func:`copy.deepcopy`. Os "
"objetos de expressão regular compilada são considerados atómicos."

#: ../../library/re.rst:1158
msgid "Match Objects"
msgstr "Objetos de correspondência"

#: ../../library/re.rst:1160
msgid ""
"Match objects always have a boolean value of ``True``. Since "
":meth:`~Pattern.match` and :meth:`~Pattern.search` return ``None`` when "
"there is no match, you can test whether there was a match with a simple "
"``if`` statement::"
msgstr ""
"Os objetos de correspondência têm sempre um valor booleano de ``True``. Uma "
"vez que :meth:`~Pattern.match` e :meth:`~Pattern.search` devolvem ``None`` "
"quando não há correspondência, pode testar se houve uma correspondência com "
"uma simples instrução ``if``::"

#: ../../library/re.rst:1169
msgid "Match objects support the following methods and attributes:"
msgstr ""

#: ../../library/re.rst:1174
msgid ""
"Return the string obtained by doing backslash substitution on the template "
"string *template*, as done by the :meth:`~Pattern.sub` method. Escapes such "
"as ``\\n`` are converted to the appropriate characters, and numeric "
"backreferences (``\\1``, ``\\2``) and named backreferences (``\\g<1>``, "
"``\\g<name>``) are replaced by the contents of the corresponding group."
msgstr ""

#: ../../library/re.rst:1186
msgid ""
"Returns one or more subgroups of the match.  If there is a single argument, "
"the result is a single string; if there are multiple arguments, the result "
"is a tuple with one item per argument. Without arguments, *group1* defaults "
"to zero (the whole match is returned). If a *groupN* argument is zero, the "
"corresponding return value is the entire matching string; if it is in the "
"inclusive range [1..99], it is the string matching the corresponding "
"parenthesized group.  If a group number is negative or larger than the "
"number of groups defined in the pattern, an :exc:`IndexError` exception is "
"raised. If a group is contained in a part of the pattern that did not match,"
" the corresponding result is ``None``. If a group is contained in a part of "
"the pattern that matched multiple times, the last match is returned. ::"
msgstr ""
"Devolve um ou mais subgrupos da correspondência. Se houver um único "
"argumento, o resultado é uma única cadeia de caracteres; se houver vários "
"argumentos, o resultado é um tuplo com um item por argumento. Sem "
"argumentos, *group1* tem o valor predefinido zero (toda a correspondência é "
"devolvida). Se um argumento *groupN* for zero, o valor de retorno "
"correspondente é toda a cadeia de caracteres correspondida; se estiver no "
"intervalo inclusivo [1..99], é a cadeia de caracteres correspondente ao "
"grupo entre parênteses correspondente. Se um número de grupo for negativo ou"
" maior que o número de grupos definidos no padrão, é gerada uma exceção "
":exc:`IndexError`. Se um grupo estiver contido numa parte do padrão que não "
"correspondeu, o resultado correspondente é ``None``. Se um grupo estiver "
"contido numa parte do padrão que correspondeu várias vezes, a última "
"correspondência é devolvida. ::"

#: ../../library/re.rst:1208
msgid ""
"If the regular expression uses the ``(?P<name>...)`` syntax, the *groupN* "
"arguments may also be strings identifying groups by their group name.  If a "
"string argument is not used as a group name in the pattern, an "
":exc:`IndexError` exception is raised."
msgstr ""
"Se a expressão regular usar a sintaxe ``(?P<name>...)``, os argumentos "
"*groupN* também podem ser cadeias de caracteres que identificam grupos pelos"
" seus nomes de grupo. Se um argumento de cadeia de caracteres não for usado "
"como um nome de grupo no padrão, é gerada uma exceção :exc:`IndexError`."

#: ../../library/re.rst:1213
msgid "A moderately complicated example::"
msgstr "Um exemplo moderadamente complicado::"

#: ../../library/re.rst:1221
msgid "Named groups can also be referred to by their index::"
msgstr ""

#: ../../library/re.rst:1228
msgid "If a group matches multiple times, only the last match is accessible::"
msgstr ""
"Se um grupo corresponder várias vezes, apenas a última correspondência é "
"acessível::"

#: ../../library/re.rst:1237
msgid ""
"This is identical to ``m.group(g)``.  This allows easier access to an "
"individual group from a match::"
msgstr ""
"Isto é idêntico a ``m.group(g)``. Isto permite um acesso mais fácil a um "
"grupo individual a partir de uma correspondência::"

#: ../../library/re.rst:1253
msgid ""
"Return a tuple containing all the subgroups of the match, from 1 up to "
"however many groups are in the pattern.  The *default* argument is used for "
"groups that did not participate in the match; it defaults to ``None``."
msgstr ""
"Devolve um tuplo contendo todos os subgrupos da correspondência, de 1 até ao"
" número de grupos no padrão. O argumento *default* é usado para grupos que "
"não participaram na correspondência; o valor predefinido é ``None``."

#: ../../library/re.rst:1257 ../../library/re.rst:1482
msgid "For example::"
msgstr "Por exemplo::"

#: ../../library/re.rst:1263
msgid ""
"If we make the decimal place and everything after it optional, not all "
"groups might participate in the match.  These groups will default to "
"``None`` unless the *default* argument is given::"
msgstr ""
"Se tornarmos o ponto decimal e tudo o que o segue opcional, nem todos os "
"grupos podem participar na correspondência. Estes grupos terão o valor "
"predefinido ``None`` a menos que o argumento *default* seja fornecido::"

#: ../../library/re.rst:1276
msgid ""
"Return a dictionary containing all the *named* subgroups of the match, keyed"
" by the subgroup name.  The *default* argument is used for groups that did "
"not participate in the match; it defaults to ``None``.  For example::"
msgstr ""

#: ../../library/re.rst:1288
msgid ""
"Return the indices of the start and end of the substring matched by *group*;"
" *group* defaults to zero (meaning the whole matched substring). Return "
"``-1`` if *group* exists but did not contribute to the match.  For a match "
"object *m*, and a group *g* that did contribute to the match, the substring "
"matched by group *g* (equivalent to ``m.group(g)``) is ::"
msgstr ""

#: ../../library/re.rst:1296
msgid ""
"Note that ``m.start(group)`` will equal ``m.end(group)`` if *group* matched "
"a null string.  For example, after ``m = re.search('b(c?)', 'cba')``, "
"``m.start(0)`` is 1, ``m.end(0)`` is 2, ``m.start(1)`` and ``m.end(1)`` are "
"both 2, and ``m.start(2)`` raises an :exc:`IndexError` exception."
msgstr ""

#: ../../library/re.rst:1301
msgid "An example that will remove *remove_this* from email addresses::"
msgstr ""

#: ../../library/re.rst:1311
msgid ""
"For a match *m*, return the 2-tuple ``(m.start(group), m.end(group))``. Note"
" that if *group* did not contribute to the match, this is ``(-1, -1)``. "
"*group* defaults to zero, the entire match."
msgstr ""

#: ../../library/re.rst:1318
msgid ""
"The value of *pos* which was passed to the :meth:`~Pattern.search` or "
":meth:`~Pattern.match` method of a :ref:`regex object <re-objects>`.  This "
"is the index into the string at which the RE engine started looking for a "
"match."
msgstr ""

#: ../../library/re.rst:1325
msgid ""
"The value of *endpos* which was passed to the :meth:`~Pattern.search` or "
":meth:`~Pattern.match` method of a :ref:`regex object <re-objects>`.  This "
"is the index into the string beyond which the RE engine will not go."
msgstr ""

#: ../../library/re.rst:1332
msgid ""
"The integer index of the last matched capturing group, or ``None`` if no "
"group was matched at all. For example, the expressions ``(a)b``, "
"``((a)(b))``, and ``((ab))`` will have ``lastindex == 1`` if applied to the "
"string ``'ab'``, while the expression ``(a)(b)`` will have ``lastindex == "
"2``, if applied to the same string."
msgstr ""

#: ../../library/re.rst:1341
msgid ""
"The name of the last matched capturing group, or ``None`` if the group "
"didn't have a name, or if no group was matched at all."
msgstr ""

#: ../../library/re.rst:1347
msgid ""
"The :ref:`regular expression object <re-objects>` whose "
":meth:`~Pattern.match` or :meth:`~Pattern.search` method produced this match"
" instance."
msgstr ""

#: ../../library/re.rst:1353
msgid ""
"The string passed to :meth:`~Pattern.match` or :meth:`~Pattern.search`."
msgstr ""

#: ../../library/re.rst:1356
msgid ""
"Added support of :func:`copy.copy` and :func:`copy.deepcopy`.  Match objects"
" are considered atomic."
msgstr ""

#: ../../library/re.rst:1364
msgid "Regular Expression Examples"
msgstr ""

#: ../../library/re.rst:1368
msgid "Checking for a Pair"
msgstr ""

#: ../../library/re.rst:1370
msgid ""
"In this example, we'll use the following helper function to display match "
"objects a little more gracefully::"
msgstr ""

#: ../../library/re.rst:1378
msgid ""
"Suppose you are writing a poker program where a player's hand is represented"
" as a 5-character string with each character representing a card, \"a\" for "
"ace, \"k\" for king, \"q\" for queen, \"j\" for jack, \"t\" for 10, and "
"\"2\" through \"9\" representing the card with that value."
msgstr ""

#: ../../library/re.rst:1383
msgid "To see if a given string is a valid hand, one could do the following::"
msgstr ""

#: ../../library/re.rst:1393
msgid ""
"That last hand, ``\"727ak\"``, contained a pair, or two of the same valued "
"cards. To match this with a regular expression, one could use backreferences"
" as such::"
msgstr ""

#: ../../library/re.rst:1403
msgid ""
"To find out what card the pair consists of, one could use the "
":meth:`~Match.group` method of the match object in the following manner::"
msgstr ""

#: ../../library/re.rst:1422
msgid "Simulating scanf()"
msgstr ""

#: ../../library/re.rst:1426
msgid ""
"Python does not currently have an equivalent to :c:func:`scanf`.  Regular "
"expressions are generally more powerful, though also more verbose, than "
":c:func:`scanf` format strings.  The table below offers some more-or-less "
"equivalent mappings between :c:func:`scanf` format tokens and regular "
"expressions."
msgstr ""

#: ../../library/re.rst:1433
msgid ":c:func:`scanf` Token"
msgstr ""

#: ../../library/re.rst:1433
msgid "Regular Expression"
msgstr ""

#: ../../library/re.rst:1435
msgid "``%c``"
msgstr "``%c``"

#: ../../library/re.rst:1437
msgid "``%5c``"
msgstr ""

#: ../../library/re.rst:1437
msgid "``.{5}``"
msgstr ""

#: ../../library/re.rst:1439
msgid "``%d``"
msgstr "``%d``"

#: ../../library/re.rst:1439
msgid "``[-+]?\\d+``"
msgstr ""

#: ../../library/re.rst:1441
msgid "``%e``, ``%E``, ``%f``, ``%g``"
msgstr ""

#: ../../library/re.rst:1441
msgid "``[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?``"
msgstr ""

#: ../../library/re.rst:1443
msgid "``%i``"
msgstr "``%i``"

#: ../../library/re.rst:1443
msgid "``[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)``"
msgstr ""

#: ../../library/re.rst:1445
msgid "``%o``"
msgstr ""

#: ../../library/re.rst:1445
msgid "``[-+]?[0-7]+``"
msgstr ""

#: ../../library/re.rst:1447
msgid "``%s``"
msgstr "``%s``"

#: ../../library/re.rst:1447
msgid "``\\S+``"
msgstr ""

#: ../../library/re.rst:1449
msgid "``%u``"
msgstr "``%u``"

#: ../../library/re.rst:1449
msgid "``\\d+``"
msgstr ""

#: ../../library/re.rst:1451
msgid "``%x``, ``%X``"
msgstr ""

#: ../../library/re.rst:1451
msgid "``[-+]?(0[xX])?[\\dA-Fa-f]+``"
msgstr ""

#: ../../library/re.rst:1454
msgid "To extract the filename and numbers from a string like ::"
msgstr ""

#: ../../library/re.rst:1458
msgid "you would use a :c:func:`scanf` format like ::"
msgstr ""

#: ../../library/re.rst:1462
msgid "The equivalent regular expression would be ::"
msgstr ""

#: ../../library/re.rst:1470
msgid "search() vs. match()"
msgstr ""

#: ../../library/re.rst:1474
msgid ""
"Python offers different primitive operations based on regular expressions:"
msgstr ""

#: ../../library/re.rst:1476
msgid ""
":func:`re.match` checks for a match only at the beginning of the string"
msgstr ""

#: ../../library/re.rst:1477
msgid ""
":func:`re.search` checks for a match anywhere in the string (this is what "
"Perl does by default)"
msgstr ""

#: ../../library/re.rst:1479
msgid ":func:`re.fullmatch` checks for entire string to be a match"
msgstr ""

#: ../../library/re.rst:1491
msgid ""
"Regular expressions beginning with ``'^'`` can be used with :func:`search` "
"to restrict the match at the beginning of the string::"
msgstr ""

#: ../../library/re.rst:1499
msgid ""
"Note however that in :const:`MULTILINE` mode :func:`match` only matches at "
"the beginning of the string, whereas using :func:`search` with a regular "
"expression beginning with ``'^'`` will match at the beginning of each line. "
"::"
msgstr ""

#: ../../library/re.rst:1509
msgid "Making a Phonebook"
msgstr ""

#: ../../library/re.rst:1511
msgid ""
":func:`split` splits a string into a list delimited by the passed pattern.  "
"The method is invaluable for converting textual data into data structures "
"that can be easily read and modified by Python as demonstrated in the "
"following example that creates a phonebook."
msgstr ""

#: ../../library/re.rst:1516
msgid ""
"First, here is the input.  Normally it may come from a file, here we are "
"using triple-quoted string syntax"
msgstr ""

#: ../../library/re.rst:1529
msgid ""
"The entries are separated by one or more newlines. Now we convert the string"
" into a list with each nonempty line having its own entry:"
msgstr ""

#: ../../library/re.rst:1542
msgid ""
"Finally, split each entry into a list with first name, last name, telephone "
"number, and address.  We use the ``maxsplit`` parameter of :func:`split` "
"because the address has spaces, our splitting pattern, in it:"
msgstr ""

#: ../../library/re.rst:1555
msgid ""
"The ``:?`` pattern matches the colon after the last name, so that it does "
"not occur in the result list.  With a ``maxsplit`` of ``4``, we could "
"separate the house number from the street name:"
msgstr ""

#: ../../library/re.rst:1570
msgid "Text Munging"
msgstr ""

#: ../../library/re.rst:1572
msgid ""
":func:`sub` replaces every occurrence of a pattern with a string or the "
"result of a function.  This example demonstrates using :func:`sub` with a "
"function to \"munge\" text, or randomize the order of all the characters in "
"each word of a sentence except for the first and last characters::"
msgstr ""

#: ../../library/re.rst:1589
msgid "Finding all Adverbs"
msgstr ""

#: ../../library/re.rst:1591
msgid ""
":func:`findall` matches *all* occurrences of a pattern, not just the first "
"one as :func:`search` does.  For example, if a writer wanted to find all of "
"the adverbs in some text, they might use :func:`findall` in the following "
"manner::"
msgstr ""

#: ../../library/re.rst:1602
msgid "Finding all Adverbs and their Positions"
msgstr ""

#: ../../library/re.rst:1604
msgid ""
"If one wants more information about all matches of a pattern than the "
"matched text, :func:`finditer` is useful as it provides :ref:`match objects "
"<match-objects>` instead of strings.  Continuing with the previous example, "
"if a writer wanted to find all of the adverbs *and their positions* in some "
"text, they would use :func:`finditer` in the following manner::"
msgstr ""

#: ../../library/re.rst:1618
msgid "Raw String Notation"
msgstr ""

#: ../../library/re.rst:1620
msgid ""
"Raw string notation (``r\"text\"``) keeps regular expressions sane.  Without"
" it, every backslash (``'\\'``) in a regular expression would have to be "
"prefixed with another one to escape it.  For example, the two following "
"lines of code are functionally identical::"
msgstr ""

#: ../../library/re.rst:1630
msgid ""
"When one wants to match a literal backslash, it must be escaped in the "
"regular expression.  With raw string notation, this means ``r\"\\\\\"``.  "
"Without raw string notation, one must use ``\"\\\\\\\\\"``, making the "
"following lines of code functionally identical::"
msgstr ""

#: ../../library/re.rst:1642
msgid "Writing a Tokenizer"
msgstr ""

#: ../../library/re.rst:1644
msgid ""
"A `tokenizer or scanner <https://en.wikipedia.org/wiki/Lexical_analysis>`_ "
"analyzes a string to categorize groups of characters.  This is a useful "
"first step in writing a compiler or interpreter."
msgstr ""

#: ../../library/re.rst:1648
msgid ""
"The text categories are specified with regular expressions.  The technique "
"is to combine those into a single master regular expression and to loop over"
" successive matches::"
msgstr ""

#: ../../library/re.rst:1704
msgid "The tokenizer produces the following output::"
msgstr ""

#: ../../library/re.rst:1727
msgid ""
"Friedl, Jeffrey. Mastering Regular Expressions. 3rd ed., O'Reilly Media, "
"2009. The third edition of the book no longer covers Python at all, but the "
"first edition covered writing good regular expression patterns in great "
"detail."
msgstr ""
