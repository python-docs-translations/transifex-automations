# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-15 15:08+0000\n"
"PO-Revision-Date: 2025-09-15 01:04+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/operator.rst:2
msgid ":mod:`!operator` --- Standard operators as functions"
msgstr ":mod:`!operator` — Operadores padrão como funções"

#: ../../library/operator.rst:9
msgid "**Source code:** :source:`Lib/operator.py`"
msgstr "**Código-fonte:** :source:`Lib/operator.py`"

#: ../../library/operator.rst:18
msgid ""
"The :mod:`operator` module exports a set of efficient functions "
"corresponding to the intrinsic operators of Python.  For example, ``operator."
"add(x, y)`` is equivalent to the expression ``x+y``. Many function names are "
"those used for special methods, without the double underscores.  For "
"backward compatibility, many of these have a variant with the double "
"underscores kept. The variants without the double underscores are preferred "
"for clarity."
msgstr ""
"O módulo :mod:`operator` exporta um conjunto de funções eficientes que "
"correspondem aos operadores intrínsecos do Python. Por exemplo, ``operator."
"add(x, y)`` é equivalente à expressão ``x+y``. Muitos nomes de funções são "
"os mesmos usados para métodos especiais, sem os duplos underscores. Por "
"compatibilidade retroativa, muitas destas funções têm uma variante que "
"mantém os duplos underscores. As variantes sem os duplos underscores são "
"preferidas por serem mais claras."

#: ../../library/operator.rst:25
msgid ""
"The functions fall into categories that perform object comparisons, logical "
"operations, mathematical operations and sequence operations."
msgstr ""
"As funções estão divididas em categorias que realizam comparações de "
"objetos, operações lógicas, operações matemáticas e operações com sequências."

#: ../../library/operator.rst:28
msgid ""
"The object comparison functions are useful for all objects, and are named "
"after the rich comparison operators they support:"
msgstr ""
"As funções de comparação de objetos são úteis para todos os objetos e têm "
"nomes baseados nos operadores de comparação rica que suportam:"

#: ../../library/operator.rst:45
msgid ""
"Perform \"rich comparisons\" between *a* and *b*. Specifically, ``lt(a, b)`` "
"is equivalent to ``a < b``, ``le(a, b)`` is equivalent to ``a <= b``, "
"``eq(a, b)`` is equivalent to ``a == b``, ``ne(a, b)`` is equivalent to ``a !"
"= b``, ``gt(a, b)`` is equivalent to ``a > b`` and ``ge(a, b)`` is "
"equivalent to ``a >= b``.  Note that these functions can return any value, "
"which may or may not be interpretable as a Boolean value.  See :ref:"
"`comparisons` for more information about rich comparisons."
msgstr ""
"Realizam \"comparações ricas\" entre *a* e *b*. Especificamente, ``lt(a, "
"b)`` é equivalente a ``a < b``, ``le(a, b)`` é equivalente a ``a <= b``, "
"``eq(a, b)`` é equivalente a ``a == b``, ``ne(a, b)`` é equivalente a ``a != "
"b``, ``gt(a, b)`` é equivalente a ``a > b`` e ``ge(a, b)`` é equivalente a "
"``a >= b``. Note que estas funções podem devolver qualquer valor, que pode "
"ou não ser interpretado como um valor booleano. Consulte :ref:`comparisons` "
"para mais informações sobre comparações ricas."

#: ../../library/operator.rst:54
msgid ""
"The logical operations are also generally applicable to all objects, and "
"support truth tests, identity tests, and boolean operations:"
msgstr ""
"As operações lógicas também são geralmente aplicáveis a todos os objetos e "
"suportam testes de verdade, testes de identidade e operações booleanas:"

#: ../../library/operator.rst:61
msgid ""
"Return the outcome of :keyword:`not` *obj*.  (Note that there is no :meth:`!"
"__not__` method for object instances; only the interpreter core defines this "
"operation.  The result is affected by the :meth:`~object.__bool__` and :meth:"
"`~object.__len__` methods.)"
msgstr ""
"Devolve o resultado de :keyword:`not` *obj*. (Note que não existe um método :"
"meth:`!__not__` para instâncias de objetos; apenas o núcleo do interpretador "
"define esta operação. O resultado é afetado pelos métodos :meth:`~object."
"__bool__` e :meth:`~object.__len__`.)"

#: ../../library/operator.rst:69
msgid ""
"Return :const:`True` if *obj* is true, and :const:`False` otherwise.  This "
"is equivalent to using the :class:`bool` constructor."
msgstr ""
"Devolve :const:`True` se *obj* for verdadeiro e :const:`False` caso "
"contrário. Isto é equivalente a usar o construtor :class:`bool`."

#: ../../library/operator.rst:75
msgid "Return ``a is b``.  Tests object identity."
msgstr "Devolve ``a is b``. Testa a identidade do objeto."

#: ../../library/operator.rst:80
msgid "Return ``a is not b``.  Tests object identity."
msgstr "Devolve ``a is not b``. Testa a identidade do objeto."

#: ../../library/operator.rst:83
msgid "The mathematical and bitwise operations are the most numerous:"
msgstr "As operações matemáticas e bit a bit são as mais numerosas:"

#: ../../library/operator.rst:89
msgid "Return the absolute value of *obj*."
msgstr "Devolve o valor absoluto de *obj*."

#: ../../library/operator.rst:95
msgid "Return ``a + b``, for *a* and *b* numbers."
msgstr "Devolve ``a + b``, para *a* e *b* números."

#: ../../library/operator.rst:101
msgid "Return the bitwise and of *a* and *b*."
msgstr "Devolve o *bitwise and* de *a* e *b*."

#: ../../library/operator.rst:107
msgid "Return ``a // b``."
msgstr "Devolve ``a // b``."

#: ../../library/operator.rst:113
msgid "Return *a* converted to an integer.  Equivalent to ``a.__index__()``."
msgstr ""
"Devolve *a* convertido para um inteiro. Equivalente a ``a.__index__()``."

#: ../../library/operator.rst:115
msgid ""
"The result always has exact type :class:`int`.  Previously, the result could "
"have been an instance of a subclass of ``int``."
msgstr ""
"O resultado tem sempre o tipo exato :class:`int`. Anteriormente, o resultado "
"poderia ter sido uma instância de uma subclasse de ``int``."

#: ../../library/operator.rst:125
msgid ""
"Return the bitwise inverse of the number *obj*.  This is equivalent to "
"``~obj``."
msgstr ""
"Devolve o inverso bit a bit do número *obj*. Isto é equivalente a ``~obj``."

#: ../../library/operator.rst:131
msgid "Return *a* shifted left by *b*."
msgstr "Devolve *a* deslocado à esquerda por *b* posições."

#: ../../library/operator.rst:137
msgid "Return ``a % b``."
msgstr "Devolve ``a % b``."

#: ../../library/operator.rst:143
msgid "Return ``a * b``, for *a* and *b* numbers."
msgstr "Devolve ``a * b``, para *a* e *b* números."

#: ../../library/operator.rst:149
msgid "Return ``a @ b``."
msgstr "Devolve ``a @ b``."

#: ../../library/operator.rst:157
msgid "Return *obj* negated (``-obj``)."
msgstr "Devolve *obj* negado (``-obj``)."

#: ../../library/operator.rst:163
msgid "Return the bitwise or of *a* and *b*."
msgstr "Retorne o resultado da operação bitwise or entre *a* e *b*."

#: ../../library/operator.rst:169
msgid "Return *obj* positive (``+obj``)."
msgstr "Devolve *obj* positivo (``+obj``)."

#: ../../library/operator.rst:175
msgid "Return ``a ** b``, for *a* and *b* numbers."
msgstr "Devolve ``a ** b``, para *a* e *b* números."

#: ../../library/operator.rst:181
msgid "Return *a* shifted right by *b*."
msgstr "Devolve *a* deslocado à direita por *b* posições."

#: ../../library/operator.rst:187
msgid "Return ``a - b``."
msgstr "Devolve ``a - b``."

#: ../../library/operator.rst:193
msgid ""
"Return ``a / b`` where 2/3 is .66 rather than 0.  This is also known as "
"\"true\" division."
msgstr ""
"Devolve ``a / b`` onde 2/3 é 0.66 em vez de 0. Isto é também conhecido como "
"divisão \"verdadeira\"."

#: ../../library/operator.rst:200
msgid "Return the bitwise exclusive or of *a* and *b*."
msgstr "Devolve o *bitwise exclusive or* de *a* e *b*."

#: ../../library/operator.rst:203
msgid ""
"Operations which work with sequences (some of them with mappings too) "
"include:"
msgstr ""
"Operações que funcionam com sequências (algumas também com mapeamentos) "
"incluem:"

#: ../../library/operator.rst:208
msgid "Return ``a + b`` for *a* and *b* sequences."
msgstr "Devolve ``a + b`` para as sequências *a* e *b*."

#: ../../library/operator.rst:214
msgid "Return the outcome of the test ``b in a``. Note the reversed operands."
msgstr ""
"Devolve o resultado do teste ``b in a``. Note que os operandos estão "
"invertidos."

#: ../../library/operator.rst:219
msgid "Return the number of occurrences of *b* in *a*."
msgstr "Devolve o número de ocorrências de *b* em *a*."

#: ../../library/operator.rst:225
msgid "Remove the value of *a* at index *b*."
msgstr "Remove o valor de *a* no índice *b*."

#: ../../library/operator.rst:231
msgid "Return the value of *a* at index *b*."
msgstr "Devolve o valor de *a* no índice *b*."

#: ../../library/operator.rst:236
msgid "Return the index of the first of occurrence of *b* in *a*."
msgstr "Devolve o índice da primeira ocorrência de *b* em *a*."

#: ../../library/operator.rst:242
msgid "Set the value of *a* at index *b* to *c*."
msgstr "Define o valor de *a* no índice *b* para *c*."

#: ../../library/operator.rst:247
msgid ""
"Return an estimated length for the object *obj*. First try to return its "
"actual length, then an estimate using :meth:`object.__length_hint__`, and "
"finally return the default value."
msgstr ""
"Devolve um comprimento estimado para o objeto *obj*. Primeiro tenta devolver "
"o seu comprimento real, depois uma estimativa usando :meth:`object."
"__length_hint__` e, finalmente, devolve o valor predefinido."

#: ../../library/operator.rst:254
msgid "The following operation works with callables:"
msgstr "A seguinte operação funciona com objetos chamáveis:"

#: ../../library/operator.rst:259
msgid "Return ``obj(*args, **kwargs)``."
msgstr "Devolve ``obj(*args, **kwargs)``."

#: ../../library/operator.rst:264
msgid ""
"The :mod:`operator` module also defines tools for generalized attribute and "
"item lookups.  These are useful for making fast field extractors as "
"arguments for :func:`map`, :func:`sorted`, :meth:`itertools.groupby`, or "
"other functions that expect a function argument."
msgstr ""
"O módulo :mod:`operator` também define ferramentas para pesquisas "
"generalizadas de atributos e itens. Estas são úteis para criar extratores de "
"campos rápidos como argumentos para :func:`map`, :func:`sorted`, :meth:"
"`itertools.groupby` ou outras funções que esperam um argumento de função."

#: ../../library/operator.rst:273
msgid ""
"Return a callable object that fetches *attr* from its operand. If more than "
"one attribute is requested, returns a tuple of attributes. The attribute "
"names can also contain dots. For example:"
msgstr ""
"Devolve um objeto chamável que obtém *attr* do seu operando. Se for "
"solicitado mais do que um atributo, devolve um tuplo de atributos. Os nomes "
"dos atributos podem também conter pontos. Por exemplo:"

#: ../../library/operator.rst:277
msgid "After ``f = attrgetter('name')``, the call ``f(b)`` returns ``b.name``."
msgstr ""
"Depois de ``f = attrgetter('name')``, a chamada ``f(b)`` devolve ``b.name``."

#: ../../library/operator.rst:279
msgid ""
"After ``f = attrgetter('name', 'date')``, the call ``f(b)`` returns ``(b."
"name, b.date)``."
msgstr ""
"Depois de ``f = attrgetter('name', 'date')``, a chamada ``f(b)`` devolve "
"``(b.name, b.date)``."

#: ../../library/operator.rst:282
msgid ""
"After ``f = attrgetter('name.first', 'name.last')``, the call ``f(b)`` "
"returns ``(b.name.first, b.name.last)``."
msgstr ""
"Depois de ``f = attrgetter('name.first', 'name.last')``, a chamada ``f(b)`` "
"devolve ``(b.name.first, b.name.last)``."

#: ../../library/operator.rst:285 ../../library/operator.rst:317
#: ../../library/operator.rst:365
msgid "Equivalent to::"
msgstr "Equivalente a::"

#: ../../library/operator.rst:287
msgid ""
"def attrgetter(*items):\n"
"    if any(not isinstance(item, str) for item in items):\n"
"        raise TypeError('attribute name must be a string')\n"
"    if len(items) == 1:\n"
"        attr = items[0]\n"
"        def g(obj):\n"
"            return resolve_attr(obj, attr)\n"
"    else:\n"
"        def g(obj):\n"
"            return tuple(resolve_attr(obj, attr) for attr in items)\n"
"    return g\n"
"\n"
"def resolve_attr(obj, attr):\n"
"    for name in attr.split(\".\"):\n"
"        obj = getattr(obj, name)\n"
"    return obj"
msgstr ""
"def attrgetter(*items):\n"
"    if any(not isinstance(item, str) for item in items):\n"
"        raise TypeError('attribute name must be a string')\n"
"    if len(items) == 1:\n"
"        attr = items[0]\n"
"        def g(obj):\n"
"            return resolve_attr(obj, attr)\n"
"    else:\n"
"        def g(obj):\n"
"            return tuple(resolve_attr(obj, attr) for attr in items)\n"
"    return g\n"
"\n"
"def resolve_attr(obj, attr):\n"
"    for name in attr.split(\".\"):\n"
"        obj = getattr(obj, name)\n"
"    return obj"

#: ../../library/operator.rst:308
msgid ""
"Return a callable object that fetches *item* from its operand using the "
"operand's :meth:`~object.__getitem__` method.  If multiple items are "
"specified, returns a tuple of lookup values.  For example:"
msgstr ""
"Devolve um objeto chamável que obtém *item* do seu operando usando o método :"
"meth:`~object.__getitem__` do operando. Se forem especificados vários itens, "
"devolve um tuplo de valores de pesquisa. Por exemplo:"

#: ../../library/operator.rst:312
msgid "After ``f = itemgetter(2)``, the call ``f(r)`` returns ``r[2]``."
msgstr "Depois de ``f = itemgetter(2)``, a chamada ``f(r)`` devolve ``r[2]``."

#: ../../library/operator.rst:314
msgid ""
"After ``g = itemgetter(2, 5, 3)``, the call ``g(r)`` returns ``(r[2], r[5], "
"r[3])``."
msgstr ""
"Depois de ``g = itemgetter(2, 5, 3)``, a chamada ``g(r)`` devolve ``(r[2], "
"r[5], r[3])``."

#: ../../library/operator.rst:319
msgid ""
"def itemgetter(*items):\n"
"    if len(items) == 1:\n"
"        item = items[0]\n"
"        def g(obj):\n"
"            return obj[item]\n"
"    else:\n"
"        def g(obj):\n"
"            return tuple(obj[item] for item in items)\n"
"    return g"
msgstr ""
"def itemgetter(*items):\n"
"    if len(items) == 1:\n"
"        item = items[0]\n"
"        def g(obj):\n"
"            return obj[item]\n"
"    else:\n"
"        def g(obj):\n"
"            return tuple(obj[item] for item in items)\n"
"    return g"

#: ../../library/operator.rst:329
msgid ""
"The items can be any type accepted by the operand's :meth:`~object."
"__getitem__` method.  Dictionaries accept any :term:`hashable` value.  "
"Lists, tuples, and strings accept an index or a slice:"
msgstr ""
"Os itens podem ser de qualquer tipo aceite pelo método :meth:`~object."
"__getitem__` do operando. Os dicionários aceitam qualquer valor :term:"
"`hashable`. As listas, tuplos e strings aceitam um índice ou uma fatia:"

#: ../../library/operator.rst:343
msgid ""
"Example of using :func:`itemgetter` to retrieve specific fields from a tuple "
"record:"
msgstr ""
"Exemplo de utilização de :func:`itemgetter` para recuperar campos "
"específicos de um registo em tuplo:"

#: ../../library/operator.rst:356
msgid ""
"Return a callable object that calls the method *name* on its operand.  If "
"additional arguments and/or keyword arguments are given, they will be given "
"to the method as well.  For example:"
msgstr ""
"Devolve um objeto chamável que invoca o método *name* no seu operando. Se "
"forem fornecidos argumentos adicionais e/ou argumentos nomeados, estes serão "
"passados ao método. Por exemplo:"

#: ../../library/operator.rst:360
msgid ""
"After ``f = methodcaller('name')``, the call ``f(b)`` returns ``b.name()``."
msgstr ""
"Depois de ``f = methodcaller('name')``, a chamada ``f(b)`` devolve ``b."
"name()``."

#: ../../library/operator.rst:362
msgid ""
"After ``f = methodcaller('name', 'foo', bar=1)``, the call ``f(b)`` returns "
"``b.name('foo', bar=1)``."
msgstr ""
"Depois de ``f = methodcaller('name', 'foo', bar=1)``, a chamada ``f(b)`` "
"devolve ``b.name('foo', bar=1)``."

#: ../../library/operator.rst:367
msgid ""
"def methodcaller(name, /, *args, **kwargs):\n"
"    def caller(obj):\n"
"        return getattr(obj, name)(*args, **kwargs)\n"
"    return caller"
msgstr ""
"def methodcaller(name, /, *args, **kwargs):\n"
"    def caller(obj):\n"
"        return getattr(obj, name)(*args, **kwargs)\n"
"    return caller"

#: ../../library/operator.rst:376
msgid "Mapping Operators to Functions"
msgstr "Mapeamento de operadores para funções"

#: ../../library/operator.rst:378
msgid ""
"This table shows how abstract operations correspond to operator symbols in "
"the Python syntax and the functions in the :mod:`operator` module."
msgstr ""
"Esta tabela mostra como as operações abstratas correspondem aos símbolos de "
"operadores na sintaxe Python e às funções no módulo :mod:`operator`."

#: ../../library/operator.rst:382
msgid "Operation"
msgstr "Operação"

#: ../../library/operator.rst:382
msgid "Syntax"
msgstr "Sintaxe"

#: ../../library/operator.rst:382
msgid "Function"
msgstr "Função"

#: ../../library/operator.rst:384
msgid "Addition"
msgstr "Adição"

#: ../../library/operator.rst:384
msgid "``a + b``"
msgstr "``a + b``"

#: ../../library/operator.rst:384
msgid "``add(a, b)``"
msgstr "``add(a, b)``"

#: ../../library/operator.rst:386
msgid "Concatenation"
msgstr "Concatenação"

#: ../../library/operator.rst:386
msgid "``seq1 + seq2``"
msgstr "``seq1 + seq2``"

#: ../../library/operator.rst:386
msgid "``concat(seq1, seq2)``"
msgstr "``concat(seq1, seq2)``"

#: ../../library/operator.rst:388
msgid "Containment Test"
msgstr "Teste de conteúdo"

#: ../../library/operator.rst:388
msgid "``obj in seq``"
msgstr "``obj in seq``"

#: ../../library/operator.rst:388
msgid "``contains(seq, obj)``"
msgstr "``contains(seq, obj)``"

#: ../../library/operator.rst:390 ../../library/operator.rst:392
msgid "Division"
msgstr "Divisão"

#: ../../library/operator.rst:390
msgid "``a / b``"
msgstr "``a / b``"

#: ../../library/operator.rst:390
msgid "``truediv(a, b)``"
msgstr "``truediv(a, b)``"

#: ../../library/operator.rst:392
msgid "``a // b``"
msgstr "``a // b``"

#: ../../library/operator.rst:392
msgid "``floordiv(a, b)``"
msgstr "``floordiv(a, b)``"

#: ../../library/operator.rst:394
msgid "Bitwise And"
msgstr "Bitwise And"

#: ../../library/operator.rst:394
msgid "``a & b``"
msgstr "``a & b``"

#: ../../library/operator.rst:394
msgid "``and_(a, b)``"
msgstr "``and_(a, b)``"

#: ../../library/operator.rst:396
msgid "Bitwise Exclusive Or"
msgstr "Bitwise Exclusive Or"

#: ../../library/operator.rst:396
msgid "``a ^ b``"
msgstr "``a ^ b``"

#: ../../library/operator.rst:396
msgid "``xor(a, b)``"
msgstr "``xor(a, b)``"

#: ../../library/operator.rst:398
msgid "Bitwise Inversion"
msgstr "Inversão bit a bit"

#: ../../library/operator.rst:398
msgid "``~ a``"
msgstr "``~ a``"

#: ../../library/operator.rst:398
msgid "``invert(a)``"
msgstr "``invert(a)``"

#: ../../library/operator.rst:400
msgid "Bitwise Or"
msgstr "Bitwise Or"

#: ../../library/operator.rst:400
msgid "``a | b``"
msgstr "``a | b``"

#: ../../library/operator.rst:400
msgid "``or_(a, b)``"
msgstr "``or_(a, b)``"

#: ../../library/operator.rst:402
msgid "Exponentiation"
msgstr "Exponenciação"

#: ../../library/operator.rst:402
msgid "``a ** b``"
msgstr "``a ** b``"

#: ../../library/operator.rst:402
msgid "``pow(a, b)``"
msgstr "``pow(a, b)``"

#: ../../library/operator.rst:404 ../../library/operator.rst:406
msgid "Identity"
msgstr "Identidade"

#: ../../library/operator.rst:404
msgid "``a is b``"
msgstr "``a is b``"

#: ../../library/operator.rst:404
msgid "``is_(a, b)``"
msgstr "``is_(a, b)``"

#: ../../library/operator.rst:406
msgid "``a is not b``"
msgstr "``a is not b``"

#: ../../library/operator.rst:406
msgid "``is_not(a, b)``"
msgstr "``is_not(a, b)``"

#: ../../library/operator.rst:408
msgid "Indexed Assignment"
msgstr "Atribuição indexada"

#: ../../library/operator.rst:408
msgid "``obj[k] = v``"
msgstr "``obj[k] = v``"

#: ../../library/operator.rst:408
msgid "``setitem(obj, k, v)``"
msgstr "``setitem(obj, k, v)``"

#: ../../library/operator.rst:410
msgid "Indexed Deletion"
msgstr "Eliminação indexada"

#: ../../library/operator.rst:410
msgid "``del obj[k]``"
msgstr "``del obj[k]``"

#: ../../library/operator.rst:410
msgid "``delitem(obj, k)``"
msgstr "``delitem(obj, k)``"

#: ../../library/operator.rst:412
msgid "Indexing"
msgstr "Indexação"

#: ../../library/operator.rst:412
msgid "``obj[k]``"
msgstr "``obj[k]``"

#: ../../library/operator.rst:412
msgid "``getitem(obj, k)``"
msgstr "``getitem(obj, k)``"

#: ../../library/operator.rst:414
msgid "Left Shift"
msgstr "Deslocamento à esquerda"

#: ../../library/operator.rst:414
msgid "``a << b``"
msgstr "``a << b``"

#: ../../library/operator.rst:414
msgid "``lshift(a, b)``"
msgstr "``lshift(a, b)``"

#: ../../library/operator.rst:416
msgid "Modulo"
msgstr "Módulo"

#: ../../library/operator.rst:416
msgid "``a % b``"
msgstr "``a % b``"

#: ../../library/operator.rst:416
msgid "``mod(a, b)``"
msgstr "``mod(a, b)``"

#: ../../library/operator.rst:418
msgid "Multiplication"
msgstr "Multiplicação"

#: ../../library/operator.rst:418
msgid "``a * b``"
msgstr "``a * b``"

#: ../../library/operator.rst:418
msgid "``mul(a, b)``"
msgstr "``mul(a, b)``"

#: ../../library/operator.rst:420
msgid "Matrix Multiplication"
msgstr "Multiplicação de matrizes"

#: ../../library/operator.rst:420
msgid "``a @ b``"
msgstr "``a @ b``"

#: ../../library/operator.rst:420
msgid "``matmul(a, b)``"
msgstr "``matmul(a, b)``"

#: ../../library/operator.rst:422
msgid "Negation (Arithmetic)"
msgstr "Negação (aritmética)"

#: ../../library/operator.rst:422
msgid "``- a``"
msgstr "``- a``"

#: ../../library/operator.rst:422
msgid "``neg(a)``"
msgstr "``neg(a)``"

#: ../../library/operator.rst:424
msgid "Negation (Logical)"
msgstr "Negação (lógica)"

#: ../../library/operator.rst:424
msgid "``not a``"
msgstr "``not a``"

#: ../../library/operator.rst:424
msgid "``not_(a)``"
msgstr "``not_(a)``"

#: ../../library/operator.rst:426
msgid "Positive"
msgstr "Positivo"

#: ../../library/operator.rst:426
msgid "``+ a``"
msgstr "``+ a``"

#: ../../library/operator.rst:426
msgid "``pos(a)``"
msgstr "``pos(a)``"

#: ../../library/operator.rst:428
msgid "Right Shift"
msgstr "Deslocamento à direita"

#: ../../library/operator.rst:428
msgid "``a >> b``"
msgstr "``a >> b``"

#: ../../library/operator.rst:428
msgid "``rshift(a, b)``"
msgstr "``rshift(a, b)``"

#: ../../library/operator.rst:430
msgid "Slice Assignment"
msgstr "Atribuição de fatia"

#: ../../library/operator.rst:430
msgid "``seq[i:j] = values``"
msgstr "``seq[i:j] = values``"

#: ../../library/operator.rst:430
msgid "``setitem(seq, slice(i, j), values)``"
msgstr "``setitem(seq, slice(i, j), values)``"

#: ../../library/operator.rst:432
msgid "Slice Deletion"
msgstr "Eliminação de fatia"

#: ../../library/operator.rst:432
msgid "``del seq[i:j]``"
msgstr "``del seq[i:j]``"

#: ../../library/operator.rst:432
msgid "``delitem(seq, slice(i, j))``"
msgstr "``delitem(seq, slice(i, j))``"

#: ../../library/operator.rst:434
msgid "Slicing"
msgstr "Fatiamento"

#: ../../library/operator.rst:434
msgid "``seq[i:j]``"
msgstr "``seq[i:j]``"

#: ../../library/operator.rst:434
msgid "``getitem(seq, slice(i, j))``"
msgstr "``getitem(seq, slice(i, j))``"

#: ../../library/operator.rst:436
msgid "String Formatting"
msgstr "Formatação de strings"

#: ../../library/operator.rst:436
msgid "``s % obj``"
msgstr "``s % obj``"

#: ../../library/operator.rst:436
msgid "``mod(s, obj)``"
msgstr "``mod(s, obj)``"

#: ../../library/operator.rst:438
msgid "Subtraction"
msgstr "Subtração"

#: ../../library/operator.rst:438
msgid "``a - b``"
msgstr "``a - b``"

#: ../../library/operator.rst:438
msgid "``sub(a, b)``"
msgstr "``sub(a, b)``"

#: ../../library/operator.rst:440
msgid "Truth Test"
msgstr "Teste de verdade"

#: ../../library/operator.rst:440
msgid "``obj``"
msgstr "``obj``"

#: ../../library/operator.rst:440
msgid "``truth(obj)``"
msgstr "``truth(obj)``"

#: ../../library/operator.rst:442 ../../library/operator.rst:444
#: ../../library/operator.rst:450 ../../library/operator.rst:452
msgid "Ordering"
msgstr "Ordenação"

#: ../../library/operator.rst:442
msgid "``a < b``"
msgstr "``a < b``"

#: ../../library/operator.rst:442
msgid "``lt(a, b)``"
msgstr "``lt(a, b)``"

#: ../../library/operator.rst:444
msgid "``a <= b``"
msgstr "``a <= b``"

#: ../../library/operator.rst:444
msgid "``le(a, b)``"
msgstr "``le(a, b)``"

#: ../../library/operator.rst:446
msgid "Equality"
msgstr "Igualdade"

#: ../../library/operator.rst:446
msgid "``a == b``"
msgstr "``a == b``"

#: ../../library/operator.rst:446
msgid "``eq(a, b)``"
msgstr "``eq(a, b)``"

#: ../../library/operator.rst:448
msgid "Difference"
msgstr "Diferença"

#: ../../library/operator.rst:448
msgid "``a != b``"
msgstr "``a != b``"

#: ../../library/operator.rst:448
msgid "``ne(a, b)``"
msgstr "``ne(a, b)``"

#: ../../library/operator.rst:450
msgid "``a >= b``"
msgstr "``a >= b``"

#: ../../library/operator.rst:450
msgid "``ge(a, b)``"
msgstr "``ge(a, b)``"

#: ../../library/operator.rst:452
msgid "``a > b``"
msgstr "``a > b``"

#: ../../library/operator.rst:452
msgid "``gt(a, b)``"
msgstr "``gt(a, b)``"

#: ../../library/operator.rst:456
msgid "In-place Operators"
msgstr "Operadores locais"

#: ../../library/operator.rst:458
msgid ""
"Many operations have an \"in-place\" version.  Listed below are functions "
"providing a more primitive access to in-place operators than the usual "
"syntax does; for example, the :term:`statement` ``x += y`` is equivalent to "
"``x = operator.iadd(x, y)``.  Another way to put it is to say that ``z = "
"operator.iadd(x, y)`` is equivalent to the compound statement ``z = x; z += "
"y``."
msgstr ""
"Muitas operações têm uma versão \"*in-place*\". Abaixo estão listadas "
"funções que fornecem um acesso mais primitivo aos operadores *in-place* do "
"que a sintaxe habitual; por exemplo, a :term:`instrução` ``x += y`` é "
"equivalente a ``x = operator.iadd(x, y)``. Outra forma de o dizer é que ``z "
"= operator.iadd(x, y)`` é equivalente à instrução composta ``z = x; z += y``."

#: ../../library/operator.rst:465
msgid ""
"In those examples, note that when an in-place method is called, the "
"computation and assignment are performed in two separate steps.  The in-"
"place functions listed below only do the first step, calling the in-place "
"method.  The second step, assignment, is not handled."
msgstr ""
"Nesses exemplos, note que quando um método *in-place* é chamado, o cálculo e "
"a atribuição são realizados em dois passos separados. As funções *in-place* "
"listadas abaixo apenas realizam o primeiro passo, chamando o método *in-"
"place*. O segundo passo, a atribuição, não é tratado."

#: ../../library/operator.rst:470
msgid ""
"For immutable targets such as strings, numbers, and tuples, the updated "
"value is computed, but not assigned back to the input variable:"
msgstr ""
"Para alvos imutáveis como strings, números e tuplos, o valor atualizado é "
"calculado, mas não é reatribuído à variável de entrada:"

#: ../../library/operator.rst:479
msgid ""
"For mutable targets such as lists and dictionaries, the in-place method will "
"perform the update, so no subsequent assignment is necessary:"
msgstr ""
"Para alvos mutáveis como listas e dicionários, o método *in-place* realizará "
"a atualização, pelo que não é necessária nenhuma atribuição subsequente:"

#: ../../library/operator.rst:491
msgid "``a = iadd(a, b)`` is equivalent to ``a += b``."
msgstr "``a = iadd(a, b)`` é equivalente a ``a += b``."

#: ../../library/operator.rst:497
msgid "``a = iand(a, b)`` is equivalent to ``a &= b``."
msgstr "``a = iand(a, b)`` é equivalente a ``a &= b``."

#: ../../library/operator.rst:503
msgid ""
"``a = iconcat(a, b)`` is equivalent to ``a += b`` for *a* and *b* sequences."
msgstr ""
"``a = iconcat(a, b)`` é equivalente a ``a += b`` para as sequências *a* e "
"*b*."

#: ../../library/operator.rst:509
msgid "``a = ifloordiv(a, b)`` is equivalent to ``a //= b``."
msgstr "``a = ifloordiv(a, b)`` é equivalente a ``a //= b``."

#: ../../library/operator.rst:515
msgid "``a = ilshift(a, b)`` is equivalent to ``a <<= b``."
msgstr "``a = ilshift(a, b)`` é equivalente a ``a <<= b``."

#: ../../library/operator.rst:521
msgid "``a = imod(a, b)`` is equivalent to ``a %= b``."
msgstr "``a = imod(a, b)`` é equivalente a ``a %= b``."

#: ../../library/operator.rst:527
msgid "``a = imul(a, b)`` is equivalent to ``a *= b``."
msgstr "``a = imul(a, b)`` é equivalente a ``a *= b``."

#: ../../library/operator.rst:533
msgid "``a = imatmul(a, b)`` is equivalent to ``a @= b``."
msgstr "``a = imatmul(a, b)`` é equivalente a ``a @= b``."

#: ../../library/operator.rst:541
msgid "``a = ior(a, b)`` is equivalent to ``a |= b``."
msgstr "``a = ior(a, b)`` é equivalente a ``a |= b``."

#: ../../library/operator.rst:547
msgid "``a = ipow(a, b)`` is equivalent to ``a **= b``."
msgstr "``a = ipow(a, b)`` é equivalente a ``a **= b``."

#: ../../library/operator.rst:553
msgid "``a = irshift(a, b)`` is equivalent to ``a >>= b``."
msgstr "``a = irshift(a, b)`` é equivalente a ``a >>= b``."

#: ../../library/operator.rst:559
msgid "``a = isub(a, b)`` is equivalent to ``a -= b``."
msgstr "``a = isub(a, b)`` é equivalente a ``a -= b``."

#: ../../library/operator.rst:565
msgid "``a = itruediv(a, b)`` is equivalent to ``a /= b``."
msgstr "``a = itruediv(a, b)`` é equivalente a ``a /= b``."

#: ../../library/operator.rst:571
msgid "``a = ixor(a, b)`` is equivalent to ``a ^= b``."
msgstr "``a = ixor(a, b)`` é equivalente a ``a ^= b``."
