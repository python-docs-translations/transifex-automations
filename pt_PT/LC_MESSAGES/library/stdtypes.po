# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-31 15:47+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/stdtypes.rst:8
msgid "Built-in Types"
msgstr "Tipos integrados"

#: ../../library/stdtypes.rst:10
msgid ""
"The following sections describe the standard types that are built into the "
"interpreter."
msgstr ""
"As secções seguintes descrevem os tipos padrão que estão integrados no "
"interpretador."

#: ../../library/stdtypes.rst:15
msgid ""
"The principal built-in types are numerics, sequences, mappings, classes, "
"instances and exceptions."
msgstr ""
"Os principais tipos integrados são numéricos, sequências, mapeamentos, "
"classes, instâncias e exceções."

#: ../../library/stdtypes.rst:18
msgid ""
"Some collection classes are mutable.  The methods that add, subtract, or "
"rearrange their members in place, and don't return a specific item, never "
"return the collection instance itself but ``None``."
msgstr ""
"Algumas classes de coleções são mutáveis. Os métodos que adicionam, subtraem "
"ou reorganizam os seus membros *in-place* e não retornam um item específico, "
"nunca retornam a instância da coleção em si, mas sim ``None``."

#: ../../library/stdtypes.rst:22
msgid ""
"Some operations are supported by several object types; in particular, "
"practically all objects can be compared for equality, tested for truth "
"value, and converted to a string (with the :func:`repr` function or the "
"slightly different :func:`str` function).  The latter function is implicitly "
"used when an object is written by the :func:`print` function."
msgstr ""
"Algumas operações são suportadas por vários tipos de objetos; em particular, "
"praticamente todos os objetos podem ser comparados para igualdade, testados "
"para valor de verdade e convertidos para uma *string* (com a função :func:"
"`repr` ou a função ligeiramente diferente :func:`str`). Esta última função é "
"usada implicitamente quando um objeto é escrito pela função :func:`print`."

#: ../../library/stdtypes.rst:32
msgid "Truth Value Testing"
msgstr "Teste de valor de verdade"

#: ../../library/stdtypes.rst:41
msgid ""
"Any object can be tested for truth value, for use in an :keyword:`if` or :"
"keyword:`while` condition or as operand of the Boolean operations below."
msgstr ""
"Qualquer objeto pode ser testado para valor de verdade, para uso numa "
"condição :keyword:`if` ou :keyword:`while` ou como operando das operações "
"booleanas abaixo."

#: ../../library/stdtypes.rst:46
msgid ""
"By default, an object is considered true unless its class defines either a :"
"meth:`~object.__bool__` method that returns ``False`` or a :meth:`~object."
"__len__` method that returns zero, when called with the object. [1]_  Here "
"are most of the built-in objects considered false:"
msgstr ""
"Por predefinição, um objeto é considerado verdadeiro a menos que a sua "
"classe defina um método :meth:`~object.__bool__` que retorne ``False`` ou um "
"método :meth:`~object.__len__` que retorne zero, quando chamado com o "
"objeto. [1]_ Aqui estão a maioria dos objetos integrados considerados falsos:"

#: ../../library/stdtypes.rst:56
msgid "constants defined to be false: ``None`` and ``False``"
msgstr "constantes definidas como falsas: ``None`` e ``False``"

#: ../../library/stdtypes.rst:58
msgid ""
"zero of any numeric type: ``0``, ``0.0``, ``0j``, ``Decimal(0)``, "
"``Fraction(0, 1)``"
msgstr ""
"zero de qualquer tipo numérico: ``0``, ``0.0``, ``0j``, ``Decimal(0)``, "
"``Fraction(0, 1)``"

#: ../../library/stdtypes.rst:61
msgid ""
"empty sequences and collections: ``''``, ``()``, ``[]``, ``{}``, ``set()``, "
"``range(0)``"
msgstr ""
"sequências e coleções vazias: ``''``, ``()``, ``[]``, ``{}``, ``set()``, "
"``range(0)``"

#: ../../library/stdtypes.rst:70
msgid ""
"Operations and built-in functions that have a Boolean result always return "
"``0`` or ``False`` for false and ``1`` or ``True`` for true, unless "
"otherwise stated. (Important exception: the Boolean operations ``or`` and "
"``and`` always return one of their operands.)"
msgstr ""
"Operações e funções integradas que têm um resultado booleano retornam sempre "
"``0`` ou ``False`` para falso e ``1`` ou ``True`` para verdadeiro, a menos "
"que seja indicado o contrário. (Exceção importante: as operações booleanas "
"``or`` e ``and`` retornam sempre um dos seus operandos.)"

#: ../../library/stdtypes.rst:79
msgid "Boolean Operations --- :keyword:`!and`, :keyword:`!or`, :keyword:`!not`"
msgstr ""
"Operações booleanas --- :keyword:`!and`, :keyword:`!or`, :keyword:`!not`"

#: ../../library/stdtypes.rst:83
msgid "These are the Boolean operations, ordered by ascending priority:"
msgstr "Estas são as operações booleanas, ordenadas por prioridade ascendente:"

#: ../../library/stdtypes.rst:86 ../../library/stdtypes.rst:144
#: ../../library/stdtypes.rst:276 ../../library/stdtypes.rst:366
#: ../../library/stdtypes.rst:416 ../../library/stdtypes.rst:965
#: ../../library/stdtypes.rst:1170
msgid "Operation"
msgstr "Operação"

#: ../../library/stdtypes.rst:86 ../../library/stdtypes.rst:276
#: ../../library/stdtypes.rst:366 ../../library/stdtypes.rst:416
#: ../../library/stdtypes.rst:965 ../../library/stdtypes.rst:1170
msgid "Result"
msgstr "Resultado"

#: ../../library/stdtypes.rst:86 ../../library/stdtypes.rst:276
#: ../../library/stdtypes.rst:416 ../../library/stdtypes.rst:965
#: ../../library/stdtypes.rst:1170 ../../library/stdtypes.rst:2429
#: ../../library/stdtypes.rst:3648
msgid "Notes"
msgstr "Notas"

#: ../../library/stdtypes.rst:88
msgid "``x or y``"
msgstr "``x or y``"

#: ../../library/stdtypes.rst:88
msgid "if *x* is true, then *x*, else *y*"
msgstr "se *x* for verdadeiro, então *x*, senão *y*"

#: ../../library/stdtypes.rst:88 ../../library/stdtypes.rst:967
#: ../../library/stdtypes.rst:970 ../../library/stdtypes.rst:1181
#: ../../library/stdtypes.rst:2435 ../../library/stdtypes.rst:3654
msgid "\\(1)"
msgstr "(1)"

#: ../../library/stdtypes.rst:91
msgid "``x and y``"
msgstr "``x and y``"

#: ../../library/stdtypes.rst:91
msgid "if *x* is false, then *x*, else *y*"
msgstr "se *x* for falso, então *x*, senão *y*"

#: ../../library/stdtypes.rst:91 ../../library/stdtypes.rst:289
#: ../../library/stdtypes.rst:309 ../../library/stdtypes.rst:1209
#: ../../library/stdtypes.rst:2439 ../../library/stdtypes.rst:2441
#: ../../library/stdtypes.rst:3658 ../../library/stdtypes.rst:3660
msgid "\\(2)"
msgstr "(2)"

#: ../../library/stdtypes.rst:94
msgid "``not x``"
msgstr "``not x``"

#: ../../library/stdtypes.rst:94
msgid "if *x* is false, then ``True``, else ``False``"
msgstr "se *x* for falso, então ``True``, senão ``False``"

#: ../../library/stdtypes.rst:94 ../../library/stdtypes.rst:979
#: ../../library/stdtypes.rst:1212 ../../library/stdtypes.rst:2443
#: ../../library/stdtypes.rst:2445 ../../library/stdtypes.rst:2447
#: ../../library/stdtypes.rst:2449 ../../library/stdtypes.rst:3662
#: ../../library/stdtypes.rst:3664 ../../library/stdtypes.rst:3666
#: ../../library/stdtypes.rst:3668
msgid "\\(3)"
msgstr "(3)"

#: ../../library/stdtypes.rst:103 ../../library/stdtypes.rst:320
#: ../../library/stdtypes.rst:434 ../../library/stdtypes.rst:1016
#: ../../library/stdtypes.rst:1221 ../../library/stdtypes.rst:2475
#: ../../library/stdtypes.rst:3698
msgid "Notes:"
msgstr "Notas:"

#: ../../library/stdtypes.rst:106
msgid ""
"This is a short-circuit operator, so it only evaluates the second argument "
"if the first one is false."
msgstr ""
"Este é um operador de curto-circuito, por isso só avalia o segundo argumento "
"se o primeiro for falso."

#: ../../library/stdtypes.rst:110
msgid ""
"This is a short-circuit operator, so it only evaluates the second argument "
"if the first one is true."
msgstr ""
"Este é um operador de curto-circuito, por isso só avalia o segundo argumento "
"se o primeiro for verdadeiro."

#: ../../library/stdtypes.rst:114
msgid ""
"``not`` has a lower priority than non-Boolean operators, so ``not a == b`` "
"is interpreted as ``not (a == b)``, and ``a == not b`` is a syntax error."
msgstr ""
"``not`` tem uma prioridade inferior a operadores não booleanos, por isso "
"``not a == b`` é interpretado como ``not (a == b)``, e ``a == not b`` é um "
"erro de sintaxe."

#: ../../library/stdtypes.rst:121
msgid "Comparisons"
msgstr "Comparações"

#: ../../library/stdtypes.rst:135
msgid ""
"There are eight comparison operations in Python.  They all have the same "
"priority (which is higher than that of the Boolean operations).  Comparisons "
"can be chained arbitrarily; for example, ``x < y <= z`` is equivalent to ``x "
"< y and y <= z``, except that *y* is evaluated only once (but in both cases "
"*z* is not evaluated at all when ``x < y`` is found to be false)."
msgstr ""
"Existem oito operações de comparação em Python. Todas têm a mesma prioridade "
"(que é superior à das operações booleanas). As comparações podem ser "
"encadeadas arbitrariamente; por exemplo, ``x < y <= z`` é equivalente a ``x "
"< y and y <= z``, exceto que *y* é avaliado apenas uma vez (mas em ambos os "
"casos *z* não é avaliado se ``x < y`` for falso)."

#: ../../library/stdtypes.rst:141
msgid "This table summarizes the comparison operations:"
msgstr "Esta tabela resume as operações de comparação:"

#: ../../library/stdtypes.rst:144 ../../library/stdtypes.rst:2406
#: ../../library/stdtypes.rst:2429 ../../library/stdtypes.rst:3625
#: ../../library/stdtypes.rst:3648
msgid "Meaning"
msgstr "Significado"

#: ../../library/stdtypes.rst:146
msgid "``<``"
msgstr "``<``"

#: ../../library/stdtypes.rst:146
msgid "strictly less than"
msgstr "estritamente menor que"

#: ../../library/stdtypes.rst:148
msgid "``<=``"
msgstr "``<=``"

#: ../../library/stdtypes.rst:148
msgid "less than or equal"
msgstr "menor ou igual"

#: ../../library/stdtypes.rst:150
msgid "``>``"
msgstr "``>``"

#: ../../library/stdtypes.rst:150
msgid "strictly greater than"
msgstr "estritamente maior que"

#: ../../library/stdtypes.rst:152
msgid "``>=``"
msgstr "``>=``"

#: ../../library/stdtypes.rst:152
msgid "greater than or equal"
msgstr "maior ou igual"

#: ../../library/stdtypes.rst:154
msgid "``==``"
msgstr "``==``"

#: ../../library/stdtypes.rst:154
msgid "equal"
msgstr "igual"

#: ../../library/stdtypes.rst:156
msgid "``!=``"
msgstr "``!=``"

#: ../../library/stdtypes.rst:156
msgid "not equal"
msgstr "não igual"

#: ../../library/stdtypes.rst:158
msgid "``is``"
msgstr "``is``"

#: ../../library/stdtypes.rst:158
msgid "object identity"
msgstr "identidade de objeto"

#: ../../library/stdtypes.rst:160
msgid "``is not``"
msgstr "``is not``"

#: ../../library/stdtypes.rst:160
msgid "negated object identity"
msgstr "identidade de objeto negada"

#: ../../library/stdtypes.rst:167
msgid ""
"Objects of different types, except different numeric types, never compare "
"equal. The ``==`` operator is always defined but for some object types (for "
"example, class objects) is equivalent to :keyword:`is`. The ``<``, ``<=``, "
"``>`` and ``>=`` operators are only defined where they make sense; for "
"example, they raise a :exc:`TypeError` exception when one of the arguments "
"is a complex number."
msgstr ""
"Objetos de tipos diferentes, exceto tipos numéricos diferentes, nunca são "
"considerados iguais. O operador ``==`` está sempre definido, mas para alguns "
"tipos de objetos (por exemplo, objetos de classe) é equivalente a :keyword:"
"`is`. Os operadores ``<``, ``<=``, ``>`` e ``>=`` só estão definidos onde "
"fazem sentido; por exemplo, lançam uma exceção :exc:`TypeError` quando um "
"dos argumentos é um número complexo."

#: ../../library/stdtypes.rst:181
msgid ""
"Non-identical instances of a class normally compare as non-equal unless the "
"class defines the :meth:`~object.__eq__` method."
msgstr ""
"Instâncias não idênticas de uma classe normalmente são consideradas não "
"iguais, a menos que a classe defina o método :meth:`~object.__eq__`."

#: ../../library/stdtypes.rst:184
msgid ""
"Instances of a class cannot be ordered with respect to other instances of "
"the same class, or other types of object, unless the class defines enough of "
"the methods :meth:`~object.__lt__`, :meth:`~object.__le__`, :meth:`~object."
"__gt__`, and :meth:`~object.__ge__` (in general, :meth:`~object.__lt__` and :"
"meth:`~object.__eq__` are sufficient, if you want the conventional meanings "
"of the comparison operators)."
msgstr ""
"Instâncias de uma classe não podem ser ordenadas em relação a outras "
"instâncias da mesma classe, ou outros tipos de objetos, a menos que a classe "
"defina métodos suficientes entre :meth:`~object.__lt__`, :meth:`~object."
"__le__`, :meth:`~object.__gt__` e :meth:`~object.__ge__` (em geral, :meth:"
"`~object.__lt__` e :meth:`~object.__eq__` são suficientes, se pretender os "
"significados convencionais dos operadores de comparação)."

#: ../../library/stdtypes.rst:191
msgid ""
"The behavior of the :keyword:`is` and :keyword:`is not` operators cannot be "
"customized; also they can be applied to any two objects and never raise an "
"exception."
msgstr ""
"O comportamento dos operadores :keyword:`is` e :keyword:`is not` não pode "
"ser personalizado; também podem ser aplicados a quaisquer dois objetos e "
"nunca lançam uma exceção."

#: ../../library/stdtypes.rst:199
msgid ""
"Two more operations with the same syntactic priority, :keyword:`in` and :"
"keyword:`not in`, are supported by types that are :term:`iterable` or "
"implement the :meth:`~object.__contains__` method."
msgstr ""
"Duas operações adicionais com a mesma prioridade sintática, :keyword:`in` e :"
"keyword:`not in`, são suportadas por tipos que são :term:`iteráveis` ou "
"implementam o método :meth:`~object.__contains__`."

#: ../../library/stdtypes.rst:206
msgid "Numeric Types --- :class:`int`, :class:`float`, :class:`complex`"
msgstr "Tipos numéricos --- :class:`int`, :class:`float`, :class:`complex`"

#: ../../library/stdtypes.rst:216
msgid ""
"There are three distinct numeric types: :dfn:`integers`, :dfn:`floating-"
"point numbers`, and :dfn:`complex numbers`.  In addition, Booleans are a "
"subtype of integers.  Integers have unlimited precision.  Floating-point "
"numbers are usually implemented using :c:expr:`double` in C; information "
"about the precision and internal representation of floating-point numbers "
"for the machine on which your program is running is available in :data:`sys."
"float_info`.  Complex numbers have a real and imaginary part, which are each "
"a floating-point number.  To extract these parts from a complex number *z*, "
"use ``z.real`` and ``z.imag``. (The standard library includes the additional "
"numeric types :mod:`fractions.Fraction`, for rationals, and :mod:`decimal."
"Decimal`, for floating-point numbers with user-definable precision.)"
msgstr ""
"Existem três tipos numéricos distintos: :dfn:`inteiros`, :dfn:`números de "
"ponto flutuante` e :dfn:`números complexos`. Além disso, os booleanos são um "
"subtipo de inteiros. Os inteiros têm precisão ilimitada. Os números de ponto "
"flutuante são geralmente implementados usando :c:expr:`double` em C; "
"informações sobre a precisão e representação interna dos números de ponto "
"flutuante para a máquina na qual o programa está a ser executado estão "
"disponíveis em :data:`sys.float_info`. Os números complexos têm uma parte "
"real e imaginária, que são cada uma um número de ponto flutuante. Para "
"extrair estas partes de um número complexo *z*, use ``z.real`` e ``z.imag``. "
"(A biblioteca padrão inclui os tipos numéricos adicionais :mod:`fractions."
"Fraction`, para racionais, e :mod:`decimal.Decimal`, para números de ponto "
"flutuante com precisão definível pelo utilizador.)"

#: ../../library/stdtypes.rst:238
msgid ""
"Numbers are created by numeric literals or as the result of built-in "
"functions and operators.  Unadorned integer literals (including hex, octal "
"and binary numbers) yield integers.  Numeric literals containing a decimal "
"point or an exponent sign yield floating-point numbers.  Appending ``'j'`` "
"or ``'J'`` to a numeric literal yields an imaginary number (a complex number "
"with a zero real part) which you can add to an integer or float to get a "
"complex number with real and imaginary parts."
msgstr ""
"Os números são criados por literais numéricos ou como resultado de funções e "
"operadores integrados. Literais inteiros não adornados (incluindo números "
"hexadecimais, octais e binários) produzem inteiros. Literais numéricos que "
"contêm um ponto decimal ou um sinal de expoente produzem números de ponto "
"flutuante. Acrescentar ``'j'`` ou ``'J'`` a um literal numérico produz um "
"número imaginário (um número complexo com uma parte real zero), que pode ser "
"adicionado a um inteiro ou *float* para obter um número complexo com partes "
"real e imaginária."

#: ../../library/stdtypes.rst:263
msgid ""
"Python fully supports mixed arithmetic: when a binary arithmetic operator "
"has operands of different numeric types, the operand with the \"narrower\" "
"type is widened to that of the other, where integer is narrower than "
"floating point, which is narrower than complex. A comparison between numbers "
"of different types behaves as though the exact values of those numbers were "
"being compared. [2]_"
msgstr ""

#: ../../library/stdtypes.rst:269
msgid ""
"The constructors :func:`int`, :func:`float`, and :func:`complex` can be used "
"to produce numbers of a specific type."
msgstr ""
"Os construtores :func:`int`, :func:`float` e :func:`complex` podem ser "
"usados para produzir números de um tipo específico."

#: ../../library/stdtypes.rst:272
msgid ""
"All numeric types (except complex) support the following operations (for "
"priorities of the operations, see :ref:`operator-summary`):"
msgstr ""
"Todos os tipos numéricos (exceto complexos) suportam as seguintes operações "
"(para prioridades das operações, consulte :ref:`operator-summary`):"

#: ../../library/stdtypes.rst:276
msgid "Full documentation"
msgstr "Documentação completa"

#: ../../library/stdtypes.rst:278
msgid "``x + y``"
msgstr "``x + y``"

#: ../../library/stdtypes.rst:278
msgid "sum of *x* and *y*"
msgstr "soma de *x* e *y*"

#: ../../library/stdtypes.rst:280
msgid "``x - y``"
msgstr "``x - y``"

#: ../../library/stdtypes.rst:280
msgid "difference of *x* and *y*"
msgstr "diferença entre *x* e *y*"

#: ../../library/stdtypes.rst:282
msgid "``x * y``"
msgstr "``x * y``"

#: ../../library/stdtypes.rst:282
msgid "product of *x* and *y*"
msgstr "produto de *x* e *y*"

#: ../../library/stdtypes.rst:284
msgid "``x / y``"
msgstr "``x / y``"

#: ../../library/stdtypes.rst:284
msgid "quotient of *x* and *y*"
msgstr "quociente de *x* e *y*"

#: ../../library/stdtypes.rst:286
msgid "``x // y``"
msgstr "``x // y``"

#: ../../library/stdtypes.rst:286
msgid "floored quotient of *x* and *y*"
msgstr "quociente arredondado para baixo de *x* e *y*"

#: ../../library/stdtypes.rst:286
msgid "\\(1)\\(2)"
msgstr "(1)(2)"

#: ../../library/stdtypes.rst:289
msgid "``x % y``"
msgstr "``x % y``"

#: ../../library/stdtypes.rst:289
msgid "remainder of ``x / y``"
msgstr "resto de ``x / y``"

#: ../../library/stdtypes.rst:291
msgid "``-x``"
msgstr "``-x``"

#: ../../library/stdtypes.rst:291
msgid "*x* negated"
msgstr "*x* negado"

#: ../../library/stdtypes.rst:293
msgid "``+x``"
msgstr "``+x``"

#: ../../library/stdtypes.rst:293
msgid "*x* unchanged"
msgstr "*x* inalterado"

#: ../../library/stdtypes.rst:295
msgid "``abs(x)``"
msgstr "``abs(x)``"

#: ../../library/stdtypes.rst:295
msgid "absolute value or magnitude of *x*"
msgstr "valor absoluto ou magnitude de *x*"

#: ../../library/stdtypes.rst:295
msgid ":func:`abs`"
msgstr ":func:`abs`"

#: ../../library/stdtypes.rst:298
msgid "``int(x)``"
msgstr "``int(x)``"

#: ../../library/stdtypes.rst:298
msgid "*x* converted to integer"
msgstr "*x* convertido para inteiro"

#: ../../library/stdtypes.rst:298
msgid "\\(3)\\(6)"
msgstr "(3)(6)"

#: ../../library/stdtypes.rst:298
msgid ":func:`int`"
msgstr ":func:`int`"

#: ../../library/stdtypes.rst:300
msgid "``float(x)``"
msgstr "``float(x)``"

#: ../../library/stdtypes.rst:300
msgid "*x* converted to floating point"
msgstr "*x* convertido para ponto flutuante"

#: ../../library/stdtypes.rst:300
msgid "\\(4)\\(6)"
msgstr "(4)(6)"

#: ../../library/stdtypes.rst:300
msgid ":func:`float`"
msgstr ":func:`float`"

#: ../../library/stdtypes.rst:302
msgid "``complex(re, im)``"
msgstr "``complex(re, im)``"

#: ../../library/stdtypes.rst:302
msgid ""
"a complex number with real part *re*, imaginary part *im*. *im* defaults to "
"zero."
msgstr ""
"um número complexo com parte real *re*, parte imaginária *im*. *im* é zero "
"por predefinição."

#: ../../library/stdtypes.rst:302 ../../library/stdtypes.rst:1202
#: ../../library/stdtypes.rst:2437 ../../library/stdtypes.rst:3685
msgid "\\(6)"
msgstr "(6)"

#: ../../library/stdtypes.rst:302
msgid ":func:`complex`"
msgstr ":func:`complex`"

#: ../../library/stdtypes.rst:306
msgid "``c.conjugate()``"
msgstr "``c.conjugate()``"

#: ../../library/stdtypes.rst:306
msgid "conjugate of the complex number *c*"
msgstr "conjugado do número complexo *c*"

#: ../../library/stdtypes.rst:309
msgid "``divmod(x, y)``"
msgstr "``divmod(x, y)``"

#: ../../library/stdtypes.rst:309
msgid "the pair ``(x // y, x % y)``"
msgstr "o par ``(x // y, x % y)``"

#: ../../library/stdtypes.rst:309
msgid ":func:`divmod`"
msgstr ":func:`divmod`"

#: ../../library/stdtypes.rst:311
msgid "``pow(x, y)``"
msgstr "``pow(x, y)``"

#: ../../library/stdtypes.rst:311 ../../library/stdtypes.rst:313
msgid "*x* to the power *y*"
msgstr "*x* elevado a *y*"

#: ../../library/stdtypes.rst:311 ../../library/stdtypes.rst:313
#: ../../library/stdtypes.rst:1191 ../../library/stdtypes.rst:1194
#: ../../library/stdtypes.rst:2462 ../../library/stdtypes.rst:2465
#: ../../library/stdtypes.rst:2468 ../../library/stdtypes.rst:3681
#: ../../library/stdtypes.rst:3688
msgid "\\(5)"
msgstr "(5)"

#: ../../library/stdtypes.rst:311
msgid ":func:`pow`"
msgstr ":func:`pow`"

#: ../../library/stdtypes.rst:313
msgid "``x ** y``"
msgstr "``x ** y``"

#: ../../library/stdtypes.rst:323
msgid ""
"Also referred to as integer division.  For operands of type :class:`int`, "
"the result has type :class:`int`.  For operands of type :class:`float`, the "
"result has type :class:`float`.  In general, the result is a whole integer, "
"though the result's type is not necessarily :class:`int`.  The result is "
"always rounded towards minus infinity: ``1//2`` is ``0``, ``(-1)//2`` is "
"``-1``, ``1//(-2)`` is ``-1``, and ``(-1)//(-2)`` is ``0``."
msgstr ""
"Também referido como divisão inteira. Para operandos do tipo :class:`int`, o "
"resultado tem o tipo :class:`int`. Para operandos do tipo :class:`float`, o "
"resultado tem o tipo :class:`float`. Em geral, o resultado é um inteiro, "
"embora o tipo do resultado não seja necessariamente :class:`int`. O "
"resultado é sempre arredondado para menos infinito: ``1//2`` é ``0``, "
"``(-1)//2`` é ``-1``, ``1//(-2)`` é ``-1``, e ``(-1)//(-2)`` é ``0``."

#: ../../library/stdtypes.rst:331
msgid ""
"Not for complex numbers.  Instead convert to floats using :func:`abs` if "
"appropriate."
msgstr ""
"Não aplicável a números complexos. Em vez disso, converta para *floats* "
"usando :func:`abs`, se apropriado."

#: ../../library/stdtypes.rst:342
msgid ""
"Conversion from :class:`float` to :class:`int` truncates, discarding the "
"fractional part. See functions :func:`math.floor` and :func:`math.ceil` for "
"alternative conversions."
msgstr ""
"A conversão de :class:`float` para :class:`int` trunca, descartando a parte "
"fracionária. Consulte as funções :func:`math.floor` e :func:`math.ceil` para "
"conversões alternativas."

#: ../../library/stdtypes.rst:347
msgid ""
"float also accepts the strings \"nan\" and \"inf\" with an optional prefix "
"\"+\" or \"-\" for Not a Number (NaN) and positive or negative infinity."
msgstr ""
"float também aceita as *strings* \"nan\" e \"inf\" com um prefixo opcional "
"\"+\" ou \"-\" para Not a Number (NaN) e infinito positivo ou negativo."

#: ../../library/stdtypes.rst:351
msgid ""
"Python defines ``pow(0, 0)`` and ``0 ** 0`` to be ``1``, as is common for "
"programming languages."
msgstr ""
"O Python define ``pow(0, 0)`` e ``0 ** 0`` como ``1``, como é comum em "
"linguagens de programação."

#: ../../library/stdtypes.rst:355
msgid ""
"The numeric literals accepted include the digits ``0`` to ``9`` or any "
"Unicode equivalent (code points with the ``Nd`` property)."
msgstr ""
"Os literais numéricos aceites incluem os dígitos ``0`` a ``9`` ou qualquer "
"equivalente Unicode (pontos de código com a propriedade ``Nd``)."

#: ../../library/stdtypes.rst:358
msgid ""
"See `the Unicode Standard <https://unicode.org/Public/UNIDATA/extracted/"
"DerivedNumericType.txt>`_ for a complete list of code points with the ``Nd`` "
"property."
msgstr ""
"Consulte `o Padrão Unicode <https://unicode.org/Public/UNIDATA/extracted/"
"DerivedNumericType.txt>`_ para uma lista completa de pontos de código com a "
"propriedade ``Nd``."

#: ../../library/stdtypes.rst:362
msgid ""
"All :class:`numbers.Real` types (:class:`int` and :class:`float`) also "
"include the following operations:"
msgstr ""
"Todos os tipos :class:`numbers.Real` (:class:`int` e :class:`float`) também "
"incluem as seguintes operações:"

#: ../../library/stdtypes.rst:368
msgid ":func:`math.trunc(\\ x) <math.trunc>`"
msgstr ":func:`math.trunc(x) <math.trunc>`"

#: ../../library/stdtypes.rst:368
msgid "*x* truncated to :class:`~numbers.Integral`"
msgstr "*x* truncado para :class:`~numbers.Integral`"

#: ../../library/stdtypes.rst:371
msgid ":func:`round(x[, n]) <round>`"
msgstr ":func:`round(x[, n]) <round>`"

#: ../../library/stdtypes.rst:371
msgid ""
"*x* rounded to *n* digits, rounding half to even. If *n* is omitted, it "
"defaults to 0."
msgstr ""
"*x* arredondado a *n* dígitos, arredondando metade para par. Se *n* for "
"omitido, o valor predefinido é 0."

#: ../../library/stdtypes.rst:375
msgid ":func:`math.floor(\\ x) <math.floor>`"
msgstr ":func:`math.floor(x) <math.floor>`"

#: ../../library/stdtypes.rst:375
msgid "the greatest :class:`~numbers.Integral` <= *x*"
msgstr "o maior :class:`~numbers.Integral` <= *x*"

#: ../../library/stdtypes.rst:378
msgid ":func:`math.ceil(x) <math.ceil>`"
msgstr ":func:`math.ceil(x) <math.ceil>`"

#: ../../library/stdtypes.rst:378
msgid "the least :class:`~numbers.Integral` >= *x*"
msgstr "o menor :class:`~numbers.Integral` >= *x*"

#: ../../library/stdtypes.rst:382
msgid ""
"For additional numeric operations see the :mod:`math` and :mod:`cmath` "
"modules."
msgstr ""
"Para operações numéricas adicionais, consulte os módulos :mod:`math` e :mod:"
"`cmath`."

#: ../../library/stdtypes.rst:391
msgid "Bitwise Operations on Integer Types"
msgstr "Operações bit a bit em tipos inteiros"

#: ../../library/stdtypes.rst:405
msgid ""
"Bitwise operations only make sense for integers. The result of bitwise "
"operations is calculated as though carried out in two's complement with an "
"infinite number of sign bits."
msgstr ""
"As operações bit a bit só fazem sentido para inteiros. O resultado das "
"operações bit a bit é calculado como se fosse realizado em complemento para "
"dois com um número infinito de bits de sinal."

#: ../../library/stdtypes.rst:409
msgid ""
"The priorities of the binary bitwise operations are all lower than the "
"numeric operations and higher than the comparisons; the unary operation "
"``~`` has the same priority as the other unary numeric operations (``+`` and "
"``-``)."
msgstr ""
"As prioridades das operações bit a bit binárias são todas inferiores às "
"operações numéricas e superiores às comparações; a operação unária ``~`` tem "
"a mesma prioridade que as outras operações numéricas unárias (``+`` e ``-``)."

#: ../../library/stdtypes.rst:413
msgid "This table lists the bitwise operations sorted in ascending priority:"
msgstr ""
"Esta tabela lista as operações bit a bit ordenadas por prioridade ascendente:"

#: ../../library/stdtypes.rst:418
msgid "``x | y``"
msgstr "``x | y``"

#: ../../library/stdtypes.rst:418
msgid "bitwise :dfn:`or` of *x* and *y*"
msgstr "OR bit a bit de *x* e *y*"

#: ../../library/stdtypes.rst:418 ../../library/stdtypes.rst:421
#: ../../library/stdtypes.rst:424 ../../library/stdtypes.rst:1216
#: ../../library/stdtypes.rst:2451 ../../library/stdtypes.rst:2455
#: ../../library/stdtypes.rst:3670 ../../library/stdtypes.rst:3674
msgid "\\(4)"
msgstr "(4)"

#: ../../library/stdtypes.rst:421
msgid "``x ^ y``"
msgstr "``x ^ y``"

#: ../../library/stdtypes.rst:421
msgid "bitwise :dfn:`exclusive or` of *x* and *y*"
msgstr "XOR bit a bit de *x* e *y*"

#: ../../library/stdtypes.rst:424
msgid "``x & y``"
msgstr "``x & y``"

#: ../../library/stdtypes.rst:424
msgid "bitwise :dfn:`and` of *x* and *y*"
msgstr "AND bit a bit de *x* e *y*"

#: ../../library/stdtypes.rst:427
msgid "``x << n``"
msgstr "``x << n``"

#: ../../library/stdtypes.rst:427
msgid "*x* shifted left by *n* bits"
msgstr "*x* deslocado à esquerda por *n* bits"

#: ../../library/stdtypes.rst:427
msgid "(1)(2)"
msgstr "(1)(2)"

#: ../../library/stdtypes.rst:429
msgid "``x >> n``"
msgstr "``x >> n``"

#: ../../library/stdtypes.rst:429
msgid "*x* shifted right by *n* bits"
msgstr "*x* deslocado à direita por *n* bits"

#: ../../library/stdtypes.rst:429
msgid "(1)(3)"
msgstr "(1)(3)"

#: ../../library/stdtypes.rst:431
msgid "``~x``"
msgstr "``~x``"

#: ../../library/stdtypes.rst:431
msgid "the bits of *x* inverted"
msgstr "os bits de *x* invertidos"

#: ../../library/stdtypes.rst:437
msgid ""
"Negative shift counts are illegal and cause a :exc:`ValueError` to be raised."
msgstr ""
"Contagens de deslocamento negativas são ilegais e causam uma exceção :exc:"
"`ValueError`."

#: ../../library/stdtypes.rst:440
msgid ""
"A left shift by *n* bits is equivalent to multiplication by ``pow(2, n)``."
msgstr ""
"Um deslocamento à esquerda por *n* bits é equivalente à multiplicação por "
"``pow(2, n)``."

#: ../../library/stdtypes.rst:443
msgid ""
"A right shift by *n* bits is equivalent to floor division by ``pow(2, n)``."
msgstr ""
"Um deslocamento à direita por *n* bits é equivalente à divisão inteira por "
"``pow(2, n)``."

#: ../../library/stdtypes.rst:446
msgid ""
"Performing these calculations with at least one extra sign extension bit in "
"a finite two's complement representation (a working bit-width of ``1 + max(x."
"bit_length(), y.bit_length())`` or more) is sufficient to get the same "
"result as if there were an infinite number of sign bits."
msgstr ""
"Realizar estes cálculos com pelo menos um bit extra de extensão de sinal "
"numa representação finita de complemento para dois (uma largura de bits de "
"trabalho de ``1 + max(x.bit_length(), y.bit_length())`` ou mais) é "
"suficiente para obter o mesmo resultado como se houvesse um número infinito "
"de bits de sinal."

#: ../../library/stdtypes.rst:453
msgid "Additional Methods on Integer Types"
msgstr "Métodos adicionais em tipos inteiros"

#: ../../library/stdtypes.rst:455
msgid ""
"The int type implements the :class:`numbers.Integral` :term:`abstract base "
"class`. In addition, it provides a few more methods:"
msgstr ""
"O tipo int implementa a :class:`numbers.Integral` :term:`classe base "
"abstrata`. Além disso, fornece alguns métodos adicionais:"

#: ../../library/stdtypes.rst:460
msgid ""
"Return the number of bits necessary to represent an integer in binary, "
"excluding the sign and leading zeros::"
msgstr ""
"Retorna o número de bits necessários para representar um inteiro em binário, "
"excluindo o sinal e os zeros à esquerda:"

#: ../../library/stdtypes.rst:463
msgid ""
">>> n = -37\n"
">>> bin(n)\n"
"'-0b100101'\n"
">>> n.bit_length()\n"
"6"
msgstr ""
">>> n = -37\n"
">>> bin(n)\n"
"'-0b100101'\n"
">>> n.bit_length()\n"
"6"

#: ../../library/stdtypes.rst:469
msgid ""
"More precisely, if ``x`` is nonzero, then ``x.bit_length()`` is the unique "
"positive integer ``k`` such that ``2**(k-1) <= abs(x) < 2**k``. "
"Equivalently, when ``abs(x)`` is small enough to have a correctly rounded "
"logarithm, then ``k = 1 + int(log(abs(x), 2))``. If ``x`` is zero, then ``x."
"bit_length()`` returns ``0``."
msgstr ""
"Mais precisamente, se ``x`` não for zero, então ``x.bit_length()`` é o único "
"inteiro positivo ``k`` tal que ``2**(k-1) <= abs(x) < 2**k``. De forma "
"equivalente, quando ``abs(x)`` é suficientemente pequeno para ter um "
"logaritmo corretamente arredondado, então ``k = 1 + int(log(abs(x), 2))``. "
"Se ``x`` for zero, então ``x.bit_length()`` retorna ``0``."

#: ../../library/stdtypes.rst:475 ../../library/stdtypes.rst:498
#: ../../library/stdtypes.rst:543 ../../library/stdtypes.rst:587
msgid "Equivalent to::"
msgstr "Equivalente a::"

#: ../../library/stdtypes.rst:477
msgid ""
"def bit_length(self):\n"
"    s = bin(self)       # binary representation:  bin(-37) --> '-0b100101'\n"
"    s = s.lstrip('-0b') # remove leading zeros and minus sign\n"
"    return len(s)       # len('100101') --> 6"
msgstr ""
"def bit_length(self):\n"
"    s = bin(self)       # representação binária: bin(-37) --> '-0b100101'\n"
"    s = s.lstrip('-0b') # remove zeros à esquerda e sinal de menos\n"
"    return len(s)       # len('100101') --> 6"

#: ../../library/stdtypes.rst:486
msgid ""
"Return the number of ones in the binary representation of the absolute value "
"of the integer. This is also known as the population count. Example::"
msgstr ""
"Retorna o número de uns na representação binária do valor absoluto do "
"inteiro. Isto também é conhecido como contagem de população. Exemplo:"

#: ../../library/stdtypes.rst:490
msgid ""
">>> n = 19\n"
">>> bin(n)\n"
"'0b10011'\n"
">>> n.bit_count()\n"
"3\n"
">>> (-n).bit_count()\n"
"3"
msgstr ""
">>> n = 19\n"
">>> bin(n)\n"
"'0b10011'\n"
">>> n.bit_count()\n"
"3\n"
">>> (-n).bit_count()\n"
"3"

#: ../../library/stdtypes.rst:500
msgid ""
"def bit_count(self):\n"
"    return bin(self).count(\"1\")"
msgstr ""
"def bit_count(self):\n"
"    return bin(self).count(\"1\")"

#: ../../library/stdtypes.rst:507
msgid "Return an array of bytes representing an integer."
msgstr "Retorna um *array* de bytes que representa um inteiro."

#: ../../library/stdtypes.rst:519
msgid ""
"The integer is represented using *length* bytes, and defaults to 1.  An :exc:"
"`OverflowError` is raised if the integer is not representable with the given "
"number of bytes."
msgstr ""
"O inteiro é representado usando *length* bytes, e o valor predefinido é 1. "
"Uma exceção :exc:`OverflowError` é lançada se o inteiro não for "
"representável com o número dado de bytes."

#: ../../library/stdtypes.rst:523
msgid ""
"The *byteorder* argument determines the byte order used to represent the "
"integer, and defaults to ``\"big\"``.  If *byteorder* is ``\"big\"``, the "
"most significant byte is at the beginning of the byte array.  If *byteorder* "
"is ``\"little\"``, the most significant byte is at the end of the byte array."
msgstr ""
"O argumento *byteorder* determina a ordem dos bytes usada para representar o "
"inteiro, e o valor predefinido é ``\"big\"``. Se *byteorder* for "
"``\"big\"``, o byte mais significativo está no início do *array* de bytes. "
"Se *byteorder* for ``\"little\"``, o byte mais significativo está no final "
"do *array* de bytes."

#: ../../library/stdtypes.rst:529
msgid ""
"The *signed* argument determines whether two's complement is used to "
"represent the integer.  If *signed* is ``False`` and a negative integer is "
"given, an :exc:`OverflowError` is raised. The default value for *signed* is "
"``False``."
msgstr ""
"O argumento *signed* determina se o complemento para dois é usado para "
"representar o inteiro. Se *signed* for ``False`` e for fornecido um inteiro "
"negativo, é lançada uma exceção :exc:`OverflowError`. O valor predefinido "
"para *signed* é ``False``."

#: ../../library/stdtypes.rst:534
msgid ""
"The default values can be used to conveniently turn an integer into a single "
"byte object::"
msgstr ""
"Os valores predefinidos podem ser usados para converter convenientemente um "
"inteiro num objeto de byte único:"

#: ../../library/stdtypes.rst:537
msgid ""
">>> (65).to_bytes()\n"
"b'A'"
msgstr ""
">>> (65).to_bytes()\n"
"b'A'"

#: ../../library/stdtypes.rst:540
msgid ""
"However, when using the default arguments, don't try to convert a value "
"greater than 255 or you'll get an :exc:`OverflowError`."
msgstr ""
"No entanto, ao usar os argumentos predefinidos, não tente converter um valor "
"maior que 255 ou obterá uma exceção :exc:`OverflowError`."

#: ../../library/stdtypes.rst:545
msgid ""
"def to_bytes(n, length=1, byteorder='big', signed=False):\n"
"    if byteorder == 'little':\n"
"        order = range(length)\n"
"    elif byteorder == 'big':\n"
"        order = reversed(range(length))\n"
"    else:\n"
"        raise ValueError(\"byteorder must be either 'little' or 'big'\")\n"
"\n"
"    return bytes((n >> i*8) & 0xff for i in order)"
msgstr ""
"def to_bytes(n, length=1, byteorder='big', signed=False):\n"
"    if byteorder == 'little':\n"
"        order = range(length)\n"
"    elif byteorder == 'big':\n"
"        order = reversed(range(length))\n"
"    else:\n"
"        raise ValueError(\"byteorder must be either 'little' or 'big'\")\n"
"\n"
"    return bytes((n >> i*8) & 0xff for i in order)"

#: ../../library/stdtypes.rst:556
msgid "Added default argument values for ``length`` and ``byteorder``."
msgstr ""
"Adicionados valores de argumento predefinidos para ``length`` e "
"``byteorder``."

#: ../../library/stdtypes.rst:561
msgid "Return the integer represented by the given array of bytes."
msgstr "Retorna o inteiro representado pelo *array* de bytes fornecido."

#: ../../library/stdtypes.rst:574
msgid ""
"The argument *bytes* must either be a :term:`bytes-like object` or an "
"iterable producing bytes."
msgstr ""
"O argumento *bytes* deve ser um :term:`objeto do tipo bytes` ou um iterável "
"que produz bytes."

#: ../../library/stdtypes.rst:577
msgid ""
"The *byteorder* argument determines the byte order used to represent the "
"integer, and defaults to ``\"big\"``.  If *byteorder* is ``\"big\"``, the "
"most significant byte is at the beginning of the byte array.  If *byteorder* "
"is ``\"little\"``, the most significant byte is at the end of the byte "
"array.  To request the native byte order of the host system, use :data:`sys."
"byteorder` as the byte order value."
msgstr ""
"O argumento *byteorder* determina a ordem dos bytes usada para representar o "
"inteiro, e o valor predefinido é ``\"big\"``. Se *byteorder* for "
"``\"big\"``, o byte mais significativo está no início do *array* de bytes. "
"Se *byteorder* for ``\"little\"``, o byte mais significativo está no final "
"do *array* de bytes. Para solicitar a ordem de bytes nativa do sistema "
"hospedeiro, use :data:`sys.byteorder` como o valor da ordem de bytes."

#: ../../library/stdtypes.rst:584
msgid ""
"The *signed* argument indicates whether two's complement is used to "
"represent the integer."
msgstr ""
"O argumento *signed* indica se o complemento para dois é usado para "
"representar o inteiro."

#: ../../library/stdtypes.rst:589
msgid ""
"def from_bytes(bytes, byteorder='big', signed=False):\n"
"    if byteorder == 'little':\n"
"        little_ordered = list(bytes)\n"
"    elif byteorder == 'big':\n"
"        little_ordered = list(reversed(bytes))\n"
"    else:\n"
"        raise ValueError(\"byteorder must be either 'little' or 'big'\")\n"
"\n"
"    n = sum(b << i*8 for i, b in enumerate(little_ordered))\n"
"    if signed and little_ordered and (little_ordered[-1] & 0x80):\n"
"        n -= 1 << 8*len(little_ordered)\n"
"\n"
"    return n"
msgstr ""
"def from_bytes(bytes, byteorder='big', signed=False):\n"
"    if byteorder == 'little':\n"
"        little_ordered = list(bytes)\n"
"    elif byteorder == 'big':\n"
"        little_ordered = list(reversed(bytes))\n"
"    else:\n"
"        raise ValueError(\"byteorder must be either 'little' or 'big'\")\n"
"\n"
"    n = sum(b << i*8 for i, b in enumerate(little_ordered))\n"
"    if signed and little_ordered and (little_ordered[-1] & 0x80):\n"
"        n -= 1 << 8*len(little_ordered)\n"
"\n"
"    return n"

#: ../../library/stdtypes.rst:604
msgid "Added default argument value for ``byteorder``."
msgstr "Adicionado valor de argumento predefinido para ``byteorder``."

#: ../../library/stdtypes.rst:609
msgid ""
"Return a pair of integers whose ratio is equal to the original integer and "
"has a positive denominator.  The integer ratio of integers (whole numbers) "
"is always the integer as the numerator and ``1`` as the denominator."
msgstr ""
"Retorna um par de inteiros cuja razão é igual ao inteiro original e tem um "
"denominador positivo. A razão inteira de inteiros (números inteiros) é "
"sempre o inteiro como numerador e ``1`` como denominador."

#: ../../library/stdtypes.rst:618
msgid ""
"Returns ``True``. Exists for duck type compatibility with :meth:`float."
"is_integer`."
msgstr ""
"Retorna ``True``. Existe para compatibilidade de tipo pato com :meth:`float."
"is_integer`."

#: ../../library/stdtypes.rst:623
msgid "Additional Methods on Float"
msgstr "Métodos adicionais em Float"

#: ../../library/stdtypes.rst:625
msgid ""
"The float type implements the :class:`numbers.Real` :term:`abstract base "
"class`. float also has the following additional methods."
msgstr ""
"O tipo float implementa a :class:`numbers.Real` :term:`classe base "
"abstrata`. float também tem os seguintes métodos adicionais."

#: ../../library/stdtypes.rst:630
msgid ""
"Return a pair of integers whose ratio is exactly equal to the original "
"float. The ratio is in lowest terms and has a positive denominator.  Raises :"
"exc:`OverflowError` on infinities and a :exc:`ValueError` on NaNs."
msgstr ""
"Retorna um par de inteiros cuja razão é exatamente igual ao float original. "
"A razão está nos termos mais baixos e tem um denominador positivo. Lança :"
"exc:`OverflowError` em infinitos e :exc:`ValueError` em NaNs."

#: ../../library/stdtypes.rst:637
msgid ""
"Return ``True`` if the float instance is finite with integral value, and "
"``False`` otherwise::"
msgstr ""
"Retorna ``True`` se a instância float for finita com valor integral, e "
"``False`` caso contrário:"

#: ../../library/stdtypes.rst:640
msgid ""
">>> (-2.0).is_integer()\n"
"True\n"
">>> (3.2).is_integer()\n"
"False"
msgstr ""
">>> (-2.0).is_integer()\n"
"True\n"
">>> (3.2).is_integer()\n"
"False"

#: ../../library/stdtypes.rst:645
msgid ""
"Two methods support conversion to and from hexadecimal strings.  Since "
"Python's floats are stored internally as binary numbers, converting a float "
"to or from a *decimal* string usually involves a small rounding error.  In "
"contrast, hexadecimal strings allow exact representation and specification "
"of floating-point numbers.  This can be useful when debugging, and in "
"numerical work."
msgstr ""
"Dois métodos suportam conversão para e a partir de *strings* hexadecimais. "
"Como os floats do Python são armazenados internamente como números binários, "
"converter um float para ou a partir de uma *string* decimal geralmente "
"envolve um pequeno erro de arredondamento. Em contraste, as *strings* "
"hexadecimais permitem representação e especificação exatas de números de "
"ponto flutuante. Isto pode ser útil na depuração e em trabalho numérico."

#: ../../library/stdtypes.rst:656
msgid ""
"Return a representation of a floating-point number as a hexadecimal string.  "
"For finite floating-point numbers, this representation will always include a "
"leading ``0x`` and a trailing ``p`` and exponent."
msgstr ""
"Retorna uma representação de um número de ponto flutuante como uma *string* "
"hexadecimal. Para números de ponto flutuante finitos, esta representação "
"incluirá sempre um ``0x`` inicial e um ``p`` final e expoente."

#: ../../library/stdtypes.rst:664
msgid ""
"Class method to return the float represented by a hexadecimal string *s*.  "
"The string *s* may have leading and trailing whitespace."
msgstr ""
"Método de classe para retornar o float representado por uma *string* "
"hexadecimal *s*. A *string* *s* pode ter espaços em branco iniciais e finais."

#: ../../library/stdtypes.rst:669
msgid ""
"Note that :meth:`float.hex` is an instance method, while :meth:`float."
"fromhex` is a class method."
msgstr ""
"Note que :meth:`float.hex` é um método de instância, enquanto :meth:`float."
"fromhex` é um método de classe."

#: ../../library/stdtypes.rst:672
msgid "A hexadecimal string takes the form::"
msgstr "Uma *string* hexadecimal tem a forma:"

#: ../../library/stdtypes.rst:674
msgid "[sign] ['0x'] integer ['.' fraction] ['p' exponent]"
msgstr "[sinal] ['0x'] inteiro ['.' fração] ['p' expoente]"

#: ../../library/stdtypes.rst:676
msgid ""
"where the optional ``sign`` may by either ``+`` or ``-``, ``integer`` and "
"``fraction`` are strings of hexadecimal digits, and ``exponent`` is a "
"decimal integer with an optional leading sign.  Case is not significant, and "
"there must be at least one hexadecimal digit in either the integer or the "
"fraction.  This syntax is similar to the syntax specified in section 6.4.4.2 "
"of the C99 standard, and also to the syntax used in Java 1.5 onwards.  In "
"particular, the output of :meth:`float.hex` is usable as a hexadecimal "
"floating-point literal in C or Java code, and hexadecimal strings produced "
"by C's ``%a`` format character or Java's ``Double.toHexString`` are accepted "
"by :meth:`float.fromhex`."
msgstr ""
"onde o ``sign`` opcional pode ser ``+`` ou ``-``, ``integer`` e ``fraction`` "
"são *strings* de dígitos hexadecimais, e ``exponent`` é um inteiro decimal "
"com um sinal inicial opcional. A caixa não é significativa, e deve haver "
"pelo menos um dígito hexadecimal no inteiro ou na fração. Esta sintaxe é "
"semelhante à sintaxe especificada na secção 6.4.4.2 do padrão C99, e também "
"à sintaxe usada no Java 1.5 e posteriores. Em particular, a saída de :meth:"
"`float.hex` pode ser usada como um literal de ponto flutuante hexadecimal em "
"código C ou Java, e as *strings* hexadecimais produzidas pelo carácter de "
"formato ``%a`` do C ou pelo ``Double.toHexString`` do Java são aceites por :"
"meth:`float.fromhex`."

#: ../../library/stdtypes.rst:689
msgid ""
"Note that the exponent is written in decimal rather than hexadecimal, and "
"that it gives the power of 2 by which to multiply the coefficient. For "
"example, the hexadecimal string ``0x3.a7p10`` represents the floating-point "
"number ``(3 + 10./16 + 7./16**2) * 2.0**10``, or ``3740.0``::"
msgstr ""
"Note que o expoente é escrito em decimal em vez de hexadecimal, e que indica "
"a potência de 2 pela qual multiplicar o coeficiente. Por exemplo, a *string* "
"hexadecimal ``0x3.a7p10`` representa o número de ponto flutuante ``(3 + "
"10./16 + 7./16**2) * 2.0**10``, ou ``3740.0``:"

#: ../../library/stdtypes.rst:695
msgid ""
">>> float.fromhex('0x3.a7p10')\n"
"3740.0"
msgstr ""
">>> float.fromhex('0x3.a7p10')\n"
"3740.0"

#: ../../library/stdtypes.rst:699
msgid ""
"Applying the reverse conversion to ``3740.0`` gives a different hexadecimal "
"string representing the same number::"
msgstr ""
"Aplicar a conversão inversa a ``3740.0`` dá uma *string* hexadecimal "
"diferente que representa o mesmo número:"

#: ../../library/stdtypes.rst:702
msgid ""
">>> float.hex(3740.0)\n"
"'0x1.d380000000000p+11'"
msgstr ""
">>> float.hex(3740.0)\n"
"'0x1.d380000000000p+11'"

#: ../../library/stdtypes.rst:709
msgid "Hashing of numeric types"
msgstr "Hashing de tipos numéricos"

#: ../../library/stdtypes.rst:711
msgid ""
"For numbers ``x`` and ``y``, possibly of different types, it's a requirement "
"that ``hash(x) == hash(y)`` whenever ``x == y`` (see the :meth:`~object."
"__hash__` method documentation for more details).  For ease of "
"implementation and efficiency across a variety of numeric types (including :"
"class:`int`, :class:`float`, :class:`decimal.Decimal` and :class:`fractions."
"Fraction`) Python's hash for numeric types is based on a single mathematical "
"function that's defined for any rational number, and hence applies to all "
"instances of :class:`int` and :class:`fractions.Fraction`, and all finite "
"instances of :class:`float` and :class:`decimal.Decimal`.  Essentially, this "
"function is given by reduction modulo ``P`` for a fixed prime ``P``.  The "
"value of ``P`` is made available to Python as the :attr:`~sys.hash_info."
"modulus` attribute of :data:`sys.hash_info`."
msgstr ""
"Para números ``x`` e ``y``, possivelmente de tipos diferentes, é um "
"requisito que ``hash(x) == hash(y)`` sempre que ``x == y`` (consulte a "
"documentação do método :meth:`~object.__hash__` para mais detalhes). Para "
"facilitar a implementação e a eficiência em vários tipos numéricos "
"(incluindo :class:`int`, :class:`float`, :class:`decimal.Decimal` e :class:"
"`fractions.Fraction`), o *hash* do Python para tipos numéricos é baseado "
"numa única função matemática que é definida para qualquer número racional, e "
"portanto aplica-se a todas as instâncias de :class:`int` e :class:`fractions."
"Fraction`, e a todas as instâncias finitas de :class:`float` e :class:"
"`decimal.Decimal`. Essencialmente, esta função é dada pela redução módulo "
"``P`` para um primo fixo ``P``. O valor de ``P`` é disponibilizado ao Python "
"como o atributo :attr:`~sys.hash_info.modulus` de :data:`sys.hash_info`."

#: ../../library/stdtypes.rst:726
msgid ""
"Currently, the prime used is ``P = 2**31 - 1`` on machines with 32-bit C "
"longs and ``P = 2**61 - 1`` on machines with 64-bit C longs."
msgstr ""
"Atualmente, o primo usado é ``P = 2**31 - 1`` em máquinas com *longs* C de "
"32 bits e ``P = 2**61 - 1`` em máquinas com *longs* C de 64 bits."

#: ../../library/stdtypes.rst:729
msgid "Here are the rules in detail:"
msgstr "Aqui estão as regras em detalhe:"

#: ../../library/stdtypes.rst:731
msgid ""
"If ``x = m / n`` is a nonnegative rational number and ``n`` is not divisible "
"by ``P``, define ``hash(x)`` as ``m * invmod(n, P) % P``, where ``invmod(n, "
"P)`` gives the inverse of ``n`` modulo ``P``."
msgstr ""
"Se ``x = m / n`` for um número racional não negativo e ``n`` não for "
"divisível por ``P``, defina ``hash(x)`` como ``m * invmod(n, P) % P``, onde "
"``invmod(n, P)`` dá o inverso de ``n`` módulo ``P``."

#: ../../library/stdtypes.rst:735
msgid ""
"If ``x = m / n`` is a nonnegative rational number and ``n`` is divisible by "
"``P`` (but ``m`` is not) then ``n`` has no inverse modulo ``P`` and the rule "
"above doesn't apply; in this case define ``hash(x)`` to be the constant "
"value ``sys.hash_info.inf``."
msgstr ""
"Se ``x = m / n`` for um número racional não negativo e ``n`` for divisível "
"por ``P`` (mas ``m`` não for), então ``n`` não tem inverso módulo ``P`` e a "
"regra acima não se aplica; neste caso, defina ``hash(x)`` como o valor "
"constante ``sys.hash_info.inf``."

#: ../../library/stdtypes.rst:740
msgid ""
"If ``x = m / n`` is a negative rational number define ``hash(x)`` as ``-"
"hash(-x)``.  If the resulting hash is ``-1``, replace it with ``-2``."
msgstr ""
"Se ``x = m / n`` for um número racional negativo, defina ``hash(x)`` como ``-"
"hash(-x)``. Se o *hash* resultante for ``-1``, substitua-o por ``-2``."

#: ../../library/stdtypes.rst:744
msgid ""
"The particular values ``sys.hash_info.inf`` and ``-sys.hash_info.inf`` are "
"used as hash values for positive infinity or negative infinity "
"(respectively)."
msgstr ""
"Os valores específicos ``sys.hash_info.inf`` e ``-sys.hash_info.inf`` são "
"usados como valores de *hash* para infinito positivo ou negativo "
"(respetivamente)."

#: ../../library/stdtypes.rst:748
msgid ""
"For a :class:`complex` number ``z``, the hash values of the real and "
"imaginary parts are combined by computing ``hash(z.real) + sys.hash_info."
"imag * hash(z.imag)``, reduced modulo ``2**sys.hash_info.width`` so that it "
"lies in ``range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width - "
"1))``.  Again, if the result is ``-1``, it's replaced with ``-2``."
msgstr ""
"Para um número :class:`complex` ``z``, os valores de *hash* das partes real "
"e imaginária são combinados calculando ``hash(z.real) + sys.hash_info.imag * "
"hash(z.imag)``, reduzido módulo ``2**sys.hash_info.width`` de modo a que "
"esteja no intervalo ``range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info."
"width - 1))``. Novamente, se o resultado for ``-1``, é substituído por "
"``-2``."

#: ../../library/stdtypes.rst:756
msgid ""
"To clarify the above rules, here's some example Python code, equivalent to "
"the built-in hash, for computing the hash of a rational number, :class:"
"`float`, or :class:`complex`::"
msgstr ""
"Para clarificar as regras acima, aqui está algum código Python de exemplo, "
"equivalente ao *hash* integrado, para calcular o *hash* de um número "
"racional, :class:`float`, ou :class:`complex`:"

#: ../../library/stdtypes.rst:761
msgid ""
"import sys, math\n"
"\n"
"def hash_fraction(m, n):\n"
"    \"\"\"Compute the hash of a rational number m / n.\n"
"\n"
"    Assumes m and n are integers, with n positive.\n"
"    Equivalent to hash(fractions.Fraction(m, n)).\n"
"\n"
"    \"\"\"\n"
"    P = sys.hash_info.modulus\n"
"    # Remove common factors of P.  (Unnecessary if m and n already "
"coprime.)\n"
"    while m % P == n % P == 0:\n"
"        m, n = m // P, n // P\n"
"\n"
"    if n % P == 0:\n"
"        hash_value = sys.hash_info.inf\n"
"    else:\n"
"        # Fermat's Little Theorem: pow(n, P-1, P) is 1, so\n"
"        # pow(n, P-2, P) gives the inverse of n modulo P.\n"
"        hash_value = (abs(m) % P) * pow(n, P - 2, P) % P\n"
"    if m < 0:\n"
"        hash_value = -hash_value\n"
"    if hash_value == -1:\n"
"        hash_value = -2\n"
"    return hash_value\n"
"\n"
"def hash_float(x):\n"
"    \"\"\"Compute the hash of a float x.\"\"\"\n"
"\n"
"    if math.isnan(x):\n"
"        return object.__hash__(x)\n"
"    elif math.isinf(x):\n"
"        return sys.hash_info.inf if x > 0 else -sys.hash_info.inf\n"
"    else:\n"
"        return hash_fraction(*x.as_integer_ratio())\n"
"\n"
"def hash_complex(z):\n"
"    \"\"\"Compute the hash of a complex number z.\"\"\"\n"
"\n"
"    hash_value = hash_float(z.real) + sys.hash_info.imag * hash_float(z."
"imag)\n"
"    # do a signed reduction modulo 2**sys.hash_info.width\n"
"    M = 2**(sys.hash_info.width - 1)\n"
"    hash_value = (hash_value & (M - 1)) - (hash_value & M)\n"
"    if hash_value == -1:\n"
"        hash_value = -2\n"
"    return hash_value"
msgstr ""
"import sys, math\n"
"\n"
"def hash_fraction(m, n):\n"
"    \"\"\"Calcula o *hash* de um número racional m / n.\n"
"\n"
"    Assume que m e n são inteiros, com n positivo.\n"
"    Equivalente a hash(fractions.Fraction(m, n)).\n"
"\n"
"    \"\"\"\n"
"    P = sys.hash_info.modulus\n"
"    # Remove fatores comuns de P. (Desnecessário se m e n já forem primos "
"entre si.)\n"
"    while m % P == n % P == 0:\n"
"        m, n = m // P, n // P\n"
"\n"
"    if n % P == 0:\n"
"        hash_value = sys.hash_info.inf\n"
"    else:\n"
"        # Teorema de Fermat: pow(n, P-1, P) é 1, por isso\n"
"        # pow(n, P-2, P) dá o inverso de n módulo P.\n"
"        hash_value = (abs(m) % P) * pow(n, P - 2, P) % P\n"
"    if m < 0:\n"
"        hash_value = -hash_value\n"
"    if hash_value == -1:\n"
"        hash_value = -2\n"
"    return hash_value\n"
"\n"
"def hash_float(x):\n"
"    \"\"\"Calcula o *hash* de um float x.\"\"\"\n"
"\n"
"    if math.isnan(x):\n"
"        return object.__hash__(x)\n"
"    elif math.isinf(x):\n"
"        return sys.hash_info.inf if x > 0 else -sys.hash_info.inf\n"
"    else:\n"
"        return hash_fraction(*x.as_integer_ratio())\n"
"\n"
"def hash_complex(z):\n"
"    \"\"\"Calcula o *hash* de um número complexo z.\"\"\"\n"
"\n"
"    hash_value = hash_float(z.real) + sys.hash_info.imag * hash_float(z."
"imag)\n"
"    # faz uma redução com sinal módulo 2**sys.hash_info.width\n"
"    M = 2**(sys.hash_info.width - 1)\n"
"    hash_value = (hash_value & (M - 1)) - (hash_value & M)\n"
"    if hash_value == -1:\n"
"        hash_value = -2\n"
"    return hash_value"

#: ../../library/stdtypes.rst:812
msgid "Boolean Type - :class:`bool`"
msgstr "Tipo booleano - :class:`bool`"

#: ../../library/stdtypes.rst:814
msgid ""
"Booleans represent truth values. The :class:`bool` type has exactly two "
"constant instances: ``True`` and ``False``."
msgstr ""
"Os booleanos representam valores de verdade. O tipo :class:`bool` tem "
"exatamente duas instâncias constantes: ``True`` e ``False``."

#: ../../library/stdtypes.rst:822
msgid ""
"The built-in function :func:`bool`  converts any value to a boolean, if the "
"value can be interpreted as a truth value (see section :ref:`truth` above)."
msgstr ""
"A função integrada :func:`bool` converte qualquer valor para um booleano, se "
"o valor puder ser interpretado como um valor de verdade (consulte a secção :"
"ref:`truth` acima)."

#: ../../library/stdtypes.rst:825
msgid ""
"For logical operations, use the :ref:`boolean operators <boolean>` ``and``, "
"``or`` and ``not``. When applying the bitwise operators ``&``, ``|``, ``^`` "
"to two booleans, they return a bool equivalent to the logical operations "
"\"and\", \"or\", \"xor\". However, the logical operators ``and``, ``or`` and "
"``!=`` should be preferred over ``&``, ``|`` and ``^``."
msgstr ""
"Para operações lógicas, use os :ref:`operadores booleanos <boolean>` "
"``and``, ``or`` e ``not``. Ao aplicar os operadores bit a bit ``&``, ``|``, "
"``^`` a dois booleanos, retornam um booleano equivalente às operações "
"lógicas \"and\", \"or\", \"xor\". No entanto, os operadores lógicos ``and``, "
"``or`` e ``!=`` devem ser preferidos em relação a ``&``, ``|`` e ``^``."

#: ../../library/stdtypes.rst:834
msgid ""
"The use of the bitwise inversion operator ``~`` is deprecated and will raise "
"an error in Python 3.16."
msgstr ""
"O uso do operador de inversão bit a bit ``~`` está obsoleto e lançará um "
"erro no Python 3.16."

#: ../../library/stdtypes.rst:837
msgid ""
":class:`bool` is a subclass of :class:`int` (see :ref:`typesnumeric`). In "
"many numeric contexts, ``False`` and ``True`` behave like the integers 0 and "
"1, respectively. However, relying on this is discouraged; explicitly convert "
"using :func:`int` instead."
msgstr ""
":class:`bool` é uma subclasse de :class:`int` (consulte :ref:"
"`typesnumeric`). Em muitos contextos numéricos, ``False`` e ``True`` "
"comportam-se como os inteiros 0 e 1, respetivamente. No entanto, confiar "
"nisto é desencorajado; converta explicitamente usando :func:`int`."

#: ../../library/stdtypes.rst:845
msgid "Iterator Types"
msgstr "Tipos de iterador"

#: ../../library/stdtypes.rst:853
msgid ""
"Python supports a concept of iteration over containers.  This is implemented "
"using two distinct methods; these are used to allow user-defined classes to "
"support iteration.  Sequences, described below in more detail, always "
"support the iteration methods."
msgstr ""
"O Python suporta o conceito de iteração sobre contentores. Isto é "
"implementado usando dois métodos distintos; estes são usados para permitir "
"que classes definidas pelo utilizador suportem iteração. As sequências, "
"descritas abaixo com mais detalhe, suportam sempre os métodos de iteração."

#: ../../library/stdtypes.rst:858
msgid ""
"One method needs to be defined for container objects to provide :term:"
"`iterable` support:"
msgstr ""
"Um método precisa de ser definido para objetos contentor para fornecer "
"suporte :term:`iterável`:"

#: ../../library/stdtypes.rst:865
msgid ""
"Return an :term:`iterator` object.  The object is required to support the "
"iterator protocol described below.  If a container supports different types "
"of iteration, additional methods can be provided to specifically request "
"iterators for those iteration types.  (An example of an object supporting "
"multiple forms of iteration would be a tree structure which supports both "
"breadth-first and depth-first traversal.)  This method corresponds to the :c:"
"member:`~PyTypeObject.tp_iter` slot of the type structure for Python objects "
"in the Python/C API."
msgstr ""
"Retorna um objeto :term:`iterador`. O objeto é obrigado a suportar o "
"protocolo de iterador descrito abaixo. Se um contentor suportar diferentes "
"tipos de iteração, podem ser fornecidos métodos adicionais para solicitar "
"especificamente iteradores para esses tipos de iteração. (Um exemplo de um "
"objeto que suporta múltiplas formas de iteração seria uma estrutura de "
"árvore que suporta travessia em largura e em profundidade.) Este método "
"corresponde ao slot :c:member:`~PyTypeObject.tp_iter` da estrutura de tipo "
"para objetos Python na API Python/C."

#: ../../library/stdtypes.rst:874
msgid ""
"The iterator objects themselves are required to support the following two "
"methods, which together form the :dfn:`iterator protocol`:"
msgstr ""
"Os objetos iteradores em si são obrigados a suportar os seguintes dois "
"métodos, que juntos formam o :dfn:`protocolo de iterador`:"

#: ../../library/stdtypes.rst:880
msgid ""
"Return the :term:`iterator` object itself.  This is required to allow both "
"containers and iterators to be used with the :keyword:`for` and :keyword:"
"`in` statements.  This method corresponds to the :c:member:`~PyTypeObject."
"tp_iter` slot of the type structure for Python objects in the Python/C API."
msgstr ""
"Retorna o próprio objeto :term:`iterador`. Isto é necessário para permitir "
"que tanto contentores como iteradores sejam usados com as instruções :"
"keyword:`for` e :keyword:`in`. Este método corresponde ao slot :c:member:"
"`~PyTypeObject.tp_iter` da estrutura de tipo para objetos Python na API "
"Python/C."

#: ../../library/stdtypes.rst:889
msgid ""
"Return the next item from the :term:`iterator`.  If there are no further "
"items, raise the :exc:`StopIteration` exception.  This method corresponds to "
"the :c:member:`~PyTypeObject.tp_iternext` slot of the type structure for "
"Python objects in the Python/C API."
msgstr ""
"Retorna o próximo item do :term:`iterador`. Se não houver mais itens, lança "
"a exceção :exc:`StopIteration`. Este método corresponde ao slot :c:member:"
"`~PyTypeObject.tp_iternext` da estrutura de tipo para objetos Python na API "
"Python/C."

#: ../../library/stdtypes.rst:894
msgid ""
"Python defines several iterator objects to support iteration over general "
"and specific sequence types, dictionaries, and other more specialized "
"forms.  The specific types are not important beyond their implementation of "
"the iterator protocol."
msgstr ""
"O Python define vários objetos iteradores para suportar iteração sobre tipos "
"de sequência gerais e específicos, dicionários e outras formas mais "
"especializadas. Os tipos específicos não são importantes além da sua "
"implementação do protocolo de iterador."

#: ../../library/stdtypes.rst:899
msgid ""
"Once an iterator's :meth:`~iterator.__next__` method raises :exc:"
"`StopIteration`, it must continue to do so on subsequent calls. "
"Implementations that do not obey this property are deemed broken."
msgstr ""
"Uma vez que o método :meth:`~iterator.__next__` de um iterador lança :exc:"
"`StopIteration`, deve continuar a fazê-lo em chamadas subsequentes. "
"Implementações que não obedecem a esta propriedade são consideradas "
"defeituosas."

#: ../../library/stdtypes.rst:907
msgid "Generator Types"
msgstr "Tipos de gerador"

#: ../../library/stdtypes.rst:909
msgid ""
"Python's :term:`generator`\\s provide a convenient way to implement the "
"iterator protocol.  If a container object's :meth:`~object.__iter__` method "
"is implemented as a generator, it will automatically return an iterator "
"object (technically, a generator object) supplying the :meth:`~iterator."
"__iter__` and :meth:`~generator.__next__` methods. More information about "
"generators can be found in :ref:`the documentation for the yield expression "
"<yieldexpr>`."
msgstr ""
"Os :term:`geradores` do Python fornecem uma forma conveniente de implementar "
"o protocolo de iterador. Se o método :meth:`~object.__iter__` de um objeto "
"contentor for implementado como um gerador, retornará automaticamente um "
"objeto iterador (tecnicamente, um objeto gerador) que fornece os métodos :"
"meth:`~iterator.__iter__` e :meth:`~generator.__next__`. Mais informações "
"sobre geradores podem ser encontradas em :ref:`a documentação para a "
"expressão yield <yieldexpr>`. "

#: ../../library/stdtypes.rst:921
msgid "Sequence Types --- :class:`list`, :class:`tuple`, :class:`range`"
msgstr "Tipos de sequência --- :class:`list`, :class:`tuple`, :class:`range`"

#: ../../library/stdtypes.rst:923
msgid ""
"There are three basic sequence types: lists, tuples, and range objects. "
"Additional sequence types tailored for processing of :ref:`binary data "
"<binaryseq>` and :ref:`text strings <textseq>` are described in dedicated "
"sections."
msgstr ""
"Existem três tipos básicos de sequência: listas, tuplos e objetos de "
"intervalo. Tipos de sequência adicionais adaptados para processamento de :"
"ref:`dados binários <binaryseq>` e :ref:`strings de texto <textseq>` são "
"descritos em secções dedicadas."

#: ../../library/stdtypes.rst:932
msgid "Common Sequence Operations"
msgstr "Operações comuns de sequência"

#: ../../library/stdtypes.rst:936
msgid ""
"The operations in the following table are supported by most sequence types, "
"both mutable and immutable. The :class:`collections.abc.Sequence` ABC is "
"provided to make it easier to correctly implement these operations on custom "
"sequence types."
msgstr ""
"As operações na tabela seguinte são suportadas pela maioria dos tipos de "
"sequência, tanto mutáveis como imutáveis. A ABC :class:`collections.abc."
"Sequence` é fornecida para facilitar a implementação correta destas "
"operações em tipos de sequência personalizados."

#: ../../library/stdtypes.rst:941
msgid ""
"This table lists the sequence operations sorted in ascending priority.  In "
"the table, *s* and *t* are sequences of the same type, *n*, *i*, *j* and *k* "
"are integers and *x* is an arbitrary object that meets any type and value "
"restrictions imposed by *s*."
msgstr ""
"Esta tabela lista as operações de sequência ordenadas por prioridade "
"ascendente. Na tabela, *s* e *t* são sequências do mesmo tipo, *n*, *i*, *j* "
"e *k* são inteiros e *x* é um objeto arbitrário que cumpre quaisquer "
"restrições de tipo e valor impostas por *s*."

#: ../../library/stdtypes.rst:946
msgid ""
"The ``in`` and ``not in`` operations have the same priorities as the "
"comparison operations. The ``+`` (concatenation) and ``*`` (repetition) "
"operations have the same priority as the corresponding numeric operations. "
"[3]_"
msgstr ""
"As operações ``in`` e ``not in`` têm as mesmas prioridades que as operações "
"de comparação. As operações ``+`` (concatenação) e ``*`` (repetição) têm a "
"mesma prioridade que as operações numéricas correspondentes. [3]_"

#: ../../library/stdtypes.rst:967
msgid "``x in s``"
msgstr "``x in s``"

#: ../../library/stdtypes.rst:967
msgid "``True`` if an item of *s* is equal to *x*, else ``False``"
msgstr "``True`` se um item de *s* for igual a *x*, senão ``False``"

#: ../../library/stdtypes.rst:970
msgid "``x not in s``"
msgstr "``x not in s``"

#: ../../library/stdtypes.rst:970
msgid "``False`` if an item of *s* is equal to *x*, else ``True``"
msgstr "``False`` se um item de *s* for igual a *x*, senão ``True``"

#: ../../library/stdtypes.rst:973
msgid "``s + t``"
msgstr "``s + t``"

#: ../../library/stdtypes.rst:973
msgid "the concatenation of *s* and *t*"
msgstr "a concatenação de *s* e *t*"

#: ../../library/stdtypes.rst:973
msgid "(6)(7)"
msgstr "(6)(7)"

#: ../../library/stdtypes.rst:976
msgid "``s * n`` or ``n * s``"
msgstr "``s * n`` ou ``n * s``"

#: ../../library/stdtypes.rst:976
msgid "equivalent to adding *s* to itself *n* times"
msgstr "equivalente a adicionar *s* a si mesmo *n* vezes"

#: ../../library/stdtypes.rst:976
msgid "(2)(7)"
msgstr "(2)(7)"

#: ../../library/stdtypes.rst:979
msgid "``s[i]``"
msgstr "``s[i]``"

#: ../../library/stdtypes.rst:979
msgid "*i*\\ th item of *s*, origin 0"
msgstr "item *i* de *s*, origem 0"

#: ../../library/stdtypes.rst:981
msgid "``s[i:j]``"
msgstr "``s[i:j]``"

#: ../../library/stdtypes.rst:981
msgid "slice of *s* from *i* to *j*"
msgstr "fatia de *s* de *i* a *j*"

#: ../../library/stdtypes.rst:981
msgid "(3)(4)"
msgstr "(3)(4)"

#: ../../library/stdtypes.rst:983
msgid "``s[i:j:k]``"
msgstr "``s[i:j:k]``"

#: ../../library/stdtypes.rst:983
msgid "slice of *s* from *i* to *j* with step *k*"
msgstr "fatia de *s* de *i* a *j* com passo *k*"

#: ../../library/stdtypes.rst:983
msgid "(3)(5)"
msgstr "(3)(5)"

#: ../../library/stdtypes.rst:986
msgid "``len(s)``"
msgstr "``len(s)``"

#: ../../library/stdtypes.rst:986
msgid "length of *s*"
msgstr "comprimento de *s*"

#: ../../library/stdtypes.rst:988
msgid "``min(s)``"
msgstr "``min(s)``"

#: ../../library/stdtypes.rst:988
msgid "smallest item of *s*"
msgstr "menor item de *s*"

#: ../../library/stdtypes.rst:990
msgid "``max(s)``"
msgstr "``max(s)``"

#: ../../library/stdtypes.rst:990
msgid "largest item of *s*"
msgstr "maior item de *s*"

#: ../../library/stdtypes.rst:992
msgid "``s.index(x[, i[, j]])``"
msgstr ""

#: ../../library/stdtypes.rst:992
msgid ""
"index of the first occurrence of *x* in *s* (at or after index *i* and "
"before index *j*)"
msgstr ""

#: ../../library/stdtypes.rst:992 ../../library/stdtypes.rst:3656
msgid "\\(8)"
msgstr ""

#: ../../library/stdtypes.rst:996
msgid "``s.count(x)``"
msgstr ""

#: ../../library/stdtypes.rst:996
msgid "total number of occurrences of *x* in *s*"
msgstr ""

#: ../../library/stdtypes.rst:1000
msgid ""
"Sequences of the same type also support comparisons.  In particular, tuples "
"and lists are compared lexicographically by comparing corresponding "
"elements. This means that to compare equal, every element must compare equal "
"and the two sequences must be of the same type and have the same length.  "
"(For full details see :ref:`comparisons` in the language reference.)"
msgstr ""
"Sequências do mesmo tipo também suportam comparações. Em particular, tuplos "
"e listas são comparados lexicograficamente comparando elementos "
"correspondentes. Isto significa que para serem iguais, todos os elementos "
"devem ser iguais e as duas sequências devem ser do mesmo tipo e ter o mesmo "
"comprimento. (Para mais detalhes, consulte :ref:`comparisons` na referência "
"da linguagem.)"

#: ../../library/stdtypes.rst:1010
msgid ""
"Forward and reversed iterators over mutable sequences access values using an "
"index.  That index will continue to march forward (or backward) even if the "
"underlying sequence is mutated.  The iterator terminates only when an :exc:"
"`IndexError` or a :exc:`StopIteration` is encountered (or when the index "
"drops below zero)."
msgstr ""
"Iteradores diretos e invertidos sobre sequências mutáveis acedem a valores "
"usando um índice. Esse índice continuará a avançar (ou recuar) mesmo que a "
"sequência subjacente seja mutada. O iterador termina apenas quando é "
"encontrado um :exc:`IndexError` ou um :exc:`StopIteration` (ou quando o "
"índice cai abaixo de zero)."

#: ../../library/stdtypes.rst:1019
msgid ""
"While the ``in`` and ``not in`` operations are used only for simple "
"containment testing in the general case, some specialised sequences (such "
"as :class:`str`, :class:`bytes` and :class:`bytearray`) also use them for "
"subsequence testing::"
msgstr ""
"Embora as operações ``in`` e ``not in`` sejam usadas apenas para testes de "
"contenção simples no caso geral, algumas sequências especializadas (como :"
"class:`str`, :class:`bytes` e :class:`bytearray`) também as usam para testes "
"de subsequência:"

#: ../../library/stdtypes.rst:1024
msgid ""
">>> \"gg\" in \"eggs\"\n"
"True"
msgstr ""
">>> \"gg\" in \"eggs\"\n"
"True"

#: ../../library/stdtypes.rst:1028
msgid ""
"Values of *n* less than ``0`` are treated as ``0`` (which yields an empty "
"sequence of the same type as *s*).  Note that items in the sequence *s* are "
"not copied; they are referenced multiple times.  This often haunts new "
"Python programmers; consider::"
msgstr ""
"Valores de *n* menores que ``0`` são tratados como ``0`` (o que produz uma "
"sequência vazia do mesmo tipo que *s*). Note que os itens na sequência *s* "
"não são copiados; são referenciados várias vezes. Isto muitas vezes assombra "
"programadores Python iniciantes; considere:"

#: ../../library/stdtypes.rst:1033
msgid ""
">>> lists = [[]] * 3\n"
">>> lists\n"
"[[], [], []]\n"
">>> lists[0].append(3)\n"
">>> lists\n"
"[[3], [3], [3]]"
msgstr ""
">>> lists = [[]] * 3\n"
">>> lists\n"
"[[], [], []]\n"
">>> lists[0].append(3)\n"
">>> lists\n"
"[[3], [3], [3]]"

#: ../../library/stdtypes.rst:1040
msgid ""
"What has happened is that ``[[]]`` is a one-element list containing an empty "
"list, so all three elements of ``[[]] * 3`` are references to this single "
"empty list.  Modifying any of the elements of ``lists`` modifies this single "
"list. You can create a list of different lists this way::"
msgstr ""
"O que aconteceu é que ``[[]]`` é uma lista de um elemento contendo uma lista "
"vazia, por isso os três elementos de ``[[]] * 3`` são referências a esta "
"única lista vazia. Modificar qualquer um dos elementos de ``lists`` modifica "
"esta única lista. Pode criar uma lista de listas diferentes desta forma:"

#: ../../library/stdtypes.rst:1045
msgid ""
">>> lists = [[] for i in range(3)]\n"
">>> lists[0].append(3)\n"
">>> lists[1].append(5)\n"
">>> lists[2].append(7)\n"
">>> lists\n"
"[[3], [5], [7]]"
msgstr ""
">>> lists = [[] for i in range(3)]\n"
">>> lists[0].append(3)\n"
">>> lists[1].append(5)\n"
">>> lists[2].append(7)\n"
">>> lists\n"
"[[3], [5], [7]]"

#: ../../library/stdtypes.rst:1052
msgid ""
"Further explanation is available in the FAQ entry :ref:`faq-multidimensional-"
"list`."
msgstr ""
"Mais explicações estão disponíveis na entrada da FAQ :ref:`faq-"
"multidimensional-list`."

#: ../../library/stdtypes.rst:1056
msgid ""
"If *i* or *j* is negative, the index is relative to the end of sequence *s*: "
"``len(s) + i`` or ``len(s) + j`` is substituted.  But note that ``-0`` is "
"still ``0``."
msgstr ""
"Se *i* ou *j* for negativo, o índice é relativo ao final da sequência *s*: "
"``len(s) + i`` ou ``len(s) + j`` é substituído. Mas note que ``-0`` ainda é "
"``0``."

#: ../../library/stdtypes.rst:1061
msgid ""
"The slice of *s* from *i* to *j* is defined as the sequence of items with "
"index *k* such that ``i <= k < j``.  If *i* or *j* is greater than "
"``len(s)``, use ``len(s)``.  If *i* is omitted or ``None``, use ``0``.  If "
"*j* is omitted or ``None``, use ``len(s)``.  If *i* is greater than or equal "
"to *j*, the slice is empty."
msgstr ""
"A fatia de *s* de *i* a *j* é definida como a sequência de itens com índice "
"*k* tal que ``i <= k < j``. Se *i* ou *j* for maior que ``len(s)``, use "
"``len(s)``. Se *i* for omitido ou ``None``, use ``0``. Se *j* for omitido ou "
"``None``, use ``len(s)``. Se *i* for maior ou igual a *j*, a fatia está "
"vazia."

#: ../../library/stdtypes.rst:1068
msgid ""
"The slice of *s* from *i* to *j* with step *k* is defined as the sequence of "
"items with index  ``x = i + n*k`` such that ``0 <= n < (j-i)/k``.  In other "
"words, the indices are ``i``, ``i+k``, ``i+2*k``, ``i+3*k`` and so on, "
"stopping when *j* is reached (but never including *j*).  When *k* is "
"positive, *i* and *j* are reduced to ``len(s)`` if they are greater. When "
"*k* is negative, *i* and *j* are reduced to ``len(s) - 1`` if they are "
"greater.  If *i* or *j* are omitted or ``None``, they become \"end\" values "
"(which end depends on the sign of *k*).  Note, *k* cannot be zero. If *k* is "
"``None``, it is treated like ``1``."
msgstr ""
"A fatia de *s* de *i* a *j* com passo *k* é definida como a sequência de "
"itens com índice ``x = i + n*k`` tal que ``0 <= n < (j-i)/k``. Em outras "
"palavras, os índices são ``i``, ``i+k``, ``i+2*k``, ``i+3*k`` e assim por "
"diante, parando quando *j* é atingido (mas nunca incluindo *j*). Quando *k* "
"é positivo, *i* e *j* são reduzidos a ``len(s)`` se forem maiores. Quando "
"*k* é negativo, *i* e *j* são reduzidos a ``len(s) - 1`` se forem maiores. "
"Se *i* ou *j* forem omitidos ou ``None``, tornam-se valores \"fim\" (que fim "
"depende do sinal de *k*). Note que *k* não pode ser zero. Se *k* for "
"``None``, é tratado como ``1``."

#: ../../library/stdtypes.rst:1079
msgid ""
"Concatenating immutable sequences always results in a new object.  This "
"means that building up a sequence by repeated concatenation will have a "
"quadratic runtime cost in the total sequence length.  To get a linear "
"runtime cost, you must switch to one of the alternatives below:"
msgstr ""
"A concatenação de sequências imutáveis resulta sempre num novo objeto. Isto "
"significa que construir uma sequência por concatenação repetida terá um "
"custo de tempo de execução quadrático no comprimento total da sequência. "
"Para obter um custo de tempo de execução linear, deve mudar para uma das "
"alternativas abaixo:"

#: ../../library/stdtypes.rst:1084
msgid ""
"if concatenating :class:`str` objects, you can build a list and use :meth:"
"`str.join` at the end or else write to an :class:`io.StringIO` instance and "
"retrieve its value when complete"
msgstr ""
"se estiver a concatenar objetos :class:`str`, pode construir uma lista e "
"usar :meth:`str.join` no final ou escrever para uma instância :class:`io."
"StringIO` e recuperar o seu valor quando completo"

#: ../../library/stdtypes.rst:1088
msgid ""
"if concatenating :class:`bytes` objects, you can similarly use :meth:`bytes."
"join` or :class:`io.BytesIO`, or you can do in-place concatenation with a :"
"class:`bytearray` object.  :class:`bytearray` objects are mutable and have "
"an efficient overallocation mechanism"
msgstr ""
"se estiver a concatenar objetos :class:`bytes`, pode usar de forma "
"semelhante :meth:`bytes.join` ou :class:`io.BytesIO`, ou pode fazer "
"concatenação *in-place* com um objeto :class:`bytearray`. Os objetos :class:"
"`bytearray` são mutáveis e têm um mecanismo eficiente de sobrealocação"

#: ../../library/stdtypes.rst:1093
msgid "if concatenating :class:`tuple` objects, extend a :class:`list` instead"
msgstr ""
"se estiver a concatenar objetos :class:`tuple`, estenda uma :class:`list`"

#: ../../library/stdtypes.rst:1095
msgid "for other types, investigate the relevant class documentation"
msgstr "para outros tipos, consulte a documentação da classe relevante"

#: ../../library/stdtypes.rst:1099
msgid ""
"Some sequence types (such as :class:`range`) only support item sequences "
"that follow specific patterns, and hence don't support sequence "
"concatenation or repetition."
msgstr ""
"Alguns tipos de sequência (como :class:`range`) só suportam sequências de "
"itens que seguem padrões específicos, e por isso não suportam concatenação "
"ou repetição de sequências."

#: ../../library/stdtypes.rst:1104
msgid ""
"``index`` raises :exc:`ValueError` when *x* is not found in *s*. Not all "
"implementations support passing the additional arguments *i* and *j*. These "
"arguments allow efficient searching of subsections of the sequence. Passing "
"the extra arguments is roughly equivalent to using ``s[i:j].index(x)``, only "
"without copying any data and with the returned index being relative to the "
"start of the sequence rather than the start of the slice."
msgstr ""

#: ../../library/stdtypes.rst:1115
msgid "Immutable Sequence Types"
msgstr "Tipos de sequência imutável"

#: ../../library/stdtypes.rst:1122
msgid ""
"The only operation that immutable sequence types generally implement that is "
"not also implemented by mutable sequence types is support for the :func:"
"`hash` built-in."
msgstr ""
"A única operação que os tipos de sequência imutáveis geralmente implementam "
"e que não é também implementada pelos tipos de sequência mutáveis é o "
"suporte para a função integrada :func:`hash`."

#: ../../library/stdtypes.rst:1126
msgid ""
"This support allows immutable sequences, such as :class:`tuple` instances, "
"to be used as :class:`dict` keys and stored in :class:`set` and :class:"
"`frozenset` instances."
msgstr ""
"Este suporte permite que sequências imutáveis, como instâncias :class:"
"`tuple`, sejam usadas como chaves :class:`dict` e armazenadas em instâncias :"
"class:`set` e :class:`frozenset`."

#: ../../library/stdtypes.rst:1130
msgid ""
"Attempting to hash an immutable sequence that contains unhashable values "
"will result in :exc:`TypeError`."
msgstr ""
"Tentar calcular o *hash* de uma sequência imutável que contenha valores não "
"hasháveis resultará em :exc:`TypeError`."

#: ../../library/stdtypes.rst:1137
msgid "Mutable Sequence Types"
msgstr "Tipos de sequência mutável"

#: ../../library/stdtypes.rst:1144
msgid ""
"The operations in the following table are defined on mutable sequence types. "
"The :class:`collections.abc.MutableSequence` ABC is provided to make it "
"easier to correctly implement these operations on custom sequence types."
msgstr ""
"As operações na tabela seguinte são definidas em tipos de sequência "
"mutáveis. A ABC :class:`collections.abc.MutableSequence` é fornecida para "
"facilitar a implementação correta destas operações em tipos de sequência "
"personalizados."

#: ../../library/stdtypes.rst:1148
msgid ""
"In the table *s* is an instance of a mutable sequence type, *t* is any "
"iterable object and *x* is an arbitrary object that meets any type and value "
"restrictions imposed by *s* (for example, :class:`bytearray` only accepts "
"integers that meet the value restriction ``0 <= x <= 255``)."
msgstr ""
"Na tabela, *s* é uma instância de um tipo de sequência mutável, *t* é "
"qualquer objeto iterável e *x* é um objeto arbitrário que cumpre quaisquer "
"restrições de tipo e valor impostas por *s* (por exemplo, :class:`bytearray` "
"só aceita inteiros que cumprem a restrição de valor ``0 <= x <= 255``)."

#: ../../library/stdtypes.rst:1172
msgid "``s[i] = x``"
msgstr "``s[i] = x``"

#: ../../library/stdtypes.rst:1172
msgid "item *i* of *s* is replaced by *x*"
msgstr "o item *i* de *s* é substituído por *x*"

#: ../../library/stdtypes.rst:1175
msgid "``s[i:j] = t``"
msgstr "``s[i:j] = t``"

#: ../../library/stdtypes.rst:1175
msgid ""
"slice of *s* from *i* to *j* is replaced by the contents of the iterable *t*"
msgstr ""
"a fatia de *s* de *i* a *j* é substituída pelo conteúdo do iterável *t*"

#: ../../library/stdtypes.rst:1179
msgid "``del s[i:j]``"
msgstr "``del s[i:j]``"

#: ../../library/stdtypes.rst:1179
msgid "same as ``s[i:j] = []``"
msgstr ""

#: ../../library/stdtypes.rst:1181
msgid "``s[i:j:k] = t``"
msgstr "``s[i:j:k] = t``"

#: ../../library/stdtypes.rst:1181
msgid "the elements of ``s[i:j:k]`` are replaced by those of *t*"
msgstr "os elementos de ``s[i:j:k]`` são substituídos pelos de *t*"

#: ../../library/stdtypes.rst:1184
msgid "``del s[i:j:k]``"
msgstr "``del s[i:j:k]``"

#: ../../library/stdtypes.rst:1184
msgid "removes the elements of ``s[i:j:k]`` from the list"
msgstr "remove os elementos de ``s[i:j:k]`` da lista"

#: ../../library/stdtypes.rst:1187
msgid "``s.append(x)``"
msgstr ""

#: ../../library/stdtypes.rst:1187
msgid ""
"appends *x* to the end of the sequence (same as ``s[len(s):len(s)] = [x]``)"
msgstr ""

#: ../../library/stdtypes.rst:1191
msgid "``s.clear()``"
msgstr ""

#: ../../library/stdtypes.rst:1191
msgid "removes all items from *s* (same as ``del s[:]``)"
msgstr ""

#: ../../library/stdtypes.rst:1194
msgid "``s.copy()``"
msgstr ""

#: ../../library/stdtypes.rst:1194
msgid "creates a shallow copy of *s* (same as ``s[:]``)"
msgstr ""

#: ../../library/stdtypes.rst:1197
msgid "``s.extend(t)`` or ``s += t``"
msgstr ""

#: ../../library/stdtypes.rst:1197
msgid ""
"extends *s* with the contents of *t* (for the most part the same as "
"``s[len(s):len(s)] = t``)"
msgstr ""
"estende *s* com o conteúdo de *t* (na maior parte igual a ``s[len(s):len(s)] "
"= t``)"

#: ../../library/stdtypes.rst:1202
msgid "``s *= n``"
msgstr "``s *= n``"

#: ../../library/stdtypes.rst:1202
msgid "updates *s* with its contents repeated *n* times"
msgstr "atualiza *s* com o seu conteúdo repetido *n* vezes"

#: ../../library/stdtypes.rst:1205
msgid "``s.insert(i, x)``"
msgstr ""

#: ../../library/stdtypes.rst:1205
msgid ""
"inserts *x* into *s* at the index given by *i* (same as ``s[i:i] = [x]``)"
msgstr ""

#: ../../library/stdtypes.rst:1209
msgid "``s.pop()`` or ``s.pop(i)``"
msgstr ""

#: ../../library/stdtypes.rst:1209
msgid "retrieves the item at *i* and also removes it from *s*"
msgstr ""

#: ../../library/stdtypes.rst:1212
msgid "``s.remove(x)``"
msgstr ""

#: ../../library/stdtypes.rst:1212
msgid "removes the first item from *s* where ``s[i]`` is equal to *x*"
msgstr ""

#: ../../library/stdtypes.rst:1216
msgid "``s.reverse()``"
msgstr ""

#: ../../library/stdtypes.rst:1216
msgid "reverses the items of *s* in place"
msgstr ""

#: ../../library/stdtypes.rst:1224
msgid ""
"If *k* is not equal to ``1``, *t* must have the same length as the slice it "
"is replacing."
msgstr ""
"Se *k* não for igual a ``1``, *t* deve ter o mesmo comprimento que a fatia "
"que está a substituir."

#: ../../library/stdtypes.rst:1227
msgid ""
"The optional argument *i* defaults to ``-1``, so that by default the last "
"item is removed and returned."
msgstr ""

#: ../../library/stdtypes.rst:1231
msgid ":meth:`remove` raises :exc:`ValueError` when *x* is not found in *s*."
msgstr ""

#: ../../library/stdtypes.rst:1234
msgid ""
"The :meth:`reverse` method modifies the sequence in place for economy of "
"space when reversing a large sequence.  To remind users that it operates by "
"side effect, it does not return the reversed sequence."
msgstr ""

#: ../../library/stdtypes.rst:1239
msgid ""
":meth:`clear` and :meth:`!copy` are included for consistency with the "
"interfaces of mutable containers that don't support slicing operations (such "
"as :class:`dict` and :class:`set`). :meth:`!copy` is not part of the :class:"
"`collections.abc.MutableSequence` ABC, but most concrete mutable sequence "
"classes provide it."
msgstr ""

#: ../../library/stdtypes.rst:1245
msgid ":meth:`clear` and :meth:`!copy` methods."
msgstr ""

#: ../../library/stdtypes.rst:1249
msgid ""
"The value *n* is an integer, or an object implementing :meth:`~object."
"__index__`.  Zero and negative values of *n* clear the sequence.  Items in "
"the sequence are not copied; they are referenced multiple times, as "
"explained for ``s * n`` under :ref:`typesseq-common`."
msgstr ""
"O valor *n* é um inteiro, ou um objeto que implementa :meth:`~object."
"__index__`. Valores zero e negativos de *n* limpam a sequência. Os itens na "
"sequência não são copiados; são referenciados várias vezes, como explicado "
"para ``s * n`` em :ref:`typesseq-common`."

#: ../../library/stdtypes.rst:1258
msgid "Lists"
msgstr "Listas"

#: ../../library/stdtypes.rst:1262
msgid ""
"Lists are mutable sequences, typically used to store collections of "
"homogeneous items (where the precise degree of similarity will vary by "
"application)."
msgstr ""
"As listas são sequências mutáveis, tipicamente usadas para armazenar "
"coleções de itens homogéneos (onde o grau preciso de semelhança variará "
"conforme a aplicação)."

#: ../../library/stdtypes.rst:1268
msgid "Lists may be constructed in several ways:"
msgstr "As listas podem ser construídas de várias formas:"

#: ../../library/stdtypes.rst:1270
msgid "Using a pair of square brackets to denote the empty list: ``[]``"
msgstr "Usando um par de parênteses retos para denotar a lista vazia: ``[]``"

#: ../../library/stdtypes.rst:1271
msgid ""
"Using square brackets, separating items with commas: ``[a]``, ``[a, b, c]``"
msgstr ""
"Usando parênteses retos, separando itens com vírgulas: ``[a]``, ``[a, b, c]``"

#: ../../library/stdtypes.rst:1272
msgid "Using a list comprehension: ``[x for x in iterable]``"
msgstr "Usando uma *list comprehension*: ``[x for x in iterable]``"

#: ../../library/stdtypes.rst:1273
msgid "Using the type constructor: ``list()`` or ``list(iterable)``"
msgstr "Usando o construtor de tipo: ``list()`` ou ``list(iterable)``"

#: ../../library/stdtypes.rst:1275
msgid ""
"The constructor builds a list whose items are the same and in the same order "
"as *iterable*'s items.  *iterable* may be either a sequence, a container "
"that supports iteration, or an iterator object.  If *iterable* is already a "
"list, a copy is made and returned, similar to ``iterable[:]``. For example, "
"``list('abc')`` returns ``['a', 'b', 'c']`` and ``list( (1, 2, 3) )`` "
"returns ``[1, 2, 3]``. If no argument is given, the constructor creates a "
"new empty list, ``[]``."
msgstr ""
"O construtor cria uma lista cujos itens são os mesmos e na mesma ordem que "
"os itens de *iterable*. *iterable* pode ser uma sequência, um contentor que "
"suporta iteração, ou um objeto iterador. Se *iterable* já for uma lista, é "
"feita uma cópia e retornada, semelhante a ``iterable[:]``. Por exemplo, "
"``list('abc')`` retorna ``['a', 'b', 'c']`` e ``list( (1, 2, 3) )`` retorna "
"``[1, 2, 3]``. Se nenhum argumento for fornecido, o construtor cria uma nova "
"lista vazia, ``[]``."

#: ../../library/stdtypes.rst:1284
msgid ""
"Many other operations also produce lists, including the :func:`sorted` built-"
"in."
msgstr ""
"Muitas outras operações também produzem listas, incluindo a função "
"integrada :func:`sorted`."

#: ../../library/stdtypes.rst:1287
msgid ""
"Lists implement all of the :ref:`common <typesseq-common>` and :ref:`mutable "
"<typesseq-mutable>` sequence operations. Lists also provide the following "
"additional method:"
msgstr ""
"As listas implementam todas as operações de sequência :ref:`comuns <typesseq-"
"common>` e :ref:`mutáveis <typesseq-mutable>`. As listas também fornecem o "
"seguinte método adicional:"

#: ../../library/stdtypes.rst:1293
msgid ""
"This method sorts the list in place, using only ``<`` comparisons between "
"items. Exceptions are not suppressed - if any comparison operations fail, "
"the entire sort operation will fail (and the list will likely be left in a "
"partially modified state)."
msgstr ""
"Este método ordena a lista *in-place*, usando apenas comparações ``<`` entre "
"itens. As exceções não são suprimidas - se alguma operação de comparação "
"falhar, toda a operação de ordenação falhará (e a lista provavelmente ficará "
"num estado parcialmente modificado)."

#: ../../library/stdtypes.rst:1298
msgid ""
":meth:`sort` accepts two arguments that can only be passed by keyword (:ref:"
"`keyword-only arguments <keyword-only_parameter>`):"
msgstr ""
":meth:`sort` aceita dois argumentos que só podem ser passados por palavra-"
"chave (:ref:`argumentos apenas por palavra-chave <keyword-only_parameter>`):"

#: ../../library/stdtypes.rst:1301
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each list element (for example, ``key=str.lower``). The "
"key corresponding to each item in the list is calculated once and then used "
"for the entire sorting process. The default value of ``None`` means that "
"list items are sorted directly without calculating a separate key value."
msgstr ""
"*key* especifica uma função de um argumento que é usada para extrair uma "
"chave de comparação de cada elemento da lista (por exemplo, ``key=str."
"lower``). A chave correspondente a cada item na lista é calculada uma vez e "
"depois usada para todo o processo de ordenação. O valor predefinido ``None`` "
"significa que os itens da lista são ordenados diretamente sem calcular um "
"valor de chave separado."

#: ../../library/stdtypes.rst:1308
msgid ""
"The :func:`functools.cmp_to_key` utility is available to convert a 2.x style "
"*cmp* function to a *key* function."
msgstr ""
"A utilidade :func:`functools.cmp_to_key` está disponível para converter uma "
"função *cmp* no estilo 2.x para uma função *key*."

#: ../../library/stdtypes.rst:1311
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""
"*reverse* é um valor booleano. Se definido como ``True``, os elementos da "
"lista são ordenados como se cada comparação fosse invertida."

#: ../../library/stdtypes.rst:1314
msgid ""
"This method modifies the sequence in place for economy of space when sorting "
"a large sequence.  To remind users that it operates by side effect, it does "
"not return the sorted sequence (use :func:`sorted` to explicitly request a "
"new sorted list instance)."
msgstr ""
"Este método modifica a sequência *in-place* para economizar espaço ao "
"ordenar uma grande sequência. Para lembrar os utilizadores de que opera por "
"efeito lateral, não retorna a sequência ordenada (use :func:`sorted` para "
"solicitar explicitamente uma nova instância de lista ordenada)."

#: ../../library/stdtypes.rst:1319
msgid ""
"The :meth:`sort` method is guaranteed to be stable.  A sort is stable if it "
"guarantees not to change the relative order of elements that compare equal "
"--- this is helpful for sorting in multiple passes (for example, sort by "
"department, then by salary grade)."
msgstr ""
"O método :meth:`sort` é garantidamente estável. Uma ordenação é estável se "
"garantir não alterar a ordem relativa de elementos que comparam igual --- "
"isto é útil para ordenação em múltiplas passagens (por exemplo, ordenar por "
"departamento, depois por nível salarial)."

#: ../../library/stdtypes.rst:1324
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"Para exemplos de ordenação e um breve tutorial sobre ordenação, consulte :"
"ref:`sortinghowto`."

#: ../../library/stdtypes.rst:1328
msgid ""
"While a list is being sorted, the effect of attempting to mutate, or even "
"inspect, the list is undefined.  The C implementation of Python makes the "
"list appear empty for the duration, and raises :exc:`ValueError` if it can "
"detect that the list has been mutated during a sort."
msgstr ""
"Enquanto uma lista está a ser ordenada, o efeito de tentar mutar, ou mesmo "
"inspecionar, a lista é indefinido. A implementação C do Python faz com que a "
"lista pareça vazia durante a operação, e lança :exc:`ValueError` se "
"conseguir detetar que a lista foi mutada durante a ordenação."

#: ../../library/stdtypes.rst:1337
msgid "Tuples"
msgstr "Tuplos"

#: ../../library/stdtypes.rst:1341
msgid ""
"Tuples are immutable sequences, typically used to store collections of "
"heterogeneous data (such as the 2-tuples produced by the :func:`enumerate` "
"built-in). Tuples are also used for cases where an immutable sequence of "
"homogeneous data is needed (such as allowing storage in a :class:`set` or :"
"class:`dict` instance)."
msgstr ""
"Os tuplos são sequências imutáveis, tipicamente usadas para armazenar "
"coleções de dados heterogéneos (como os 2-tuplos produzidos pela função "
"integrada :func:`enumerate`). Os tuplos também são usados em casos onde é "
"necessária uma sequência imutável de dados homogéneos (como permitir "
"armazenamento numa instância :class:`set` ou :class:`dict`)."

#: ../../library/stdtypes.rst:1349
msgid "Tuples may be constructed in a number of ways:"
msgstr "Os tuplos podem ser construídos de várias formas:"

#: ../../library/stdtypes.rst:1351
msgid "Using a pair of parentheses to denote the empty tuple: ``()``"
msgstr "Usando um par de parênteses para denotar o tuplo vazio: ``()``"

#: ../../library/stdtypes.rst:1352
msgid "Using a trailing comma for a singleton tuple: ``a,`` or ``(a,)``"
msgstr "Usando uma vírgula final para um tuplo singular: ``a,`` ou ``(a,)``"

#: ../../library/stdtypes.rst:1353
msgid "Separating items with commas: ``a, b, c`` or ``(a, b, c)``"
msgstr "Separando itens com vírgulas: ``a, b, c`` ou ``(a, b, c)``"

#: ../../library/stdtypes.rst:1354
msgid "Using the :func:`tuple` built-in: ``tuple()`` or ``tuple(iterable)``"
msgstr ""
"Usando a função integrada :func:`tuple`: ``tuple()`` ou ``tuple(iterable)``"

#: ../../library/stdtypes.rst:1356
msgid ""
"The constructor builds a tuple whose items are the same and in the same "
"order as *iterable*'s items.  *iterable* may be either a sequence, a "
"container that supports iteration, or an iterator object.  If *iterable* is "
"already a tuple, it is returned unchanged. For example, ``tuple('abc')`` "
"returns ``('a', 'b', 'c')`` and ``tuple( [1, 2, 3] )`` returns ``(1, 2, "
"3)``. If no argument is given, the constructor creates a new empty tuple, "
"``()``."
msgstr ""
"O construtor cria um tuplo cujos itens são os mesmos e na mesma ordem que os "
"itens de *iterable*. *iterable* pode ser uma sequência, um contentor que "
"suporta iteração, ou um objeto iterador. Se *iterable* já for um tuplo, é "
"retornado inalterado. Por exemplo, ``tuple('abc')`` retorna ``('a', 'b', "
"'c')`` e ``tuple( [1, 2, 3] )`` retorna ``(1, 2, 3)``. Se nenhum argumento "
"for fornecido, o construtor cria um novo tuplo vazio, ``()``."

#: ../../library/stdtypes.rst:1364
msgid ""
"Note that it is actually the comma which makes a tuple, not the parentheses. "
"The parentheses are optional, except in the empty tuple case, or when they "
"are needed to avoid syntactic ambiguity. For example, ``f(a, b, c)`` is a "
"function call with three arguments, while ``f((a, b, c))`` is a function "
"call with a 3-tuple as the sole argument."
msgstr ""
"Note que é na verdade a vírgula que cria um tuplo, não os parênteses. Os "
"parênteses são opcionais, exceto no caso do tuplo vazio, ou quando são "
"necessários para evitar ambiguidade sintática. Por exemplo, ``f(a, b, c)`` é "
"uma chamada de função com três argumentos, enquanto ``f((a, b, c))`` é uma "
"chamada de função com um 3-tuplo como argumento único."

#: ../../library/stdtypes.rst:1370
msgid ""
"Tuples implement all of the :ref:`common <typesseq-common>` sequence "
"operations."
msgstr ""
"Os tuplos implementam todas as :ref:`operações comuns <typesseq-common>` de "
"sequência."

#: ../../library/stdtypes.rst:1373
msgid ""
"For heterogeneous collections of data where access by name is clearer than "
"access by index, :func:`collections.namedtuple` may be a more appropriate "
"choice than a simple tuple object."
msgstr ""
"Para coleções heterogéneas de dados onde o acesso por nome é mais claro do "
"que o acesso por índice, :func:`collections.namedtuple` pode ser uma escolha "
"mais apropriada do que um simples objeto tuplo."

#: ../../library/stdtypes.rst:1381
msgid "Ranges"
msgstr "Intervalos"

#: ../../library/stdtypes.rst:1385
msgid ""
"The :class:`range` type represents an immutable sequence of numbers and is "
"commonly used for looping a specific number of times in :keyword:`for` loops."
msgstr ""
"O tipo :class:`range` representa uma sequência imutável de números e é "
"comumente usado para iterar um número específico de vezes em ciclos :keyword:"
"`for`."

#: ../../library/stdtypes.rst:1392
msgid ""
"The arguments to the range constructor must be integers (either built-in :"
"class:`int` or any object that implements the :meth:`~object.__index__` "
"special method).  If the *step* argument is omitted, it defaults to ``1``. "
"If the *start* argument is omitted, it defaults to ``0``. If *step* is "
"zero, :exc:`ValueError` is raised."
msgstr ""
"Os argumentos para o construtor de intervalo devem ser inteiros (ou o :class:"
"`int` integrado ou qualquer objeto que implemente o método especial :meth:"
"`~object.__index__`). Se o argumento *step* for omitido, o valor predefinido "
"é ``1``. Se o argumento *start* for omitido, o valor predefinido é ``0``. Se "
"*step* for zero, é lançada uma exceção :exc:`ValueError`."

#: ../../library/stdtypes.rst:1398
msgid ""
"For a positive *step*, the contents of a range ``r`` are determined by the "
"formula ``r[i] = start + step*i`` where ``i >= 0`` and ``r[i] < stop``."
msgstr ""
"Para um *step* positivo, o conteúdo de um intervalo ``r`` é determinado pela "
"fórmula ``r[i] = start + step*i`` onde ``i >= 0`` e ``r[i] < stop``."

#: ../../library/stdtypes.rst:1402
msgid ""
"For a negative *step*, the contents of the range are still determined by the "
"formula ``r[i] = start + step*i``, but the constraints are ``i >= 0`` and "
"``r[i] > stop``."
msgstr ""
"Para um *step* negativo, o conteúdo do intervalo ainda é determinado pela "
"fórmula ``r[i] = start + step*i``, mas as restrições são ``i >= 0`` e ``r[i] "
"> stop``."

#: ../../library/stdtypes.rst:1406
msgid ""
"A range object will be empty if ``r[0]`` does not meet the value constraint. "
"Ranges do support negative indices, but these are interpreted as indexing "
"from the end of the sequence determined by the positive indices."
msgstr ""
"Um objeto de intervalo estará vazio se ``r[0]`` não cumprir a restrição de "
"valor. Os intervalos suportam índices negativos, mas estes são interpretados "
"como indexação a partir do final da sequência determinada pelos índices "
"positivos."

#: ../../library/stdtypes.rst:1411
msgid ""
"Ranges containing absolute values larger than :data:`sys.maxsize` are "
"permitted but some features (such as :func:`len`) may raise :exc:"
"`OverflowError`."
msgstr ""
"Intervalos que contêm valores absolutos maiores que :data:`sys.maxsize` são "
"permitidos, mas algumas funcionalidades (como :func:`len`) podem lançar uma "
"exceção :exc:`OverflowError`."

#: ../../library/stdtypes.rst:1415
msgid "Range examples::"
msgstr "Exemplos de intervalos:"

#: ../../library/stdtypes.rst:1417
msgid ""
">>> list(range(10))\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
">>> list(range(1, 11))\n"
"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
">>> list(range(0, 30, 5))\n"
"[0, 5, 10, 15, 20, 25]\n"
">>> list(range(0, 10, 3))\n"
"[0, 3, 6, 9]\n"
">>> list(range(0, -10, -1))\n"
"[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n"
">>> list(range(0))\n"
"[]\n"
">>> list(range(1, 0))\n"
"[]"
msgstr ""
">>> list(range(10))\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
">>> list(range(1, 11))\n"
"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
">>> list(range(0, 30, 5))\n"
"[0, 5, 10, 15, 20, 25]\n"
">>> list(range(0, 10, 3))\n"
"[0, 3, 6, 9]\n"
">>> list(range(0, -10, -1))\n"
"[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n"
">>> list(range(0))\n"
"[]\n"
">>> list(range(1, 0))\n"
"[]"

#: ../../library/stdtypes.rst:1432
msgid ""
"Ranges implement all of the :ref:`common <typesseq-common>` sequence "
"operations except concatenation and repetition (due to the fact that range "
"objects can only represent sequences that follow a strict pattern and "
"repetition and concatenation will usually violate that pattern)."
msgstr ""
"Os intervalos implementam todas as :ref:`operações comuns <typesseq-common>` "
"de sequência, exceto concatenação e repetição (devido ao facto de os objetos "
"de intervalo só poderem representar sequências que seguem um padrão estrito "
"e a repetição e concatenação geralmente violam esse padrão)."

#: ../../library/stdtypes.rst:1439
msgid ""
"The value of the *start* parameter (or ``0`` if the parameter was not "
"supplied)"
msgstr ""
"O valor do parâmetro *start* (ou ``0`` se o parâmetro não foi fornecido)"

#: ../../library/stdtypes.rst:1444
msgid "The value of the *stop* parameter"
msgstr "O valor do parâmetro *stop*"

#: ../../library/stdtypes.rst:1448
msgid ""
"The value of the *step* parameter (or ``1`` if the parameter was not "
"supplied)"
msgstr ""
"O valor do parâmetro *step* (ou ``1`` se o parâmetro não foi fornecido)"

#: ../../library/stdtypes.rst:1451
msgid ""
"The advantage of the :class:`range` type over a regular :class:`list` or :"
"class:`tuple` is that a :class:`range` object will always take the same "
"(small) amount of memory, no matter the size of the range it represents (as "
"it only stores the ``start``, ``stop`` and ``step`` values, calculating "
"individual items and subranges as needed)."
msgstr ""
"A vantagem do tipo :class:`range` sobre uma :class:`list` ou :class:`tuple` "
"regular é que um objeto :class:`range` ocupará sempre a mesma (pequena) "
"quantidade de memória, independentemente do tamanho do intervalo que "
"representa (uma vez que armazena apenas os valores ``start``, ``stop`` e "
"``step``, calculando itens individuais e subintervalos conforme necessário)."

#: ../../library/stdtypes.rst:1457
msgid ""
"Range objects implement the :class:`collections.abc.Sequence` ABC, and "
"provide features such as containment tests, element index lookup, slicing "
"and support for negative indices (see :ref:`typesseq`):"
msgstr ""
"Os objetos de intervalo implementam a ABC :class:`collections.abc.Sequence` "
"e fornecem funcionalidades como testes de contenção, pesquisa de índice de "
"elemento, fatiamento e suporte para índices negativos (consulte :ref:"
"`typesseq`):"

#: ../../library/stdtypes.rst:1477
msgid ""
"Testing range objects for equality with ``==`` and ``!=`` compares them as "
"sequences.  That is, two range objects are considered equal if they "
"represent the same sequence of values.  (Note that two range objects that "
"compare equal might have different :attr:`~range.start`, :attr:`~range.stop` "
"and :attr:`~range.step` attributes, for example ``range(0) == range(2, 1, "
"3)`` or ``range(0, 3, 2) == range(0, 4, 2)``.)"
msgstr ""
"Testar objetos de intervalo para igualdade com ``==`` e ``!=`` compara-os "
"como sequências. Ou seja, dois objetos de intervalo são considerados iguais "
"se representarem a mesma sequência de valores. (Note que dois objetos de "
"intervalo que comparam igual podem ter atributos :attr:`~range.start`, :attr:"
"`~range.stop` e :attr:`~range.step` diferentes, por exemplo ``range(0) == "
"range(2, 1, 3)`` ou ``range(0, 3, 2) == range(0, 4, 2)``.)"

#: ../../library/stdtypes.rst:1484
msgid ""
"Implement the Sequence ABC. Support slicing and negative indices. Test :"
"class:`int` objects for membership in constant time instead of iterating "
"through all items."
msgstr ""
"Implementa a ABC de Sequência. Suporta fatiamento e índices negativos. Testa "
"objetos :class:`int` para pertencerem em tempo constante em vez de iterar "
"por todos os itens."

#: ../../library/stdtypes.rst:1490
msgid ""
"Define '==' and '!=' to compare range objects based on the sequence of "
"values they define (instead of comparing based on object identity)."
msgstr ""
"Define '==' e '!=' para comparar objetos de intervalo com base na sequência "
"de valores que definem (em vez de comparar com base na identidade do objeto)."

#: ../../library/stdtypes.rst:1495
msgid ""
"Added the :attr:`~range.start`, :attr:`~range.stop` and :attr:`~range.step` "
"attributes."
msgstr ""
"Adicionados os atributos :attr:`~range.start`, :attr:`~range.stop` e :attr:"
"`~range.step`."

#: ../../library/stdtypes.rst:1500
msgid ""
"The `linspace recipe <https://code.activestate.com/recipes/579000-equally-"
"spaced-numbers-linspace/>`_ shows how to implement a lazy version of range "
"suitable for floating-point applications."
msgstr ""
"A `receita linspace <https://code.activestate.com/recipes/579000-equally-"
"spaced-numbers-linspace/>`_ mostra como implementar uma versão preguiçosa de "
"intervalo adequada para aplicações de ponto flutuante."

#: ../../library/stdtypes.rst:1512
msgid "Text Sequence Type --- :class:`str`"
msgstr "Tipo de sequência de texto --- :class:`str`"

#: ../../library/stdtypes.rst:1514
msgid ""
"Textual data in Python is handled with :class:`str` objects, or :dfn:"
"`strings`. Strings are immutable :ref:`sequences <typesseq>` of Unicode code "
"points.  String literals are written in a variety of ways:"
msgstr ""
"Os dados textuais em Python são manipulados com objetos :class:`str`, ou :"
"dfn:`strings`. As *strings* são sequências :ref:`imutáveis <typesseq>` de "
"pontos de código Unicode. Os literais de *string* são escritos de várias "
"formas:"

#: ../../library/stdtypes.rst:1519
msgid "Single quotes: ``'allows embedded \"double\" quotes'``"
msgstr "Aspas simples: ``'allows embedded \"double\" quotes'``"

#: ../../library/stdtypes.rst:1520
msgid "Double quotes: ``\"allows embedded 'single' quotes\"``"
msgstr "Aspas duplas: ``\"allows embedded 'single' quotes\"``"

#: ../../library/stdtypes.rst:1521
msgid ""
"Triple quoted: ``'''Three single quotes'''``, ``\"\"\"Three double "
"quotes\"\"\"``"
msgstr ""
"Triplas aspas: ``'''Three single quotes'''``, ``\"\"\"Three double "
"quotes\"\"\"``"

#: ../../library/stdtypes.rst:1523
msgid ""
"Triple quoted strings may span multiple lines - all associated whitespace "
"will be included in the string literal."
msgstr ""
"As *strings* com aspas triplas podem abrangem várias linhas - todo o espaço "
"em branco associado será incluído no literal da *string*."

#: ../../library/stdtypes.rst:1526
msgid ""
"String literals that are part of a single expression and have only "
"whitespace between them will be implicitly converted to a single string "
"literal. That is, ``(\"spam \" \"eggs\") == \"spam eggs\"``."
msgstr ""
"Literais de *string* que fazem parte de uma única expressão e têm apenas "
"espaços em branco entre eles serão implicitamente convertidos num único "
"literal de *string*. Ou seja, ``(\"spam \" \"eggs\") == \"spam eggs\"``."

#: ../../library/stdtypes.rst:1530
msgid ""
"See :ref:`strings` for more about the various forms of string literal, "
"including supported :ref:`escape sequences <escape-sequences>`, and the "
"``r`` (\"raw\") prefix that disables most escape sequence processing."
msgstr ""
"Consulte :ref:`strings` para mais informações sobre as várias formas de "
"literais de *string*, incluindo :ref:`sequências de escape <escape-"
"sequences>`, e o prefixo ``r`` (\"raw\") que desativa a maior parte do "
"processamento de sequências de escape."

#: ../../library/stdtypes.rst:1534
msgid ""
"Strings may also be created from other objects using the :class:`str` "
"constructor."
msgstr ""
"As *strings* também podem ser criadas a partir de outros objetos usando o "
"construtor :class:`str`."

#: ../../library/stdtypes.rst:1537
msgid ""
"Since there is no separate \"character\" type, indexing a string produces "
"strings of length 1. That is, for a non-empty string *s*, ``s[0] == s[0:1]``."
msgstr ""
"Como não existe um tipo \"caractere\" separado, indexar uma *string* produz "
"*strings* de comprimento 1. Ou seja, para uma *string* não vazia *s*, ``s[0] "
"== s[0:1]``."

#: ../../library/stdtypes.rst:1543
msgid ""
"There is also no mutable string type, but :meth:`str.join` or :class:`io."
"StringIO` can be used to efficiently construct strings from multiple "
"fragments."
msgstr ""
"Também não existe um tipo de *string* mutável, mas :meth:`str.join` ou :"
"class:`io.StringIO` podem ser usados para construir *strings* de forma "
"eficiente a partir de múltiplos fragmentos."

#: ../../library/stdtypes.rst:1547
msgid ""
"For backwards compatibility with the Python 2 series, the ``u`` prefix is "
"once again permitted on string literals. It has no effect on the meaning of "
"string literals and cannot be combined with the ``r`` prefix."
msgstr ""
"Para compatibilidade com a série Python 2, o prefixo ``u`` é novamente "
"permitido em literais de *string*. Não tem efeito no significado dos "
"literais de *string* e não pode ser combinado com o prefixo ``r``."

#: ../../library/stdtypes.rst:1559
msgid ""
"Return a :ref:`string <textseq>` version of *object*.  If *object* is not "
"provided, returns the empty string.  Otherwise, the behavior of ``str()`` "
"depends on whether *encoding* or *errors* is given, as follows."
msgstr ""
"Retorna uma versão :ref:`string <textseq>` de *object*. Se *object* não for "
"fornecido, retorna a *string* vazia. Caso contrário, o comportamento de "
"``str()`` depende de *encoding* ou *errors* serem fornecidos, como se segue."

#: ../../library/stdtypes.rst:1563
msgid ""
"If neither *encoding* nor *errors* is given, ``str(object)`` returns :meth:"
"`type(object).__str__(object) <object.__str__>`, which is the \"informal\" "
"or nicely printable string representation of *object*.  For string objects, "
"this is the string itself.  If *object* does not have a :meth:`~object."
"__str__` method, then :func:`str` falls back to returning :func:"
"`repr(object) <repr>`."
msgstr ""
"Se nem *encoding* nem *errors* forem fornecidos, ``str(object)`` retorna :"
"meth:`type(object).__str__(object) <object.__str__>`, que é a representação "
"de *string* \"informal\" ou bem imprimível de *object*. Para objetos de "
"*string*, esta é a própria *string*. Se *object* não tiver um método :meth:"
"`~object.__str__`, então :func:`str` recorre a retornar :func:`repr(object) "
"<repr>`."

#: ../../library/stdtypes.rst:1575
msgid ""
"If at least one of *encoding* or *errors* is given, *object* should be a :"
"term:`bytes-like object` (e.g. :class:`bytes` or :class:`bytearray`).  In "
"this case, if *object* is a :class:`bytes` (or :class:`bytearray`) object, "
"then ``str(bytes, encoding, errors)`` is equivalent to :meth:`bytes."
"decode(encoding, errors) <bytes.decode>`.  Otherwise, the bytes object "
"underlying the buffer object is obtained before calling :meth:`bytes."
"decode`.  See :ref:`binaryseq` and :ref:`bufferobjects` for information on "
"buffer objects."
msgstr ""
"Se pelo menos um de *encoding* ou *errors* for fornecido, *object* deve ser "
"um :term:`objeto do tipo bytes` (por exemplo, :class:`bytes` ou :class:"
"`bytearray`). Neste caso, se *object* for um objeto :class:`bytes` (ou :"
"class:`bytearray`), então ``str(bytes, encoding, errors)`` é equivalente a :"
"meth:`bytes.decode(encoding, errors) <bytes.decode>`. Caso contrário, o "
"objeto de bytes subjacente ao objeto de buffer é obtido antes de chamar :"
"meth:`bytes.decode`. Consulte :ref:`binaryseq` e :ref:`bufferobjects` para "
"informações sobre objetos de buffer."

#: ../../library/stdtypes.rst:1584
msgid ""
"Passing a :class:`bytes` object to :func:`str` without the *encoding* or "
"*errors* arguments falls under the first case of returning the informal "
"string representation (see also the :option:`-b` command-line option to "
"Python).  For example::"
msgstr ""
"Passar um objeto :class:`bytes` para :func:`str` sem os argumentos "
"*encoding* ou *errors* enquadra-se no primeiro caso de retorno da "
"representação informal de *string* (consulte também a opção de linha de "
"comandos :option:`-b` do Python). Por exemplo:"

#: ../../library/stdtypes.rst:1589
msgid ""
">>> str(b'Zoot!')\n"
"\"b'Zoot!'\""
msgstr ""
">>> str(b'Zoot!')\n"
"'b'Zoot!''"

#: ../../library/stdtypes.rst:1592
msgid ""
"For more information on the ``str`` class and its methods, see :ref:"
"`textseq` and the :ref:`string-methods` section below.  To output formatted "
"strings, see the :ref:`f-strings` and :ref:`formatstrings` sections.  In "
"addition, see the :ref:`stringservices` section."
msgstr ""
"Para mais informações sobre a classe ``str`` e os seus métodos, consulte :"
"ref:`textseq` e a secção :ref:`string-methods` abaixo. Para produzir "
"*strings* formatadas, consulte as secções :ref:`f-strings` e :ref:"
"`formatstrings`. Além disso, consulte a secção :ref:`stringservices`."

#: ../../library/stdtypes.rst:1604
msgid "String Methods"
msgstr "Métodos de *string*"

#: ../../library/stdtypes.rst:1609
msgid ""
"Strings implement all of the :ref:`common <typesseq-common>` sequence "
"operations, along with the additional methods described below."
msgstr ""
"As *strings* implementam todas as :ref:`operações comuns <typesseq-common>` "
"de sequência, juntamente com os métodos adicionais descritos abaixo."

#: ../../library/stdtypes.rst:1612
msgid ""
"Strings also support two styles of string formatting, one providing a large "
"degree of flexibility and customization (see :meth:`str.format`, :ref:"
"`formatstrings` and :ref:`string-formatting`) and the other based on C "
"``printf`` style formatting that handles a narrower range of types and is "
"slightly harder to use correctly, but is often faster for the cases it can "
"handle (:ref:`old-string-formatting`)."
msgstr ""
"As *strings* também suportam dois estilos de formatação de *strings*, um que "
"fornece um grande grau de flexibilidade e personalização (consulte :meth:"
"`str.format`, :ref:`formatstrings` e :ref:`string-formatting`) e outro "
"baseado na formatação no estilo C ``printf``, que lida com uma gama mais "
"estreita de tipos e é um pouco mais difícil de usar corretamente, mas é "
"geralmente mais rápido para os casos que pode lidar (:ref:`old-string-"
"formatting`)."

#: ../../library/stdtypes.rst:1619
msgid ""
"The :ref:`textservices` section of the standard library covers a number of "
"other modules that provide various text related utilities (including regular "
"expression support in the :mod:`re` module)."
msgstr ""
"A secção :ref:`textservices` da biblioteca padrão abrange vários outros "
"módulos que fornecem várias utilidades relacionadas com texto (incluindo "
"suporte para expressões regulares no módulo :mod:`re`)."

#: ../../library/stdtypes.rst:1625
msgid ""
"Return a copy of the string with its first character capitalized and the "
"rest lowercased."
msgstr ""
"Retorna uma cópia da *string* com o primeiro caractere em maiúscula e o "
"resto em minúsculas."

#: ../../library/stdtypes.rst:1628
msgid ""
"The first character is now put into titlecase rather than uppercase. This "
"means that characters like digraphs will only have their first letter "
"capitalized, instead of the full character."
msgstr ""
"O primeiro caractere é agora colocado em título em vez de maiúscula. Isto "
"significa que caracteres como dígrafos terão apenas a sua primeira letra "
"maiúscula, em vez de todo o caractere."

#: ../../library/stdtypes.rst:1635
msgid ""
"Return a casefolded copy of the string. Casefolded strings may be used for "
"caseless matching."
msgstr ""
"Retorna uma cópia da *string* em *casefold*. *Strings* em *casefold* podem "
"ser usadas para correspondência sem distinção de maiúsculas/minúsculas."

#: ../../library/stdtypes.rst:1638
msgid ""
"Casefolding is similar to lowercasing but more aggressive because it is "
"intended to remove all case distinctions in a string. For example, the "
"German lowercase letter ``'ß'`` is equivalent to ``\"ss\"``. Since it is "
"already lowercase, :meth:`lower` would do nothing to ``'ß'``; :meth:"
"`casefold` converts it to ``\"ss\"``."
msgstr ""
"*Casefold* é semelhante a converter para minúsculas, mas mais agressivo, "
"porque destina-se a remover todas as distinções de maiúsculas/minúsculas "
"numa *string*. Por exemplo, a letra minúscula alemã ``'ß'`` é equivalente a "
"``\"ss\"``. Como já está em minúscula, :meth:`lower` não faria nada a "
"``'ß'``; :meth:`casefold` converte-a para ``\"ss\"``."

#: ../../library/stdtypes.rst:1644
msgid ""
"The casefolding algorithm is `described in section 3.13 'Default Case "
"Folding' of the Unicode Standard <https://www.unicode.org/versions/"
"Unicode15.0.0/ch03.pdf>`__."
msgstr ""

#: ../../library/stdtypes.rst:1653
msgid ""
"Return centered in a string of length *width*. Padding is done using the "
"specified *fillchar* (default is an ASCII space). The original string is "
"returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:1661
msgid ""
"Return the number of non-overlapping occurrences of substring *sub* in the "
"range [*start*, *end*].  Optional arguments *start* and *end* are "
"interpreted as in slice notation."
msgstr ""
"Retorna o número de ocorrências não sobrepostas da substring *sub* no "
"intervalo [*start*, *end*]. Os argumentos opcionais *start* e *end* são "
"interpretados como na notação de fatia."

#: ../../library/stdtypes.rst:1665
msgid ""
"If *sub* is empty, returns the number of empty strings between characters "
"which is the length of the string plus one."
msgstr ""

#: ../../library/stdtypes.rst:1671
msgid "Return the string encoded to :class:`bytes`."
msgstr "Retorna a *string* codificada para :class:`bytes`."

#: ../../library/stdtypes.rst:1673 ../../library/stdtypes.rst:2821
msgid ""
"*encoding* defaults to ``'utf-8'``; see :ref:`standard-encodings` for "
"possible values."
msgstr ""
"*encoding* é ``'utf-8'`` por predefinição; consulte :ref:`standard-"
"encodings` para valores possíveis."

#: ../../library/stdtypes.rst:1676
msgid ""
"*errors* controls how encoding errors are handled. If ``'strict'`` (the "
"default), a :exc:`UnicodeError` exception is raised. Other possible values "
"are ``'ignore'``, ``'replace'``, ``'xmlcharrefreplace'``, "
"``'backslashreplace'`` and any other name registered via :func:`codecs."
"register_error`. See :ref:`error-handlers` for details."
msgstr ""
"*errors* controla como os erros de codificação são tratados. Se for "
"``'strict'`` (o valor predefinido), é lançada uma exceção :exc:"
"`UnicodeError`. Outros valores possíveis são ``'ignore'``, ``'replace'``, "
"``'xmlcharrefreplace'``, ``'backslashreplace'`` e qualquer outro nome "
"registado através de :func:`codecs.register_error`. Consulte :ref:`error-"
"handlers` para mais detalhes."

#: ../../library/stdtypes.rst:1683
msgid ""
"For performance reasons, the value of *errors* is not checked for validity "
"unless an encoding error actually occurs, :ref:`devmode` is enabled or a :"
"ref:`debug build <debug-build>` is used."
msgstr ""

#: ../../library/stdtypes.rst:1688 ../../library/stdtypes.rst:2840
msgid "Added support for keyword arguments."
msgstr "Adicionado suporte para argumentos de palavra-chave."

#: ../../library/stdtypes.rst:1691 ../../library/stdtypes.rst:2843
msgid ""
"The value of the *errors* argument is now checked in :ref:`devmode` and in :"
"ref:`debug mode <debug-build>`."
msgstr ""
"O valor do argumento *errors* é agora verificado em :ref:`devmode` e em :ref:"
"`modo de depuração <debug-build>`."

#: ../../library/stdtypes.rst:1698
msgid ""
"Return ``True`` if the string ends with the specified *suffix*, otherwise "
"return ``False``.  *suffix* can also be a tuple of suffixes to look for.  "
"With optional *start*, test beginning at that position.  With optional "
"*end*, stop comparing at that position."
msgstr ""

#: ../../library/stdtypes.rst:1706
msgid ""
"Return a copy of the string where all tab characters are replaced by one or "
"more spaces, depending on the current column and the given tab size.  Tab "
"positions occur every *tabsize* characters (default is 8, giving tab "
"positions at columns 0, 8, 16 and so on).  To expand the string, the current "
"column is set to zero and the string is examined character by character.  If "
"the character is a tab (``\\t``), one or more space characters are inserted "
"in the result until the current column is equal to the next tab position. "
"(The tab character itself is not copied.)  If the character is a newline "
"(``\\n``) or return (``\\r``), it is copied and the current column is reset "
"to zero.  Any other character is copied unchanged and the current column is "
"incremented by one regardless of how the character is represented when "
"printed."
msgstr ""

#: ../../library/stdtypes.rst:1727
msgid ""
"Return the lowest index in the string where substring *sub* is found within "
"the slice ``s[start:end]``.  Optional arguments *start* and *end* are "
"interpreted as in slice notation.  Return ``-1`` if *sub* is not found."
msgstr ""

#: ../../library/stdtypes.rst:1733
msgid ""
"The :meth:`~str.find` method should be used only if you need to know the "
"position of *sub*.  To check if *sub* is a substring or not, use the :"
"keyword:`in` operator::"
msgstr ""
"O método :meth:`~str.find` deve ser usado apenas se precisar de saber a "
"posição de *sub*. Para verificar se *sub* é uma substring ou não, use o "
"operador :keyword:`in`:"

#: ../../library/stdtypes.rst:1737
msgid ""
">>> 'Py' in 'Python'\n"
"True"
msgstr ""
">>> 'Py' in 'Python'\n"
"True"

#: ../../library/stdtypes.rst:1743
msgid ""
"Perform a string formatting operation.  The string on which this method is "
"called can contain literal text or replacement fields delimited by braces "
"``{}``.  Each replacement field contains either the numeric index of a "
"positional argument, or the name of a keyword argument.  Returns a copy of "
"the string where each replacement field is replaced with the string value of "
"the corresponding argument."
msgstr ""
"Realiza uma operação de formatação de *string*. A *string* na qual este "
"método é chamado pode conter texto literal ou campos de substituição "
"delimitados por chavetas ``{}``. Cada campo de substituição contém o índice "
"numérico de um argumento posicional, ou o nome de um argumento de palavra-"
"chave. Retorna uma cópia da *string* onde cada campo de substituição é "
"substituído pelo valor de *string* do argumento correspondente."

#: ../../library/stdtypes.rst:1753
msgid ""
"See :ref:`formatstrings` for a description of the various formatting options "
"that can be specified in format strings."
msgstr ""
"Consulte :ref:`formatstrings` para uma descrição das várias opções de "
"formatação que podem ser especificadas em *strings* de formato."

#: ../../library/stdtypes.rst:1757
msgid ""
"When formatting a number (:class:`int`, :class:`float`, :class:`complex`, :"
"class:`decimal.Decimal` and subclasses) with the ``n`` type (ex: ``'{:n}'."
"format(1234)``), the function temporarily sets the ``LC_CTYPE`` locale to "
"the ``LC_NUMERIC`` locale to decode ``decimal_point`` and ``thousands_sep`` "
"fields of :c:func:`localeconv` if they are non-ASCII or longer than 1 byte, "
"and the ``LC_NUMERIC`` locale is different than the ``LC_CTYPE`` locale.  "
"This temporary change affects other threads."
msgstr ""
"Ao formatar um número (:class:`int`, :class:`float`, :class:`complex`, :"
"class:`decimal.Decimal` e subclasses) com o tipo ``n`` (ex: ``'{:n}'."
"format(1234)``), a função define temporariamente a localização ``LC_CTYPE`` "
"para a localização ``LC_NUMERIC`` para descodificar os campos "
"``decimal_point`` e ``thousands_sep`` de :c:func:`localeconv` se forem não-"
"ASCII ou maiores que 1 byte, e a localização ``LC_NUMERIC`` for diferente da "
"localização ``LC_CTYPE``. Esta alteração temporária afeta outras *threads*."

#: ../../library/stdtypes.rst:1766
msgid ""
"When formatting a number with the ``n`` type, the function sets temporarily "
"the ``LC_CTYPE`` locale to the ``LC_NUMERIC`` locale in some cases."
msgstr ""
"Ao formatar um número com o tipo ``n``, a função define temporariamente a "
"localização ``LC_CTYPE`` para a localização ``LC_NUMERIC`` em alguns casos."

#: ../../library/stdtypes.rst:1774
msgid ""
"Similar to ``str.format(**mapping)``, except that ``mapping`` is used "
"directly and not copied to a :class:`dict`.  This is useful if for example "
"``mapping`` is a dict subclass:"
msgstr ""
"Semelhante a ``str.format(**mapping)``, exceto que ``mapping`` é usado "
"diretamente e não é copiado para um :class:`dict`. Isto é útil se, por "
"exemplo, ``mapping`` for uma subclasse de dicionário:"

#: ../../library/stdtypes.rst:1790
msgid ""
"Like :meth:`~str.find`, but raise :exc:`ValueError` when the substring is "
"not found."
msgstr ""
"Semelhante a :meth:`~str.find`, mas lança :exc:`ValueError` quando a "
"substring não for encontrada."

#: ../../library/stdtypes.rst:1796
msgid ""
"Return ``True`` if all characters in the string are alphanumeric and there "
"is at least one character, ``False`` otherwise.  A character ``c`` is "
"alphanumeric if one of the following returns ``True``: ``c.isalpha()``, ``c."
"isdecimal()``, ``c.isdigit()``, or ``c.isnumeric()``."
msgstr ""
"Retorna ``True`` se todos os caracteres na *string* forem alfanuméricos e "
"houver pelo menos um caractere, ``False`` caso contrário. Um caractere ``c`` "
"é alfanumérico se uma das seguintes funções retornar ``True``: ``c."
"isalpha()``, ``c.isdecimal()``, ``c.isdigit()`` ou ``c.isnumeric()``."

#: ../../library/stdtypes.rst:1804
msgid ""
"Return ``True`` if all characters in the string are alphabetic and there is "
"at least one character, ``False`` otherwise.  Alphabetic characters are "
"those characters defined in the Unicode character database as \"Letter\", i."
"e., those with general category property being one of \"Lm\", \"Lt\", "
"\"Lu\", \"Ll\", or \"Lo\".  Note that this is different from the `Alphabetic "
"property defined in the section 4.10 'Letters, Alphabetic, and Ideographic' "
"of the Unicode Standard <https://www.unicode.org/versions/Unicode15.0.0/ch04."
"pdf>`_."
msgstr ""

#: ../../library/stdtypes.rst:1815
msgid ""
"Return ``True`` if the string is empty or all characters in the string are "
"ASCII, ``False`` otherwise. ASCII characters have code points in the range "
"U+0000-U+007F."
msgstr ""
"Retorna ``True`` se a *string* estiver vazia ou todos os caracteres na "
"*string* forem ASCII, ``False`` caso contrário. Caracteres ASCII têm pontos "
"de código no intervalo U+0000-U+007F."

#: ../../library/stdtypes.rst:1824
msgid ""
"Return ``True`` if all characters in the string are decimal characters and "
"there is at least one character, ``False`` otherwise. Decimal characters are "
"those that can be used to form numbers in base 10, e.g. U+0660, ARABIC-INDIC "
"DIGIT ZERO.  Formally a decimal character is a character in the Unicode "
"General Category \"Nd\"."
msgstr ""
"Retorna ``True`` se todos os caracteres na *string* forem caracteres "
"decimais e houver pelo menos um caractere, ``False`` caso contrário. "
"Caracteres decimais são aqueles que podem ser usados para formar números em "
"base 10, por exemplo, U+0660, ARABIC-INDIC DIGIT ZERO. Formalmente, um "
"caractere decimal é um caractere na Categoria Geral Unicode \"Nd\"."

#: ../../library/stdtypes.rst:1834
msgid ""
"Return ``True`` if all characters in the string are digits and there is at "
"least one character, ``False`` otherwise.  Digits include decimal characters "
"and digits that need special handling, such as the compatibility superscript "
"digits. This covers digits which cannot be used to form numbers in base 10, "
"like the Kharosthi numbers.  Formally, a digit is a character that has the "
"property value Numeric_Type=Digit or Numeric_Type=Decimal."
msgstr ""
"Retorna ``True`` se todos os caracteres na *string* forem dígitos e houver "
"pelo menos um caractere, ``False`` caso contrário. Dígitos incluem "
"caracteres decimais e dígitos que necessitam de tratamento especial, como os "
"dígitos sobrescritos de compatibilidade. Isto abrange dígitos que não podem "
"ser usados para formar números em base 10, como os números Kharosthi. "
"Formalmente, um dígito é um caractere que tem o valor de propriedade "
"Numeric_Type=Digit ou Numeric_Type=Decimal."

#: ../../library/stdtypes.rst:1844
msgid ""
"Return ``True`` if the string is a valid identifier according to the "
"language definition, section :ref:`identifiers`."
msgstr ""
"Retorna ``True`` se a *string* for um identificador válido de acordo com a "
"definição da linguagem, secção :ref:`identifiers`."

#: ../../library/stdtypes.rst:1847
msgid ""
":func:`keyword.iskeyword` can be used to test whether string ``s`` is a "
"reserved identifier, such as :keyword:`def` and :keyword:`class`."
msgstr ""
"A função :func:`keyword.iskeyword` pode ser usada para testar se a *string* "
"``s`` é um identificador reservado, como :keyword:`def` e :keyword:`class`."

#: ../../library/stdtypes.rst:1850
msgid "Example: ::"
msgstr "Exemplo:"

#: ../../library/stdtypes.rst:1853
msgid ""
">>> from keyword import iskeyword\n"
"\n"
">>> 'hello'.isidentifier(), iskeyword('hello')\n"
"(True, False)\n"
">>> 'def'.isidentifier(), iskeyword('def')\n"
"(True, True)"
msgstr ""
">>> from keyword import iskeyword\n"
"\n"
">>> 'hello'.isidentifier(), iskeyword('hello')\n"
"(True, False)\n"
">>> 'def'.isidentifier(), iskeyword('def')\n"
"(True, True)"

#: ../../library/stdtypes.rst:1863
msgid ""
"Return ``True`` if all cased characters [4]_ in the string are lowercase and "
"there is at least one cased character, ``False`` otherwise."
msgstr ""
"Retorna ``True`` se todos os caracteres com caixa [4]_ na *string* forem "
"minúsculos e houver pelo menos um caractere com caixa, ``False`` caso "
"contrário."

#: ../../library/stdtypes.rst:1869
msgid ""
"Return ``True`` if all characters in the string are numeric characters, and "
"there is at least one character, ``False`` otherwise. Numeric characters "
"include digit characters, and all characters that have the Unicode numeric "
"value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH.  Formally, numeric "
"characters are those with the property value Numeric_Type=Digit, "
"Numeric_Type=Decimal or Numeric_Type=Numeric."
msgstr ""
"Retorna ``True`` se todos os caracteres na *string* forem caracteres "
"numéricos, e houver pelo menos um caractere, ``False`` caso contrário. "
"Caracteres numéricos incluem caracteres de dígitos, e todos os caracteres "
"que têm a propriedade de valor numérico Unicode, por exemplo, U+2155, VULGAR "
"FRACTION ONE FIFTH. Formalmente, caracteres numéricos são aqueles com o "
"valor de propriedade Numeric_Type=Digit, Numeric_Type=Decimal ou "
"Numeric_Type=Numeric."

#: ../../library/stdtypes.rst:1879
msgid ""
"Return true if all characters in the string are printable, false if it "
"contains at least one non-printable character."
msgstr ""

#: ../../library/stdtypes.rst:1882
msgid ""
"Here \"printable\" means the character is suitable for :func:`repr` to use "
"in its output; \"non-printable\" means that :func:`repr` on built-in types "
"will hex-escape the character.  It has no bearing on the handling of strings "
"written to :data:`sys.stdout` or :data:`sys.stderr`."
msgstr ""
"Aqui, \"imprimível\" significa que o caractere é adequado para :func:`repr` "
"usar na sua saída; \"não imprimível\" significa que :func:`repr` em tipos "
"integrados fará escape hexadecimal do caractere. Não tem qualquer influência "
"no tratamento de *strings* escritas para :data:`sys.stdout` ou :data:`sys."
"stderr`."

#: ../../library/stdtypes.rst:1887
msgid ""
"The printable characters are those which in the Unicode character database "
"(see :mod:`unicodedata`) have a general category in group Letter, Mark, "
"Number, Punctuation, or Symbol (L, M, N, P, or S); plus the ASCII space "
"0x20. Nonprintable characters are those in group Separator or Other (Z or "
"C), except the ASCII space."
msgstr ""
"Os caracteres imprimíveis são aqueles que, na base de dados de caracteres "
"Unicode (consulte :mod:`unicodedata`), têm uma categoria geral no grupo "
"Letter, Mark, Number, Punctuation ou Symbol (L, M, N, P ou S); além do "
"espaço ASCII 0x20. Caracteres não imprimíveis são aqueles no grupo Separator "
"ou Other (Z ou C), exceto o espaço ASCII."

#: ../../library/stdtypes.rst:1896
msgid ""
"Return ``True`` if there are only whitespace characters in the string and "
"there is at least one character, ``False`` otherwise."
msgstr ""
"Retorna ``True`` se houver apenas caracteres de espaço em branco na *string* "
"e houver pelo menos um caractere, ``False`` caso contrário."

#: ../../library/stdtypes.rst:1899
msgid ""
"A character is *whitespace* if in the Unicode character database (see :mod:"
"`unicodedata`), either its general category is ``Zs`` (\"Separator, "
"space\"), or its bidirectional class is one of ``WS``, ``B``, or ``S``."
msgstr ""
"Um caractere é *whitespace* se, na base de dados de caracteres Unicode "
"(consulte :mod:`unicodedata`), a sua categoria geral for ``Zs`` "
"(\"Separator, space\"), ou a sua classe bidirecional for uma de ``WS``, "
"``B`` ou ``S``."

#: ../../library/stdtypes.rst:1907
msgid ""
"Return ``True`` if the string is a titlecased string and there is at least "
"one character, for example uppercase characters may only follow uncased "
"characters and lowercase characters only cased ones.  Return ``False`` "
"otherwise."
msgstr ""
"Retorna ``True`` se a *string* for uma *string* em título e houver pelo "
"menos um caractere, por exemplo, caracteres maiúsculos só podem seguir "
"caracteres sem caixa e caracteres minúsculos só podem seguir caracteres com "
"caixa. Retorna ``False`` caso contrário."

#: ../../library/stdtypes.rst:1914
msgid ""
"Return ``True`` if all cased characters [4]_ in the string are uppercase and "
"there is at least one cased character, ``False`` otherwise."
msgstr ""
"Retorna ``True`` se todos os caracteres com caixa [4]_ na *string* forem "
"maiúsculos e houver pelo menos um caractere com caixa, ``False`` caso "
"contrário."

#: ../../library/stdtypes.rst:1932
msgid ""
"Return a string which is the concatenation of the strings in *iterable*. A :"
"exc:`TypeError` will be raised if there are any non-string values in "
"*iterable*, including :class:`bytes` objects.  The separator between "
"elements is the string providing this method."
msgstr ""

#: ../../library/stdtypes.rst:1940
msgid ""
"Return the string left justified in a string of length *width*. Padding is "
"done using the specified *fillchar* (default is an ASCII space). The "
"original string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:1947
msgid ""
"Return a copy of the string with all the cased characters [4]_ converted to "
"lowercase."
msgstr ""
"Retorna uma cópia da *string* com todos os caracteres com caixa [4]_ "
"convertidos para minúsculas."

#: ../../library/stdtypes.rst:1950
msgid ""
"The lowercasing algorithm used is `described in section 3.13 'Default Case "
"Folding' of the Unicode Standard <https://www.unicode.org/versions/"
"Unicode15.0.0/ch03.pdf>`__."
msgstr ""

#: ../../library/stdtypes.rst:1957
msgid ""
"Return a copy of the string with leading characters removed.  The *chars* "
"argument is a string specifying the set of characters to be removed.  If "
"omitted or ``None``, the *chars* argument defaults to removing whitespace.  "
"The *chars* argument is not a prefix; rather, all combinations of its values "
"are stripped::"
msgstr ""
"Retorna uma cópia da *string* com os caracteres iniciais removidos. O "
"argumento *chars* é uma *string* que especifica o conjunto de caracteres a "
"serem removidos. Se for omitido ou ``None``, o argumento *chars* remove "
"espaços em branco por predefinição. O argumento *chars* não é um prefixo; em "
"vez disso, todas as combinações dos seus valores são removidas:"

#: ../../library/stdtypes.rst:1962
msgid ""
">>> '   spacious   '.lstrip()\n"
"'spacious   '\n"
">>> 'www.example.com'.lstrip('cmowz.')\n"
"'example.com'"
msgstr ""
">>> '   spacious   '.lstrip()\n"
"'spacious   '\n"
">>> 'www.example.com'.lstrip('cmowz.')\n"
"'example.com'"

#: ../../library/stdtypes.rst:1967
msgid ""
"See :meth:`str.removeprefix` for a method that will remove a single prefix "
"string rather than all of a set of characters.  For example::"
msgstr ""
"Consulte :meth:`str.removeprefix` para um método que removerá uma única "
"*string* de prefixo em vez de todos os caracteres de um conjunto. Por "
"exemplo:"

#: ../../library/stdtypes.rst:1970
msgid ""
">>> 'Arthur: three!'.lstrip('Arthur: ')\n"
"'ee!'\n"
">>> 'Arthur: three!'.removeprefix('Arthur: ')\n"
"'three!'"
msgstr ""
">>> 'Arthur: three!'.lstrip('Arthur: ')\n"
"'ee!'\n"
">>> 'Arthur: three!'.removeprefix('Arthur: ')\n"
"'three!'"

#: ../../library/stdtypes.rst:1978
msgid ""
"This static method returns a translation table usable for :meth:`str."
"translate`."
msgstr ""
"Este método estático retorna uma tabela de tradução utilizável para :meth:"
"`str.translate`."

#: ../../library/stdtypes.rst:1980
msgid ""
"If there is only one argument, it must be a dictionary mapping Unicode "
"ordinals (integers) or characters (strings of length 1) to Unicode ordinals, "
"strings (of arbitrary lengths) or ``None``.  Character keys will then be "
"converted to ordinals."
msgstr ""
"Se houver apenas um argumento, deve ser um dicionário que mapeia ordinais "
"Unicode (inteiros) ou caracteres (*strings* de comprimento 1) para ordinais "
"Unicode, *strings* (de comprimentos arbitrários) ou ``None``. As chaves de "
"caractere serão então convertidas para ordinais."

#: ../../library/stdtypes.rst:1985
msgid ""
"If there are two arguments, they must be strings of equal length, and in the "
"resulting dictionary, each character in x will be mapped to the character at "
"the same position in y.  If there is a third argument, it must be a string, "
"whose characters will be mapped to ``None`` in the result."
msgstr ""

#: ../../library/stdtypes.rst:1993
msgid ""
"Split the string at the first occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself, and the part "
"after the separator.  If the separator is not found, return a 3-tuple "
"containing the string itself, followed by two empty strings."
msgstr ""
"Divide a *string* na primeira ocorrência de *sep* e retorna um 3-tuplo "
"contendo a parte antes do separador, o separador em si e a parte após o "
"separador. Se o separador não for encontrado, retorna um 3-tuplo contendo a "
"própria *string*, seguida por duas *strings* vazias."

#: ../../library/stdtypes.rst:2001
msgid ""
"If the string starts with the *prefix* string, return "
"``string[len(prefix):]``. Otherwise, return a copy of the original string::"
msgstr ""
"Se a *string* começar com a *string* *prefix*, retorna "
"``string[len(prefix):]``. Caso contrário, retorna uma cópia da *string* "
"original:"

#: ../../library/stdtypes.rst:2005
msgid ""
">>> 'TestHook'.removeprefix('Test')\n"
"'Hook'\n"
">>> 'BaseTestCase'.removeprefix('Test')\n"
"'BaseTestCase'"
msgstr ""
">>> 'TestHook'.removeprefix('Test')\n"
"'Hook'\n"
">>> 'BaseTestCase'.removeprefix('Test')\n"
"'BaseTestCase'"

#: ../../library/stdtypes.rst:2015
msgid ""
"If the string ends with the *suffix* string and that *suffix* is not empty, "
"return ``string[:-len(suffix)]``. Otherwise, return a copy of the original "
"string::"
msgstr ""
"Se a *string* terminar com a *string* *suffix* e esse *suffix* não estiver "
"vazio, retorna ``string[:-len(suffix)]``. Caso contrário, retorna uma cópia "
"da *string* original:"

#: ../../library/stdtypes.rst:2019
msgid ""
">>> 'MiscTests'.removesuffix('Tests')\n"
"'Misc'\n"
">>> 'TmpDirMixin'.removesuffix('Tests')\n"
"'TmpDirMixin'"
msgstr ""
">>> 'MiscTests'.removesuffix('Tests')\n"
"'Misc'\n"
">>> 'TmpDirMixin'.removesuffix('Tests')\n"
"'TmpDirMixin'"

#: ../../library/stdtypes.rst:2029
msgid ""
"Return a copy of the string with all occurrences of substring *old* replaced "
"by *new*.  If the optional argument *count* is given, only the first *count* "
"occurrences are replaced."
msgstr ""

#: ../../library/stdtypes.rst:2036
msgid ""
"Return the highest index in the string where substring *sub* is found, such "
"that *sub* is contained within ``s[start:end]``.  Optional arguments *start* "
"and *end* are interpreted as in slice notation.  Return ``-1`` on failure."
msgstr ""
"Retorna o índice mais alto na *string* onde a substring *sub* é encontrada, "
"de modo que *sub* esteja contida em ``s[start:end]``. Os argumentos "
"opcionais *start* e *end* são interpretados como na notação de fatia. "
"Retorna ``-1`` em caso de falha."

#: ../../library/stdtypes.rst:2043
msgid ""
"Like :meth:`rfind` but raises :exc:`ValueError` when the substring *sub* is "
"not found."
msgstr ""
"Semelhante a :meth:`rfind`, mas lança :exc:`ValueError` quando a substring "
"*sub* não for encontrada."

#: ../../library/stdtypes.rst:2049
msgid ""
"Return the string right justified in a string of length *width*. Padding is "
"done using the specified *fillchar* (default is an ASCII space). The "
"original string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""
"Retorna a *string* alinhada à direita numa *string* de comprimento *width*. "
"O preenchimento é feito usando o *fillchar* especificado (o valor "
"predefinido é um espaço ASCII). A *string* original é retornada se *width* "
"for menor ou igual a ``len(s)``."

#: ../../library/stdtypes.rst:2056
msgid ""
"Split the string at the last occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself, and the part "
"after the separator.  If the separator is not found, return a 3-tuple "
"containing two empty strings, followed by the string itself."
msgstr ""
"Divide a *string* na última ocorrência de *sep* e retorna um 3-tuplo "
"contendo a parte antes do separador, o separador em si e a parte após o "
"separador. Se o separador não for encontrado, retorna um 3-tuplo contendo "
"duas *strings* vazias, seguido da própria *string*."

#: ../../library/stdtypes.rst:2064
msgid ""
"Return a list of the words in the string, using *sep* as the delimiter "
"string. If *maxsplit* is given, at most *maxsplit* splits are done, the "
"*rightmost* ones.  If *sep* is not specified or ``None``, any whitespace "
"string is a separator.  Except for splitting from the right, :meth:`rsplit` "
"behaves like :meth:`split` which is described in detail below."
msgstr ""
"Retorna uma lista das palavras na *string*, usando *sep* como a *string* de "
"delimitador. Se *maxsplit* for fornecido, no máximo *maxsplit* divisões são "
"feitas, as mais à *direita*. Se *sep* não for especificado ou for ``None``, "
"qualquer *string* de espaço em branco é um separador. Exceto pela divisão a "
"partir da direita, :meth:`rsplit` comporta-se como :meth:`split`, que é "
"descrita em detalhe abaixo."

#: ../../library/stdtypes.rst:2073
msgid ""
"Return a copy of the string with trailing characters removed.  The *chars* "
"argument is a string specifying the set of characters to be removed.  If "
"omitted or ``None``, the *chars* argument defaults to removing whitespace.  "
"The *chars* argument is not a suffix; rather, all combinations of its values "
"are stripped::"
msgstr ""
"Retorna uma cópia da *string* com os caracteres finais removidos. O "
"argumento *chars* é uma *string* que especifica o conjunto de caracteres a "
"serem removidos. Se for omitido ou ``None``, o argumento *chars* remove "
"espaços em branco por predefinição. O argumento *chars* não é um sufixo; em "
"vez disso, todas as combinações dos seus valores são removidas:"

#: ../../library/stdtypes.rst:2078
msgid ""
">>> '   spacious   '.rstrip()\n"
"'   spacious'\n"
">>> 'mississippi'.rstrip('ipz')\n"
"'mississ'"
msgstr ""
">>> '   spacious   '.rstrip()\n"
"'   spacious'\n"
">>> 'mississippi'.rstrip('ipz')\n"
"'mississ'"

#: ../../library/stdtypes.rst:2083
msgid ""
"See :meth:`str.removesuffix` for a method that will remove a single suffix "
"string rather than all of a set of characters.  For example::"
msgstr ""
"Consulte :meth:`str.removesuffix` para um método que remove uma única "
"*string* de sufixo em vez de todos os caracteres de um conjunto. Por exemplo:"

#: ../../library/stdtypes.rst:2086
msgid ""
">>> 'Monty Python'.rstrip(' Python')\n"
"'M'\n"
">>> 'Monty Python'.removesuffix(' Python')\n"
"'Monty'"
msgstr ""
">>> 'Monty Python'.rstrip(' Python')\n"
"'M'\n"
">>> 'Monty Python'.removesuffix(' Python')\n"
"'Monty'"

#: ../../library/stdtypes.rst:2093
msgid ""
"Return a list of the words in the string, using *sep* as the delimiter "
"string.  If *maxsplit* is given, at most *maxsplit* splits are done (thus, "
"the list will have at most ``maxsplit+1`` elements).  If *maxsplit* is not "
"specified or ``-1``, then there is no limit on the number of splits (all "
"possible splits are made)."
msgstr ""
"Retorna uma lista das palavras na *string*, usando *sep* como a *string* de "
"delimitador. Se *maxsplit* for fornecido, no máximo *maxsplit* divisões são "
"feitas (assim, a lista terá no máximo ``maxsplit+1`` elementos). Se "
"*maxsplit* não for especificado ou for ``-1``, não há limite no número de "
"divisões (todas as divisões possíveis são feitas)."

#: ../../library/stdtypes.rst:2099
msgid ""
"If *sep* is given, consecutive delimiters are not grouped together and are "
"deemed to delimit empty strings (for example, ``'1,,2'.split(',')`` returns "
"``['1', '', '2']``).  The *sep* argument may consist of multiple characters "
"as a single delimiter (to split with multiple delimiters, use :func:`re."
"split`). Splitting an empty string with a specified separator returns "
"``['']``."
msgstr ""
"Se *sep* for fornecido, delimitadores consecutivos não são agrupados e são "
"considerados como delimitadores de *strings* vazias (por exemplo, ``'1,,2'."
"split(',')`` retorna ``['1', '', '2']``). O argumento *sep* pode consistir "
"em vários caracteres como um único delimitador (para dividir com múltiplos "
"delimitadores, use :func:`re.split`). Dividir uma *string* vazia com um "
"separador especificado retorna ``['']``."

#: ../../library/stdtypes.rst:2106 ../../library/stdtypes.rst:2124
#: ../../library/stdtypes.rst:2176 ../../library/stdtypes.rst:2244
#: ../../library/stdtypes.rst:2312 ../../library/stdtypes.rst:3158
#: ../../library/stdtypes.rst:3176 ../../library/stdtypes.rst:3267
#: ../../library/stdtypes.rst:3283 ../../library/stdtypes.rst:3308
#: ../../library/stdtypes.rst:3322 ../../library/stdtypes.rst:3350
#: ../../library/stdtypes.rst:3364 ../../library/stdtypes.rst:3382
#: ../../library/stdtypes.rst:3409 ../../library/stdtypes.rst:3432
#: ../../library/stdtypes.rst:3459 ../../library/stdtypes.rst:3501
#: ../../library/stdtypes.rst:3525
msgid "For example::"
msgstr "Por exemplo::"

#: ../../library/stdtypes.rst:2108
msgid ""
">>> '1,2,3'.split(',')\n"
"['1', '2', '3']\n"
">>> '1,2,3'.split(',', maxsplit=1)\n"
"['1', '2,3']\n"
">>> '1,2,,3,'.split(',')\n"
"['1', '2', '', '3', '']\n"
">>> '1<>2<>3<4'.split('<>')\n"
"['1', '2', '3<4']"
msgstr ""

#: ../../library/stdtypes.rst:2117
msgid ""
"If *sep* is not specified or is ``None``, a different splitting algorithm is "
"applied: runs of consecutive whitespace are regarded as a single separator, "
"and the result will contain no empty strings at the start or end if the "
"string has leading or trailing whitespace.  Consequently, splitting an empty "
"string or a string consisting of just whitespace with a ``None`` separator "
"returns ``[]``."
msgstr ""
"Se *sep* não for especificado ou for ``None``, um algoritmo de divisão "
"diferente é aplicado: sequências consecutivas de espaços em branco são "
"consideradas como um único separador, e o resultado não conterá *strings* "
"vazias no início ou no fim se a *string* tiver espaços em branco iniciais ou "
"finais. Consequentemente, dividir uma *string* vazia ou uma *string* "
"composta apenas por espaços em branco com um separador ``None`` retorna "
"``[]``."

#: ../../library/stdtypes.rst:2126
msgid ""
">>> '1 2 3'.split()\n"
"['1', '2', '3']\n"
">>> '1 2 3'.split(maxsplit=1)\n"
"['1', '2 3']\n"
">>> '   1   2   3   '.split()\n"
"['1', '2', '3']"
msgstr ""
">>> '1 2 3'.split()\n"
"['1', '2', '3']\n"
">>> '1 2 3'.split(maxsplit=1)\n"
"['1', '2 3']\n"
">>> '   1   2   3   '.split()\n"
"['1', '2', '3']"

#: ../../library/stdtypes.rst:2139
msgid ""
"Return a list of the lines in the string, breaking at line boundaries.  Line "
"breaks are not included in the resulting list unless *keepends* is given and "
"true."
msgstr ""
"Retorna uma lista das linhas na *string*, quebrando nos limites de linha. As "
"quebras de linha não são incluídas na lista resultante, a menos que "
"*keepends* seja fornecido e verdadeiro."

#: ../../library/stdtypes.rst:2143
msgid ""
"This method splits on the following line boundaries.  In particular, the "
"boundaries are a superset of :term:`universal newlines`."
msgstr ""
"Este método divide nos seguintes limites de linha. Em particular, os limites "
"são um superconjunto de :term:`novas linhas universais`."

#: ../../library/stdtypes.rst:2147
msgid "Representation"
msgstr "Representação"

#: ../../library/stdtypes.rst:2147
msgid "Description"
msgstr "Descrição"

#: ../../library/stdtypes.rst:2149
msgid "``\\n``"
msgstr "``\\n``"

#: ../../library/stdtypes.rst:2149
msgid "Line Feed"
msgstr "Alimentação de linha"

#: ../../library/stdtypes.rst:2151
msgid "``\\r``"
msgstr "``\\r``"

#: ../../library/stdtypes.rst:2151
msgid "Carriage Return"
msgstr "Retorno de carro"

#: ../../library/stdtypes.rst:2153
msgid "``\\r\\n``"
msgstr "``\\r\\n``"

#: ../../library/stdtypes.rst:2153
msgid "Carriage Return + Line Feed"
msgstr "Retorno de carro + Alimentação de linha"

#: ../../library/stdtypes.rst:2155
msgid "``\\v`` or ``\\x0b``"
msgstr "``\\v`` ou ``\\x0b``"

#: ../../library/stdtypes.rst:2155
msgid "Line Tabulation"
msgstr "Tabulação de linha"

#: ../../library/stdtypes.rst:2157
msgid "``\\f`` or ``\\x0c``"
msgstr "``\\f`` ou ``\\x0c``"

#: ../../library/stdtypes.rst:2157
msgid "Form Feed"
msgstr "Alimentação de formulário"

#: ../../library/stdtypes.rst:2159
msgid "``\\x1c``"
msgstr "``\\x1c``"

#: ../../library/stdtypes.rst:2159
msgid "File Separator"
msgstr "Separador de ficheiro"

#: ../../library/stdtypes.rst:2161
msgid "``\\x1d``"
msgstr "``\\x1d``"

#: ../../library/stdtypes.rst:2161
msgid "Group Separator"
msgstr "Separador de grupo"

#: ../../library/stdtypes.rst:2163
msgid "``\\x1e``"
msgstr "``\\x1e``"

#: ../../library/stdtypes.rst:2163
msgid "Record Separator"
msgstr "Separador de registo"

#: ../../library/stdtypes.rst:2165
msgid "``\\x85``"
msgstr "``\\x85``"

#: ../../library/stdtypes.rst:2165
msgid "Next Line (C1 Control Code)"
msgstr "Próxima linha (Código de controlo C1)"

#: ../../library/stdtypes.rst:2167
msgid "``\\u2028``"
msgstr "``\\u2028``"

#: ../../library/stdtypes.rst:2167
msgid "Line Separator"
msgstr "Separador de linha"

#: ../../library/stdtypes.rst:2169
msgid "``\\u2029``"
msgstr "``\\u2029``"

#: ../../library/stdtypes.rst:2169
msgid "Paragraph Separator"
msgstr "Separador de parágrafo"

#: ../../library/stdtypes.rst:2174
msgid "``\\v`` and ``\\f`` added to list of line boundaries."
msgstr "``\\v`` e ``\\f`` adicionados à lista de limites de linha."

#: ../../library/stdtypes.rst:2178
msgid ""
">>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n"
"['ab c', '', 'de fg', 'kl']\n"
">>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n"
"['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']"
msgstr ""
">>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n"
"['ab c', '', 'de fg', 'kl']\n"
">>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n"
"['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']"

#: ../../library/stdtypes.rst:2183
msgid ""
"Unlike :meth:`~str.split` when a delimiter string *sep* is given, this "
"method returns an empty list for the empty string, and a terminal line break "
"does not result in an extra line::"
msgstr ""
"Ao contrário de :meth:`~str.split` quando uma *string* delimitadora *sep* é "
"fornecida, este método retorna uma lista vazia para a *string* vazia, e uma "
"quebra de linha terminal não resulta numa linha extra:"

#: ../../library/stdtypes.rst:2187
msgid ""
">>> \"\".splitlines()\n"
"[]\n"
">>> \"One line\\n\".splitlines()\n"
"['One line']"
msgstr ""
">>> \"\".splitlines()\n"
"[]\n"
">>> \"One line\\n\".splitlines()\n"
"['One line']"

#: ../../library/stdtypes.rst:2192
msgid "For comparison, ``split('\\n')`` gives::"
msgstr "Para comparação, ``split('\\n')`` dá:"

#: ../../library/stdtypes.rst:2194
msgid ""
">>> ''.split('\\n')\n"
"['']\n"
">>> 'Two lines\\n'.split('\\n')\n"
"['Two lines', '']"
msgstr ""
">>> ''.split('\\n')\n"
"['']\n"
">>> 'Two lines\\n'.split('\\n')\n"
"['Two lines', '']"

#: ../../library/stdtypes.rst:2202
msgid ""
"Return ``True`` if string starts with the *prefix*, otherwise return "
"``False``. *prefix* can also be a tuple of prefixes to look for.  With "
"optional *start*, test string beginning at that position.  With optional "
"*end*, stop comparing string at that position."
msgstr ""
"Retorna ``True`` se a *string* começar com o *prefix*, caso contrário "
"retorna ``False``. *prefix* também pode ser um tuplo de prefixos a procurar. "
"Com *start* opcional, testa a *string* a partir dessa posição. Com *end* "
"opcional, para de comparar a *string* nessa posição."

#: ../../library/stdtypes.rst:2210
msgid ""
"Return a copy of the string with the leading and trailing characters "
"removed. The *chars* argument is a string specifying the set of characters "
"to be removed. If omitted or ``None``, the *chars* argument defaults to "
"removing whitespace. The *chars* argument is not a prefix or suffix; rather, "
"all combinations of its values are stripped::"
msgstr ""
"Retorna uma cópia da *string* com os caracteres iniciais e finais removidos. "
"O argumento *chars* é uma *string* que especifica o conjunto de caracteres a "
"serem removidos. Se for omitido ou ``None``, o argumento *chars* remove "
"espaços em branco por predefinição. O argumento *chars* não é um prefixo ou "
"sufixo; em vez disso, todas as combinações dos seus valores são removidas:"

#: ../../library/stdtypes.rst:2216
msgid ""
">>> '   spacious   '.strip()\n"
"'spacious'\n"
">>> 'www.example.com'.strip('cmowz.')\n"
"'example'"
msgstr ""
">>> '   spacious   '.strip()\n"
"'spacious'\n"
">>> 'www.example.com'.strip('cmowz.')\n"
"'example'"

#: ../../library/stdtypes.rst:2221
msgid ""
"The outermost leading and trailing *chars* argument values are stripped from "
"the string. Characters are removed from the leading end until reaching a "
"string character that is not contained in the set of characters in *chars*. "
"A similar action takes place on the trailing end. For example::"
msgstr ""
"Os valores mais externos de *chars* nos extremos inicial e final são "
"removidos da *string*. Os caracteres são removidos do início até encontrar "
"um caractere da *string* que não esteja contido no conjunto de caracteres em "
"*chars*. Uma ação semelhante ocorre no extremo final. Por exemplo:"

#: ../../library/stdtypes.rst:2227
msgid ""
">>> comment_string = '#....... Section 3.2.1 Issue #32 .......'\n"
">>> comment_string.strip('.#! ')\n"
"'Section 3.2.1 Issue #32'"
msgstr ""
">>> comment_string = '#....... Section 3.2.1 Issue #32 .......'\n"
">>> comment_string.strip('.#! ')\n"
"'Section 3.2.1 Issue #32'"

#: ../../library/stdtypes.rst:2234
msgid ""
"Return a copy of the string with uppercase characters converted to lowercase "
"and vice versa. Note that it is not necessarily true that ``s.swapcase()."
"swapcase() == s``."
msgstr ""
"Retorna uma cópia da *string* com caracteres maiúsculos convertidos para "
"minúsculos e vice-versa. Note que não é necessariamente verdade que ``s."
"swapcase().swapcase() == s``."

#: ../../library/stdtypes.rst:2241
msgid ""
"Return a titlecased version of the string where words start with an "
"uppercase character and the remaining characters are lowercase."
msgstr ""
"Retorna uma versão da *string* em que as palavras começam com um caractere "
"maiúsculo e os restantes caracteres são minúsculos."

#: ../../library/stdtypes.rst:2246
msgid ""
">>> 'Hello world'.title()\n"
"'Hello World'"
msgstr ""
">>> 'Hello world'.title()\n"
"'Hello World'"

#: ../../library/stdtypes.rst:2249 ../../library/stdtypes.rst:3469
msgid ""
"The algorithm uses a simple language-independent definition of a word as "
"groups of consecutive letters.  The definition works in many contexts but it "
"means that apostrophes in contractions and possessives form word boundaries, "
"which may not be the desired result::"
msgstr ""
"O algoritmo usa uma definição simples e independente de linguagem de uma "
"palavra como grupos de letras consecutivas. A definição funciona em muitos "
"contextos, mas significa que apóstrofos em contrações e possessivos formam "
"limites de palavras, o que pode não ser o resultado desejado:"

#: ../../library/stdtypes.rst:2254
msgid ""
">>> \"they're bill's friends from the UK\".title()\n"
"\"They'Re Bill'S Friends From The Uk\""
msgstr ""
">>> \"they're bill's friends from the UK\".title()\n"
"\"They'Re Bill'S Friends From The Uk\""

#: ../../library/stdtypes.rst:2257
msgid ""
"The :func:`string.capwords` function does not have this problem, as it "
"splits words on spaces only."
msgstr ""
"A função :func:`string.capwords` não tem este problema, pois divide as "
"palavras apenas por espaços."

#: ../../library/stdtypes.rst:2260
msgid ""
"Alternatively, a workaround for apostrophes can be constructed using regular "
"expressions::"
msgstr ""
"Alternativamente, uma solução alternativa para apóstrofos pode ser "
"construída usando expressões regulares:"

#: ../../library/stdtypes.rst:2263
msgid ""
">>> import re\n"
">>> def titlecase(s):\n"
"...     return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\",\n"
"...                   lambda mo: mo.group(0).capitalize(),\n"
"...                   s)\n"
"...\n"
">>> titlecase(\"they're bill's friends.\")\n"
"\"They're Bill's Friends.\""
msgstr ""
">>> import re\n"
">>> def titlecase(s):\n"
"...     return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\",\n"
"...                   lambda mo: mo.group(0).capitalize(),\n"
"...                   s)\n"
"...\n"
">>> titlecase(\"they're bill's friends.\")\n"
"\"They're Bill's Friends.\""

#: ../../library/stdtypes.rst:2275
msgid ""
"Return a copy of the string in which each character has been mapped through "
"the given translation table.  The table must be an object that implements "
"indexing via :meth:`~object.__getitem__`, typically a :term:`mapping` or :"
"term:`sequence`.  When indexed by a Unicode ordinal (an integer), the table "
"object can do any of the following: return a Unicode ordinal or a string, to "
"map the character to one or more other characters; return ``None``, to "
"delete the character from the return string; or raise a :exc:`LookupError` "
"exception, to map the character to itself."
msgstr ""
"Retorna uma cópia da *string* em que cada caractere foi mapeado através da "
"tabela de tradução fornecida. A tabela deve ser um objeto que implemente a "
"indexação via :meth:`~object.__getitem__`, tipicamente um :term:`mapeamento` "
"ou :term:`sequência`. Quando indexado por um ordinal Unicode (um inteiro), o "
"objeto tabela pode fazer uma das seguintes ações: retornar um ordinal "
"Unicode ou uma *string*, para mapear o caractere para um ou mais outros "
"caracteres; retornar ``None``, para remover o caractere da *string* de "
"retorno; ou lançar uma exceção :exc:`LookupError`, para mapear o caractere "
"para si mesmo."

#: ../../library/stdtypes.rst:2284
msgid ""
"You can use :meth:`str.maketrans` to create a translation map from character-"
"to-character mappings in different formats."
msgstr ""
"Pode usar :meth:`str.maketrans` para criar um mapa de tradução a partir de "
"mapeamentos de caractere para caractere em diferentes formatos."

#: ../../library/stdtypes.rst:2287
msgid ""
"See also the :mod:`codecs` module for a more flexible approach to custom "
"character mappings."
msgstr ""
"Consulte também o módulo :mod:`codecs` para uma abordagem mais flexível a "
"mapeamentos de caracteres personalizados."

#: ../../library/stdtypes.rst:2293
msgid ""
"Return a copy of the string with all the cased characters [4]_ converted to "
"uppercase.  Note that ``s.upper().isupper()`` might be ``False`` if ``s`` "
"contains uncased characters or if the Unicode category of the resulting "
"character(s) is not \"Lu\" (Letter, uppercase), but e.g. \"Lt\" (Letter, "
"titlecase)."
msgstr ""
"Retorna uma cópia da *string* com todos os caracteres com caixa [4]_ "
"convertidos para maiúsculas. Note que ``s.upper().isupper()`` pode ser "
"``False`` se ``s`` contiver caracteres sem caixa ou se a categoria Unicode "
"dos caracteres resultantes não for \"Lu\" (Letra, maiúscula), mas por "
"exemplo \"Lt\" (Letra, título)."

#: ../../library/stdtypes.rst:2299
msgid ""
"The uppercasing algorithm used is `described in section 3.13 'Default Case "
"Folding' of the Unicode Standard <https://www.unicode.org/versions/"
"Unicode15.0.0/ch03.pdf>`__."
msgstr ""

#: ../../library/stdtypes.rst:2306
msgid ""
"Return a copy of the string left filled with ASCII ``'0'`` digits to make a "
"string of length *width*. A leading sign prefix (``'+'``/``'-'``) is handled "
"by inserting the padding *after* the sign character rather than before. The "
"original string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""
"Retorna uma cópia da *string* preenchida à esquerda com dígitos ASCII "
"``'0'`` para criar uma *string* de comprimento *width*. Um prefixo de sinal "
"inicial (``'+'``/``'-'``) é tratado inserindo o preenchimento *depois* do "
"caractere de sinal em vez de antes. A *string* original é retornada se "
"*width* for menor ou igual a ``len(s)``."

#: ../../library/stdtypes.rst:2314
msgid ""
">>> \"42\".zfill(5)\n"
"'00042'\n"
">>> \"-42\".zfill(5)\n"
"'-0042'"
msgstr ""
">>> \"42\".zfill(5)\n"
"'00042'\n"
">>> \"-42\".zfill(5)\n"
"'-0042'"

#: ../../library/stdtypes.rst:2324
msgid "``printf``-style String Formatting"
msgstr "Formatação de *string* no estilo ``printf``"

#: ../../library/stdtypes.rst:2337
msgid ""
"The formatting operations described here exhibit a variety of quirks that "
"lead to a number of common errors (such as failing to display tuples and "
"dictionaries correctly).  Using the newer :ref:`formatted string literals <f-"
"strings>`, the :meth:`str.format` interface, or :ref:`template strings "
"<template-strings>` may help avoid these errors.  Each of these alternatives "
"provides their own trade-offs and benefits of simplicity, flexibility, and/"
"or extensibility."
msgstr ""

#: ../../library/stdtypes.rst:2345
msgid ""
"String objects have one unique built-in operation: the ``%`` operator "
"(modulo). This is also known as the string *formatting* or *interpolation* "
"operator. Given ``format % values`` (where *format* is a string), ``%`` "
"conversion specifications in *format* are replaced with zero or more "
"elements of *values*. The effect is similar to using the :c:func:`sprintf` "
"in the C language."
msgstr ""

#: ../../library/stdtypes.rst:2351
msgid ""
"If *format* requires a single argument, *values* may be a single non-tuple "
"object. [5]_  Otherwise, *values* must be a tuple with exactly the number of "
"items specified by the format string, or a single mapping object (for "
"example, a dictionary)."
msgstr ""
"Se *format* requer um único argumento, *values* pode ser um objeto não-"
"tuplo. [5]_ Caso contrário, *values* deve ser um tuplo com exatamente o "
"número de itens especificado pela *string* de formato, ou um único objeto de "
"mapeamento (por exemplo, um dicionário)."

#: ../../library/stdtypes.rst:2361 ../../library/stdtypes.rst:3580
msgid ""
"A conversion specifier contains two or more characters and has the following "
"components, which must occur in this order:"
msgstr ""
"Um especificador de conversão contém dois ou mais caracteres e tem os "
"seguintes componentes, que devem ocorrer nesta ordem:"

#: ../../library/stdtypes.rst:2364 ../../library/stdtypes.rst:3583
msgid "The ``'%'`` character, which marks the start of the specifier."
msgstr "O caractere ``'%'``, que marca o início do especificador."

#: ../../library/stdtypes.rst:2366 ../../library/stdtypes.rst:3585
msgid ""
"Mapping key (optional), consisting of a parenthesised sequence of characters "
"(for example, ``(somename)``)."
msgstr ""
"Chave de mapeamento (opcional), consistindo numa sequência de caracteres "
"entre parênteses (por exemplo, ``(somename)``)."

#: ../../library/stdtypes.rst:2369 ../../library/stdtypes.rst:3588
msgid ""
"Conversion flags (optional), which affect the result of some conversion "
"types."
msgstr ""
"Flags de conversão (opcionais), que afetam o resultado de alguns tipos de "
"conversão."

#: ../../library/stdtypes.rst:2372 ../../library/stdtypes.rst:3591
msgid ""
"Minimum field width (optional).  If specified as an ``'*'`` (asterisk), the "
"actual width is read from the next element of the tuple in *values*, and the "
"object to convert comes after the minimum field width and optional precision."
msgstr ""
"Largura mínima do campo (opcional). Se especificado como ``'*'`` "
"(asterisco), a largura real é lida do próximo elemento do tuplo em *values*, "
"e o objeto a converter vem depois da largura mínima do campo e da precisão "
"opcional."

#: ../../library/stdtypes.rst:2376 ../../library/stdtypes.rst:3595
msgid ""
"Precision (optional), given as a ``'.'`` (dot) followed by the precision.  "
"If specified as ``'*'`` (an asterisk), the actual precision is read from the "
"next element of the tuple in *values*, and the value to convert comes after "
"the precision."
msgstr ""
"Precisão (opcional), dada como um ``'.'`` (ponto) seguido da precisão. Se "
"especificado como ``'*'`` (um asterisco), a precisão real é lida do próximo "
"elemento do tuplo em *values*, e o valor a converter vem depois da precisão."

#: ../../library/stdtypes.rst:2381 ../../library/stdtypes.rst:3600
msgid "Length modifier (optional)."
msgstr "Modificador de comprimento (opcional)."

#: ../../library/stdtypes.rst:2383 ../../library/stdtypes.rst:3602
msgid "Conversion type."
msgstr "Tipo de conversão."

#: ../../library/stdtypes.rst:2385
msgid ""
"When the right argument is a dictionary (or other mapping type), then the "
"formats in the string *must* include a parenthesised mapping key into that "
"dictionary inserted immediately after the ``'%'`` character. The mapping key "
"selects the value to be formatted from the mapping.  For example:"
msgstr ""
"Quando o argumento da direita é um dicionário (ou outro tipo de mapeamento), "
"então os formatos na *string* *devem* incluir uma chave de mapeamento entre "
"parênteses para esse dicionário inserida imediatamente após o caractere "
"``'%'``. A chave de mapeamento seleciona o valor a ser formatado a partir do "
"mapeamento. Por exemplo:"

#: ../../library/stdtypes.rst:2394 ../../library/stdtypes.rst:3613
msgid ""
"In this case no ``*`` specifiers may occur in a format (since they require a "
"sequential parameter list)."
msgstr ""
"Neste caso, não podem ocorrer especificadores ``*`` num formato (uma vez que "
"requerem uma lista de parâmetros sequencial)."

#: ../../library/stdtypes.rst:2397 ../../library/stdtypes.rst:3616
msgid "The conversion flag characters are:"
msgstr "Os caracteres de flag de conversão são:"

#: ../../library/stdtypes.rst:2406 ../../library/stdtypes.rst:3625
msgid "Flag"
msgstr "Flag"

#: ../../library/stdtypes.rst:2408 ../../library/stdtypes.rst:3627
msgid "``'#'``"
msgstr "``'#'``"

#: ../../library/stdtypes.rst:2408 ../../library/stdtypes.rst:3627
msgid ""
"The value conversion will use the \"alternate form\" (where defined below)."
msgstr ""
"A conversão de valor usará a \"forma alternativa\" (onde definida abaixo)."

#: ../../library/stdtypes.rst:2411 ../../library/stdtypes.rst:3630
msgid "``'0'``"
msgstr "``'0'``"

#: ../../library/stdtypes.rst:2411 ../../library/stdtypes.rst:3630
msgid "The conversion will be zero padded for numeric values."
msgstr "A conversão será preenchida com zeros para valores numéricos."

#: ../../library/stdtypes.rst:2413 ../../library/stdtypes.rst:3632
msgid "``'-'``"
msgstr "``'-'``"

#: ../../library/stdtypes.rst:2413 ../../library/stdtypes.rst:3632
msgid ""
"The converted value is left adjusted (overrides the ``'0'`` conversion if "
"both are given)."
msgstr ""
"O valor convertido é alinhado à esquerda (substitui a conversão ``'0'`` se "
"ambos forem fornecidos)."

#: ../../library/stdtypes.rst:2416 ../../library/stdtypes.rst:3635
msgid "``' '``"
msgstr "``' '``"

#: ../../library/stdtypes.rst:2416 ../../library/stdtypes.rst:3635
msgid ""
"(a space) A blank should be left before a positive number (or empty string) "
"produced by a signed conversion."
msgstr ""
"(um espaço) Um espaço em branco deve ser deixado antes de um número positivo "
"(ou *string* vazia) produzido por uma conversão com sinal."

#: ../../library/stdtypes.rst:2419 ../../library/stdtypes.rst:3638
msgid "``'+'``"
msgstr "``'+'``"

#: ../../library/stdtypes.rst:2419 ../../library/stdtypes.rst:3638
msgid ""
"A sign character (``'+'`` or ``'-'``) will precede the conversion (overrides "
"a \"space\" flag)."
msgstr ""
"Um caractere de sinal (``'+'`` ou ``'-'``) precederá a conversão (substitui "
"uma flag de \"espaço\")."

#: ../../library/stdtypes.rst:2423 ../../library/stdtypes.rst:3642
msgid ""
"A length modifier (``h``, ``l``, or ``L``) may be present, but is ignored as "
"it is not necessary for Python -- so e.g. ``%ld`` is identical to ``%d``."
msgstr ""
"Um modificador de comprimento (``h``, ``l`` ou ``L``) pode estar presente, "
"mas é ignorado, uma vez que não é necessário para Python -- por exemplo, "
"``%ld`` é idêntico a ``%d``."

#: ../../library/stdtypes.rst:2426 ../../library/stdtypes.rst:3645
msgid "The conversion types are:"
msgstr "Os tipos de conversão são:"

#: ../../library/stdtypes.rst:2429 ../../library/stdtypes.rst:3648
msgid "Conversion"
msgstr "Conversão"

#: ../../library/stdtypes.rst:2431 ../../library/stdtypes.rst:3650
msgid "``'d'``"
msgstr "``'d'``"

#: ../../library/stdtypes.rst:2431 ../../library/stdtypes.rst:2433
#: ../../library/stdtypes.rst:3650 ../../library/stdtypes.rst:3652
msgid "Signed integer decimal."
msgstr "Decimal inteiro com sinal."

#: ../../library/stdtypes.rst:2433 ../../library/stdtypes.rst:3652
msgid "``'i'``"
msgstr "``'i'``"

#: ../../library/stdtypes.rst:2435 ../../library/stdtypes.rst:3654
msgid "``'o'``"
msgstr "``'o'``"

#: ../../library/stdtypes.rst:2435 ../../library/stdtypes.rst:3654
msgid "Signed octal value."
msgstr "Valor octal com sinal."

#: ../../library/stdtypes.rst:2437 ../../library/stdtypes.rst:3656
msgid "``'u'``"
msgstr "``'u'``"

#: ../../library/stdtypes.rst:2437 ../../library/stdtypes.rst:3656
msgid "Obsolete type -- it is identical to ``'d'``."
msgstr "Tipo obsoleto -- é idêntico a ``'d'``."

#: ../../library/stdtypes.rst:2439 ../../library/stdtypes.rst:3658
msgid "``'x'``"
msgstr "``'x'``"

#: ../../library/stdtypes.rst:2439 ../../library/stdtypes.rst:3658
msgid "Signed hexadecimal (lowercase)."
msgstr "Hexadecimal com sinal (minúsculas)."

#: ../../library/stdtypes.rst:2441 ../../library/stdtypes.rst:3660
msgid "``'X'``"
msgstr "``'X'``"

#: ../../library/stdtypes.rst:2441 ../../library/stdtypes.rst:3660
msgid "Signed hexadecimal (uppercase)."
msgstr "Hexadecimal com sinal (maiúsculas)."

#: ../../library/stdtypes.rst:2443 ../../library/stdtypes.rst:3662
msgid "``'e'``"
msgstr "``'e'``"

#: ../../library/stdtypes.rst:2443 ../../library/stdtypes.rst:3662
msgid "Floating-point exponential format (lowercase)."
msgstr "Formato exponencial de ponto flutuante (minúsculas)."

#: ../../library/stdtypes.rst:2445 ../../library/stdtypes.rst:3664
msgid "``'E'``"
msgstr "``'E'``"

#: ../../library/stdtypes.rst:2445 ../../library/stdtypes.rst:3664
msgid "Floating-point exponential format (uppercase)."
msgstr "Formato exponencial de ponto flutuante (maiúsculas)."

#: ../../library/stdtypes.rst:2447 ../../library/stdtypes.rst:3666
msgid "``'f'``"
msgstr "``'f'``"

#: ../../library/stdtypes.rst:2447 ../../library/stdtypes.rst:2449
#: ../../library/stdtypes.rst:3666 ../../library/stdtypes.rst:3668
msgid "Floating-point decimal format."
msgstr "Formato decimal de ponto flutuante."

#: ../../library/stdtypes.rst:2449 ../../library/stdtypes.rst:3668
msgid "``'F'``"
msgstr "``'F'``"

#: ../../library/stdtypes.rst:2451 ../../library/stdtypes.rst:3670
msgid "``'g'``"
msgstr "``'g'``"

#: ../../library/stdtypes.rst:2451 ../../library/stdtypes.rst:3670
msgid ""
"Floating-point format. Uses lowercase exponential format if exponent is less "
"than -4 or not less than precision, decimal format otherwise."
msgstr ""
"Formato de ponto flutuante. Usa formato exponencial minúsculo se o expoente "
"for menor que -4 ou não for menor que a precisão, formato decimal caso "
"contrário."

#: ../../library/stdtypes.rst:2455 ../../library/stdtypes.rst:3674
msgid "``'G'``"
msgstr "``'G'``"

#: ../../library/stdtypes.rst:2455 ../../library/stdtypes.rst:3674
msgid ""
"Floating-point format. Uses uppercase exponential format if exponent is less "
"than -4 or not less than precision, decimal format otherwise."
msgstr ""
"Formato de ponto flutuante. Usa formato exponencial maiúsculo se o expoente "
"for menor que -4 ou não for menor que a precisão, formato decimal caso "
"contrário."

#: ../../library/stdtypes.rst:2459 ../../library/stdtypes.rst:3678
msgid "``'c'``"
msgstr "``'c'``"

#: ../../library/stdtypes.rst:2459
msgid "Single character (accepts integer or single character string)."
msgstr "Caractere único (aceita inteiro ou *string* de caractere único)."

#: ../../library/stdtypes.rst:2462 ../../library/stdtypes.rst:3691
msgid "``'r'``"
msgstr "``'r'``"

#: ../../library/stdtypes.rst:2462
msgid "String (converts any Python object using :func:`repr`)."
msgstr "*String* (converte qualquer objeto Python usando :func:`repr`)."

#: ../../library/stdtypes.rst:2465 ../../library/stdtypes.rst:3685
msgid "``'s'``"
msgstr "``'s'``"

#: ../../library/stdtypes.rst:2465
msgid "String (converts any Python object using :func:`str`)."
msgstr "*String* (converte qualquer objeto Python usando :func:`str`)."

#: ../../library/stdtypes.rst:2468 ../../library/stdtypes.rst:3688
msgid "``'a'``"
msgstr "``'a'``"

#: ../../library/stdtypes.rst:2468
msgid "String (converts any Python object using :func:`ascii`)."
msgstr "*String* (converte qualquer objeto Python usando :func:`ascii`)."

#: ../../library/stdtypes.rst:2471 ../../library/stdtypes.rst:3694
msgid "``'%'``"
msgstr "``'%'``"

#: ../../library/stdtypes.rst:2471 ../../library/stdtypes.rst:3694
msgid "No argument is converted, results in a ``'%'`` character in the result."
msgstr ""
"Nenhum argumento é convertido, resulta num caractere ``'%'`` no resultado."

#: ../../library/stdtypes.rst:2478 ../../library/stdtypes.rst:3701
msgid ""
"The alternate form causes a leading octal specifier (``'0o'``) to be "
"inserted before the first digit."
msgstr ""
"A forma alternativa faz com que um especificador octal inicial (``'0o'``) "
"seja inserido antes do primeiro dígito."

#: ../../library/stdtypes.rst:2482 ../../library/stdtypes.rst:3705
msgid ""
"The alternate form causes a leading ``'0x'`` or ``'0X'`` (depending on "
"whether the ``'x'`` or ``'X'`` format was used) to be inserted before the "
"first digit."
msgstr ""
"A forma alternativa faz com que um ``'0x'`` ou ``'0X'`` inicial (dependendo "
"de se o formato ``'x'`` ou ``'X'`` foi usado) seja inserido antes do "
"primeiro dígito."

#: ../../library/stdtypes.rst:2486 ../../library/stdtypes.rst:3709
msgid ""
"The alternate form causes the result to always contain a decimal point, even "
"if no digits follow it."
msgstr ""
"A forma alternativa faz com que o resultado contenha sempre um ponto "
"decimal, mesmo que não haja dígitos a seguir."

#: ../../library/stdtypes.rst:2489 ../../library/stdtypes.rst:3712
msgid ""
"The precision determines the number of digits after the decimal point and "
"defaults to 6."
msgstr ""
"A precisão determina o número de dígitos após o ponto decimal e o valor "
"predefinido é 6."

#: ../../library/stdtypes.rst:2493 ../../library/stdtypes.rst:3716
msgid ""
"The alternate form causes the result to always contain a decimal point, and "
"trailing zeroes are not removed as they would otherwise be."
msgstr ""
"A forma alternativa faz com que o resultado contenha sempre um ponto "
"decimal, e os zeros finais não são removidos como seriam de outra forma."

#: ../../library/stdtypes.rst:2496 ../../library/stdtypes.rst:3719
msgid ""
"The precision determines the number of significant digits before and after "
"the decimal point and defaults to 6."
msgstr ""
"A precisão determina o número de dígitos significativos antes e depois do "
"ponto decimal e o valor predefinido é 6."

#: ../../library/stdtypes.rst:2500 ../../library/stdtypes.rst:3723
msgid "If precision is ``N``, the output is truncated to ``N`` characters."
msgstr "Se a precisão for ``N``, a saída é truncada para ``N`` caracteres."

#: ../../library/stdtypes.rst:2503 ../../library/stdtypes.rst:3732
msgid "See :pep:`237`."
msgstr "Consulte :pep:`237`."

#: ../../library/stdtypes.rst:2505
msgid ""
"Since Python strings have an explicit length, ``%s`` conversions do not "
"assume that ``'\\0'`` is the end of the string."
msgstr ""
"Como as *strings* Python têm um comprimento explícito, as conversões ``%s`` "
"não assumem que ``'\\0'`` é o fim da *string*."

#: ../../library/stdtypes.rst:2510
msgid ""
"``%f`` conversions for numbers whose absolute value is over 1e50 are no "
"longer replaced by ``%g`` conversions."
msgstr ""
"As conversões ``%f`` para números cujo valor absoluto é superior a 1e50 já "
"não são substituídas por conversões ``%g``."

#: ../../library/stdtypes.rst:2521
msgid ""
"Binary Sequence Types --- :class:`bytes`, :class:`bytearray`, :class:"
"`memoryview`"
msgstr ""
"Tipos de sequências binárias --- :class:`bytes`, :class:`bytearray`, :class:"
"`memoryview`"

#: ../../library/stdtypes.rst:2529
msgid ""
"The core built-in types for manipulating binary data are :class:`bytes` and :"
"class:`bytearray`. They are supported by :class:`memoryview` which uses the :"
"ref:`buffer protocol <bufferobjects>` to access the memory of other binary "
"objects without needing to make a copy."
msgstr ""
"Os tipos incorporados principais para manipular dados binários são :class:"
"`bytes` e :class:`bytearray`. Estes são suportados por :class:`memoryview`, "
"que usa o :ref:`protocolo de buffer <bufferobjects>` para aceder à memória "
"de outros objetos binários sem necessidade de fazer uma cópia."

#: ../../library/stdtypes.rst:2534
msgid ""
"The :mod:`array` module supports efficient storage of basic data types like "
"32-bit integers and IEEE754 double-precision floating values."
msgstr ""
"O módulo :mod:`array` suporta armazenamento eficiente de tipos de dados "
"básicos, como inteiros de 32 bits e valores de ponto flutuante de dupla "
"precisão IEEE754."

#: ../../library/stdtypes.rst:2540
msgid "Bytes Objects"
msgstr "Objetos bytes"

#: ../../library/stdtypes.rst:2544
msgid ""
"Bytes objects are immutable sequences of single bytes. Since many major "
"binary protocols are based on the ASCII text encoding, bytes objects offer "
"several methods that are only valid when working with ASCII compatible data "
"and are closely related to string objects in a variety of other ways."
msgstr ""
"Os objetos bytes são sequências imutáveis de bytes individuais. Uma vez que "
"muitos protocolos binários principais são baseados na codificação de texto "
"ASCII, os objetos bytes oferecem vários métodos que são válidos apenas ao "
"trabalhar com dados compatíveis com ASCII e estão intimamente relacionados "
"com objetos *string* de várias outras formas."

#: ../../library/stdtypes.rst:2551
msgid ""
"Firstly, the syntax for bytes literals is largely the same as that for "
"string literals, except that a ``b`` prefix is added:"
msgstr ""
"Primeiramente, a sintaxe para literais bytes é em grande parte a mesma que "
"para literais *string*, exceto que é adicionado um prefixo ``b``:"

#: ../../library/stdtypes.rst:2554
msgid "Single quotes: ``b'still allows embedded \"double\" quotes'``"
msgstr "Aspas simples: ``b'still allows embedded \"double\" quotes'``"

#: ../../library/stdtypes.rst:2555
msgid "Double quotes: ``b\"still allows embedded 'single' quotes\"``"
msgstr "Aspas duplas: ``b\"still allows embedded 'single' quotes\"``"

#: ../../library/stdtypes.rst:2556
msgid ""
"Triple quoted: ``b'''3 single quotes'''``, ``b\"\"\"3 double quotes\"\"\"``"
msgstr ""
"Aspas triplas: ``b'''3 single quotes'''``, ``b\"\"\"3 double quotes\"\"\"``"

#: ../../library/stdtypes.rst:2558
msgid ""
"Only ASCII characters are permitted in bytes literals (regardless of the "
"declared source code encoding). Any binary values over 127 must be entered "
"into bytes literals using the appropriate escape sequence."
msgstr ""
"Apenas caracteres ASCII são permitidos em literais bytes (independentemente "
"da codificação declarada do código-fonte). Quaisquer valores binários acima "
"de 127 devem ser inseridos em literais bytes usando a sequência de escape "
"apropriada."

#: ../../library/stdtypes.rst:2562
msgid ""
"As with string literals, bytes literals may also use a ``r`` prefix to "
"disable processing of escape sequences. See :ref:`strings` for more about "
"the various forms of bytes literal, including supported escape sequences."
msgstr ""
"Tal como com literais *string*, literais bytes também podem usar um prefixo "
"``r`` para desativar o processamento de sequências de escape. Consulte :ref:"
"`strings` para mais informações sobre as várias formas de literais bytes, "
"incluindo sequências de escape suportadas."

#: ../../library/stdtypes.rst:2566
msgid ""
"While bytes literals and representations are based on ASCII text, bytes "
"objects actually behave like immutable sequences of integers, with each "
"value in the sequence restricted such that ``0 <= x < 256`` (attempts to "
"violate this restriction will trigger :exc:`ValueError`). This is done "
"deliberately to emphasise that while many binary formats include ASCII based "
"elements and can be usefully manipulated with some text-oriented algorithms, "
"this is not generally the case for arbitrary binary data (blindly applying "
"text processing algorithms to binary data formats that are not ASCII "
"compatible will usually lead to data corruption)."
msgstr ""
"Embora literais e representações bytes sejam baseadas em texto ASCII, os "
"objetos bytes comportam-se na verdade como sequências imutáveis de inteiros, "
"com cada valor na sequência restrito de modo que ``0 <= x < 256`` "
"(tentativas de violar esta restrição irão desencadear :exc:`ValueError`). "
"Isto é feito deliberadamente para enfatizar que, embora muitos formatos "
"binários incluam elementos baseados em ASCII e possam ser manipulados de "
"forma útil com alguns algoritmos orientados a texto, este não é geralmente o "
"caso para dados binários arbitrários (aplicar cegamente algoritmos de "
"processamento de texto a formatos de dados binários que não são compatíveis "
"com ASCII geralmente levará à corrupção de dados)."

#: ../../library/stdtypes.rst:2576
msgid ""
"In addition to the literal forms, bytes objects can be created in a number "
"of other ways:"
msgstr ""
"Além das formas literais, os objetos bytes podem ser criados de várias "
"outras formas:"

#: ../../library/stdtypes.rst:2579
msgid "A zero-filled bytes object of a specified length: ``bytes(10)``"
msgstr ""
"Um objeto bytes preenchido com zeros de um comprimento especificado: "
"``bytes(10)``"

#: ../../library/stdtypes.rst:2580
msgid "From an iterable of integers: ``bytes(range(20))``"
msgstr "A partir de um iterável de inteiros: ``bytes(range(20))``"

#: ../../library/stdtypes.rst:2581
msgid "Copying existing binary data via the buffer protocol:  ``bytes(obj)``"
msgstr ""
"Copiando dados binários existentes através do protocolo de buffer: "
"``bytes(obj)``"

#: ../../library/stdtypes.rst:2583
msgid "Also see the :ref:`bytes <func-bytes>` built-in."
msgstr "Consulte também a função incorporada :ref:`bytes <func-bytes>`...."

#: ../../library/stdtypes.rst:2585
msgid ""
"Since 2 hexadecimal digits correspond precisely to a single byte, "
"hexadecimal numbers are a commonly used format for describing binary data. "
"Accordingly, the bytes type has an additional class method to read data in "
"that format:"
msgstr ""
"Uma vez que 2 dígitos hexadecimais correspondem precisamente a um único "
"byte, números hexadecimais são um formato comumente usado para descrever "
"dados binários. Consequentemente, o tipo bytes tem um método de classe "
"adicional para ler dados nesse formato:"

#: ../../library/stdtypes.rst:2591
msgid ""
"This :class:`bytes` class method returns a bytes object, decoding the given "
"string object.  The string must contain two hexadecimal digits per byte, "
"with ASCII whitespace being ignored."
msgstr ""
"Este método de classe :class:`bytes` retorna um objeto bytes, decodificando "
"o objeto *string* fornecido. A *string* deve conter dois dígitos "
"hexadecimais por byte, com espaços em branco ASCII sendo ignorados."

#: ../../library/stdtypes.rst:2598
msgid ""
":meth:`bytes.fromhex` now skips all ASCII whitespace in the string, not just "
"spaces."
msgstr ""
":meth:`bytes.fromhex` agora ignora todos os espaços em branco ASCII na "
"*string*, não apenas espaços."

#: ../../library/stdtypes.rst:2602
msgid ""
"A reverse conversion function exists to transform a bytes object into its "
"hexadecimal representation."
msgstr ""
"Existe uma função de conversão inversa para transformar um objeto bytes na "
"sua representação hexadecimal."

#: ../../library/stdtypes.rst:2607 ../../library/stdtypes.rst:2692
msgid ""
"Return a string object containing two hexadecimal digits for each byte in "
"the instance."
msgstr ""
"Retorna um objeto *string* contendo dois dígitos hexadecimais para cada byte "
"na instância."

#: ../../library/stdtypes.rst:2613
msgid ""
"If you want to make the hex string easier to read, you can specify a single "
"character separator *sep* parameter to include in the output. By default, "
"this separator will be included between each byte. A second optional "
"*bytes_per_sep* parameter controls the spacing. Positive values calculate "
"the separator position from the right, negative values from the left."
msgstr ""
"Se quiser tornar a *string* hexadecimal mais fácil de ler, pode especificar "
"um parâmetro de separador de caractere único *sep* para incluir na saída. "
"Por predefinição, este separador será incluído entre cada byte. Um segundo "
"parâmetro opcional *bytes_per_sep* controla o espaçamento. Valores positivos "
"calculam a posição do separador a partir da direita, valores negativos a "
"partir da esquerda."

#: ../../library/stdtypes.rst:2630
msgid ""
":meth:`bytes.hex` now supports optional *sep* and *bytes_per_sep* parameters "
"to insert separators between bytes in the hex output."
msgstr ""
":meth:`bytes.hex` agora suporta parâmetros opcionais *sep* e *bytes_per_sep* "
"para inserir separadores entre bytes na saída hexadecimal."

#: ../../library/stdtypes.rst:2634
msgid ""
"Since bytes objects are sequences of integers (akin to a tuple), for a bytes "
"object *b*, ``b[0]`` will be an integer, while ``b[0:1]`` will be a bytes "
"object of length 1.  (This contrasts with text strings, where both indexing "
"and slicing will produce a string of length 1)"
msgstr ""
"Uma vez que os objetos bytes são sequências de inteiros (semelhantes a um "
"tuplo), para um objeto bytes *b*, ``b[0]`` será um inteiro, enquanto "
"``b[0:1]`` será um objeto bytes de comprimento 1. (Isto contrasta com "
"*strings* de texto, onde tanto a indexação como a fatiação produzirão uma "
"*string* de comprimento 1)"

#: ../../library/stdtypes.rst:2639
msgid ""
"The representation of bytes objects uses the literal format (``b'...'``) "
"since it is often more useful than e.g. ``bytes([46, 46, 46])``.  You can "
"always convert a bytes object into a list of integers using ``list(b)``."
msgstr ""
"A representação de objetos bytes usa o formato literal (``b'...'``), uma vez "
"que é frequentemente mais útil do que, por exemplo, ``bytes([46, 46, 46])``. "
"Pode sempre converter um objeto bytes numa lista de inteiros usando "
"``list(b)``."

#: ../../library/stdtypes.rst:2647
msgid "Bytearray Objects"
msgstr "Objetos bytearray"

#: ../../library/stdtypes.rst:2651
msgid ""
":class:`bytearray` objects are a mutable counterpart to :class:`bytes` "
"objects."
msgstr ""
"Os objetos :class:`bytearray` são uma contraparte mutável dos objetos :class:"
"`bytes`."

#: ../../library/stdtypes.rst:2656
msgid ""
"There is no dedicated literal syntax for bytearray objects, instead they are "
"always created by calling the constructor:"
msgstr ""
"Não existe uma sintaxe literal dedicada para objetos bytearray; em vez "
"disso, estes são sempre criados chamando o construtor:"

#: ../../library/stdtypes.rst:2659
msgid "Creating an empty instance: ``bytearray()``"
msgstr "Criar uma instância vazia: ``bytearray()``"

#: ../../library/stdtypes.rst:2660
msgid "Creating a zero-filled instance with a given length: ``bytearray(10)``"
msgstr ""
"Criar uma instância preenchida com zeros de um comprimento dado: "
"``bytearray(10)``"

#: ../../library/stdtypes.rst:2661
msgid "From an iterable of integers: ``bytearray(range(20))``"
msgstr "A partir de um iterável de inteiros: ``bytearray(range(20))``"

#: ../../library/stdtypes.rst:2662
msgid ""
"Copying existing binary data via the buffer protocol:  ``bytearray(b'Hi!')``"
msgstr ""
"Copiar dados binários existentes através do protocolo de buffer: "
"``bytearray(b'Hi!')``"

#: ../../library/stdtypes.rst:2664
msgid ""
"As bytearray objects are mutable, they support the :ref:`mutable <typesseq-"
"mutable>` sequence operations in addition to the common bytes and bytearray "
"operations described in :ref:`bytes-methods`."
msgstr ""
"Como os objetos bytearray são mutáveis, suportam as operações de sequência :"
"ref:`mutável <typesseq-mutable>` além das operações comuns de bytes e "
"bytearray descritas em :ref:`bytes-methods`."

#: ../../library/stdtypes.rst:2668
msgid "Also see the :ref:`bytearray <func-bytearray>` built-in."
msgstr ""
"Consulte também a função incorporada :ref:`bytearray <func-bytearray>`."

#: ../../library/stdtypes.rst:2670
msgid ""
"Since 2 hexadecimal digits correspond precisely to a single byte, "
"hexadecimal numbers are a commonly used format for describing binary data. "
"Accordingly, the bytearray type has an additional class method to read data "
"in that format:"
msgstr ""

#: ../../library/stdtypes.rst:2676
msgid ""
"This :class:`bytearray` class method returns bytearray object, decoding the "
"given string object.  The string must contain two hexadecimal digits per "
"byte, with ASCII whitespace being ignored."
msgstr ""

#: ../../library/stdtypes.rst:2683
msgid ""
":meth:`bytearray.fromhex` now skips all ASCII whitespace in the string, not "
"just spaces."
msgstr ""

#: ../../library/stdtypes.rst:2687
msgid ""
"A reverse conversion function exists to transform a bytearray object into "
"its hexadecimal representation."
msgstr ""

#: ../../library/stdtypes.rst:2700
msgid ""
"Similar to :meth:`bytes.hex`, :meth:`bytearray.hex` now supports optional "
"*sep* and *bytes_per_sep* parameters to insert separators between bytes in "
"the hex output."
msgstr ""

#: ../../library/stdtypes.rst:2705
msgid ""
"Since bytearray objects are sequences of integers (akin to a list), for a "
"bytearray object *b*, ``b[0]`` will be an integer, while ``b[0:1]`` will be "
"a bytearray object of length 1.  (This contrasts with text strings, where "
"both indexing and slicing will produce a string of length 1)"
msgstr ""

#: ../../library/stdtypes.rst:2710
msgid ""
"The representation of bytearray objects uses the bytes literal format "
"(``bytearray(b'...')``) since it is often more useful than e.g. "
"``bytearray([46, 46, 46])``.  You can always convert a bytearray object into "
"a list of integers using ``list(b)``."
msgstr ""

#: ../../library/stdtypes.rst:2719
msgid "Bytes and Bytearray Operations"
msgstr ""

#: ../../library/stdtypes.rst:2724
msgid ""
"Both bytes and bytearray objects support the :ref:`common <typesseq-common>` "
"sequence operations. They interoperate not just with operands of the same "
"type, but with any :term:`bytes-like object`. Due to this flexibility, they "
"can be freely mixed in operations without causing errors. However, the "
"return type of the result may depend on the order of operands."
msgstr ""

#: ../../library/stdtypes.rst:2732
msgid ""
"The methods on bytes and bytearray objects don't accept strings as their "
"arguments, just as the methods on strings don't accept bytes as their "
"arguments.  For example, you have to write::"
msgstr ""

#: ../../library/stdtypes.rst:2736
msgid ""
"a = \"abc\"\n"
"b = a.replace(\"a\", \"f\")"
msgstr ""

#: ../../library/stdtypes.rst:2739
msgid "and::"
msgstr "e:"

#: ../../library/stdtypes.rst:2741
msgid ""
"a = b\"abc\"\n"
"b = a.replace(b\"a\", b\"f\")"
msgstr ""

#: ../../library/stdtypes.rst:2744
msgid ""
"Some bytes and bytearray operations assume the use of ASCII compatible "
"binary formats, and hence should be avoided when working with arbitrary "
"binary data. These restrictions are covered below."
msgstr ""

#: ../../library/stdtypes.rst:2749
msgid ""
"Using these ASCII based operations to manipulate binary data that is not "
"stored in an ASCII based format may lead to data corruption."
msgstr ""

#: ../../library/stdtypes.rst:2752
msgid ""
"The following methods on bytes and bytearray objects can be used with "
"arbitrary binary data."
msgstr ""

#: ../../library/stdtypes.rst:2758
msgid ""
"Return the number of non-overlapping occurrences of subsequence *sub* in the "
"range [*start*, *end*].  Optional arguments *start* and *end* are "
"interpreted as in slice notation."
msgstr ""

#: ../../library/stdtypes.rst:2762 ../../library/stdtypes.rst:2867
#: ../../library/stdtypes.rst:2889 ../../library/stdtypes.rst:2955
#: ../../library/stdtypes.rst:2968
msgid ""
"The subsequence to search for may be any :term:`bytes-like object` or an "
"integer in the range 0 to 255."
msgstr ""

#: ../../library/stdtypes.rst:2765
msgid ""
"If *sub* is empty, returns the number of empty slices between characters "
"which is the length of the bytes object plus one."
msgstr ""

#: ../../library/stdtypes.rst:2768 ../../library/stdtypes.rst:2879
#: ../../library/stdtypes.rst:2892 ../../library/stdtypes.rst:2958
#: ../../library/stdtypes.rst:2971
msgid "Also accept an integer in the range 0 to 255 as the subsequence."
msgstr ""

#: ../../library/stdtypes.rst:2775
msgid ""
"If the binary data starts with the *prefix* string, return "
"``bytes[len(prefix):]``. Otherwise, return a copy of the original binary "
"data::"
msgstr ""

#: ../../library/stdtypes.rst:2779
msgid ""
">>> b'TestHook'.removeprefix(b'Test')\n"
"b'Hook'\n"
">>> b'BaseTestCase'.removeprefix(b'Test')\n"
"b'BaseTestCase'"
msgstr ""

#: ../../library/stdtypes.rst:2784
msgid "The *prefix* may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:2788 ../../library/stdtypes.rst:2810
#: ../../library/stdtypes.rst:2943 ../../library/stdtypes.rst:3036
#: ../../library/stdtypes.rst:3050 ../../library/stdtypes.rst:3081
#: ../../library/stdtypes.rst:3095 ../../library/stdtypes.rst:3137
#: ../../library/stdtypes.rst:3208 ../../library/stdtypes.rst:3226
#: ../../library/stdtypes.rst:3254 ../../library/stdtypes.rst:3393
#: ../../library/stdtypes.rst:3448 ../../library/stdtypes.rst:3491
#: ../../library/stdtypes.rst:3512 ../../library/stdtypes.rst:3534
#: ../../library/stdtypes.rst:3736
msgid ""
"The bytearray version of this method does *not* operate in place - it always "
"produces a new object, even if no changes were made."
msgstr ""

#: ../../library/stdtypes.rst:2797
msgid ""
"If the binary data ends with the *suffix* string and that *suffix* is not "
"empty, return ``bytes[:-len(suffix)]``.  Otherwise, return a copy of the "
"original binary data::"
msgstr ""

#: ../../library/stdtypes.rst:2801
msgid ""
">>> b'MiscTests'.removesuffix(b'Tests')\n"
"b'Misc'\n"
">>> b'TmpDirMixin'.removesuffix(b'Tests')\n"
"b'TmpDirMixin'"
msgstr ""

#: ../../library/stdtypes.rst:2806
msgid "The *suffix* may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:2819
msgid "Return the bytes decoded to a :class:`str`."
msgstr ""

#: ../../library/stdtypes.rst:2824
msgid ""
"*errors* controls how decoding errors are handled. If ``'strict'`` (the "
"default), a :exc:`UnicodeError` exception is raised. Other possible values "
"are ``'ignore'``, ``'replace'``, and any other name registered via :func:"
"`codecs.register_error`. See :ref:`error-handlers` for details."
msgstr ""

#: ../../library/stdtypes.rst:2830
msgid ""
"For performance reasons, the value of *errors* is not checked for validity "
"unless a decoding error actually occurs, :ref:`devmode` is enabled or a :ref:"
"`debug build <debug-build>` is used."
msgstr ""

#: ../../library/stdtypes.rst:2836
msgid ""
"Passing the *encoding* argument to :class:`str` allows decoding any :term:"
"`bytes-like object` directly, without needing to make a temporary :class:`!"
"bytes` or :class:`!bytearray` object."
msgstr ""

#: ../../library/stdtypes.rst:2851
msgid ""
"Return ``True`` if the binary data ends with the specified *suffix*, "
"otherwise return ``False``.  *suffix* can also be a tuple of suffixes to "
"look for.  With optional *start*, test beginning at that position.  With "
"optional *end*, stop comparing at that position."
msgstr ""

#: ../../library/stdtypes.rst:2856
msgid "The suffix(es) to search for may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:2862
msgid ""
"Return the lowest index in the data where the subsequence *sub* is found, "
"such that *sub* is contained in the slice ``s[start:end]``.  Optional "
"arguments *start* and *end* are interpreted as in slice notation.  Return "
"``-1`` if *sub* is not found."
msgstr ""

#: ../../library/stdtypes.rst:2872
msgid ""
"The :meth:`~bytes.find` method should be used only if you need to know the "
"position of *sub*.  To check if *sub* is a substring or not, use the :"
"keyword:`in` operator::"
msgstr ""

#: ../../library/stdtypes.rst:2876
msgid ""
">>> b'Py' in b'Python'\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:2886
msgid ""
"Like :meth:`~bytes.find`, but raise :exc:`ValueError` when the subsequence "
"is not found."
msgstr ""

#: ../../library/stdtypes.rst:2899
msgid ""
"Return a bytes or bytearray object which is the concatenation of the binary "
"data sequences in *iterable*.  A :exc:`TypeError` will be raised if there "
"are any values in *iterable* that are not :term:`bytes-like objects <bytes-"
"like object>`, including :class:`str` objects.  The separator between "
"elements is the contents of the bytes or bytearray object providing this "
"method."
msgstr ""

#: ../../library/stdtypes.rst:2910
msgid ""
"This static method returns a translation table usable for :meth:`bytes."
"translate` that will map each character in *from* into the character at the "
"same position in *to*; *from* and *to* must both be :term:`bytes-like "
"objects <bytes-like object>` and have the same length."
msgstr ""

#: ../../library/stdtypes.rst:2921
msgid ""
"Split the sequence at the first occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself or its "
"bytearray copy, and the part after the separator. If the separator is not "
"found, return a 3-tuple containing a copy of the original sequence, followed "
"by two empty bytes or bytearray objects."
msgstr ""

#: ../../library/stdtypes.rst:2928 ../../library/stdtypes.rst:2985
msgid "The separator to search for may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:2934
msgid ""
"Return a copy of the sequence with all occurrences of subsequence *old* "
"replaced by *new*.  If the optional argument *count* is given, only the "
"first *count* occurrences are replaced."
msgstr ""

#: ../../library/stdtypes.rst:2938
msgid ""
"The subsequence to search for and its replacement may be any :term:`bytes-"
"like object`."
msgstr ""

#: ../../library/stdtypes.rst:2950
msgid ""
"Return the highest index in the sequence where the subsequence *sub* is "
"found, such that *sub* is contained within ``s[start:end]``.  Optional "
"arguments *start* and *end* are interpreted as in slice notation. Return "
"``-1`` on failure."
msgstr ""

#: ../../library/stdtypes.rst:2965
msgid ""
"Like :meth:`~bytes.rfind` but raises :exc:`ValueError` when the subsequence "
"*sub* is not found."
msgstr ""

#: ../../library/stdtypes.rst:2978
msgid ""
"Split the sequence at the last occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself or its "
"bytearray copy, and the part after the separator. If the separator is not "
"found, return a 3-tuple containing two empty bytes or bytearray objects, "
"followed by a copy of the original sequence."
msgstr ""

#: ../../library/stdtypes.rst:2991
msgid ""
"Return ``True`` if the binary data starts with the specified *prefix*, "
"otherwise return ``False``.  *prefix* can also be a tuple of prefixes to "
"look for.  With optional *start*, test beginning at that position.  With "
"optional *end*, stop comparing at that position."
msgstr ""

#: ../../library/stdtypes.rst:2996
msgid "The prefix(es) to search for may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:3002
msgid ""
"Return a copy of the bytes or bytearray object where all bytes occurring in "
"the optional argument *delete* are removed, and the remaining bytes have "
"been mapped through the given translation table, which must be a bytes "
"object of length 256."
msgstr ""

#: ../../library/stdtypes.rst:3007
msgid ""
"You can use the :func:`bytes.maketrans` method to create a translation table."
msgstr ""

#: ../../library/stdtypes.rst:3010
msgid ""
"Set the *table* argument to ``None`` for translations that only delete "
"characters::"
msgstr ""

#: ../../library/stdtypes.rst:3013
msgid ""
">>> b'read this short text'.translate(None, b'aeiou')\n"
"b'rd ths shrt txt'"
msgstr ""

#: ../../library/stdtypes.rst:3016
msgid "*delete* is now supported as a keyword argument."
msgstr ""

#: ../../library/stdtypes.rst:3020
msgid ""
"The following methods on bytes and bytearray objects have default behaviours "
"that assume the use of ASCII compatible binary formats, but can still be "
"used with arbitrary binary data by passing appropriate arguments. Note that "
"all of the bytearray methods in this section do *not* operate in place, and "
"instead produce new objects."
msgstr ""

#: ../../library/stdtypes.rst:3029
msgid ""
"Return a copy of the object centered in a sequence of length *width*. "
"Padding is done using the specified *fillbyte* (default is an ASCII space). "
"For :class:`bytes` objects, the original sequence is returned if *width* is "
"less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:3043
msgid ""
"Return a copy of the object left justified in a sequence of length *width*. "
"Padding is done using the specified *fillbyte* (default is an ASCII space). "
"For :class:`bytes` objects, the original sequence is returned if *width* is "
"less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:3057
msgid ""
"Return a copy of the sequence with specified leading bytes removed.  The "
"*chars* argument is a binary sequence specifying the set of byte values to "
"be removed - the name refers to the fact this method is usually used with "
"ASCII characters.  If omitted or ``None``, the *chars* argument defaults to "
"removing ASCII whitespace.  The *chars* argument is not a prefix; rather, "
"all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:3064
msgid ""
">>> b'   spacious   '.lstrip()\n"
"b'spacious   '\n"
">>> b'www.example.com'.lstrip(b'cmowz.')\n"
"b'example.com'"
msgstr ""

#: ../../library/stdtypes.rst:3069
msgid ""
"The binary sequence of byte values to remove may be any :term:`bytes-like "
"object`. See :meth:`~bytes.removeprefix` for a method that will remove a "
"single prefix string rather than all of a set of characters.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:3074
msgid ""
">>> b'Arthur: three!'.lstrip(b'Arthur: ')\n"
"b'ee!'\n"
">>> b'Arthur: three!'.removeprefix(b'Arthur: ')\n"
"b'three!'"
msgstr ""

#: ../../library/stdtypes.rst:3088
msgid ""
"Return a copy of the object right justified in a sequence of length *width*. "
"Padding is done using the specified *fillbyte* (default is an ASCII space). "
"For :class:`bytes` objects, the original sequence is returned if *width* is "
"less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:3102
msgid ""
"Split the binary sequence into subsequences of the same type, using *sep* as "
"the delimiter string. If *maxsplit* is given, at most *maxsplit* splits are "
"done, the *rightmost* ones.  If *sep* is not specified or ``None``, any "
"subsequence consisting solely of ASCII whitespace is a separator. Except for "
"splitting from the right, :meth:`rsplit` behaves like :meth:`split` which is "
"described in detail below."
msgstr ""

#: ../../library/stdtypes.rst:3113
msgid ""
"Return a copy of the sequence with specified trailing bytes removed.  The "
"*chars* argument is a binary sequence specifying the set of byte values to "
"be removed - the name refers to the fact this method is usually used with "
"ASCII characters.  If omitted or ``None``, the *chars* argument defaults to "
"removing ASCII whitespace.  The *chars* argument is not a suffix; rather, "
"all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:3120
msgid ""
">>> b'   spacious   '.rstrip()\n"
"b'   spacious'\n"
">>> b'mississippi'.rstrip(b'ipz')\n"
"b'mississ'"
msgstr ""

#: ../../library/stdtypes.rst:3125
msgid ""
"The binary sequence of byte values to remove may be any :term:`bytes-like "
"object`. See :meth:`~bytes.removesuffix` for a method that will remove a "
"single suffix string rather than all of a set of characters.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:3130
msgid ""
">>> b'Monty Python'.rstrip(b' Python')\n"
"b'M'\n"
">>> b'Monty Python'.removesuffix(b' Python')\n"
"b'Monty'"
msgstr ""

#: ../../library/stdtypes.rst:3144
msgid ""
"Split the binary sequence into subsequences of the same type, using *sep* as "
"the delimiter string. If *maxsplit* is given and non-negative, at most "
"*maxsplit* splits are done (thus, the list will have at most ``maxsplit+1`` "
"elements).  If *maxsplit* is not specified or is ``-1``, then there is no "
"limit on the number of splits (all possible splits are made)."
msgstr ""

#: ../../library/stdtypes.rst:3150
msgid ""
"If *sep* is given, consecutive delimiters are not grouped together and are "
"deemed to delimit empty subsequences (for example, ``b'1,,2'.split(b',')`` "
"returns ``[b'1', b'', b'2']``).  The *sep* argument may consist of a "
"multibyte sequence as a single delimiter. Splitting an empty sequence with a "
"specified separator returns ``[b'']`` or ``[bytearray(b'')]`` depending on "
"the type of object being split.  The *sep* argument may be any :term:`bytes-"
"like object`."
msgstr ""

#: ../../library/stdtypes.rst:3160
msgid ""
">>> b'1,2,3'.split(b',')\n"
"[b'1', b'2', b'3']\n"
">>> b'1,2,3'.split(b',', maxsplit=1)\n"
"[b'1', b'2,3']\n"
">>> b'1,2,,3,'.split(b',')\n"
"[b'1', b'2', b'', b'3', b'']\n"
">>> b'1<>2<>3<4'.split(b'<>')\n"
"[b'1', b'2', b'3<4']"
msgstr ""

#: ../../library/stdtypes.rst:3169
msgid ""
"If *sep* is not specified or is ``None``, a different splitting algorithm is "
"applied: runs of consecutive ASCII whitespace are regarded as a single "
"separator, and the result will contain no empty strings at the start or end "
"if the sequence has leading or trailing whitespace.  Consequently, splitting "
"an empty sequence or a sequence consisting solely of ASCII whitespace "
"without a specified separator returns ``[]``."
msgstr ""

#: ../../library/stdtypes.rst:3179
msgid ""
">>> b'1 2 3'.split()\n"
"[b'1', b'2', b'3']\n"
">>> b'1 2 3'.split(maxsplit=1)\n"
"[b'1', b'2 3']\n"
">>> b'   1   2   3   '.split()\n"
"[b'1', b'2', b'3']"
msgstr ""

#: ../../library/stdtypes.rst:3190
msgid ""
"Return a copy of the sequence with specified leading and trailing bytes "
"removed. The *chars* argument is a binary sequence specifying the set of "
"byte values to be removed - the name refers to the fact this method is "
"usually used with ASCII characters.  If omitted or ``None``, the *chars* "
"argument defaults to removing ASCII whitespace. The *chars* argument is not "
"a prefix or suffix; rather, all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:3198
msgid ""
">>> b'   spacious   '.strip()\n"
"b'spacious'\n"
">>> b'www.example.com'.strip(b'cmowz.')\n"
"b'example'"
msgstr ""

#: ../../library/stdtypes.rst:3203
msgid ""
"The binary sequence of byte values to remove may be any :term:`bytes-like "
"object`."
msgstr ""

#: ../../library/stdtypes.rst:3212
msgid ""
"The following methods on bytes and bytearray objects assume the use of ASCII "
"compatible binary formats and should not be applied to arbitrary binary "
"data. Note that all of the bytearray methods in this section do *not* "
"operate in place, and instead produce new objects."
msgstr ""

#: ../../library/stdtypes.rst:3220
msgid ""
"Return a copy of the sequence with each byte interpreted as an ASCII "
"character, and the first byte capitalized and the rest lowercased. Non-ASCII "
"byte values are passed through unchanged."
msgstr ""

#: ../../library/stdtypes.rst:3233
msgid ""
"Return a copy of the sequence where all ASCII tab characters are replaced by "
"one or more ASCII spaces, depending on the current column and the given tab "
"size.  Tab positions occur every *tabsize* bytes (default is 8, giving tab "
"positions at columns 0, 8, 16 and so on).  To expand the sequence, the "
"current column is set to zero and the sequence is examined byte by byte.  If "
"the byte is an ASCII tab character (``b'\\t'``), one or more space "
"characters are inserted in the result until the current column is equal to "
"the next tab position. (The tab character itself is not copied.)  If the "
"current byte is an ASCII newline (``b'\\n'``) or carriage return "
"(``b'\\r'``), it is copied and the current column is reset to zero.  Any "
"other byte value is copied unchanged and the current column is incremented "
"by one regardless of how the byte value is represented when printed::"
msgstr ""

#: ../../library/stdtypes.rst:3247
msgid ""
">>> b'01\\t012\\t0123\\t01234'.expandtabs()\n"
"b'01      012     0123    01234'\n"
">>> b'01\\t012\\t0123\\t01234'.expandtabs(4)\n"
"b'01  012 0123    01234'"
msgstr ""

#: ../../library/stdtypes.rst:3261
msgid ""
"Return ``True`` if all bytes in the sequence are alphabetical ASCII "
"characters or ASCII decimal digits and the sequence is not empty, ``False`` "
"otherwise. Alphabetic ASCII characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'``. ASCII decimal "
"digits are those byte values in the sequence ``b'0123456789'``."
msgstr ""

#: ../../library/stdtypes.rst:3269
msgid ""
">>> b'ABCabc1'.isalnum()\n"
"True\n"
">>> b'ABC abc1'.isalnum()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3278
msgid ""
"Return ``True`` if all bytes in the sequence are alphabetic ASCII characters "
"and the sequence is not empty, ``False`` otherwise.  Alphabetic ASCII "
"characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'``."
msgstr ""

#: ../../library/stdtypes.rst:3285
msgid ""
">>> b'ABCabc'.isalpha()\n"
"True\n"
">>> b'ABCabc1'.isalpha()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3294
msgid ""
"Return ``True`` if the sequence is empty or all bytes in the sequence are "
"ASCII, ``False`` otherwise. ASCII bytes are in the range 0-0x7F."
msgstr ""

#: ../../library/stdtypes.rst:3304
msgid ""
"Return ``True`` if all bytes in the sequence are ASCII decimal digits and "
"the sequence is not empty, ``False`` otherwise. ASCII decimal digits are "
"those byte values in the sequence ``b'0123456789'``."
msgstr ""

#: ../../library/stdtypes.rst:3310
msgid ""
">>> b'1234'.isdigit()\n"
"True\n"
">>> b'1.23'.isdigit()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3319
msgid ""
"Return ``True`` if there is at least one lowercase ASCII character in the "
"sequence and no uppercase ASCII characters, ``False`` otherwise."
msgstr ""

#: ../../library/stdtypes.rst:3324
msgid ""
">>> b'hello world'.islower()\n"
"True\n"
">>> b'Hello world'.islower()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3329 ../../library/stdtypes.rst:3371
#: ../../library/stdtypes.rst:3387 ../../library/stdtypes.rst:3437
#: ../../library/stdtypes.rst:3506
msgid ""
"Lowercase ASCII characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyz'``. Uppercase ASCII characters are those byte "
"values in the sequence ``b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``."
msgstr ""

#: ../../library/stdtypes.rst:3337
msgid ""
"Return ``True`` if all bytes in the sequence are ASCII whitespace and the "
"sequence is not empty, ``False`` otherwise.  ASCII whitespace characters are "
"those byte values in the sequence ``b' \\t\\n\\r\\x0b\\f'`` (space, tab, "
"newline, carriage return, vertical tab, form feed)."
msgstr ""

#: ../../library/stdtypes.rst:3346
msgid ""
"Return ``True`` if the sequence is ASCII titlecase and the sequence is not "
"empty, ``False`` otherwise. See :meth:`bytes.title` for more details on the "
"definition of \"titlecase\"."
msgstr ""

#: ../../library/stdtypes.rst:3352
msgid ""
">>> b'Hello World'.istitle()\n"
"True\n"
">>> b'Hello world'.istitle()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3361
msgid ""
"Return ``True`` if there is at least one uppercase alphabetic ASCII "
"character in the sequence and no lowercase ASCII characters, ``False`` "
"otherwise."
msgstr ""

#: ../../library/stdtypes.rst:3366
msgid ""
">>> b'HELLO WORLD'.isupper()\n"
"True\n"
">>> b'Hello world'.isupper()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3379
msgid ""
"Return a copy of the sequence with all the uppercase ASCII characters "
"converted to their corresponding lowercase counterpart."
msgstr ""

#: ../../library/stdtypes.rst:3384
msgid ""
">>> b'Hello World'.lower()\n"
"b'hello world'"
msgstr ""

#: ../../library/stdtypes.rst:3404
msgid ""
"Return a list of the lines in the binary sequence, breaking at ASCII line "
"boundaries. This method uses the :term:`universal newlines` approach to "
"splitting lines. Line breaks are not included in the resulting list unless "
"*keepends* is given and true."
msgstr ""

#: ../../library/stdtypes.rst:3411
msgid ""
">>> b'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n"
"[b'ab c', b'', b'de fg', b'kl']\n"
">>> b'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n"
"[b'ab c\\n', b'\\n', b'de fg\\r', b'kl\\r\\n']"
msgstr ""

#: ../../library/stdtypes.rst:3416
msgid ""
"Unlike :meth:`~bytes.split` when a delimiter string *sep* is given, this "
"method returns an empty list for the empty string, and a terminal line break "
"does not result in an extra line::"
msgstr ""

#: ../../library/stdtypes.rst:3420
msgid ""
">>> b\"\".split(b'\\n'), b\"Two lines\\n\".split(b'\\n')\n"
"([b''], [b'Two lines', b''])\n"
">>> b\"\".splitlines(), b\"One line\\n\".splitlines()\n"
"([], [b'One line'])"
msgstr ""

#: ../../library/stdtypes.rst:3429
msgid ""
"Return a copy of the sequence with all the lowercase ASCII characters "
"converted to their corresponding uppercase counterpart and vice-versa."
msgstr ""

#: ../../library/stdtypes.rst:3434
msgid ""
">>> b'Hello World'.swapcase()\n"
"b'hELLO wORLD'"
msgstr ""

#: ../../library/stdtypes.rst:3441
msgid ""
"Unlike :func:`str.swapcase`, it is always the case that ``bin.swapcase()."
"swapcase() == bin`` for the binary versions. Case conversions are "
"symmetrical in ASCII, even though that is not generally true for arbitrary "
"Unicode code points."
msgstr ""

#: ../../library/stdtypes.rst:3455
msgid ""
"Return a titlecased version of the binary sequence where words start with an "
"uppercase ASCII character and the remaining characters are lowercase. "
"Uncased byte values are left unmodified."
msgstr ""

#: ../../library/stdtypes.rst:3461
msgid ""
">>> b'Hello world'.title()\n"
"b'Hello World'"
msgstr ""

#: ../../library/stdtypes.rst:3464
msgid ""
"Lowercase ASCII characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyz'``. Uppercase ASCII characters are those byte "
"values in the sequence ``b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``. All other byte "
"values are uncased."
msgstr ""

#: ../../library/stdtypes.rst:3474
msgid ""
">>> b\"they're bill's friends from the UK\".title()\n"
"b\"They'Re Bill'S Friends From The Uk\""
msgstr ""

#: ../../library/stdtypes.rst:3477
msgid ""
"A workaround for apostrophes can be constructed using regular expressions::"
msgstr ""

#: ../../library/stdtypes.rst:3479
msgid ""
">>> import re\n"
">>> def titlecase(s):\n"
"...     return re.sub(rb\"[A-Za-z]+('[A-Za-z]+)?\",\n"
"...                   lambda mo: mo.group(0)[0:1].upper() +\n"
"...                              mo.group(0)[1:].lower(),\n"
"...                   s)\n"
"...\n"
">>> titlecase(b\"they're bill's friends.\")\n"
"b\"They're Bill's Friends.\""
msgstr ""

#: ../../library/stdtypes.rst:3498
msgid ""
"Return a copy of the sequence with all the lowercase ASCII characters "
"converted to their corresponding uppercase counterpart."
msgstr ""

#: ../../library/stdtypes.rst:3503
msgid ""
">>> b'Hello World'.upper()\n"
"b'HELLO WORLD'"
msgstr ""

#: ../../library/stdtypes.rst:3519
msgid ""
"Return a copy of the sequence left filled with ASCII ``b'0'`` digits to make "
"a sequence of length *width*. A leading sign prefix (``b'+'``/ ``b'-'``) is "
"handled by inserting the padding *after* the sign character rather than "
"before. For :class:`bytes` objects, the original sequence is returned if "
"*width* is less than or equal to ``len(seq)``."
msgstr ""

#: ../../library/stdtypes.rst:3527
msgid ""
">>> b\"42\".zfill(5)\n"
"b'00042'\n"
">>> b\"-42\".zfill(5)\n"
"b'-0042'"
msgstr ""

#: ../../library/stdtypes.rst:3541
msgid "``printf``-style Bytes Formatting"
msgstr ""

#: ../../library/stdtypes.rst:3558
msgid ""
"The formatting operations described here exhibit a variety of quirks that "
"lead to a number of common errors (such as failing to display tuples and "
"dictionaries correctly).  If the value being printed may be a tuple or "
"dictionary, wrap it in a tuple."
msgstr ""

#: ../../library/stdtypes.rst:3563
msgid ""
"Bytes objects (``bytes``/``bytearray``) have one unique built-in operation: "
"the ``%`` operator (modulo). This is also known as the bytes *formatting* or "
"*interpolation* operator. Given ``format % values`` (where *format* is a "
"bytes object), ``%`` conversion specifications in *format* are replaced with "
"zero or more elements of *values*. The effect is similar to using the :c:"
"func:`sprintf` in the C language."
msgstr ""

#: ../../library/stdtypes.rst:3570
msgid ""
"If *format* requires a single argument, *values* may be a single non-tuple "
"object. [5]_  Otherwise, *values* must be a tuple with exactly the number of "
"items specified by the format bytes object, or a single mapping object (for "
"example, a dictionary)."
msgstr ""

#: ../../library/stdtypes.rst:3604
msgid ""
"When the right argument is a dictionary (or other mapping type), then the "
"formats in the bytes object *must* include a parenthesised mapping key into "
"that dictionary inserted immediately after the ``'%'`` character. The "
"mapping key selects the value to be formatted from the mapping.  For example:"
msgstr ""

#: ../../library/stdtypes.rst:3678
msgid "Single byte (accepts integer or single byte objects)."
msgstr ""

#: ../../library/stdtypes.rst:3681
msgid "``'b'``"
msgstr "``'b'``"

#: ../../library/stdtypes.rst:3681
msgid ""
"Bytes (any object that follows the :ref:`buffer protocol <bufferobjects>` or "
"has :meth:`~object.__bytes__`)."
msgstr ""

#: ../../library/stdtypes.rst:3685
msgid ""
"``'s'`` is an alias for ``'b'`` and should only be used for Python2/3 code "
"bases."
msgstr ""

#: ../../library/stdtypes.rst:3688
msgid ""
"Bytes (converts any Python object using ``repr(obj).encode('ascii', "
"'backslashreplace')``)."
msgstr ""

#: ../../library/stdtypes.rst:3691
msgid ""
"``'r'`` is an alias for ``'a'`` and should only be used for Python2/3 code "
"bases."
msgstr ""

#: ../../library/stdtypes.rst:3691
msgid "\\(7)"
msgstr ""

#: ../../library/stdtypes.rst:3726
msgid "``b'%s'`` is deprecated, but will not be removed during the 3.x series."
msgstr ""

#: ../../library/stdtypes.rst:3729
msgid "``b'%r'`` is deprecated, but will not be removed during the 3.x series."
msgstr ""

#: ../../library/stdtypes.rst:3741
msgid ":pep:`461` - Adding % formatting to bytes and bytearray"
msgstr ""

#: ../../library/stdtypes.rst:3748
msgid "Memory Views"
msgstr ""

#: ../../library/stdtypes.rst:3750
msgid ""
":class:`memoryview` objects allow Python code to access the internal data of "
"an object that supports the :ref:`buffer protocol <bufferobjects>` without "
"copying."
msgstr ""

#: ../../library/stdtypes.rst:3756
msgid ""
"Create a :class:`memoryview` that references *object*.  *object* must "
"support the buffer protocol.  Built-in objects that support the buffer "
"protocol include :class:`bytes` and :class:`bytearray`."
msgstr ""

#: ../../library/stdtypes.rst:3760
msgid ""
"A :class:`memoryview` has the notion of an *element*, which is the atomic "
"memory unit handled by the originating *object*.  For many simple types such "
"as :class:`bytes` and :class:`bytearray`, an element is a single byte, but "
"other types such as :class:`array.array` may have bigger elements."
msgstr ""

#: ../../library/stdtypes.rst:3765
msgid ""
"``len(view)`` is equal to the length of :class:`~memoryview.tolist`, which "
"is the nested list representation of the view. If ``view.ndim = 1``, this is "
"equal to the number of elements in the view."
msgstr ""

#: ../../library/stdtypes.rst:3769
msgid ""
"If ``view.ndim == 0``, ``len(view)`` now raises :exc:`TypeError` instead of "
"returning 1."
msgstr ""

#: ../../library/stdtypes.rst:3772
msgid ""
"The :class:`~memoryview.itemsize` attribute will give you the number of "
"bytes in a single element."
msgstr ""

#: ../../library/stdtypes.rst:3775
msgid ""
"A :class:`memoryview` supports slicing and indexing to expose its data. One-"
"dimensional slicing will result in a subview::"
msgstr ""

#: ../../library/stdtypes.rst:3778
msgid ""
">>> v = memoryview(b'abcefg')\n"
">>> v[1]\n"
"98\n"
">>> v[-1]\n"
"103\n"
">>> v[1:4]\n"
"<memory at 0x7f3ddc9f4350>\n"
">>> bytes(v[1:4])\n"
"b'bce'"
msgstr ""

#: ../../library/stdtypes.rst:3788
msgid ""
"If :class:`~memoryview.format` is one of the native format specifiers from "
"the :mod:`struct` module, indexing with an integer or a tuple of integers is "
"also supported and returns a single *element* with the correct type.  One-"
"dimensional memoryviews can be indexed with an integer or a one-integer "
"tuple.  Multi-dimensional memoryviews can be indexed with tuples of exactly "
"*ndim* integers where *ndim* is the number of dimensions.  Zero-dimensional "
"memoryviews can be indexed with the empty tuple."
msgstr ""

#: ../../library/stdtypes.rst:3797
msgid "Here is an example with a non-byte format::"
msgstr ""

#: ../../library/stdtypes.rst:3799
msgid ""
">>> import array\n"
">>> a = array.array('l', [-11111111, 22222222, -33333333, 44444444])\n"
">>> m = memoryview(a)\n"
">>> m[0]\n"
"-11111111\n"
">>> m[-1]\n"
"44444444\n"
">>> m[::2].tolist()\n"
"[-11111111, -33333333]"
msgstr ""

#: ../../library/stdtypes.rst:3809
msgid ""
"If the underlying object is writable, the memoryview supports one-"
"dimensional slice assignment. Resizing is not allowed::"
msgstr ""

#: ../../library/stdtypes.rst:3812
msgid ""
">>> data = bytearray(b'abcefg')\n"
">>> v = memoryview(data)\n"
">>> v.readonly\n"
"False\n"
">>> v[0] = ord(b'z')\n"
">>> data\n"
"bytearray(b'zbcefg')\n"
">>> v[1:4] = b'123'\n"
">>> data\n"
"bytearray(b'z123fg')\n"
">>> v[2:3] = b'spam'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: memoryview assignment: lvalue and rvalue have different "
"structures\n"
">>> v[2:6] = b'spam'\n"
">>> data\n"
"bytearray(b'z1spam')"
msgstr ""

#: ../../library/stdtypes.rst:3830
msgid ""
"One-dimensional memoryviews of :term:`hashable` (read-only) types with "
"formats 'B', 'b' or 'c' are also hashable. The hash is defined as ``hash(m) "
"== hash(m.tobytes())``::"
msgstr ""

#: ../../library/stdtypes.rst:3834
msgid ""
">>> v = memoryview(b'abcefg')\n"
">>> hash(v) == hash(b'abcefg')\n"
"True\n"
">>> hash(v[2:4]) == hash(b'ce')\n"
"True\n"
">>> hash(v[::-2]) == hash(b'abcefg'[::-2])\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:3842
msgid ""
"One-dimensional memoryviews can now be sliced. One-dimensional memoryviews "
"with formats 'B', 'b' or 'c' are now :term:`hashable`."
msgstr ""

#: ../../library/stdtypes.rst:3846
msgid ""
"memoryview is now registered automatically with :class:`collections.abc."
"Sequence`"
msgstr ""

#: ../../library/stdtypes.rst:3850
msgid "memoryviews can now be indexed with tuple of integers."
msgstr ""

#: ../../library/stdtypes.rst:3853
msgid ":class:`memoryview` has several methods:"
msgstr ""

#: ../../library/stdtypes.rst:3857
msgid ""
"A memoryview and a :pep:`3118` exporter are equal if their shapes are "
"equivalent and if all corresponding values are equal when the operands' "
"respective format codes are interpreted using :mod:`struct` syntax."
msgstr ""

#: ../../library/stdtypes.rst:3861
msgid ""
"For the subset of :mod:`struct` format strings currently supported by :meth:"
"`tolist`, ``v`` and ``w`` are equal if ``v.tolist() == w.tolist()``::"
msgstr ""

#: ../../library/stdtypes.rst:3864
msgid ""
">>> import array\n"
">>> a = array.array('I', [1, 2, 3, 4, 5])\n"
">>> b = array.array('d', [1.0, 2.0, 3.0, 4.0, 5.0])\n"
">>> c = array.array('b', [5, 3, 1])\n"
">>> x = memoryview(a)\n"
">>> y = memoryview(b)\n"
">>> x == a == y == b\n"
"True\n"
">>> x.tolist() == a.tolist() == y.tolist() == b.tolist()\n"
"True\n"
">>> z = y[::-2]\n"
">>> z == c\n"
"True\n"
">>> z.tolist() == c.tolist()\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:3880
msgid ""
"If either format string is not supported by the :mod:`struct` module, then "
"the objects will always compare as unequal (even if the format strings and "
"buffer contents are identical)::"
msgstr ""

#: ../../library/stdtypes.rst:3884
msgid ""
">>> from ctypes import BigEndianStructure, c_long\n"
">>> class BEPoint(BigEndianStructure):\n"
"...     _fields_ = [(\"x\", c_long), (\"y\", c_long)]\n"
"...\n"
">>> point = BEPoint(100, 200)\n"
">>> a = memoryview(point)\n"
">>> b = memoryview(point)\n"
">>> a == point\n"
"False\n"
">>> a == b\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:3896
msgid ""
"Note that, as with floating-point numbers, ``v is w`` does *not* imply ``v "
"== w`` for memoryview objects."
msgstr ""

#: ../../library/stdtypes.rst:3899
msgid ""
"Previous versions compared the raw memory disregarding the item format and "
"the logical array structure."
msgstr ""

#: ../../library/stdtypes.rst:3905
msgid ""
"Return the data in the buffer as a bytestring.  This is equivalent to "
"calling the :class:`bytes` constructor on the memoryview. ::"
msgstr ""

#: ../../library/stdtypes.rst:3908
msgid ""
">>> m = memoryview(b\"abc\")\n"
">>> m.tobytes()\n"
"b'abc'\n"
">>> bytes(m)\n"
"b'abc'"
msgstr ""

#: ../../library/stdtypes.rst:3914
msgid ""
"For non-contiguous arrays the result is equal to the flattened list "
"representation with all elements converted to bytes. :meth:`tobytes` "
"supports all format strings, including those that are not in :mod:`struct` "
"module syntax."
msgstr ""

#: ../../library/stdtypes.rst:3919
msgid ""
"*order* can be {'C', 'F', 'A'}.  When *order* is 'C' or 'F', the data of the "
"original array is converted to C or Fortran order. For contiguous views, 'A' "
"returns an exact copy of the physical memory. In particular, in-memory "
"Fortran order is preserved. For non-contiguous views, the data is converted "
"to C first. *order=None* is the same as *order='C'*."
msgstr ""

#: ../../library/stdtypes.rst:3928
msgid ""
"Return a string object containing two hexadecimal digits for each byte in "
"the buffer. ::"
msgstr ""

#: ../../library/stdtypes.rst:3931
msgid ""
">>> m = memoryview(b\"abc\")\n"
">>> m.hex()\n"
"'616263'"
msgstr ""

#: ../../library/stdtypes.rst:3937
msgid ""
"Similar to :meth:`bytes.hex`, :meth:`memoryview.hex` now supports optional "
"*sep* and *bytes_per_sep* parameters to insert separators between bytes in "
"the hex output."
msgstr ""

#: ../../library/stdtypes.rst:3944
msgid "Return the data in the buffer as a list of elements. ::"
msgstr ""

#: ../../library/stdtypes.rst:3946
msgid ""
">>> memoryview(b'abc').tolist()\n"
"[97, 98, 99]\n"
">>> import array\n"
">>> a = array.array('d', [1.1, 2.2, 3.3])\n"
">>> m = memoryview(a)\n"
">>> m.tolist()\n"
"[1.1, 2.2, 3.3]"
msgstr ""

#: ../../library/stdtypes.rst:3954
msgid ""
":meth:`tolist` now supports all single character native formats in :mod:"
"`struct` module syntax as well as multi-dimensional representations."
msgstr ""

#: ../../library/stdtypes.rst:3961
msgid ""
"Return a readonly version of the memoryview object.  The original memoryview "
"object is unchanged. ::"
msgstr ""

#: ../../library/stdtypes.rst:3964
msgid ""
">>> m = memoryview(bytearray(b'abc'))\n"
">>> mm = m.toreadonly()\n"
">>> mm.tolist()\n"
"[97, 98, 99]\n"
">>> mm[0] = 42\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: cannot modify read-only memory\n"
">>> m[0] = 43\n"
">>> mm.tolist()\n"
"[43, 98, 99]"
msgstr ""

#: ../../library/stdtypes.rst:3980
msgid ""
"Release the underlying buffer exposed by the memoryview object.  Many "
"objects take special actions when a view is held on them (for example, a :"
"class:`bytearray` would temporarily forbid resizing); therefore, calling "
"release() is handy to remove these restrictions (and free any dangling "
"resources) as soon as possible."
msgstr ""

#: ../../library/stdtypes.rst:3986
msgid ""
"After this method has been called, any further operation on the view raises "
"a :class:`ValueError` (except :meth:`release` itself which can be called "
"multiple times)::"
msgstr ""

#: ../../library/stdtypes.rst:3990
msgid ""
">>> m = memoryview(b'abc')\n"
">>> m.release()\n"
">>> m[0]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: operation forbidden on released memoryview object"
msgstr ""

#: ../../library/stdtypes.rst:3997
msgid ""
"The context management protocol can be used for a similar effect, using the "
"``with`` statement::"
msgstr ""

#: ../../library/stdtypes.rst:4000
msgid ""
">>> with memoryview(b'abc') as m:\n"
"...     m[0]\n"
"...\n"
"97\n"
">>> m[0]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: operation forbidden on released memoryview object"
msgstr ""

#: ../../library/stdtypes.rst:4013
msgid ""
"Cast a memoryview to a new format or shape. *shape* defaults to "
"``[byte_length//new_itemsize]``, which means that the result view will be "
"one-dimensional. The return value is a new memoryview, but the buffer itself "
"is not copied. Supported casts are 1D -> C-:term:`contiguous` and C-"
"contiguous -> 1D."
msgstr ""

#: ../../library/stdtypes.rst:4019
msgid ""
"The destination format is restricted to a single element native format in :"
"mod:`struct` syntax. One of the formats must be a byte format ('B', 'b' or "
"'c'). The byte length of the result must be the same as the original length. "
"Note that all byte lengths may depend on the operating system."
msgstr ""

#: ../../library/stdtypes.rst:4025
msgid "Cast 1D/long to 1D/unsigned bytes::"
msgstr ""

#: ../../library/stdtypes.rst:4027
msgid ""
">>> import array\n"
">>> a = array.array('l', [1,2,3])\n"
">>> x = memoryview(a)\n"
">>> x.format\n"
"'l'\n"
">>> x.itemsize\n"
"8\n"
">>> len(x)\n"
"3\n"
">>> x.nbytes\n"
"24\n"
">>> y = x.cast('B')\n"
">>> y.format\n"
"'B'\n"
">>> y.itemsize\n"
"1\n"
">>> len(y)\n"
"24\n"
">>> y.nbytes\n"
"24"
msgstr ""

#: ../../library/stdtypes.rst:4048
msgid "Cast 1D/unsigned bytes to 1D/char::"
msgstr ""

#: ../../library/stdtypes.rst:4050
msgid ""
">>> b = bytearray(b'zyz')\n"
">>> x = memoryview(b)\n"
">>> x[0] = b'a'\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: memoryview: invalid type for format 'B'\n"
">>> y = x.cast('c')\n"
">>> y[0] = b'a'\n"
">>> b\n"
"bytearray(b'ayz')"
msgstr ""

#: ../../library/stdtypes.rst:4061
msgid "Cast 1D/bytes to 3D/ints to 1D/signed char::"
msgstr ""

#: ../../library/stdtypes.rst:4063
msgid ""
">>> import struct\n"
">>> buf = struct.pack(\"i\"*12, *list(range(12)))\n"
">>> x = memoryview(buf)\n"
">>> y = x.cast('i', shape=[2,2,3])\n"
">>> y.tolist()\n"
"[[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]\n"
">>> y.format\n"
"'i'\n"
">>> y.itemsize\n"
"4\n"
">>> len(y)\n"
"2\n"
">>> y.nbytes\n"
"48\n"
">>> z = y.cast('b')\n"
">>> z.format\n"
"'b'\n"
">>> z.itemsize\n"
"1\n"
">>> len(z)\n"
"48\n"
">>> z.nbytes\n"
"48"
msgstr ""

#: ../../library/stdtypes.rst:4087
msgid "Cast 1D/unsigned long to 2D/unsigned long::"
msgstr ""

#: ../../library/stdtypes.rst:4089
msgid ""
">>> buf = struct.pack(\"L\"*6, *list(range(6)))\n"
">>> x = memoryview(buf)\n"
">>> y = x.cast('L', shape=[2,3])\n"
">>> len(y)\n"
"2\n"
">>> y.nbytes\n"
"48\n"
">>> y.tolist()\n"
"[[0, 1, 2], [3, 4, 5]]"
msgstr ""

#: ../../library/stdtypes.rst:4101
msgid "The source format is no longer restricted when casting to a byte view."
msgstr ""

#: ../../library/stdtypes.rst:4104
msgid "There are also several readonly attributes available:"
msgstr ""

#: ../../library/stdtypes.rst:4108
msgid "The underlying object of the memoryview::"
msgstr ""

#: ../../library/stdtypes.rst:4110
msgid ""
">>> b  = bytearray(b'xyz')\n"
">>> m = memoryview(b)\n"
">>> m.obj is b\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:4119
msgid ""
"``nbytes == product(shape) * itemsize == len(m.tobytes())``. This is the "
"amount of space in bytes that the array would use in a contiguous "
"representation. It is not necessarily equal to ``len(m)``::"
msgstr ""

#: ../../library/stdtypes.rst:4123
msgid ""
">>> import array\n"
">>> a = array.array('i', [1,2,3,4,5])\n"
">>> m = memoryview(a)\n"
">>> len(m)\n"
"5\n"
">>> m.nbytes\n"
"20\n"
">>> y = m[::2]\n"
">>> len(y)\n"
"3\n"
">>> y.nbytes\n"
"12\n"
">>> len(y.tobytes())\n"
"12"
msgstr ""

#: ../../library/stdtypes.rst:4138
msgid "Multi-dimensional arrays::"
msgstr ""

#: ../../library/stdtypes.rst:4140
msgid ""
">>> import struct\n"
">>> buf = struct.pack(\"d\"*12, *[1.5*x for x in range(12)])\n"
">>> x = memoryview(buf)\n"
">>> y = x.cast('d', shape=[3,4])\n"
">>> y.tolist()\n"
"[[0.0, 1.5, 3.0, 4.5], [6.0, 7.5, 9.0, 10.5], [12.0, 13.5, 15.0, 16.5]]\n"
">>> len(y)\n"
"3\n"
">>> y.nbytes\n"
"96"
msgstr ""

#: ../../library/stdtypes.rst:4155
msgid "A bool indicating whether the memory is read only."
msgstr ""

#: ../../library/stdtypes.rst:4159
msgid ""
"A string containing the format (in :mod:`struct` module style) for each "
"element in the view. A memoryview can be created from exporters with "
"arbitrary format strings, but some methods (e.g. :meth:`tolist`) are "
"restricted to native single element formats."
msgstr ""

#: ../../library/stdtypes.rst:4164
msgid ""
"format ``'B'`` is now handled according to the struct module syntax. This "
"means that ``memoryview(b'abc')[0] == b'abc'[0] == 97``."
msgstr ""

#: ../../library/stdtypes.rst:4170
msgid "The size in bytes of each element of the memoryview::"
msgstr ""

#: ../../library/stdtypes.rst:4172
msgid ""
">>> import array, struct\n"
">>> m = memoryview(array.array('H', [32000, 32001, 32002]))\n"
">>> m.itemsize\n"
"2\n"
">>> m[0]\n"
"32000\n"
">>> struct.calcsize('H') == m.itemsize\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:4183
msgid ""
"An integer indicating how many dimensions of a multi-dimensional array the "
"memory represents."
msgstr ""

#: ../../library/stdtypes.rst:4188
msgid ""
"A tuple of integers the length of :attr:`ndim` giving the shape of the "
"memory as an N-dimensional array."
msgstr ""

#: ../../library/stdtypes.rst:4191 ../../library/stdtypes.rst:4199
msgid "An empty tuple instead of ``None`` when ndim = 0."
msgstr ""

#: ../../library/stdtypes.rst:4196
msgid ""
"A tuple of integers the length of :attr:`ndim` giving the size in bytes to "
"access each element for each dimension of the array."
msgstr ""

#: ../../library/stdtypes.rst:4204
msgid "Used internally for PIL-style arrays. The value is informational only."
msgstr ""

#: ../../library/stdtypes.rst:4208
msgid "A bool indicating whether the memory is C-:term:`contiguous`."
msgstr ""

#: ../../library/stdtypes.rst:4214
msgid "A bool indicating whether the memory is Fortran :term:`contiguous`."
msgstr ""

#: ../../library/stdtypes.rst:4220
msgid "A bool indicating whether the memory is :term:`contiguous`."
msgstr ""

#: ../../library/stdtypes.rst:4228
msgid "Set Types --- :class:`set`, :class:`frozenset`"
msgstr ""

#: ../../library/stdtypes.rst:4232
msgid ""
"A :dfn:`set` object is an unordered collection of distinct :term:`hashable` "
"objects. Common uses include membership testing, removing duplicates from a "
"sequence, and computing mathematical operations such as intersection, union, "
"difference, and symmetric difference. (For other containers see the built-"
"in :class:`dict`, :class:`list`, and :class:`tuple` classes, and the :mod:"
"`collections` module.)"
msgstr ""

#: ../../library/stdtypes.rst:4239
msgid ""
"Like other collections, sets support ``x in set``, ``len(set)``, and ``for x "
"in set``.  Being an unordered collection, sets do not record element "
"position or order of insertion.  Accordingly, sets do not support indexing, "
"slicing, or other sequence-like behavior."
msgstr ""

#: ../../library/stdtypes.rst:4244
msgid ""
"There are currently two built-in set types, :class:`set` and :class:"
"`frozenset`. The :class:`set` type is mutable --- the contents can be "
"changed using methods like :meth:`~set.add` and :meth:`~set.remove`.  Since "
"it is mutable, it has no hash value and cannot be used as either a "
"dictionary key or as an element of another set.  The :class:`frozenset` type "
"is immutable and :term:`hashable` --- its contents cannot be altered after "
"it is created; it can therefore be used as a dictionary key or as an element "
"of another set."
msgstr ""

#: ../../library/stdtypes.rst:4252
msgid ""
"Non-empty sets (not frozensets) can be created by placing a comma-separated "
"list of elements within braces, for example: ``{'jack', 'sjoerd'}``, in "
"addition to the :class:`set` constructor."
msgstr ""

#: ../../library/stdtypes.rst:4256
msgid "The constructors for both classes work the same:"
msgstr ""

#: ../../library/stdtypes.rst:4261
msgid ""
"Return a new set or frozenset object whose elements are taken from "
"*iterable*.  The elements of a set must be :term:`hashable`.  To represent "
"sets of sets, the inner sets must be :class:`frozenset` objects.  If "
"*iterable* is not specified, a new empty set is returned."
msgstr ""

#: ../../library/stdtypes.rst:4267
msgid "Sets can be created by several means:"
msgstr ""

#: ../../library/stdtypes.rst:4269
msgid ""
"Use a comma-separated list of elements within braces: ``{'jack', 'sjoerd'}``"
msgstr ""

#: ../../library/stdtypes.rst:4270
msgid ""
"Use a set comprehension: ``{c for c in 'abracadabra' if c not in 'abc'}``"
msgstr ""

#: ../../library/stdtypes.rst:4271
msgid ""
"Use the type constructor: ``set()``, ``set('foobar')``, ``set(['a', 'b', "
"'foo'])``"
msgstr ""

#: ../../library/stdtypes.rst:4273
msgid ""
"Instances of :class:`set` and :class:`frozenset` provide the following "
"operations:"
msgstr ""

#: ../../library/stdtypes.rst:4278
msgid "Return the number of elements in set *s* (cardinality of *s*)."
msgstr ""

#: ../../library/stdtypes.rst:4282
msgid "Test *x* for membership in *s*."
msgstr ""

#: ../../library/stdtypes.rst:4286
msgid "Test *x* for non-membership in *s*."
msgstr ""

#: ../../library/stdtypes.rst:4290
msgid ""
"Return ``True`` if the set has no elements in common with *other*.  Sets are "
"disjoint if and only if their intersection is the empty set."
msgstr ""

#: ../../library/stdtypes.rst:4296
msgid "Test whether every element in the set is in *other*."
msgstr ""

#: ../../library/stdtypes.rst:4300
msgid ""
"Test whether the set is a proper subset of *other*, that is, ``set <= other "
"and set != other``."
msgstr ""

#: ../../library/stdtypes.rst:4306
msgid "Test whether every element in *other* is in the set."
msgstr ""

#: ../../library/stdtypes.rst:4310
msgid ""
"Test whether the set is a proper superset of *other*, that is, ``set >= "
"other and set != other``."
msgstr ""

#: ../../library/stdtypes.rst:4316
msgid "Return a new set with elements from the set and all others."
msgstr ""

#: ../../library/stdtypes.rst:4321
msgid "Return a new set with elements common to the set and all others."
msgstr ""

#: ../../library/stdtypes.rst:4326
msgid "Return a new set with elements in the set that are not in the others."
msgstr ""

#: ../../library/stdtypes.rst:4331
msgid ""
"Return a new set with elements in either the set or *other* but not both."
msgstr ""

#: ../../library/stdtypes.rst:4335
msgid "Return a shallow copy of the set."
msgstr ""

#: ../../library/stdtypes.rst:4338
msgid ""
"Note, the non-operator versions of :meth:`union`, :meth:`intersection`, :"
"meth:`difference`, :meth:`symmetric_difference`, :meth:`issubset`, and :meth:"
"`issuperset` methods will accept any iterable as an argument.  In contrast, "
"their operator based counterparts require their arguments to be sets.  This "
"precludes error-prone constructions like ``set('abc') & 'cbs'`` in favor of "
"the more readable ``set('abc').intersection('cbs')``."
msgstr ""

#: ../../library/stdtypes.rst:4345
msgid ""
"Both :class:`set` and :class:`frozenset` support set to set comparisons. Two "
"sets are equal if and only if every element of each set is contained in the "
"other (each is a subset of the other). A set is less than another set if and "
"only if the first set is a proper subset of the second set (is a subset, but "
"is not equal). A set is greater than another set if and only if the first "
"set is a proper superset of the second set (is a superset, but is not equal)."
msgstr ""

#: ../../library/stdtypes.rst:4352
msgid ""
"Instances of :class:`set` are compared to instances of :class:`frozenset` "
"based on their members.  For example, ``set('abc') == frozenset('abc')`` "
"returns ``True`` and so does ``set('abc') in set([frozenset('abc')])``."
msgstr ""

#: ../../library/stdtypes.rst:4356
msgid ""
"The subset and equality comparisons do not generalize to a total ordering "
"function.  For example, any two nonempty disjoint sets are not equal and are "
"not subsets of each other, so *all* of the following return ``False``: "
"``a<b``, ``a==b``, or ``a>b``."
msgstr ""

#: ../../library/stdtypes.rst:4361
msgid ""
"Since sets only define partial ordering (subset relationships), the output "
"of the :meth:`list.sort` method is undefined for lists of sets."
msgstr ""

#: ../../library/stdtypes.rst:4364
msgid "Set elements, like dictionary keys, must be :term:`hashable`."
msgstr ""

#: ../../library/stdtypes.rst:4366
msgid ""
"Binary operations that mix :class:`set` instances with :class:`frozenset` "
"return the type of the first operand.  For example: ``frozenset('ab') | "
"set('bc')`` returns an instance of :class:`frozenset`."
msgstr ""

#: ../../library/stdtypes.rst:4370
msgid ""
"The following table lists operations available for :class:`set` that do not "
"apply to immutable instances of :class:`frozenset`:"
msgstr ""

#: ../../library/stdtypes.rst:4376
msgid "Update the set, adding elements from all others."
msgstr ""

#: ../../library/stdtypes.rst:4381
msgid "Update the set, keeping only elements found in it and all others."
msgstr ""

#: ../../library/stdtypes.rst:4386
msgid "Update the set, removing elements found in others."
msgstr ""

#: ../../library/stdtypes.rst:4391
msgid ""
"Update the set, keeping only elements found in either set, but not in both."
msgstr ""

#: ../../library/stdtypes.rst:4395
msgid "Add element *elem* to the set."
msgstr ""

#: ../../library/stdtypes.rst:4399
msgid ""
"Remove element *elem* from the set.  Raises :exc:`KeyError` if *elem* is not "
"contained in the set."
msgstr ""

#: ../../library/stdtypes.rst:4404
msgid "Remove element *elem* from the set if it is present."
msgstr ""

#: ../../library/stdtypes.rst:4408
msgid ""
"Remove and return an arbitrary element from the set.  Raises :exc:`KeyError` "
"if the set is empty."
msgstr ""

#: ../../library/stdtypes.rst:4413
msgid "Remove all elements from the set."
msgstr ""

#: ../../library/stdtypes.rst:4416
msgid ""
"Note, the non-operator versions of the :meth:`update`, :meth:"
"`intersection_update`, :meth:`difference_update`, and :meth:"
"`symmetric_difference_update` methods will accept any iterable as an "
"argument."
msgstr ""

#: ../../library/stdtypes.rst:4421
msgid ""
"Note, the *elem* argument to the :meth:`~object.__contains__`, :meth:"
"`remove`, and :meth:`discard` methods may be a set.  To support searching "
"for an equivalent frozenset, a temporary one is created from *elem*."
msgstr ""

#: ../../library/stdtypes.rst:4430
msgid "Mapping Types --- :class:`dict`"
msgstr ""

#: ../../library/stdtypes.rst:4440
msgid ""
"A :term:`mapping` object maps :term:`hashable` values to arbitrary objects. "
"Mappings are mutable objects.  There is currently only one standard mapping "
"type, the :dfn:`dictionary`.  (For other containers see the built-in :class:"
"`list`, :class:`set`, and :class:`tuple` classes, and the :mod:`collections` "
"module.)"
msgstr ""

#: ../../library/stdtypes.rst:4446
msgid ""
"A dictionary's keys are *almost* arbitrary values.  Values that are not :"
"term:`hashable`, that is, values containing lists, dictionaries or other "
"mutable types (that are compared by value rather than by object identity) "
"may not be used as keys. Values that compare equal (such as ``1``, ``1.0``, "
"and ``True``) can be used interchangeably to index the same dictionary entry."
msgstr ""

#: ../../library/stdtypes.rst:4457
msgid ""
"Return a new dictionary initialized from an optional positional argument and "
"a possibly empty set of keyword arguments."
msgstr ""

#: ../../library/stdtypes.rst:4460
msgid "Dictionaries can be created by several means:"
msgstr ""

#: ../../library/stdtypes.rst:4462
msgid ""
"Use a comma-separated list of ``key: value`` pairs within braces: ``{'jack': "
"4098, 'sjoerd': 4127}`` or ``{4098: 'jack', 4127: 'sjoerd'}``"
msgstr ""

#: ../../library/stdtypes.rst:4464
msgid "Use a dict comprehension: ``{}``, ``{x: x ** 2 for x in range(10)}``"
msgstr ""

#: ../../library/stdtypes.rst:4465
msgid ""
"Use the type constructor: ``dict()``, ``dict([('foo', 100), ('bar', "
"200)])``, ``dict(foo=100, bar=200)``"
msgstr ""

#: ../../library/stdtypes.rst:4468
msgid ""
"If no positional argument is given, an empty dictionary is created. If a "
"positional argument is given and it defines a ``keys()`` method, a "
"dictionary is created by calling :meth:`~object.__getitem__` on the argument "
"with each returned key from the method.  Otherwise, the positional argument "
"must be an :term:`iterable` object.  Each item in the iterable must itself "
"be an iterable with exactly two elements.  The first element of each item "
"becomes a key in the new dictionary, and the second element the "
"corresponding value.  If a key occurs more than once, the last value for "
"that key becomes the corresponding value in the new dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4478
msgid ""
"If keyword arguments are given, the keyword arguments and their values are "
"added to the dictionary created from the positional argument.  If a key "
"being added is already present, the value from the keyword argument replaces "
"the value from the positional argument."
msgstr ""

#: ../../library/stdtypes.rst:4483
msgid ""
"To illustrate, the following examples all return a dictionary equal to "
"``{\"one\": 1, \"two\": 2, \"three\": 3}``::"
msgstr ""

#: ../../library/stdtypes.rst:4486
msgid ""
">>> a = dict(one=1, two=2, three=3)\n"
">>> b = {'one': 1, 'two': 2, 'three': 3}\n"
">>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n"
">>> d = dict([('two', 2), ('one', 1), ('three', 3)])\n"
">>> e = dict({'three': 3, 'one': 1, 'two': 2})\n"
">>> f = dict({'one': 1, 'three': 3}, two=2)\n"
">>> a == b == c == d == e == f\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:4495
msgid ""
"Providing keyword arguments as in the first example only works for keys that "
"are valid Python identifiers.  Otherwise, any valid keys can be used."
msgstr ""

#: ../../library/stdtypes.rst:4499
msgid ""
"These are the operations that dictionaries support (and therefore, custom "
"mapping types should support too):"
msgstr ""

#: ../../library/stdtypes.rst:4504
msgid "Return a list of all the keys used in the dictionary *d*."
msgstr ""

#: ../../library/stdtypes.rst:4508
msgid "Return the number of items in the dictionary *d*."
msgstr ""

#: ../../library/stdtypes.rst:4512
msgid ""
"Return the item of *d* with key *key*.  Raises a :exc:`KeyError` if *key* is "
"not in the map."
msgstr ""

#: ../../library/stdtypes.rst:4517
msgid ""
"If a subclass of dict defines a method :meth:`__missing__` and *key* is not "
"present, the ``d[key]`` operation calls that method with the key *key* as "
"argument.  The ``d[key]`` operation then returns or raises whatever is "
"returned or raised by the ``__missing__(key)`` call. No other operations or "
"methods invoke :meth:`__missing__`. If :meth:`__missing__` is not defined, :"
"exc:`KeyError` is raised. :meth:`__missing__` must be a method; it cannot be "
"an instance variable::"
msgstr ""

#: ../../library/stdtypes.rst:4525
msgid ""
">>> class Counter(dict):\n"
"...     def __missing__(self, key):\n"
"...         return 0\n"
"...\n"
">>> c = Counter()\n"
">>> c['red']\n"
"0\n"
">>> c['red'] += 1\n"
">>> c['red']\n"
"1"
msgstr ""

#: ../../library/stdtypes.rst:4536
msgid ""
"The example above shows part of the implementation of :class:`collections."
"Counter`.  A different ``__missing__`` method is used by :class:`collections."
"defaultdict`."
msgstr ""

#: ../../library/stdtypes.rst:4542
msgid "Set ``d[key]`` to *value*."
msgstr ""

#: ../../library/stdtypes.rst:4546
msgid ""
"Remove ``d[key]`` from *d*.  Raises a :exc:`KeyError` if *key* is not in the "
"map."
msgstr ""

#: ../../library/stdtypes.rst:4551
msgid "Return ``True`` if *d* has a key *key*, else ``False``."
msgstr ""

#: ../../library/stdtypes.rst:4555
msgid "Equivalent to ``not key in d``."
msgstr ""

#: ../../library/stdtypes.rst:4559
msgid ""
"Return an iterator over the keys of the dictionary.  This is a shortcut for "
"``iter(d.keys())``."
msgstr ""

#: ../../library/stdtypes.rst:4564
msgid "Remove all items from the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4568
msgid "Return a shallow copy of the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4572
msgid ""
"Create a new dictionary with keys from *iterable* and values set to *value*."
msgstr ""

#: ../../library/stdtypes.rst:4574
msgid ""
":meth:`fromkeys` is a class method that returns a new dictionary. *value* "
"defaults to ``None``.  All of the values refer to just a single instance, so "
"it generally doesn't make sense for *value* to be a mutable object such as "
"an empty list.  To get distinct values, use a :ref:`dict comprehension "
"<dict>` instead."
msgstr ""

#: ../../library/stdtypes.rst:4582
msgid ""
"Return the value for *key* if *key* is in the dictionary, else *default*. If "
"*default* is not given, it defaults to ``None``, so that this method never "
"raises a :exc:`KeyError`."
msgstr ""

#: ../../library/stdtypes.rst:4588
msgid ""
"Return a new view of the dictionary's items (``(key, value)`` pairs). See "
"the :ref:`documentation of view objects <dict-views>`."
msgstr ""

#: ../../library/stdtypes.rst:4593
msgid ""
"Return a new view of the dictionary's keys.  See the :ref:`documentation of "
"view objects <dict-views>`."
msgstr ""

#: ../../library/stdtypes.rst:4598
msgid ""
"If *key* is in the dictionary, remove it and return its value, else return "
"*default*.  If *default* is not given and *key* is not in the dictionary, a :"
"exc:`KeyError` is raised."
msgstr ""

#: ../../library/stdtypes.rst:4604
msgid ""
"Remove and return a ``(key, value)`` pair from the dictionary. Pairs are "
"returned in :abbr:`LIFO (last-in, first-out)` order."
msgstr ""

#: ../../library/stdtypes.rst:4607
msgid ""
":meth:`popitem` is useful to destructively iterate over a dictionary, as "
"often used in set algorithms.  If the dictionary is empty, calling :meth:"
"`popitem` raises a :exc:`KeyError`."
msgstr ""

#: ../../library/stdtypes.rst:4611
msgid ""
"LIFO order is now guaranteed. In prior versions, :meth:`popitem` would "
"return an arbitrary key/value pair."
msgstr ""

#: ../../library/stdtypes.rst:4617
msgid ""
"Return a reverse iterator over the keys of the dictionary. This is a "
"shortcut for ``reversed(d.keys())``."
msgstr ""

#: ../../library/stdtypes.rst:4624
msgid ""
"If *key* is in the dictionary, return its value.  If not, insert *key* with "
"a value of *default* and return *default*.  *default* defaults to ``None``."
msgstr ""

#: ../../library/stdtypes.rst:4630
msgid ""
"Update the dictionary with the key/value pairs from *other*, overwriting "
"existing keys.  Return ``None``."
msgstr ""

#: ../../library/stdtypes.rst:4633
msgid ""
":meth:`update` accepts either another object with a ``keys()`` method (in "
"which case :meth:`~object.__getitem__` is called with every key returned "
"from the method) or an iterable of key/value pairs (as tuples or other "
"iterables of length two). If keyword arguments are specified, the dictionary "
"is then updated with those key/value pairs: ``d.update(red=1, blue=2)``."
msgstr ""

#: ../../library/stdtypes.rst:4641
msgid ""
"Return a new view of the dictionary's values.  See the :ref:`documentation "
"of view objects <dict-views>`."
msgstr ""

#: ../../library/stdtypes.rst:4644
msgid ""
"An equality comparison between one ``dict.values()`` view and another will "
"always return ``False``. This also applies when comparing ``dict.values()`` "
"to itself::"
msgstr ""

#: ../../library/stdtypes.rst:4648
msgid ""
">>> d = {'a': 1}\n"
">>> d.values() == d.values()\n"
"False"
msgstr ""

#: ../../library/stdtypes.rst:4654
msgid ""
"Create a new dictionary with the merged keys and values of *d* and *other*, "
"which must both be dictionaries. The values of *other* take priority when "
"*d* and *other* share keys."
msgstr ""

#: ../../library/stdtypes.rst:4662
msgid ""
"Update the dictionary *d* with keys and values from *other*, which may be "
"either a :term:`mapping` or an :term:`iterable` of key/value pairs. The "
"values of *other* take priority when *d* and *other* share keys."
msgstr ""

#: ../../library/stdtypes.rst:4668
msgid ""
"Dictionaries compare equal if and only if they have the same ``(key, "
"value)`` pairs (regardless of ordering). Order comparisons ('<', '<=', '>=', "
"'>') raise :exc:`TypeError`."
msgstr ""

#: ../../library/stdtypes.rst:4672
msgid ""
"Dictionaries preserve insertion order.  Note that updating a key does not "
"affect the order.  Keys added after deletion are inserted at the end. ::"
msgstr ""

#: ../../library/stdtypes.rst:4675
msgid ""
">>> d = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n"
">>> d\n"
"{'one': 1, 'two': 2, 'three': 3, 'four': 4}\n"
">>> list(d)\n"
"['one', 'two', 'three', 'four']\n"
">>> list(d.values())\n"
"[1, 2, 3, 4]\n"
">>> d[\"one\"] = 42\n"
">>> d\n"
"{'one': 42, 'two': 2, 'three': 3, 'four': 4}\n"
">>> del d[\"two\"]\n"
">>> d[\"two\"] = None\n"
">>> d\n"
"{'one': 42, 'three': 3, 'four': 4, 'two': None}"
msgstr ""

#: ../../library/stdtypes.rst:4690
msgid ""
"Dictionary order is guaranteed to be insertion order.  This behavior was an "
"implementation detail of CPython from 3.6."
msgstr ""

#: ../../library/stdtypes.rst:4694
msgid "Dictionaries and dictionary views are reversible. ::"
msgstr ""

#: ../../library/stdtypes.rst:4696
msgid ""
">>> d = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n"
">>> d\n"
"{'one': 1, 'two': 2, 'three': 3, 'four': 4}\n"
">>> list(reversed(d))\n"
"['four', 'three', 'two', 'one']\n"
">>> list(reversed(d.values()))\n"
"[4, 3, 2, 1]\n"
">>> list(reversed(d.items()))\n"
"[('four', 4), ('three', 3), ('two', 2), ('one', 1)]"
msgstr ""

#: ../../library/stdtypes.rst:4706
msgid "Dictionaries are now reversible."
msgstr ""

#: ../../library/stdtypes.rst:4711
msgid ""
":class:`types.MappingProxyType` can be used to create a read-only view of a :"
"class:`dict`."
msgstr ""

#: ../../library/stdtypes.rst:4718
msgid "Dictionary view objects"
msgstr ""

#: ../../library/stdtypes.rst:4720
msgid ""
"The objects returned by :meth:`dict.keys`, :meth:`dict.values` and :meth:"
"`dict.items` are *view objects*.  They provide a dynamic view on the "
"dictionary's entries, which means that when the dictionary changes, the view "
"reflects these changes."
msgstr ""

#: ../../library/stdtypes.rst:4725
msgid ""
"Dictionary views can be iterated over to yield their respective data, and "
"support membership tests:"
msgstr ""

#: ../../library/stdtypes.rst:4730
msgid "Return the number of entries in the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4734
msgid ""
"Return an iterator over the keys, values or items (represented as tuples of "
"``(key, value)``) in the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4737
msgid ""
"Keys and values are iterated over in insertion order. This allows the "
"creation of ``(value, key)`` pairs using :func:`zip`: ``pairs = zip(d."
"values(), d.keys())``.  Another way to create the same list is ``pairs = "
"[(v, k) for (k, v) in d.items()]``."
msgstr ""

#: ../../library/stdtypes.rst:4742
msgid ""
"Iterating views while adding or deleting entries in the dictionary may raise "
"a :exc:`RuntimeError` or fail to iterate over all entries."
msgstr ""

#: ../../library/stdtypes.rst:4745
msgid "Dictionary order is guaranteed to be insertion order."
msgstr ""

#: ../../library/stdtypes.rst:4750
msgid ""
"Return ``True`` if *x* is in the underlying dictionary's keys, values or "
"items (in the latter case, *x* should be a ``(key, value)`` tuple)."
msgstr ""

#: ../../library/stdtypes.rst:4755
msgid ""
"Return a reverse iterator over the keys, values or items of the dictionary. "
"The view will be iterated in reverse order of the insertion."
msgstr ""

#: ../../library/stdtypes.rst:4758
msgid "Dictionary views are now reversible."
msgstr ""

#: ../../library/stdtypes.rst:4763
msgid ""
"Return a :class:`types.MappingProxyType` that wraps the original dictionary "
"to which the view refers."
msgstr ""

#: ../../library/stdtypes.rst:4768
msgid ""
"Keys views are set-like since their entries are unique and :term:`hashable`. "
"Items views also have set-like operations since the (key, value) pairs are "
"unique and the keys are hashable. If all values in an items view are "
"hashable as well, then the items view can interoperate with other sets. "
"(Values views are not treated as set-like since the entries are generally "
"not unique.)  For set-like views, all of the operations defined for the "
"abstract base class :class:`collections.abc.Set` are available (for example, "
"``==``, ``<``, or ``^``).  While using set operators, set-like views accept "
"any iterable as the other operand, unlike sets which only accept sets as the "
"input."
msgstr ""

#: ../../library/stdtypes.rst:4780
msgid "An example of dictionary view usage::"
msgstr ""

#: ../../library/stdtypes.rst:4782
msgid ""
">>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}\n"
">>> keys = dishes.keys()\n"
">>> values = dishes.values()\n"
"\n"
">>> # iteration\n"
">>> n = 0\n"
">>> for val in values:\n"
"...     n += val\n"
"...\n"
">>> print(n)\n"
"504\n"
"\n"
">>> # keys and values are iterated over in the same order (insertion order)\n"
">>> list(keys)\n"
"['eggs', 'sausage', 'bacon', 'spam']\n"
">>> list(values)\n"
"[2, 1, 1, 500]\n"
"\n"
">>> # view objects are dynamic and reflect dict changes\n"
">>> del dishes['eggs']\n"
">>> del dishes['sausage']\n"
">>> list(keys)\n"
"['bacon', 'spam']\n"
"\n"
">>> # set operations\n"
">>> keys & {'eggs', 'bacon', 'salad'}\n"
"{'bacon'}\n"
">>> keys ^ {'sausage', 'juice'} == {'juice', 'sausage', 'bacon', 'spam'}\n"
"True\n"
">>> keys | ['juice', 'juice', 'juice'] == {'bacon', 'spam', 'juice'}\n"
"True\n"
"\n"
">>> # get back a read-only proxy for the original dictionary\n"
">>> values.mapping\n"
"mappingproxy({'bacon': 1, 'spam': 500})\n"
">>> values.mapping['spam']\n"
"500"
msgstr ""

#: ../../library/stdtypes.rst:4824
msgid "Context Manager Types"
msgstr ""

#: ../../library/stdtypes.rst:4831
msgid ""
"Python's :keyword:`with` statement supports the concept of a runtime context "
"defined by a context manager.  This is implemented using a pair of methods "
"that allow user-defined classes to define a runtime context that is entered "
"before the statement body is executed and exited when the statement ends:"
msgstr ""

#: ../../library/stdtypes.rst:4839
msgid ""
"Enter the runtime context and return either this object or another object "
"related to the runtime context. The value returned by this method is bound "
"to the identifier in the :keyword:`!as` clause of :keyword:`with` statements "
"using this context manager."
msgstr ""

#: ../../library/stdtypes.rst:4844
msgid ""
"An example of a context manager that returns itself is a :term:`file "
"object`. File objects return themselves from __enter__() to allow :func:"
"`open` to be used as the context expression in a :keyword:`with` statement."
msgstr ""

#: ../../library/stdtypes.rst:4848
msgid ""
"An example of a context manager that returns a related object is the one "
"returned by :func:`decimal.localcontext`. These managers set the active "
"decimal context to a copy of the original decimal context and then return "
"the copy. This allows changes to be made to the current decimal context in "
"the body of the :keyword:`with` statement without affecting code outside "
"the :keyword:`!with` statement."
msgstr ""

#: ../../library/stdtypes.rst:4858
msgid ""
"Exit the runtime context and return a Boolean flag indicating if any "
"exception that occurred should be suppressed. If an exception occurred while "
"executing the body of the :keyword:`with` statement, the arguments contain "
"the exception type, value and traceback information. Otherwise, all three "
"arguments are ``None``."
msgstr ""

#: ../../library/stdtypes.rst:4863
msgid ""
"Returning a true value from this method will cause the :keyword:`with` "
"statement to suppress the exception and continue execution with the "
"statement immediately following the :keyword:`!with` statement. Otherwise "
"the exception continues propagating after this method has finished "
"executing. Exceptions that occur during execution of this method will "
"replace any exception that occurred in the body of the :keyword:`!with` "
"statement."
msgstr ""

#: ../../library/stdtypes.rst:4870
msgid ""
"The exception passed in should never be reraised explicitly - instead, this "
"method should return a false value to indicate that the method completed "
"successfully and does not want to suppress the raised exception. This allows "
"context management code to easily detect whether or not an :meth:`~object."
"__exit__` method has actually failed."
msgstr ""

#: ../../library/stdtypes.rst:4876
msgid ""
"Python defines several context managers to support easy thread "
"synchronisation, prompt closure of files or other objects, and simpler "
"manipulation of the active decimal arithmetic context. The specific types "
"are not treated specially beyond their implementation of the context "
"management protocol. See the :mod:`contextlib` module for some examples."
msgstr ""

#: ../../library/stdtypes.rst:4882
msgid ""
"Python's :term:`generator`\\s and the :class:`contextlib.contextmanager` "
"decorator provide a convenient way to implement these protocols.  If a "
"generator function is decorated with the :class:`contextlib.contextmanager` "
"decorator, it will return a context manager implementing the necessary :meth:"
"`~contextmanager.__enter__` and :meth:`~contextmanager.__exit__` methods, "
"rather than the iterator produced by an undecorated generator function."
msgstr ""

#: ../../library/stdtypes.rst:4889
msgid ""
"Note that there is no specific slot for any of these methods in the type "
"structure for Python objects in the Python/C API. Extension types wanting to "
"define these methods must provide them as a normal Python accessible method. "
"Compared to the overhead of setting up the runtime context, the overhead of "
"a single class dictionary lookup is negligible."
msgstr ""

#: ../../library/stdtypes.rst:4897
msgid ""
"Type Annotation Types --- :ref:`Generic Alias <types-genericalias>`, :ref:"
"`Union <types-union>`"
msgstr ""

#: ../../library/stdtypes.rst:4902
msgid ""
"The core built-in types for :term:`type annotations <annotation>` are :ref:"
"`Generic Alias <types-genericalias>` and :ref:`Union <types-union>`."
msgstr ""

#: ../../library/stdtypes.rst:4909
msgid "Generic Alias Type"
msgstr ""

#: ../../library/stdtypes.rst:4915
msgid ""
"``GenericAlias`` objects are generally created by :ref:`subscripting "
"<subscriptions>` a class. They are most often used with :ref:`container "
"classes <sequence-types>`, such as :class:`list` or :class:`dict`. For "
"example, ``list[int]`` is a ``GenericAlias`` object created by subscripting "
"the ``list`` class with the argument :class:`int`. ``GenericAlias`` objects "
"are intended primarily for use with :term:`type annotations <annotation>`."
msgstr ""

#: ../../library/stdtypes.rst:4925
msgid ""
"It is generally only possible to subscript a class if the class implements "
"the special method :meth:`~object.__class_getitem__`."
msgstr ""

#: ../../library/stdtypes.rst:4928
msgid ""
"A ``GenericAlias`` object acts as a proxy for a :term:`generic type`, "
"implementing *parameterized generics*."
msgstr ""

#: ../../library/stdtypes.rst:4931
msgid ""
"For a container class, the argument(s) supplied to a :ref:`subscription "
"<subscriptions>` of the class may indicate the type(s) of the elements an "
"object contains. For example, ``set[bytes]`` can be used in type annotations "
"to signify a :class:`set` in which all the elements are of type :class:"
"`bytes`."
msgstr ""

#: ../../library/stdtypes.rst:4937
msgid ""
"For a class which defines :meth:`~object.__class_getitem__` but is not a "
"container, the argument(s) supplied to a subscription of the class will "
"often indicate the return type(s) of one or more methods defined on an "
"object. For example, :mod:`regular expressions <re>` can be used on both "
"the :class:`str` data type and the :class:`bytes` data type:"
msgstr ""

#: ../../library/stdtypes.rst:4943
msgid ""
"If ``x = re.search('foo', 'foo')``, ``x`` will be a :ref:`re.Match <match-"
"objects>` object where the return values of ``x.group(0)`` and ``x[0]`` will "
"both be of type :class:`str`. We can represent this kind of object in type "
"annotations with the ``GenericAlias`` ``re.Match[str]``."
msgstr ""

#: ../../library/stdtypes.rst:4949
msgid ""
"If ``y = re.search(b'bar', b'bar')``, (note the ``b`` for :class:`bytes`), "
"``y`` will also be an instance of ``re.Match``, but the return values of ``y."
"group(0)`` and ``y[0]`` will both be of type :class:`bytes`. In type "
"annotations, we would represent this variety of :ref:`re.Match <match-"
"objects>` objects with ``re.Match[bytes]``."
msgstr ""

#: ../../library/stdtypes.rst:4955
msgid ""
"``GenericAlias`` objects are instances of the class :class:`types."
"GenericAlias`, which can also be used to create ``GenericAlias`` objects "
"directly."
msgstr ""

#: ../../library/stdtypes.rst:4961
msgid ""
"Creates a ``GenericAlias`` representing a type ``T`` parameterized by types "
"*X*, *Y*, and more depending on the ``T`` used. For example, a function "
"expecting a :class:`list` containing :class:`float` elements::"
msgstr ""

#: ../../library/stdtypes.rst:4966
msgid ""
"def average(values: list[float]) -> float:\n"
"    return sum(values) / len(values)"
msgstr ""

#: ../../library/stdtypes.rst:4969
msgid ""
"Another example for :term:`mapping` objects, using a :class:`dict`, which is "
"a generic type expecting two type parameters representing the key type and "
"the value type.  In this example, the function expects a ``dict`` with keys "
"of type :class:`str` and values of type :class:`int`::"
msgstr ""

#: ../../library/stdtypes.rst:4974
msgid ""
"def send_post_request(url: str, body: dict[str, int]) -> None:\n"
"    ..."
msgstr ""

#: ../../library/stdtypes.rst:4977
msgid ""
"The builtin functions :func:`isinstance` and :func:`issubclass` do not "
"accept ``GenericAlias`` types for their second argument::"
msgstr ""

#: ../../library/stdtypes.rst:4980
msgid ""
">>> isinstance([1, 2], list[str])\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: isinstance() argument 2 cannot be a parameterized generic"
msgstr ""

#: ../../library/stdtypes.rst:4985
msgid ""
"The Python runtime does not enforce :term:`type annotations <annotation>`. "
"This extends to generic types and their type parameters. When creating a "
"container object from a ``GenericAlias``, the elements in the container are "
"not checked against their type. For example, the following code is "
"discouraged, but will run without errors::"
msgstr ""

#: ../../library/stdtypes.rst:4991
msgid ""
">>> t = list[str]\n"
">>> t([1, 2, 3])\n"
"[1, 2, 3]"
msgstr ""

#: ../../library/stdtypes.rst:4995
msgid ""
"Furthermore, parameterized generics erase type parameters during object "
"creation::"
msgstr ""

#: ../../library/stdtypes.rst:4998
msgid ""
">>> t = list[str]\n"
">>> type(t)\n"
"<class 'types.GenericAlias'>\n"
"\n"
">>> l = t()\n"
">>> type(l)\n"
"<class 'list'>"
msgstr ""

#: ../../library/stdtypes.rst:5006
msgid ""
"Calling :func:`repr` or :func:`str` on a generic shows the parameterized "
"type::"
msgstr ""

#: ../../library/stdtypes.rst:5008
msgid ""
">>> repr(list[int])\n"
"'list[int]'\n"
"\n"
">>> str(list[int])\n"
"'list[int]'"
msgstr ""

#: ../../library/stdtypes.rst:5014
msgid ""
"The :meth:`~object.__getitem__` method of generic containers will raise an "
"exception to disallow mistakes like ``dict[str][str]``::"
msgstr ""

#: ../../library/stdtypes.rst:5017
msgid ""
">>> dict[str][str]\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: dict[str] is not a generic class"
msgstr ""

#: ../../library/stdtypes.rst:5022
msgid ""
"However, such expressions are valid when :ref:`type variables <generics>` "
"are used.  The index must have as many elements as there are type variable "
"items in the ``GenericAlias`` object's :attr:`~genericalias.__args__`. ::"
msgstr ""

#: ../../library/stdtypes.rst:5026
msgid ""
">>> from typing import TypeVar\n"
">>> Y = TypeVar('Y')\n"
">>> dict[str, Y][int]\n"
"dict[str, int]"
msgstr ""

#: ../../library/stdtypes.rst:5033
msgid "Standard Generic Classes"
msgstr ""

#: ../../library/stdtypes.rst:5035
msgid ""
"The following standard library classes support parameterized generics. This "
"list is non-exhaustive."
msgstr ""

#: ../../library/stdtypes.rst:5038
msgid ":class:`tuple`"
msgstr ""

#: ../../library/stdtypes.rst:5039
msgid ":class:`list`"
msgstr ""

#: ../../library/stdtypes.rst:5040
msgid ":class:`dict`"
msgstr ""

#: ../../library/stdtypes.rst:5041
msgid ":class:`set`"
msgstr ""

#: ../../library/stdtypes.rst:5042
msgid ":class:`frozenset`"
msgstr ""

#: ../../library/stdtypes.rst:5043
msgid ":class:`type`"
msgstr ""

#: ../../library/stdtypes.rst:5044
msgid ":class:`asyncio.Future`"
msgstr ""

#: ../../library/stdtypes.rst:5045
msgid ":class:`asyncio.Task`"
msgstr ""

#: ../../library/stdtypes.rst:5046
msgid ":class:`collections.deque`"
msgstr ""

#: ../../library/stdtypes.rst:5047
msgid ":class:`collections.defaultdict`"
msgstr ""

#: ../../library/stdtypes.rst:5048
msgid ":class:`collections.OrderedDict`"
msgstr ""

#: ../../library/stdtypes.rst:5049
msgid ":class:`collections.Counter`"
msgstr ""

#: ../../library/stdtypes.rst:5050
msgid ":class:`collections.ChainMap`"
msgstr ""

#: ../../library/stdtypes.rst:5051
msgid ":class:`collections.abc.Awaitable`"
msgstr ""

#: ../../library/stdtypes.rst:5052
msgid ":class:`collections.abc.Coroutine`"
msgstr ""

#: ../../library/stdtypes.rst:5053
msgid ":class:`collections.abc.AsyncIterable`"
msgstr ""

#: ../../library/stdtypes.rst:5054
msgid ":class:`collections.abc.AsyncIterator`"
msgstr ""

#: ../../library/stdtypes.rst:5055
msgid ":class:`collections.abc.AsyncGenerator`"
msgstr ""

#: ../../library/stdtypes.rst:5056
msgid ":class:`collections.abc.Iterable`"
msgstr ""

#: ../../library/stdtypes.rst:5057
msgid ":class:`collections.abc.Iterator`"
msgstr ""

#: ../../library/stdtypes.rst:5058
msgid ":class:`collections.abc.Generator`"
msgstr ""

#: ../../library/stdtypes.rst:5059
msgid ":class:`collections.abc.Reversible`"
msgstr ""

#: ../../library/stdtypes.rst:5060
msgid ":class:`collections.abc.Container`"
msgstr ""

#: ../../library/stdtypes.rst:5061
msgid ":class:`collections.abc.Collection`"
msgstr ""

#: ../../library/stdtypes.rst:5062
msgid ":class:`collections.abc.Callable`"
msgstr ""

#: ../../library/stdtypes.rst:5063
msgid ":class:`collections.abc.Set`"
msgstr ""

#: ../../library/stdtypes.rst:5064
msgid ":class:`collections.abc.MutableSet`"
msgstr ""

#: ../../library/stdtypes.rst:5065
msgid ":class:`collections.abc.Mapping`"
msgstr ""

#: ../../library/stdtypes.rst:5066
msgid ":class:`collections.abc.MutableMapping`"
msgstr ""

#: ../../library/stdtypes.rst:5067
msgid ":class:`collections.abc.Sequence`"
msgstr ""

#: ../../library/stdtypes.rst:5068
msgid ":class:`collections.abc.MutableSequence`"
msgstr ""

#: ../../library/stdtypes.rst:5069
msgid ":class:`collections.abc.ByteString`"
msgstr ""

#: ../../library/stdtypes.rst:5070
msgid ":class:`collections.abc.MappingView`"
msgstr ""

#: ../../library/stdtypes.rst:5071
msgid ":class:`collections.abc.KeysView`"
msgstr ""

#: ../../library/stdtypes.rst:5072
msgid ":class:`collections.abc.ItemsView`"
msgstr ""

#: ../../library/stdtypes.rst:5073
msgid ":class:`collections.abc.ValuesView`"
msgstr ""

#: ../../library/stdtypes.rst:5074
msgid ":class:`contextlib.AbstractContextManager`"
msgstr ""

#: ../../library/stdtypes.rst:5075
msgid ":class:`contextlib.AbstractAsyncContextManager`"
msgstr ""

#: ../../library/stdtypes.rst:5076
msgid ":class:`dataclasses.Field`"
msgstr ""

#: ../../library/stdtypes.rst:5077
msgid ":class:`functools.cached_property`"
msgstr ""

#: ../../library/stdtypes.rst:5078
msgid ":class:`functools.partialmethod`"
msgstr ""

#: ../../library/stdtypes.rst:5079
msgid ":class:`os.PathLike`"
msgstr ""

#: ../../library/stdtypes.rst:5080
msgid ":class:`queue.LifoQueue`"
msgstr ""

#: ../../library/stdtypes.rst:5081
msgid ":class:`queue.Queue`"
msgstr ""

#: ../../library/stdtypes.rst:5082
msgid ":class:`queue.PriorityQueue`"
msgstr ""

#: ../../library/stdtypes.rst:5083
msgid ":class:`queue.SimpleQueue`"
msgstr ""

#: ../../library/stdtypes.rst:5084
msgid ":ref:`re.Pattern <re-objects>`"
msgstr ""

#: ../../library/stdtypes.rst:5085
msgid ":ref:`re.Match <match-objects>`"
msgstr ""

#: ../../library/stdtypes.rst:5086
msgid ":class:`shelve.BsdDbShelf`"
msgstr ""

#: ../../library/stdtypes.rst:5087
msgid ":class:`shelve.DbfilenameShelf`"
msgstr ""

#: ../../library/stdtypes.rst:5088
msgid ":class:`shelve.Shelf`"
msgstr ""

#: ../../library/stdtypes.rst:5089
msgid ":class:`types.MappingProxyType`"
msgstr ""

#: ../../library/stdtypes.rst:5090
msgid ":class:`weakref.WeakKeyDictionary`"
msgstr ""

#: ../../library/stdtypes.rst:5091
msgid ":class:`weakref.WeakMethod`"
msgstr ""

#: ../../library/stdtypes.rst:5092
msgid ":class:`weakref.WeakSet`"
msgstr ""

#: ../../library/stdtypes.rst:5093
msgid ":class:`weakref.WeakValueDictionary`"
msgstr ""

#: ../../library/stdtypes.rst:5098
msgid "Special Attributes of ``GenericAlias`` objects"
msgstr ""

#: ../../library/stdtypes.rst:5100
msgid "All parameterized generics implement special read-only attributes."
msgstr ""

#: ../../library/stdtypes.rst:5104
msgid "This attribute points at the non-parameterized generic class::"
msgstr ""

#: ../../library/stdtypes.rst:5106
msgid ""
">>> list[int].__origin__\n"
"<class 'list'>"
msgstr ""

#: ../../library/stdtypes.rst:5112
msgid ""
"This attribute is a :class:`tuple` (possibly of length 1) of generic types "
"passed to the original :meth:`~object.__class_getitem__` of the generic "
"class::"
msgstr ""

#: ../../library/stdtypes.rst:5116
msgid ""
">>> dict[str, list[int]].__args__\n"
"(<class 'str'>, list[int])"
msgstr ""

#: ../../library/stdtypes.rst:5122
msgid ""
"This attribute is a lazily computed tuple (possibly empty) of unique type "
"variables found in ``__args__``::"
msgstr ""

#: ../../library/stdtypes.rst:5125
msgid ""
">>> from typing import TypeVar\n"
"\n"
">>> T = TypeVar('T')\n"
">>> list[T].__parameters__\n"
"(~T,)"
msgstr ""

#: ../../library/stdtypes.rst:5133
msgid ""
"A ``GenericAlias`` object with :class:`typing.ParamSpec` parameters may not "
"have correct ``__parameters__`` after substitution because :class:`typing."
"ParamSpec` is intended primarily for static type checking."
msgstr ""

#: ../../library/stdtypes.rst:5140
msgid ""
"A boolean that is true if the alias has been unpacked using the ``*`` "
"operator (see :data:`~typing.TypeVarTuple`)."
msgstr ""

#: ../../library/stdtypes.rst:5148
msgid ":pep:`484` - Type Hints"
msgstr ""

#: ../../library/stdtypes.rst:5149
msgid "Introducing Python's framework for type annotations."
msgstr ""

#: ../../library/stdtypes.rst:5151
msgid ":pep:`585` - Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../library/stdtypes.rst:5152
msgid ""
"Introducing the ability to natively parameterize standard-library classes, "
"provided they implement the special class method :meth:`~object."
"__class_getitem__`."
msgstr ""

#: ../../library/stdtypes.rst:5156
msgid ""
":ref:`Generics`, :ref:`user-defined generics <user-defined-generics>` and :"
"class:`typing.Generic`"
msgstr ""

#: ../../library/stdtypes.rst:5157
msgid ""
"Documentation on how to implement generic classes that can be parameterized "
"at runtime and understood by static type-checkers."
msgstr ""

#: ../../library/stdtypes.rst:5166
msgid "Union Type"
msgstr ""

#: ../../library/stdtypes.rst:5172
msgid ""
"A union object holds the value of the ``|`` (bitwise or) operation on "
"multiple :ref:`type objects <bltin-type-objects>`.  These types are intended "
"primarily for :term:`type annotations <annotation>`. The union type "
"expression enables cleaner type hinting syntax compared to :data:`typing."
"Union`."
msgstr ""

#: ../../library/stdtypes.rst:5179
msgid ""
"Defines a union object which holds types *X*, *Y*, and so forth. ``X | Y`` "
"means either X or Y.  It is equivalent to ``typing.Union[X, Y]``. For "
"example, the following function expects an argument of type :class:`int` or :"
"class:`float`::"
msgstr ""

#: ../../library/stdtypes.rst:5184
msgid ""
"def square(number: int | float) -> int | float:\n"
"    return number ** 2"
msgstr ""
"def quadrado(número: int | float) -> int | float:\n"
"    return número ** 2"

#: ../../library/stdtypes.rst:5189
msgid ""
"The ``|`` operand cannot be used at runtime to define unions where one or "
"more members is a forward reference. For example, ``int | \"Foo\"``, where "
"``\"Foo\"`` is a reference to a class not yet defined, will fail at runtime. "
"For unions which include forward references, present the whole expression as "
"a string, e.g. ``\"int | Foo\"``."
msgstr ""

#: ../../library/stdtypes.rst:5197
msgid ""
"Union objects can be tested for equality with other union objects.  Details:"
msgstr ""

#: ../../library/stdtypes.rst:5199
msgid "Unions of unions are flattened::"
msgstr ""

#: ../../library/stdtypes.rst:5201
msgid "(int | str) | float == int | str | float"
msgstr ""

#: ../../library/stdtypes.rst:5203
msgid "Redundant types are removed::"
msgstr ""

#: ../../library/stdtypes.rst:5205
msgid "int | str | int == int | str"
msgstr ""

#: ../../library/stdtypes.rst:5207
msgid "When comparing unions, the order is ignored::"
msgstr ""

#: ../../library/stdtypes.rst:5209
msgid "int | str == str | int"
msgstr ""

#: ../../library/stdtypes.rst:5211
msgid "It is compatible with :data:`typing.Union`::"
msgstr ""

#: ../../library/stdtypes.rst:5213
msgid "int | str == typing.Union[int, str]"
msgstr ""

#: ../../library/stdtypes.rst:5215
msgid "Optional types can be spelled as a union with ``None``::"
msgstr ""

#: ../../library/stdtypes.rst:5217
msgid "str | None == typing.Optional[str]"
msgstr ""

#: ../../library/stdtypes.rst:5222
msgid ""
"Calls to :func:`isinstance` and :func:`issubclass` are also supported with a "
"union object::"
msgstr ""

#: ../../library/stdtypes.rst:5225
msgid ""
">>> isinstance(\"\", int | str)\n"
"True"
msgstr ""

#: ../../library/stdtypes.rst:5228
msgid ""
"However, :ref:`parameterized generics <types-genericalias>` in union objects "
"cannot be checked::"
msgstr ""

#: ../../library/stdtypes.rst:5231
msgid ""
">>> isinstance(1, int | list[int])  # short-circuit evaluation\n"
"True\n"
">>> isinstance([1], int | list[int])\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: isinstance() argument 2 cannot be a parameterized generic"
msgstr ""

#: ../../library/stdtypes.rst:5238
msgid ""
"The user-exposed type for the union object can be accessed from :data:`types."
"UnionType` and used for :func:`isinstance` checks.  An object cannot be "
"instantiated from the type::"
msgstr ""

#: ../../library/stdtypes.rst:5242
msgid ""
">>> import types\n"
">>> isinstance(int | str, types.UnionType)\n"
"True\n"
">>> types.UnionType()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: cannot create 'types.UnionType' instances"
msgstr ""

#: ../../library/stdtypes.rst:5251
msgid ""
"The :meth:`!__or__` method for type objects was added to support the syntax "
"``X | Y``.  If a metaclass implements :meth:`!__or__`, the Union may "
"override it:"
msgstr ""

#: ../../library/stdtypes.rst:5255
msgid ""
">>> class M(type):\n"
"...     def __or__(self, other):\n"
"...         return \"Hello\"\n"
"...\n"
">>> class C(metaclass=M):\n"
"...     pass\n"
"...\n"
">>> C | int\n"
"'Hello'\n"
">>> int | C\n"
"int | C"
msgstr ""

#: ../../library/stdtypes.rst:5271
msgid ":pep:`604` -- PEP proposing the ``X | Y`` syntax and the Union type."
msgstr ""

#: ../../library/stdtypes.rst:5279
msgid "Other Built-in Types"
msgstr ""

#: ../../library/stdtypes.rst:5281
msgid ""
"The interpreter supports several other kinds of objects. Most of these "
"support only one or two operations."
msgstr ""

#: ../../library/stdtypes.rst:5288
msgid "Modules"
msgstr "Módulos"

#: ../../library/stdtypes.rst:5290
msgid ""
"The only special operation on a module is attribute access: ``m.name``, "
"where *m* is a module and *name* accesses a name defined in *m*'s symbol "
"table. Module attributes can be assigned to.  (Note that the :keyword:"
"`import` statement is not, strictly speaking, an operation on a module "
"object; ``import foo`` does not require a module object named *foo* to "
"exist, rather it requires an (external) *definition* for a module named "
"*foo* somewhere.)"
msgstr ""

#: ../../library/stdtypes.rst:5297
msgid ""
"A special attribute of every module is :attr:`~object.__dict__`. This is the "
"dictionary containing the module's symbol table. Modifying this dictionary "
"will actually change the module's symbol table, but direct assignment to "
"the :attr:`~object.__dict__` attribute is not possible (you can write ``m."
"__dict__['a'] = 1``, which defines ``m.a`` to be ``1``, but you can't write "
"``m.__dict__ = {}``).  Modifying :attr:`~object.__dict__` directly is not "
"recommended."
msgstr ""

#: ../../library/stdtypes.rst:5305
msgid ""
"Modules built into the interpreter are written like this: ``<module "
"'sys' (built-in)>``.  If loaded from a file, they are written as ``<module "
"'os' from '/usr/local/lib/pythonX.Y/os.pyc'>``."
msgstr ""

#: ../../library/stdtypes.rst:5313
msgid "Classes and Class Instances"
msgstr ""

#: ../../library/stdtypes.rst:5315
msgid "See :ref:`objects` and :ref:`class` for these."
msgstr ""

#: ../../library/stdtypes.rst:5321
msgid "Functions"
msgstr "Funções"

#: ../../library/stdtypes.rst:5323
msgid ""
"Function objects are created by function definitions.  The only operation on "
"a function object is to call it: ``func(argument-list)``."
msgstr ""

#: ../../library/stdtypes.rst:5326
msgid ""
"There are really two flavors of function objects: built-in functions and "
"user-defined functions.  Both support the same operation (to call the "
"function), but the implementation is different, hence the different object "
"types."
msgstr ""

#: ../../library/stdtypes.rst:5330
msgid "See :ref:`function` for more information."
msgstr ""

#: ../../library/stdtypes.rst:5336
msgid "Methods"
msgstr "Métodos"

#: ../../library/stdtypes.rst:5340
msgid ""
"Methods are functions that are called using the attribute notation. There "
"are two flavors: :ref:`built-in methods <builtin-methods>` (such as :meth:"
"`append` on lists) and :ref:`class instance method <instance-methods>`. "
"Built-in methods are described with the types that support them."
msgstr ""

#: ../../library/stdtypes.rst:5345
msgid ""
"If you access a method (a function defined in a class namespace) through an "
"instance, you get a special object: a :dfn:`bound method` (also called :ref:"
"`instance method <instance-methods>`) object. When called, it will add the "
"``self`` argument to the argument list.  Bound methods have two special read-"
"only attributes: :attr:`m.__self__ <method.__self__>` is the object on which "
"the method operates, and :attr:`m.__func__ <method.__func__>` is the "
"function implementing the method.  Calling ``m(arg-1, arg-2, ..., arg-n)`` "
"is completely equivalent to calling ``m.__func__(m.__self__, arg-1, "
"arg-2, ..., arg-n)``."
msgstr ""

#: ../../library/stdtypes.rst:5356
msgid ""
"Like :ref:`function objects <user-defined-funcs>`, bound method objects "
"support getting arbitrary attributes.  However, since method attributes are "
"actually stored on the underlying function object (:attr:`method.__func__`), "
"setting method attributes on bound methods is disallowed.  Attempting to set "
"an attribute on a method results in an :exc:`AttributeError` being raised.  "
"In order to set a method attribute, you need to explicitly set it on the "
"underlying function object:"
msgstr ""

#: ../../library/stdtypes.rst:5364
msgid ""
">>> class C:\n"
"...     def method(self):\n"
"...         pass\n"
"...\n"
">>> c = C()\n"
">>> c.method.whoami = 'my name is method'  # can't set on the method\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: 'method' object has no attribute 'whoami'\n"
">>> c.method.__func__.whoami = 'my name is method'\n"
">>> c.method.whoami\n"
"'my name is method'"
msgstr ""

#: ../../library/stdtypes.rst:5379
msgid "See :ref:`instance-methods` for more information."
msgstr ""

#: ../../library/stdtypes.rst:5387
msgid "Code Objects"
msgstr "Objetos código"

#: ../../library/stdtypes.rst:5393
msgid ""
"Code objects are used by the implementation to represent \"pseudo-compiled\" "
"executable Python code such as a function body. They differ from function "
"objects because they don't contain a reference to their global execution "
"environment.  Code objects are returned by the built-in :func:`compile` "
"function and can be extracted from function objects through their :attr:"
"`~function.__code__` attribute. See also the :mod:`code` module."
msgstr ""

#: ../../library/stdtypes.rst:5400
msgid ""
"Accessing :attr:`~function.__code__` raises an :ref:`auditing event "
"<auditing>` ``object.__getattr__`` with arguments ``obj`` and "
"``\"__code__\"``."
msgstr ""

#: ../../library/stdtypes.rst:5407
msgid ""
"A code object can be executed or evaluated by passing it (instead of a "
"source string) to the :func:`exec` or :func:`eval`  built-in functions."
msgstr ""

#: ../../library/stdtypes.rst:5410
msgid "See :ref:`types` for more information."
msgstr ""

#: ../../library/stdtypes.rst:5416
msgid "Type Objects"
msgstr ""

#: ../../library/stdtypes.rst:5422
msgid ""
"Type objects represent the various object types.  An object's type is "
"accessed by the built-in function :func:`type`.  There are no special "
"operations on types.  The standard module :mod:`types` defines names for all "
"standard built-in types."
msgstr ""

#: ../../library/stdtypes.rst:5427
msgid "Types are written like this: ``<class 'int'>``."
msgstr ""

#: ../../library/stdtypes.rst:5433
msgid "The Null Object"
msgstr ""

#: ../../library/stdtypes.rst:5435
msgid ""
"This object is returned by functions that don't explicitly return a value.  "
"It supports no special operations.  There is exactly one null object, named "
"``None`` (a built-in name).  ``type(None)()`` produces the same singleton."
msgstr ""

#: ../../library/stdtypes.rst:5439
msgid "It is written as ``None``."
msgstr ""

#: ../../library/stdtypes.rst:5446
msgid "The Ellipsis Object"
msgstr ""

#: ../../library/stdtypes.rst:5448
msgid ""
"This object is commonly used by slicing (see :ref:`slicings`).  It supports "
"no special operations.  There is exactly one ellipsis object, named :const:"
"`Ellipsis` (a built-in name).  ``type(Ellipsis)()`` produces the :const:"
"`Ellipsis` singleton."
msgstr ""

#: ../../library/stdtypes.rst:5453
msgid "It is written as ``Ellipsis`` or ``...``."
msgstr ""

#: ../../library/stdtypes.rst:5459
msgid "The NotImplemented Object"
msgstr ""

#: ../../library/stdtypes.rst:5461
msgid ""
"This object is returned from comparisons and binary operations when they are "
"asked to operate on types they don't support. See :ref:`comparisons` for "
"more information.  There is exactly one :data:`NotImplemented` object. :code:"
"`type(NotImplemented)()` produces the singleton instance."
msgstr ""

#: ../../library/stdtypes.rst:5466
msgid "It is written as :code:`NotImplemented`."
msgstr ""

#: ../../library/stdtypes.rst:5472
msgid "Internal Objects"
msgstr ""

#: ../../library/stdtypes.rst:5474
msgid ""
"See :ref:`types` for this information.  It describes :ref:`stack frame "
"objects <frame-objects>`, :ref:`traceback objects <traceback-objects>`, and "
"slice objects."
msgstr ""

#: ../../library/stdtypes.rst:5482
msgid "Special Attributes"
msgstr ""

#: ../../library/stdtypes.rst:5484
msgid ""
"The implementation adds a few special read-only attributes to several object "
"types, where they are relevant.  Some of these are not reported by the :func:"
"`dir` built-in function."
msgstr ""

#: ../../library/stdtypes.rst:5491
msgid ""
"The name of the class, function, method, descriptor, or generator instance."
msgstr ""

#: ../../library/stdtypes.rst:5497
msgid ""
"The :term:`qualified name` of the class, function, method, descriptor, or "
"generator instance."
msgstr ""

#: ../../library/stdtypes.rst:5505
msgid "The name of the module in which a class or function was defined."
msgstr ""

#: ../../library/stdtypes.rst:5510
msgid ""
"The documentation string of a class or function, or ``None`` if undefined."
msgstr ""

#: ../../library/stdtypes.rst:5515
msgid ""
"The :ref:`type parameters <type-params>` of generic classes, functions, and :"
"ref:`type aliases <type-aliases>`. For classes and functions that are not "
"generic, this will be an empty tuple."
msgstr ""

#: ../../library/stdtypes.rst:5525
msgid "Integer string conversion length limitation"
msgstr ""

#: ../../library/stdtypes.rst:5527
msgid ""
"CPython has a global limit for converting between :class:`int` and :class:"
"`str` to mitigate denial of service attacks. This limit *only* applies to "
"decimal or other non-power-of-two number bases. Hexadecimal, octal, and "
"binary conversions are unlimited. The limit can be configured."
msgstr ""

#: ../../library/stdtypes.rst:5532
msgid ""
"The :class:`int` type in CPython is an arbitrary length number stored in "
"binary form (commonly known as a \"bignum\"). There exists no algorithm that "
"can convert a string to a binary integer or a binary integer to a string in "
"linear time, *unless* the base is a power of 2. Even the best known "
"algorithms for base 10 have sub-quadratic complexity. Converting a large "
"value such as ``int('1' * 500_000)`` can take over a second on a fast CPU."
msgstr ""

#: ../../library/stdtypes.rst:5539
msgid ""
"Limiting conversion size offers a practical way to avoid :cve:`2020-10735`."
msgstr ""

#: ../../library/stdtypes.rst:5541
msgid ""
"The limit is applied to the number of digit characters in the input or "
"output string when a non-linear conversion algorithm would be involved.  "
"Underscores and the sign are not counted towards the limit."
msgstr ""

#: ../../library/stdtypes.rst:5545
msgid ""
"When an operation would exceed the limit, a :exc:`ValueError` is raised:"
msgstr ""

#: ../../library/stdtypes.rst:5547
msgid ""
">>> import sys\n"
">>> sys.set_int_max_str_digits(4300)  # Illustrative, this is the default.\n"
">>> _ = int('2' * 5432)\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Exceeds the limit (4300 digits) for integer string conversion: "
"value has 5432 digits; use sys.set_int_max_str_digits() to increase the "
"limit\n"
">>> i = int('2' * 4300)\n"
">>> len(str(i))\n"
"4300\n"
">>> i_squared = i*i\n"
">>> len(str(i_squared))\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Exceeds the limit (4300 digits) for integer string conversion; "
"use sys.set_int_max_str_digits() to increase the limit\n"
">>> len(hex(i_squared))\n"
"7144\n"
">>> assert int(hex(i_squared), base=16) == i*i  # Hexadecimal is unlimited."
msgstr ""

#: ../../library/stdtypes.rst:5567
msgid ""
"The default limit is 4300 digits as provided in :data:`sys.int_info."
"default_max_str_digits <sys.int_info>`. The lowest limit that can be "
"configured is 640 digits as provided in :data:`sys.int_info."
"str_digits_check_threshold <sys.int_info>`."
msgstr ""

#: ../../library/stdtypes.rst:5572
msgid "Verification:"
msgstr ""

#: ../../library/stdtypes.rst:5574
msgid ""
">>> import sys\n"
">>> assert sys.int_info.default_max_str_digits == 4300, sys.int_info\n"
">>> assert sys.int_info.str_digits_check_threshold == 640, sys.int_info\n"
">>> msg = int('578966293710682886880994035146873798396722250538762761564'\n"
"...           '9252925514383915483333812743580549779436104706260696366600'\n"
"...           '571186405732').to_bytes(53, 'big')\n"
"..."
msgstr ""

#: ../../library/stdtypes.rst:5587
msgid "Affected APIs"
msgstr ""

#: ../../library/stdtypes.rst:5589
msgid ""
"The limitation only applies to potentially slow conversions between :class:"
"`int` and :class:`str` or :class:`bytes`:"
msgstr ""

#: ../../library/stdtypes.rst:5592
msgid "``int(string)`` with default base 10."
msgstr ""

#: ../../library/stdtypes.rst:5593
msgid "``int(string, base)`` for all bases that are not a power of 2."
msgstr ""

#: ../../library/stdtypes.rst:5594
msgid "``str(integer)``."
msgstr ""

#: ../../library/stdtypes.rst:5595
msgid "``repr(integer)``."
msgstr ""

#: ../../library/stdtypes.rst:5596
msgid ""
"any other string conversion to base 10, for example ``f\"{integer}\"``, "
"``\"{}\".format(integer)``, or ``b\"%d\" % integer``."
msgstr ""

#: ../../library/stdtypes.rst:5599
msgid "The limitations do not apply to functions with a linear algorithm:"
msgstr ""

#: ../../library/stdtypes.rst:5601
msgid "``int(string, base)`` with base 2, 4, 8, 16, or 32."
msgstr ""

#: ../../library/stdtypes.rst:5602
msgid ":func:`int.from_bytes` and :func:`int.to_bytes`."
msgstr ""

#: ../../library/stdtypes.rst:5603
msgid ":func:`hex`, :func:`oct`, :func:`bin`."
msgstr ""

#: ../../library/stdtypes.rst:5604
msgid ":ref:`formatspec` for hex, octal, and binary numbers."
msgstr ""

#: ../../library/stdtypes.rst:5605
msgid ":class:`str` to :class:`float`."
msgstr ""

#: ../../library/stdtypes.rst:5606
msgid ":class:`str` to :class:`decimal.Decimal`."
msgstr ""

#: ../../library/stdtypes.rst:5609
msgid "Configuring the limit"
msgstr ""

#: ../../library/stdtypes.rst:5611
msgid ""
"Before Python starts up you can use an environment variable or an "
"interpreter command line flag to configure the limit:"
msgstr ""

#: ../../library/stdtypes.rst:5614
msgid ""
":envvar:`PYTHONINTMAXSTRDIGITS`, e.g. ``PYTHONINTMAXSTRDIGITS=640 python3`` "
"to set the limit to 640 or ``PYTHONINTMAXSTRDIGITS=0 python3`` to disable "
"the limitation."
msgstr ""

#: ../../library/stdtypes.rst:5617
msgid ""
":option:`-X int_max_str_digits <-X>`, e.g. ``python3 -X "
"int_max_str_digits=640``"
msgstr ""

#: ../../library/stdtypes.rst:5619
msgid ""
":data:`sys.flags.int_max_str_digits` contains the value of :envvar:"
"`PYTHONINTMAXSTRDIGITS` or :option:`-X int_max_str_digits <-X>`. If both the "
"env var and the ``-X`` option are set, the ``-X`` option takes precedence. A "
"value of *-1* indicates that both were unset, thus a value of :data:`sys."
"int_info.default_max_str_digits` was used during initialization."
msgstr ""

#: ../../library/stdtypes.rst:5625
msgid ""
"From code, you can inspect the current limit and set a new one using these :"
"mod:`sys` APIs:"
msgstr ""

#: ../../library/stdtypes.rst:5628
msgid ""
":func:`sys.get_int_max_str_digits` and :func:`sys.set_int_max_str_digits` "
"are a getter and setter for the interpreter-wide limit. Subinterpreters have "
"their own limit."
msgstr ""

#: ../../library/stdtypes.rst:5632
msgid ""
"Information about the default and minimum can be found in :data:`sys."
"int_info`:"
msgstr ""

#: ../../library/stdtypes.rst:5634
msgid ""
":data:`sys.int_info.default_max_str_digits <sys.int_info>` is the compiled-"
"in default limit."
msgstr ""

#: ../../library/stdtypes.rst:5636
msgid ""
":data:`sys.int_info.str_digits_check_threshold <sys.int_info>` is the lowest "
"accepted value for the limit (other than 0 which disables it)."
msgstr ""

#: ../../library/stdtypes.rst:5643
msgid ""
"Setting a low limit *can* lead to problems. While rare, code exists that "
"contains integer constants in decimal in their source that exceed the "
"minimum threshold. A consequence of setting the limit is that Python source "
"code containing decimal integer literals longer than the limit will "
"encounter an error during parsing, usually at startup time or import time or "
"even at installation time - anytime an up to date ``.pyc`` does not already "
"exist for the code. A workaround for source that contains such large "
"constants is to convert them to ``0x`` hexadecimal form as it has no limit."
msgstr ""

#: ../../library/stdtypes.rst:5652
msgid ""
"Test your application thoroughly if you use a low limit. Ensure your tests "
"run with the limit set early via the environment or flag so that it applies "
"during startup and even during any installation step that may invoke Python "
"to precompile ``.py`` sources to ``.pyc`` files."
msgstr ""

#: ../../library/stdtypes.rst:5658
msgid "Recommended configuration"
msgstr ""

#: ../../library/stdtypes.rst:5660
msgid ""
"The default :data:`sys.int_info.default_max_str_digits` is expected to be "
"reasonable for most applications. If your application requires a different "
"limit, set it from your main entry point using Python version agnostic code "
"as these APIs were added in security patch releases in versions before 3.12."
msgstr ""

#: ../../library/stdtypes.rst:5665
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/stdtypes.rst:5667
msgid ""
">>> import sys\n"
">>> if hasattr(sys, \"set_int_max_str_digits\"):\n"
"...     upper_bound = 68000\n"
"...     lower_bound = 4004\n"
"...     current_limit = sys.get_int_max_str_digits()\n"
"...     if current_limit == 0 or current_limit > upper_bound:\n"
"...         sys.set_int_max_str_digits(upper_bound)\n"
"...     elif current_limit < lower_bound:\n"
"...         sys.set_int_max_str_digits(lower_bound)"
msgstr ""

#: ../../library/stdtypes.rst:5677
msgid "If you need to disable it entirely, set it to ``0``."
msgstr ""

#: ../../library/stdtypes.rst:5681
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../library/stdtypes.rst:5682
msgid ""
"Additional information on these special methods may be found in the Python "
"Reference Manual (:ref:`customization`)."
msgstr ""

#: ../../library/stdtypes.rst:5685
msgid ""
"As a consequence, the list ``[1, 2]`` is considered equal to ``[1.0, 2.0]``, "
"and similarly for tuples."
msgstr ""

#: ../../library/stdtypes.rst:5688
msgid "They must have since the parser can't tell the type of the operands."
msgstr ""

#: ../../library/stdtypes.rst:5690
msgid ""
"Cased characters are those with general category property being one of "
"\"Lu\" (Letter, uppercase), \"Ll\" (Letter, lowercase), or \"Lt\" (Letter, "
"titlecase)."
msgstr ""

#: ../../library/stdtypes.rst:5693
msgid ""
"To format only a tuple you should therefore provide a singleton tuple whose "
"only element is the tuple to be formatted."
msgstr ""

#: ../../library/stdtypes.rst:13
msgid "built-in"
msgstr ""

#: ../../library/stdtypes.rst:13 ../../library/stdtypes.rst:316
#: ../../library/stdtypes.rst:393 ../../library/stdtypes.rst:950
#: ../../library/stdtypes.rst:1117 ../../library/stdtypes.rst:1139
#: ../../library/stdtypes.rst:1154 ../../library/stdtypes.rst:4432
#: ../../library/stdtypes.rst:5418
msgid "types"
msgstr "types"

#: ../../library/stdtypes.rst:34 ../../library/stdtypes.rst:1154
#: ../../library/stdtypes.rst:4432
msgid "statement"
msgstr "instrução"

#: ../../library/stdtypes.rst:34
msgid "if"
msgstr ""

#: ../../library/stdtypes.rst:34
msgid "while"
msgstr ""

#: ../../library/stdtypes.rst:34
msgid "truth"
msgstr ""

#: ../../library/stdtypes.rst:34
msgid "value"
msgstr ""

#: ../../library/stdtypes.rst:34 ../../library/stdtypes.rst:81
#: ../../library/stdtypes.rst:208 ../../library/stdtypes.rst:817
msgid "Boolean"
msgstr ""

#: ../../library/stdtypes.rst:34 ../../library/stdtypes.rst:81
#: ../../library/stdtypes.rst:393
msgid "operations"
msgstr ""

#: ../../library/stdtypes.rst:34
msgid "false"
msgstr ""

#: ../../library/stdtypes.rst:44
msgid "true"
msgstr ""

#: ../../library/stdtypes.rst:52
msgid "None (Built-in object)"
msgstr ""

#: ../../library/stdtypes.rst:52
msgid "False (Built-in object)"
msgstr ""

#: ../../library/stdtypes.rst:64 ../../library/stdtypes.rst:98
#: ../../library/stdtypes.rst:123 ../../library/stdtypes.rst:195
#: ../../library/stdtypes.rst:246 ../../library/stdtypes.rst:393
#: ../../library/stdtypes.rst:950
msgid "operator"
msgstr "operator"

#: ../../library/stdtypes.rst:64 ../../library/stdtypes.rst:98
msgid "or"
msgstr ""

#: ../../library/stdtypes.rst:64 ../../library/stdtypes.rst:98
msgid "and"
msgstr ""

#: ../../library/stdtypes.rst:64 ../../library/stdtypes.rst:817
msgid "False"
msgstr ""

#: ../../library/stdtypes.rst:64 ../../library/stdtypes.rst:817
msgid "True"
msgstr ""

#: ../../library/stdtypes.rst:98
msgid "not"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "chaining"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "comparisons"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "comparison"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "=="
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "< (less)"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "<="
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "> (greater)"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid ">="
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "!="
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "is"
msgstr ""

#: ../../library/stdtypes.rst:123
msgid "is not"
msgstr ""

#: ../../library/stdtypes.rst:163 ../../library/stdtypes.rst:208
#: ../../library/stdtypes.rst:934 ../../library/stdtypes.rst:1117
#: ../../library/stdtypes.rst:1139 ../../library/stdtypes.rst:1260
#: ../../library/stdtypes.rst:1339 ../../library/stdtypes.rst:1383
#: ../../library/stdtypes.rst:1504 ../../library/stdtypes.rst:1540
#: ../../library/stdtypes.rst:2523 ../../library/stdtypes.rst:2542
#: ../../library/stdtypes.rst:2649 ../../library/stdtypes.rst:4230
#: ../../library/stdtypes.rst:4432 ../../library/stdtypes.rst:4911
#: ../../library/stdtypes.rst:5168 ../../library/stdtypes.rst:5338
#: ../../library/stdtypes.rst:5382
msgid "object"
msgstr "objeto"

#: ../../library/stdtypes.rst:163 ../../library/stdtypes.rst:208
#: ../../library/stdtypes.rst:229 ../../library/stdtypes.rst:316
#: ../../library/stdtypes.rst:335
msgid "numeric"
msgstr "numérico"

#: ../../library/stdtypes.rst:163
msgid "objects"
msgstr ""

#: ../../library/stdtypes.rst:163
msgid "comparing"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__eq__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__ne__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__lt__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__le__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__gt__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:173
msgid "__ge__() (instance method)"
msgstr ""

#: ../../library/stdtypes.rst:195 ../../library/stdtypes.rst:950
msgid "in"
msgstr ""

#: ../../library/stdtypes.rst:195 ../../library/stdtypes.rst:950
msgid "not in"
msgstr ""

#: ../../library/stdtypes.rst:208 ../../library/stdtypes.rst:229
#: ../../library/stdtypes.rst:393
msgid "integer"
msgstr "inteiro"

#: ../../library/stdtypes.rst:208 ../../library/stdtypes.rst:229
msgid "floating-point"
msgstr "ponto flutuante"

#: ../../library/stdtypes.rst:208 ../../library/stdtypes.rst:229
msgid "complex number"
msgstr "número complexo"

#: ../../library/stdtypes.rst:208
msgid "C"
msgstr "C"

#: ../../library/stdtypes.rst:208
msgid "language"
msgstr ""

#: ../../library/stdtypes.rst:229
msgid "literals"
msgstr ""

#: ../../library/stdtypes.rst:229
msgid "hexadecimal"
msgstr ""

#: ../../library/stdtypes.rst:229
msgid "octal"
msgstr ""

#: ../../library/stdtypes.rst:229
msgid "binary"
msgstr ""

#: ../../library/stdtypes.rst:246
msgid "arithmetic"
msgstr ""

#: ../../library/stdtypes.rst:246 ../../library/stdtypes.rst:950
#: ../../library/stdtypes.rst:1117 ../../library/stdtypes.rst:4432
#: ../../library/stdtypes.rst:5389 ../../library/stdtypes.rst:5403
#: ../../library/stdtypes.rst:5418
msgid "built-in function"
msgstr "função incorporada"

#: ../../library/stdtypes.rst:246
msgid "int"
msgstr "int"

#: ../../library/stdtypes.rst:246
msgid "float"
msgstr ""

#: ../../library/stdtypes.rst:246
msgid "complex"
msgstr ""

#: ../../library/stdtypes.rst:246 ../../library/stdtypes.rst:2399
#: ../../library/stdtypes.rst:3618
msgid "+ (plus)"
msgstr ""

#: ../../library/stdtypes.rst:246
msgid "unary operator"
msgstr ""

#: ../../library/stdtypes.rst:246
msgid "binary operator"
msgstr ""

#: ../../library/stdtypes.rst:246 ../../library/stdtypes.rst:2399
#: ../../library/stdtypes.rst:3618
msgid "- (minus)"
msgstr ""

#: ../../library/stdtypes.rst:246 ../../library/stdtypes.rst:2356
#: ../../library/stdtypes.rst:3575
msgid "* (asterisk)"
msgstr "* (asterisco)"

#: ../../library/stdtypes.rst:246
msgid "/ (slash)"
msgstr ""

#: ../../library/stdtypes.rst:246
msgid "//"
msgstr ""

#: ../../library/stdtypes.rst:246 ../../library/stdtypes.rst:2326
#: ../../library/stdtypes.rst:3543
msgid "% (percent)"
msgstr ""

#: ../../library/stdtypes.rst:246
msgid "**"
msgstr "**"

#: ../../library/stdtypes.rst:316 ../../library/stdtypes.rst:393
#: ../../library/stdtypes.rst:950 ../../library/stdtypes.rst:1154
#: ../../library/stdtypes.rst:4432
msgid "operations on"
msgstr ""

#: ../../library/stdtypes.rst:316
msgid "conjugate() (complex number method)"
msgstr ""

#: ../../library/stdtypes.rst:335 ../../library/stdtypes.rst:1606
#: ../../library/stdtypes.rst:2523 ../../library/stdtypes.rst:5418
msgid "module"
msgstr "módulo"

#: ../../library/stdtypes.rst:335
msgid "math"
msgstr "math"

#: ../../library/stdtypes.rst:335
msgid "floor() (in module math)"
msgstr ""

#: ../../library/stdtypes.rst:335
msgid "ceil() (in module math)"
msgstr ""

#: ../../library/stdtypes.rst:335
msgid "trunc() (in module math)"
msgstr ""

#: ../../library/stdtypes.rst:335
msgid "conversions"
msgstr ""

#: ../../library/stdtypes.rst:393
msgid "bitwise"
msgstr ""

#: ../../library/stdtypes.rst:393
msgid "shifting"
msgstr ""

#: ../../library/stdtypes.rst:393
msgid "masking"
msgstr ""

#: ../../library/stdtypes.rst:393
msgid "| (vertical bar)"
msgstr ""

#: ../../library/stdtypes.rst:393
msgid "^ (caret)"
msgstr ""

#: ../../library/stdtypes.rst:393
msgid "& (ampersand)"
msgstr ""

#: ../../library/stdtypes.rst:393
msgid "<<"
msgstr ""

#: ../../library/stdtypes.rst:393
msgid ">>"
msgstr ""

#: ../../library/stdtypes.rst:393
msgid "~ (tilde)"
msgstr ""

#: ../../library/stdtypes.rst:817
msgid "values"
msgstr ""

#: ../../library/stdtypes.rst:847
msgid "iterator protocol"
msgstr ""

#: ../../library/stdtypes.rst:847 ../../library/stdtypes.rst:4826
msgid "protocol"
msgstr ""

#: ../../library/stdtypes.rst:847
msgid "iterator"
msgstr "iterador"

#: ../../library/stdtypes.rst:847 ../../library/stdtypes.rst:934
#: ../../library/stdtypes.rst:950 ../../library/stdtypes.rst:1117
#: ../../library/stdtypes.rst:1139 ../../library/stdtypes.rst:1154
msgid "sequence"
msgstr "sequência"

#: ../../library/stdtypes.rst:847
msgid "iteration"
msgstr ""

#: ../../library/stdtypes.rst:847
msgid "container"
msgstr ""

#: ../../library/stdtypes.rst:847
msgid "iteration over"
msgstr ""

#: ../../library/stdtypes.rst:950 ../../library/stdtypes.rst:4432
msgid "len"
msgstr "len"

#: ../../library/stdtypes.rst:950
msgid "min"
msgstr ""

#: ../../library/stdtypes.rst:950
msgid "max"
msgstr ""

#: ../../library/stdtypes.rst:950
msgid "concatenation"
msgstr ""

#: ../../library/stdtypes.rst:950
msgid "operation"
msgstr ""

#: ../../library/stdtypes.rst:950
msgid "repetition"
msgstr ""

#: ../../library/stdtypes.rst:950 ../../library/stdtypes.rst:1154
msgid "subscript"
msgstr ""

#: ../../library/stdtypes.rst:950 ../../library/stdtypes.rst:1154
msgid "slice"
msgstr "fatia"

#: ../../library/stdtypes.rst:950
msgid "count() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:950
msgid "index() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1006
msgid "loop"
msgstr ""

#: ../../library/stdtypes.rst:1006
msgid "over mutable sequence"
msgstr ""

#: ../../library/stdtypes.rst:1006
msgid "mutable sequence"
msgstr ""

#: ../../library/stdtypes.rst:1006
msgid "loop over"
msgstr ""

#: ../../library/stdtypes.rst:1117
msgid "immutable"
msgstr "imutável"

#: ../../library/stdtypes.rst:1117 ../../library/stdtypes.rst:1339
msgid "tuple"
msgstr "tupla"

#: ../../library/stdtypes.rst:1117
msgid "hash"
msgstr "hash"

#: ../../library/stdtypes.rst:1139
msgid "mutable"
msgstr "mutável"

#: ../../library/stdtypes.rst:1139 ../../library/stdtypes.rst:1154
#: ../../library/stdtypes.rst:1260
msgid "list"
msgstr "lista"

#: ../../library/stdtypes.rst:1139 ../../library/stdtypes.rst:2523
#: ../../library/stdtypes.rst:2649 ../../library/stdtypes.rst:2721
#: ../../library/stdtypes.rst:3543
msgid "bytearray"
msgstr "bytearray"

#: ../../library/stdtypes.rst:1154 ../../library/stdtypes.rst:4432
#: ../../library/stdtypes.rst:5168 ../../library/stdtypes.rst:5418
msgid "type"
msgstr "tipo"

#: ../../library/stdtypes.rst:1154
msgid "assignment"
msgstr ""

#: ../../library/stdtypes.rst:1154 ../../library/stdtypes.rst:4432
msgid "del"
msgstr ""

#: ../../library/stdtypes.rst:1154
msgid "append() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1154
msgid "clear() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1154
msgid "copy() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1154
msgid "extend() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1154
msgid "insert() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1154
msgid "pop() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1154
msgid "remove() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1154
msgid "reverse() (sequence method)"
msgstr ""

#: ../../library/stdtypes.rst:1383
msgid "range"
msgstr ""

#: ../../library/stdtypes.rst:1504 ../../library/stdtypes.rst:1553
#: ../../library/stdtypes.rst:1598 ../../library/stdtypes.rst:2326
msgid "string"
msgstr "string"

#: ../../library/stdtypes.rst:1504
msgid "text sequence type"
msgstr ""

#: ../../library/stdtypes.rst:1504 ../../library/stdtypes.rst:1553
#: ../../library/stdtypes.rst:1571
msgid "str (built-in class)"
msgstr ""

#: ../../library/stdtypes.rst:1504
msgid "(see also string)"
msgstr ""

#: ../../library/stdtypes.rst:1540
msgid "io.StringIO"
msgstr ""

#: ../../library/stdtypes.rst:1571 ../../library/stdtypes.rst:2515
msgid "buffer protocol"
msgstr "protocolo de buffer"

#: ../../library/stdtypes.rst:1571 ../../library/stdtypes.rst:2523
#: ../../library/stdtypes.rst:2542 ../../library/stdtypes.rst:2721
#: ../../library/stdtypes.rst:3543
msgid "bytes"
msgstr "bytes"

#: ../../library/stdtypes.rst:1598 ../../library/stdtypes.rst:2721
msgid "methods"
msgstr ""

#: ../../library/stdtypes.rst:1606
msgid "re"
msgstr "re"

#: ../../library/stdtypes.rst:2134 ../../library/stdtypes.rst:3397
msgid "universal newlines"
msgstr "novas linhas universais"

#: ../../library/stdtypes.rst:2134
msgid "str.splitlines method"
msgstr ""

#: ../../library/stdtypes.rst:2326
msgid "formatting, string (%)"
msgstr ""

#: ../../library/stdtypes.rst:2326
msgid "interpolation, string (%)"
msgstr ""

#: ../../library/stdtypes.rst:2326
msgid "formatting, printf"
msgstr ""

#: ../../library/stdtypes.rst:2326
msgid "interpolation, printf"
msgstr ""

#: ../../library/stdtypes.rst:2326 ../../library/stdtypes.rst:3543
msgid "printf-style formatting"
msgstr ""

#: ../../library/stdtypes.rst:2326 ../../library/stdtypes.rst:3543
msgid "sprintf-style formatting"
msgstr ""

#: ../../library/stdtypes.rst:2356 ../../library/stdtypes.rst:3575
msgid "() (parentheses)"
msgstr ""

#: ../../library/stdtypes.rst:2356 ../../library/stdtypes.rst:2399
#: ../../library/stdtypes.rst:3575 ../../library/stdtypes.rst:3618
msgid "in printf-style formatting"
msgstr ""

#: ../../library/stdtypes.rst:2356 ../../library/stdtypes.rst:3575
msgid ". (dot)"
msgstr ""

#: ../../library/stdtypes.rst:2399 ../../library/stdtypes.rst:3618
msgid "# (hash)"
msgstr "# (cerquilha)"

#: ../../library/stdtypes.rst:2399 ../../library/stdtypes.rst:3618
msgid "space"
msgstr ""

#: ../../library/stdtypes.rst:2515
msgid "binary sequence types"
msgstr ""

#: ../../library/stdtypes.rst:2523
msgid "memoryview"
msgstr "memoryview"

#: ../../library/stdtypes.rst:2523
msgid "array"
msgstr "array"

#: ../../library/stdtypes.rst:3397
msgid "bytes.splitlines method"
msgstr ""

#: ../../library/stdtypes.rst:3397
msgid "bytearray.splitlines method"
msgstr ""

#: ../../library/stdtypes.rst:3543
msgid "formatting"
msgstr ""

#: ../../library/stdtypes.rst:3543
msgid "bytes (%)"
msgstr ""

#: ../../library/stdtypes.rst:3543
msgid "bytearray (%)"
msgstr ""

#: ../../library/stdtypes.rst:3543
msgid "interpolation"
msgstr ""

#: ../../library/stdtypes.rst:4230
msgid "set"
msgstr ""

#: ../../library/stdtypes.rst:4432
msgid "mapping"
msgstr "mapeamento"

#: ../../library/stdtypes.rst:4432
msgid "dictionary"
msgstr "dicionário"

#: ../../library/stdtypes.rst:4515
msgid "__missing__()"
msgstr ""

#: ../../library/stdtypes.rst:4826
msgid "context manager"
msgstr "gestor de contexto"

#: ../../library/stdtypes.rst:4826
msgid "context management protocol"
msgstr "protocolo de gestão de contexto"

#: ../../library/stdtypes.rst:4826
msgid "context management"
msgstr ""

#: ../../library/stdtypes.rst:4899
msgid "annotation"
msgstr "anotação"

#: ../../library/stdtypes.rst:4899
msgid "type annotation; type hint"
msgstr ""

#: ../../library/stdtypes.rst:4911
msgid "GenericAlias"
msgstr ""

#: ../../library/stdtypes.rst:4911
msgid "Generic"
msgstr ""

#: ../../library/stdtypes.rst:4911
msgid "Alias"
msgstr ""

#: ../../library/stdtypes.rst:5168
msgid "Union"
msgstr ""

#: ../../library/stdtypes.rst:5168
msgid "union"
msgstr ""

#: ../../library/stdtypes.rst:5338
msgid "method"
msgstr "método"

#: ../../library/stdtypes.rst:5382
msgid "code"
msgstr "código"

#: ../../library/stdtypes.rst:5382
msgid "code object"
msgstr "objeto código"

#: ../../library/stdtypes.rst:5389
msgid "compile"
msgstr "compile"

#: ../../library/stdtypes.rst:5389
msgid "__code__ (function object attribute)"
msgstr ""

#: ../../library/stdtypes.rst:5403
msgid "exec"
msgstr ""

#: ../../library/stdtypes.rst:5403
msgid "eval"
msgstr ""

#: ../../library/stdtypes.rst:5442
msgid "..."
msgstr "..."

#: ../../library/stdtypes.rst:5442
msgid "ellipsis literal"
msgstr "literal de reticências"
