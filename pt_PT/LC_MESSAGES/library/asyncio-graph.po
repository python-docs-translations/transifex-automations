# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-19 14:16+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/asyncio-graph.rst:8
msgid "Call Graph Introspection"
msgstr "Introspeção do grafo de Chamadas"

#: ../../library/asyncio-graph.rst:10
msgid "**Source code:** :source:`Lib/asyncio/graph.py`"
msgstr "**Código-fonte:** :source:`Lib/asyncio/graph.py`"

#: ../../library/asyncio-graph.rst:14
msgid ""
"asyncio has powerful runtime call graph introspection utilities to trace the "
"entire call graph of a running *coroutine* or *task*, or a suspended "
"*future*.  These utilities and the underlying machinery can be used from "
"within a Python program or by external profilers and debuggers."
msgstr ""
"O asyncio disponibiliza utilitários poderosos de introspeção do grafo de "
"chamadas em tempo de execução, que permitem traçar o grafo de chamadas "
"completo de uma *corrotina* ou *tarefa* em execução, ou de um *future* "
"suspenso. Estes utilitários e a respetiva maquinaria subjacente podem ser "
"utilizados dentro de um programa Python ou por perfis externos e depuradores."

#: ../../library/asyncio-graph.rst:25
msgid ""
"Print the async call graph for the current task or the "
"provided :class:`Task` or :class:`Future`."
msgstr ""
"Imprime o grafo de chamadas assíncronas para a tarefa atual ou para "
"a :class:`Task` ou :class:`Future` fornecida."

#: ../../library/asyncio-graph.rst:28
msgid ""
"This function prints entries starting from the top frame and going down "
"towards the invocation point."
msgstr ""
"Esta função imprime as entradas a partir do quadro superior até ao ponto de "
"invocação."

#: ../../library/asyncio-graph.rst:31
msgid ""
"The function receives an optional *future* argument. If not passed, the "
"current running task will be used."
msgstr ""
"A função recebe um argumento opcional *future*. Se não for fornecido, será "
"utilizada a tarefa em execução atual."

#: ../../library/asyncio-graph.rst:34 ../../library/asyncio-graph.rst:93
msgid ""
"If the function is called on *the current task*, the optional keyword-only "
"*depth* argument can be used to skip the specified number of frames from top "
"of the stack."
msgstr ""
"Se a função for chamada na *tarefa atual*, o argumento opcional *depth*, que "
"só pode ser usado com somente-nomeados, pode ser usado para ignorar o número "
"especificado de quadros a partir do topo da pilha."

#: ../../library/asyncio-graph.rst:38
msgid ""
"If the optional keyword-only *limit* argument is provided, each call stack "
"in the resulting graph is truncated to include at most ``abs(limit)`` "
"entries. If *limit* is positive, the entries left are the closest to the "
"invocation point. If *limit* is negative, the topmost entries are left. If "
"*limit* is omitted or ``None``, all entries are present. If *limit* is "
"``0``, the call stack is not printed at all, only \"awaited by\" information "
"is printed."
msgstr ""
"Se o argumento somente-nomeado opcional *limit* for fornecido, cada pilha de "
"chamadas no gráfico resultante será truncada para incluir no máximo "
"``abs(limit)`` entradas. Se *limit* for positivo, as entradas restantes "
"serão as mais próximas do ponto de invocação. Se *limit* for negativo, as "
"entradas mais altas são deixadas. Se *limit* for omitido ou ``None``, todas "
"as entradas estão presentes. Se *limit* for ``0``, a pilha de chamadas não é "
"impressa, apenas as informações \"aguardadas por\" são impressas."

#: ../../library/asyncio-graph.rst:46
msgid ""
"If *file* is omitted or ``None``, the function will print "
"to :data:`sys.stdout`."
msgstr ""
"Se *file* for omitido ou ``None``, a função imprimirá "
"para :data:`sys.stdout`."

#: ../../library/asyncio-graph.rst:49
msgid "**Example:**"
msgstr "**Exemplo:**"

#: ../../library/asyncio-graph.rst:51
msgid "The following Python code:"
msgstr "O seguinte código Python:"

#: ../../library/asyncio-graph.rst:53
msgid ""
"import asyncio\n"
"\n"
"async def test():\n"
"    asyncio.print_call_graph()\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as g:\n"
"        g.create_task(test(), name='test')\n"
"\n"
"asyncio.run(main())"
msgstr ""
"import asyncio\n"
"\n"
"async def test():\n"
"    asyncio.print_call_graph()\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as g:\n"
"        g.create_task(test(), name='test')\n"
"\n"
"asyncio.run(main())"

#: ../../library/asyncio-graph.rst:66
msgid "will print::"
msgstr "imprimirá::"

#: ../../library/asyncio-graph.rst:68
msgid ""
"* Task(name='test', id=0x1039f0fe0)\n"
"+ Call stack:\n"
"|   File 't2.py', line 4, in async test()\n"
"+ Awaited by:\n"
"   * Task(name='Task-1', id=0x103a5e060)\n"
"      + Call stack:\n"
"      |   File 'taskgroups.py', line 107, in async TaskGroup.__aexit__()\n"
"      |   File 't2.py', line 7, in async main()"
msgstr ""
"* Task(name='test', id=0x1039f0fe0)\n"
"+ Pilha de chamadas:\n"
"|   Ficheiro 't2.py', linha 4, em async test()\n"
"+ Aguardado por:\n"
"   * Task(name='Task-1', id=0x103a5e060)\n"
"      + Pilha de chamadas:\n"
"      |   Ficheiro 'taskgroups.py', linha 107, em async "
"TaskGroup.__aexit__()\n"
"      |   Ficheiro 't2.py', linha 7, em async main()"

#: ../../library/asyncio-graph.rst:79
msgid ""
"Like :func:`print_call_graph`, but returns a string. If *future* is ``None`` "
"and there's no current task, the function returns an empty string."
msgstr ""
"Semelhante a :func:`print_call_graph`, mas retorna uma cadeia de caracteres. "
"Se *future* for ``None`` e não existir nenhuma tarefa atual, a função "
"retorna uma cadeia vazia."

#: ../../library/asyncio-graph.rst:86
msgid ""
"Capture the async call graph for the current task or the "
"provided :class:`Task` or :class:`Future`."
msgstr ""
"Captura o grafo de chamadas assíncronas para a tarefa atual ou para "
"a :class:`Task` ou :class:`Future` fornecida."

#: ../../library/asyncio-graph.rst:89
msgid ""
"The function receives an optional *future* argument. If not passed, the "
"current running task will be used. If there's no current task, the function "
"returns ``None``."
msgstr ""
"A função recebe um argumento opcional *future*. Se não for fornecido, será "
"utilizada a tarefa em execução atual. Se não existir nenhuma tarefa atual, a "
"função retorna ``None``."

#: ../../library/asyncio-graph.rst:97
msgid "Returns a ``FutureCallGraph`` data class object:"
msgstr "Retorna um objeto da classe de dados ``FutureCallGraph``:"

#: ../../library/asyncio-graph.rst:99
msgid "``FutureCallGraph(future, call_stack, awaited_by)``"
msgstr "``FutureCallGraph(future, call_stack, awaited_by)``"

#: ../../library/asyncio-graph.rst:101
msgid ""
"Where *future* is a reference to a :class:`Future` or a :class:`Task` (or "
"their subclasses.)"
msgstr ""
"Onde *future* é uma referência a um :class:`Future` ou a uma :class:`Task` "
"(ou às suas subclasses)."

#: ../../library/asyncio-graph.rst:104
msgid "``call_stack`` is a tuple of ``FrameCallGraphEntry`` objects."
msgstr "``call_stack`` é um tuplo de objetos ``FrameCallGraphEntry``."

#: ../../library/asyncio-graph.rst:106
msgid "``awaited_by`` is a tuple of ``FutureCallGraph`` objects."
msgstr "``awaited_by`` é um tuplo de objetos ``FutureCallGraph``."

#: ../../library/asyncio-graph.rst:108
msgid "``FrameCallGraphEntry(frame)``"
msgstr "``FrameCallGraphEntry(frame)``"

#: ../../library/asyncio-graph.rst:110
msgid ""
"Where *frame* is a frame object of a regular Python function in the call "
"stack."
msgstr ""
"Onde *frame* é um objeto de quadro de uma função Python regular na pilha de "
"chamadas."

#: ../../library/asyncio-graph.rst:115
msgid "Low level utility functions"
msgstr "Funções utilitárias de baixo nível"

#: ../../library/asyncio-graph.rst:117
msgid ""
"To introspect an async call graph asyncio requires cooperation from control "
"flow structures, such as :func:`shield` or :class:`TaskGroup`. Any time an "
"intermediate :class:`Future` object with low-level APIs "
"like :meth:`Future.add_done_callback() <asyncio.Future.add_done_callback>` "
"is involved, the following two functions should be used to inform asyncio "
"about how exactly such intermediate future objects are connected with the "
"tasks they wrap or control."
msgstr ""
"Para efetuar a introspeção de um grafo de chamadas assíncronas, o asyncio "
"requer a cooperação de estruturas de controlo de fluxo, como :func:`shield` "
"ou :class:`TaskGroup`. Sempre que um objeto :class:`Future` intermédio com "
"APIs de baixo nível, como :meth:`Future.add_done_callback() "
"<asyncio.Future.add_done_callback>`, estiver envolvido, as duas funções "
"seguintes devem ser utilizadas para informar o asyncio sobre a forma como "
"esses objetos *future* intermédios estão ligados às tarefas que envolvem ou "
"controlam."

#: ../../library/asyncio-graph.rst:128
msgid "Record that *future* is awaited on by *waiter*."
msgstr "Regista que *future* está a ser aguardado por *waiter*."

#: ../../library/asyncio-graph.rst:130 ../../library/asyncio-graph.rst:143
msgid ""
"Both *future* and *waiter* must be instances of :class:`Future` "
"or :class:`Task` or their subclasses, otherwise the call would have no "
"effect."
msgstr ""
"Tanto *future* como *waiter* devem ser instâncias de :class:`Future` "
"ou :class:`Task` ou das suas subclasses, caso contrário, a chamada não terá "
"efeito."

#: ../../library/asyncio-graph.rst:134
msgid ""
"A call to ``future_add_to_awaited_by()`` must be followed by an eventual "
"call to the :func:`future_discard_from_awaited_by` function with the same "
"arguments."
msgstr ""
"Uma chamada a ``future_add_to_awaited_by()`` deve ser seguida por uma "
"chamada eventual à função :func:`future_discard_from_awaited_by` com os "
"mesmos argumentos."

#: ../../library/asyncio-graph.rst:141
msgid "Record that *future* is no longer awaited on by *waiter*."
msgstr "Regista que *future* já não está a ser aguardado por *waiter*."
