# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 15:58+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ""

#: ../../library/typing.rst:16
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**Código-fonte:** :source:`Lib/typing.py`"

#: ../../library/typing.rst:20
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as :term:`type checkers <static "
"type checker>`, IDEs, linters, etc."
msgstr ""
"O tempo de execução do Python não impõe anotações de tipo de funções e "
"variáveis. Podem ser usadas por ferramentas de terceiros como :term:"
"`verificadores de tipo <static type checker>`, IDEs, linters, etc."

#: ../../library/typing.rst:26
msgid "This module provides runtime support for type hints."
msgstr "Este módulo fornece suporte em tempo de execução para dicas de tipo."

#: ../../library/typing.rst:28
msgid "Consider the function below::"
msgstr "Considere a função abaixo::"

#: ../../library/typing.rst:30
msgid ""
"def surface_area_of_cube(edge_length: float) -> str:\n"
"    return f\"The surface area of the cube is {6 * edge_length ** 2}.\""
msgstr ""
"def surface_area_of_cube(edge_length: float) -> str:\n"
"    return f\"A área de superfície do cubo é {6 * edge_length ** 2}.\""

#: ../../library/typing.rst:33
msgid ""
"The function ``surface_area_of_cube`` takes an argument expected to be an "
"instance of :class:`float`, as indicated by the :term:`type hint` "
"``edge_length: float``. The function is expected to return an instance of :"
"class:`str`, as indicated by the ``-> str`` hint."
msgstr ""
"A função ``surface_area_of_cube`` recebe um argumento esperado ser uma "
"instância de :class:`float`, como indicado pela :term:`dica de tipo` "
"``edge_length: float``. A função é esperada devolver uma instância de :class:"
"`str`, como indicado pela dica ``-> str``."

#: ../../library/typing.rst:38
msgid ""
"While type hints can be simple classes like :class:`float` or :class:`str`, "
"they can also be more complex. The :mod:`typing` module provides a "
"vocabulary of more advanced type hints."
msgstr ""
"Embora as dicas de tipo possam ser classes simples como :class:`float` ou :"
"class:`str`, também podem ser mais complexas. O módulo :mod:`typing` fornece "
"um vocabulário de dicas de tipo mais avançadas."

#: ../../library/typing.rst:42
msgid ""
"New features are frequently added to the ``typing`` module. The :pypi:"
"`typing_extensions` package provides backports of these new features to "
"older versions of Python."
msgstr ""
"Novas funcionalidades são frequentemente adicionadas ao módulo ``typing``. O "
"pacote :pypi:`typing_extensions` fornece retroportagens destas novas "
"funcionalidades para versões mais antigas do Python."

#: ../../library/typing.rst:48
msgid ""
"`\"Typing cheat sheet\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"
msgstr ""

#: ../../library/typing.rst:49
msgid "A quick overview of type hints (hosted at the mypy docs)"
msgstr ""
"Uma visão geral rápida de dicas de tipo (alojado na documentação do mypy)"

#: ../../library/typing.rst:51
msgid ""
"\"Type System Reference\" section of `the mypy docs <https://mypy."
"readthedocs.io/en/stable/index.html>`_"
msgstr ""

#: ../../library/typing.rst:52
msgid ""
"The Python typing system is standardised via PEPs, so this reference should "
"broadly apply to most Python type checkers. (Some parts may still be "
"specific to mypy.)"
msgstr ""
"O sistema de tipos do Python é padronizado através de PEPs, pelo que esta "
"referência deve aplicar-se amplamente à maioria dos verificadores de tipo do "
"Python. (Algumas partes ainda podem ser específicas do mypy.)"

#: ../../library/typing.rst:56
msgid "`\"Static Typing with Python\" <https://typing.python.org/en/latest/>`_"
msgstr ""

#: ../../library/typing.rst:57
msgid ""
"Type-checker-agnostic documentation written by the community detailing type "
"system features, useful typing related tools and typing best practices."
msgstr ""

#: ../../library/typing.rst:64
msgid "Specification for the Python Type System"
msgstr "Especificação para o Sistema de Tipos do Python"

#: ../../library/typing.rst:66
msgid ""
"The canonical, up-to-date specification of the Python type system can be "
"found at `\"Specification for the Python type system\" <https://typing."
"python.org/en/latest/spec/index.html>`_."
msgstr ""

#: ../../library/typing.rst:72
msgid "Type aliases"
msgstr "Aliases de tipo"

#: ../../library/typing.rst:74
msgid ""
"A type alias is defined using the :keyword:`type` statement, which creates "
"an instance of :class:`TypeAliasType`. In this example, ``Vector`` and "
"``list[float]`` will be treated equivalently by static type checkers::"
msgstr ""
"Um alias de tipo é definido usando a instrução :keyword:`type`, que cria uma "
"instância de :class:`TypeAliasType`. Neste exemplo, ``Vector`` e "
"``list[float]`` serão tratados de forma equivalente pelos verificadores de "
"tipo estáticos::"

#: ../../library/typing.rst:79
msgid ""
"type Vector = list[float]\n"
"\n"
"def scale(scalar: float, vector: Vector) -> Vector:\n"
"    return [scalar * num for num in vector]\n"
"\n"
"# passes type checking; a list of floats qualifies as a Vector.\n"
"new_vector = scale(2.0, [1.0, -4.2, 5.4])"
msgstr ""
"type Vector = list[float]\n"
"\n"
"def scale(scalar: float, vector: Vector) -> Vector:\n"
"    return [scalar * num for num in vector]\n"
"\n"
"# passa verificação de tipo; uma lista de floats qualifica como um Vector.\n"
"new_vector = scale(2.0, [1.0, -4.2, 5.4])"

#: ../../library/typing.rst:87
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""
"Os aliases de tipo são úteis para simplificar assinaturas de tipo complexas. "
"Por exemplo::"

#: ../../library/typing.rst:89
msgid ""
"from collections.abc import Sequence\n"
"\n"
"type ConnectionOptions = dict[str, str]\n"
"type Address = tuple[str, int]\n"
"type Server = tuple[Address, ConnectionOptions]\n"
"\n"
"def broadcast_message(message: str, servers: Sequence[Server]) -> None:\n"
"    ...\n"
"\n"
"# The static type checker will treat the previous type signature as\n"
"# being exactly equivalent to this one.\n"
"def broadcast_message(\n"
"    message: str,\n"
"    servers: Sequence[tuple[tuple[str, int], dict[str, str]]]\n"
") -> None:\n"
"    ..."
msgstr ""
"from collections.abc import Sequence\n"
"\n"
"type ConnectionOptions = dict[str, str]\n"
"type Address = tuple[str, int]\n"
"type Server = tuple[Address, ConnectionOptions]\n"
"\n"
"def broadcast_message(message: str, servers: Sequence[Server]) -> None:\n"
"    ...\n"
"\n"
"# O verificador de tipo estático tratará a assinatura de tipo anterior como\n"
"# sendo exatamente equivalente a esta.\n"
"def broadcast_message(\n"
"    message: str,\n"
"    servers: Sequence[tuple[tuple[str, int], dict[str, str]]]\n"
") -> None:\n"
"    ..."

#: ../../library/typing.rst:106
msgid ""
"The :keyword:`type` statement is new in Python 3.12. For backwards "
"compatibility, type aliases can also be created through simple assignment::"
msgstr ""
"A instrução :keyword:`type` é nova no Python 3.12. Para compatibilidade "
"retroativa, os aliases de tipo também podem ser criados através de uma "
"atribuição simples::"

#: ../../library/typing.rst:109
msgid "Vector = list[float]"
msgstr "Vector = list[float]"

#: ../../library/typing.rst:111
msgid ""
"Or marked with :data:`TypeAlias` to make it explicit that this is a type "
"alias, not a normal variable assignment::"
msgstr ""
"Ou marcado com :data:`TypeAlias` para tornar explícito que isto é um alias "
"de tipo, não uma atribuição de variável normal::"

#: ../../library/typing.rst:114
msgid ""
"from typing import TypeAlias\n"
"\n"
"Vector: TypeAlias = list[float]"
msgstr ""
"from typing import TypeAlias\n"
"\n"
"Vector: TypeAlias = list[float]"

#: ../../library/typing.rst:121
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:123
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "Use o auxiliar :class:`NewType` para criar tipos distintos::"

#: ../../library/typing.rst:125
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"
msgstr ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"

#: ../../library/typing.rst:130
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"O verificador de tipo estático tratará o novo tipo como se fosse uma "
"subclasse do tipo original. Isto é útil para ajudar a detetar erros lógicos::"

#: ../../library/typing.rst:133
msgid ""
"def get_user_name(user_id: UserId) -> str:\n"
"    ...\n"
"\n"
"# passes type checking\n"
"user_a = get_user_name(UserId(42351))\n"
"\n"
"# fails type checking; an int is not a UserId\n"
"user_b = get_user_name(-1)"
msgstr ""
"def get_user_name(user_id: UserId) -> str:\n"
"    ...\n"
"\n"
"# passa verificação de tipo\n"
"user_a = get_user_name(UserId(42351))\n"
"\n"
"# falha verificação de tipo; um int não é um UserId\n"
"user_b = get_user_name(-1)"

#: ../../library/typing.rst:142
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"Ainda pode realizar todas as operações ``int`` numa variável do tipo "
"``UserId``, mas o resultado será sempre do tipo ``int``. Isto permite-lhe "
"passar um ``UserId`` onde um ``int`` possa ser esperado, mas evitará que "
"crie um ``UserId`` de forma inválida::"

#: ../../library/typing.rst:147
msgid ""
"# 'output' is of type 'int', not 'UserId'\n"
"output = UserId(23413) + UserId(54341)"
msgstr ""
"# 'output' é do tipo 'int', não 'UserId'\n"
"output = UserId(23413) + UserId(54341)"

#: ../../library/typing.rst:150
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"Note que estas verificações são impostas apenas pelo verificador de tipo "
"estático. Em tempo de execução, a instrução ``Derived = NewType('Derived', "
"Base)`` tornará ``Derived`` um objeto chamável que imediatamente devolve "
"qualquer parâmetro que lhe seja passado. Isto significa que a expressão "
"``Derived(some_value)`` não cria uma nova classe nem introduz muito overhead "
"para além de uma chamada de função regular."

#: ../../library/typing.rst:156
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"Mais precisamente, a expressão ``some_value is Derived(some_value)`` é "
"sempre verdadeira em tempo de execução."

#: ../../library/typing.rst:159
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "É inválido criar um subtipo de ``Derived``::"

#: ../../library/typing.rst:161
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"# Fails at runtime and does not pass type checking\n"
"class AdminUserId(UserId): pass"
msgstr ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"# Falha em tempo de execução e não passa verificação de tipo\n"
"class AdminUserId(UserId): pass"

#: ../../library/typing.rst:168
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"No entanto, é possível criar um :class:`NewType` baseado num ``NewType`` "
"'derivado'::"

#: ../../library/typing.rst:170
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"ProUserId = NewType('ProUserId', UserId)"
msgstr ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"ProUserId = NewType('ProUserId', UserId)"

#: ../../library/typing.rst:176
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "e a verificação de tipo para ``ProUserId`` funcionará como esperado."

#: ../../library/typing.rst:178
msgid "See :pep:`484` for more details."
msgstr "Veja :pep:`484` para mais detalhes."

#: ../../library/typing.rst:182
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``type Alias = Original`` will make the static type "
"checker treat ``Alias`` as being *exactly equivalent* to ``Original`` in all "
"cases. This is useful when you want to simplify complex type signatures."
msgstr ""
"Lembre-se que o uso de um alias de tipo declara dois tipos como sendo "
"*equivalentes* um ao outro. Fazer ``type Alias = Original`` fará com que o "
"verificador de tipo estático trate ``Alias`` como sendo *exatamente "
"equivalente* a ``Original`` em todos os casos. Isto é útil quando se quer "
"simplificar assinaturas de tipo complexas."

#: ../../library/typing.rst:187
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"Em contraste, ``NewType`` declara um tipo como sendo um *subtipo* de outro. "
"Fazer ``Derived = NewType('Derived', Original)`` fará com que o verificador "
"de tipo estático trate ``Derived`` como uma *subclasse* de ``Original``, o "
"que significa que um valor do tipo ``Original`` não pode ser usado em locais "
"onde um valor do tipo ``Derived`` é esperado. Isto é útil quando se quer "
"prevenir erros lógicos com um custo mínimo em tempo de execução."

#: ../../library/typing.rst:196
msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr ""
"``NewType`` é agora uma classe em vez de uma função. Como resultado, há "
"algum custo adicional em tempo de execução ao chamar ``NewType`` em "
"comparação com uma função regular."

#: ../../library/typing.rst:201
msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr ""
"O desempenho da chamada de ``NewType`` foi restaurado ao seu nível no Python "
"3.9."

#: ../../library/typing.rst:208
msgid "Annotating callable objects"
msgstr "Anotar objetos chamáveis"

#: ../../library/typing.rst:210
msgid ""
"Functions -- or other :term:`callable` objects -- can be annotated using :"
"class:`collections.abc.Callable` or deprecated :data:`typing.Callable`. "
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""
"Funções -- ou outros objetos :term:`chamáveis` -- podem ser anotadas usando :"
"class:`collections.abc.Callable` ou o obsoleto :data:`typing.Callable`. "
"``Callable[[int], str]`` significa uma função que recebe um único parâmetro "
"do tipo :class:`int` e devolve uma :class:`str`."

#: ../../library/typing.rst:215 ../../library/typing.rst:2907
#: ../../library/typing.rst:3055
msgid "For example:"
msgstr "Por exemplo:"

#: ../../library/typing.rst:217
msgid ""
"from collections.abc import Callable, Awaitable\n"
"\n"
"def feeder(get_next_item: Callable[[], str]) -> None:\n"
"    ...  # Body\n"
"\n"
"def async_query(on_success: Callable[[int], None],\n"
"                on_error: Callable[[int, Exception], None]) -> None:\n"
"    ...  # Body\n"
"\n"
"async def on_update(value: str) -> None:\n"
"    ...  # Body\n"
"\n"
"callback: Callable[[str], Awaitable[None]] = on_update"
msgstr ""
"from collections.abc import Callable, Awaitable\n"
"\n"
"def feeder(get_next_item: Callable[[], str]) -> None:\n"
"    ...  # Corpo\n"
"\n"
"def async_query(on_success: Callable[[int], None],\n"
"                on_error: Callable[[int, Exception], None]) -> None:\n"
"    ...  # Corpo\n"
"\n"
"async def on_update(value: str) -> None:\n"
"    ...  # Corpo\n"
"\n"
"callback: Callable[[str], Awaitable[None]] = on_update"

#: ../../library/typing.rst:233
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return "
"type must be a single type."
msgstr ""

#: ../../library/typing.rst:238
msgid ""
"If a literal ellipsis ``...`` is given as the argument list, it indicates "
"that a callable with any arbitrary parameter list would be acceptable:"
msgstr ""
"Se uma reticência literal ``...`` for dada como a lista de argumentos, "
"indica que um objeto chamável com qualquer lista arbitrária de parâmetros "
"seria aceitável:"

#: ../../library/typing.rst:241
msgid ""
"def concat(x: str, y: str) -> str:\n"
"    return x + y\n"
"\n"
"x: Callable[..., str]\n"
"x = str     # OK\n"
"x = concat  # Also OK"
msgstr ""
"def concat(x: str, y: str) -> str:\n"
"    return x + y\n"
"\n"
"x: Callable[..., str]\n"
"x = str     # OK\n"
"x = concat  # Também OK"

#: ../../library/typing.rst:250
msgid ""
"``Callable`` cannot express complex signatures such as functions that take a "
"variadic number of arguments, :ref:`overloaded functions <overload>`, or "
"functions that have keyword-only parameters. However, these signatures can "
"be expressed by defining a :class:`Protocol` class with a :meth:`~object."
"__call__` method:"
msgstr ""
"``Callable`` não pode expressar assinaturas complexas como funções que "
"recebem um número variável de argumentos, :ref:`funções sobrecarregadas "
"<overload>`, ou funções que têm parâmetros apenas nomeados. No entanto, "
"estas assinaturas podem ser expressas definindo uma classe :class:`Protocol` "
"com um método :meth:`~object.__call__`:"

#: ../../library/typing.rst:256
msgid ""
"from collections.abc import Iterable\n"
"from typing import Protocol\n"
"\n"
"class Combiner(Protocol):\n"
"    def __call__(self, *vals: bytes, maxlen: int | None = None) -> "
"list[bytes]: ...\n"
"\n"
"def batch_proc(data: Iterable[bytes], cb_results: Combiner) -> bytes:\n"
"    for item in data:\n"
"        ...\n"
"\n"
"def good_cb(*vals: bytes, maxlen: int | None = None) -> list[bytes]:\n"
"    ...\n"
"def bad_cb(*vals: bytes, maxitems: int | None) -> list[bytes]:\n"
"    ...\n"
"\n"
"batch_proc([], good_cb)  # OK\n"
"batch_proc([], bad_cb)   # Error! Argument 2 has incompatible type because "
"of\n"
"                         # different name and kind in the callback"
msgstr ""
"from collections.abc import Iterable\n"
"from typing import Protocol\n"
"\n"
"class Combiner(Protocol):\n"
"    def __call__(self, *vals: bytes, maxlen: int | None = None) -> "
"list[bytes]: ...\n"
"\n"
"def batch_proc(data: Iterable[bytes], cb_results: Combiner) -> bytes:\n"
"    for item in data:\n"
"        ...\n"
"\n"
"def good_cb(*vals: bytes, maxlen: int | None = None) -> list[bytes]:\n"
"    ...\n"
"def bad_cb(*vals: bytes, maxitems: int | None) -> list[bytes]:\n"
"    ...\n"
"\n"
"batch_proc([], good_cb)  # OK\n"
"batch_proc([], bad_cb)   # Erro! O argumento 2 tem tipo incompatível devido "
"a\n"
"                           # nome e tipo diferentes na função de retorno"

#: ../../library/typing.rst:277
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"Objetos chamáveis que recebem outros objetos chamáveis como argumentos podem "
"indicar que os seus tipos de parâmetros são dependentes uns dos outros "
"usando :class:`ParamSpec`. Além disso, se esse objeto chamável adiciona ou "
"remove argumentos de outros objetos chamáveis, o operador :data:"
"`Concatenate` pode ser usado. Eles assumem a forma "
"``Callable[ParamSpecVariable, ReturnType]`` e "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respetivamente."

#: ../../library/typing.rst:285 ../../library/typing.rst:3534
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""
"``Callable`` agora suporta :class:`ParamSpec` e :data:`Concatenate`. Veja :"
"pep:`612` para mais detalhes."

#: ../../library/typing.rst:290
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
"A documentação para :class:`ParamSpec` e :class:`Concatenate` fornece "
"exemplos de utilização em ``Callable``."

#: ../../library/typing.rst:296
msgid "Generics"
msgstr "Genéricos"

#: ../../library/typing.rst:298
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr ""
"Como a informação de tipo sobre objetos guardados em contentores não pode "
"ser inferida estaticamente de uma forma genérica, muitas classes de "
"contentores na biblioteca padrão suportam subíndices para denotar os tipos "
"esperados dos elementos do contentor."

#: ../../library/typing.rst:302
msgid ""
"from collections.abc import Mapping, Sequence\n"
"\n"
"class Employee: ...\n"
"\n"
"# Sequence[Employee] indicates that all elements in the sequence\n"
"# must be instances of \"Employee\".\n"
"# Mapping[str, str] indicates that all keys and all values in the mapping\n"
"# must be strings.\n"
"def notify_by_email(employees: Sequence[Employee],\n"
"                    overrides: Mapping[str, str]) -> None: ..."
msgstr ""
"from collections.abc import Mapping, Sequence\n"
"\n"
"class Employee: ...\n"
"\n"
"# Sequence[Employee] indica que todos os elementos na sequência\n"
"# devem ser instâncias de \"Employee\".\n"
"# Mapping[str, str] indica que todas as chaves e todos os valores no "
"mapeamento\n"
"# devem ser strings.\n"
"def notify_by_email(employees: Sequence[Employee],\n"
"                    overrides: Mapping[str, str]) -> None: ..."

#: ../../library/typing.rst:315
msgid ""
"Generic functions and classes can be parameterized by using :ref:`type "
"parameter syntax <type-params>`::"
msgstr ""
"Funções e classes genéricas podem ser parametrizadas usando :ref:`sintaxe de "
"parâmetros de tipo <type-params>`::"

#: ../../library/typing.rst:318
msgid ""
"from collections.abc import Sequence\n"
"\n"
"def first[T](l: Sequence[T]) -> T:  # Function is generic over the TypeVar "
"\"T\"\n"
"    return l[0]"
msgstr ""
"from collections.abc import Sequence\n"
"\n"
"def first[T](l: Sequence[T]) -> T:  # Função é genérica sobre o TypeVar "
"\"T\"\n"
"    return l[0]"

#: ../../library/typing.rst:323
msgid "Or by using the :class:`TypeVar` factory directly::"
msgstr "Ou usando diretamente a fábrica :class:`TypeVar`::"

#: ../../library/typing.rst:325
msgid ""
"from collections.abc import Sequence\n"
"from typing import TypeVar\n"
"\n"
"U = TypeVar('U')                  # Declare type variable \"U\"\n"
"\n"
"def second(l: Sequence[U]) -> U:  # Function is generic over the TypeVar "
"\"U\"\n"
"    return l[1]"
msgstr ""
"from collections.abc import Sequence\n"
"from typing import TypeVar\n"
"\n"
"U = TypeVar('U')                  # Declarar variável de tipo \"U\"\n"
"\n"
"def second(l: Sequence[U]) -> U:  # Função é genérica sobre a variável de "
"tipo \"U\"\n"
"    return l[1]"

#: ../../library/typing.rst:333
msgid "Syntactic support for generics is new in Python 3.12."
msgstr "O suporte sintático para genéricos é novo no Python 3.12."

#: ../../library/typing.rst:339
msgid "Annotating tuples"
msgstr "Anotar tuplos"

#: ../../library/typing.rst:341
msgid ""
"For most containers in Python, the typing system assumes that all elements "
"in the container will be of the same type. For example::"
msgstr ""
"Para a maioria dos contentores em Python, o sistema de tipos assume que "
"todos os elementos no contentor serão do mesmo tipo. Por exemplo::"

#: ../../library/typing.rst:344
msgid ""
"from collections.abc import Mapping\n"
"\n"
"# Type checker will infer that all elements in ``x`` are meant to be ints\n"
"x: list[int] = []\n"
"\n"
"# Type checker error: ``list`` only accepts a single type argument:\n"
"y: list[int, str] = [1, 'foo']\n"
"\n"
"# Type checker will infer that all keys in ``z`` are meant to be strings,\n"
"# and that all values in ``z`` are meant to be either strings or ints\n"
"z: Mapping[str, str | int] = {}"
msgstr ""
"from collections.abc import Mapping\n"
"\n"
"# O verificador de tipo inferirá que todos os elementos em ``x`` são ints\n"
"x: list[int] = []\n"
"\n"
"# Erro do verificador de tipo: ``list`` aceita apenas um argumento de tipo:\n"
"y: list[int, str] = [1, 'foo']\n"
"\n"
"# O verificador de tipo inferirá que todas as chaves em ``z`` são strings,\n"
"# e que todos os valores em ``z`` são strings ou ints\n"
"z: Mapping[str, str | int] = {}"

#: ../../library/typing.rst:356
msgid ""
":class:`list` only accepts one type argument, so a type checker would emit "
"an error on the ``y`` assignment above. Similarly, :class:`~collections.abc."
"Mapping` only accepts two type arguments: the first indicates the type of "
"the keys, and the second indicates the type of the values."
msgstr ""
":class:`list` aceita apenas um argumento de tipo, pelo que um verificador de "
"tipo emitiria um erro na atribuição ``y`` acima. Da mesma forma, :class:"
"`~collections.abc.Mapping` aceita apenas dois argumentos de tipo: o primeiro "
"indica o tipo das chaves e o segundo indica o tipo dos valores."

#: ../../library/typing.rst:362
msgid ""
"Unlike most other Python containers, however, it is common in idiomatic "
"Python code for tuples to have elements which are not all of the same type. "
"For this reason, tuples are special-cased in Python's typing system. :class:"
"`tuple` accepts *any number* of type arguments::"
msgstr ""
"Ao contrário da maioria dos outros contentores em Python, no entanto, é "
"comum em código Python idiomático que os tuplos tenham elementos que não são "
"todos do mesmo tipo. Por esta razão, os tuplos são um caso especial no "
"sistema de tipos do Python. :class:`tuple` aceita *qualquer número* de "
"argumentos de tipo::"

#: ../../library/typing.rst:367
msgid ""
"# OK: ``x`` is assigned to a tuple of length 1 where the sole element is an "
"int\n"
"x: tuple[int] = (5,)\n"
"\n"
"# OK: ``y`` is assigned to a tuple of length 2;\n"
"# element 1 is an int, element 2 is a str\n"
"y: tuple[int, str] = (5, \"foo\")\n"
"\n"
"# Error: the type annotation indicates a tuple of length 1,\n"
"# but ``z`` has been assigned to a tuple of length 3\n"
"z: tuple[int] = (1, 2, 3)"
msgstr ""
"# OK: ``x`` é atribuído a um tuplo de comprimento 1 onde o único elemento é "
"um int\n"
"x: tuple[int] = (5,)\n"
"\n"
"# OK: ``y`` é atribuído a um tuplo de comprimento 2;\n"
"# o elemento 1 é um int, o elemento 2 é uma str\n"
"y: tuple[int, str] = (5, \"foo\")\n"
"\n"
"# Erro: a anotação de tipo indica um tuplo de comprimento 1,\n"
"# mas ``z`` foi atribuído a um tuplo de comprimento 3\n"
"z: tuple[int] = (1, 2, 3)"

#: ../../library/typing.rst:378
msgid ""
"To denote a tuple which could be of *any* length, and in which all elements "
"are of the same type ``T``, use ``tuple[T, ...]``. To denote an empty tuple, "
"use ``tuple[()]``. Using plain ``tuple`` as an annotation is equivalent to "
"using ``tuple[Any, ...]``::"
msgstr ""

#: ../../library/typing.rst:383
msgid ""
"x: tuple[int, ...] = (1, 2)\n"
"# These reassignments are OK: ``tuple[int, ...]`` indicates x can be of any "
"length\n"
"x = (1, 2, 3)\n"
"x = ()\n"
"# This reassignment is an error: all elements in ``x`` must be ints\n"
"x = (\"foo\", \"bar\")\n"
"\n"
"# ``y`` can only ever be assigned to an empty tuple\n"
"y: tuple[()] = ()\n"
"\n"
"z: tuple = (\"foo\", \"bar\")\n"
"# These reassignments are OK: plain ``tuple`` is equivalent to "
"``tuple[Any, ...]``\n"
"z = (1, 2, 3)\n"
"z = ()"
msgstr ""
"x: tuple[int, ...] = (1, 2)\n"
"# Estas reatribuições estão OK: ``tuple[int, ...]`` indica que x pode ser de "
"qualquer comprimento\n"
"x = (1, 2, 3)\n"
"x = ()\n"
"# Esta reatribuição é um erro: todos os elementos em ``x`` devem ser ints\n"
"x = (\"foo\", \"bar\")\n"
"\n"
"# ``y`` só pode ser atribuído a um tuplo vazio\n"
"y: tuple[()] = ()\n"
"\n"
"z: tuple = (\"foo\", \"bar\")\n"
"# Estas reatribuições estão OK: ``tuple`` simples é equivalente a "
"``tuple[Any, ...]``\n"
"z = (1, 2, 3)\n"
"z = ()"

#: ../../library/typing.rst:401
msgid "The type of class objects"
msgstr "O tipo de objetos de classe"

#: ../../library/typing.rst:403
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` (or deprecated :class:"
"`typing.Type[C] <Type>`) may accept values that are classes themselves -- "
"specifically, it will accept the *class object* of ``C``. For example::"
msgstr ""
"Uma variável anotada com ``C`` pode aceitar um valor do tipo ``C``. Em "
"contraste, uma variável anotada com ``type[C]`` (ou o obsoleto :class:"
"`typing.Type[C] <Type>`) pode aceitar valores que são classes elas próprias "
"-- especificamente, aceitará o *objeto de classe* de ``C``. Por exemplo::"

#: ../../library/typing.rst:409
msgid ""
"a = 3         # Has type ``int``\n"
"b = int       # Has type ``type[int]``\n"
"c = type(a)   # Also has type ``type[int]``"
msgstr ""
"a = 3         # Tem tipo ``int``\n"
"b = int       # Tem tipo ``type[int]``\n"
"c = type(a)   # Também tem tipo ``type[int]``"

#: ../../library/typing.rst:413
msgid "Note that ``type[C]`` is covariant::"
msgstr "Note que ``type[C]`` é covariante::"

#: ../../library/typing.rst:415
msgid ""
"class User: ...\n"
"class ProUser(User): ...\n"
"class TeamUser(User): ...\n"
"\n"
"def make_new_user(user_class: type[User]) -> User:\n"
"    # ...\n"
"    return user_class()\n"
"\n"
"make_new_user(User)      # OK\n"
"make_new_user(ProUser)   # Also OK: ``type[ProUser]`` is a subtype of "
"``type[User]``\n"
"make_new_user(TeamUser)  # Still fine\n"
"make_new_user(User())    # Error: expected ``type[User]`` but got ``User``\n"
"make_new_user(int)       # Error: ``type[int]`` is not a subtype of "
"``type[User]``"
msgstr ""
"class User: ...\n"
"class ProUser(User): ...\n"
"class TeamUser(User): ...\n"
"\n"
"def make_new_user(user_class: type[User]) -> User:\n"
"    # ...\n"
"    return user_class()\n"
"\n"
"make_new_user(User)      # OK\n"
"make_new_user(ProUser)   # Também OK: ``type[ProUser]`` é um subtipo de "
"``type[User]``\n"
"make_new_user(TeamUser)  # Ainda bem\n"
"make_new_user(User())    # Erro: esperado ``type[User]`` mas obtido "
"``User``\n"
"make_new_user(int)       # Erro: ``type[int]`` não é um subtipo de "
"``type[User]``"

#: ../../library/typing.rst:429
msgid ""
"The only legal parameters for :class:`type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
"Os únicos parâmetros legais para :class:`type` são classes, :data:`Any`, :"
"ref:`variáveis de tipo <generics>`, e uniões de qualquer um destes tipos. "
"Por exemplo::"

#: ../../library/typing.rst:433
msgid ""
"def new_non_team_user(user_class: type[BasicUser | ProUser]): ...\n"
"\n"
"new_non_team_user(BasicUser)  # OK\n"
"new_non_team_user(ProUser)    # OK\n"
"new_non_team_user(TeamUser)   # Error: ``type[TeamUser]`` is not a subtype\n"
"                              # of ``type[BasicUser | ProUser]``\n"
"new_non_team_user(User)       # Also an error"
msgstr ""
"def new_non_team_user(user_class: type[BasicUser | ProUser]): ...\n"
"\n"
"new_non_team_user(BasicUser)  # OK\n"
"new_non_team_user(ProUser)    # OK\n"
"new_non_team_user(TeamUser)   # Erro: ``type[TeamUser]`` não é um subtipo\n"
"                              # de ``type[BasicUser | ProUser]``\n"
"new_non_team_user(User)       # Também um erro"

#: ../../library/typing.rst:441
msgid ""
"``type[Any]`` is equivalent to :class:`type`, which is the root of Python's :"
"ref:`metaclass hierarchy <metaclasses>`."
msgstr ""
"``type[Any]`` é equivalente a :class:`type`, que é a raiz da hierarquia de :"
"ref:`metaclasses <metaclasses>` do Python."

#: ../../library/typing.rst:448
msgid "Annotating generators and coroutines"
msgstr "Anotar geradores e corrotinas"

#: ../../library/typing.rst:450
msgid ""
"A generator can be annotated using the generic type :class:"
"`Generator[YieldType, SendType, ReturnType] <collections.abc.Generator>`. "
"For example::"
msgstr ""
"Um gerador pode ser anotado usando o tipo genérico :class:"
"`Generator[YieldType, SendType, ReturnType] <collections.abc.Generator>`. "
"Por exemplo::"

#: ../../library/typing.rst:454
msgid ""
"def echo_round() -> Generator[int, float, str]:\n"
"    sent = yield 0\n"
"    while sent >= 0:\n"
"        sent = yield round(sent)\n"
"    return 'Done'"
msgstr ""
"def echo_round() -> Generator[int, float, str]:\n"
"    sent = yield 0\n"
"    while sent >= 0:\n"
"        sent = yield round(sent)\n"
"    return 'Done'"

#: ../../library/typing.rst:460
msgid ""
"Note that unlike many other generic classes in the standard library, the "
"``SendType`` of :class:`~collections.abc.Generator` behaves contravariantly, "
"not covariantly or invariantly."
msgstr ""
"Note que, ao contrário de muitas outras classes genéricas na biblioteca "
"padrão, o ``SendType`` de :class:`~collections.abc.Generator` comporta-se de "
"forma contravariante, não covariante ou invariante."

#: ../../library/typing.rst:464
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:467
msgid ""
"def infinite_stream(start: int) -> Generator[int, None, None]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""
"def infinite_stream(start: int) -> Generator[int, None, None]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"

#: ../../library/typing.rst:472
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:475
msgid ""
"def infinite_stream(start: int) -> Iterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""
"def infinite_stream(start: int) -> Iterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"

#: ../../library/typing.rst:480
msgid ""
"Async generators are handled in a similar fashion, but don't expect a "
"``ReturnType`` type argument (:class:`AsyncGenerator[YieldType, SendType] "
"<collections.abc.AsyncGenerator>`)::"
msgstr ""

#: ../../library/typing.rst:484
msgid ""
"async def infinite_stream(start: int) -> AsyncGenerator[int, None]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"
msgstr ""

#: ../../library/typing.rst:489
msgid ""
"As in the synchronous case, :class:`AsyncIterable[YieldType] <collections."
"abc.AsyncIterable>` and :class:`AsyncIterator[YieldType] <collections.abc."
"AsyncIterator>` are available as well::"
msgstr ""
"Como no caso síncrono, :class:`AsyncIterable[YieldType] <collections.abc."
"AsyncIterable>` e :class:`AsyncIterator[YieldType] <collections.abc."
"AsyncIterator>` também estão disponíveis::"

#: ../../library/typing.rst:494
msgid ""
"async def infinite_stream(start: int) -> AsyncIterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"
msgstr ""
"async def infinite_stream(start: int) -> AsyncIterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"

#: ../../library/typing.rst:499
msgid ""
"Coroutines can be annotated using :class:`Coroutine[YieldType, SendType, "
"ReturnType] <collections.abc.Coroutine>`. Generic arguments correspond to "
"those of :class:`~collections.abc.Generator`, for example::"
msgstr ""
"As corrotinas podem ser anotadas usando :class:`Coroutine[YieldType, "
"SendType, ReturnType] <collections.abc.Coroutine>`. Os argumentos genéricos "
"correspondem aos de :class:`~collections.abc.Generator`, por exemplo::"

#: ../../library/typing.rst:504
msgid ""
"from collections.abc import Coroutine\n"
"c: Coroutine[list[str], str, int]  # Some coroutine defined elsewhere\n"
"x = c.send('hi')                   # Inferred type of 'x' is list[str]\n"
"async def bar() -> None:\n"
"    y = await c                    # Inferred type of 'y' is int"
msgstr ""
"from collections.abc import Coroutine\n"
"c: Coroutine[list[str], str, int]  # Alguma corrotina definida noutro local\n"
"x = c.send('hi')                   # Tipo inferido de 'x' é list[str]\n"
"async def bar() -> None:\n"
"    y = await c                    # Tipo inferido de 'y' é int"

#: ../../library/typing.rst:513
msgid "User-defined generic types"
msgstr "Tipos genéricos definidos pelo utilizador"

#: ../../library/typing.rst:515
msgid "A user-defined class can be defined as a generic class."
msgstr ""
"Uma classe definida pelo utilizador pode ser definida como uma classe "
"genérica."

#: ../../library/typing.rst:519
msgid ""
"from logging import Logger\n"
"\n"
"class LoggedVar[T]:\n"
"    def __init__(self, value: T, name: str, logger: Logger) -> None:\n"
"        self.name = name\n"
"        self.logger = logger\n"
"        self.value = value\n"
"\n"
"    def set(self, new: T) -> None:\n"
"        self.log('Set ' + repr(self.value))\n"
"        self.value = new\n"
"\n"
"    def get(self) -> T:\n"
"        self.log('Get ' + repr(self.value))\n"
"        return self.value\n"
"\n"
"    def log(self, message: str) -> None:\n"
"        self.logger.info('%s: %s', self.name, message)"
msgstr ""
"from logging import Logger\n"
"\n"
"class LoggedVar[T]:\n"
"    def __init__(self, value: T, name: str, logger: Logger) -> None:\n"
"        self.name = name\n"
"        self.logger = logger\n"
"        self.value = value\n"
"\n"
"    def set(self, new: T) -> None:\n"
"        self.log('Set ' + repr(self.value))\n"
"        self.value = new\n"
"\n"
"    def get(self) -> T:\n"
"        self.log('Get ' + repr(self.value))\n"
"        return self.value\n"
"\n"
"    def log(self, message: str) -> None:\n"
"        self.logger.info('%s: %s', self.name, message)"

#: ../../library/typing.rst:538
msgid ""
"This syntax indicates that the class ``LoggedVar`` is parameterised around a "
"single :ref:`type variable <typevar>` ``T`` . This also makes ``T`` valid as "
"a type within the class body."
msgstr ""
"Esta sintaxe indica que a classe ``LoggedVar`` é parametrizada em torno de "
"uma única :ref:`variável de tipo <typevar>` ``T``. Isto também torna ``T`` "
"válido como um tipo dentro do corpo da classe."

#: ../../library/typing.rst:542
msgid ""
"Generic classes implicitly inherit from :class:`Generic`. For compatibility "
"with Python 3.11 and lower, it is also possible to inherit explicitly from :"
"class:`Generic` to indicate a generic class::"
msgstr ""
"As classes genéricas herdam implicitamente de :class:`Generic`. Para "
"compatibilidade com o Python 3.11 e versões anteriores, também é possível "
"herdar explicitamente de :class:`Generic` para indicar uma classe genérica::"

#: ../../library/typing.rst:546
msgid ""
"from typing import TypeVar, Generic\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class LoggedVar(Generic[T]):\n"
"    ..."
msgstr ""
"from typing import TypeVar, Generic\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class LoggedVar(Generic[T]):\n"
"    ..."

#: ../../library/typing.rst:553
msgid ""
"Generic classes have :meth:`~object.__class_getitem__` methods, meaning they "
"can be parameterised at runtime (e.g. ``LoggedVar[int]`` below)::"
msgstr ""
"As classes genéricas têm métodos :meth:`~object.__class_getitem__`, o que "
"significa que podem ser parametrizadas em tempo de execução (por exemplo, "
"``LoggedVar[int]`` abaixo)::"

#: ../../library/typing.rst:556
msgid ""
"from collections.abc import Iterable\n"
"\n"
"def zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:\n"
"    for var in vars:\n"
"        var.set(0)"
msgstr ""
"from collections.abc import Iterable\n"
"\n"
"def zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:\n"
"    for var in vars:\n"
"        var.set(0)"

#: ../../library/typing.rst:562
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""
"Um tipo genérico pode ter qualquer número de variáveis de tipo. Todas as "
"variedades de :class:`TypeVar` são permissíveis como parâmetros para um tipo "
"genérico::"

#: ../../library/typing.rst:565
msgid ""
"from typing import TypeVar, Generic, Sequence\n"
"\n"
"class WeirdTrio[T, B: Sequence[bytes], S: (int, str)]:\n"
"    ...\n"
"\n"
"OldT = TypeVar('OldT', contravariant=True)\n"
"OldB = TypeVar('OldB', bound=Sequence[bytes], covariant=True)\n"
"OldS = TypeVar('OldS', int, str)\n"
"\n"
"class OldWeirdTrio(Generic[OldT, OldB, OldS]):\n"
"    ..."
msgstr ""
"from typing import TypeVar, Generic, Sequence\n"
"\n"
"class WeirdTrio[T, B: Sequence[bytes], S: (int, str)]:\n"
"    ...\n"
"\n"
"OldT = TypeVar('OldT', contravariant=True)\n"
"OldB = TypeVar('OldB', bound=Sequence[bytes], covariant=True)\n"
"OldS = TypeVar('OldS', int, str)\n"
"\n"
"class OldWeirdTrio(Generic[OldT, OldB, OldS]):\n"
"    ..."

#: ../../library/typing.rst:577
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""
"Cada argumento de variável de tipo para :class:`Generic` deve ser distinto. "
"Isto é, portanto, inválido::"

#: ../../library/typing.rst:580
msgid ""
"from typing import TypeVar, Generic\n"
"...\n"
"\n"
"class Pair[M, M]:  # SyntaxError\n"
"    ...\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class Pair(Generic[T, T]):   # INVALID\n"
"    ..."
msgstr ""
"from typing import TypeVar, Generic\n"
"...\n"
"\n"
"class Pair[M, M]:  # SyntaxError\n"
"    ...\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class Pair(Generic[T, T]):   # INVÁLIDO\n"
"    ..."

#: ../../library/typing.rst:591
msgid "Generic classes can also inherit from other classes::"
msgstr "As classes genéricas também podem herdar de outras classes::"

#: ../../library/typing.rst:593
msgid ""
"from collections.abc import Sized\n"
"\n"
"class LinkedList[T](Sized):\n"
"    ..."
msgstr ""
"from collections.abc import Sized\n"
"\n"
"class LinkedList[T](Sized):\n"
"    ..."

#: ../../library/typing.rst:598
msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr ""
"Ao herdar de classes genéricas, alguns parâmetros de tipo podem ser fixos::"

#: ../../library/typing.rst:600
msgid ""
"from collections.abc import Mapping\n"
"\n"
"class MyDict[T](Mapping[str, T]):\n"
"    ..."
msgstr ""
"from collections.abc import Mapping\n"
"\n"
"class MyDict[T](Mapping[str, T]):\n"
"    ..."

#: ../../library/typing.rst:605
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "Neste caso, ``MyDict`` tem um único parâmetro, ``T``."

#: ../../library/typing.rst:607
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""
"Usar uma classe genérica sem especificar parâmetros de tipo assume :data:"
"`Any` para cada posição. No exemplo seguinte, ``MyIterable`` não é genérica, "
"mas herda implicitamente de ``Iterable[Any]``:"

#: ../../library/typing.rst:611
msgid ""
"from collections.abc import Iterable\n"
"\n"
"class MyIterable(Iterable): # Same as Iterable[Any]\n"
"    ..."
msgstr ""
"from collections.abc import Iterable\n"
"\n"
"class MyIterable(Iterable): # O mesmo que Iterable[Any]\n"
"    ..."

#: ../../library/typing.rst:618
msgid "User-defined generic type aliases are also supported. Examples::"
msgstr ""
"Os aliases de tipo genéricos definidos pelo utilizador também são "
"suportados. Exemplos::"

#: ../../library/typing.rst:620
msgid ""
"from collections.abc import Iterable\n"
"\n"
"type Response[S] = Iterable[S] | int\n"
"\n"
"# Return type here is same as Iterable[str] | int\n"
"def response(query: str) -> Response[str]:\n"
"    ...\n"
"\n"
"type Vec[T] = Iterable[tuple[T, T]]\n"
"\n"
"def inproduct[T: (int, float, complex)](v: Vec[T]) -> T: # Same as "
"Iterable[tuple[T, T]]\n"
"    return sum(x*y for x, y in v)"
msgstr ""
"from collections.abc import Iterable\n"
"\n"
"type Response[S] = Iterable[S] | int\n"
"\n"
"# O tipo de retorno aqui é o mesmo que Iterable[str] | int\n"
"def response(query: str) -> Response[str]:\n"
"    ...\n"
"\n"
"type Vec[T] = Iterable[tuple[T, T]]\n"
"\n"
"def inproduct[T: (int, float, complex)](v: Vec[T]) -> T: # O mesmo que "
"Iterable[tuple[T, T]]\n"
"    return sum(x*y for x, y in v)"

#: ../../library/typing.rst:633
msgid ""
"For backward compatibility, generic type aliases can also be created through "
"a simple assignment::"
msgstr ""
"Para compatibilidade retroativa, os aliases de tipo genéricos também podem "
"ser criados através de uma atribuição simples::"

#: ../../library/typing.rst:636
msgid ""
"from collections.abc import Iterable\n"
"from typing import TypeVar\n"
"\n"
"S = TypeVar(\"S\")\n"
"Response = Iterable[S] | int"
msgstr ""
"from collections.abc import Iterable\n"
"from typing import TypeVar\n"
"\n"
"S = TypeVar(\"S\")\n"
"Response = Iterable[S] | int"

#: ../../library/typing.rst:642
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` já não tem uma metaclasse personalizada."

#: ../../library/typing.rst:645
msgid ""
"Syntactic support for generics and type aliases is new in version 3.12. "
"Previously, generic classes had to explicitly inherit from :class:`Generic` "
"or contain a type variable in one of their bases."
msgstr ""
"O suporte sintático para genéricos e aliases de tipo é novo na versão 3.12. "
"Anteriormente, as classes genéricas tinham de herdar explicitamente de :"
"class:`Generic` ou conter uma variável de tipo em uma das suas bases."

#: ../../library/typing.rst:650
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``[**P]``.  The behavior is "
"consistent with type variables' described above as parameter specification "
"variables are treated by the typing module as a specialized type variable.  "
"The one exception to this is that a list of types can be used to substitute "
"a :class:`ParamSpec`::"
msgstr ""

#: ../../library/typing.rst:656
msgid ""
">>> class Z[T, **P]: ...  # T is a TypeVar; P is a ParamSpec\n"
"...\n"
">>> Z[int, [dict, float]]\n"
"__main__.Z[int, [dict, float]]"
msgstr ""
">>> class Z[T, **P]: ...  # T é um TypeVar; P é um ParamSpec\n"
"...\n"
">>> Z[int, [dict, float]]\n"
"__main__.Z[int, [dict, float]]"

#: ../../library/typing.rst:661
msgid ""
"Classes generic over a :class:`ParamSpec` can also be created using explicit "
"inheritance from :class:`Generic`. In this case, ``**`` is not used::"
msgstr ""
"Classes genéricas sobre um :class:`ParamSpec` também podem ser criadas "
"usando herança explícita de :class:`Generic`. Neste caso, ``**`` não é "
"usado::"

#: ../../library/typing.rst:664
msgid ""
"from typing import ParamSpec, Generic\n"
"\n"
"P = ParamSpec('P')\n"
"\n"
"class Z(Generic[P]):\n"
"    ..."
msgstr ""
"from typing import ParamSpec, Generic\n"
"\n"
"P = ParamSpec('P')\n"
"\n"
"class Z(Generic[P]):\n"
"    ..."

#: ../../library/typing.rst:671
msgid ""
"Another difference between :class:`TypeVar` and :class:`ParamSpec` is that a "
"generic with only one parameter specification variable will accept parameter "
"lists in the forms ``X[[Type1, Type2, ...]]`` and also ``X[Type1, "
"Type2, ...]`` for aesthetic reasons.  Internally, the latter is converted to "
"the former, so the following are equivalent::"
msgstr ""
"Outra diferença entre :class:`TypeVar` e :class:`ParamSpec` é que um "
"genérico com apenas uma variável de especificação de parâmetros aceitará "
"listas de parâmetros nas formas ``X[[Type1, Type2, ...]]`` e também "
"``X[Type1, Type2, ...]`` por razões estéticas. Internamente, esta última é "
"convertida na primeira, pelo que as seguintes são equivalentes::"

#: ../../library/typing.rst:677
msgid ""
">>> class X[**P]: ...\n"
"...\n"
">>> X[int, str]\n"
"__main__.X[[int, str]]\n"
">>> X[[int, str]]\n"
"__main__.X[[int, str]]"
msgstr ""
">>> class X[**P]: ...\n"
"...\n"
">>> X[int, str]\n"
"__main__.X[[int, str]]\n"
">>> X[[int, str]]\n"
"__main__.X[[int, str]]"

#: ../../library/typing.rst:684
msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""
"Note que os genéricos com :class:`ParamSpec` podem não ter "
"``__parameters__`` corretos após a substituição em alguns casos, uma vez que "
"são destinados principalmente para verificação de tipo estática."

#: ../../library/typing.rst:688
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` pode agora ser parametrizado sobre expressões de "
"parâmetros. Veja :class:`ParamSpec` e :pep:`612` para mais detalhes."

#: ../../library/typing.rst:692
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are :"
"term:`hashable` and comparable for equality."
msgstr ""

#: ../../library/typing.rst:699
msgid "The :data:`Any` type"
msgstr "O tipo :data:`Any`"

#: ../../library/typing.rst:701
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
"Um tipo especial é :data:`Any`. Um verificador de tipo estático tratará "
"todos os tipos como sendo compatíveis com :data:`Any` e :data:`Any` como "
"sendo compatível com todos os tipos."

#: ../../library/typing.rst:705
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"Isto significa que é possível realizar qualquer operação ou chamada de "
"método num valor do tipo :data:`Any` e atribuí-lo a qualquer variável::"

#: ../../library/typing.rst:708
msgid ""
"from typing import Any\n"
"\n"
"a: Any = None\n"
"a = []          # OK\n"
"a = 2           # OK\n"
"\n"
"s: str = ''\n"
"s = a           # OK\n"
"\n"
"def foo(item: Any) -> int:\n"
"    # Passes type checking; 'item' could be any type,\n"
"    # and that type might have a 'bar' method\n"
"    item.bar()\n"
"    ..."
msgstr ""
"from typing import Any\n"
"\n"
"a: Any = None\n"
"a = []          # OK\n"
"a = 2           # OK\n"
"\n"
"s: str = ''\n"
"s = a           # OK\n"
"\n"
"def foo(item: Any) -> int:\n"
"    # Passa verificação de tipo; 'item' pode ser de qualquer tipo,\n"
"    # e esse tipo pode ter um método 'bar'\n"
"    item.bar()\n"
"    ..."

#: ../../library/typing.rst:723
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"Note que nenhuma verificação de tipo é realizada ao atribuir um valor do "
"tipo :data:`Any` a um tipo mais preciso. Por exemplo, o verificador de tipo "
"estático não reportou um erro ao atribuir ``a`` a ``s``, mesmo que ``s`` "
"tenha sido declarado como sendo do tipo :class:`str` e receba um valor :"
"class:`int` em tempo de execução!"

#: ../../library/typing.rst:729
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""
"Além disso, todas as funções sem um tipo de retorno ou tipos de parâmetros "
"usarão implicitamente :data:`Any` como predefinição::"

#: ../../library/typing.rst:732
msgid ""
"def legacy_parser(text):\n"
"    ...\n"
"    return data\n"
"\n"
"# A static type checker will treat the above\n"
"# as having the same signature as:\n"
"def legacy_parser(text: Any) -> Any:\n"
"    ...\n"
"    return data"
msgstr ""
"def legacy_parser(text):\n"
"    ...\n"
"    return data\n"
"\n"
"# Um verificador de tipo estático tratará o acima\n"
"# como tendo a mesma assinatura que:\n"
"def legacy_parser(text: Any) -> Any:\n"
"    ...\n"
"    return data"

#: ../../library/typing.rst:742
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""
"Este comportamento permite que :data:`Any` seja usado como uma *válvula de "
"escape* quando precisa misturar código tipado dinamicamente e estaticamente."

#: ../../library/typing.rst:745
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
"Contraste o comportamento de :data:`Any` com o comportamento de :class:"
"`object`. Semelhante a :data:`Any`, todos os tipos são subtipos de :class:"
"`object`. No entanto, ao contrário de :data:`Any`, o inverso não é "
"verdadeiro: :class:`object` não é um subtipo de todos os outros tipos."

#: ../../library/typing.rst:750
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"Isto significa que quando o tipo de um valor é :class:`object`, um "
"verificador de tipo rejeitará quase todas as operações sobre ele, e atribuí-"
"lo a uma variável (ou usá-lo como um valor de retorno) de um tipo mais "
"especializado é um erro de tipo. Por exemplo::"

#: ../../library/typing.rst:754
msgid ""
"def hash_a(item: object) -> int:\n"
"    # Fails type checking; an object does not have a 'magic' method.\n"
"    item.magic()\n"
"    ...\n"
"\n"
"def hash_b(item: Any) -> int:\n"
"    # Passes type checking\n"
"    item.magic()\n"
"    ...\n"
"\n"
"# Passes type checking, since ints and strs are subclasses of object\n"
"hash_a(42)\n"
"hash_a(\"foo\")\n"
"\n"
"# Passes type checking, since Any is compatible with all types\n"
"hash_b(42)\n"
"hash_b(\"foo\")"
msgstr ""
"def hash_a(item: object) -> int:\n"
"    # Falha verificação de tipo; um object não tem um método 'magic'.\n"
"    item.magic()\n"
"    ...\n"
"\n"
"def hash_b(item: Any) -> int:\n"
"    # Passa verificação de tipo\n"
"    item.magic()\n"
"    ...\n"
"\n"
"# Passa verificação de tipo, uma vez que ints e strs são subclasses de "
"object\n"
"hash_a(42)\n"
"hash_a(\"foo\")\n"
"\n"
"# Passa verificação de tipo, uma vez que Any é compatível com todos os "
"tipos\n"
"hash_b(42)\n"
"hash_b(\"foo\")"

#: ../../library/typing.rst:772
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
"Use :class:`object` para indicar que um valor pode ser de qualquer tipo de "
"uma forma segura em termos de tipo. Use :data:`Any` para indicar que um "
"valor é tipado dinamicamente."

#: ../../library/typing.rst:777
msgid "Nominal vs structural subtyping"
msgstr "Subtipagem nominal vs subtipagem estrutural"

#: ../../library/typing.rst:779
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"Inicialmente, :pep:`484` definiu o sistema de tipos estáticos do Python como "
"usando *subtipagem nominal*. Isto significa que uma classe ``A`` é permitida "
"onde uma classe ``B`` é esperada se e somente se ``A`` é uma subclasse de "
"``B``."

#: ../../library/typing.rst:783
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"Este requisito aplicava-se anteriormente também a classes base abstratas, "
"como :class:`~collections.abc.Iterable`. O problema com esta abordagem é que "
"uma classe tinha de ser explicitamente marcada para as suportar, o que é não "
"é pythónico e diferente do que normalmente se faz em código Python tipado "
"dinamicamente idiomático. Por exemplo, isto está em conformidade com :pep:"
"`484`::"

#: ../../library/typing.rst:789
msgid ""
"from collections.abc import Sized, Iterable, Iterator\n"
"\n"
"class Bucket(Sized, Iterable[int]):\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ..."
msgstr ""
"from collections.abc import Sized, Iterable, Iterator\n"
"\n"
"class Bucket(Sized, Iterable[int]):\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ..."

#: ../../library/typing.rst:796
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` permite resolver este problema ao permitir que os utilizadores "
"escrevam o código acima sem classes base explícitas na definição da classe, "
"permitindo que ``Bucket`` seja implicitamente considerado um subtipo de "
"``Sized`` e ``Iterable[int]`` pelos verificadores de tipo estáticos. Isto é "
"conhecido como *subtipagem estrutural* (ou duck-typing estático)::"

#: ../../library/typing.rst:802
msgid ""
"from collections.abc import Iterator, Iterable\n"
"\n"
"class Bucket:  # Note: no base classes\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ...\n"
"\n"
"def collect(items: Iterable[int]) -> int: ...\n"
"result = collect(Bucket())  # Passes type check"
msgstr ""
"from collections.abc import Iterator, Iterable\n"
"\n"
"class Bucket:  # Note: sem classes base\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ...\n"
"\n"
"def collect(items: Iterable[int]) -> int: ...\n"
"result = collect(Bucket())  # Passa verificação de tipo"

#: ../../library/typing.rst:812
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"Além disso, ao criar uma subclasse da classe especial :class:`Protocol`, um "
"utilizador pode definir novos protocolos personalizados para usufruir "
"plenamente da subtipagem estrutural (veja os exemplos abaixo)."

#: ../../library/typing.rst:817
msgid "Module contents"
msgstr "Conteúdos do módulo"

#: ../../library/typing.rst:819
msgid ""
"The ``typing`` module defines the following classes, functions and "
"decorators."
msgstr ""
"O módulo ``typing`` define as seguintes classes, funções e decoradores."

#: ../../library/typing.rst:822
msgid "Special typing primitives"
msgstr "Primitivas especiais de tipagem"

#: ../../library/typing.rst:825
msgid "Special types"
msgstr "Tipos especiais"

#: ../../library/typing.rst:827
msgid ""
"These can be used as types in annotations. They do not support subscription "
"using ``[]``."
msgstr ""
"Estes podem ser usados como tipos em anotações. Não suportam subíndices "
"usando ``[]``."

#: ../../library/typing.rst:832
msgid "Special type indicating an unconstrained type."
msgstr "Tipo especial que indica um tipo não restrito."

#: ../../library/typing.rst:834
msgid "Every type is compatible with :data:`Any`."
msgstr "Todos os tipos são compatíveis com :data:`Any`."

#: ../../library/typing.rst:835
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` é compatível com todos os tipos."

#: ../../library/typing.rst:837
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""
":data:`Any` pode agora ser usado como uma classe base. Isto pode ser útil "
"para evitar erros do verificador de tipo com classes que podem fazer duck "
"typing em qualquer lugar ou são altamente dinâmicas."

#: ../../library/typing.rst:844
msgid "A :ref:`constrained type variable <typing-constrained-typevar>`."
msgstr "Uma :ref:`variável de tipo restrita <typing-constrained-typevar>`."

#: ../../library/typing.rst:846
msgid "Definition::"
msgstr "Definição::"

#: ../../library/typing.rst:848
msgid "AnyStr = TypeVar('AnyStr', str, bytes)"
msgstr "AnyStr = TypeVar('AnyStr', str, bytes)"

#: ../../library/typing.rst:850
msgid ""
"``AnyStr`` is meant to be used for functions that may accept :class:`str` "
"or :class:`bytes` arguments but cannot allow the two to mix."
msgstr ""
"``AnyStr`` destina-se a ser usado para funções que podem aceitar argumentos :"
"class:`str` ou :class:`bytes`, mas não podem permitir que os dois sejam "
"misturados."

#: ../../library/typing.rst:853 ../../library/typing.rst:961
#: ../../library/typing.rst:1018 ../../library/typing.rst:1184
#: ../../library/typing.rst:1241 ../../library/typing.rst:1453
#: ../../library/typing.rst:2847
msgid "For example::"
msgstr "Por exemplo::"

#: ../../library/typing.rst:855
msgid ""
"def concat(a: AnyStr, b: AnyStr) -> AnyStr:\n"
"    return a + b\n"
"\n"
"concat(\"foo\", \"bar\")    # OK, output has type 'str'\n"
"concat(b\"foo\", b\"bar\")  # OK, output has type 'bytes'\n"
"concat(\"foo\", b\"bar\")   # Error, cannot mix str and bytes"
msgstr ""
"def concat(a: AnyStr, b: AnyStr) -> AnyStr:\n"
"    return a + b\n"
"\n"
"concat(\"foo\", \"bar\")    # OK, saída tem tipo 'str'\n"
"concat(b\"foo\", b\"bar\")  # OK, saída tem tipo 'bytes'\n"
"concat(\"foo\", b\"bar\")   # Erro, não pode misturar str e bytes"

#: ../../library/typing.rst:862
msgid ""
"Note that, despite its name, ``AnyStr`` has nothing to do with the :class:"
"`Any` type, nor does it mean \"any string\". In particular, ``AnyStr`` and "
"``str | bytes`` are different from each other and have different use cases::"
msgstr ""
"Note que, apesar do seu nome, ``AnyStr`` não tem nada a ver com o tipo :"
"class:`Any`, nem significa \"qualquer string\". Em particular, ``AnyStr`` e "
"``str | bytes`` são diferentes um do outro e têm casos de uso diferentes::"

#: ../../library/typing.rst:867
msgid ""
"# Invalid use of AnyStr:\n"
"# The type variable is used only once in the function signature,\n"
"# so cannot be \"solved\" by the type checker\n"
"def greet_bad(cond: bool) -> AnyStr:\n"
"    return \"hi there!\" if cond else b\"greetings!\"\n"
"\n"
"# The better way of annotating this function:\n"
"def greet_proper(cond: bool) -> str | bytes:\n"
"    return \"hi there!\" if cond else b\"greetings!\""
msgstr ""
"# Uso inválido de AnyStr:\n"
"# A variável de tipo é usada apenas uma vez na assinatura da função,\n"
"# pelo que não pode ser \"resolvida\" pelo verificador de tipo\n"
"def greet_bad(cond: bool) -> AnyStr:\n"
"    return \"hi there!\" if cond else b\"greetings!\"\n"
"\n"
"# A melhor forma de anotar esta função:\n"
"def greet_proper(cond: bool) -> str | bytes:\n"
"    return \"hi there!\" if cond else b\"greetings!\""

#: ../../library/typing.rst:879
msgid "Special type that includes only literal strings."
msgstr "Tipo especial que inclui apenas strings literais."

#: ../../library/typing.rst:881
msgid ""
"Any string literal is compatible with ``LiteralString``, as is another "
"``LiteralString``. However, an object typed as just ``str`` is not. A string "
"created by composing ``LiteralString``-typed objects is also acceptable as a "
"``LiteralString``."
msgstr ""
"Qualquer literal de string é compatível com ``LiteralString``, assim como "
"outro ``LiteralString``. No entanto, um objeto tipado apenas como ``str`` "
"não é. Uma string criada pela composição ``LiteralString``-typed objects is "
"also acceptable as a ``LiteralString``"

#: ../../library/typing.rst:887 ../../library/typing.rst:1968
msgid "Example:"
msgstr "Exemplo:"

#: ../../library/typing.rst:889
msgid ""
"def run_query(sql: LiteralString) -> None:\n"
"    ...\n"
"\n"
"def caller(arbitrary_string: str, literal_string: LiteralString) -> None:\n"
"    run_query(\"SELECT * FROM students\")  # OK\n"
"    run_query(literal_string)  # OK\n"
"    run_query(\"SELECT * FROM \" + literal_string)  # OK\n"
"    run_query(arbitrary_string)  # type checker error\n"
"    run_query(  # type checker error\n"
"        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n"
"    )"
msgstr ""
"def run_query(sql: LiteralString) -> None:\n"
"    ...\n"
"\n"
"def caller(arbitrary_string: str, literal_string: LiteralString) -> None:\n"
"    run_query(\"SELECT * FROM students\")  # OK\n"
"    run_query(literal_string)  # OK\n"
"    run_query(\"SELECT * FROM \" + literal_string)  # OK\n"
"    run_query(arbitrary_string)  # erro do verificador de tipo\n"
"    run_query(  # erro do verificador de tipo\n"
"        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n"
"    )"

#: ../../library/typing.rst:903
msgid ""
"``LiteralString`` is useful for sensitive APIs where arbitrary user-"
"generated strings could generate problems. For example, the two cases above "
"that generate type checker errors could be vulnerable to an SQL injection "
"attack."
msgstr ""
"``LiteralString`` é útil para APIs sensíveis onde strings geradas "
"arbitrariamente pelo utilizador poderiam gerar problemas. Por exemplo, os "
"dois casos acima que geram erros do verificador de tipo poderiam ser "
"vulneráveis a um ataque de injeção SQL."

#: ../../library/typing.rst:908
msgid "See :pep:`675` for more details."
msgstr "Veja :pep:`675` para mais detalhes."

#: ../../library/typing.rst:915
msgid ""
":data:`!Never` and :data:`!NoReturn` represent the `bottom type <https://en."
"wikipedia.org/wiki/Bottom_type>`_, a type that has no members."
msgstr ""
":data:`!Never` e :data:`!NoReturn` representam o `tipo inferior <https://en."
"wikipedia.org/wiki/Bottom_type>`_, um tipo que não tem membros."

#: ../../library/typing.rst:919
msgid ""
"They can be used to indicate that a function never returns, such as :func:"
"`sys.exit`::"
msgstr ""
"Podem ser usados para indicar que uma função nunca retorna, como :func:`sys."
"exit`::"

#: ../../library/typing.rst:922
msgid ""
"from typing import Never  # or NoReturn\n"
"\n"
"def stop() -> Never:\n"
"    raise RuntimeError('no way')"
msgstr ""
"from typing import Never  # ou NoReturn\n"
"\n"
"def stop() -> Never:\n"
"    raise RuntimeError('no way')"

#: ../../library/typing.rst:927
msgid ""
"Or to define a function that should never be called, as there are no valid "
"arguments, such as :func:`assert_never`::"
msgstr ""
"Ou para definir uma função que nunca deve ser chamada, uma vez que não há "
"argumentos válidos, como :func:`assert_never`::"

#: ../../library/typing.rst:931
msgid ""
"from typing import Never  # or NoReturn\n"
"\n"
"def never_call_me(arg: Never) -> None:\n"
"    pass\n"
"\n"
"def int_or_str(arg: int | str) -> None:\n"
"    never_call_me(arg)  # type checker error\n"
"    match arg:\n"
"        case int():\n"
"            print(\"It's an int\")\n"
"        case str():\n"
"            print(\"It's a str\")\n"
"        case _:\n"
"            never_call_me(arg)  # OK, arg is of type Never (or NoReturn)"
msgstr ""
"from typing import Never  # ou NoReturn\n"
"\n"
"def never_call_me(arg: Never) -> None:\n"
"    pass\n"
"\n"
"def int_or_str(arg: int | str) -> None:\n"
"    never_call_me(arg)  # erro do verificador de tipo\n"
"    match arg:\n"
"        case int():\n"
"            print(\"It's an int\")\n"
"        case str():\n"
"            print(\"It's a str\")\n"
"        case _:\n"
"            never_call_me(arg)  # OK, arg é do tipo Never (ou NoReturn)"

#: ../../library/typing.rst:946
msgid ""
":data:`!Never` and :data:`!NoReturn` have the same meaning in the type "
"system and static type checkers treat both equivalently."
msgstr ""
":data:`!Never` e :data:`!NoReturn` têm o mesmo significado no sistema de "
"tipos e os verificadores de tipo estáticos tratam ambos de forma equivalente."

#: ../../library/typing.rst:951
msgid "Added :data:`NoReturn`."
msgstr "Adicionado :data:`NoReturn`."

#: ../../library/typing.rst:955
msgid "Added :data:`Never`."
msgstr "Adicionado :data:`Never`."

#: ../../library/typing.rst:959
msgid "Special type to represent the current enclosed class."
msgstr "Tipo especial para representar a classe atual envolvente."

#: ../../library/typing.rst:963
msgid ""
"from typing import Self, reveal_type\n"
"\n"
"class Foo:\n"
"    def return_self(self) -> Self:\n"
"        ...\n"
"        return self\n"
"\n"
"class SubclassOfFoo(Foo): pass\n"
"\n"
"reveal_type(Foo().return_self())  # Revealed type is \"Foo\"\n"
"reveal_type(SubclassOfFoo().return_self())  # Revealed type is "
"\"SubclassOfFoo\""
msgstr ""
"from typing import Self, reveal_type\n"
"\n"
"class Foo:\n"
"    def return_self(self) -> Self:\n"
"        ...\n"
"        return self\n"
"\n"
"class SubclassOfFoo(Foo): pass\n"
"\n"
"reveal_type(Foo().return_self())  # Tipo revelado é \"Foo\"\n"
"reveal_type(SubclassOfFoo().return_self())  # Tipo revelado é "
"\"SubclassOfFoo\""

#: ../../library/typing.rst:975
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""
"Esta anotação é semanticamente equivalente ao seguinte, embora de forma mais "
"sucinta::"

#: ../../library/typing.rst:978
msgid ""
"from typing import TypeVar\n"
"\n"
"Self = TypeVar(\"Self\", bound=\"Foo\")\n"
"\n"
"class Foo:\n"
"    def return_self(self: Self) -> Self:\n"
"        ...\n"
"        return self"
msgstr ""
"from typing import TypeVar\n"
"\n"
"Self = TypeVar(\"Self\", bound=\"Foo\")\n"
"\n"
"class Foo:\n"
"    def return_self(self: Self) -> Self:\n"
"        ...\n"
"        return self"

#: ../../library/typing.rst:987
msgid ""
"In general, if something returns ``self``, as in the above examples, you "
"should use ``Self`` as the return annotation. If ``Foo.return_self`` was "
"annotated as returning ``\"Foo\"``, then the type checker would infer the "
"object returned from ``SubclassOfFoo.return_self`` as being of type ``Foo`` "
"rather than ``SubclassOfFoo``."
msgstr ""
"Em geral, se algo retorna ``self``, como nos exemplos acima, deve usar "
"``Self`` como a anotação de retorno. Se ``Foo.return_self`` fosse anotado "
"como retornando ``\"Foo\"``, então o verificador de tipo inferiria o objeto "
"retornado de ``SubclassOfFoo.return_self`` como sendo do tipo ``Foo`` em vez "
"de ``SubclassOfFoo``."

#: ../../library/typing.rst:993
msgid "Other common use cases include:"
msgstr "Outros casos de uso comuns incluem:"

#: ../../library/typing.rst:995
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr ""
":class:`classmethod`\\s que são usados como construtores alternativos e "
"retornam instâncias do parâmetro ``cls``."

#: ../../library/typing.rst:997
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr "Anotar um método :meth:`~object.__enter__` que retorna self."

#: ../../library/typing.rst:999
msgid ""
"You should not use ``Self`` as the return annotation if the method is not "
"guaranteed to return an instance of a subclass when the class is subclassed::"
msgstr ""
"Não deve usar ``Self`` como a anotação de retorno se o método não estiver "
"garantido a retornar uma instância de uma subclasse quando a classe é "
"subclassificada::"

#: ../../library/typing.rst:1003
msgid ""
"class Eggs:\n"
"    # Self would be an incorrect return annotation here,\n"
"    # as the object returned is always an instance of Eggs,\n"
"    # even in subclasses\n"
"    def returns_eggs(self) -> \"Eggs\":\n"
"        return Eggs()"
msgstr ""
"class Eggs:\n"
"    # Self seria uma anotação de retorno incorreta aqui,\n"
"    # uma vez que o objeto retornado é sempre uma instância de Eggs,\n"
"    # mesmo em subclasses\n"
"    def returns_eggs(self) -> \"Eggs\":\n"
"        return Eggs()"

#: ../../library/typing.rst:1010
msgid "See :pep:`673` for more details."
msgstr "Veja :pep:`673` para mais detalhes."

#: ../../library/typing.rst:1016
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr ""
"Anotação especial para declarar explicitamente um :ref:`alias de tipo <type-"
"aliases>`."

#: ../../library/typing.rst:1020
msgid ""
"from typing import TypeAlias\n"
"\n"
"Factors: TypeAlias = list[int]"
msgstr ""
"from typing import TypeAlias\n"
"\n"
"Factors: TypeAlias = list[int]"

#: ../../library/typing.rst:1024
msgid ""
"``TypeAlias`` is particularly useful on older Python versions for annotating "
"aliases that make use of forward references, as it can be hard for type "
"checkers to distinguish these from normal variable assignments:"
msgstr ""
"``TypeAlias`` é particularmente útil em versões mais antigas do Python para "
"anotar aliases que usam referências antecipadas, uma vez que pode ser "
"difícil para os verificadores de tipo distinguir estas de atribuições "
"normais de variáveis:"

#: ../../library/typing.rst:1028
msgid ""
"from typing import Generic, TypeAlias, TypeVar\n"
"\n"
"T = TypeVar(\"T\")\n"
"\n"
"# \"Box\" does not exist yet,\n"
"# so we have to use quotes for the forward reference on Python <3.12.\n"
"# Using ``TypeAlias`` tells the type checker that this is a type alias "
"declaration,\n"
"# not a variable assignment to a string.\n"
"BoxOfStrings: TypeAlias = \"Box[str]\"\n"
"\n"
"class Box(Generic[T]):\n"
"    @classmethod\n"
"    def make_box_of_strings(cls) -> BoxOfStrings: ..."
msgstr ""
"from typing import Generic, TypeAlias, TypeVar\n"
"\n"
"T = TypeVar(\"T\")\n"
"\n"
"# \"Box\" ainda não existe,\n"
"# pelo que temos de usar aspas para a referência antecipada no Python "
"<3.12.\n"
"# Usar ``TypeAlias`` diz ao verificador de tipo que isto é uma declaração de "
"alias de tipo,\n"
"# não uma atribuição de variável a uma string.\n"
"BoxOfStrings: TypeAlias = \"Box[str]\"\n"
"\n"
"class Box(Generic[T]):\n"
"    @classmethod\n"
"    def make_box_of_strings(cls) -> BoxOfStrings: ..."

#: ../../library/typing.rst:1044
msgid "See :pep:`613` for more details."
msgstr "Veja :pep:`613` para mais detalhes."

#: ../../library/typing.rst:1048
msgid ""
":data:`TypeAlias` is deprecated in favor of the :keyword:`type` statement, "
"which creates instances of :class:`TypeAliasType` and which natively "
"supports forward references. Note that while :data:`TypeAlias` and :class:"
"`TypeAliasType` serve similar purposes and have similar names, they are "
"distinct and the latter is not the type of the former. Removal of :data:"
"`TypeAlias` is not currently planned, but users are encouraged to migrate "
"to :keyword:`type` statements."
msgstr ""
":data:`TypeAlias` está obsoleto em favor da instrução :keyword:`type`, que "
"cria instâncias de :class:`TypeAliasType` e que suporta nativamente "
"referências antecipadas. Note que, embora :data:`TypeAlias` e :class:"
"`TypeAliasType` sirvam propósitos semelhantes e tenham nomes semelhantes, "
"são distintos e este último não é o tipo do primeiro. A remoção de :data:"
"`TypeAlias` não está atualmente planeada, mas os utilizadores são "
"incentivados a migrar para instruções :keyword:`type`."

#: ../../library/typing.rst:1059
msgid "Special forms"
msgstr "Formas especiais"

#: ../../library/typing.rst:1061
msgid ""
"These can be used as types in annotations. They all support subscription "
"using ``[]``, but each has a unique syntax."
msgstr ""
"Estes podem ser usados como tipos em anotações. Todos suportam subíndices "
"usando ``[]``, mas cada um tem uma sintaxe única."

#: ../../library/typing.rst:1066
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""
"Tipo união; ``Union[X, Y]`` é equivalente a ``X | Y`` e significa X ou Y."

#: ../../library/typing.rst:1068
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""
"Para definir uma união, use por exemplo ``Union[int, str]`` ou a forma "
"abreviada ``int | str``. É recomendado usar essa forma abreviada. Detalhes:"

#: ../../library/typing.rst:1070
msgid "The arguments must be types and there must be at least one."
msgstr "Os argumentos devem ser tipos e deve haver pelo menos um."

#: ../../library/typing.rst:1072
msgid "Unions of unions are flattened, e.g.::"
msgstr "Uniões de uniões são achatadas, por exemplo::"

#: ../../library/typing.rst:1074
msgid "Union[Union[int, str], float] == Union[int, str, float]"
msgstr "Union[Union[int, str], float] == Union[int, str, float]"

#: ../../library/typing.rst:1076
msgid "Unions of a single argument vanish, e.g.::"
msgstr "Uniões de um único argumento desaparecem, por exemplo::"

#: ../../library/typing.rst:1078
msgid "Union[int] == int  # The constructor actually returns int"
msgstr "Union[int] == int  # O construtor na verdade retorna int"

#: ../../library/typing.rst:1080
msgid "Redundant arguments are skipped, e.g.::"
msgstr "Argumentos redundantes são ignorados, por exemplo::"

#: ../../library/typing.rst:1082
msgid "Union[int, str, int] == Union[int, str] == int | str"
msgstr "Union[int, str, int] == Union[int, str] == int | str"

#: ../../library/typing.rst:1084
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "Ao comparar uniões, a ordem dos argumentos é ignorada, por exemplo::"

#: ../../library/typing.rst:1086
msgid "Union[int, str] == Union[str, int]"
msgstr "Union[int, str] == Union[str, int]"

#: ../../library/typing.rst:1088
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "Não pode criar uma subclasse ou instanciar um ``Union``."

#: ../../library/typing.rst:1090
msgid "You cannot write ``Union[X][Y]``."
msgstr "Não pode escrever ``Union[X][Y]``."

#: ../../library/typing.rst:1092
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "Não remova subclasses explícitas de uniões em tempo de execução."

#: ../../library/typing.rst:1095
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"As uniões podem agora ser escritas como ``X | Y``. Veja :ref:`expressões de "
"tipo união<types-union>`."

#: ../../library/typing.rst:1101
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr "``Optional[X]`` é equivalente a ``X | None`` (ou ``Union[X, None]``)."

#: ../../library/typing.rst:1103
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"Note que isto não é o mesmo conceito que um argumento opcional, que é aquele "
"que tem um valor predefinido. Um argumento opcional com um valor predefinido "
"não requer o qualificador ``Optional`` na sua anotação de tipo apenas porque "
"é opcional. Por exemplo::"

#: ../../library/typing.rst:1108
msgid ""
"def foo(arg: int = 0) -> None:\n"
"    ..."
msgstr ""
"def foo(arg: int = 0) -> None:\n"
"    ..."

#: ../../library/typing.rst:1111
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"Por outro lado, se um valor explícito de ``None`` for permitido, o uso de "
"``Optional`` é apropriado, quer o argumento seja opcional ou não. Por "
"exemplo::"

#: ../../library/typing.rst:1115
msgid ""
"def foo(arg: Optional[int] = None) -> None:\n"
"    ..."
msgstr ""
"def foo(arg: Optional[int] = None) -> None:\n"
"    ..."

#: ../../library/typing.rst:1118
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Optional pode agora ser escrito como ``X | None``. Veja :ref:`expressões de "
"tipo união<types-union>`."

#: ../../library/typing.rst:1124
msgid "Special form for annotating higher-order functions."
msgstr "Forma especial para anotar funções de ordem superior."

#: ../../library/typing.rst:1126
msgid ""
"``Concatenate`` can be used in conjunction with :ref:`Callable <annotating-"
"callables>` and :class:`ParamSpec` to annotate a higher-order callable which "
"adds, removes, or transforms parameters of another callable.  Usage is in "
"the form ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. "
"``Concatenate`` is currently only valid when used as the first argument to "
"a :ref:`Callable <annotating-callables>`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""
"``Concatenate`` pode ser usado em conjunto com :ref:`Callable <annotating-"
"callables>` e :class:`ParamSpec` para anotar um objeto chamável de ordem "
"superior que adiciona, remove ou transforma parâmetros de outro objeto "
"chamável. O uso é na forma ``Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable]``. ``Concatenate`` é atualmente válido apenas quando "
"usado como o primeiro argumento para um :ref:`Callable <annotating-"
"callables>`. O último parâmetro para ``Concatenate`` deve ser um :class:"
"`ParamSpec` ou uma reticência (``...``)."

#: ../../library/typing.rst:1135
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""
"Por exemplo, para anotar um decorador ``with_lock`` que fornece um :class:"
"`threading.Lock` à função decorada, ``Concatenate`` pode ser usado para "
"indicar que ``with_lock`` espera um objeto chamável que recebe um ``Lock`` "
"como o primeiro argumento e retorna um objeto chamável com uma assinatura de "
"tipo diferente. Neste caso, o :class:`ParamSpec` indica que os tipos de "
"parâmetros do objeto chamável retornado são dependentes dos tipos de "
"parâmetros do objeto chamável que está a ser passado::"

#: ../../library/typing.rst:1143
msgid ""
"from collections.abc import Callable\n"
"from threading import Lock\n"
"from typing import Concatenate\n"
"\n"
"# Use this lock to ensure that only one thread is executing a function\n"
"# at any time.\n"
"my_lock = Lock()\n"
"\n"
"def with_lock[**P, R](f: Callable[Concatenate[Lock, P], R]) -> Callable[P, "
"R]:\n"
"    '''A type-safe decorator which provides a lock.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> R:\n"
"        # Provide the lock as the first argument.\n"
"        return f(my_lock, *args, **kwargs)\n"
"    return inner\n"
"\n"
"@with_lock\n"
"def sum_threadsafe(lock: Lock, numbers: list[float]) -> float:\n"
"    '''Add a list of numbers together in a thread-safe manner.'''\n"
"    with lock:\n"
"        return sum(numbers)\n"
"\n"
"# We don't need to pass in the lock ourselves thanks to the decorator.\n"
"sum_threadsafe([1.1, 2.2, 3.3])"
msgstr ""
"from collections.abc import Callable\n"
"from threading import Lock\n"
"from typing import Concatenate\n"
"\n"
"# Use este bloqueio para garantir que apenas uma thread está a executar uma "
"função\n"
"# em qualquer momento.\n"
"my_lock = Lock()\n"
"\n"
"def with_lock[**P, R](f: Callable[Concatenate[Lock, P], R]) -> Callable[P, "
"R]:\n"
"    '''Um decorador seguro em termos de tipo que fornece um bloqueio.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> R:\n"
"        # Fornecer o bloqueio como o primeiro argumento.\n"
"        return f(my_lock, *args, **kwargs)\n"
"    return inner\n"
"\n"
"@with_lock\n"
"def sum_threadsafe(lock: Lock, numbers: list[float]) -> float:\n"
"    '''Adicionar uma lista de números de forma segura em termos de "
"thread.'''\n"
"    with lock:\n"
"        return sum(numbers)\n"
"\n"
"# Não precisamos de passar o bloqueio nós mesmos graças ao decorador.\n"
"sum_threadsafe([1.1, 2.2, 3.3])"

#: ../../library/typing.rst:1171 ../../library/typing.rst:1936
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)"
msgstr ""
":pep:`612` -- Variáveis de Especificação de Parâmetros (a PEP que introduziu "
"``ParamSpec`` e ``Concatenate``)"

#: ../../library/typing.rst:1173
msgid ":class:`ParamSpec`"
msgstr ":class:`ParamSpec`"

#: ../../library/typing.rst:1174 ../../library/typing.rst:1939
msgid ":ref:`annotating-callables`"
msgstr ":ref:`annotating-callables`"

#: ../../library/typing.rst:1178
msgid "Special typing form to define \"literal types\"."
msgstr "Forma especial de tipagem para definir \"tipos literais\"."

#: ../../library/typing.rst:1180
msgid ""
"``Literal`` can be used to indicate to type checkers that the annotated "
"object has a value equivalent to one of the provided literals."
msgstr ""
"``Literal`` pode ser usado para indicar aos verificadores de tipo que o "
"objeto anotado tem um valor equivalente a um dos literais fornecidos."

#: ../../library/typing.rst:1186
msgid ""
"def validate_simple(data: Any) -> Literal[True]:  # always returns True\n"
"    ...\n"
"\n"
"type Mode = Literal['r', 'rb', 'w', 'wb']\n"
"def open_helper(file: str, mode: Mode) -> str:\n"
"    ...\n"
"\n"
"open_helper('/some/path', 'r')      # Passes type check\n"
"open_helper('/other/path', 'typo')  # Error in type checker"
msgstr ""
"def validate_simple(data: Any) -> Literal[True]:  # sempre retorna True\n"
"    ...\n"
"\n"
"type Mode = Literal['r', 'rb', 'w', 'wb']\n"
"def open_helper(file: str, mode: Mode) -> str:\n"
"    ...\n"
"\n"
"open_helper('/some/path', 'r')      # Passa verificação de tipo\n"
"open_helper('/other/path', 'typo')  # Erro no verificador de tipo"

#: ../../library/typing.rst:1196
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` não pode ser subclassificado. Em tempo de execução, um "
"valor arbitrário é permitido como argumento de tipo para ``Literal[...]``, "
"mas os verificadores de tipo podem impor restrições. Veja :pep:`586` para "
"mais detalhes sobre tipos literais."

#: ../../library/typing.rst:1202
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` agora remove parâmetros duplicados. Comparações de igualdade de "
"objetos ``Literal`` já não dependem da ordem. Objetos ``Literal`` agora "
"levantarão uma exceção :exc:`TypeError` durante comparações de igualdade se "
"um dos seus parâmetros não for :term:`hashable`."

#: ../../library/typing.rst:1210
msgid "Special type construct to mark class variables."
msgstr ""

#: ../../library/typing.rst:1212
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
"Como introduzido em :pep:`526`, uma anotação de variável envolvida em "
"ClassVar indica que um determinado atributo é destinado a ser usado como uma "
"variável de classe e não deve ser definido em instâncias dessa classe. "
"Utilização::"

#: ../../library/typing.rst:1216
msgid ""
"class Starship:\n"
"    stats: ClassVar[dict[str, int]] = {} # class variable\n"
"    damage: int = 10                     # instance variable"
msgstr ""
"class Starship:\n"
"    stats: ClassVar[dict[str, int]] = {} # variável de classe\n"
"    damage: int = 10                     # variável de instância"

#: ../../library/typing.rst:1220
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ":data:`ClassVar` aceita apenas tipos e não pode ser mais subscrevido."

#: ../../library/typing.rst:1222
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` não é uma classe em si, e não deve ser usado com :func:"
"`isinstance` ou :func:`issubclass`. :data:`ClassVar` não altera o "
"comportamento em tempo de execução do Python, mas pode ser usado por "
"verificadores de tipo de terceiros. Por exemplo, um verificador de tipo pode "
"marcar o seguinte código como um erro::"

#: ../../library/typing.rst:1228
msgid ""
"enterprise_d = Starship(3000)\n"
"enterprise_d.stats = {} # Error, setting class variable on instance\n"
"Starship.stats = {}     # This is OK"
msgstr ""
"enterprise_d = Starship(3000)\n"
"enterprise_d.stats = {} # Erro, a definir variável de classe em instância\n"
"Starship.stats = {}     # Isto está OK"

#: ../../library/typing.rst:1236
msgid "Special typing construct to indicate final names to type checkers."
msgstr ""
"Construção especial de tipagem para indicar nomes finais aos verificadores "
"de tipo."

#: ../../library/typing.rst:1238
msgid ""
"Final names cannot be reassigned in any scope. Final names declared in class "
"scopes cannot be overridden in subclasses."
msgstr ""
"Nomes finais não podem ser reatribuídos em nenhum escopo. Nomes finais "
"declarados em escopos de classe não podem ser substituídos em subclasses."

#: ../../library/typing.rst:1243
msgid ""
"MAX_SIZE: Final = 9000\n"
"MAX_SIZE += 1  # Error reported by type checker\n"
"\n"
"class Connection:\n"
"    TIMEOUT: Final[int] = 10\n"
"\n"
"class FastConnector(Connection):\n"
"    TIMEOUT = 1  # Error reported by type checker"
msgstr ""
"MAX_SIZE: Final = 9000\n"
"MAX_SIZE += 1  # Erro reportado pelo verificador de tipo\n"
"\n"
"class Connection:\n"
"    TIMEOUT: Final[int] = 10\n"
"\n"
"class FastConnector(Connection):\n"
"    TIMEOUT = 1  # Erro reportado pelo verificador de tipo"

#: ../../library/typing.rst:1252 ../../library/typing.rst:2863
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""
"Não há verificação em tempo de execução destas propriedades. Veja :pep:`591` "
"para mais detalhes."

#: ../../library/typing.rst:1259
msgid "Special typing construct to mark a :class:`TypedDict` key as required."
msgstr ""
"Construção especial de tipagem para marcar uma chave :class:`TypedDict` como "
"obrigatória."

#: ../../library/typing.rst:1261
msgid ""
"This is mainly useful for ``total=False`` TypedDicts. See :class:`TypedDict` "
"and :pep:`655` for more details."
msgstr ""
"Isto é principalmente útil para ``total=False`` TypedDicts. Veja :class:"
"`TypedDict` e :pep:`655` para mais detalhes."

#: ../../library/typing.rst:1268
msgid ""
"Special typing construct to mark a :class:`TypedDict` key as potentially "
"missing."
msgstr ""
"Construção especial de tipagem para marcar uma chave :class:`TypedDict` como "
"potencialmente em falta."

#: ../../library/typing.rst:1271
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr "Veja :class:`TypedDict` e :pep:`655` para mais detalhes."

#: ../../library/typing.rst:1277
msgid "Special typing form to add context-specific metadata to an annotation."
msgstr ""
"Forma especial de tipagem para adicionar metadados específicos de contexto a "
"uma anotação."

#: ../../library/typing.rst:1279
msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in "
"a :attr:`!__metadata__` attribute."
msgstr ""
"Adicione metadados ``x`` a um tipo dado ``T`` usando a anotação "
"``Annotated[T, x]``. Metadados adicionados usando ``Annotated`` podem ser "
"usados por ferramentas de análise estática ou em tempo de execução. Em tempo "
"de execução, os metadados são armazenados num atributo :attr:`!__metadata__`."

#: ../../library/typing.rst:1284
msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no "
"special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code "
"that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""
"Se uma biblioteca ou ferramenta encontrar uma anotação ``Annotated[T, x]`` e "
"não tiver lógica especial para os metadados, deve ignorar os metadados e "
"tratar simplesmente a anotação como ``T``. Como tal, ``Annotated`` pode ser "
"útil para código que queira usar anotações para fins fora do sistema de "
"tipagem estática do Python."

#: ../../library/typing.rst:1290
msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking "
"for a function or class."
msgstr ""
"Usar ``Annotated[T, x]`` como uma anotação ainda permite a verificação de "
"tipo estática de ``T``, uma vez que os verificadores de tipo simplesmente "
"ignoram os metadados ``x``. Desta forma, ``Annotated`` difere do decorador :"
"func:`@no_type_check <no_type_check>`, que também pode ser usado para "
"adicionar anotações fora do escopo do sistema de tipagem, mas desativa "
"completamente a verificação de tipo para uma função ou classe."

#: ../../library/typing.rst:1297
msgid ""
"The responsibility of how to interpret the metadata lies with the tool or "
"library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to "
"determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""
"A responsabilidade de como interpretar os metadados cabe à ferramenta ou "
"biblioteca que encontrar uma anotação ``Annotated``. Uma ferramenta ou "
"biblioteca que encontrar um tipo ``Annotated`` pode examinar os elementos de "
"metadados para determinar se são de interesse (por exemplo, usando :func:"
"`isinstance`)."

#: ../../library/typing.rst:1305
msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr ""
"Aqui está um exemplo de como pode usar ``Annotated`` para adicionar "
"metadados a anotações de tipo se estivesse a fazer análise de intervalos:"

#: ../../library/typing.rst:1308
msgid ""
"@dataclass\n"
"class ValueRange:\n"
"    lo: int\n"
"    hi: int\n"
"\n"
"T1 = Annotated[int, ValueRange(-10, 5)]\n"
"T2 = Annotated[T1, ValueRange(-20, 3)]"
msgstr ""
"@dataclass\n"
"class ValueRange:\n"
"    lo: int\n"
"    hi: int\n"
"\n"
"T1 = Annotated[int, ValueRange(-10, 5)]\n"
"T2 = Annotated[T1, ValueRange(-20, 3)]"

#: ../../library/typing.rst:1318
msgid ""
"The first argument to ``Annotated`` must be a valid type. Multiple metadata "
"elements can be supplied as ``Annotated`` supports variadic arguments. The "
"order of the metadata elements is preserved and matters for equality checks::"
msgstr ""
"O primeiro argumento para ``Annotated`` deve ser um tipo válido. Múltiplos "
"elementos de metadados podem ser fornecidos, uma vez que ``Annotated`` "
"suporta argumentos variádicos. A ordem dos elementos de metadados é "
"preservada e importa para verificações de igualdade::"

#: ../../library/typing.rst:1322
msgid ""
"@dataclass\n"
"class ctype:\n"
"     kind: str\n"
"\n"
"a1 = Annotated[int, ValueRange(3, 10), ctype(\"char\")]\n"
"a2 = Annotated[int, ctype(\"char\"), ValueRange(3, 10)]\n"
"\n"
"assert a1 != a2  # Order matters"
msgstr ""
"@dataclass\n"
"class ctype:\n"
"     kind: str\n"
"\n"
"a1 = Annotated[int, ValueRange(3, 10), ctype(\"char\")]\n"
"a2 = Annotated[int, ctype(\"char\"), ValueRange(3, 10)]\n"
"\n"
"assert a1 != a2  # A ordem importa"

#: ../../library/typing.rst:1331
msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr ""
"Cabe à ferramenta que consome as anotações decidir se o cliente tem "
"permissão para adicionar múltiplos elementos de metadados a uma anotação e "
"como fundir essas anotações."

#: ../../library/typing.rst:1335
msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements "
"starts with the innermost annotation::"
msgstr ""
"Tipos ``Annotated`` aninhados são achatados. A ordem dos elementos de "
"metadados começa com a anotação mais interna::"

#: ../../library/typing.rst:1338
msgid ""
"assert Annotated[Annotated[int, ValueRange(3, 10)], ctype(\"char\")] == "
"Annotated[\n"
"    int, ValueRange(3, 10), ctype(\"char\")\n"
"]"
msgstr ""
"assert Annotated[Annotated[int, ValueRange(3, 10)], ctype(\"char\")] == "
"Annotated[\n"
"    int, ValueRange(3, 10), ctype(\"char\")\n"
"]"

#: ../../library/typing.rst:1342
msgid "Duplicated metadata elements are not removed::"
msgstr "Elementos de metadados duplicados não são removidos::"

#: ../../library/typing.rst:1344
msgid ""
"assert Annotated[int, ValueRange(3, 10)] != Annotated[\n"
"    int, ValueRange(3, 10), ValueRange(3, 10)\n"
"]"
msgstr ""
"assert Annotated[int, ValueRange(3, 10)] != Annotated[\n"
"    int, ValueRange(3, 10), ValueRange(3, 10)\n"
"]"

#: ../../library/typing.rst:1348
msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr "``Annotated`` pode ser usado com aliases aninhados e genéricos:"

#: ../../library/typing.rst:1350
msgid ""
"@dataclass\n"
"class MaxLen:\n"
"    value: int\n"
"\n"
"type Vec[T] = Annotated[list[tuple[T, T]], MaxLen(10)]\n"
"\n"
"# When used in a type annotation, a type checker will treat \"V\" the same "
"as\n"
"# ``Annotated[list[tuple[int, int]], MaxLen(10)]``:\n"
"type V = Vec[int]"
msgstr ""
"@dataclass\n"
"class MaxLen:\n"
"    value: int\n"
"\n"
"type Vec[T] = Annotated[list[tuple[T, T]], MaxLen(10)]\n"
"\n"
"# Quando usado numa anotação de tipo, um verificador de tipo tratará \"V\" "
"da mesma forma que\n"
"# ``Annotated[list[tuple[int, int]], MaxLen(10)]``:\n"
"type V = Vec[int]"

#: ../../library/typing.rst:1362
msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr ""
"``Annotated`` não pode ser usado com um :class:`TypeVarTuple` descompactado::"

#: ../../library/typing.rst:1364
msgid ""
"type Variadic[*Ts] = Annotated[*Ts, Ann1] = Annotated[T1, T2, T3, ..., "
"Ann1]  # NOT valid"
msgstr ""
"type Variadic[*Ts] = Annotated[*Ts, Ann1] = Annotated[T1, T2, T3, ..., "
"Ann1]  # NÃO válido"

#: ../../library/typing.rst:1366
msgid ""
"where ``T1``, ``T2``, ... are :class:`TypeVars <TypeVar>`. This is invalid "
"as only one type should be passed to Annotated."
msgstr ""
"onde ``T1``, ``T2``, ... são :class:`TypeVars <TypeVar>`. Isto é inválido, "
"uma vez que apenas um tipo deve ser passado para Annotated."

#: ../../library/typing.rst:1369
msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""
"Por predefinição, :func:`get_type_hints` remove os metadados das anotações. "
"Passe ``include_extras=True`` para preservar os metadados:"

#: ../../library/typing.rst:1372
msgid ""
">>> from typing import Annotated, get_type_hints\n"
">>> def func(x: Annotated[int, \"metadata\"]) -> None: pass\n"
"...\n"
">>> get_type_hints(func)\n"
"{'x': <class 'int'>, 'return': <class 'NoneType'>}\n"
">>> get_type_hints(func, include_extras=True)\n"
"{'x': typing.Annotated[int, 'metadata'], 'return': <class 'NoneType'>}"
msgstr ""
">>> from typing import Annotated, get_type_hints\n"
">>> def func(x: Annotated[int, \"metadata\"]) -> None: pass\n"
"...\n"
">>> get_type_hints(func)\n"
"{'x': <class 'int'>, 'return': <class 'NoneType'>}\n"
">>> get_type_hints(func, include_extras=True)\n"
"{'x': typing.Annotated[int, 'metadata'], 'return': <class 'NoneType'>}"

#: ../../library/typing.rst:1382
msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr ""
"Em tempo de execução, os metadados associados a um tipo ``Annotated`` podem "
"ser recuperados através do atributo :attr:`!__metadata__`:"

#: ../../library/typing.rst:1385
msgid ""
">>> from typing import Annotated\n"
">>> X = Annotated[int, \"very\", \"important\", \"metadata\"]\n"
">>> X\n"
"typing.Annotated[int, 'very', 'important', 'metadata']\n"
">>> X.__metadata__\n"
"('very', 'important', 'metadata')"
msgstr ""
">>> from typing import Annotated\n"
">>> X = Annotated[int, \"very\", \"important\", \"metadata\"]\n"
">>> X\n"
"typing.Annotated[int, 'very', 'important', 'metadata']\n"
">>> X.__metadata__\n"
"('very', 'important', 'metadata')"

#: ../../library/typing.rst:1394
msgid ""
"If you want to retrieve the original type wrapped by ``Annotated``, use the :"
"attr:`!__origin__` attribute:"
msgstr ""
"Se quiser recuperar o tipo original envolvido por ``Annotated``, use o "
"atributo :attr:`!__origin__`:"

#: ../../library/typing.rst:1397
msgid ""
">>> from typing import Annotated, get_origin\n"
">>> Password = Annotated[str, \"secret\"]\n"
">>> Password.__origin__\n"
"<class 'str'>"
msgstr ""
">>> from typing import Annotated, get_origin\n"
">>> Password = Annotated[str, \"secret\"]\n"
">>> Password.__origin__\n"
"<class 'str'>"

#: ../../library/typing.rst:1404
msgid "Note that using :func:`get_origin` will return ``Annotated`` itself:"
msgstr "Note que usar :func:`get_origin` retornará ``Annotated`` em si:"

#: ../../library/typing.rst:1406
msgid ""
">>> get_origin(Password)\n"
"<class 'typing.Annotated'>"
msgstr ""

#: ../../library/typing.rst:1413
msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ":pep:`593` - Anotações flexíveis de funções e variáveis"

#: ../../library/typing.rst:1414
msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr "A PEP que introduz ``Annotated`` na biblioteca padrão."

#: ../../library/typing.rst:1421
msgid "Special typing construct for marking user-defined type guard functions."
msgstr ""

#: ../../library/typing.rst:1423
msgid ""
"``TypeGuard`` can be used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""

#: ../../library/typing.rst:1427
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""

#: ../../library/typing.rst:1433
msgid ""
"def is_str(val: str | float):\n"
"    # \"isinstance\" type guard\n"
"    if isinstance(val, str):\n"
"        # Type of ``val`` is narrowed to ``str``\n"
"        ...\n"
"    else:\n"
"        # Else, type of ``val`` is narrowed to ``float``.\n"
"        ..."
msgstr ""

#: ../../library/typing.rst:1442
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""

#: ../../library/typing.rst:1446
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""
"Usar ``-> TypeGuard`` diz ao verificador de tipo estático que para uma "
"determinada função:"

#: ../../library/typing.rst:1449
msgid "The return value is a boolean."
msgstr "O valor de retorno é um booleano."

#: ../../library/typing.rst:1450
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""
"Se o valor de retorno for ``True``, o tipo do seu argumento é o tipo dentro "
"de ``TypeGuard``."

#: ../../library/typing.rst:1455
msgid ""
"def is_str_list(val: list[object]) -> TypeGuard[list[str]]:\n"
"    '''Determines whether all objects in the list are strings'''\n"
"    return all(isinstance(x, str) for x in val)\n"
"\n"
"def func1(val: list[object]):\n"
"    if is_str_list(val):\n"
"        # Type of ``val`` is narrowed to ``list[str]``.\n"
"        print(\" \".join(val))\n"
"    else:\n"
"        # Type of ``val`` remains as ``list[object]``.\n"
"        print(\"Not a list of strings!\")"
msgstr ""
"def is_str_list(val: list[object]) -> TypeGuard[list[str]]:\n"
"    '''Determina se todos os objetos na lista são strings'''\n"
"    return all(isinstance(x, str) for x in val)\n"
"\n"
"def func1(val: list[object]):\n"
"    if is_str_list(val):\n"
"        # Tipo de ``val`` é estreitado para ``list[str]``.\n"
"        print(\" \".join(val))\n"
"    else:\n"
"        # Tipo de ``val`` permanece como ``list[object]``.\n"
"        print(\"Not a list of strings!\")"

#: ../../library/typing.rst:1467
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter (after ``cls`` or "
"``self``)."
msgstr ""

#: ../../library/typing.rst:1471
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""

#: ../../library/typing.rst:1477
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``list[object]`` "
"to ``list[str]`` even though the latter is not a subtype of the former, "
"since ``list`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""

#: ../../library/typing.rst:1483
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""
"``TypeGuard`` também funciona com variáveis de tipo. Veja :pep:`647` para "
"mais detalhes."

#: ../../library/typing.rst:1490
msgid "Typing operator to conceptually mark an object as having been unpacked."
msgstr ""
"Operador de tipagem para marcar conceitualmente um objeto como tendo sido "
"descompactado."

#: ../../library/typing.rst:1492
msgid ""
"For example, using the unpack operator ``*`` on a :ref:`type variable tuple "
"<typevartuple>` is equivalent to using ``Unpack`` to mark the type variable "
"tuple as having been unpacked::"
msgstr ""
"Por exemplo, usar o operador de descompactação ``*`` num :ref:`tuplo de "
"variável de tipo <typevartuple>` é equivalente a usar ``Unpack`` para marcar "
"o tuplo de variável de tipo como tendo sido descompactado::"

#: ../../library/typing.rst:1496
msgid ""
"Ts = TypeVarTuple('Ts')\n"
"tup: tuple[*Ts]\n"
"# Effectively does:\n"
"tup: tuple[Unpack[Ts]]"
msgstr ""
"Ts = TypeVarTuple('Ts')\n"
"tup: tuple[*Ts]\n"
"# Efetivamente faz:\n"
"tup: tuple[Unpack[Ts]]"

#: ../../library/typing.rst:1501
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context "
"of :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""
"De facto, ``Unpack`` pode ser usado alternadamente com ``*`` no contexto de :"
"class:`typing.TypeVarTuple <TypeVarTuple>` e tipos :class:`builtins.tuple "
"<tuple>`. Pode ver ``Unpack`` a ser usado explicitamente em versões mais "
"antigas do Python, onde ``*`` não podia ser usado em certos lugares::"

#: ../../library/typing.rst:1507
msgid ""
"# In older versions of Python, TypeVarTuple and Unpack\n"
"# are located in the `typing_extensions` backports package.\n"
"from typing_extensions import TypeVarTuple, Unpack\n"
"\n"
"Ts = TypeVarTuple('Ts')\n"
"tup: tuple[*Ts]         # Syntax error on Python <= 3.10!\n"
"tup: tuple[Unpack[Ts]]  # Semantically equivalent, and backwards-compatible"
msgstr ""
"# Em versões mais antigas do Python, TypeVarTuple e Unpack\n"
"# estão localizados no pacote de retroportagem `typing_extensions`.\n"
"from typing_extensions import TypeVarTuple, Unpack\n"
"\n"
"Ts = TypeVarTuple('Ts')\n"
"tup: tuple[*Ts]         # Erro de sintaxe no Python <= 3.10!\n"
"tup: tuple[Unpack[Ts]]  # Semanticamente equivalente, e retrocompatível"

#: ../../library/typing.rst:1515
msgid ""
"``Unpack`` can also be used along with :class:`typing.TypedDict` for typing "
"``**kwargs`` in a function signature::"
msgstr ""
"``Unpack`` também pode ser usado juntamente com :class:`typing.TypedDict` "
"para tipar ``**kwargs`` numa assinatura de função::"

#: ../../library/typing.rst:1518
msgid ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"    name: str\n"
"    year: int\n"
"\n"
"# This function expects two keyword arguments - `name` of type `str`\n"
"# and `year` of type `int`.\n"
"def foo(**kwargs: Unpack[Movie]): ..."
msgstr ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"    name: str\n"
"    year: int\n"
"\n"
"# Esta função espera dois argumentos nomeados - `name` do tipo `str`\n"
"# e `year` do tipo `int`.\n"
"def foo(**kwargs: Unpack[Movie]): ..."

#: ../../library/typing.rst:1528
msgid ""
"See :pep:`692` for more details on using ``Unpack`` for ``**kwargs`` typing."
msgstr ""
"Veja :pep:`692` para mais detalhes sobre o uso de ``Unpack`` para tipagem de "
"``**kwargs``."

#: ../../library/typing.rst:1533
msgid "Building generic types and type aliases"
msgstr "Construção de tipos genéricos e aliases de tipo"

#: ../../library/typing.rst:1535
msgid ""
"The following classes should not be used directly as annotations. Their "
"intended purpose is to be building blocks for creating generic types and "
"type aliases."
msgstr ""
"As seguintes classes não devem ser usadas diretamente como anotações. O seu "
"propósito é serem blocos de construção para criar tipos genéricos e aliases "
"de tipo."

#: ../../library/typing.rst:1539
msgid ""
"These objects can be created through special syntax (:ref:`type parameter "
"lists <type-params>` and the :keyword:`type` statement). For compatibility "
"with Python 3.11 and earlier, they can also be created without the dedicated "
"syntax, as documented below."
msgstr ""
"Estes objetos podem ser criados através de sintaxe especial (:ref:`listas de "
"parâmetros de tipo <type-params>` e a instrução :keyword:`type`). Para "
"compatibilidade com o Python 3.11 e anteriores, também podem ser criados sem "
"a sintaxe dedicada, como documentado abaixo."

#: ../../library/typing.rst:1546
msgid "Abstract base class for generic types."
msgstr "Classe base abstrata para tipos genéricos."

#: ../../library/typing.rst:1548
msgid ""
"A generic type is typically declared by adding a list of type parameters "
"after the class name::"
msgstr ""
"Um tipo genérico é tipicamente declarado adicionando uma lista de parâmetros "
"de tipo depois do nome da classe::"

#: ../../library/typing.rst:1551
msgid ""
"class Mapping[KT, VT]:\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # Etc."
msgstr ""
"class Mapping[KT, VT]:\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # Etc."

#: ../../library/typing.rst:1556
msgid ""
"Such a class implicitly inherits from ``Generic``. The runtime semantics of "
"this syntax are discussed in the :ref:`Language Reference <generic-classes>`."
msgstr ""
"Tal classe herda implicitamente de ``Generic``. A semântica de tempo de "
"execução desta sintaxe é discutida na :ref:`Referência da Linguagem <generic-"
"classes>`."

#: ../../library/typing.rst:1560
msgid "This class can then be used as follows::"
msgstr "Esta classe pode então ser usada da seguinte forma::"

#: ../../library/typing.rst:1562
msgid ""
"def lookup_name[X, Y](mapping: Mapping[X, Y], key: X, default: Y) -> Y:\n"
"    try:\n"
"        return mapping[key]\n"
"    except KeyError:\n"
"        return default"
msgstr ""
"def lookup_name[X, Y](mapping: Mapping[X, Y], key: X, default: Y) -> Y:\n"
"    try:\n"
"        return mapping[key]\n"
"    except KeyError:\n"
"        return default"

#: ../../library/typing.rst:1568
msgid ""
"Here the brackets after the function name indicate a :ref:`generic function "
"<generic-functions>`."
msgstr ""
"Aqui, os parênteses retos após o nome da função indicam uma :ref:`função "
"genérica <generic-functions>`."

#: ../../library/typing.rst:1571
msgid ""
"For backwards compatibility, generic classes can also be declared by "
"explicitly inheriting from ``Generic``. In this case, the type parameters "
"must be declared separately::"
msgstr ""
"Para compatibilidade retroativa, as classes genéricas também podem ser "
"declaradas herdando explicitamente de ``Generic``. Neste caso, os parâmetros "
"de tipo devem ser declarados separadamente::"

#: ../../library/typing.rst:1576
msgid ""
"KT = TypeVar('KT')\n"
"VT = TypeVar('VT')\n"
"\n"
"class Mapping(Generic[KT, VT]):\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # Etc."
msgstr ""
"KT = TypeVar('KT')\n"
"VT = TypeVar('VT')\n"
"\n"
"class Mapping(Generic[KT, VT]):\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # Etc."

#: ../../library/typing.rst:1588
msgid "Type variable."
msgstr "Variável de tipo."

#: ../../library/typing.rst:1590
msgid ""
"The preferred way to construct a type variable is via the dedicated syntax "
"for :ref:`generic functions <generic-functions>`, :ref:`generic classes "
"<generic-classes>`, and :ref:`generic type aliases <generic-type-aliases>`::"
msgstr ""
"A forma preferida de construir uma variável de tipo é através da sintaxe "
"dedicada para :ref:`funções genéricas <generic-functions>`, :ref:`classes "
"genéricas <generic-classes>`, e :ref:`aliases de tipo genéricos <generic-"
"type-aliases>`::"

#: ../../library/typing.rst:1595
msgid ""
"class Sequence[T]:  # T is a TypeVar\n"
"    ..."
msgstr ""
"class Sequence[T]:  # T é um TypeVar\n"
"    ..."

#: ../../library/typing.rst:1598
msgid ""
"This syntax can also be used to create bounded and constrained type "
"variables::"
msgstr ""
"Esta sintaxe também pode ser usada para criar variáveis de tipo limitadas e "
"restritas::"

#: ../../library/typing.rst:1601
msgid ""
"class StrSequence[S: str]:  # S is a TypeVar with a `str` upper bound;\n"
"    ...                     # we can say that S is \"bounded by `str`\"\n"
"\n"
"\n"
"class StrOrBytesSequence[A: (str, bytes)]:  # A is a TypeVar constrained to "
"str or bytes\n"
"    ..."
msgstr ""
"class StrSequence[S: str]:  # S é um TypeVar com um limite superior `str`;\n"
"    ...                     # podemos dizer que S é \"limitado por `str`\"\n"
"\n"
"\n"
"class StrOrBytesSequence[A: (str, bytes)]:  # A é um TypeVar restrito a str "
"ou bytes\n"
"    ..."

#: ../../library/typing.rst:1608
msgid ""
"However, if desired, reusable type variables can also be constructed "
"manually, like so::"
msgstr ""
"No entanto, se desejado, variáveis de tipo reutilizáveis também podem ser "
"construídas manualmente, como a seguir::"

#: ../../library/typing.rst:1610
msgid ""
"T = TypeVar('T')  # Can be anything\n"
"S = TypeVar('S', bound=str)  # Can be any subtype of str\n"
"A = TypeVar('A', str, bytes)  # Must be exactly str or bytes"
msgstr ""
"T = TypeVar('T')  # Pode ser qualquer coisa\n"
"S = TypeVar('S', bound=str)  # Pode ser qualquer subtipo de str\n"
"A = TypeVar('A', str, bytes)  # Deve ser exatamente str ou bytes"

#: ../../library/typing.rst:1614
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""
"As variáveis de tipo existem principalmente para o benefício dos "
"verificadores de tipo estáticos. Elas servem como os parâmetros para tipos "
"genéricos, bem como para definições de funções genéricas e aliases de tipo. "
"Veja :class:`Generic` para mais informações sobre tipos genéricos. As "
"funções genéricas funcionam da seguinte forma::"

#: ../../library/typing.rst:1620
msgid ""
"def repeat[T](x: T, n: int) -> Sequence[T]:\n"
"    \"\"\"Return a list containing n references to x.\"\"\"\n"
"    return [x]*n\n"
"\n"
"\n"
"def print_capitalized[S: str](x: S) -> S:\n"
"    \"\"\"Print x capitalized, and return x.\"\"\"\n"
"    print(x.capitalize())\n"
"    return x\n"
"\n"
"\n"
"def concatenate[A: (str, bytes)](x: A, y: A) -> A:\n"
"    \"\"\"Add two strings or bytes objects together.\"\"\"\n"
"    return x + y"
msgstr ""
"def repeat[T](x: T, n: int) -> Sequence[T]:\n"
"    \"\"\"Retorna uma lista contendo n referências a x.\"\"\"\n"
"    return [x]*n\n"
"\n"
"\n"
"def print_capitalized[S: str](x: S) -> S:\n"
"    \"\"\"Imprime x com a primeira letra maiúscula e retorna x.\"\"\"\n"
"    print(x.capitalize())\n"
"    return x\n"
"\n"
"\n"
"def concatenate[A: (str, bytes)](x: A, y: A) -> A:\n"
"    \"\"\"Adiciona duas strings ou objetos bytes.\"\"\"\n"
"    return x + y"

#: ../../library/typing.rst:1635
msgid ""
"Note that type variables can be *bounded*, *constrained*, or neither, but "
"cannot be both bounded *and* constrained."
msgstr ""
"Note que as variáveis de tipo podem ser *limitadas*, *restritas*, ou nenhuma "
"das duas, mas não podem ser ambas limitadas *e* restritas."

#: ../../library/typing.rst:1638
msgid ""
"The variance of type variables is inferred by type checkers when they are "
"created through the :ref:`type parameter syntax <type-params>` or when "
"``infer_variance=True`` is passed. Manually created type variables may be "
"explicitly marked covariant or contravariant by passing ``covariant=True`` "
"or ``contravariant=True``. By default, manually created type variables are "
"invariant. See :pep:`484` and :pep:`695` for more details."
msgstr ""
"A variância das variáveis de tipo é inferida pelos verificadores de tipo "
"quando são criadas através da :ref:`sintaxe de parâmetros de tipo <type-"
"params>` ou quando ``infer_variance=True`` é passado. Variáveis de tipo "
"criadas manualmente podem ser explicitamente marcadas como covariantes ou "
"contravariantes passando ``covariant=True`` ou ``contravariant=True``. Por "
"predefinição, variáveis de tipo criadas manualmente são invariantes. Veja :"
"pep:`484` e :pep:`695` para mais detalhes."

#: ../../library/typing.rst:1646
msgid ""
"Bounded type variables and constrained type variables have different "
"semantics in several important ways. Using a *bounded* type variable means "
"that the ``TypeVar`` will be solved using the most specific type possible::"
msgstr ""
"Variáveis de tipo limitadas e variáveis de tipo restritas têm semânticas "
"diferentes de várias formas importantes. Usar uma variável de tipo "
"*limitada* significa que o ``TypeVar`` será resolvido usando o tipo mais "
"específico possível::"

#: ../../library/typing.rst:1650
msgid ""
"x = print_capitalized('a string')\n"
"reveal_type(x)  # revealed type is str\n"
"\n"
"class StringSubclass(str):\n"
"    pass\n"
"\n"
"y = print_capitalized(StringSubclass('another string'))\n"
"reveal_type(y)  # revealed type is StringSubclass\n"
"\n"
"z = print_capitalized(45)  # error: int is not a subtype of str"
msgstr ""
"x = print_capitalized('a string')\n"
"reveal_type(x)  # tipo revelado é str\n"
"\n"
"class StringSubclass(str):\n"
"    pass\n"
"\n"
"y = print_capitalized(StringSubclass('another string'))\n"
"reveal_type(y)  # tipo revelado é StringSubclass\n"
"\n"
"z = print_capitalized(45)  # erro: int não é um subtipo de str"

#: ../../library/typing.rst:1661
msgid ""
"The upper bound of a type variable can be a concrete type, abstract type "
"(ABC or Protocol), or even a union of types::"
msgstr ""
"O limite superior de uma variável de tipo pode ser um tipo concreto, tipo "
"abstrato (ABC ou Protocol), ou até mesmo uma união de tipos::"

#: ../../library/typing.rst:1664
msgid ""
"# Can be anything with an __abs__ method\n"
"def print_abs[T: SupportsAbs](arg: T) -> None:\n"
"    print(\"Absolute value:\", abs(arg))\n"
"\n"
"U = TypeVar('U', bound=str|bytes)  # Can be any subtype of the union str|"
"bytes\n"
"V = TypeVar('V', bound=SupportsAbs)  # Can be anything with an __abs__ method"
msgstr ""
"# Pode ser qualquer coisa com um método __abs__\n"
"def print_abs[T: SupportsAbs](arg: T) -> None:\n"
"    print(\"Valor absoluto:\", abs(arg))\n"
"\n"
"U = TypeVar('U', bound=str|bytes)  # Pode ser qualquer subtipo da união str|"
"bytes\n"
"V = TypeVar('V', bound=SupportsAbs)  # Pode ser qualquer coisa com um método "
"__abs__"

#: ../../library/typing.rst:1673
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr ""
"Usar uma variável de tipo *restrita*, no entanto, significa que o "
"``TypeVar`` só pode ser resolvido como sendo exatamente uma das restrições "
"dadas::"

#: ../../library/typing.rst:1676
msgid ""
"a = concatenate('one', 'two')\n"
"reveal_type(a)  # revealed type is str\n"
"\n"
"b = concatenate(StringSubclass('one'), StringSubclass('two'))\n"
"reveal_type(b)  # revealed type is str, despite StringSubclass being passed "
"in\n"
"\n"
"c = concatenate('one', b'two')  # error: type variable 'A' can be either str "
"or bytes in a function call, but not both"
msgstr ""
"a = concatenate('one', 'two')\n"
"reveal_type(a)  # tipo revelado é str\n"
"\n"
"b = concatenate(StringSubclass('one'), StringSubclass('two'))\n"
"reveal_type(b)  # tipo revelado é str, apesar de StringSubclass ter sido "
"passado\n"
"\n"
"c = concatenate('one', b'two')  # erro: variável de tipo 'A' pode ser str ou "
"bytes numa chamada de função, mas não ambos"

#: ../../library/typing.rst:1684
msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr "Em tempo de execução, ``isinstance(x, T)`` levantará :exc:`TypeError`."

#: ../../library/typing.rst:1688
msgid "The name of the type variable."
msgstr "O nome da variável de tipo."

#: ../../library/typing.rst:1692
msgid "Whether the type var has been explicitly marked as covariant."
msgstr "Se a variável de tipo foi explicitamente marcada como covariante."

#: ../../library/typing.rst:1696
msgid "Whether the type var has been explicitly marked as contravariant."
msgstr "Se a variável de tipo foi explicitamente marcada como contravariante."

#: ../../library/typing.rst:1700
msgid ""
"Whether the type variable's variance should be inferred by type checkers."
msgstr ""
"Se a variância da variável de tipo deve ser inferida pelos verificadores de "
"tipo."

#: ../../library/typing.rst:1706
msgid "The upper bound of the type variable, if any."
msgstr "O limite superior da variável de tipo, se houver."

#: ../../library/typing.rst:1710
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the bound is evaluated only when the attribute is accessed, not "
"when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""
"Para variáveis de tipo criadas através da :ref:`sintaxe de parâmetros de "
"tipo <type-params>`, o limite é avaliado apenas quando o atributo é acedido, "
"não quando a variável de tipo é criada (veja :ref:`lazy-evaluation`)."

#: ../../library/typing.rst:1716
msgid "A tuple containing the constraints of the type variable, if any."
msgstr "Um tuplo contendo as restrições da variável de tipo, se houver."

#: ../../library/typing.rst:1720
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the constraints are evaluated only when the attribute is accessed, "
"not when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""
"Para variáveis de tipo criadas através da :ref:`sintaxe de parâmetros de "
"tipo <type-params>`, as restrições são avaliadas apenas quando o atributo é "
"acedido, não quando a variável de tipo é criada (veja :ref:`lazy-"
"evaluation`)."

#: ../../library/typing.rst:1726
msgid ""
"Type variables can now be declared using the :ref:`type parameter <type-"
"params>` syntax introduced by :pep:`695`. The ``infer_variance`` parameter "
"was added."
msgstr ""
"As variáveis de tipo podem agora ser declaradas usando a :ref:`sintaxe de "
"parâmetros de tipo <type-params>` introduzida pela :pep:`695`. O parâmetro "
"``infer_variance`` foi adicionado."

#: ../../library/typing.rst:1734
msgid ""
"Type variable tuple. A specialized form of :ref:`type variable <typevar>` "
"that enables *variadic* generics."
msgstr ""
"Tuplo de variáveis de tipo. Uma forma especializada de :ref:`variável de "
"tipo <typevar>` que permite *genéricos variádicos*."

#: ../../library/typing.rst:1737
msgid ""
"Type variable tuples can be declared in :ref:`type parameter lists <type-"
"params>` using a single asterisk (``*``) before the name::"
msgstr ""
"Tuplos de variáveis de tipo podem ser declarados em :ref:`listas de "
"parâmetros de tipo <type-params>` usando um único asterisco (``*``) antes do "
"nome::"

#: ../../library/typing.rst:1740
msgid ""
"def move_first_element_to_last[T, *Ts](tup: tuple[T, *Ts]) -> tuple[*Ts, "
"T]:\n"
"    return (*tup[1:], tup[0])"
msgstr ""
"def move_first_element_to_last[T, *Ts](tup: tuple[T, *Ts]) -> tuple[*Ts, "
"T]:\n"
"    return (*tup[1:], tup[0])"

#: ../../library/typing.rst:1743
msgid "Or by explicitly invoking the ``TypeVarTuple`` constructor::"
msgstr "Ou invocando explicitamente o construtor ``TypeVarTuple``::"

#: ../../library/typing.rst:1745
msgid ""
"T = TypeVar(\"T\")\n"
"Ts = TypeVarTuple(\"Ts\")\n"
"\n"
"def move_first_element_to_last(tup: tuple[T, *Ts]) -> tuple[*Ts, T]:\n"
"    return (*tup[1:], tup[0])"
msgstr ""
"T = TypeVar(\"T\")\n"
"Ts = TypeVarTuple(\"Ts\")\n"
"\n"
"def move_first_element_to_last(tup: tuple[T, *Ts]) -> tuple[*Ts, T]:\n"
"    return (*tup[1:], tup[0])"

#: ../../library/typing.rst:1751
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""
"Uma variável de tipo normal permite a parametrização com um único tipo. Um "
"tuplo de variáveis de tipo, em contraste, permite a parametrização com um "
"número *arbitrário* de tipos, atuando como um número *arbitrário* de "
"variáveis de tipo envolvidas num tuplo. Por exemplo::"

#: ../../library/typing.rst:1756
msgid ""
"# T is bound to int, Ts is bound to ()\n"
"# Return value is (1,), which has type tuple[int]\n"
"move_first_element_to_last(tup=(1,))\n"
"\n"
"# T is bound to int, Ts is bound to (str,)\n"
"# Return value is ('spam', 1), which has type tuple[str, int]\n"
"move_first_element_to_last(tup=(1, 'spam'))\n"
"\n"
"# T is bound to int, Ts is bound to (str, float)\n"
"# Return value is ('spam', 3.0, 1), which has type tuple[str, float, int]\n"
"move_first_element_to_last(tup=(1, 'spam', 3.0))\n"
"\n"
"# This fails to type check (and fails at runtime)\n"
"# because tuple[()] is not compatible with tuple[T, *Ts]\n"
"# (at least one element is required)\n"
"move_first_element_to_last(tup=())"
msgstr ""
"# T é ligado a int, Ts é ligado a ()\n"
"# Valor de retorno é (1,), que tem tipo tuple[int]\n"
"move_first_element_to_last(tup=(1,))\n"
"\n"
"# T é ligado a int, Ts é ligado a (str,)\n"
"# Valor de retorno é ('spam', 1), que tem tipo tuple[str, int]\n"
"move_first_element_to_last(tup=(1, 'spam'))\n"
"\n"
"# T é ligado a int, Ts é ligado a (str, float)\n"
"# Valor de retorno é ('spam', 3.0, 1), que tem tipo tuple[str, float, int]\n"
"move_first_element_to_last(tup=(1, 'spam', 3.0))\n"
"\n"
"# Isto falha na verificação de tipo (e falha em tempo de execução)\n"
"# porque tuple[()] não é compatível com tuple[T, *Ts]\n"
"# (pelo menos um elemento é necessário)\n"
"move_first_element_to_last(tup=())"

#: ../../library/typing.rst:1773
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""
"Note o uso do operador de descompactação ``*`` em ``tuple[T, *Ts]``. "
"Conceitualmente, pode pensar em ``Ts`` como um tuplo de variáveis de tipo "
"``(T1, T2, ...)``. ``tuple[T, *Ts]`` tornaria-se então ``tuple[T, *(T1, "
"T2, ...)]``, que é equivalente a ``tuple[T, T1, T2, ...]``. (Note que em "
"versões mais antigas do Python, pode ver isto escrito usando :data:`Unpack "
"<Unpack>` em vez disso, como ``Unpack[Ts]``.)"

#: ../../library/typing.rst:1781
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""
"Tuplos de variáveis de tipo *devem sempre* ser descompactados. Isto ajuda a "
"distinguir tuplos de variáveis de tipo de variáveis de tipo normais::"

#: ../../library/typing.rst:1784
msgid ""
"x: Ts          # Not valid\n"
"x: tuple[Ts]   # Not valid\n"
"x: tuple[*Ts]  # The correct way to do it"
msgstr ""
"x: Ts          # Não válido\n"
"x: tuple[Ts]   # Não válido\n"
"x: tuple[*Ts]  # A forma correta de fazer"

#: ../../library/typing.rst:1788
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""
"Tuplos de variáveis de tipo podem ser usados nos mesmos contextos que "
"variáveis de tipo normais. Por exemplo, em definições de classe, argumentos "
"e tipos de retorno::"

#: ../../library/typing.rst:1791
msgid ""
"class Array[*Shape]:\n"
"    def __getitem__(self, key: tuple[*Shape]) -> float: ...\n"
"    def __abs__(self) -> \"Array[*Shape]\": ...\n"
"    def get_shape(self) -> tuple[*Shape]: ..."
msgstr ""
"class Array[*Shape]:\n"
"    def __getitem__(self, key: tuple[*Shape]) -> float: ...\n"
"    def __abs__(self) -> \"Array[*Shape]\": ...\n"
"    def get_shape(self) -> tuple[*Shape]: ..."

#: ../../library/typing.rst:1796
msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr ""
"Tuplos de variáveis de tipo podem ser combinados felizmente com variáveis de "
"tipo normais:"

#: ../../library/typing.rst:1798
msgid ""
"class Array[DType, *Shape]:  # This is fine\n"
"    pass\n"
"\n"
"class Array2[*Shape, DType]:  # This would also be fine\n"
"    pass\n"
"\n"
"class Height: ...\n"
"class Width: ...\n"
"\n"
"float_array_1d: Array[float, Height] = Array()     # Totally fine\n"
"int_array_2d: Array[int, Height, Width] = Array()  # Yup, fine too"
msgstr ""
"class Array[DType, *Shape]:  # Isto está bem\n"
"    pass\n"
"\n"
"class Array2[*Shape, DType]:  # Isto também estaria bem\n"
"    pass\n"
"\n"
"class Height: ...\n"
"class Width: ...\n"
"\n"
"float_array_1d: Array[float, Height] = Array()     # Totalmente bem\n"
"int_array_2d: Array[int, Height, Width] = Array()  # Sim, também está bem"

#: ../../library/typing.rst:1812
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr ""
"No entanto, note que no máximo um tuplo de variáveis de tipo pode aparecer "
"numa única lista de argumentos de tipo ou parâmetros de tipo::"

#: ../../library/typing.rst:1815
msgid ""
"x: tuple[*Ts, *Ts]            # Not valid\n"
"class Array[*Shape, *Shape]:  # Not valid\n"
"    pass"
msgstr ""
"x: tuple[*Ts, *Ts]            # Não válido\n"
"class Array[*Shape, *Shape]:  # Não válido\n"
"    pass"

#: ../../library/typing.rst:1819
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr ""
"Finalmente, um tuplo de variáveis de tipo descompactado pode ser usado como "
"a anotação de tipo de ``*args``::"

#: ../../library/typing.rst:1822
msgid ""
"def call_soon[*Ts](\n"
"    callback: Callable[[*Ts], None],\n"
"    *args: *Ts\n"
") -> None:\n"
"    ...\n"
"    callback(*args)"
msgstr ""
"def call_soon[*Ts](\n"
"    callback: Callable[[*Ts], None],\n"
"    *args: *Ts\n"
") -> None:\n"
"    ...\n"
"    callback(*args)"

#: ../../library/typing.rst:1829
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""
"Em contraste com anotações não descompactadas de ``*args`` - por exemplo, "
"``*args: int``, que especificaria que *todos* os argumentos são ``int`` - "
"``*args: *Ts`` permite referenciar os tipos dos argumentos *individuais* em "
"``*args``. Aqui, isto permite-nos garantir que os tipos dos ``*args`` "
"passados para ``call_soon`` correspondem aos tipos dos argumentos "
"(posicionais) de ``callback``."

#: ../../library/typing.rst:1836
msgid "See :pep:`646` for more details on type variable tuples."
msgstr "Veja :pep:`646` para mais detalhes sobre tuplos de variáveis de tipo."

#: ../../library/typing.rst:1840
msgid "The name of the type variable tuple."
msgstr "O nome do tuplo de variáveis de tipo."

#: ../../library/typing.rst:1846
msgid ""
"Type variable tuples can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""
"Tuplos de variáveis de tipo podem agora ser declarados usando a :ref:"
"`sintaxe de parâmetros de tipo <type-params>` introduzida pela :pep:`695`."

#: ../../library/typing.rst:1851
msgid ""
"Parameter specification variable.  A specialized version of :ref:`type "
"variables <typevar>`."
msgstr ""
"Variável de especificação de parâmetros. Uma versão especializada de :ref:"
"`variáveis de tipo <typevar>`."

#: ../../library/typing.rst:1854
msgid ""
"In :ref:`type parameter lists <type-params>`, parameter specifications can "
"be declared with two asterisks (``**``)::"
msgstr ""
"Em :ref:`listas de parâmetros de tipo <type-params>`, as especificações de "
"parâmetros podem ser declaradas com dois asteriscos (``**``)::"

#: ../../library/typing.rst:1857
msgid "type IntFunc[**P] = Callable[P, int]"
msgstr "type IntFunc[**P] = Callable[P, int]"

#: ../../library/typing.rst:1859
msgid ""
"For compatibility with Python 3.11 and earlier, ``ParamSpec`` objects can "
"also be created as follows::"
msgstr ""
"Para compatibilidade com o Python 3.11 e versões anteriores, os objetos "
"``ParamSpec`` também podem ser criados da seguinte forma::"

#: ../../library/typing.rst:1862
msgid "P = ParamSpec('P')"
msgstr "P = ParamSpec('P')"

#: ../../library/typing.rst:1864
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""
"As variáveis de especificação de parâmetros existem principalmente para o "
"benefício dos verificadores de tipo estáticos. Elas são usadas para "
"encaminhar os tipos de parâmetros de um objeto chamável para outro objeto "
"chamável - um padrão comumente encontrado em funções de ordem superior e "
"decoradores. Elas são válidas apenas quando usadas em ``Concatenate``, ou "
"como o primeiro argumento para ``Callable``, ou como parâmetros para "
"Genéricos definidos pelo utilizador. Veja :class:`Generic` para mais "
"informações sobre tipos genéricos."

#: ../../library/typing.rst:1871
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""
"Por exemplo, para adicionar registo básico a uma função, pode-se criar um "
"decorador ``add_logging`` para registar chamadas de função. A variável de "
"especificação de parâmetros diz ao verificador de tipo que o objeto chamável "
"passado para o decorador e o novo objeto chamável retornado por ele têm "
"parâmetros de tipo interdependentes::"

#: ../../library/typing.rst:1876
msgid ""
"from collections.abc import Callable\n"
"import logging\n"
"\n"
"def add_logging[T, **P](f: Callable[P, T]) -> Callable[P, T]:\n"
"    '''A type-safe decorator to add logging to a function.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n"
"        logging.info(f'{f.__name__} was called')\n"
"        return f(*args, **kwargs)\n"
"    return inner\n"
"\n"
"@add_logging\n"
"def add_two(x: float, y: float) -> float:\n"
"    '''Add two numbers together.'''\n"
"    return x + y"
msgstr ""
"from collections.abc import Callable\n"
"import logging\n"
"\n"
"def add_logging[T, **P](f: Callable[P, T]) -> Callable[P, T]:\n"
"    '''Um decorador seguro em termos de tipo para adicionar registo a uma "
"função.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n"
"        logging.info(f'{f.__name__} foi chamado')\n"
"        return f(*args, **kwargs)\n"
"    return inner\n"
"\n"
"@add_logging\n"
"def add_two(x: float, y: float) -> float:\n"
"    '''Adicionar dois números.'''\n"
"    return x + y"

#: ../../library/typing.rst:1891
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with upper bound ``Callable[..., Any]``.  However "
"this causes two problems:"
msgstr ""
"Sem ``ParamSpec``, a forma mais simples de anotar isto anteriormente era "
"usar um :class:`TypeVar` com limite superior ``Callable[..., Any]``. No "
"entanto, isto causa dois problemas:"

#: ../../library/typing.rst:1895
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"O verificador de tipo não pode verificar o tipo da função ``inner`` porque "
"``*args`` e ``**kwargs`` têm de ser tipados como :data:`Any`."

#: ../../library/typing.rst:1897
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""
":func:`~cast` pode ser necessário no corpo do decorador ``add_logging`` ao "
"retornar a função ``inner``, ou o verificador de tipo estático deve ser "
"instruído a ignorar o ``return inner``."

#: ../../library/typing.rst:1904
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""
"Como ``ParamSpec`` captura tanto parâmetros nomeados como posicionais , ``P."
"args`` e ``P.kwargs`` podem ser usados para dividir um ``ParamSpec`` nos "
"seus componentes. ``P.args`` representa o tuplo de parâmetros posicionais "
"numa chamada dada e deve ser usado apenas para anotar ``*args``. ``P."
"kwargs`` representa o mapeamento de parâmetros nomeados para os seus valores "
"numa chamada dada, e deve ser usado apenas para anotar ``**kwargs``. Ambos "
"os atributos requerem que o parâmetro anotado esteja no escopo. Em tempo de "
"execução, ``P.args`` e ``P.kwargs`` são instâncias respetivamente de :class:"
"`ParamSpecArgs` e :class:`ParamSpecKwargs`."

#: ../../library/typing.rst:1916
msgid "The name of the parameter specification."
msgstr "O nome da especificação de parâmetros."

#: ../../library/typing.rst:1918
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""

#: ../../library/typing.rst:1928
msgid ""
"Parameter specifications can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""
"As especificações de parâmetros podem agora ser declaradas usando a :ref:"
"`sintaxe de parâmetros de tipo <type-params>` introduzida pela :pep:`695`."

#: ../../library/typing.rst:1932
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""
"Apenas variáveis de especificação de parâmetros definidas no escopo global "
"podem ser serializadas."

#: ../../library/typing.rst:1938
msgid ":data:`Concatenate`"
msgstr ":data:`Concatenate`"

#: ../../library/typing.rst:1944
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""
"Atributos de argumentos e argumentos nomeados de um :class:`ParamSpec`. O "
"atributo ``P.args`` de um ``ParamSpec`` é uma instância de "
"``ParamSpecArgs``, e ``P.kwargs`` é uma instância de ``ParamSpecKwargs``. "
"Eles são destinados à introspeção em tempo de execução e não têm significado "
"especial para verificadores de tipo estáticos."

#: ../../library/typing.rst:1949
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``:"
msgstr ""
"Chamar :func:`get_origin` em qualquer um destes objetos retornará o "
"``ParamSpec`` original:"

#: ../../library/typing.rst:1952
msgid ""
">>> from typing import ParamSpec, get_origin\n"
">>> P = ParamSpec(\"P\")\n"
">>> get_origin(P.args) is P\n"
"True\n"
">>> get_origin(P.kwargs) is P\n"
"True"
msgstr ""
">>> from typing import ParamSpec, get_origin\n"
">>> P = ParamSpec(\"P\")\n"
">>> get_origin(P.args) is P\n"
"True\n"
">>> get_origin(P.kwargs) is P\n"
"True"

#: ../../library/typing.rst:1966
msgid "The type of type aliases created through the :keyword:`type` statement."
msgstr ""
"O tipo de aliases de tipo criados através da instrução :keyword:`type`."

#: ../../library/typing.rst:1970
msgid ""
">>> type Alias = int\n"
">>> type(Alias)\n"
"<class 'typing.TypeAliasType'>"
msgstr ""
">>> type Alias = int\n"
">>> type(Alias)\n"
"<class 'typing.TypeAliasType'>"

#: ../../library/typing.rst:1980
msgid "The name of the type alias:"
msgstr "O nome do alias de tipo:"

#: ../../library/typing.rst:1982
msgid ""
">>> type Alias = int\n"
">>> Alias.__name__\n"
"'Alias'"
msgstr ""
">>> type Alias = int\n"
">>> Alias.__name__\n"
"'Alias'"

#: ../../library/typing.rst:1990
msgid "The module in which the type alias was defined::"
msgstr "O módulo no qual o alias de tipo foi definido::"

#: ../../library/typing.rst:1992
msgid ""
">>> type Alias = int\n"
">>> Alias.__module__\n"
"'__main__'"
msgstr ""
">>> type Alias = int\n"
">>> Alias.__module__\n"
"'__main__'"

#: ../../library/typing.rst:1998
msgid ""
"The type parameters of the type alias, or an empty tuple if the alias is not "
"generic:"
msgstr ""
"Os parâmetros de tipo do alias de tipo, ou um tuplo vazio se o alias não for "
"genérico:"

#: ../../library/typing.rst:2001
msgid ""
">>> type ListOrSet[T] = list[T] | set[T]\n"
">>> ListOrSet.__type_params__\n"
"(T,)\n"
">>> type NotGeneric = int\n"
">>> NotGeneric.__type_params__\n"
"()"
msgstr ""
">>> type ListOrSet[T] = list[T] | set[T]\n"
">>> ListOrSet.__type_params__\n"
"(T,)\n"
">>> type NotGeneric = int\n"
">>> NotGeneric.__type_params__\n"
"()"

#: ../../library/typing.rst:2012
msgid ""
"The type alias's value. This is :ref:`lazily evaluated <lazy-evaluation>`, "
"so names used in the definition of the alias are not resolved until the "
"``__value__`` attribute is accessed:"
msgstr ""
"O valor do alias de tipo. Isto é :ref:`avaliado preguiçosamente <lazy-"
"evaluation>`, pelo que os nomes usados na definição do alias não são "
"resolvidos até que o atributo ``__value__`` seja acedido:"

#: ../../library/typing.rst:2016
msgid ""
">>> type Mutually = Recursive\n"
">>> type Recursive = Mutually\n"
">>> Mutually\n"
"Mutually\n"
">>> Recursive\n"
"Recursive\n"
">>> Mutually.__value__\n"
"Recursive\n"
">>> Recursive.__value__\n"
"Mutually"
msgstr ""
">>> type Mutually = Recursive\n"
">>> type Recursive = Mutually\n"
">>> Mutually\n"
"Mutually\n"
">>> Recursive\n"
"Recursive\n"
">>> Mutually.__value__\n"
"Recursive\n"
">>> Recursive.__value__\n"
"Mutually"

#: ../../library/typing.rst:2030
msgid "Other special directives"
msgstr "Outras diretivas especiais"

#: ../../library/typing.rst:2032
msgid ""
"These functions and classes should not be used directly as annotations. "
"Their intended purpose is to be building blocks for creating and declaring "
"types."
msgstr ""
"Estas funções e classes não devem ser usadas diretamente como anotações. O "
"seu propósito é serem blocos de construção para criar e declarar tipos."

#: ../../library/typing.rst:2038
msgid "Typed version of :func:`collections.namedtuple`."
msgstr "Versão tipada de :func:`collections.namedtuple`."

#: ../../library/typing.rst:2040 ../../library/typing.rst:2119
#: ../../library/typing.rst:3095
msgid "Usage::"
msgstr "Utilização::"

#: ../../library/typing.rst:2042
msgid ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int"
msgstr ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int"

#: ../../library/typing.rst:2046
msgid "This is equivalent to::"
msgstr "Isto é equivalente a::"

#: ../../library/typing.rst:2048
msgid "Employee = collections.namedtuple('Employee', ['name', 'id'])"
msgstr "Employee = collections.namedtuple('Employee', ['name', 'id'])"

#: ../../library/typing.rst:2050
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""
"Para dar um valor predefinido a um campo, pode atribuir-lhe um valor no "
"corpo da classe::"

#: ../../library/typing.rst:2052
msgid ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"employee = Employee('Guido')\n"
"assert employee.id == 3"
msgstr ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"employee = Employee('Guido')\n"
"assert employee.id == 3"

#: ../../library/typing.rst:2059
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""
"Os campos com um valor predefinido devem vir depois de quaisquer campos sem "
"um valor predefinido."

#: ../../library/typing.rst:2061
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""
"A classe resultante tem um atributo extra ``__annotations__`` que fornece um "
"dicionário que mapeia os nomes dos campos para os tipos dos campos. (Os "
"nomes dos campos estão no atributo ``_fields`` e os valores predefinidos "
"estão no atributo ``_field_defaults``, ambos fazem parte da API :func:"
"`~collections.namedtuple`.)"

#: ../../library/typing.rst:2067
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "As subclasses ``NamedTuple`` também podem ter docstrings e métodos::"

#: ../../library/typing.rst:2069
msgid ""
"class Employee(NamedTuple):\n"
"    \"\"\"Represents an employee.\"\"\"\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"    def __repr__(self) -> str:\n"
"        return f'<Employee {self.name}, id={self.id}>'"
msgstr ""
"class Employee(NamedTuple):\n"
"    \"\"\"Representa um empregado.\"\"\"\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"    def __repr__(self) -> str:\n"
"        return f'<Employee {self.name}, id={self.id}>'"

#: ../../library/typing.rst:2077
msgid "``NamedTuple`` subclasses can be generic::"
msgstr "As subclasses ``NamedTuple`` podem ser genéricas::"

#: ../../library/typing.rst:2079
msgid ""
"class Group[T](NamedTuple):\n"
"    key: T\n"
"    group: list[T]"
msgstr ""
"class Group[T](NamedTuple):\n"
"    key: T\n"
"    group: list[T]"

#: ../../library/typing.rst:2083
msgid "Backward-compatible usage::"
msgstr "Utilização retrocompatível::"

#: ../../library/typing.rst:2085
msgid ""
"# For creating a generic NamedTuple on Python 3.11\n"
"T = TypeVar(\"T\")\n"
"\n"
"class Group(NamedTuple, Generic[T]):\n"
"    key: T\n"
"    group: list[T]\n"
"\n"
"# A functional syntax is also supported\n"
"Employee = NamedTuple('Employee', [('name', str), ('id', int)])"
msgstr ""
"# Para criar um NamedTuple genérico no Python 3.11\n"
"T = TypeVar(\"T\")\n"
"\n"
"class Group(NamedTuple, Generic[T]):\n"
"    key: T\n"
"    group: list[T]\n"
"\n"
"# Uma sintaxe funcional também é suportada\n"
"Employee = NamedTuple('Employee', [('name', str), ('id', int)])"

#: ../../library/typing.rst:2095
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "Adicionado suporte para a sintaxe de anotação de variáveis :pep:`526`."

#: ../../library/typing.rst:2098
msgid "Added support for default values, methods, and docstrings."
msgstr "Adicionado suporte para valores predefinidos, métodos e docstrings."

#: ../../library/typing.rst:2101
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"Os atributos ``_field_types`` e ``__annotations__`` são agora dicionários "
"regulares em vez de instâncias de ``OrderedDict``."

#: ../../library/typing.rst:2105
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""
"Removido o atributo ``_field_types`` em favor do atributo mais padrão "
"``__annotations__`` que tem a mesma informação."

#: ../../library/typing.rst:2109
msgid "Added support for generic namedtuples."
msgstr "Adicionado suporte para namedtuples genéricos."

#: ../../library/typing.rst:2114
msgid "Helper class to create low-overhead :ref:`distinct types <distinct>`."
msgstr ""
"Classe auxiliar para criar :ref:`tipos distintos <distinct>` com baixo "
"overhead."

#: ../../library/typing.rst:2116
msgid ""
"A ``NewType`` is considered a distinct type by a typechecker. At runtime, "
"however, calling a ``NewType`` returns its argument unchanged."
msgstr ""
"Um ``NewType`` é considerado um tipo distinto por um verificador de tipo. Em "
"tempo de execução, no entanto, chamar um ``NewType`` retorna o seu argumento "
"inalterado."

#: ../../library/typing.rst:2121
msgid ""
"UserId = NewType('UserId', int)  # Declare the NewType \"UserId\"\n"
"first_user = UserId(1)  # \"UserId\" returns the argument unchanged at "
"runtime"
msgstr ""
"UserId = NewType('UserId', int)  # Declarar o NewType \"UserId\"\n"
"first_user = UserId(1)  # \"UserId\" retorna o argumento inalterado em tempo "
"de execução"

#: ../../library/typing.rst:2126
msgid "The module in which the new type is defined."
msgstr "O módulo no qual o novo tipo é definido."

#: ../../library/typing.rst:2130
msgid "The name of the new type."
msgstr "O nome do novo tipo."

#: ../../library/typing.rst:2134
msgid "The type that the new type is based on."
msgstr "O tipo no qual o novo tipo é baseado."

#: ../../library/typing.rst:2138
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` é agora uma classe em vez de uma função."

#: ../../library/typing.rst:2143
msgid "Base class for protocol classes."
msgstr "Classe base para classes de protocolo."

#: ../../library/typing.rst:2145
msgid "Protocol classes are defined like this::"
msgstr "As classes de protocolo são definidas assim::"

#: ../../library/typing.rst:2147
msgid ""
"class Proto(Protocol):\n"
"    def meth(self) -> int:\n"
"        ..."
msgstr ""
"class Proto(Protocol):\n"
"    def meth(self) -> int:\n"
"        ..."

#: ../../library/typing.rst:2151
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""
"Tais classes são usadas principalmente com verificadores de tipo estáticos "
"que reconhecem subtipagem estrutural (duck-typing estático), por exemplo::"

#: ../../library/typing.rst:2154
msgid ""
"class C:\n"
"    def meth(self) -> int:\n"
"        return 0\n"
"\n"
"def func(x: Proto) -> int:\n"
"    return x.meth()\n"
"\n"
"func(C())  # Passes static type check"
msgstr ""
"class C:\n"
"    def meth(self) -> int:\n"
"        return 0\n"
"\n"
"def func(x: Proto) -> int:\n"
"    return x.meth()\n"
"\n"
"func(C())  # Passa verificação de tipo estático"

#: ../../library/typing.rst:2163
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""

#: ../../library/typing.rst:2168
msgid "Protocol classes can be generic, for example::"
msgstr "As classes de protocolo podem ser genéricas, por exemplo::"

#: ../../library/typing.rst:2170
msgid ""
"class GenProto[T](Protocol):\n"
"    def meth(self) -> T:\n"
"        ..."
msgstr ""
"class GenProto[T](Protocol):\n"
"    def meth(self) -> T:\n"
"        ..."

#: ../../library/typing.rst:2174
msgid ""
"In code that needs to be compatible with Python 3.11 or older, generic "
"Protocols can be written as follows::"
msgstr ""
"Em código que precisa ser compatível com o Python 3.11 ou versões "
"anteriores, os Protocolos genéricos podem ser escritos da seguinte forma::"

#: ../../library/typing.rst:2177
msgid ""
"T = TypeVar(\"T\")\n"
"\n"
"class GenProto(Protocol[T]):\n"
"    def meth(self) -> T:\n"
"        ..."
msgstr ""
"T = TypeVar(\"T\")\n"
"\n"
"class GenProto(Protocol[T]):\n"
"    def meth(self) -> T:\n"
"        ..."

#: ../../library/typing.rst:2187
msgid "Mark a protocol class as a runtime protocol."
msgstr "Marcar uma classe de protocolo como um protocolo de tempo de execução."

#: ../../library/typing.rst:2189
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""

#: ../../library/typing.rst:2194
msgid ""
"@runtime_checkable\n"
"class Closable(Protocol):\n"
"    def close(self): ...\n"
"\n"
"assert isinstance(open('/some/file'), Closable)\n"
"\n"
"@runtime_checkable\n"
"class Named(Protocol):\n"
"    name: str\n"
"\n"
"import threading\n"
"assert isinstance(threading.Thread(name='Bob'), Named)"
msgstr ""
"@runtime_checkable\n"
"class Closable(Protocol):\n"
"    def close(self): ...\n"
"\n"
"assert isinstance(open('/some/file'), Closable)\n"
"\n"
"@runtime_checkable\n"
"class Named(Protocol):\n"
"    name: str\n"
"\n"
"import threading\n"
"assert isinstance(threading.Thread(name='Bob'), Named)"

#: ../../library/typing.rst:2209
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :ref:`Callable <annotating-callables>`. However, the ``ssl."
"SSLObject.__init__`` method exists only to raise a :exc:`TypeError` with a "
"more informative message, therefore making it impossible to call "
"(instantiate) :class:`ssl.SSLObject`."
msgstr ""
":func:`!runtime_checkable` verificará apenas a presença dos métodos ou "
"atributos necessários, não as suas assinaturas de tipo ou tipos. Por "
"exemplo, :class:`ssl.SSLObject` é uma classe, portanto passa numa "
"verificação :func:`issubclass` contra :ref:`Callable <annotating-"
"callables>`. No entanto, o método ``ssl.SSLObject.__init__`` existe apenas "
"para levantar um :exc:`TypeError` com uma mensagem mais informativa, "
"tornando assim impossível chamar (instanciar) :class:`ssl.SSLObject`."

#: ../../library/typing.rst:2220
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""
"Uma verificação :func:`isinstance` contra um protocolo verificável em tempo "
"de execução pode ser surpreendentemente lenta em comparação com uma "
"verificação ``isinstance()`` contra uma classe não-protocolo. Considere usar "
"idiomas alternativos como chamadas :func:`hasattr` para verificações "
"estruturais em código sensível ao desempenho."

#: ../../library/typing.rst:2228
msgid ""
"The internal implementation of :func:`isinstance` checks against runtime-"
"checkable protocols now uses :func:`inspect.getattr_static` to look up "
"attributes (previously, :func:`hasattr` was used). As a result, some objects "
"which used to be considered instances of a runtime-checkable protocol may no "
"longer be considered instances of that protocol on Python 3.12+, and vice "
"versa. Most users are unlikely to be affected by this change."
msgstr ""
"A implementação interna de :func:`isinstance` para verificações contra "
"protocolos verificáveis em tempo de execução agora usa :func:`inspect."
"getattr_static` para procurar atributos (anteriormente, :func:`hasattr` era "
"usado). Como resultado, alguns objetos que costumavam ser considerados "
"instâncias de um protocolo verificável em tempo de execução podem não ser "
"mais considerados instâncias desse protocolo no Python 3.12+, e vice-versa. "
"A maioria dos utilizadores provavelmente não será afetada por esta alteração."

#: ../../library/typing.rst:2237
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. See :ref:"
"`\"What's new in Python 3.12\" <whatsnew-typing-py312>` for more details."
msgstr ""

#: ../../library/typing.rst:2248
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""
"Construção especial para adicionar dicas de tipo a um dicionário. Em tempo "
"de execução é um :class:`dict` simples."

#: ../../library/typing.rst:2251
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""

#: ../../library/typing.rst:2257
msgid ""
"class Point2D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    label: str\n"
"\n"
"a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n"
"b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n"
"\n"
"assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')"
msgstr ""

#: ../../library/typing.rst:2267
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""

#: ../../library/typing.rst:2271
msgid "Using a literal :class:`dict` as the second argument::"
msgstr ""

#: ../../library/typing.rst:2273
msgid "Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})"
msgstr ""

#: ../../library/typing.rst:2275
msgid "Using keyword arguments::"
msgstr ""

#: ../../library/typing.rst:2277
msgid "Point2D = TypedDict('Point2D', x=int, y=int, label=str)"
msgstr ""

#: ../../library/typing.rst:2279
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr ""

#: ../../library/typing.rst:2283
msgid ""
"This functional syntax allows defining keys which are not valid :ref:"
"`identifiers <identifiers>`, for example because they are keywords or "
"contain hyphens, or when key names must not be :ref:`mangled <private-name-"
"mangling>` like regular private names::"
msgstr ""

#: ../../library/typing.rst:2288
msgid ""
"# raises SyntaxError\n"
"class Point2D(TypedDict):\n"
"    in: int  # 'in' is a keyword\n"
"    x-y: int  # name with hyphens\n"
"\n"
"class Definition(TypedDict):\n"
"    __schema: str  # mangled to `_Definition__schema`\n"
"\n"
"# OK, functional syntax\n"
"Point2D = TypedDict('Point2D', {'in': int, 'x-y': int})\n"
"Definition = TypedDict('Definition', {'__schema': str})  # not mangled"
msgstr ""

#: ../../library/typing.rst:2300
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""

#: ../../library/typing.rst:2303
msgid ""
"class Point2D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    label: NotRequired[str]\n"
"\n"
"# Alternative syntax\n"
"Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': "
"NotRequired[str]})"
msgstr ""

#: ../../library/typing.rst:2311
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""

#: ../../library/typing.rst:2314
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""

#: ../../library/typing.rst:2317
msgid ""
"class Point2D(TypedDict, total=False):\n"
"    x: int\n"
"    y: int\n"
"\n"
"# Alternative syntax\n"
"Point2D = TypedDict('Point2D', {'x': int, 'y': int}, total=False)"
msgstr ""

#: ../../library/typing.rst:2324
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""

#: ../../library/typing.rst:2329
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr ""

#: ../../library/typing.rst:2332
msgid ""
"class Point2D(TypedDict, total=False):\n"
"    x: Required[int]\n"
"    y: Required[int]\n"
"    label: str\n"
"\n"
"# Alternative syntax\n"
"Point2D = TypedDict('Point2D', {\n"
"    'x': Required[int],\n"
"    'y': Required[int],\n"
"    'label': str\n"
"}, total=False)"
msgstr ""

#: ../../library/typing.rst:2344
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""

#: ../../library/typing.rst:2348
msgid ""
"class Point3D(Point2D):\n"
"    z: int"
msgstr ""

#: ../../library/typing.rst:2351
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""

#: ../../library/typing.rst:2354
msgid ""
"class Point3D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    z: int"
msgstr ""

#: ../../library/typing.rst:2359
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""

#: ../../library/typing.rst:2362
msgid ""
"class X(TypedDict):\n"
"    x: int\n"
"\n"
"class Y(TypedDict):\n"
"    y: int\n"
"\n"
"class Z(object): pass  # A non-TypedDict class\n"
"\n"
"class XY(X, Y): pass  # OK\n"
"\n"
"class XZ(X, Z): pass  # raises TypeError"
msgstr ""

#: ../../library/typing.rst:2374
msgid "A ``TypedDict`` can be generic::"
msgstr ""

#: ../../library/typing.rst:2376
msgid ""
"class Group[T](TypedDict):\n"
"    key: T\n"
"    group: list[T]"
msgstr ""

#: ../../library/typing.rst:2380
msgid ""
"To create a generic ``TypedDict`` that is compatible with Python 3.11 or "
"lower, inherit from :class:`Generic` explicitly:"
msgstr ""

#: ../../library/typing.rst:2383
msgid ""
"T = TypeVar(\"T\")\n"
"\n"
"class Group(TypedDict, Generic[T]):\n"
"    key: T\n"
"    group: list[T]"
msgstr ""

#: ../../library/typing.rst:2391
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""

#: ../../library/typing.rst:2397
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr ""

#: ../../library/typing.rst:2400
msgid ""
">>> from typing import TypedDict\n"
">>> class Point2D(TypedDict): pass\n"
">>> Point2D.__total__\n"
"True\n"
">>> class Point2D(TypedDict, total=False): pass\n"
">>> Point2D.__total__\n"
"False\n"
">>> class Point3D(Point2D): pass\n"
">>> Point3D.__total__\n"
"True"
msgstr ""

#: ../../library/typing.rst:2413
msgid ""
"This attribute reflects *only* the value of the ``total`` argument to the "
"current ``TypedDict`` class, not whether the class is semantically total. "
"For example, a ``TypedDict`` with ``__total__`` set to ``True`` may have "
"keys marked with :data:`NotRequired`, or it may inherit from another "
"``TypedDict`` with ``total=False``. Therefore, it is generally better to "
"use :attr:`__required_keys__` and :attr:`__optional_keys__` for "
"introspection."
msgstr ""

#: ../../library/typing.rst:2426
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""

#: ../../library/typing.rst:2429
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""

#: ../../library/typing.rst:2432
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""

#: ../../library/typing.rst:2439
msgid ""
">>> class Point2D(TypedDict, total=False):\n"
"...     x: int\n"
"...     y: int\n"
"...\n"
">>> class Point3D(Point2D):\n"
"...     z: int\n"
"...\n"
">>> Point3D.__required_keys__ == frozenset({'z'})\n"
"True\n"
">>> Point3D.__optional_keys__ == frozenset({'x', 'y'})\n"
"True"
msgstr ""

#: ../../library/typing.rst:2457
msgid ""
"If ``from __future__ import annotations`` is used or if annotations are "
"given as strings, annotations are not evaluated when the ``TypedDict`` is "
"defined. Therefore, the runtime introspection that ``__required_keys__`` and "
"``__optional_keys__`` rely on may not work properly, and the values of the "
"attributes may be incorrect."
msgstr ""

#: ../../library/typing.rst:2463
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""

#: ../../library/typing.rst:2467
msgid ""
"Added support for marking individual keys as :data:`Required` or :data:"
"`NotRequired`. See :pep:`655`."
msgstr ""

#: ../../library/typing.rst:2471
msgid "Added support for generic ``TypedDict``\\ s."
msgstr ""

#: ../../library/typing.rst:2475
msgid "Protocols"
msgstr "Protocolos"

#: ../../library/typing.rst:2477
msgid ""
"The following protocols are provided by the typing module. All are decorated "
"with :func:`@runtime_checkable <runtime_checkable>`."
msgstr ""

#: ../../library/typing.rst:2482
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""

#: ../../library/typing.rst:2487
msgid "An ABC with one abstract method ``__bytes__``."
msgstr ""

#: ../../library/typing.rst:2491
msgid "An ABC with one abstract method ``__complex__``."
msgstr ""

#: ../../library/typing.rst:2495
msgid "An ABC with one abstract method ``__float__``."
msgstr ""

#: ../../library/typing.rst:2499
msgid "An ABC with one abstract method ``__index__``."
msgstr ""

#: ../../library/typing.rst:2505
msgid "An ABC with one abstract method ``__int__``."
msgstr ""

#: ../../library/typing.rst:2509
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""

#: ../../library/typing.rst:2513
msgid "ABCs for working with IO"
msgstr ""

#: ../../library/typing.rst:2519
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""

#: ../../library/typing.rst:2525
msgid "Functions and decorators"
msgstr ""

#: ../../library/typing.rst:2529
msgid "Cast a value to a type."
msgstr ""

#: ../../library/typing.rst:2531
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""

#: ../../library/typing.rst:2538
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""

#: ../../library/typing.rst:2540
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""

#: ../../library/typing.rst:2543
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""

#: ../../library/typing.rst:2546
msgid ""
"def greet(name: str) -> None:\n"
"    assert_type(name, str)  # OK, inferred type of `name` is `str`\n"
"    assert_type(name, int)  # type checker error"
msgstr ""

#: ../../library/typing.rst:2550
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr ""

#: ../../library/typing.rst:2553
msgid ""
"def complex_function(arg: object):\n"
"    # Do some complex type-narrowing logic,\n"
"    # after which we hope the inferred type will be `int`\n"
"    ...\n"
"    # Test whether the type checker correctly understands our function\n"
"    assert_type(arg, int)"
msgstr ""

#: ../../library/typing.rst:2564
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr ""

#: ../../library/typing.rst:2566
msgid "Example::"
msgstr "Exemplo::"

#: ../../library/typing.rst:2568
msgid ""
"def int_or_str(arg: int | str) -> None:\n"
"    match arg:\n"
"        case int():\n"
"            print(\"It's an int\")\n"
"        case str():\n"
"            print(\"It's a str\")\n"
"        case _ as unreachable:\n"
"            assert_never(unreachable)"
msgstr ""

#: ../../library/typing.rst:2577
msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases."
msgstr ""

#: ../../library/typing.rst:2582
msgid ""
"If a type checker finds that a call to ``assert_never()`` is reachable, it "
"will emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error pointing "
"out that ``unreachable`` is of type :class:`float`. For a call to "
"``assert_never`` to pass type checking, the inferred type of the argument "
"passed in must be the bottom type, :data:`Never`, and nothing else."
msgstr ""

#: ../../library/typing.rst:2590
msgid "At runtime, this throws an exception when called."
msgstr ""

#: ../../library/typing.rst:2593
msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.python.org/en/"
"latest/guides/unreachable.html>`__ has more information about exhaustiveness "
"checking with static typing."
msgstr ""

#: ../../library/typing.rst:2601
msgid "Ask a static type checker to reveal the inferred type of an expression."
msgstr ""

#: ../../library/typing.rst:2603
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the inferred type of the argument. For example::"
msgstr ""

#: ../../library/typing.rst:2606
msgid ""
"x: int = 1\n"
"reveal_type(x)  # Revealed type is \"builtins.int\""
msgstr ""

#: ../../library/typing.rst:2609
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr ""

#: ../../library/typing.rst:2612
msgid ""
"At runtime, this function prints the runtime type of its argument to :data:"
"`sys.stderr` and returns the argument unchanged (allowing the call to be "
"used within an expression)::"
msgstr ""

#: ../../library/typing.rst:2616
msgid ""
"x = reveal_type(1)  # prints \"Runtime type is int\"\n"
"print(x)  # prints \"1\""
msgstr ""

#: ../../library/typing.rst:2619
msgid ""
"Note that the runtime type may be different from (more or less specific "
"than) the type statically inferred by a type checker."
msgstr ""

#: ../../library/typing.rst:2622
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing``, however, "
"allows your code to run without runtime errors and communicates intent more "
"clearly."
msgstr ""

#: ../../library/typing.rst:2633
msgid ""
"Decorator to mark an object as providing :func:`dataclass <dataclasses."
"dataclass>`-like behavior."
msgstr ""

#: ../../library/typing.rst:2636
msgid ""
"``dataclass_transform`` may be used to decorate a class, metaclass, or a "
"function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class in a similar way "
"to :func:`@dataclasses.dataclass <dataclasses.dataclass>`."
msgstr ""

#: ../../library/typing.rst:2643
msgid "Example usage with a decorator function:"
msgstr ""

#: ../../library/typing.rst:2645
msgid ""
"@dataclass_transform()\n"
"def create_model[T](cls: type[T]) -> type[T]:\n"
"    ...\n"
"    return cls\n"
"\n"
"@create_model\n"
"class CustomerModel:\n"
"    id: int\n"
"    name: str"
msgstr ""

#: ../../library/typing.rst:2657
msgid "On a base class::"
msgstr ""

#: ../../library/typing.rst:2659
msgid ""
"@dataclass_transform()\n"
"class ModelBase: ...\n"
"\n"
"class CustomerModel(ModelBase):\n"
"    id: int\n"
"    name: str"
msgstr ""

#: ../../library/typing.rst:2666
msgid "On a metaclass::"
msgstr ""

#: ../../library/typing.rst:2668
msgid ""
"@dataclass_transform()\n"
"class ModelMeta(type): ...\n"
"\n"
"class ModelBase(metaclass=ModelMeta): ...\n"
"\n"
"class CustomerModel(ModelBase):\n"
"    id: int\n"
"    name: str"
msgstr ""

#: ../../library/typing.rst:2677
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`. For example, type checkers will assume these classes have "
"``__init__`` methods that accept ``id`` and ``name``."
msgstr ""

#: ../../library/typing.rst:2683
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""

#: ../../library/typing.rst:2691
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""

#: ../../library/typing.rst:0
msgid "Parameters"
msgstr "Parâmetros"

#: ../../library/typing.rst:2695
msgid ""
"Indicates whether the ``eq`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``True``."
msgstr ""

#: ../../library/typing.rst:2700
msgid ""
"Indicates whether the ``order`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2705
msgid ""
"Indicates whether the ``kw_only`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2710
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``.  .. "
"versionadded:: 3.12"
msgstr ""

#: ../../library/typing.rst:2711
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

#: ../../library/typing.rst:2717
msgid ""
"Specifies a static list of supported classes or functions that describe "
"fields, similar to :func:`dataclasses.field`. Defaults to ``()``."
msgstr ""

#: ../../library/typing.rst:2723
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""

#: ../../library/typing.rst:2727
msgid ""
"Type checkers recognize the following optional parameters on field "
"specifiers:"
msgstr ""

#: ../../library/typing.rst:2730
msgid "**Recognised parameters for field specifiers**"
msgstr ""

#: ../../library/typing.rst:2734
msgid "Parameter name"
msgstr ""

#: ../../library/typing.rst:2735
msgid "Description"
msgstr "Descrição"

#: ../../library/typing.rst:2736
msgid "``init``"
msgstr ""

#: ../../library/typing.rst:2737
msgid ""
"Indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""

#: ../../library/typing.rst:2740
msgid "``default``"
msgstr ""

#: ../../library/typing.rst:2741
msgid "Provides the default value for the field."
msgstr ""

#: ../../library/typing.rst:2742
msgid "``default_factory``"
msgstr ""

#: ../../library/typing.rst:2743
msgid ""
"Provides a runtime callback that returns the default value for the field. If "
"neither ``default`` nor ``default_factory`` are specified, the field is "
"assumed to have no default value and must be provided a value when the class "
"is instantiated."
msgstr ""

#: ../../library/typing.rst:2748
msgid "``factory``"
msgstr ""

#: ../../library/typing.rst:2749
msgid "An alias for the ``default_factory`` parameter on field specifiers."
msgstr ""

#: ../../library/typing.rst:2750
msgid "``kw_only``"
msgstr ""

#: ../../library/typing.rst:2751
msgid ""
"Indicates whether the field should be marked as keyword-only. If ``True``, "
"the field will be keyword-only. If ``False``, it will not be keyword-only. "
"If unspecified, the value of the ``kw_only`` parameter on the object "
"decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""

#: ../../library/typing.rst:2757
msgid "``alias``"
msgstr ""

#: ../../library/typing.rst:2758
msgid ""
"Provides an alternative name for the field. This alternative name is used in "
"the synthesized ``__init__`` method."
msgstr ""

#: ../../library/typing.rst:2761
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""

#: ../../library/typing.rst:2765
msgid "See :pep:`681` for more details."
msgstr "Veja :pep:`681` para mais detalhes."

#: ../../library/typing.rst:2773
msgid "Decorator for creating overloaded functions and methods."
msgstr ""

#: ../../library/typing.rst:2775
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method)."
msgstr ""

#: ../../library/typing.rst:2780
msgid ""
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition. The non-``@overload``-decorated definition, meanwhile, will be "
"used at runtime but should be ignored by a type checker.  At runtime, "
"calling an ``@overload``-decorated function directly will raise :exc:"
"`NotImplementedError`."
msgstr ""

#: ../../library/typing.rst:2788
msgid ""
"An example of overload that gives a more precise type than can be expressed "
"using a union or a type variable:"
msgstr ""

#: ../../library/typing.rst:2791
msgid ""
"@overload\n"
"def process(response: None) -> None:\n"
"    ...\n"
"@overload\n"
"def process(response: int) -> tuple[int, str]:\n"
"    ...\n"
"@overload\n"
"def process(response: bytes) -> str:\n"
"    ...\n"
"def process(response):\n"
"    ...  # actual implementation goes here"
msgstr ""

#: ../../library/typing.rst:2805
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""

#: ../../library/typing.rst:2807
msgid ""
"Overloaded functions can now be introspected at runtime using :func:"
"`get_overloads`."
msgstr ""

#: ../../library/typing.rst:2814
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*."
msgstr ""

#: ../../library/typing.rst:2817
msgid ""
"*func* is the function object for the implementation of the overloaded "
"function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""

#: ../../library/typing.rst:2824
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr ""

#: ../../library/typing.rst:2832
msgid "Clear all registered overloads in the internal registry."
msgstr ""

#: ../../library/typing.rst:2834
msgid "This can be used to reclaim the memory used by the registry."
msgstr ""

#: ../../library/typing.rst:2841
msgid "Decorator to indicate final methods and final classes."
msgstr ""

#: ../../library/typing.rst:2843
msgid ""
"Decorating a method with ``@final`` indicates to a type checker that the "
"method cannot be overridden in a subclass. Decorating a class with "
"``@final`` indicates that it cannot be subclassed."
msgstr ""

#: ../../library/typing.rst:2849
msgid ""
"class Base:\n"
"    @final\n"
"    def done(self) -> None:\n"
"        ...\n"
"class Sub(Base):\n"
"    def done(self) -> None:  # Error reported by type checker\n"
"        ...\n"
"\n"
"@final\n"
"class Leaf:\n"
"    ...\n"
"class Other(Leaf):  # Error reported by type checker\n"
"    ..."
msgstr ""

#: ../../library/typing.rst:2868
msgid ""
"The decorator will now attempt to set a ``__final__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""

#: ../../library/typing.rst:2879
msgid "Decorator to indicate that annotations are not type hints."
msgstr ""

#: ../../library/typing.rst:2881
msgid ""
"This works as a class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but "
"not to methods defined in its superclasses or subclasses). Type checkers "
"will ignore all annotations in a function or class with this decorator."
msgstr ""

#: ../../library/typing.rst:2887
msgid "``@no_type_check`` mutates the decorated object in place."
msgstr ""

#: ../../library/typing.rst:2891
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr ""

#: ../../library/typing.rst:2893
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""

#: ../../library/typing.rst:2899
msgid ""
"Decorator to indicate that a method in a subclass is intended to override a "
"method or attribute in a superclass."
msgstr ""

#: ../../library/typing.rst:2902
msgid ""
"Type checkers should emit an error if a method decorated with ``@override`` "
"does not, in fact, override anything. This helps prevent bugs that may occur "
"when a base class is changed without an equivalent change to a child class."
msgstr ""

#: ../../library/typing.rst:2909
msgid ""
"class Base:\n"
"    def log_status(self) -> None:\n"
"        ...\n"
"\n"
"class Sub(Base):\n"
"    @override\n"
"    def log_status(self) -> None:  # Okay: overrides Base.log_status\n"
"        ...\n"
"\n"
"    @override\n"
"    def done(self) -> None:  # Error reported by type checker\n"
"        ..."
msgstr ""

#: ../../library/typing.rst:2924
msgid "There is no runtime checking of this property."
msgstr ""

#: ../../library/typing.rst:2926
msgid ""
"The decorator will attempt to set an ``__override__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, "
"\"__override__\", False)`` can be used at runtime to determine whether an "
"object ``obj`` has been marked as an override.  If the decorated object does "
"not support setting attributes, the decorator returns the object unchanged "
"without raising an exception."
msgstr ""

#: ../../library/typing.rst:2933
msgid "See :pep:`698` for more details."
msgstr "Consulte :pep:`698` para mais detalhes."

#: ../../library/typing.rst:2940
msgid "Decorator to mark a class or function as unavailable at runtime."
msgstr ""

#: ../../library/typing.rst:2942
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

#: ../../library/typing.rst:2946
msgid ""
"@type_check_only\n"
"class Response:  # private or not available at runtime\n"
"    code: int\n"
"    def get_header(self, name: str) -> str: ...\n"
"\n"
"def fetch_response() -> Response: ..."
msgstr ""

#: ../../library/typing.rst:2953
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""

#: ../../library/typing.rst:2957
msgid "Introspection helpers"
msgstr ""

#: ../../library/typing.rst:2961
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""

#: ../../library/typing.rst:2964
msgid ""
"This is often the same as ``obj.__annotations__``, but this function makes "
"the following changes to the annotations dictionary:"
msgstr ""

#: ../../library/typing.rst:2967
msgid ""
"Forward references encoded as string literals or :class:`ForwardRef` objects "
"are handled by evaluating them in *globalns*, *localns*, and (where "
"applicable) *obj*'s :ref:`type parameter <type-params>` namespace. If "
"*globalns* or *localns* is not given, appropriate namespace dictionaries are "
"inferred from *obj*."
msgstr ""

#: ../../library/typing.rst:2972
msgid "``None`` is replaced with :class:`types.NoneType`."
msgstr ""

#: ../../library/typing.rst:2973
msgid ""
"If :func:`@no_type_check <no_type_check>` has been applied to *obj*, an "
"empty dictionary is returned."
msgstr ""

#: ../../library/typing.rst:2975
msgid ""
"If *obj* is a class ``C``, the function returns a dictionary that merges "
"annotations from ``C``'s base classes with those on ``C`` directly. This is "
"done by traversing :attr:`C.__mro__ <type.__mro__>` and iteratively "
"combining ``__annotations__`` dictionaries. Annotations on classes appearing "
"earlier in the :term:`method resolution order` always take precedence over "
"annotations on classes appearing later in the method resolution order."
msgstr ""

#: ../../library/typing.rst:2982
msgid ""
"The function recursively replaces all occurrences of ``Annotated[T, ...]`` "
"with ``T``, unless *include_extras* is set to ``True`` (see :class:"
"`Annotated` for more information)."
msgstr ""

#: ../../library/typing.rst:2986
msgid ""
"See also :func:`inspect.get_annotations`, a lower-level function that "
"returns annotations more directly."
msgstr ""

#: ../../library/typing.rst:2991
msgid ""
"If any forward references in the annotations of *obj* are not resolvable or "
"are not valid Python code, this function will raise an exception such as :"
"exc:`NameError`. For example, this can happen with imported :ref:`type "
"aliases <type-aliases>` that include forward references, or with names "
"imported under :data:`if TYPE_CHECKING <TYPE_CHECKING>`."
msgstr ""

#: ../../library/typing.rst:2997
msgid ""
"Added ``include_extras`` parameter as part of :pep:`593`. See the "
"documentation on :data:`Annotated` for more information."
msgstr ""

#: ../../library/typing.rst:3001
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""

#: ../../library/typing.rst:3008
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``."
msgstr ""

#: ../../library/typing.rst:3011
msgid ""
"If ``X`` is a typing-module alias for a builtin or :mod:`collections` class, "
"it will be normalized to the original class. If ``X`` is an instance of :"
"class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return the underlying :"
"class:`ParamSpec`. Return ``None`` for unsupported objects."
msgstr ""

#: ../../library/typing.rst:3017 ../../library/typing.rst:3041
msgid "Examples:"
msgstr "Exemplos:"

#: ../../library/typing.rst:3019
msgid ""
"assert get_origin(str) is None\n"
"assert get_origin(Dict[str, int]) is dict\n"
"assert get_origin(Union[int, str]) is Union\n"
"assert get_origin(Annotated[str, \"metadata\"]) is Annotated\n"
"P = ParamSpec('P')\n"
"assert get_origin(P.args) is P\n"
"assert get_origin(P.kwargs) is P"
msgstr ""

#: ../../library/typing.rst:3033
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``."
msgstr ""

#: ../../library/typing.rst:3036
msgid ""
"If ``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original "
"arguments ``[Y, Z, ...]`` due to type caching. Return ``()`` for unsupported "
"objects."
msgstr ""

#: ../../library/typing.rst:3043
msgid ""
"assert get_args(int) == ()\n"
"assert get_args(Dict[int, str]) == (int, str)\n"
"assert get_args(Union[int, str]) == (int, str)"
msgstr ""

#: ../../library/typing.rst:3053
msgid "Check if a type is a :class:`TypedDict`."
msgstr ""

#: ../../library/typing.rst:3057
msgid ""
"class Film(TypedDict):\n"
"    title: str\n"
"    year: int\n"
"\n"
"assert is_typeddict(Film)\n"
"assert not is_typeddict(list | str)\n"
"\n"
"# TypedDict is a factory for creating typed dicts,\n"
"# not a typed dict itself\n"
"assert not is_typeddict(TypedDict)"
msgstr ""

#: ../../library/typing.rst:3074
msgid ""
"Class used for internal typing representation of string forward references."
msgstr ""

#: ../../library/typing.rst:3076
msgid ""
"For example, ``List[\"SomeClass\"]`` is implicitly transformed into "
"``List[ForwardRef(\"SomeClass\")]``.  ``ForwardRef`` should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../library/typing.rst:3081
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""

#: ../../library/typing.rst:3088
msgid "Constant"
msgstr "Constante"

#: ../../library/typing.rst:3092
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime."
msgstr ""

#: ../../library/typing.rst:3097
msgid ""
"if TYPE_CHECKING:\n"
"    import expensive_mod\n"
"\n"
"def fun(arg: 'expensive_mod.SomeType') -> None:\n"
"    local_var: expensive_mod.AnotherType = other_fun()"
msgstr ""

#: ../../library/typing.rst:3103
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""

#: ../../library/typing.rst:3110
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""

#: ../../library/typing.rst:3122
msgid "Deprecated aliases"
msgstr ""

#: ../../library/typing.rst:3124
msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the typing module in "
"order to support parameterizing these generic classes using ``[]``. However, "
"the aliases became redundant in Python 3.9 when the corresponding pre-"
"existing classes were enhanced to support ``[]`` (see :pep:`585`)."
msgstr ""

#: ../../library/typing.rst:3131
msgid ""
"The redundant types are deprecated as of Python 3.9. However, while the "
"aliases may be removed at some point, removal of these aliases is not "
"currently planned. As such, no deprecation warnings are currently issued by "
"the interpreter for these aliases."
msgstr ""

#: ../../library/typing.rst:3136
msgid ""
"If at some point it is decided to remove these deprecated aliases, a "
"deprecation warning will be issued by the interpreter for at least two "
"releases prior to removal. The aliases are guaranteed to remain in the "
"typing module without deprecation warnings until at least Python 3.14."
msgstr ""

#: ../../library/typing.rst:3141
msgid ""
"Type checkers are encouraged to flag uses of the deprecated types if the "
"program they are checking targets a minimum Python version of 3.9 or newer."
msgstr ""

#: ../../library/typing.rst:3147
msgid "Aliases to built-in types"
msgstr ""

#: ../../library/typing.rst:3151
msgid "Deprecated alias to :class:`dict`."
msgstr ""

#: ../../library/typing.rst:3153
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`~collections.abc.Mapping` rather than to "
"use :class:`dict` or :class:`!typing.Dict`."
msgstr ""

#: ../../library/typing.rst:3157
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3163
msgid "Deprecated alias to :class:`list`."
msgstr ""

#: ../../library/typing.rst:3165
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`~collections.abc.Sequence` or :class:"
"`~collections.abc.Iterable` rather than to use :class:`list` or :class:`!"
"typing.List`."
msgstr ""

#: ../../library/typing.rst:3170
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3176
msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr ""

#: ../../library/typing.rst:3178
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`collections.abc.Set` rather than to use :"
"class:`set` or :class:`typing.Set`."
msgstr ""

#: ../../library/typing.rst:3182
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3188
msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr ""

#: ../../library/typing.rst:3190
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3197
msgid "Deprecated alias for :class:`tuple`."
msgstr ""

#: ../../library/typing.rst:3199
msgid ""
":class:`tuple` and ``Tuple`` are special-cased in the type system; see :ref:"
"`annotating-tuples` for more details."
msgstr ""

#: ../../library/typing.rst:3202
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3208
msgid "Deprecated alias to :class:`type`."
msgstr ""

#: ../../library/typing.rst:3210
msgid ""
"See :ref:`type-of-class-objects` for details on using :class:`type` or "
"``typing.Type`` in type annotations."
msgstr ""

#: ../../library/typing.rst:3215
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3222
msgid "Aliases to types in :mod:`collections`"
msgstr ""

#: ../../library/typing.rst:3226
msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr ""

#: ../../library/typing.rst:3230
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3236
msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr ""

#: ../../library/typing.rst:3240
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3246
msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr ""

#: ../../library/typing.rst:3250
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3256
msgid "Deprecated alias to :class:`collections.Counter`."
msgstr ""

#: ../../library/typing.rst:3260
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3266
msgid "Deprecated alias to :class:`collections.deque`."
msgstr ""

#: ../../library/typing.rst:3270
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3277
msgid "Aliases to other concrete types"
msgstr ""

#: ../../library/typing.rst:3279
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:3286
msgid ""
"Deprecated aliases corresponding to the return types from :func:`re.compile` "
"and :func:`re.match`."
msgstr ""

#: ../../library/typing.rst:3289
msgid ""
"These types (and the corresponding functions) are generic over :data:"
"`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."
msgstr ""

#: ../../library/typing.rst:3294
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:3298
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3304
msgid "Deprecated alias for :class:`str`."
msgstr ""

#: ../../library/typing.rst:3306
msgid ""
"``Text`` is provided to supply a forward compatible path for Python 2 code: "
"in Python 2, ``Text`` is an alias for ``unicode``."
msgstr ""

#: ../../library/typing.rst:3310
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""

#: ../../library/typing.rst:3313
msgid ""
"def add_unicode_checkmark(text: Text) -> Text:\n"
"    return text + u' \\u2713'"
msgstr ""

#: ../../library/typing.rst:3318
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""

#: ../../library/typing.rst:3328
msgid "Aliases to container ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3332
msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr ""

#: ../../library/typing.rst:3334
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3340
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""

#: ../../library/typing.rst:3343
msgid ""
"Prefer :class:`collections.abc.Buffer`, or a union like ``bytes | bytearray "
"| memoryview``."
msgstr ""

#: ../../library/typing.rst:3348
msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr ""

#: ../../library/typing.rst:3352
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3358
msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr ""

#: ../../library/typing.rst:3360
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3366
msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr ""

#: ../../library/typing.rst:3368
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3374
msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr ""

#: ../../library/typing.rst:3376
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3382
msgid "Deprecated alias to :class:`collections.abc.Mapping`."
msgstr ""

#: ../../library/typing.rst:3384
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3390
msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr ""

#: ../../library/typing.rst:3392
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3398
msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr ""

#: ../../library/typing.rst:3400
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3407
msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr ""

#: ../../library/typing.rst:3409
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3416
msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr ""

#: ../../library/typing.rst:3418
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3424
msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr ""

#: ../../library/typing.rst:3426
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3432
msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr ""

#: ../../library/typing.rst:3434
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3441
msgid "Aliases to asynchronous ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3445
msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr ""

#: ../../library/typing.rst:3447
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using :class:"
"`collections.abc.Coroutine` and ``typing.Coroutine`` in type annotations."
msgstr ""

#: ../../library/typing.rst:3453
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3459
msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr ""

#: ../../library/typing.rst:3461
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using :class:"
"`collections.abc.AsyncGenerator` and ``typing.AsyncGenerator`` in type "
"annotations."
msgstr ""

#: ../../library/typing.rst:3467
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3474
msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr ""

#: ../../library/typing.rst:3478
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3484
msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr ""

#: ../../library/typing.rst:3488
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3494
msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr ""

#: ../../library/typing.rst:3498
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3505
msgid "Aliases to other ABCs in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:3509
msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr ""

#: ../../library/typing.rst:3511
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3517
msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr ""

#: ../../library/typing.rst:3519
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3525
msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr ""

#: ../../library/typing.rst:3527
msgid ""
"See :ref:`annotating-callables` for details on how to use :class:"
"`collections.abc.Callable` and ``typing.Callable`` in type annotations."
msgstr ""

#: ../../library/typing.rst:3530
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3540
msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr ""

#: ../../library/typing.rst:3542
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using :class:"
"`collections.abc.Generator` and ``typing.Generator`` in type annotations."
msgstr ""

#: ../../library/typing.rst:3546
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3552
msgid "Deprecated alias to :class:`collections.abc.Hashable`."
msgstr ""

#: ../../library/typing.rst:3554
msgid "Use :class:`collections.abc.Hashable` directly instead."
msgstr ""

#: ../../library/typing.rst:3559
msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr ""

#: ../../library/typing.rst:3561
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3567
msgid "Deprecated alias to :class:`collections.abc.Sized`."
msgstr ""

#: ../../library/typing.rst:3569
msgid "Use :class:`collections.abc.Sized` directly instead."
msgstr ""

#: ../../library/typing.rst:3575
msgid "Aliases to :mod:`contextlib` ABCs"
msgstr ""

#: ../../library/typing.rst:3579
msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr ""

#: ../../library/typing.rst:3583
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3590
msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""

#: ../../library/typing.rst:3594
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:3600
msgid "Deprecation Timeline of Major Features"
msgstr ""

#: ../../library/typing.rst:3602
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""

#: ../../library/typing.rst:3609
msgid "Feature"
msgstr ""

#: ../../library/typing.rst:3610
msgid "Deprecated in"
msgstr "Obsoleto em"

#: ../../library/typing.rst:3611
msgid "Projected removal"
msgstr ""

#: ../../library/typing.rst:3612
msgid "PEP/issue"
msgstr ""

#: ../../library/typing.rst:3613
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr ""

#: ../../library/typing.rst:3614
msgid "3.8"
msgstr ""

#: ../../library/typing.rst:3615
msgid "3.13"
msgstr ""

#: ../../library/typing.rst:3616
msgid ":issue:`38291`"
msgstr ""

#: ../../library/typing.rst:3617
msgid "``typing`` versions of standard collections"
msgstr ""

#: ../../library/typing.rst:3618 ../../library/typing.rst:3622
msgid "3.9"
msgstr ""

#: ../../library/typing.rst:3619
msgid "Undecided (see :ref:`deprecated-aliases` for more information)"
msgstr ""

#: ../../library/typing.rst:3620
msgid ":pep:`585`"
msgstr ""

#: ../../library/typing.rst:3621
msgid ":class:`typing.ByteString`"
msgstr ""

#: ../../library/typing.rst:3623
msgid "3.14"
msgstr ""

#: ../../library/typing.rst:3624
msgid ":gh:`91896`"
msgstr ""

#: ../../library/typing.rst:3625
msgid ":data:`typing.Text`"
msgstr ""

#: ../../library/typing.rst:3626
msgid "3.11"
msgstr ""

#: ../../library/typing.rst:3627 ../../library/typing.rst:3631
#: ../../library/typing.rst:3635
msgid "Undecided"
msgstr ""

#: ../../library/typing.rst:3628
msgid ":gh:`92332`"
msgstr ""

#: ../../library/typing.rst:3629
msgid ":class:`typing.Hashable` and :class:`typing.Sized`"
msgstr ""

#: ../../library/typing.rst:3630 ../../library/typing.rst:3634
msgid "3.12"
msgstr ""

#: ../../library/typing.rst:3632
msgid ":gh:`94309`"
msgstr ""

#: ../../library/typing.rst:3633
msgid ":data:`typing.TypeAlias`"
msgstr ""

#: ../../library/typing.rst:3636
msgid ":pep:`695`"
msgstr ""
