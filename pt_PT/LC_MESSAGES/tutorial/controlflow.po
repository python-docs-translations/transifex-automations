# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# André Moreira <afrmscb@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 16:33+0000\n"
"PO-Revision-Date: 2025-09-22 16:51+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "Mais ferramentas de controlo de fluxo"

#: ../../tutorial/controlflow.rst:7
msgid ""
"As well as the :keyword:`while` statement just introduced, Python uses a few"
" more that we will encounter in this chapter."
msgstr ""
"Além da instrução :keyword:`while` acabada de introduzir, o Python usa "
"algumas mais que iremos encontrar neste capítulo."

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr "Instruções :keyword:`!if`"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Provavelmente, o tipo de instrução mais conhecido é a instrução "
":keyword:`if`. Por exemplo:"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... "
":keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"Pode haver zero ou mais partes :keyword:`elif`, e a parte :keyword:`else` é "
"opcional. A palavra-chave ':keyword:`!elif`' é uma abreviatura de 'else if',"
" e é útil para evitar indentação excessiva. Uma sequência :keyword:`!if` ..."
" :keyword:`!elif` ... :keyword:`!elif` ... é um substituto para as "
"instruções ``switch`` ou ``case`` encontradas noutras linguagens."

#: ../../tutorial/controlflow.rst:39
msgid ""
"If you're comparing the same value to several constants, or checking for "
"specific types or attributes, you may also find the :keyword:`!match` "
"statement useful. For more details see :ref:`tut-match`."
msgstr ""
"Se estiver a comparar o mesmo valor com várias constantes, ou a verificar "
"tipos ou atributos específicos, também pode achar útil a instrução "
":keyword:`!match`. Para mais detalhes, consulte :ref:`tut-match`."

#: ../../tutorial/controlflow.rst:46
msgid ":keyword:`!for` Statements"
msgstr "Instruções :keyword:`!for`"

#: ../../tutorial/controlflow.rst:51
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's "
":keyword:`!for` statement iterates over the items of any sequence (a list or"
" a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"A instrução :keyword:`for` em Python difere um pouco do que pode estar "
"habituado em C ou Pascal. Em vez de iterar sempre sobre uma progressão "
"aritmética de números (como em Pascal), ou de dar ao utilizador a capacidade"
" de definir tanto o passo de iteração como a condição de parada (como em C),"
" a instrução :keyword:`!for` do Python itera sobre os itens de qualquer "
"sequência (uma lista ou uma string), pela ordem em que aparecem na "
"sequência. Por exemplo (sem trocadilhos):"

#: ../../tutorial/controlflow.rst:72
msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to"
" loop over a copy of the collection or to create a new collection::"
msgstr ""
"O código que modifica uma coleção enquanto itera sobre essa mesma coleção "
"pode ser complicado de acertar. Em vez disso, é geralmente mais simples "
"iterar sobre uma cópia da coleção ou criar uma nova coleção:"

#: ../../tutorial/controlflow.rst:94
msgid "The :func:`range` Function"
msgstr "A função :func:`range`"

#: ../../tutorial/controlflow.rst:96
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function "
":func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Se precisar de iterar sobre uma sequência de números, a função incorporada "
":func:`range` é útil. Ela gera progressões aritméticas:"

#: ../../tutorial/controlflow.rst:108
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length 10."
"  It is possible to let the range start at another number, or to specify a "
"different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"O ponto final dado nunca faz parte da sequência gerada; ``range(10)`` gera "
"10 valores, os índices legais para itens de uma sequência de comprimento 10."
" É possível fazer com que a gama comece noutro número, ou especificar um "
"incremento diferente (até negativo; por vezes isto é chamado de 'passo'):"

#: ../../tutorial/controlflow.rst:122
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` and"
" :func:`len` as follows::"
msgstr ""
"Para iterar sobre os índices de uma sequência, pode combinar :func:`range` e"
" :func:`len` da seguinte forma:"

#: ../../tutorial/controlflow.rst:135
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"Na maioria destes casos, no entanto, é conveniente usar a função "
":func:`enumerate`, consulte :ref:`tut-loopidioms`."

#: ../../tutorial/controlflow.rst:138
msgid "A strange thing happens if you just print a range::"
msgstr "Acontece uma coisa estranha se simplesmente imprimir uma gama:"

#: ../../tutorial/controlflow.rst:143
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"De muitas formas, o objeto devolvido por :func:`range` comporta-se como se "
"fosse uma lista, mas na verdade não é. É um objeto que devolve os itens "
"sucessivos da sequência desejada quando itera sobre ele, mas não cria "
"realmente a lista, poupando assim espaço."

#: ../../tutorial/controlflow.rst:148
msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for"
" functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the "
":keyword:`for` statement is such a construct, while an example of a function"
" that takes an iterable is :func:`sum`::"
msgstr ""
"Dizemos que tal objeto é :term:`iterável`, ou seja, adequado como alvo para "
"funções e construções que esperam algo de que possam obter itens sucessivos "
"até que o fornecimento se esgote. Vimos que a instrução :keyword:`for` é uma"
" tal construção, enquanto um exemplo de uma função que aceita um iterável é "
":func:`sum`:"

#: ../../tutorial/controlflow.rst:157
msgid ""
"Later we will see more functions that return iterables and take iterables as"
" arguments.  In chapter :ref:`tut-structures`, we will discuss in more "
"detail about :func:`list`."
msgstr ""
"Mais tarde veremos mais funções que devolvem iteráveis e aceitam iteráveis "
"como argumentos. No capítulo :ref:`tut-structures`, discutiremos com mais "
"detalhe sobre :func:`list`."

#: ../../tutorial/controlflow.rst:164
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""

#: ../../tutorial/controlflow.rst:166
msgid ""
"The :keyword:`break` statement breaks out of the innermost enclosing "
":keyword:`for` or :keyword:`while` loop."
msgstr ""

#: ../../tutorial/controlflow.rst:169
msgid ""
"A :keyword:`!for` or :keyword:`!while` loop can include an :keyword:`!else` "
"clause."
msgstr ""

#: ../../tutorial/controlflow.rst:171
msgid ""
"In a :keyword:`for` loop, the :keyword:`!else` clause is executed after the "
"loop reaches its final iteration."
msgstr ""

#: ../../tutorial/controlflow.rst:174
msgid ""
"In a :keyword:`while` loop, it's executed after the loop's condition becomes"
" false."
msgstr ""
"Num ciclo :keyword:`while`, é executada após a condição do ciclo se tornar "
"falsa."

#: ../../tutorial/controlflow.rst:176
msgid ""
"In either kind of loop, the :keyword:`!else` clause is **not** executed if "
"the loop was terminated by a :keyword:`break`."
msgstr ""

#: ../../tutorial/controlflow.rst:179
msgid ""
"This is exemplified in the following :keyword:`!for` loop, which searches "
"for prime numbers::"
msgstr ""
"Isto é exemplificado no seguinte ciclo :keyword:`!for`, que procura números "
"primos:"

#: ../../tutorial/controlflow.rst:200
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""

#: ../../tutorial/controlflow.rst:203
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of "
":keyword:`if` statements: a :keyword:`try` statement's ``else`` clause runs "
"when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""

#: ../../tutorial/controlflow.rst:210
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""

#: ../../tutorial/controlflow.rst:231
msgid ":keyword:`!pass` Statements"
msgstr "Instruções :keyword:`!pass`"

#: ../../tutorial/controlflow.rst:233
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"A instrução :keyword:`pass` não faz nada. Pode ser usada quando uma "
"instrução é necessária sintaticamente, mas o programa não requer nenhuma "
"ação. Por exemplo:"

#: ../../tutorial/controlflow.rst:240
msgid "This is commonly used for creating minimal classes::"
msgstr "Isto é comumente usado para criar classes mínimas:"

#: ../../tutorial/controlflow.rst:246
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently"
" ignored::"
msgstr ""
"Outro local onde :keyword:`pass` pode ser usado é como um espaço reservado "
"para o corpo de uma função ou condicional quando está a trabalhar em novo "
"código, permitindo-lhe continuar a pensar a um nível mais abstrato. O "
":keyword:`!pass` é ignorado silenciosamente:"

#: ../../tutorial/controlflow.rst:258
msgid ":keyword:`!match` Statements"
msgstr "Instruções :keyword:`!match`"

#: ../../tutorial/controlflow.rst:260
msgid ""
"A :keyword:`match` statement takes an expression and compares its value to "
"successive patterns given as one or more case blocks.  This is superficially"
" similar to a switch statement in C, Java or JavaScript (and many other "
"languages), but it's more similar to pattern matching in languages like Rust"
" or Haskell. Only the first pattern that matches gets executed and it can "
"also extract components (sequence elements or object attributes) from the "
"value into variables."
msgstr ""

#: ../../tutorial/controlflow.rst:268
msgid ""
"The simplest form compares a subject value against one or more literals::"
msgstr ""
"A forma mais simples compara um valor de assunto com um ou mais literais:"

#: ../../tutorial/controlflow.rst:281
msgid ""
"Note the last block: the \"variable name\" ``_`` acts as a *wildcard* and "
"never fails to match. If no case matches, none of the branches is executed."
msgstr ""

#: ../../tutorial/controlflow.rst:284
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr "Pode combinar vários literais num único padrão usando ``|`` (\"ou\"):"

#: ../../tutorial/controlflow.rst:289
msgid ""
"Patterns can look like unpacking assignments, and can be used to bind "
"variables::"
msgstr ""
"Os padrões podem parecer atribuições de desempacotamento e podem ser usados "
"para ligar variáveis:"

#: ../../tutorial/controlflow.rst:305
msgid ""
"Study that one carefully!  The first pattern has two literals, and can be "
"thought of as an extension of the literal pattern shown above.  But the next"
" two patterns combine a literal and a variable, and the variable *binds* a "
"value from the subject (``point``).  The fourth pattern captures two values,"
" which makes it conceptually similar to the unpacking assignment ``(x, y) = "
"point``."
msgstr ""
"Estude este exemplo com cuidado! O primeiro padrão tem dois literais e pode "
"ser pensado como uma extensão do padrão literal mostrado acima. Mas os dois "
"padrões seguintes combinam um literal e uma variável, e a variável *liga* um"
" valor do assunto (``ponto``). O quarto padrão captura dois valores, o que o"
" torna conceitualmente semelhante à atribuição de desempacotamento ``(x, y) "
"= ponto``."

#: ../../tutorial/controlflow.rst:312
msgid ""
"If you are using classes to structure your data you can use the class name "
"followed by an argument list resembling a constructor, but with the ability "
"to capture attributes into variables::"
msgstr ""
"Se estiver a usar classes para estruturar os seus dados, pode usar o nome da"
" classe seguido de uma lista de argumentos semelhante a um construtor, mas "
"com a capacidade de capturar atributos em variáveis:"

#: ../../tutorial/controlflow.rst:334
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\","
" \"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"Pode usar parâmetros posicionais com algumas classes incorporadas que "
"fornecem uma ordenação para os seus atributos (por exemplo, dataclasses). "
"Também pode definir uma posição específica para atributos em padrões "
"definindo o atributo especial ``__match_args__`` nas suas classes. Se "
"estiver definido para (\"x\", \"y\"), os seguintes padrões são todos "
"equivalentes (e todos ligam o atributo ``y`` à variável ``var``):"

#: ../../tutorial/controlflow.rst:345
msgid ""
"A recommended way to read patterns is to look at them as an extended form of"
" what you would put on the left of an assignment, to understand which "
"variables would be set to what. Only the standalone names (like ``var`` "
"above) are assigned to by a match statement. Dotted names (like "
"``foo.bar``), attribute names (the ``x=`` and ``y=`` above) or class names "
"(recognized by the \"(...)\" next to them like ``Point`` above) are never "
"assigned to."
msgstr ""
"Uma forma recomendada de ler padrões é olhá-los como uma forma estendida do "
"que colocaria à esquerda de uma atribuição, para entender quais variáveis "
"seriam definidas para o quê. Apenas os nomes autónomos (como ``var`` acima) "
"são atribuídos por uma instrução de correspondência. Nomes com pontos (como "
"``foo.bar``), nomes de atributos (os ``x=`` e ``y=`` acima) ou nomes de "
"classes (reconhecidos pelo \"(...)\" ao lado deles como ``Ponto`` acima) "
"nunca são atribuídos."

#: ../../tutorial/controlflow.rst:352
msgid ""
"Patterns can be arbitrarily nested.  For example, if we have a short list of"
" Points, with ``__match_args__`` added, we could match it like this::"
msgstr ""
"Os padrões podem ser aninhados arbitrariamente. Por exemplo, se tivermos uma"
" lista curta de Pontos, com ``__match_args__`` adicionado, poderíamos "
"correspondê-la assim:"

#: ../../tutorial/controlflow.rst:373
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"Podemos adicionar uma cláusula ``if`` a um padrão, conhecida como uma "
"\"guarda\". Se a guarda for falsa, ``match`` passa a tentar o próximo bloco "
"de caso. Note que a captura de valor acontece antes da guarda ser avaliada:"

#: ../../tutorial/controlflow.rst:383
msgid "Several other key features of this statement:"
msgstr "Várias outras características importantes desta instrução:"

#: ../../tutorial/controlflow.rst:385
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences.  An important exception is "
"that they don't match iterators or strings."
msgstr ""
"Tal como as atribuições de desempacotamento, os padrões de tuplo e lista têm"
" exatamente o mesmo significado e correspondem efetivamente a sequências "
"arbitrárias. Uma exceção importante é que não correspondem a iteradores ou "
"strings."

#: ../../tutorial/controlflow.rst:389
msgid ""
"Sequence patterns support extended unpacking: ``[x, y, *rest]`` and ``(x, y,"
" *rest)`` work similar to unpacking assignments.  The name after ``*`` may "
"also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two items "
"without binding the remaining items."
msgstr ""
"Os padrões de sequência suportam descompactação estendida: ``[x, y, *rest]``"
" e ``(x, y, *rest)`` funcionam de forma semelhante às atribuições de "
"descompactação. O nome após ``*`` também pode ser ``_``, portanto, ``(x, y, "
"*_)`` corresponde a uma sequência de pelo menos dois itens sem vincular os "
"itens restantes."

#: ../../tutorial/controlflow.rst:394
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dictionary.  Unlike "
"sequence patterns, extra keys are ignored.  An unpacking like ``**rest`` is "
"also supported.  (But ``**_`` would be redundant, so it is not allowed.)"
msgstr ""
"Padrões de mapeamento: ``{\"largura de banda\": b, \"latência\": l}`` "
"captura os valores ``\"largura de banda\"`` e ``\"latência\"`` de um "
"dicionário. Ao contrário dos padrões de sequência, as chaves extra são "
"ignoradas. Um desempacotamento como ``**resto`` também é suportado. (Mas "
"``**_`` seria redundante, por isso não é permitido.)"

#: ../../tutorial/controlflow.rst:399
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "Subpadrões podem ser capturados usando a palavra-chave ``as``:"

#: ../../tutorial/controlflow.rst:403
msgid ""
"will capture the second element of the input as ``p2`` (as long as the input"
" is a sequence of two points)"
msgstr ""
"capturará o segundo elemento da entrada como ``p2`` (desde que a entrada "
"seja uma sequência de dois pontos)"

#: ../../tutorial/controlflow.rst:406
msgid ""
"Most literals are compared by equality, however the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"A maioria dos literais são comparados por igualdade, no entanto, os "
"singletons ``True``, ``False`` e ``None`` são comparados por identidade."

#: ../../tutorial/controlflow.rst:409
msgid ""
"Patterns may use named constants.  These must be dotted names to prevent "
"them from being interpreted as capture variable::"
msgstr ""
"Os padrões podem usar constantes nomeadas. Estas devem ser nomes com pontos "
"para evitar que sejam interpretadas como variáveis de captura:"

#: ../../tutorial/controlflow.rst:428
msgid ""
"For a more detailed explanation and additional examples, you can look into "
":pep:`636` which is written in a tutorial format."
msgstr ""
"Para uma explicação mais detalhada e exemplos adicionais, pode consultar "
":pep:`636`, que está escrito num formato de tutorial."

#: ../../tutorial/controlflow.rst:434
msgid "Defining Functions"
msgstr "Definição de funções"

#: ../../tutorial/controlflow.rst:436
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Podemos criar uma função que escreve a série de Fibonacci até um limite "
"arbitrário:"

#: ../../tutorial/controlflow.rst:456
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"A palavra-chave :keyword:`def` introduz uma *definição de função*. Deve ser "
"seguida pelo nome da função e pela lista de parâmetros formais entre "
"parênteses. As instruções que formam o corpo da função começam na linha "
"seguinte e devem ser indentadas."

#: ../../tutorial/controlflow.rst:461
msgid ""
"The first statement of the function body can optionally be a string literal;"
" this string literal is the function's documentation string, or "
":dfn:`docstring`. (More about docstrings can be found in the section "
":ref:`tut-docstrings`.) There are tools which use docstrings to "
"automatically produce online or printed documentation, or to let the user "
"interactively browse through code; it's good practice to include docstrings "
"in code that you write, so make a habit of it."
msgstr ""
"A primeira instrução do corpo da função pode, opcionalmente, ser um literal "
"de string; este literal de string é a string de documentação da função, ou "
":dfn:`docstring`. (Mais sobre docstrings pode ser encontrado na secção "
":ref:`tut-docstrings`.) Existem ferramentas que usam docstrings para "
"produzir automaticamente documentação online ou impressa, ou para permitir "
"que o utilizador navegue interativamente pelo código; é uma boa prática "
"incluir docstrings no código que escreve, por isso faça disso um hábito."

#: ../../tutorial/controlflow.rst:468
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"A *execução* de uma função introduz uma nova tabela de símbolos usada para "
"as variáveis locais da função. Mais precisamente, todas as atribuições de "
"variáveis numa função armazenam o valor na tabela de símbolos local; "
"enquanto as referências a variáveis procuram primeiro na tabela de símbolos "
"local, depois nas tabelas de símbolos locais de funções envolventes, depois "
"na tabela de símbolos global, e finalmente na tabela de nomes incorporados. "
"Assim, variáveis globais e variáveis de funções envolventes não podem ser "
"diretamente atribuídas com um valor dentro de uma função (a menos que, para "
"variáveis globais, sejam nomeadas numa instrução :keyword:`global`, ou, para"
" variáveis de funções envolventes, sejam nomeadas numa instrução "
":keyword:`nonlocal`), embora possam ser referenciadas."

#: ../../tutorial/controlflow.rst:479
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments"
" are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, or calls itself recursively, a new local symbol table is "
"created for that call."
msgstr ""
"Os parâmetros reais (argumentos) de uma chamada de função são introduzidos "
"na tabela de símbolos local da função chamada quando esta é chamada; assim, "
"os argumentos são passados usando *passagem por valor* (onde o *valor* é "
"sempre uma *referência de objeto*, não o valor do objeto). [#]_ Quando uma "
"função chama outra função, ou se chama a si mesma recursivamente, uma nova "
"tabela de símbolos local é criada para essa chamada."

#: ../../tutorial/controlflow.rst:486
msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"Uma definição de função associa o nome da função ao objeto função na tabela "
"de símbolos atual. O interpretador reconhece o objeto apontado por esse nome"
" como uma função definida pelo utilizador. Outros nomes também podem apontar"
" para esse mesmo objeto função e também podem ser usados para aceder à "
"função:"

#: ../../tutorial/controlflow.rst:497
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function"
" but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using "
":func:`print`::"
msgstr ""
"Vindo de outras linguagens, pode objetar que ``fib`` não é uma função, mas "
"sim um procedimento, já que não devolve um valor. Na verdade, mesmo funções "
"sem uma instrução :keyword:`return` devolvem um valor, embora seja um valor "
"bastante aborrecido. Este valor chama-se ``None`` (é um nome incorporado). "
"Escrever o valor ``None`` é normalmente suprimido pelo interpretador se "
"fosse o único valor a ser escrito. Pode vê-lo se realmente quiser, usando "
":func:`print`:"

#: ../../tutorial/controlflow.rst:508
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"É simples escrever uma função que devolve uma lista dos números da série de "
"Fibonacci, em vez de a imprimir:"

#: ../../tutorial/controlflow.rst:524
msgid "This example, as usual, demonstrates some new Python features:"
msgstr ""
"Este exemplo, como de costume, demonstra algumas novas funcionalidades do "
"Python:"

#: ../../tutorial/controlflow.rst:526
msgid ""
"The :keyword:`return` statement returns with a value from a function. "
":keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"A instrução :keyword:`return` devolve um valor de uma função. "
":keyword:`!return` sem um argumento de expressão devolve ``None``. Chegar ao"
" fim de uma função também devolve ``None``."

#: ../../tutorial/controlflow.rst:530
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named"
" ``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see "
":ref:`tut-classes`) The method :meth:`!append` shown in the example is "
"defined for list objects; it adds a new element at the end of the list.  In "
"this example it is equivalent to ``result = result + [a]``, but more "
"efficient."
msgstr ""

#: ../../tutorial/controlflow.rst:545
msgid "More on Defining Functions"
msgstr "Mais sobre a definição de funções"

#: ../../tutorial/controlflow.rst:547
msgid ""
"It is also possible to define functions with a variable number of arguments."
" There are three forms, which can be combined."
msgstr ""
"Também é possível definir funções com um número variável de argumentos. "
"Existem três formas, que podem ser combinadas."

#: ../../tutorial/controlflow.rst:554
msgid "Default Argument Values"
msgstr "Valores predefinidos de argumentos"

#: ../../tutorial/controlflow.rst:556
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"A forma mais útil é especificar um valor predefinido para um ou mais "
"argumentos. Isto cria uma função que pode ser chamada com menos argumentos "
"do que os definidos. Por exemplo:"

#: ../../tutorial/controlflow.rst:572
msgid "This function can be called in several ways:"
msgstr "Esta função pode ser chamada de várias formas:"

#: ../../tutorial/controlflow.rst:574
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to "
"quit?')``"
msgstr "apenas com o argumento obrigatório: ``ask_ok('Deseja mesmo sair?')``"

#: ../../tutorial/controlflow.rst:576
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"com um dos argumentos opcionais: ``ask_ok('Substituir o ficheiro?', 2)``"

#: ../../tutorial/controlflow.rst:578
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come"
" on, only yes or no!')``"
msgstr ""
"ou até com todos os argumentos: ``ask_ok('Substituir o ficheiro?', 2, 'Por "
"favor, apenas sim ou não!')``"

#: ../../tutorial/controlflow.rst:581
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"Este exemplo também introduz a palavra-chave :keyword:`in`. Isto testa se "
"uma sequência contém ou não um certo valor."

#: ../../tutorial/controlflow.rst:584
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Os valores predefinidos são avaliados no momento da definição da função no "
"âmbito *definidor*, de modo que:"

#: ../../tutorial/controlflow.rst:595
msgid "will print ``5``."
msgstr "imprimirá ``5``."

#: ../../tutorial/controlflow.rst:597
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes"
" a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Aviso importante:** O valor predefinido é avaliado apenas uma vez. Isto "
"faz a diferença quando o valor predefinido é um objeto mutável, como uma "
"lista, um dicionário ou instâncias da maioria das classes. Por exemplo, a "
"seguinte função acumula os argumentos passados em chamadas subsequentes:"

#: ../../tutorial/controlflow.rst:610
msgid "This will print ::"
msgstr "Isto imprimirá:"

#: ../../tutorial/controlflow.rst:616
msgid ""
"If you don't want the default to be shared between subsequent calls, you can"
" write the function like this instead::"
msgstr ""
"Se não quiser que o valor predefinido seja partilhado entre chamadas "
"subsequentes, pode escrever a função assim:"

#: ../../tutorial/controlflow.rst:629
msgid "Keyword Arguments"
msgstr "Argumentos nomeados"

#: ../../tutorial/controlflow.rst:631
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"As funções também podem ser chamadas usando :term:`argumentos nomeados "
"<argumento nomeado>` da forma ``kwarg=valor``. Por exemplo, a seguinte "
"função:"

#: ../../tutorial/controlflow.rst:640
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"aceita um argumento obrigatório (``tensao``) e três argumentos opcionais "
"(``estado``, ``acao``, e ``tipo``). Esta função pode ser chamada de qualquer"
" uma das seguintes formas:"

#: ../../tutorial/controlflow.rst:651
msgid "but all the following calls would be invalid::"
msgstr "mas todas as seguintes chamadas seriam inválidas:"

#: ../../tutorial/controlflow.rst:658
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the"
" function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument"
" may receive a value more than once. Here's an example that fails due to "
"this restriction::"
msgstr ""
"Numa chamada de função, os argumentos nomeados devem seguir os argumentos "
"posicionais. Todos os argumentos nomeados passados devem corresponder a um "
"dos argumentos aceites pela função (por exemplo, ``ator`` não é um argumento"
" válido para a função ``papagaio``), e a sua ordem não é importante. Isto "
"também inclui argumentos não opcionais (por exemplo, "
"``papagaio(tensao=1000)`` também é válido). Nenhum argumento pode receber um"
" valor mais do que uma vez. Aqui está um exemplo que falha devido a esta "
"restrição:"

#: ../../tutorial/controlflow.rst:674
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives"
" a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"Quando um parâmetro formal final da forma ``**nome`` está presente, recebe "
"um dicionário (consulte :ref:`typesmapping`) contendo todos os argumentos "
"nomeados, exceto aqueles que correspondem a um parâmetro formal. Isto pode "
"ser combinado com um parâmetro formal da forma ``*nome`` (descrito na "
"próxima subsecção), que recebe um :ref:`tuplo <tut-tuples>` contendo os "
"argumentos posicionais além da lista de parâmetros formais. (``*nome`` deve "
"ocorrer antes de ``**nome``.) Por exemplo, se definirmos uma função assim:"

#: ../../tutorial/controlflow.rst:691
msgid "It could be called like this::"
msgstr "Poderia ser chamada assim:"

#: ../../tutorial/controlflow.rst:699
msgid "and of course it would print:"
msgstr "e, claro, imprimiria:"

#: ../../tutorial/controlflow.rst:712
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed"
" to match the order in which they were provided in the function call."
msgstr ""
"Note que a ordem pela qual os argumentos nomeados são impressos é garantida "
"como correspondendo à ordem pela qual foram fornecidos na chamada da função."

#: ../../tutorial/controlflow.rst:716
msgid "Special parameters"
msgstr "Parâmetros especiais"

#: ../../tutorial/controlflow.rst:718
msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to"
" restrict the way arguments can be passed so that a developer need only look"
" at the function definition to determine if items are passed by position, by"
" position or keyword, or by keyword."
msgstr ""
"Por predefinição, os argumentos podem ser passados a uma função Python por "
"posição ou explicitamente por nome. Por legibilidade e desempenho, faz "
"sentido restringir a forma como os argumentos podem ser passados, de modo "
"que um programador precise apenas de olhar para a definição da função para "
"determinar se os itens são passados por posição, por posição ou nome, ou "
"apenas por nome."

#: ../../tutorial/controlflow.rst:724
msgid "A function definition may look like:"
msgstr "Uma definição de função pode parecer:"

#: ../../tutorial/controlflow.rst:735
msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind"
" of parameter by how the arguments may be passed to the function: "
"positional-only, positional-or-keyword, and keyword-only. Keyword parameters"
" are also referred to as named parameters."
msgstr ""
"onde ``/`` e ``*`` são opcionais. Se usados, estes símbolos indicam o tipo "
"de parâmetro pela forma como os argumentos podem ser passados à função: "
"apenas posicionais, posicionais ou nomeados, e apenas nomeados. Os "
"parâmetros nomeados também são referidos como parâmetros nomeados."

#: ../../tutorial/controlflow.rst:742
msgid "Positional-or-Keyword Arguments"
msgstr "Argumentos posicionais ou nomeados"

#: ../../tutorial/controlflow.rst:744
msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may"
" be passed to a function by position or by keyword."
msgstr ""
"Se ``/`` e ``*`` não estiverem presentes na definição da função, os "
"argumentos podem ser passados a uma função por posição ou por nome."

#: ../../tutorial/controlflow.rst:749
msgid "Positional-Only Parameters"
msgstr "Parâmetros apenas posicionais"

#: ../../tutorial/controlflow.rst:751
msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order"
" matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""
"Analisando isto com um pouco mais de detalhe, é possível marcar certos "
"parâmetros como *apenas posicionais*. Se *apenas posicionais*, a ordem dos "
"parâmetros importa, e os parâmetros não podem ser passados por nome. Os "
"parâmetros apenas posicionais são colocados antes de um ``/`` (barra). A "
"``/`` é usada para separar logicamente os parâmetros apenas posicionais do "
"resto dos parâmetros. Se não houver ``/`` na definição da função, não há "
"parâmetros apenas posicionais."

#: ../../tutorial/controlflow.rst:759
msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""
"Os parâmetros que seguem a ``/`` podem ser *posicionais ou nomeados* ou "
"*apenas nomeados*."

#: ../../tutorial/controlflow.rst:763
msgid "Keyword-Only Arguments"
msgstr "Argumentos apenas nomeados"

#: ../../tutorial/controlflow.rst:765
msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before"
" the first *keyword-only* parameter."
msgstr ""
"Para marcar parâmetros como *apenas nomeados*, indicando que os parâmetros "
"devem ser passados por argumentos nomeados, coloque um ``*`` na lista de "
"argumentos imediatamente antes do primeiro parâmetro *apenas nomeado*."

#: ../../tutorial/controlflow.rst:771
msgid "Function Examples"
msgstr "Exemplos de funções"

#: ../../tutorial/controlflow.rst:773
msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""
"Considere as seguintes definições de funções, prestando atenção aos "
"marcadores ``/`` e ``*``:"

#: ../../tutorial/controlflow.rst:789
msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed"
" by position or keyword::"
msgstr ""
"A primeira definição de função, ``argumento_padrao``, a forma mais familiar,"
" não coloca restrições na convenção de chamada e os argumentos podem ser "
"passados por posição ou nome:"

#: ../../tutorial/controlflow.rst:799
msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""
"A segunda função ``arg_apenas_posicional`` está restrita a usar apenas "
"parâmetros posicionais, pois há uma ``/`` na definição da função:"

#: ../../tutorial/controlflow.rst:810
msgid ""
"The third function ``kwd_only_args`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""

#: ../../tutorial/controlflow.rst:821
msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr ""
"E a última usa todas as três convenções de chamada na mesma definição de "
"função:"

#: ../../tutorial/controlflow.rst:841
msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""
"Finalmente, considere esta definição de função que tem uma potencial colisão"
" entre o argumento posicional ``nome`` e ``**kwds`` que tem ``nome`` como "
"uma chave:"

#: ../../tutorial/controlflow.rst:846
msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""
"Não há nenhuma chamada possível que faça com que devolva ``True``, pois o "
"nome ``'nome'`` sempre se ligará ao primeiro parâmetro. Por exemplo:"

#: ../../tutorial/controlflow.rst:855
msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""
"Mas usando ``/`` (argumentos apenas posicionais), é possível, pois permite "
"``nome`` como um argumento posicional e ``'nome'`` como uma chave nos "
"argumentos nomeados:"

#: ../../tutorial/controlflow.rst:863
msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""
"Em outras palavras, os nomes dos parâmetros apenas posicionais podem ser "
"usados em ``**kwds`` sem ambiguidade."

#: ../../tutorial/controlflow.rst:868
msgid "Recap"
msgstr "Resumo"

#: ../../tutorial/controlflow.rst:870
msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""
"O caso de uso determinará quais parâmetros usar na definição da função:"

#: ../../tutorial/controlflow.rst:874
msgid "As guidance:"
msgstr "Como orientação:"

#: ../../tutorial/controlflow.rst:876
msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function"
" is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""
"Use apenas posicionais se não quiser que o nome dos parâmetros esteja "
"disponível para o utilizador. Isto é útil quando os nomes dos parâmetros não"
" têm significado real, se quiser impor a ordem dos argumentos quando a "
"função é chamada, ou se precisar de aceitar alguns parâmetros posicionais e "
"palavras-chave arbitrárias."

#: ../../tutorial/controlflow.rst:881
msgid ""
"Use keyword-only when names have meaning and the function definition is more"
" understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""
"Use apenas nomeados quando os nomes têm significado e a definição da função "
"é mais compreensível ao ser explícita com os nomes, ou quando quer evitar "
"que os utilizadores dependam da posição do argumento passado."

#: ../../tutorial/controlflow.rst:884
msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""
"Para uma API, use apenas posicionais para evitar alterações que quebram a "
"API se o nome do parâmetro for modificado no futuro."

#: ../../tutorial/controlflow.rst:890
msgid "Arbitrary Argument Lists"
msgstr "Listas arbitrárias de argumentos"

#: ../../tutorial/controlflow.rst:895
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Finalmente, a opção menos frequentemente usada é especificar que uma função "
"pode ser chamada com um número arbitrário de argumentos. Estes argumentos "
"serão agrupados num tuplo (consulte :ref:`tut-tuples`). Antes do número "
"variável de argumentos, podem ocorrer zero ou mais argumentos normais:"

#: ../../tutorial/controlflow.rst:904
msgid ""
"Normally, these *variadic* arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only"
" be used as keywords rather than positional arguments. ::"
msgstr ""
"Normalmente, estes argumentos *variádicos* serão os últimos na lista de "
"parâmetros formais, porque recolhem todos os argumentos de entrada restantes"
" que são passados à função. Quaisquer parâmetros formais que ocorram após o "
"parâmetro ``*args`` são argumentos 'apenas nomeados', o que significa que só"
" podem ser usados como palavras-chave em vez de argumentos posicionais:"

#: ../../tutorial/controlflow.rst:921
msgid "Unpacking Argument Lists"
msgstr "Desempacotar listas de argumentos"

#: ../../tutorial/controlflow.rst:923
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"A situação inversa ocorre quando os argumentos já estão numa lista ou tuplo,"
" mas precisam de ser desempacotados para uma chamada de função que requer "
"argumentos posicionais separados. Por exemplo, a função incorporada "
":func:`range` espera argumentos *início* e *fim* separados. Se não estiverem"
" disponíveis separadamente, escreva a chamada da função com o operador ``*``"
" para desempacotar os argumentos de uma lista ou tuplo:"

#: ../../tutorial/controlflow.rst:939
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""
"Da mesma forma, os dicionários podem fornecer argumentos nomeados com o "
"operador ``**``:"

#: ../../tutorial/controlflow.rst:955
msgid "Lambda Expressions"
msgstr "Expressões lambda"

#: ../../tutorial/controlflow.rst:957
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword."
" This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are"
" just syntactic sugar for a normal function definition.  Like nested "
"function definitions, lambda functions can reference variables from the "
"containing scope::"
msgstr ""
"Pequenas funções anónimas podem ser criadas com a palavra-chave "
":keyword:`lambda`. Esta função devolve a soma dos seus dois argumentos: "
"``lambda a, b: a+b``. As funções lambda podem ser usadas onde quer que sejam"
" necessários objetos de função. São sintaticamente restritas a uma única "
"expressão. Semanticamente, são apenas açúcar sintático para uma definição "
"normal de função. Tal como as definições de funções aninhadas, as funções "
"lambda podem referenciar variáveis do âmbito que as contém:"

#: ../../tutorial/controlflow.rst:974
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""

#: ../../tutorial/controlflow.rst:986
msgid "Documentation Strings"
msgstr "Strings de documentação"

#: ../../tutorial/controlflow.rst:993
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"Aqui estão algumas convenções sobre o conteúdo e formatação das strings de "
"documentação."

#: ../../tutorial/controlflow.rst:996
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"A primeira linha deve ser sempre um resumo curto e conciso do propósito do "
"objeto. Por brevidade, não deve declarar explicitamente o nome ou tipo do "
"objeto, uma vez que estes estão disponíveis por outros meios (exceto se o "
"nome for um verbo que descreve a operação de uma função). Esta linha deve "
"começar com uma letra maiúscula e terminar com um ponto final."

#: ../../tutorial/controlflow.rst:1002
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description."
"  The following lines should be one or more paragraphs describing the "
"object's calling conventions, its side effects, etc."
msgstr ""
"Se houver mais linhas na string de documentação, a segunda linha deve estar "
"em branco, separando visualmente o resumo do resto da descrição. As linhas "
"seguintes devem ser um ou mais parágrafos descrevendo as convenções de "
"chamada do objeto, os seus efeitos secundários, etc."

#: ../../tutorial/controlflow.rst:1007
msgid ""
"The Python parser does not strip indentation from multi-line string literals"
" in Python, so tools that process documentation have to strip indentation if"
" desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"O analisador sintático do Python não remove a indentação de literais de "
"strings de múltiplas linhas em Python, por isso as ferramentas que processam"
" documentação têm de remover a indentação, se desejado. Isto é feito usando "
"a seguinte convenção. A primeira linha não vazia *depois* da primeira linha "
"da string determina a quantidade de indentação para toda a string de "
"documentação. (Não podemos usar a primeira linha, uma vez que geralmente "
"está adjacente às aspas de abertura da string, por isso a sua indentação não"
" é aparente no literal da string.) O espaço em branco \"equivalente\" a esta"
" indentação é então removido do início de todas as linhas da string. Linhas "
"que estão menos indentadas não devem ocorrer, mas se ocorrerem, todo o seu "
"espaço em branco inicial deve ser removido. A equivalência de espaço em "
"branco deve ser testada após a expansão de tabulações (para 8 espaços, "
"normalmente)."

#: ../../tutorial/controlflow.rst:1019
msgid "Here is an example of a multi-line docstring::"
msgstr ""
"Aqui está um exemplo de uma string de documentação de múltiplas linhas:"

#: ../../tutorial/controlflow.rst:1037
msgid "Function Annotations"
msgstr "Anotações de funções"

#: ../../tutorial/controlflow.rst:1045
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`Anotações de funções <function>` são informações de metadados "
"completamente opcionais sobre os tipos usados por funções definidas pelo "
"utilizador (consulte :pep:`3107` e :pep:`484` para mais informações)."

#: ../../tutorial/controlflow.rst:1049
msgid ""
":term:`Annotations <function annotation>` are stored in the "
":attr:`!__annotations__` attribute of the function as a dictionary and have "
"no effect on any other part of the function.  Parameter annotations are "
"defined by a colon after the parameter name, followed by an expression "
"evaluating to the value of the annotation.  Return annotations are defined "
"by a literal ``->``, followed by an expression, between the parameter list "
"and the colon denoting the end of the :keyword:`def` statement.  The "
"following example has a required argument, an optional argument, and the "
"return value annotated::"
msgstr ""

#: ../../tutorial/controlflow.rst:1071
msgid "Intermezzo: Coding Style"
msgstr "Intermédio: Estilo de codificação"

#: ../../tutorial/controlflow.rst:1076
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is"
" a good time to talk about *coding style*.  Most languages can be written "
"(or more concise, *formatted*) in different styles; some are more readable "
"than others. Making it easy for others to read your code is always a good "
"idea, and adopting a nice coding style helps tremendously for that."
msgstr ""
"Agoras que está prestes a escrever peças mais longas e complexas de Python, "
"é uma boa altura para falar sobre *estilo de codificação*. A maioria das "
"linguagens pode ser escrita (ou, mais concisamente, *formatada*) em "
"diferentes estilos; alguns são mais legíveis do que outros. Tornar fácil "
"para os outros lerem o seu código é sempre uma boa ideia, e adotar um bom "
"estilo de codificação ajuda imenso nisso."

#: ../../tutorial/controlflow.rst:1082
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every"
" Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Para Python, o :pep:`8` surgiu como o guia de estilo ao qual a maioria dos "
"projetos aderem; promove um estilo de codificação muito legível e agradável "
"à vista. Todos os programadores Python deviam lê-lo em algum momento; aqui "
"estão os pontos mais importantes extraídos para si:"

#: ../../tutorial/controlflow.rst:1087
msgid "Use 4-space indentation, and no tabs."
msgstr "Use indentação de 4 espaços e sem tabulações."

#: ../../tutorial/controlflow.rst:1089
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"4 espaços são um bom compromisso entre indentação pequena (permite maior "
"profundidade de aninhamento) e indentação grande (mais fácil de ler). As "
"tabulações introduzem confusão e é melhor evitá-las."

#: ../../tutorial/controlflow.rst:1093
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Quebre as linhas para que não excedam 79 caracteres."

#: ../../tutorial/controlflow.rst:1095
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Isto ajuda utilizadores com ecrãs pequenos e torna possível ter vários "
"ficheiros de código lado a lado em ecrãs maiores."

#: ../../tutorial/controlflow.rst:1098
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code"
" inside functions."
msgstr ""
"Use linhas em branco para separar funções e classes, e blocos maiores de "
"código dentro de funções."

#: ../../tutorial/controlflow.rst:1101
msgid "When possible, put comments on a line of their own."
msgstr "Quando possível, coloque comentários numa linha própria."

#: ../../tutorial/controlflow.rst:1103
msgid "Use docstrings."
msgstr "Use strings de documentação."

#: ../../tutorial/controlflow.rst:1105
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Use espaços em redor de operadores e após vírgulas, mas não diretamente "
"dentro de construções de parênteses: ``a = f(1, 2) + g(3, 4)``."

#: ../../tutorial/controlflow.rst:1108
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method"
" argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Nomeie as suas classes e funções de forma consistente; a convenção é usar "
"``UpperCamelCase`` para classes e ``minusculas_com_sublinhados`` para "
"funções e métodos. Use sempre ``self`` como o nome para o primeiro argumento"
" do método (consulte :ref:`tut-firstclasses` para mais informações sobre "
"classes e métodos)."

#: ../../tutorial/controlflow.rst:1113
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any"
" case."
msgstr ""
"Não use codificações sofisticadas se o seu código for para ser usado em "
"ambientes internacionais. A predefinição do Python, UTF-8, ou mesmo ASCII "
"simples, funcionam melhor em qualquer caso."

#: ../../tutorial/controlflow.rst:1117
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the"
" slightest chance people speaking a different language will read or maintain"
" the code."
msgstr ""
"Da mesma forma, não use caracteres não-ASCII em identificadores se houver a "
"mínima possibilidade de pessoas que falam uma língua diferente lerem ou "
"manterem o código."

#: ../../tutorial/controlflow.rst:1123
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../tutorial/controlflow.rst:1124
msgid ""
"Actually, *call by object reference* would be a better description, since if"
" a mutable object is passed, the caller will see any changes the callee "
"makes to it (items inserted into a list)."
msgstr ""
"Na verdade, *passagem por referência de objeto* seria uma descrição melhor, "
"uma vez que, se um objeto mutável for passado, o chamador verá quaisquer "
"alterações que o chamado faça nele (itens inseridos numa lista)."

#: ../../tutorial/controlflow.rst:48
msgid "statement"
msgstr "instrução"

#: ../../tutorial/controlflow.rst:48
msgid "for"
msgstr "para"

#: ../../tutorial/controlflow.rst:451 ../../tutorial/controlflow.rst:988
msgid "documentation strings"
msgstr "strings de documentação"

#: ../../tutorial/controlflow.rst:451 ../../tutorial/controlflow.rst:988
msgid "docstrings"
msgstr "docstrings"

#: ../../tutorial/controlflow.rst:451 ../../tutorial/controlflow.rst:988
msgid "strings, documentation"
msgstr "strings, documentação"

#: ../../tutorial/controlflow.rst:892
msgid "* (asterisk)"
msgstr "* (asterisco)"

#: ../../tutorial/controlflow.rst:892 ../../tutorial/controlflow.rst:936
msgid "in function calls"
msgstr "em chamadas de função"

#: ../../tutorial/controlflow.rst:936
msgid "**"
msgstr "**"

#: ../../tutorial/controlflow.rst:1040
msgid "function"
msgstr "função"

#: ../../tutorial/controlflow.rst:1040
msgid "annotations"
msgstr "anotações"

#: ../../tutorial/controlflow.rst:1040
msgid "->"
msgstr "->"

#: ../../tutorial/controlflow.rst:1040
msgid "function annotations"
msgstr "anotações de função"

#: ../../tutorial/controlflow.rst:1040
msgid ": (colon)"
msgstr ": (dois pontos)"

#: ../../tutorial/controlflow.rst:1074
msgid "coding"
msgstr "codificação"

#: ../../tutorial/controlflow.rst:1074
msgid "style"
msgstr "estilo"
