# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-23 15:08+0000\n"
"PO-Revision-Date: 2025-09-15 01:05+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "Mais ferramentas de controlo de fluxo"

#: ../../tutorial/controlflow.rst:7
msgid ""
"As well as the :keyword:`while` statement just introduced, Python uses a few "
"more that we will encounter in this chapter."
msgstr ""
"Além da instrução :keyword:`while` acabada de introduzir, o Python usa "
"algumas mais que iremos encontrar neste capítulo."

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr "Instruções :keyword:`!if`"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Provavelmente, o tipo de instrução mais conhecido é a instrução :keyword:"
"`if`. Por exemplo:"

#: ../../tutorial/controlflow.rst:19
msgid ""
">>> x = int(input(\"Please enter an integer: \"))\n"
"Please enter an integer: 42\n"
">>> if x < 0:\n"
"...     x = 0\n"
"...     print('Negative changed to zero')\n"
"... elif x == 0:\n"
"...     print('Zero')\n"
"... elif x == 1:\n"
"...     print('Single')\n"
"... else:\n"
"...     print('More')\n"
"...\n"
"More"
msgstr ""
">>> x = int(input(\"Por favor, introduza um número inteiro: \"))\n"
"Por favor, introduza um número inteiro: 42\n"
">>> if x < 0:\n"
"...     x = 0\n"
"...     print('Negativo alterado para zero')\n"
"... elif x == 0:\n"
"...     print('Zero')\n"
"... elif x == 1:\n"
"...     print('Único')\n"
"... else:\n"
"...     print('Mais')\n"
"...\n"
"Mais"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"Pode haver zero ou mais partes :keyword:`elif`, e a parte :keyword:`else` é "
"opcional. A palavra-chave ':keyword:`!elif`' é uma abreviatura de 'else if', "
"e é útil para evitar indentação excessiva. Uma sequência :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... é um substituto para as instruções "
"``switch`` ou ``case`` encontradas noutras linguagens."

#: ../../tutorial/controlflow.rst:39
msgid ""
"If you're comparing the same value to several constants, or checking for "
"specific types or attributes, you may also find the :keyword:`!match` "
"statement useful. For more details see :ref:`tut-match`."
msgstr ""
"Se estiver a comparar o mesmo valor com várias constantes, ou a verificar "
"tipos ou atributos específicos, também pode achar útil a instrução :keyword:"
"`!match`. Para mais detalhes, consulte :ref:`tut-match`."

#: ../../tutorial/controlflow.rst:46
msgid ":keyword:`!for` Statements"
msgstr "Instruções :keyword:`!for`"

#: ../../tutorial/controlflow.rst:51
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"A instrução :keyword:`for` em Python difere um pouco do que pode estar "
"habituado em C ou Pascal. Em vez de iterar sempre sobre uma progressão "
"aritmética de números (como em Pascal), ou de dar ao utilizador a capacidade "
"de definir tanto o passo de iteração como a condição de parada (como em C), "
"a instrução :keyword:`!for` do Python itera sobre os itens de qualquer "
"sequência (uma lista ou uma string), pela ordem em que aparecem na "
"sequência. Por exemplo (sem trocadilhos):"

#: ../../tutorial/controlflow.rst:63
msgid ""
">>> # Measure some strings:\n"
">>> words = ['cat', 'window', 'defenestrate']\n"
">>> for w in words:\n"
"...     print(w, len(w))\n"
"...\n"
"cat 3\n"
"window 6\n"
"defenestrate 12"
msgstr ""
">>> # Medir algumas strings:\n"
">>> palavras = ['gato', 'janela', 'defenestrar']\n"
">>> for p in palavras:\n"
"...     print(p, len(p))\n"
"...\n"
"gato 4\n"
"janela 6\n"
"defenestrar 10"

#: ../../tutorial/controlflow.rst:72
msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to "
"loop over a copy of the collection or to create a new collection::"
msgstr ""
"O código que modifica uma coleção enquanto itera sobre essa mesma coleção "
"pode ser complicado de acertar. Em vez disso, é geralmente mais simples "
"iterar sobre uma cópia da coleção ou criar uma nova coleção:"

#: ../../tutorial/controlflow.rst:76
msgid ""
"# Create a sample collection\n"
"users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}\n"
"\n"
"# Strategy:  Iterate over a copy\n"
"for user, status in users.copy().items():\n"
"    if status == 'inactive':\n"
"        del users[user]\n"
"\n"
"# Strategy:  Create a new collection\n"
"active_users = {}\n"
"for user, status in users.items():\n"
"    if status == 'active':\n"
"        active_users[user] = status"
msgstr ""
"# Criar uma coleção de exemplo\n"
"utilizadores = {'Hans': 'ativo', 'Éléonore': 'inativo', '景太郎': 'ativo'}\n"
"\n"
"# Estratégia: Iterar sobre uma cópia\n"
"for utilizador, estado in utilizadores.copy().items():\n"
"    if estado == 'inativo':\n"
"        del utilizadores[utilizador]\n"
"\n"
"# Estratégia: Criar uma nova coleção\n"
"utilizadores_ativos = {}\n"
"for utilizador, estado in utilizadores.items():\n"
"    if estado == 'ativo':\n"
"        utilizadores_ativos[utilizador] = estado"

#: ../../tutorial/controlflow.rst:94
msgid "The :func:`range` Function"
msgstr "A função :func:`range`"

#: ../../tutorial/controlflow.rst:96
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Se precisar de iterar sobre uma sequência de números, a função incorporada :"
"func:`range` é útil. Ela gera progressões aritméticas:"

#: ../../tutorial/controlflow.rst:99
msgid ""
">>> for i in range(5):\n"
"...     print(i)\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4"
msgstr ""
">>> for i in range(5):\n"
"...     print(i)\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4"

#: ../../tutorial/controlflow.rst:108
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"O ponto final dado nunca faz parte da sequência gerada; ``range(10)`` gera "
"10 valores, os índices legais para itens de uma sequência de comprimento 10. "
"É possível fazer com que a gama comece noutro número, ou especificar um "
"incremento diferente (até negativo; por vezes isto é chamado de 'passo'):"

#: ../../tutorial/controlflow.rst:113
msgid ""
">>> list(range(5, 10))\n"
"[5, 6, 7, 8, 9]\n"
"\n"
">>> list(range(0, 10, 3))\n"
"[0, 3, 6, 9]\n"
"\n"
">>> list(range(-10, -100, -30))\n"
"[-10, -40, -70]"
msgstr ""
">>> list(range(5, 10))\n"
"[5, 6, 7, 8, 9]\n"
"\n"
">>> list(range(0, 10, 3))\n"
"[0, 3, 6, 9]\n"
"\n"
">>> list(range(-10, -100, -30))\n"
"[-10, -40, -70]"

#: ../../tutorial/controlflow.rst:122
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"Para iterar sobre os índices de uma sequência, pode combinar :func:`range` "
"e :func:`len` da seguinte forma:"

#: ../../tutorial/controlflow.rst:125
msgid ""
">>> a = ['Mary', 'had', 'a', 'little', 'lamb']\n"
">>> for i in range(len(a)):\n"
"...     print(i, a[i])\n"
"...\n"
"0 Mary\n"
"1 had\n"
"2 a\n"
"3 little\n"
"4 lamb"
msgstr ""
">>> a = ['Maria', 'tinha', 'um', 'pequeno', 'carneiro']\n"
">>> for i in range(len(a)):\n"
"...     print(i, a[i])\n"
"...\n"
"0 Maria\n"
"1 tinha\n"
"2 um\n"
"3 pequeno\n"
"4 carneiro"

#: ../../tutorial/controlflow.rst:135
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"Na maioria destes casos, no entanto, é conveniente usar a função :func:"
"`enumerate`, consulte :ref:`tut-loopidioms`."

#: ../../tutorial/controlflow.rst:138
msgid "A strange thing happens if you just print a range::"
msgstr "Acontece uma coisa estranha se simplesmente imprimir uma gama:"

#: ../../tutorial/controlflow.rst:140
msgid ""
">>> range(10)\n"
"range(0, 10)"
msgstr ""
">>> range(10)\n"
"range(0, 10)"

#: ../../tutorial/controlflow.rst:143
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"De muitas formas, o objeto devolvido por :func:`range` comporta-se como se "
"fosse uma lista, mas na verdade não é. É um objeto que devolve os itens "
"sucessivos da sequência desejada quando itera sobre ele, mas não cria "
"realmente a lista, poupando assim espaço."

#: ../../tutorial/controlflow.rst:148
msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the :"
"keyword:`for` statement is such a construct, while an example of a function "
"that takes an iterable is :func:`sum`::"
msgstr ""
"Dizemos que tal objeto é :term:`iterável`, ou seja, adequado como alvo para "
"funções e construções que esperam algo de que possam obter itens sucessivos "
"até que o fornecimento se esgote. Vimos que a instrução :keyword:`for` é uma "
"tal construção, enquanto um exemplo de uma função que aceita um iterável é :"
"func:`sum`:"

#: ../../tutorial/controlflow.rst:154
msgid ""
">>> sum(range(4))  # 0 + 1 + 2 + 3\n"
"6"
msgstr ""
">>> sum(range(4))  # 0 + 1 + 2 + 3\n"
"6"

#: ../../tutorial/controlflow.rst:157
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"arguments.  In chapter :ref:`tut-structures`, we will discuss in more detail "
"about :func:`list`."
msgstr ""
"Mais tarde veremos mais funções que devolvem iteráveis e aceitam iteráveis "
"como argumentos. No capítulo :ref:`tut-structures`, discutiremos com mais "
"detalhe sobre :func:`list`."

#: ../../tutorial/controlflow.rst:164
msgid ":keyword:`!break` and :keyword:`!continue` Statements"
msgstr "Instruções :keyword:`!break` e :keyword:`!continue`"

#: ../../tutorial/controlflow.rst:166
msgid ""
"The :keyword:`break` statement breaks out of the innermost enclosing :"
"keyword:`for` or :keyword:`while` loop::"
msgstr ""
"A instrução :keyword:`break` sai do ciclo :keyword:`for` ou :keyword:`while` "
"mais interno:"

#: ../../tutorial/controlflow.rst:169
msgid ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(f\"{n} equals {x} * {n//x}\")\n"
"...             break\n"
"...\n"
"4 equals 2 * 2\n"
"6 equals 2 * 3\n"
"8 equals 2 * 4\n"
"9 equals 3 * 3"
msgstr ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(f\"{n} é igual a {x} * {n//x}\")\n"
"...             break\n"
"...\n"
"4 é igual a 2 * 2\n"
"6 é igual a 2 * 3\n"
"8 é igual a 2 * 4\n"
"9 é igual a 3 * 3"

#: ../../tutorial/controlflow.rst:180
msgid ""
"The :keyword:`continue` statement continues with the next iteration of the "
"loop::"
msgstr ""
"A instrução :keyword:`continue` continua com a próxima iteração do ciclo:"

#: ../../tutorial/controlflow.rst:183
msgid ""
">>> for num in range(2, 10):\n"
"...     if num % 2 == 0:\n"
"...         print(f\"Found an even number {num}\")\n"
"...         continue\n"
"...     print(f\"Found an odd number {num}\")\n"
"...\n"
"Found an even number 2\n"
"Found an odd number 3\n"
"Found an even number 4\n"
"Found an odd number 5\n"
"Found an even number 6\n"
"Found an odd number 7\n"
"Found an even number 8\n"
"Found an odd number 9"
msgstr ""
">>> for num in range(2, 10):\n"
"...     if num % 2 == 0:\n"
"...         print(f\"Encontrei um número par {num}\")\n"
"...         continue\n"
"...     print(f\"Encontrei um número ímpar {num}\")\n"
"...\n"
"Encontrei um número par 2\n"
"Encontrei um número ímpar 3\n"
"Encontrei um número par 4\n"
"Encontrei um número ímpar 5\n"
"Encontrei um número par 6\n"
"Encontrei um número ímpar 7\n"
"Encontrei um número par 8\n"
"Encontrei um número ímpar 9"

#: ../../tutorial/controlflow.rst:202
msgid ":keyword:`!else` Clauses on Loops"
msgstr "Cláusulas :keyword:`!else` em ciclos"

#: ../../tutorial/controlflow.rst:204
msgid ""
"In a :keyword:`!for` or :keyword:`!while` loop the :keyword:`!break` "
"statement may be paired with an :keyword:`!else` clause.  If the loop "
"finishes without executing the :keyword:`!break`, the :keyword:`!else` "
"clause executes."
msgstr ""
"Num ciclo :keyword:`!for` ou :keyword:`!while`, a instrução :keyword:`!"
"break` pode ser emparelhada com uma cláusula :keyword:`!else`. Se o ciclo "
"terminar sem executar o :keyword:`!break`, a cláusula :keyword:`!else` é "
"executada."

#: ../../tutorial/controlflow.rst:208
msgid ""
"In a :keyword:`for` loop, the :keyword:`!else` clause is executed after the "
"loop finishes its final iteration, that is, if no break occurred."
msgstr ""
"Num ciclo :keyword:`for`, a cláusula :keyword:`!else` é executada após o "
"ciclo terminar a sua última iteração, ou seja, se não ocorreu nenhum break."

#: ../../tutorial/controlflow.rst:211
msgid ""
"In a :keyword:`while` loop, it's executed after the loop's condition becomes "
"false."
msgstr ""
"Num ciclo :keyword:`while`, é executada após a condição do ciclo se tornar "
"falsa."

#: ../../tutorial/controlflow.rst:213
msgid ""
"In either kind of loop, the :keyword:`!else` clause is **not** executed if "
"the loop was terminated by a :keyword:`break`.  Of course, other ways of "
"ending the loop early, such as a :keyword:`return` or a raised exception, "
"will also skip execution of the :keyword:`else` clause."
msgstr ""
"Em qualquer tipo de ciclo, a cláusula :keyword:`!else` **não** é executada "
"se o ciclo foi terminado por um :keyword:`break`. Claro, outras formas de "
"terminar o ciclo prematuramente, como um :keyword:`return` ou uma exceção "
"levantada, também ignorarão a execução da cláusula :keyword:`else`."

#: ../../tutorial/controlflow.rst:218
msgid ""
"This is exemplified in the following :keyword:`!for` loop, which searches "
"for prime numbers::"
msgstr ""
"Isto é exemplificado no seguinte ciclo :keyword:`!for`, que procura números "
"primos:"

#: ../../tutorial/controlflow.rst:221
msgid ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(n, 'equals', x, '*', n//x)\n"
"...             break\n"
"...     else:\n"
"...         # loop fell through without finding a factor\n"
"...         print(n, 'is a prime number')\n"
"...\n"
"2 is a prime number\n"
"3 is a prime number\n"
"4 equals 2 * 2\n"
"5 is a prime number\n"
"6 equals 2 * 3\n"
"7 is a prime number\n"
"8 equals 2 * 4\n"
"9 equals 3 * 3"
msgstr ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(n, 'é igual a', x, '*', n//x)\n"
"...             break\n"
"...     else:\n"
"...         # o ciclo terminou sem encontrar um fator\n"
"...         print(n, 'é um número primo')\n"
"...\n"
"2 é um número primo\n"
"3 é um número primo\n"
"4 é igual a 2 * 2\n"
"5 é um número primo\n"
"6 é igual a 2 * 3\n"
"7 é um número primo\n"
"8 é igual a 2 * 4\n"
"9 é igual a 3 * 3"

#: ../../tutorial/controlflow.rst:239
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the ``for`` loop, **not** the ``if`` statement.)"
msgstr ""
"(Sim, este é o código correto. Olhe com atenção: a cláusula ``else`` "
"pertence ao ciclo ``for``, **não** à instrução ``if``.)"

#: ../../tutorial/controlflow.rst:242
msgid ""
"One way to think of the else clause is to imagine it paired with the ``if`` "
"inside the loop.  As the loop executes, it will run a sequence like if/if/if/"
"else. The ``if`` is inside the loop, encountered a number of times. If the "
"condition is ever true, a ``break`` will happen. If the condition is never "
"true, the ``else`` clause outside the loop will execute."
msgstr ""
"Uma forma de pensar na cláusula else é imaginá-la emparelhada com o ``if`` "
"dentro do ciclo. À medida que o ciclo executa, irá executar uma sequência "
"como if/if/if/else. O ``if`` está dentro do ciclo, encontrado várias vezes. "
"Se a condição for alguma vez verdadeira, um ``break`` irá acontecer. Se a "
"condição nunca for verdadeira, a cláusula ``else`` fora do ciclo será "
"executada."

#: ../../tutorial/controlflow.rst:248
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of "
"``if`` statements: a ``try`` statement's ``else`` clause runs when no "
"exception occurs, and a loop's ``else`` clause runs when no ``break`` "
"occurs. For more on the ``try`` statement and exceptions, see :ref:`tut-"
"handling`."
msgstr ""
"Quando usado com um ciclo, a cláusula ``else`` tem mais em comum com a "
"cláusula ``else`` de uma instrução :keyword:`try` do que com a das "
"instruções ``if``: a cláusula ``else`` de uma instrução ``try`` executa "
"quando nenhuma exceção ocorre, e a cláusula ``else`` de um ciclo executa "
"quando nenhum ``break`` ocorre. Para mais informações sobre a instrução "
"``try`` e exceções, consulte :ref:`tut-handling`."

#: ../../tutorial/controlflow.rst:258
msgid ":keyword:`!pass` Statements"
msgstr "Instruções :keyword:`!pass`"

#: ../../tutorial/controlflow.rst:260
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"A instrução :keyword:`pass` não faz nada. Pode ser usada quando uma "
"instrução é necessária sintaticamente, mas o programa não requer nenhuma "
"ação. Por exemplo:"

#: ../../tutorial/controlflow.rst:263
msgid ""
">>> while True:\n"
"...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)\n"
"..."
msgstr ""
">>> while True:\n"
"...     pass  # Espera ativa por interrupção de teclado (Ctrl+C)\n"
"..."

#: ../../tutorial/controlflow.rst:267
msgid "This is commonly used for creating minimal classes::"
msgstr "Isto é comumente usado para criar classes mínimas:"

#: ../../tutorial/controlflow.rst:269
msgid ""
">>> class MyEmptyClass:\n"
"...     pass\n"
"..."
msgstr ""
">>> class MinhaClasseVazia:\n"
"...     pass\n"
"..."

#: ../../tutorial/controlflow.rst:273
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"Outro local onde :keyword:`pass` pode ser usado é como um espaço reservado "
"para o corpo de uma função ou condicional quando está a trabalhar em novo "
"código, permitindo-lhe continuar a pensar a um nível mais abstrato. O :"
"keyword:`!pass` é ignorado silenciosamente:"

#: ../../tutorial/controlflow.rst:277
msgid ""
">>> def initlog(*args):\n"
"...     pass   # Remember to implement this!\n"
"..."
msgstr ""
">>> def initlog(*args):\n"
"...     pass   # Lembre-se de implementar isto!\n"
"..."

#: ../../tutorial/controlflow.rst:281
msgid ""
"For this last case, many people use the ellipsis literal :code:`...` instead "
"of :code:`pass`. This use has no special meaning to Python, and is not part "
"of the language definition (you could use any constant expression here), "
"but :code:`...` is used conventionally as a placeholder body as well. See :"
"ref:`bltin-ellipsis-object`."
msgstr ""
"Para este último caso, muitas pessoas usam o literal de reticências :code:"
"`...` em vez de :code:`pass`. Este uso não tem significado especial para o "
"Python, e não faz parte da definição da linguagem (poderia usar qualquer "
"expressão constante aqui), mas :code:`...` é usado convencionalmente como um "
"corpo de espaço reservado. Consulte :ref:`bltin-ellipsis-object`."

#: ../../tutorial/controlflow.rst:291
msgid ":keyword:`!match` Statements"
msgstr "Instruções :keyword:`!match`"

#: ../../tutorial/controlflow.rst:293
msgid ""
"A :keyword:`match` statement takes an expression and compares its value to "
"successive patterns given as one or more case blocks.  This is superficially "
"similar to a switch statement in C, Java or JavaScript (and many other "
"languages), but it's more similar to pattern matching in languages like Rust "
"or Haskell. Only the first pattern that matches gets executed and it can "
"also extract components (sequence elements or object attributes) from the "
"value into variables."
msgstr ""

#: ../../tutorial/controlflow.rst:301
msgid ""
"The simplest form compares a subject value against one or more literals::"
msgstr ""
"A forma mais simples compara um valor de assunto com um ou mais literais:"

#: ../../tutorial/controlflow.rst:303
msgid ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\"\n"
"        case _:\n"
"            return \"Something's wrong with the internet\""
msgstr ""
"def http_error(estado):\n"
"    match estado:\n"
"        case 400:\n"
"            return \"Pedido inválido\"\n"
"        case 404:\n"
"            return \"Não encontrado\"\n"
"        case 418:\n"
"            return \"Sou uma chaleira\"\n"
"        case _:\n"
"            return \"Algo está errado com a internet\""

#: ../../tutorial/controlflow.rst:314
msgid ""
"Note the last block: the \"variable name\" ``_`` acts as a *wildcard* and "
"never fails to match. If no case matches, none of the branches is executed."
msgstr ""

#: ../../tutorial/controlflow.rst:317
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr "Pode combinar vários literais num único padrão usando ``|`` (\"ou\"):"

#: ../../tutorial/controlflow.rst:319
msgid ""
"case 401 | 403 | 404:\n"
"    return \"Not allowed\""
msgstr ""
"case 401 | 403 | 404:\n"
"    return \"Não permitido\""

#: ../../tutorial/controlflow.rst:322
msgid ""
"Patterns can look like unpacking assignments, and can be used to bind "
"variables::"
msgstr ""
"Os padrões podem parecer atribuições de desempacotamento e podem ser usados "
"para ligar variáveis:"

#: ../../tutorial/controlflow.rst:325
msgid ""
"# point is an (x, y) tuple\n"
"match point:\n"
"    case (0, 0):\n"
"        print(\"Origin\")\n"
"    case (0, y):\n"
"        print(f\"Y={y}\")\n"
"    case (x, 0):\n"
"        print(f\"X={x}\")\n"
"    case (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    case _:\n"
"        raise ValueError(\"Not a point\")"
msgstr ""
"# ponto é um tuplo (x, y)\n"
"match ponto:\n"
"    case (0, 0):\n"
"        print(\"Origem\")\n"
"    case (0, y):\n"
"        print(f\"Y={y}\")\n"
"    case (x, 0):\n"
"        print(f\"X={x}\")\n"
"    case (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    case _:\n"
"        raise ValueError(\"Não é um ponto\")"

#: ../../tutorial/controlflow.rst:338
msgid ""
"Study that one carefully!  The first pattern has two literals, and can be "
"thought of as an extension of the literal pattern shown above.  But the next "
"two patterns combine a literal and a variable, and the variable *binds* a "
"value from the subject (``point``).  The fourth pattern captures two values, "
"which makes it conceptually similar to the unpacking assignment ``(x, y) = "
"point``."
msgstr ""
"Estude este exemplo com cuidado! O primeiro padrão tem dois literais e pode "
"ser pensado como uma extensão do padrão literal mostrado acima. Mas os dois "
"padrões seguintes combinam um literal e uma variável, e a variável *liga* um "
"valor do assunto (``point``). O quarto padrão captura dois valores, o que o "
"torna conceitualmente semelhante à atribuição de desempacotamento ``(x, y) = "
"point``."

#: ../../tutorial/controlflow.rst:345
msgid ""
"If you are using classes to structure your data you can use the class name "
"followed by an argument list resembling a constructor, but with the ability "
"to capture attributes into variables::"
msgstr ""
"Se estiver a usar classes para estruturar os seus dados, pode usar o nome da "
"classe seguido de uma lista de argumentos semelhante a um construtor, mas "
"com a capacidade de capturar atributos em variáveis:"

#: ../../tutorial/controlflow.rst:349
msgid ""
"class Point:\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"def where_is(point):\n"
"    match point:\n"
"        case Point(x=0, y=0):\n"
"            print(\"Origin\")\n"
"        case Point(x=0, y=y):\n"
"            print(f\"Y={y}\")\n"
"        case Point(x=x, y=0):\n"
"            print(f\"X={x}\")\n"
"        case Point():\n"
"            print(\"Somewhere else\")\n"
"        case _:\n"
"            print(\"Not a point\")"
msgstr ""
"class Ponto:\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"def onde_esta(ponto):\n"
"    match ponto:\n"
"        case Ponto(x=0, y=0):\n"
"            print(\"Origem\")\n"
"        case Ponto(x=0, y=y):\n"
"            print(f\"Y={y}\")\n"
"        case Ponto(x=x, y=0):\n"
"            print(f\"X={x}\")\n"
"        case Ponto():\n"
"            print(\"Noutro lugar\")\n"
"        case _:\n"
"            print(\"Não é um ponto\")"

#: ../../tutorial/controlflow.rst:367
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"Pode usar parâmetros posicionais com algumas classes incorporadas que "
"fornecem uma ordenação para os seus atributos (por exemplo, dataclasses). "
"Também pode definir uma posição específica para atributos em padrões "
"definindo o atributo especial ``__match_args__`` nas suas classes. Se "
"estiver definido para (\"x\", \"y\"), os seguintes padrões são todos "
"equivalentes (e todos ligam o atributo ``y`` à variável ``var``):"

#: ../../tutorial/controlflow.rst:373
msgid ""
"Point(1, var)\n"
"Point(1, y=var)\n"
"Point(x=1, y=var)\n"
"Point(y=var, x=1)"
msgstr ""
"Ponto(1, var)\n"
"Ponto(1, y=var)\n"
"Ponto(x=1, y=var)\n"
"Ponto(y=var, x=1)"

#: ../../tutorial/controlflow.rst:378
msgid ""
"A recommended way to read patterns is to look at them as an extended form of "
"what you would put on the left of an assignment, to understand which "
"variables would be set to what. Only the standalone names (like ``var`` "
"above) are assigned to by a match statement. Dotted names (like ``foo."
"bar``), attribute names (the ``x=`` and ``y=`` above) or class names "
"(recognized by the \"(...)\" next to them like ``Point`` above) are never "
"assigned to."
msgstr ""
"Uma forma recomendada de ler padrões é olhá-los como uma forma estendida do "
"que colocaria à esquerda de uma atribuição, para entender quais variáveis "
"seriam definidas para o quê. Apenas os nomes autónomos (como ``var`` acima) "
"são atribuídos por uma instrução de correspondência. Nomes com pontos (como "
"``foo.bar``), nomes de atributos (os ``x=`` e ``y=`` acima) ou nomes de "
"classes (reconhecidos pelo \"(...)\" ao lado deles como ``Point`` acima) "
"nunca são atribuídos."

#: ../../tutorial/controlflow.rst:385
msgid ""
"Patterns can be arbitrarily nested.  For example, if we have a short list of "
"Points, with ``__match_args__`` added, we could match it like this::"
msgstr ""
"Os padrões podem ser aninhados arbitrariamente. Por exemplo, se tivermos uma "
"lista curta de Pontos, com ``__match_args__`` adicionado, poderíamos "
"correspondê-la assim:"

#: ../../tutorial/controlflow.rst:388
msgid ""
"class Point:\n"
"    __match_args__ = ('x', 'y')\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"match points:\n"
"    case []:\n"
"        print(\"No points\")\n"
"    case [Point(0, 0)]:\n"
"        print(\"The origin\")\n"
"    case [Point(x, y)]:\n"
"        print(f\"Single point {x}, {y}\")\n"
"    case [Point(0, y1), Point(0, y2)]:\n"
"        print(f\"Two on the Y axis at {y1}, {y2}\")\n"
"    case _:\n"
"        print(\"Something else\")"
msgstr ""
"class Ponto:\n"
"    __match_args__ = ('x', 'y')\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"match pontos:\n"
"    case []:\n"
"        print(\"Sem pontos\")\n"
"    case [Ponto(0, 0)]:\n"
"        print(\"A origem\")\n"
"    case [Ponto(x, y)]:\n"
"        print(f\"Ponto único {x}, {y}\")\n"
"    case [Ponto(0, y1), Ponto(0, y2)]:\n"
"        print(f\"Dois no eixo Y em {y1}, {y2}\")\n"
"    case _:\n"
"        print(\"Outra coisa\")"

#: ../../tutorial/controlflow.rst:406
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"Podemos adicionar uma cláusula ``if`` a um padrão, conhecida como uma "
"\"guarda\". Se a guarda for falsa, ``match`` passa a tentar o próximo bloco "
"de caso. Note que a captura de valor acontece antes da guarda ser avaliada:"

#: ../../tutorial/controlflow.rst:410
msgid ""
"match point:\n"
"    case Point(x, y) if x == y:\n"
"        print(f\"Y=X at {x}\")\n"
"    case Point(x, y):\n"
"        print(f\"Not on the diagonal\")"
msgstr ""
"match ponto:\n"
"    case Ponto(x, y) if x == y:\n"
"        print(f\"Y=X em {x}\")\n"
"    case Ponto(x, y):\n"
"        print(f\"Não está na diagonal\")"

#: ../../tutorial/controlflow.rst:416
msgid "Several other key features of this statement:"
msgstr "Várias outras características importantes desta instrução:"

#: ../../tutorial/controlflow.rst:418
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences.  An important exception is "
"that they don't match iterators or strings."
msgstr ""
"Tal como as atribuições de desempacotamento, os padrões de tuplo e lista têm "
"exatamente o mesmo significado e correspondem efetivamente a sequências "
"arbitrárias. Uma exceção importante é que não correspondem a iteradores ou "
"strings."

#: ../../tutorial/controlflow.rst:422
msgid ""
"Sequence patterns support extended unpacking: ``[x, y, *rest]`` and ``(x, y, "
"*rest)`` work similar to unpacking assignments.  The name after ``*`` may "
"also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two items "
"without binding the remaining items."
msgstr ""
"Os padrões de sequência suportam descompactação estendida: ``[x, y, *rest]`` "
"e ``(x, y, *rest)`` funcionam de forma semelhante às atribuições de "
"descompactação. O nome após ``*`` também pode ser ``_``, portanto, ``(x, y, "
"*_)`` corresponde a uma sequência de pelo menos dois itens sem vincular os "
"itens restantes."

#: ../../tutorial/controlflow.rst:427
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dictionary.  Unlike "
"sequence patterns, extra keys are ignored.  An unpacking like ``**rest`` is "
"also supported.  (But ``**_`` would be redundant, so it is not allowed.)"
msgstr ""
"Padrões de mapeamento: ``{\"bandwidth\": b, \"latency\": l}`` captura os "
"valores ``\"bandwidth\"`` e ``\"latency\"`` de um dicionário. Ao contrário "
"dos padrões de sequência, as chaves extra são ignoradas. Um desempacotamento "
"como ``**rest`` também é suportado. (Mas ``**_`` seria redundante, por isso "
"não é permitido.)"

#: ../../tutorial/controlflow.rst:432
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "Subpadrões podem ser capturados usando a palavra-chave ``as``:"

#: ../../tutorial/controlflow.rst:434
msgid "case (Point(x1, y1), Point(x2, y2) as p2): ..."
msgstr "case (Ponto(x1, y1), Ponto(x2, y2) as p2): ..."

#: ../../tutorial/controlflow.rst:436
msgid ""
"will capture the second element of the input as ``p2`` (as long as the input "
"is a sequence of two points)"
msgstr ""
"capturará o segundo elemento da entrada como ``p2`` (desde que a entrada "
"seja uma sequência de dois pontos)"

#: ../../tutorial/controlflow.rst:439
msgid ""
"Most literals are compared by equality, however the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"A maioria dos literais são comparados por igualdade, no entanto, os "
"singletons ``True``, ``False`` e ``None`` são comparados por identidade."

#: ../../tutorial/controlflow.rst:442
msgid ""
"Patterns may use named constants.  These must be dotted names to prevent "
"them from being interpreted as capture variable::"
msgstr ""
"Os padrões podem usar constantes nomeadas. Estas devem ser nomes com pontos "
"para evitar que sejam interpretadas como variáveis de captura:"

#: ../../tutorial/controlflow.rst:445
msgid ""
"from enum import Enum\n"
"class Color(Enum):\n"
"    RED = 'red'\n"
"    GREEN = 'green'\n"
"    BLUE = 'blue'\n"
"\n"
"color = Color(input(\"Enter your choice of 'red', 'blue' or 'green': \"))\n"
"\n"
"match color:\n"
"    case Color.RED:\n"
"        print(\"I see red!\")\n"
"    case Color.GREEN:\n"
"        print(\"Grass is green\")\n"
"    case Color.BLUE:\n"
"        print(\"I'm feeling the blues :(\")"
msgstr ""
"from enum import Enum\n"
"class Cor(Enum):\n"
"    VERMELHO = 'vermelho'\n"
"    VERDE = 'verde'\n"
"    AZUL = 'azul'\n"
"\n"
"cor = Cor(input(\"Introduza a sua escolha de 'vermelho', 'azul' ou 'verde': "
"\"))\n"
"\n"
"match cor:\n"
"    case Cor.VERMELHO:\n"
"        print(\"Vejo vermelho!\")\n"
"    case Cor.VERDE:\n"
"        print(\"A relva é verde\")\n"
"    case Cor.AZUL:\n"
"        print(\"Estou a sentir-me triste :(\")"

#: ../../tutorial/controlflow.rst:461
msgid ""
"For a more detailed explanation and additional examples, you can look into :"
"pep:`636` which is written in a tutorial format."
msgstr ""
"Para uma explicação mais detalhada e exemplos adicionais, pode consultar :"
"pep:`636`, que está escrito num formato de tutorial."

#: ../../tutorial/controlflow.rst:467
msgid "Defining Functions"
msgstr "Definição de funções"

#: ../../tutorial/controlflow.rst:469
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Podemos criar uma função que escreve a série de Fibonacci até um limite "
"arbitrário:"

#: ../../tutorial/controlflow.rst:472
msgid ""
">>> def fib(n):    # write Fibonacci series less than n\n"
"...     \"\"\"Print a Fibonacci series less than n.\"\"\"\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         print(a, end=' ')\n"
"...         a, b = b, a+b\n"
"...     print()\n"
"...\n"
">>> # Now call the function we just defined:\n"
">>> fib(2000)\n"
"0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597"
msgstr ""
">>> def fib(n):    # escreve a série de Fibonacci menor que n\n"
"...     \"\"\"Imprime uma série de Fibonacci menor que n.\"\"\"\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         print(a, end=' ')\n"
"...         a, b = b, a+b\n"
"...     print()\n"
"...\n"
">>> # Agora chama a função que acabámos de definir:\n"
">>> fib(2000)\n"
"0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597"

#: ../../tutorial/controlflow.rst:489
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"A palavra-chave :keyword:`def` introduz uma *definição de função*. Deve ser "
"seguida pelo nome da função e pela lista de parâmetros formais entre "
"parênteses. As instruções que formam o corpo da função começam na linha "
"seguinte e devem ser indentadas."

#: ../../tutorial/controlflow.rst:494
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"A primeira instrução do corpo da função pode, opcionalmente, ser um literal "
"de string; este literal de string é a string de documentação da função, ou :"
"dfn:`docstring`. (Mais sobre docstrings pode ser encontrado na secção :ref:"
"`tut-docstrings`.) Existem ferramentas que usam docstrings para produzir "
"automaticamente documentação online ou impressa, ou para permitir que o "
"utilizador navegue interativamente pelo código; é uma boa prática incluir "
"docstrings no código que escreve, por isso faça disso um hábito."

#: ../../tutorial/controlflow.rst:501
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"A *execução* de uma função introduz uma nova tabela de símbolos usada para "
"as variáveis locais da função. Mais precisamente, todas as atribuições de "
"variáveis numa função armazenam o valor na tabela de símbolos local; "
"enquanto as referências a variáveis procuram primeiro na tabela de símbolos "
"local, depois nas tabelas de símbolos locais de funções envolventes, depois "
"na tabela de símbolos global, e finalmente na tabela de nomes incorporados. "
"Assim, variáveis globais e variáveis de funções envolventes não podem ser "
"diretamente atribuídas com um valor dentro de uma função (a menos que, para "
"variáveis globais, sejam nomeadas numa instrução :keyword:`global`, ou, para "
"variáveis de funções envolventes, sejam nomeadas numa instrução :keyword:"
"`nonlocal`), embora possam ser referenciadas."

#: ../../tutorial/controlflow.rst:512
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, or calls itself recursively, a new local symbol table is "
"created for that call."
msgstr ""
"Os parâmetros reais (argumentos) de uma chamada de função são introduzidos "
"na tabela de símbolos local da função chamada quando esta é chamada; assim, "
"os argumentos são passados usando *passagem por valor* (onde o *valor* é "
"sempre uma *referência de objeto*, não o valor do objeto). [#]_ Quando uma "
"função chama outra função, ou se chama a si mesma recursivamente, uma nova "
"tabela de símbolos local é criada para essa chamada."

#: ../../tutorial/controlflow.rst:519
msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"Uma definição de função associa o nome da função ao objeto função na tabela "
"de símbolos atual. O interpretador reconhece o objeto apontado por esse nome "
"como uma função definida pelo utilizador. Outros nomes também podem apontar "
"para esse mesmo objeto função e também podem ser usados para aceder à função:"

#: ../../tutorial/controlflow.rst:524
msgid ""
">>> fib\n"
"<function fib at 10042ed0>\n"
">>> f = fib\n"
">>> f(100)\n"
"0 1 1 2 3 5 8 13 21 34 55 89"
msgstr ""
">>> fib\n"
"<function fib at 10042ed0>\n"
">>> f = fib\n"
">>> f(100)\n"
"0 1 1 2 3 5 8 13 21 34 55 89"

#: ../../tutorial/controlflow.rst:530
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"Vindo de outras linguagens, pode objetar que ``fib`` não é uma função, mas "
"sim um procedimento, já que não devolve um valor. Na verdade, mesmo funções "
"sem uma instrução :keyword:`return` devolvem um valor, embora seja um valor "
"bastante aborrecido. Este valor chama-se ``None`` (é um nome incorporado). "
"Escrever o valor ``None`` é normalmente suprimido pelo interpretador se "
"fosse o único valor a ser escrito. Pode vê-lo se realmente quiser, usando :"
"func:`print`:"

#: ../../tutorial/controlflow.rst:537
msgid ""
">>> fib(0)\n"
">>> print(fib(0))\n"
"None"
msgstr ""
">>> fib(0)\n"
">>> print(fib(0))\n"
"None"

#: ../../tutorial/controlflow.rst:541
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"É simples escrever uma função que devolve uma lista dos números da série de "
"Fibonacci, em vez de a imprimir:"

#: ../../tutorial/controlflow.rst:544
msgid ""
">>> def fib2(n):  # return Fibonacci series up to n\n"
"...     \"\"\"Return a list containing the Fibonacci series up to n.\"\"\"\n"
"...     result = []\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         result.append(a)    # see below\n"
"...         a, b = b, a+b\n"
"...     return result\n"
"...\n"
">>> f100 = fib2(100)    # call it\n"
">>> f100                # write the result\n"
"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"
msgstr ""
">>> def fib2(n):  # devolve a série de Fibonacci até n\n"
"...     \"\"\"Devolve uma lista contendo a série de Fibonacci até n.\"\"\"\n"
"...     resultado = []\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         resultado.append(a)    # veja abaixo\n"
"...         a, b = b, a+b\n"
"...     return resultado\n"
"...\n"
">>> f100 = fib2(100)    # chama-a\n"
">>> f100                # escreve o resultado\n"
"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"

#: ../../tutorial/controlflow.rst:557
msgid "This example, as usual, demonstrates some new Python features:"
msgstr ""
"Este exemplo, como de costume, demonstra algumas novas funcionalidades do "
"Python:"

#: ../../tutorial/controlflow.rst:559
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"A instrução :keyword:`return` devolve um valor de uma função. :keyword:`!"
"return` sem um argumento de expressão devolve ``None``. Chegar ao fim de uma "
"função também devolve ``None``."

#: ../../tutorial/controlflow.rst:563
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`~list.append` shown in the example is "
"defined for list objects; it adds a new element at the end of the list.  In "
"this example it is equivalent to ``result = result + [a]``, but more "
"efficient."
msgstr ""
"A instrução ``result.append(a)`` chama um *método* do objeto lista "
"``result``. Um método é uma função que \"pertence\" a um objeto e é nomeada "
"``obj.methodname``, onde ``obj`` é algum objeto (pode ser uma expressão) e "
"``methodname`` é o nome de um método definido pelo tipo do objeto. Tipos "
"diferentes definem métodos diferentes. Métodos de tipos diferentes podem ter "
"o mesmo nome sem causar ambiguidade. (É possível definir seus próprios tipos "
"de objetos e métodos, usando *classes*, consulte :ref:`tut-classes`) O "
"método :meth:`~list.append` mostrado no exemplo é definido para objetos de "
"lista; ele adiciona um novo elemento ao final da lista. Neste exemplo, é "
"equivalente a ``result = result + [a]``, mas mais eficiente."

#: ../../tutorial/controlflow.rst:578
msgid "More on Defining Functions"
msgstr "Mais sobre a definição de funções"

#: ../../tutorial/controlflow.rst:580
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"Também é possível definir funções com um número variável de argumentos. "
"Existem três formas, que podem ser combinadas."

#: ../../tutorial/controlflow.rst:587
msgid "Default Argument Values"
msgstr "Valores predefinidos de argumentos"

#: ../../tutorial/controlflow.rst:589
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"A forma mais útil é especificar um valor predefinido para um ou mais "
"argumentos. Isto cria uma função que pode ser chamada com menos argumentos "
"do que os definidos. Por exemplo:"

#: ../../tutorial/controlflow.rst:593
msgid ""
"def ask_ok(prompt, retries=4, reminder='Please try again!'):\n"
"    while True:\n"
"        reply = input(prompt)\n"
"        if reply in {'y', 'ye', 'yes'}:\n"
"            return True\n"
"        if reply in {'n', 'no', 'nop', 'nope'}:\n"
"            return False\n"
"        retries = retries - 1\n"
"        if retries < 0:\n"
"            raise ValueError('invalid user response')\n"
"        print(reminder)"
msgstr ""
"def ask_ok(prompt, tentativas=4, lembrete='Por favor, tente novamente!'):\n"
"    while True:\n"
"        resposta = input(prompt)\n"
"        if resposta in {'s', 'sim', 'ss'}:\n"
"            return True\n"
"        if resposta in {'n', 'nao', 'não', 'nop'}:\n"
"            return False\n"
"        tentativas = tentativas - 1\n"
"        if tentativas < 0:\n"
"            raise ValueError('resposta inválida do utilizador')\n"
"        print(lembrete)"

#: ../../tutorial/controlflow.rst:605
msgid "This function can be called in several ways:"
msgstr "Esta função pode ser chamada de várias formas:"

#: ../../tutorial/controlflow.rst:607
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"apenas com o argumento obrigatório: ``ask_ok('Do you really want to quit?')``"

#: ../../tutorial/controlflow.rst:609
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"com um dos argumentos opcionais: ``ask_ok('OK to overwrite the file?', 2)``"

#: ../../tutorial/controlflow.rst:611
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"ou até com todos os argumentos: ``ask_ok('OK to overwrite the file?', 2, "
"'Come on, only yes or no!')``"

#: ../../tutorial/controlflow.rst:614
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"Este exemplo também introduz a palavra-chave :keyword:`in`. Isto testa se "
"uma sequência contém ou não um certo valor."

#: ../../tutorial/controlflow.rst:617
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Os valores predefinidos são avaliados no momento da definição da função no "
"âmbito *definidor*, de modo que:"

#: ../../tutorial/controlflow.rst:620
msgid ""
"i = 5\n"
"\n"
"def f(arg=i):\n"
"    print(arg)\n"
"\n"
"i = 6\n"
"f()"
msgstr ""
"i = 5\n"
"\n"
"def f(arg=i):\n"
"    print(arg)\n"
"\n"
"i = 6\n"
"f()"

#: ../../tutorial/controlflow.rst:628
msgid "will print ``5``."
msgstr "imprimirá ``5``."

#: ../../tutorial/controlflow.rst:630
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Aviso importante:** O valor predefinido é avaliado apenas uma vez. Isto "
"faz a diferença quando o valor predefinido é um objeto mutável, como uma "
"lista, um dicionário ou instâncias da maioria das classes. Por exemplo, a "
"seguinte função acumula os argumentos passados em chamadas subsequentes:"

#: ../../tutorial/controlflow.rst:635
msgid ""
"def f(a, L=[]):\n"
"    L.append(a)\n"
"    return L\n"
"\n"
"print(f(1))\n"
"print(f(2))\n"
"print(f(3))"
msgstr ""
"def f(a, L=[]):\n"
"    L.append(a)\n"
"    return L\n"
"\n"
"print(f(1))\n"
"print(f(2))\n"
"print(f(3))"

#: ../../tutorial/controlflow.rst:643
msgid "This will print ::"
msgstr "Isto imprimirá:"

#: ../../tutorial/controlflow.rst:645
msgid ""
"[1]\n"
"[1, 2]\n"
"[1, 2, 3]"
msgstr ""
"[1]\n"
"[1, 2]\n"
"[1, 2, 3]"

#: ../../tutorial/controlflow.rst:649
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"Se não quiser que o valor predefinido seja partilhado entre chamadas "
"subsequentes, pode escrever a função assim:"

#: ../../tutorial/controlflow.rst:652
msgid ""
"def f(a, L=None):\n"
"    if L is None:\n"
"        L = []\n"
"    L.append(a)\n"
"    return L"
msgstr ""
"def f(a, L=None):\n"
"    if L is None:\n"
"        L = []\n"
"    L.append(a)\n"
"    return L"

#: ../../tutorial/controlflow.rst:662
msgid "Keyword Arguments"
msgstr "Argumentos nomeados"

#: ../../tutorial/controlflow.rst:664
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"As funções também podem ser chamadas usando :term:`argumentos nomeados "
"<keyword argument>` da forma ``kwarg=value``. Por exemplo, a seguinte função:"

#: ../../tutorial/controlflow.rst:667
msgid ""
"def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):\n"
"    print(\"-- This parrot wouldn't\", action, end=' ')\n"
"    print(\"if you put\", voltage, \"volts through it.\")\n"
"    print(\"-- Lovely plumage, the\", type)\n"
"    print(\"-- It's\", state, \"!\")"
msgstr ""
"def papagaio(tensao, estado='duro', acao='voom', tipo='Papagaio-Norueguês-"
"Azul'):\n"
"    print(\"-- Este papagaio não\", acao, end=' ')\n"
"    print(\"se lhe aplicasse\", tensao, \"volts.\")\n"
"    print(\"-- Lindas penas, o\", tipo)\n"
"    print(\"-- Está\", estado, \"!\")"

#: ../../tutorial/controlflow.rst:673
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"aceita um argumento obrigatório (``voltage``) e três argumentos opcionais "
"(``state``, ``action``, e ``type``). Esta função pode ser chamada de "
"qualquer uma das seguintes formas:"

#: ../../tutorial/controlflow.rst:677
msgid ""
"parrot(1000)                                          # 1 positional "
"argument\n"
"parrot(voltage=1000)                                  # 1 keyword argument\n"
"parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments\n"
"parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments\n"
"parrot('a million', 'bereft of life', 'jump')         # 3 positional "
"arguments\n"
"parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 "
"keyword"
msgstr ""
"papagaio(1000)                                          # 1 argumento "
"posicional\n"
"papagaio(tensao=1000)                                  # 1 argumento "
"nomeado\n"
"papagaio(tensao=1000000, acao='VOOOOOM')             # 2 argumentos "
"nomeados\n"
"papagaio(acao='VOOOOOM', tensao=1000000)             # 2 argumentos "
"nomeados\n"
"papagaio('um milhão', 'sem vida', 'saltar')         # 3 argumentos "
"posicionais\n"
"papagaio('mil', estado='a empurrar margaridas')  # 1 posicional, 1 nomeado"

#: ../../tutorial/controlflow.rst:684
msgid "but all the following calls would be invalid::"
msgstr "mas todas as seguintes chamadas seriam inválidas:"

#: ../../tutorial/controlflow.rst:686
msgid ""
"parrot()                     # required argument missing\n"
"parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword "
"argument\n"
"parrot(110, voltage=220)     # duplicate value for the same argument\n"
"parrot(actor='John Cleese')  # unknown keyword argument"
msgstr ""
"papagaio()                     # falta argumento obrigatório\n"
"papagaio(tensao=5.0, 'morto')  # argumento não nomeado após argumento "
"nomeado\n"
"papagaio(110, tensao=220)     # valor duplicado para o mesmo argumento\n"
"papagaio(ator='John Cleese')  # argumento nomeado desconhecido"

#: ../../tutorial/controlflow.rst:691
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"Numa chamada de função, os argumentos nomeados devem seguir os argumentos "
"posicionais. Todos os argumentos nomeados passados devem corresponder a um "
"dos argumentos aceites pela função (por exemplo, ``actor`` não é um "
"argumento válido para a função ``parrot``), e a sua ordem não é importante. "
"Isto também inclui argumentos não opcionais (por exemplo, "
"``parrot(voltage=1000)`` também é válido). Nenhum argumento pode receber um "
"valor mais do que uma vez. Aqui está um exemplo que falha devido a esta "
"restrição:"

#: ../../tutorial/controlflow.rst:699
msgid ""
">>> def function(a):\n"
"...     pass\n"
"...\n"
">>> function(0, a=0)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: function() got multiple values for argument 'a'"
msgstr ""
">>> def funcao(a):\n"
"...     pass\n"
"...\n"
">>> funcao(0, a=0)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: funcao() recebeu valores múltiplos para o argumento 'a'"

#: ../../tutorial/controlflow.rst:707
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"Quando um parâmetro formal final da forma ``**name`` está presente, recebe "
"um dicionário (consulte :ref:`typesmapping`) contendo todos os argumentos "
"nomeados, exceto aqueles que correspondem a um parâmetro formal. Isto pode "
"ser combinado com um parâmetro formal da forma ``*name`` (descrito na "
"próxima subsecção), que recebe um :ref:`tuplo <tut-tuples>` contendo os "
"argumentos posicionais além da lista de parâmetros formais. (``*name`` deve "
"ocorrer antes de ``**name``.) Por exemplo, se definirmos uma função assim:"

#: ../../tutorial/controlflow.rst:715
msgid ""
"def cheeseshop(kind, *arguments, **keywords):\n"
"    print(\"-- Do you have any\", kind, \"?\")\n"
"    print(\"-- I'm sorry, we're all out of\", kind)\n"
"    for arg in arguments:\n"
"        print(arg)\n"
"    print(\"-\" * 40)\n"
"    for kw in keywords:\n"
"        print(kw, \":\", keywords[kw])"
msgstr ""
"def lojadequeijo(tipo, *argumentos, **palavraschave):\n"
"    print(\"-- Tem algum\", tipo, \"?\")\n"
"    print(\"-- Lamento, mas estamos sem\", tipo)\n"
"    for arg in argumentos:\n"
"        print(arg)\n"
"    print(\"-\" * 40)\n"
"    for kw in palavraschave:\n"
"        print(kw, \":\", palavraschave[kw])"

#: ../../tutorial/controlflow.rst:724
msgid "It could be called like this::"
msgstr "Poderia ser chamada assim:"

#: ../../tutorial/controlflow.rst:726
msgid ""
"cheeseshop(\"Limburger\", \"It's very runny, sir.\",\n"
"           \"It's really very, VERY runny, sir.\",\n"
"           shopkeeper=\"Michael Palin\",\n"
"           client=\"John Cleese\",\n"
"           sketch=\"Cheese Shop Sketch\")"
msgstr ""
"lojadequeijo(\"Limburger\", \"É muito mole, senhor.\",\n"
"           \"É mesmo muito, MUITO mole, senhor.\",\n"
"           empregado=\"Michael Palin\",\n"
"           cliente=\"John Cleese\",\n"
"           esquetes=\"Esquete da Loja de Queijo\")"

#: ../../tutorial/controlflow.rst:732
msgid "and of course it would print:"
msgstr "e, claro, imprimiria:"

#: ../../tutorial/controlflow.rst:734
msgid ""
"-- Do you have any Limburger ?\n"
"-- I'm sorry, we're all out of Limburger\n"
"It's very runny, sir.\n"
"It's really very, VERY runny, sir.\n"
"----------------------------------------\n"
"shopkeeper : Michael Palin\n"
"client : John Cleese\n"
"sketch : Cheese Shop Sketch"
msgstr ""
"-- Tem algum Limburger?\n"
"-- Lamento, mas estamos sem Limburger\n"
"É muito mole, senhor.\n"
"É mesmo muito, MUITO mole, senhor.\n"
"----------------------------------------\n"
"empregado : Michael Palin\n"
"cliente : John Cleese\n"
"esquetes : Esquete da Loja de Queijo"

#: ../../tutorial/controlflow.rst:745
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"Note que a ordem pela qual os argumentos nomeados são impressos é garantida "
"como correspondendo à ordem pela qual foram fornecidos na chamada da função."

#: ../../tutorial/controlflow.rst:749
msgid "Special parameters"
msgstr "Parâmetros especiais"

#: ../../tutorial/controlflow.rst:751
msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to "
"restrict the way arguments can be passed so that a developer need only look "
"at the function definition to determine if items are passed by position, by "
"position or keyword, or by keyword."
msgstr ""
"Por predefinição, os argumentos podem ser passados a uma função Python por "
"posição ou explicitamente por nome. Por legibilidade e desempenho, faz "
"sentido restringir a forma como os argumentos podem ser passados, de modo "
"que um programador precise apenas de olhar para a definição da função para "
"determinar se os itens são passados por posição, por posição ou nome, ou "
"apenas por nome."

#: ../../tutorial/controlflow.rst:757
msgid "A function definition may look like:"
msgstr "Uma definição de função pode parecer:"

#: ../../tutorial/controlflow.rst:759
msgid ""
"def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n"
"      -----------    ----------     ----------\n"
"        |             |                  |\n"
"        |        Positional or keyword   |\n"
"        |                                - Keyword only\n"
"         -- Positional only"
msgstr ""
"def f(pos1, pos2, /, pos_ou_nomeado, *, nome1, nome2):\n"
"      -----------    ----------     ----------\n"
"        |             |                  |\n"
"        |        Posicional ou nomeado   |\n"
"        |                                - Apenas nomeado\n"
"         -- Apenas posicional"

#: ../../tutorial/controlflow.rst:768
msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind "
"of parameter by how the arguments may be passed to the function: positional-"
"only, positional-or-keyword, and keyword-only. Keyword parameters are also "
"referred to as named parameters."
msgstr ""
"onde ``/`` e ``*`` são opcionais. Se usados, estes símbolos indicam o tipo "
"de parâmetro pela forma como os argumentos podem ser passados à função: "
"apenas posicionais, posicionais ou nomeados, e apenas nomeados. Os "
"parâmetros nomeados também são referidos como parâmetros nomeados."

#: ../../tutorial/controlflow.rst:775
msgid "Positional-or-Keyword Arguments"
msgstr "Argumentos posicionais ou nomeados"

#: ../../tutorial/controlflow.rst:777
msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may "
"be passed to a function by position or by keyword."
msgstr ""
"Se ``/`` e ``*`` não estiverem presentes na definição da função, os "
"argumentos podem ser passados a uma função por posição ou por nome."

#: ../../tutorial/controlflow.rst:782
msgid "Positional-Only Parameters"
msgstr "Parâmetros apenas posicionais"

#: ../../tutorial/controlflow.rst:784
msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order "
"matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""
"Analisando isto com um pouco mais de detalhe, é possível marcar certos "
"parâmetros como *apenas posicionais*. Se *apenas posicionais*, a ordem dos "
"parâmetros importa, e os parâmetros não podem ser passados por nome. Os "
"parâmetros apenas posicionais são colocados antes de um ``/`` (barra). A ``/"
"`` é usada para separar logicamente os parâmetros apenas posicionais do "
"resto dos parâmetros. Se não houver ``/`` na definição da função, não há "
"parâmetros apenas posicionais."

#: ../../tutorial/controlflow.rst:792
msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""
"Os parâmetros que seguem a ``/`` podem ser *posicionais ou nomeados* ou "
"*apenas nomeados*."

#: ../../tutorial/controlflow.rst:796
msgid "Keyword-Only Arguments"
msgstr "Argumentos apenas nomeados"

#: ../../tutorial/controlflow.rst:798
msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before "
"the first *keyword-only* parameter."
msgstr ""
"Para marcar parâmetros como *apenas nomeados*, indicando que os parâmetros "
"devem ser passados por argumentos nomeados, coloque um ``*`` na lista de "
"argumentos imediatamente antes do primeiro parâmetro *apenas nomeado*."

#: ../../tutorial/controlflow.rst:804
msgid "Function Examples"
msgstr "Exemplos de funções"

#: ../../tutorial/controlflow.rst:806
msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""
"Considere as seguintes definições de funções, prestando atenção aos "
"marcadores ``/`` e ``*``:"

#: ../../tutorial/controlflow.rst:809
msgid ""
">>> def standard_arg(arg):\n"
"...     print(arg)\n"
"...\n"
">>> def pos_only_arg(arg, /):\n"
"...     print(arg)\n"
"...\n"
">>> def kwd_only_arg(*, arg):\n"
"...     print(arg)\n"
"...\n"
">>> def combined_example(pos_only, /, standard, *, kwd_only):\n"
"...     print(pos_only, standard, kwd_only)"
msgstr ""
">>> def argumento_padrao(arg):\n"
"...     print(arg)\n"
"...\n"
">>> def arg_apenas_posicional(arg, /):\n"
"...     print(arg)\n"
"...\n"
">>> def arg_apenas_nomeado(*, arg):\n"
"...     print(arg)\n"
"...\n"
">>> def exemplo_combinado(apenas_pos, /, padrao, *, apenas_nomeado):\n"
"...     print(apenas_pos, padrao, apenas_nomeado)"

#: ../../tutorial/controlflow.rst:822
msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed "
"by position or keyword::"
msgstr ""
"A primeira definição de função, ``standard_arg``, a forma mais familiar, não "
"coloca restrições na convenção de chamada e os argumentos podem ser passados "
"por posição ou palavra reservada:"

#: ../../tutorial/controlflow.rst:826
msgid ""
">>> standard_arg(2)\n"
"2\n"
"\n"
">>> standard_arg(arg=2)\n"
"2"
msgstr ""
">>> argumento_padrao(2)\n"
"2\n"
"\n"
">>> argumento_padrao(arg=2)\n"
"2"

#: ../../tutorial/controlflow.rst:832
msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""
"A segunda função ``pos_only_arg`` está restrita a usar apenas parâmetros "
"posicionais, pois há uma ``/`` na definição da função:"

#: ../../tutorial/controlflow.rst:835
msgid ""
">>> pos_only_arg(1)\n"
"1\n"
"\n"
">>> pos_only_arg(arg=1)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: pos_only_arg() got some positional-only arguments passed as "
"keyword arguments: 'arg'"
msgstr ""
">>> arg_apenas_posicional(1)\n"
"1\n"
"\n"
">>> arg_apenas_posicional(arg=1)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: arg_apenas_posicional() recebeu alguns argumentos apenas "
"posicionais passados como argumentos nomeados: 'arg'"

#: ../../tutorial/controlflow.rst:843
msgid ""
"The third function ``kwd_only_arg`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""
"A terceira função ``kwd_only_arg`` permite apenas argumentos nomeados, como "
"indicado por um ``*`` na definição da função:"

#: ../../tutorial/controlflow.rst:846
msgid ""
">>> kwd_only_arg(3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given\n"
"\n"
">>> kwd_only_arg(arg=3)\n"
"3"
msgstr ""
">>> arg_apenas_nomeado(3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: arg_apenas_nomeado() aceita 0 argumentos posicionais, mas 1 foi "
"dado\n"
"\n"
">>> arg_apenas_nomeado(arg=3)\n"
"3"

#: ../../tutorial/controlflow.rst:854
msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr ""
"E a última usa todas as três convenções de chamada na mesma definição de "
"função:"

#: ../../tutorial/controlflow.rst:857
msgid ""
">>> combined_example(1, 2, 3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: combined_example() takes 2 positional arguments but 3 were given\n"
"\n"
">>> combined_example(1, 2, kwd_only=3)\n"
"1 2 3\n"
"\n"
">>> combined_example(1, standard=2, kwd_only=3)\n"
"1 2 3\n"
"\n"
">>> combined_example(pos_only=1, standard=2, kwd_only=3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: combined_example() got some positional-only arguments passed as "
"keyword arguments: 'pos_only'"
msgstr ""
">>> exemplo_combinado(1, 2, 3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: exemplo_combinado() aceita 2 argumentos posicionais, mas 3 foram "
"dados\n"
"\n"
">>> exemplo_combinado(1, 2, apenas_nomeado=3)\n"
"1 2 3\n"
"\n"
">>> exemplo_combinado(1, padrao=2, apenas_nomeado=3)\n"
"1 2 3\n"
"\n"
">>> exemplo_combinado(apenas_pos=1, padrao=2, apenas_nomeado=3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: exemplo_combinado() recebeu alguns argumentos apenas posicionais "
"passados como argumentos nomeados: 'apenas_pos'"

#: ../../tutorial/controlflow.rst:874
msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""
"Finalmente, considere esta definição de função que tem uma potencial colisão "
"entre o argumento posicional ``name`` e ``**kwds`` que tem ``name`` como uma "
"chave:"

#: ../../tutorial/controlflow.rst:876
msgid ""
"def foo(name, **kwds):\n"
"    return 'name' in kwds"
msgstr ""
"def foo(nome, **kwds):\n"
"    return 'nome' in kwds"

#: ../../tutorial/controlflow.rst:879
msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""
"Não há nenhuma chamada possível que faça com que devolva ``True`` como a "
"palavra reservada, pois o nome ``'name'`` sempre se ligará ao primeiro "
"parâmetro. Por exemplo:"

#: ../../tutorial/controlflow.rst:882
msgid ""
">>> foo(1, **{'name': 2})\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: foo() got multiple values for argument 'name'\n"
">>>"
msgstr ""
">>> foo(1, **{'nome': 2})\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: foo() recebeu valores múltiplos para o argumento 'nome'\n"
">>>"

#: ../../tutorial/controlflow.rst:888
msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""
"Mas usando ``/`` (argumentos apenas posicionais), é possível, pois permite "
"``name`` como um argumento posicional e ``'name'`` como uma chave nos "
"argumentos nomeados:"

#: ../../tutorial/controlflow.rst:890
msgid ""
">>> def foo(name, /, **kwds):\n"
"...     return 'name' in kwds\n"
"...\n"
">>> foo(1, **{'name': 2})\n"
"True"
msgstr ""
">>> def foo(nome, /, **kwds):\n"
"...     return 'nome' in kwds\n"
"...\n"
">>> foo(1, **{'nome': 2})\n"
"True"

#: ../../tutorial/controlflow.rst:896
msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""
"Em outras palavras, os nomes dos parâmetros apenas posicionais podem ser "
"usados em ``**kwds`` sem ambiguidade."

#: ../../tutorial/controlflow.rst:901
msgid "Recap"
msgstr "Resumo"

#: ../../tutorial/controlflow.rst:903
msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""
"O caso de uso determinará quais parâmetros usar na definição da função:"

#: ../../tutorial/controlflow.rst:905
msgid "def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):"
msgstr "def f(pos1, pos2, /, pos_ou_nomeado, *, nome1, nome2):"

#: ../../tutorial/controlflow.rst:907
msgid "As guidance:"
msgstr "Como orientação:"

#: ../../tutorial/controlflow.rst:909
msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function "
"is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""
"Use apenas posicionais se não quiser que o nome dos parâmetros esteja "
"disponível para o utilizador. Isto é útil quando os nomes dos parâmetros não "
"têm significado real, se quiser impor a ordem dos argumentos quando a função "
"é chamada, ou se precisar de aceitar alguns parâmetros posicionais e "
"palavras-chave arbitrárias."

#: ../../tutorial/controlflow.rst:914
msgid ""
"Use keyword-only when names have meaning and the function definition is more "
"understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""
"Use apenas nomeados quando os nomes têm significado e a definição da função "
"é mais compreensível ao ser explícita com os nomes, ou quando quer evitar "
"que os utilizadores dependam da posição do argumento passado."

#: ../../tutorial/controlflow.rst:917
msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""
"Para uma API, use apenas posicionais para evitar alterações que quebram a "
"API se o nome do parâmetro for modificado no futuro."

#: ../../tutorial/controlflow.rst:923
msgid "Arbitrary Argument Lists"
msgstr "Listas arbitrárias de argumentos"

#: ../../tutorial/controlflow.rst:928
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Finalmente, a opção menos frequentemente usada é especificar que uma função "
"pode ser chamada com um número arbitrário de argumentos. Estes argumentos "
"serão agrupados num tuplo (consulte :ref:`tut-tuples`). Antes do número "
"variável de argumentos, podem ocorrer zero ou mais argumentos normais:"

#: ../../tutorial/controlflow.rst:933
msgid ""
"def write_multiple_items(file, separator, *args):\n"
"    file.write(separator.join(args))"
msgstr ""
"def escrever_multiplos_itens(ficheiro, separador, *args):\n"
"    ficheiro.write(separador.join(args))"

#: ../../tutorial/controlflow.rst:937
msgid ""
"Normally, these *variadic* arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"Normalmente, estes argumentos *variádicos* serão os últimos na lista de "
"parâmetros formais, porque recolhem todos os argumentos de entrada restantes "
"que são passados à função. Quaisquer parâmetros formais que ocorram após o "
"parâmetro ``*args`` são argumentos 'apenas nomeados', o que significa que só "
"podem ser usados como palavras-chave em vez de argumentos posicionais:"

#: ../../tutorial/controlflow.rst:943
msgid ""
">>> def concat(*args, sep=\"/\"):\n"
"...     return sep.join(args)\n"
"...\n"
">>> concat(\"earth\", \"mars\", \"venus\")\n"
"'earth/mars/venus'\n"
">>> concat(\"earth\", \"mars\", \"venus\", sep=\".\")\n"
"'earth.mars.venus'"
msgstr ""
">>> def concatenar(*args, sep=\"/\"):\n"
"...     return sep.join(args)\n"
"...\n"
">>> concatenar(\"terra\", \"marte\", \"vénus\")\n"
"'terra/marte/vénus'\n"
">>> concatenar(\"terra\", \"marte\", \"vénus\", sep=\".\")\n"
"'terra.marte.vénus'"

#: ../../tutorial/controlflow.rst:954
msgid "Unpacking Argument Lists"
msgstr "Desempacotar listas de argumentos"

#: ../../tutorial/controlflow.rst:956
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"A situação inversa ocorre quando os argumentos já estão numa lista ou tuplo, "
"mas precisam de ser desempacotados para uma chamada de função que requer "
"argumentos posicionais separados. Por exemplo, a função incorporada :func:"
"`range` espera argumentos *início* e *fim* separados. Se não estiverem "
"disponíveis separadamente, escreva a chamada da função com o operador ``*`` "
"para desempacotar os argumentos de uma lista ou tuplo:"

#: ../../tutorial/controlflow.rst:963
msgid ""
">>> list(range(3, 6))            # normal call with separate arguments\n"
"[3, 4, 5]\n"
">>> args = [3, 6]\n"
">>> list(range(*args))            # call with arguments unpacked from a "
"list\n"
"[3, 4, 5]"
msgstr ""
">>> list(range(3, 6))            # chamada normal com argumentos separados\n"
"[3, 4, 5]\n"
">>> args = [3, 6]\n"
">>> list(range(*args))            # chamada com argumentos desempacotados de "
"uma lista\n"
"[3, 4, 5]"

#: ../../tutorial/controlflow.rst:972
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""
"Da mesma forma, os dicionários podem fornecer argumentos nomeados com o "
"operador ``**``:"

#: ../../tutorial/controlflow.rst:975
msgid ""
">>> def parrot(voltage, state='a stiff', action='voom'):\n"
"...     print(\"-- This parrot wouldn't\", action, end=' ')\n"
"...     print(\"if you put\", voltage, \"volts through it.\", end=' ')\n"
"...     print(\"E's\", state, \"!\")\n"
"...\n"
">>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", "
"\"action\": \"VOOM\"}\n"
">>> parrot(**d)\n"
"-- This parrot wouldn't VOOM if you put four million volts through it. E's "
"bleedin' demised !"
msgstr ""
">>> def papagaio(voltagem, estado='um cadáver', ação='voar'):\n"
"...     print(\"-- Este papagaio não conseguiria\", ação, end=' ')\n"
"...     print(\"nem se você desse um choque de\", voltagem, \"de volts nele."
"\", end=' ')\n"
"...     print(\"Ele\", estado, \"!\")\n"
"...\n"
">>> d = {\"voltagem\": \"quatro milhões\", \"estado\": \"está realmente "
"morto\", \"ação\": \"voar\"}\n"
">>> papagaio(**d)\n"
"-- Este papagaio não conseguiria voar nem se você desse um choque de quatro "
"milhões de volts nele. Ele está realmente morto !"

#: ../../tutorial/controlflow.rst:988
msgid "Lambda Expressions"
msgstr "Expressões lambda"

#: ../../tutorial/controlflow.rst:990
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"Pequenas funções anónimas podem ser criadas com a palavra-chave :keyword:"
"`lambda`. Esta função devolve a soma dos seus dois argumentos: ``lambda a, "
"b: a+b``. As funções lambda podem ser usadas onde quer que sejam necessários "
"objetos de função. São sintaticamente restritas a uma única expressão. "
"Semanticamente, são apenas açúcar sintático para uma definição normal de "
"função. Tal como as definições de funções aninhadas, as funções lambda podem "
"referenciar variáveis do âmbito que as contém:"

#: ../../tutorial/controlflow.rst:998
msgid ""
">>> def make_incrementor(n):\n"
"...     return lambda x: x + n\n"
"...\n"
">>> f = make_incrementor(42)\n"
">>> f(0)\n"
"42\n"
">>> f(1)\n"
"43"
msgstr ""
">>> def criar_incrementador(n):\n"
"...     return lambda x: x + n\n"
"...\n"
">>> f = criar_incrementador(42)\n"
">>> f(0)\n"
"42\n"
">>> f(1)\n"
"43"

#: ../../tutorial/controlflow.rst:1007
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument.  For instance, :meth:`list."
"sort` takes a sorting key function *key* which can be a lambda function::"
msgstr ""
"O exemplo acima usa uma expressão lambda para devolver uma função. Outro uso "
"é passar uma pequena função como argumento. Por exemplo, :meth:`list.sort` "
"aceita uma função de chave de ordenação *key* que pode ser uma função lambda:"

#: ../../tutorial/controlflow.rst:1011
msgid ""
">>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\n"
">>> pairs.sort(key=lambda pair: pair[1])\n"
">>> pairs\n"
"[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]"
msgstr ""
">>> pares = [(1, 'um'), (2, 'dois'), (3, 'três'), (4, 'quatro')]\n"
">>> pares.sort(key=lambda par: par[1])\n"
">>> pares\n"
"[(4, 'quatro'), (1, 'um'), (3, 'três'), (2, 'dois')]"

#: ../../tutorial/controlflow.rst:1020
msgid "Documentation Strings"
msgstr "Strings de documentação"

#: ../../tutorial/controlflow.rst:1027
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"Aqui estão algumas convenções sobre o conteúdo e formatação das strings de "
"documentação."

#: ../../tutorial/controlflow.rst:1030
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"A primeira linha deve ser sempre um resumo curto e conciso do propósito do "
"objeto. Por brevidade, não deve declarar explicitamente o nome ou tipo do "
"objeto, uma vez que estes estão disponíveis por outros meios (exceto se o "
"nome for um verbo que descreve a operação de uma função). Esta linha deve "
"começar com uma letra maiúscula e terminar com um ponto final."

#: ../../tutorial/controlflow.rst:1036
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"Se houver mais linhas na string de documentação, a segunda linha deve estar "
"em branco, separando visualmente o resumo do resto da descrição. As linhas "
"seguintes devem ser um ou mais parágrafos descrevendo as convenções de "
"chamada do objeto, os seus efeitos secundários, etc."

#: ../../tutorial/controlflow.rst:1041
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"O analisador sintático do Python não remove a indentação de literais de "
"strings de múltiplas linhas em Python, por isso as ferramentas que processam "
"documentação têm de remover a indentação, se desejado. Isto é feito usando a "
"seguinte convenção. A primeira linha não vazia *depois* da primeira linha da "
"string determina a quantidade de indentação para toda a string de "
"documentação. (Não podemos usar a primeira linha, uma vez que geralmente "
"está adjacente às aspas de abertura da string, por isso a sua indentação não "
"é aparente no literal da string.) O espaço em branco \"equivalente\" a esta "
"indentação é então removido do início de todas as linhas da string. Linhas "
"que estão menos indentadas não devem ocorrer, mas se ocorrerem, todo o seu "
"espaço em branco inicial deve ser removido. A equivalência de espaço em "
"branco deve ser testada após a expansão de tabulações (para 8 espaços, "
"normalmente)."

#: ../../tutorial/controlflow.rst:1053
msgid "Here is an example of a multi-line docstring::"
msgstr ""
"Aqui está um exemplo de uma string de documentação de múltiplas linhas:"

#: ../../tutorial/controlflow.rst:1055
msgid ""
">>> def my_function():\n"
"...     \"\"\"Do nothing, but document it.\n"
"...\n"
"...     No, really, it doesn't do anything.\n"
"...     \"\"\"\n"
"...     pass\n"
"...\n"
">>> print(my_function.__doc__)\n"
"Do nothing, but document it.\n"
"\n"
"No, really, it doesn't do anything."
msgstr ""
">>> def minha_função():\n"
"...     \"\"\"Não faça nada, mas documente o facto.\n"
"...\n"
"...     Não, a sério, ela não faz nada.\n"
"...     \"\"\"\n"
"...     pass\n"
"...\n"
">>> print(minha_função.__doc__)\n"
"Não faça nada, mas documente o facto.\n"
"\n"
"Não, a sério, ela não faz nada."

#: ../../tutorial/controlflow.rst:1071
msgid "Function Annotations"
msgstr "Anotações de funções"

#: ../../tutorial/controlflow.rst:1079
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`Anotações de funções <function>` são informações de metadados "
"completamente opcionais sobre os tipos usados por funções definidas pelo "
"utilizador (consulte :pep:`3107` e :pep:`484` para mais informações)."

#: ../../tutorial/controlflow.rst:1083
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:`!"
"__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a required argument, an optional argument, and the return value annotated::"
msgstr ""

#: ../../tutorial/controlflow.rst:1092
msgid ""
">>> def f(ham: str, eggs: str = 'eggs') -> str:\n"
"...     print(\"Annotations:\", f.__annotations__)\n"
"...     print(\"Arguments:\", ham, eggs)\n"
"...     return ham + ' and ' + eggs\n"
"...\n"
">>> f('spam')\n"
"Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class "
"'str'>}\n"
"Arguments: spam eggs\n"
"'spam and eggs'"
msgstr ""
">>> def f(ham: str, ovos: str = 'ovos') -> str:\n"
"...     print(\"Anotações:\", f.__annotations__)\n"
"...     print(\"Argumentos:\", ham, ovos)\n"
"...     return ham + ' e ' + ovos\n"
"...\n"
">>> f('spam')\n"
"Anotações: {'ham': <class 'str'>, 'return': <class 'str'>, 'ovos': <class "
"'str'>}\n"
"Argumentos: spam ovos\n"
"'spam e ovos'"

#: ../../tutorial/controlflow.rst:1105
msgid "Intermezzo: Coding Style"
msgstr "Intermédio: Estilo de codificação"

#: ../../tutorial/controlflow.rst:1110
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"Agoras que está prestes a escrever peças mais longas e complexas de Python, "
"é uma boa altura para falar sobre *estilo de codificação*. A maioria das "
"linguagens pode ser escrita (ou, mais concisamente, *formatada*) em "
"diferentes estilos; alguns são mais legíveis do que outros. Tornar fácil "
"para os outros lerem o seu código é sempre uma boa ideia, e adotar um bom "
"estilo de codificação ajuda imenso nisso."

#: ../../tutorial/controlflow.rst:1116
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Para Python, o :pep:`8` surgiu como o guia de estilo ao qual a maioria dos "
"projetos aderem; promove um estilo de codificação muito legível e agradável "
"à vista. Todos os programadores Python deviam lê-lo em algum momento; aqui "
"estão os pontos mais importantes extraídos para si:"

#: ../../tutorial/controlflow.rst:1121
msgid "Use 4-space indentation, and no tabs."
msgstr "Use indentação de 4 espaços e sem tabulações."

#: ../../tutorial/controlflow.rst:1123
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"4 espaços são um bom compromisso entre indentação pequena (permite maior "
"profundidade de aninhamento) e indentação grande (mais fácil de ler). As "
"tabulações introduzem confusão e é melhor evitá-las."

#: ../../tutorial/controlflow.rst:1127
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Quebre as linhas para que não excedam 79 caracteres."

#: ../../tutorial/controlflow.rst:1129
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Isto ajuda utilizadores com ecrãs pequenos e torna possível ter vários "
"ficheiros de código lado a lado em ecrãs maiores."

#: ../../tutorial/controlflow.rst:1132
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"Use linhas em branco para separar funções e classes, e blocos maiores de "
"código dentro de funções."

#: ../../tutorial/controlflow.rst:1135
msgid "When possible, put comments on a line of their own."
msgstr "Quando possível, coloque comentários numa linha própria."

#: ../../tutorial/controlflow.rst:1137
msgid "Use docstrings."
msgstr "Use strings de documentação."

#: ../../tutorial/controlflow.rst:1139
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Use espaços em redor de operadores e após vírgulas, mas não diretamente "
"dentro de construções de parênteses: ``a = f(1, 2) + g(3, 4)``."

#: ../../tutorial/controlflow.rst:1142
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Nomeie as suas classes e funções de forma consistente; a convenção é usar "
"``UpperCamelCase`` para classes e ``lowercase_with_underscores`` para "
"funções e métodos. Use sempre ``self`` como o nome para o primeiro argumento "
"do método (consulte :ref:`tut-firstclasses` para mais informações sobre "
"classes e métodos)."

#: ../../tutorial/controlflow.rst:1147
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"Não use codificações sofisticadas se o seu código for para ser usado em "
"ambientes internacionais. A predefinição do Python, UTF-8, ou mesmo ASCII "
"simples, funcionam melhor em qualquer caso."

#: ../../tutorial/controlflow.rst:1151
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"Da mesma forma, não use caracteres não-ASCII em identificadores se houver a "
"mínima possibilidade de pessoas que falam uma língua diferente lerem ou "
"manterem o código."

#: ../../tutorial/controlflow.rst:1157
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../tutorial/controlflow.rst:1158
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"Na verdade, *passagem por referência de objeto* seria uma descrição melhor, "
"uma vez que, se um objeto mutável for passado, o chamador verá quaisquer "
"alterações que o chamado faça nele (itens inseridos numa lista)."

#: ../../tutorial/controlflow.rst:48
msgid "statement"
msgstr "instrução"

#: ../../tutorial/controlflow.rst:48
msgid "for"
msgstr "para"

#: ../../tutorial/controlflow.rst:254
msgid "..."
msgstr "..."

#: ../../tutorial/controlflow.rst:254
msgid "ellipsis literal"
msgstr "literal de reticências"

#: ../../tutorial/controlflow.rst:484 ../../tutorial/controlflow.rst:1022
msgid "documentation strings"
msgstr "strings de documentação"

#: ../../tutorial/controlflow.rst:484 ../../tutorial/controlflow.rst:1022
msgid "docstrings"
msgstr "docstrings"

#: ../../tutorial/controlflow.rst:484 ../../tutorial/controlflow.rst:1022
msgid "strings, documentation"
msgstr "strings, documentação"

#: ../../tutorial/controlflow.rst:925
msgid "* (asterisk)"
msgstr "* (asterisco)"

#: ../../tutorial/controlflow.rst:925 ../../tutorial/controlflow.rst:969
msgid "in function calls"
msgstr "em chamadas de função"

#: ../../tutorial/controlflow.rst:969
msgid "**"
msgstr "**"

#: ../../tutorial/controlflow.rst:1074
msgid "function"
msgstr "função"

#: ../../tutorial/controlflow.rst:1074
msgid "annotations"
msgstr "anotações"

#: ../../tutorial/controlflow.rst:1074
msgid "->"
msgstr "->"

#: ../../tutorial/controlflow.rst:1074
msgid "function annotations"
msgstr "anotações de função"

#: ../../tutorial/controlflow.rst:1074
msgid ": (colon)"
msgstr ": (dois pontos)"

#: ../../tutorial/controlflow.rst:1108
msgid "coding"
msgstr "codificação"

#: ../../tutorial/controlflow.rst:1108
msgid "style"
msgstr "estilo"
