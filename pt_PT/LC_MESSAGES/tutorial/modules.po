# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# André Moreira <afrmscb@gmail.com>, 2025
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 16:35+0000\n"
"PO-Revision-Date: 2025-09-22 16:51+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../tutorial/modules.rst:5
msgid "Modules"
msgstr "Módulos"

#: ../../tutorial/modules.rst:7
msgid ""
"If you quit from the Python interpreter and enter it again, the definitions "
"you have made (functions and variables) are lost. Therefore, if you want to "
"write a somewhat longer program, you are better off using a text editor to "
"prepare the input for the interpreter and running it with that file as input "
"instead.  This is known as creating a *script*.  As your program gets "
"longer, you may want to split it into several files for easier maintenance.  "
"You may also want to use a handy function that you've written in several "
"programs without copying its definition into each program."
msgstr ""
"Se sair do interpretador Python e voltar a entrar, as definições que fez "
"(funções e variáveis) são perdidas. Por isso, se pretender escrever um "
"programa mais longo, é melhor utilizar um editor de texto para preparar a "
"entrada para o interpretador e executá-lo com esse ficheiro como entrada. "
"Isto é conhecido como criar um *script*. À medida que o seu programa cresce, "
"pode querer dividi-lo em vários ficheiros para facilitar a manutenção. Pode "
"também querer utilizar uma função útil que escreveu em vários programas sem "
"copiar a sua definição para cada programa."

#: ../../tutorial/modules.rst:16
msgid ""
"To support this, Python has a way to put definitions in a file and use them "
"in a script or in an interactive instance of the interpreter. Such a file is "
"called a *module*; definitions from a module can be *imported* into other "
"modules or into the *main* module (the collection of variables that you have "
"access to in a script executed at the top level and in calculator mode)."
msgstr ""
"Para apoiar isto, o Python tem uma forma de colocar definições num ficheiro "
"e utilizá-las num *script* ou numa instância interativa do interpretador. Um "
"ficheiro deste tipo é chamado *módulo*; as definições de um módulo podem ser "
"*importadas* para outros módulos ou para o módulo *main* (a coleção de "
"variáveis a que tem acesso num *script* executado ao nível superior e em "
"modo de calculadora)."

#: ../../tutorial/modules.rst:22
msgid ""
"A module is a file containing Python definitions and statements.  The file "
"name is the module name with the suffix :file:`.py` appended.  Within a "
"module, the module's name (as a string) is available as the value of the "
"global variable ``__name__``.  For instance, use your favorite text editor "
"to create a file called :file:`fibo.py` in the current directory with the "
"following contents::"
msgstr ""
"Um módulo é um ficheiro que contém definições e instruções Python. O nome do "
"ficheiro é o nome do módulo com o sufixo :file:`.py`. Dentro de um módulo, o "
"nome do módulo (como uma *string*) está disponível como o valor da variável "
"global ``__name__``. Por exemplo, utilize o seu editor de texto preferido "
"para criar um ficheiro chamado :file:`fibo.py` no diretório atual com o "
"seguinte conteúdo:"

#: ../../tutorial/modules.rst:45
msgid ""
"Now enter the Python interpreter and import this module with the following "
"command::"
msgstr ""
"Agora entre no interpretador Python e importe este módulo com o seguinte "
"comando:"

#: ../../tutorial/modules.rst:50
msgid ""
"This does not add the names of the functions defined in ``fibo``  directly "
"to the current :term:`namespace` (see :ref:`tut-scopes` for more details); "
"it only adds the module name ``fibo`` there. Using the module name you can "
"access the functions::"
msgstr ""
"Isto não adiciona os nomes das funções definidas em ``fibo`` diretamente ao :"
"term:`espaço de nomes` atual (consulte :ref:`tut-scopes` para mais "
"detalhes); apenas adiciona o nome do módulo ``fibo``. Utilizando o nome do "
"módulo pode aceder às funções:"

#: ../../tutorial/modules.rst:62
msgid ""
"If you intend to use a function often you can assign it to a local name::"
msgstr ""
"Se pretender utilizar uma função frequentemente pode atribuí-la a um nome "
"local:"

#: ../../tutorial/modules.rst:72
msgid "More on Modules"
msgstr "Mais sobre módulos"

#: ../../tutorial/modules.rst:74
msgid ""
"A module can contain executable statements as well as function definitions. "
"These statements are intended to initialize the module. They are executed "
"only the *first* time the module name is encountered in an import statement. "
"[#]_ (They are also run if the file is executed as a script.)"
msgstr ""
"Um módulo pode conter instruções executáveis bem como definições de funções. "
"Estas instruções destinam-se a inicializar o módulo. São executadas apenas "
"na *primeira* vez que o nome do módulo é encontrado numa instrução de "
"importação. [#]_ (Também são executadas se o ficheiro for executado como um "
"*script*.)"

#: ../../tutorial/modules.rst:79
msgid ""
"Each module has its own private namespace, which is used as the global "
"namespace by all functions defined in the module. Thus, the author of a "
"module can use global variables in the module without worrying about "
"accidental clashes with a user's global variables. On the other hand, if you "
"know what you are doing you can touch a module's global variables with the "
"same notation used to refer to its functions, ``modname.itemname``."
msgstr ""
"Cada módulo tem o seu próprio espaço de nomes privado, que é utilizado como "
"espaço de nomes global por todas as funções definidas no módulo. Assim, o "
"autor de um módulo pode utilizar variáveis globais no módulo sem se "
"preocupar com conflitos acidentais com as variáveis globais do utilizador. "
"Por outro lado, se souber o que está a fazer, pode aceder às variáveis "
"globais de um módulo com a mesma notação utilizada para referir as suas "
"funções, ``modname.itemname``."

#: ../../tutorial/modules.rst:86
msgid ""
"Modules can import other modules.  It is customary but not required to place "
"all :keyword:`import` statements at the beginning of a module (or script, "
"for that matter).  The imported module names, if placed at the top level of "
"a module (outside any functions or classes), are added to the module's "
"global namespace."
msgstr ""
"Os módulos podem importar outros módulos. É habitual, embora não "
"obrigatório, colocar todas as instruções :keyword:`import` no início de um "
"módulo (ou *script*). Os nomes dos módulos importados, se colocados ao nível "
"superior de um módulo (fora de quaisquer funções ou classes), são "
"adicionados ao espaço de nomes global do módulo."

#: ../../tutorial/modules.rst:91
msgid ""
"There is a variant of the :keyword:`import` statement that imports names "
"from a module directly into the importing module's namespace.  For example::"
msgstr ""
"Existe uma variante da instrução :keyword:`import` que importa nomes de um "
"módulo diretamente para o espaço de nomes do módulo importador. Por exemplo:"

#: ../../tutorial/modules.rst:98
msgid ""
"This does not introduce the module name from which the imports are taken in "
"the local namespace (so in the example, ``fibo`` is not defined)."
msgstr ""
"Isto não introduz o nome do módulo de onde são feitas as importações no "
"espaço de nomes local (no exemplo, ``fibo`` não está definido)."

#: ../../tutorial/modules.rst:101
msgid "There is even a variant to import all names that a module defines::"
msgstr ""
"Existe até uma variante para importar todos os nomes que um módulo define:"

#: ../../tutorial/modules.rst:107
msgid ""
"This imports all names except those beginning with an underscore (``_``). In "
"most cases Python programmers do not use this facility since it introduces "
"an unknown set of names into the interpreter, possibly hiding some things "
"you have already defined."
msgstr ""
"Isto importa todos os nomes exceto aqueles que começam com um *underscore* "
"(``_``). Na maioria dos casos, os programadores Python não utilizam esta "
"funcionalidade uma vez que introduz um conjunto desconhecido de nomes no "
"interpretador, podendo ocultar algumas coisas que já definiu."

#: ../../tutorial/modules.rst:112
msgid ""
"Note that in general the practice of importing ``*`` from a module or "
"package is frowned upon, since it often causes poorly readable code. "
"However, it is okay to use it to save typing in interactive sessions."
msgstr ""
"Note que, em geral, a prática de importar ``*`` de um módulo ou pacote é "
"desencorajada, uma vez que muitas vezes resulta em código pouco legível. "
"Contudo, é aceitável utilizá-la para poupar digitação em sessões interativas."

#: ../../tutorial/modules.rst:116
msgid ""
"If the module name is followed by :keyword:`!as`, then the name following :"
"keyword:`!as` is bound directly to the imported module."
msgstr ""
"Se o nome do módulo for seguido por :keyword:`!as`, então o nome que segue :"
"keyword:`!as` é ligado diretamente ao módulo importado."

#: ../../tutorial/modules.rst:125
msgid ""
"This is effectively importing the module in the same way that ``import "
"fibo`` will do, with the only difference of it being available as ``fib``."
msgstr ""
"Isto é efetivamente importar o módulo da mesma forma que ``import fibo``, "
"com a única diferença de estar disponível como ``fib``."

#: ../../tutorial/modules.rst:128
msgid ""
"It can also be used when utilising :keyword:`from` with similar effects::"
msgstr "Também pode ser utilizado com :keyword:`from` com efeitos semelhantes:"

#: ../../tutorial/modules.rst:137
msgid ""
"For efficiency reasons, each module is only imported once per interpreter "
"session.  Therefore, if you change your modules, you must restart the "
"interpreter -- or, if it's just one module you want to test interactively, "
"use :func:`importlib.reload`, e.g. ``import importlib; importlib."
"reload(modulename)``."
msgstr ""
"Por razões de eficiência, cada módulo é importado apenas uma vez por sessão "
"do interpretador. Por isso, se alterar os seus módulos, tem de reiniciar o "
"interpretador — ou, se for apenas um módulo que pretende testar "
"interativamente, utilize :func:`importlib.reload`, por exemplo, ``import "
"importlib; importlib.reload(modulename)``."

#: ../../tutorial/modules.rst:147
msgid "Executing modules as scripts"
msgstr "Executar módulos como *scripts*"

#: ../../tutorial/modules.rst:149
msgid "When you run a Python module with ::"
msgstr "Quando executa um módulo Python com:"

#: ../../tutorial/modules.rst:153
msgid ""
"the code in the module will be executed, just as if you imported it, but "
"with the ``__name__`` set to ``\"__main__\"``.  That means that by adding "
"this code at the end of your module::"
msgstr ""
"o código no módulo será executado, tal como se o importasse, mas com "
"``__name__`` definido para ``\"__main__\"``. Isto significa que, ao "
"adicionar este código no final do seu módulo:"

#: ../../tutorial/modules.rst:161
msgid ""
"you can make the file usable as a script as well as an importable module, "
"because the code that parses the command line only runs if the module is "
"executed as the \"main\" file:"
msgstr ""
"pode tornar o ficheiro utilizável como um *script* bem como um módulo "
"importável, porque o código que analisa a linha de comandos só é executado "
"se o módulo for executado como o ficheiro \"principal\":"

#: ../../tutorial/modules.rst:170
msgid "If the module is imported, the code is not run::"
msgstr "Se o módulo for importado, o código não é executado:"

#: ../../tutorial/modules.rst:175
msgid ""
"This is often used either to provide a convenient user interface to a "
"module, or for testing purposes (running the module as a script executes a "
"test suite)."
msgstr ""
"Isto é frequentemente utilizado para fornecer uma interface de utilizador "
"conveniente para um módulo, ou para fins de teste (executar o módulo como um "
"*script* executa uma suíte de testes)."

#: ../../tutorial/modules.rst:182
msgid "The Module Search Path"
msgstr "O caminho de pesquisa de módulos"

#: ../../tutorial/modules.rst:186
msgid ""
"When a module named :mod:`!spam` is imported, the interpreter first searches "
"for a built-in module with that name. These module names are listed in :data:"
"`sys.builtin_module_names`. If not found, it then searches for a file named :"
"file:`spam.py` in a list of directories given by the variable :data:`sys."
"path`.  :data:`sys.path` is initialized from these locations:"
msgstr ""
"Quando um módulo chamado :mod:`!spam` é importado, o interpretador pesquisa "
"primeiro por um módulo incorporado com esse nome. Estes nomes de módulos "
"estão listados em :data:`sys.builtin_module_names`. Se não for encontrado, "
"pesquisa por um ficheiro chamado :file:`spam.py` numa lista de diretórios "
"dada pela variável :data:`sys.path`. :data:`sys.path` é inicializado a "
"partir destes locais:"

#: ../../tutorial/modules.rst:192
msgid ""
"The directory containing the input script (or the current directory when no "
"file is specified)."
msgstr ""
"O diretório que contém o *script* de entrada (ou o diretório atual quando "
"nenhum ficheiro é especificado)."

#: ../../tutorial/modules.rst:194
msgid ""
":envvar:`PYTHONPATH` (a list of directory names, with the same syntax as the "
"shell variable :envvar:`PATH`)."
msgstr ""
":envvar:`PYTHONPATH` (uma lista de nomes de diretórios, com a mesma sintaxe "
"que a variável de ambiente :envvar:`PATH`)."

#: ../../tutorial/modules.rst:196
msgid ""
"The installation-dependent default (by convention including a ``site-"
"packages`` directory, handled by the :mod:`site` module)."
msgstr ""
"O predefinido dependente da instalação (por convenção inclui um diretório "
"``site-packages``, gerido pelo módulo :mod:`site`)."

#: ../../tutorial/modules.rst:199
msgid "More details are at :ref:`sys-path-init`."
msgstr "Mais detalhes em :ref:`sys-path-init`."

#: ../../tutorial/modules.rst:202
msgid ""
"On file systems which support symlinks, the directory containing the input "
"script is calculated after the symlink is followed. In other words the "
"directory containing the symlink is **not** added to the module search path."
msgstr ""
"Em sistemas de ficheiros que suportam ligações simbólicas, o diretório que "
"contém o *script* de entrada é calculado depois de a ligação simbólica ser "
"seguida. Em outras palavras, o diretório que contém a ligação simbólica "
"**não** é adicionado ao caminho de pesquisa de módulos."

#: ../../tutorial/modules.rst:206
msgid ""
"After initialization, Python programs can modify :data:`sys.path`.  The "
"directory containing the script being run is placed at the beginning of the "
"search path, ahead of the standard library path. This means that scripts in "
"that directory will be loaded instead of modules of the same name in the "
"library directory. This is an error unless the replacement is intended.  See "
"section :ref:`tut-standardmodules` for more information."
msgstr ""
"Após a inicialização, os programas Python podem modificar :data:`sys.path`. "
"O diretório que contém o *script* a ser executado é colocado no início do "
"caminho de pesquisa, à frente do caminho da biblioteca padrão. Isto "
"significa que os *scripts* nesse diretório serão carregados em vez de "
"módulos com o mesmo nome no diretório da biblioteca. Isto é um erro a menos "
"que a substituição seja intencional. Consulte a secção :ref:`tut-"
"standardmodules` para mais informações."

#: ../../tutorial/modules.rst:219
msgid "\"Compiled\" Python files"
msgstr "Ficheiros Python \"compilados\""

#: ../../tutorial/modules.rst:221
msgid ""
"To speed up loading modules, Python caches the compiled version of each "
"module in the ``__pycache__`` directory under the name :file:`module."
"{version}.pyc`, where the version encodes the format of the compiled file; "
"it generally contains the Python version number.  For example, in CPython "
"release 3.3 the compiled version of spam.py would be cached as ``__pycache__/"
"spam.cpython-33.pyc``.  This naming convention allows compiled modules from "
"different releases and different versions of Python to coexist."
msgstr ""
"Para acelerar o carregamento de módulos, o Python guarda em cache a versão "
"compilada de cada módulo no diretório ``__pycache__`` com o nome :file:"
"`module.{version}.pyc`, onde a versão codifica o formato do ficheiro "
"compilado; geralmente contém o número da versão do Python. Por exemplo, na "
"versão CPython 3.3, a versão compilada de spam.py seria guardada em cache "
"como ``__pycache__/spam.cpython-33.pyc``. Esta convenção de nomenclatura "
"permite que módulos compilados de diferentes versões e lançamentos do Python "
"coexistam."

#: ../../tutorial/modules.rst:229
msgid ""
"Python checks the modification date of the source against the compiled "
"version to see if it's out of date and needs to be recompiled.  This is a "
"completely automatic process.  Also, the compiled modules are platform-"
"independent, so the same library can be shared among systems with different "
"architectures."
msgstr ""
"O Python verifica a data de modificação da origem contra a versão compilada "
"para ver se está desatualizada e precisa de ser recompilada. Este é um "
"processo totalmente automático. Além disso, os módulos compilados são "
"independentes da plataforma, pelo que a mesma biblioteca pode ser partilhada "
"entre sistemas com arquiteturas diferentes."

#: ../../tutorial/modules.rst:234
msgid ""
"Python does not check the cache in two circumstances.  First, it always "
"recompiles and does not store the result for the module that's loaded "
"directly from the command line.  Second, it does not check the cache if "
"there is no source module.  To support a non-source (compiled only) "
"distribution, the compiled module must be in the source directory, and there "
"must not be a source module."
msgstr ""
"O Python não verifica a cache em duas circunstâncias. Primeiro, recompila "
"sempre e não guarda o resultado para o módulo que é carregado diretamente a "
"partir da linha de comandos. Segundo, não verifica a cache se não existir um "
"módulo fonte. Para suportar uma distribuição sem fonte (apenas compilada), o "
"módulo compilado deve estar no diretório fonte e não deve existir um módulo "
"fonte."

#: ../../tutorial/modules.rst:241
msgid "Some tips for experts:"
msgstr "Algumas dicas para especialistas:"

#: ../../tutorial/modules.rst:243
msgid ""
"You can use the :option:`-O` or :option:`-OO` switches on the Python command "
"to reduce the size of a compiled module.  The ``-O`` switch removes assert "
"statements, the ``-OO`` switch removes both assert statements and __doc__ "
"strings.  Since some programs may rely on having these available, you should "
"only use this option if you know what you're doing.  \"Optimized\" modules "
"have an ``opt-`` tag and are usually smaller.  Future releases may change "
"the effects of optimization."
msgstr ""
"Pode utilizar as opções :option:`-O` ou :option:`-OO` no comando Python para "
"reduzir o tamanho de um módulo compilado. A opção ``-O`` remove instruções "
"assert, a opção ``-OO`` remove tanto instruções assert como *strings* "
"__doc__. Uma vez que alguns programas podem depender destas, deve utilizar "
"esta opção apenas se souber o que está a fazer. Os módulos \"otimizados\" "
"têm uma etiqueta ``opt-`` e são geralmente mais pequenos. Versões futuras "
"podem alterar os efeitos da otimização."

#: ../../tutorial/modules.rst:251
msgid ""
"A program doesn't run any faster when it is read from a ``.pyc`` file than "
"when it is read from a ``.py`` file; the only thing that's faster about ``."
"pyc`` files is the speed with which they are loaded."
msgstr ""
"Um programa não executa mais rapidamente quando é lido a partir de um "
"ficheiro ``.pyc`` do que quando é lido a partir de um ficheiro ``.py``; a "
"única coisa que é mais rápida nos ficheiros ``.pyc`` é a velocidade com que "
"são carregados."

#: ../../tutorial/modules.rst:255
msgid ""
"The module :mod:`compileall` can create .pyc files for all modules in a "
"directory."
msgstr ""
"O módulo :mod:`compileall` pode criar ficheiros .pyc para todos os módulos "
"num diretório."

#: ../../tutorial/modules.rst:258
msgid ""
"There is more detail on this process, including a flow chart of the "
"decisions, in :pep:`3147`."
msgstr ""
"Existem mais detalhes sobre este processo, incluindo um fluxograma das "
"decisões, em :pep:`3147`."

#: ../../tutorial/modules.rst:265
msgid "Standard Modules"
msgstr "Módulos padrão"

#: ../../tutorial/modules.rst:269
msgid ""
"Python comes with a library of standard modules, described in a separate "
"document, the Python Library Reference (\"Library Reference\" hereafter).  "
"Some modules are built into the interpreter; these provide access to "
"operations that are not part of the core of the language but are "
"nevertheless built in, either for efficiency or to provide access to "
"operating system primitives such as system calls.  The set of such modules "
"is a configuration option which also depends on the underlying platform.  "
"For example, the :mod:`winreg` module is only provided on Windows systems. "
"One particular module deserves some attention: :mod:`sys`, which is built "
"into every Python interpreter.  The variables ``sys.ps1`` and ``sys.ps2`` "
"define the strings used as primary and secondary prompts::"
msgstr ""
"O Python vem com uma biblioteca de módulos padrão, descrita num documento "
"separado, a Referência da Biblioteca Python (doravante \"Referência da "
"Biblioteca\"). Alguns módulos estão incorporados no interpretador; estes "
"fornecem acesso a operações que não fazem parte do núcleo da linguagem, mas "
"que estão, no entanto, incorporadas, seja por razões de eficiência, seja "
"para fornecer acesso a primitivas do sistema operativo, como chamadas de "
"sistema. O conjunto destes módulos é uma opção de configuração que também "
"depende da plataforma subjacente. Por exemplo, o módulo :mod:`winreg` só "
"está disponível em sistemas Windows. Um módulo em particular merece alguma "
"atenção: :mod:`sys`, que está incorporado em todos os interpretadores "
"Python. As variáveis ``sys.ps1`` e ``sys.ps2`` definem as *strings* "
"utilizadas como *prompts* primário e secundário:"

#: ../../tutorial/modules.rst:292
msgid ""
"These two variables are only defined if the interpreter is in interactive "
"mode."
msgstr ""
"Estas duas variáveis só estão definidas se o interpretador estiver em modo "
"interativo."

#: ../../tutorial/modules.rst:294
msgid ""
"The variable ``sys.path`` is a list of strings that determines the "
"interpreter's search path for modules. It is initialized to a default path "
"taken from the environment variable :envvar:`PYTHONPATH`, or from a built-in "
"default if :envvar:`PYTHONPATH` is not set.  You can modify it using "
"standard list operations::"
msgstr ""
"A variável ``sys.path`` é uma lista de *strings* que determina o caminho de "
"pesquisa do interpretador para módulos. É inicializada com um caminho "
"predefinido obtido a partir da variável de ambiente :envvar:`PYTHONPATH`, ou "
"a partir de um predefinido incorporado se :envvar:`PYTHONPATH` não estiver "
"definido. Pode modificá-la utilizando operações de lista padrão:"

#: ../../tutorial/modules.rst:307
msgid "The :func:`dir` Function"
msgstr "A função :func:`dir`"

#: ../../tutorial/modules.rst:309
msgid ""
"The built-in function :func:`dir` is used to find out which names a module "
"defines.  It returns a sorted list of strings::"
msgstr ""
"A função incorporada :func:`dir` é utilizada para descobrir quais os nomes "
"que um módulo define. Devolve uma lista ordenada de *strings*:"

#: ../../tutorial/modules.rst:338
msgid ""
"Without arguments, :func:`dir` lists the names you have defined currently::"
msgstr "Sem argumentos, :func:`dir` lista os nomes que definiu atualmente:"

#: ../../tutorial/modules.rst:346
msgid ""
"Note that it lists all types of names: variables, modules, functions, etc."
msgstr ""
"Note que lista todos os tipos de nomes: variáveis, módulos, funções, etc."

#: ../../tutorial/modules.rst:350
msgid ""
":func:`dir` does not list the names of built-in functions and variables.  If "
"you want a list of those, they are defined in the standard module :mod:"
"`builtins`::"
msgstr ""
":func:`dir` não lista os nomes das funções e variáveis incorporadas. Se "
"pretender uma lista das mesmas, estão definidas no módulo padrão :mod:"
"`builtins`:"

#: ../../tutorial/modules.rst:389
msgid "Packages"
msgstr "Pacotes"

#: ../../tutorial/modules.rst:391
msgid ""
"Packages are a way of structuring Python's module namespace by using "
"\"dotted module names\".  For example, the module name :mod:`!A.B` "
"designates a submodule named ``B`` in a package named ``A``.  Just like the "
"use of modules saves the authors of different modules from having to worry "
"about each other's global variable names, the use of dotted module names "
"saves the authors of multi-module packages like NumPy or Pillow from having "
"to worry about each other's module names."
msgstr ""
"Os pacotes são uma forma de estruturar o espaço de nomes de módulos do "
"Python utilizando \"nomes de módulos com pontos\". Por exemplo, o nome de "
"módulo :mod:`!A.B` designa um submódulo chamado ``B`` num pacote chamado "
"``A``. Tal como o uso de módulos evita que os autores de diferentes módulos "
"tenham de se preocupar com os nomes das variáveis globais uns dos outros, o "
"uso de nomes de módulos com pontos evita que os autores de pacotes com "
"vários módulos, como NumPy ou Pillow, tenham de se preocupar com os nomes "
"dos módulos uns dos outros."

#: ../../tutorial/modules.rst:399
msgid ""
"Suppose you want to design a collection of modules (a \"package\") for the "
"uniform handling of sound files and sound data.  There are many different "
"sound file formats (usually recognized by their extension, for example: :"
"file:`.wav`, :file:`.aiff`, :file:`.au`), so you may need to create and "
"maintain a growing collection of modules for the conversion between the "
"various file formats. There are also many different operations you might "
"want to perform on sound data (such as mixing, adding echo, applying an "
"equalizer function, creating an artificial stereo effect), so in addition "
"you will be writing a never-ending stream of modules to perform these "
"operations.  Here's a possible structure for your package (expressed in "
"terms of a hierarchical filesystem):"
msgstr ""
"Suponha que pretende conceber uma coleção de módulos (um \"pacote\") para o "
"tratamento uniforme de ficheiros de som e dados de som. Existem muitos "
"formatos de ficheiros de som diferentes (geralmente reconhecidos pela sua "
"extensão, por exemplo: :file:`.wav`, :file:`.aiff`, :file:`.au`), pelo que "
"pode precisar de criar e manter uma coleção crescente de módulos para a "
"conversão entre os vários formatos de ficheiros. Também existem muitas "
"operações diferentes que pode querer realizar em dados de som (como "
"misturar, adicionar eco, aplicar uma função de equalizador, criar um efeito "
"estéreo artificial), pelo que, além disso, irá escrever uma série "
"interminável de módulos para realizar estas operações. Eis uma possível "
"estrutura para o seu pacote (expressa em termos de um sistema de ficheiros "
"hierárquico):"

#: ../../tutorial/modules.rst:436
msgid ""
"When importing the package, Python searches through the directories on ``sys."
"path`` looking for the package subdirectory."
msgstr ""
"Ao importar o pacote, o Python pesquisa nos diretórios em ``sys.path`` à "
"procura do subdiretório do pacote."

#: ../../tutorial/modules.rst:439
msgid ""
"The :file:`__init__.py` files are required to make Python treat directories "
"containing the file as packages (unless using a :term:`namespace package`, a "
"relatively advanced feature). This prevents directories with a common name, "
"such as ``string``, from unintentionally hiding valid modules that occur "
"later on the module search path. In the simplest case, :file:`__init__.py` "
"can just be an empty file, but it can also execute initialization code for "
"the package or set the ``__all__`` variable, described later."
msgstr ""
"Os ficheiros :file:`__init__.py` são necessários para que o Python trate os "
"diretórios que os contêm como pacotes (a menos que se utilize um :term:"
"`pacote de espaço de nomes`, uma funcionalidade relativamente avançada). "
"Isto evita que diretórios com nomes comuns, como ``string``, ocultem "
"inadvertidamente módulos válidos que ocorram mais tarde no caminho de "
"pesquisa de módulos. No caso mais simples, :file:`__init__.py` pode ser "
"apenas um ficheiro vazio, mas também pode executar código de inicialização "
"para o pacote ou definir a variável ``__all__``, descrita mais adiante."

#: ../../tutorial/modules.rst:447
msgid ""
"Users of the package can import individual modules from the package, for "
"example::"
msgstr ""
"Os utilizadores do pacote podem importar módulos individuais do pacote, por "
"exemplo:"

#: ../../tutorial/modules.rst:452
msgid ""
"This loads the submodule :mod:`!sound.effects.echo`.  It must be referenced "
"with its full name. ::"
msgstr ""
"Isto carrega o submódulo :mod:`!sound.effects.echo`. Tem de ser referenciado "
"com o seu nome completo:"

#: ../../tutorial/modules.rst:457
msgid "An alternative way of importing the submodule is::"
msgstr "Uma forma alternativa de importar o submódulo é:"

#: ../../tutorial/modules.rst:461
msgid ""
"This also loads the submodule :mod:`!echo`, and makes it available without "
"its package prefix, so it can be used as follows::"
msgstr ""
"Isto também carrega o submódulo :mod:`!echo` e torna-o disponível sem o "
"prefixo do pacote, pelo que pode ser utilizado da seguinte forma:"

#: ../../tutorial/modules.rst:466
msgid ""
"Yet another variation is to import the desired function or variable "
"directly::"
msgstr "Outra variação é importar diretamente a função ou variável pretendida:"

#: ../../tutorial/modules.rst:470
msgid ""
"Again, this loads the submodule :mod:`!echo`, but this makes its function :"
"func:`!echofilter` directly available::"
msgstr ""
"Mais uma vez, isto carrega o submódulo :mod:`!echo`, mas torna a sua função :"
"func:`!echofilter` diretamente disponível:"

#: ../../tutorial/modules.rst:475
msgid ""
"Note that when using ``from package import item``, the item can be either a "
"submodule (or subpackage) of the package, or some  other name defined in the "
"package, like a function, class or variable.  The ``import`` statement first "
"tests whether the item is defined in the package; if not, it assumes it is a "
"module and attempts to load it.  If it fails to find it, an :exc:"
"`ImportError` exception is raised."
msgstr ""
"Note que, ao utilizar ``from package import item``, o item pode ser um "
"submódulo (ou subpacote) do pacote, ou algum outro nome definido no pacote, "
"como uma função, classe ou variável. A instrução ``import`` primeiro "
"verifica se o item está definido no pacote; se não estiver, assume que é um "
"módulo e tenta carregá-lo. Se não o encontrar, é levantada uma exceção :exc:"
"`ImportError`."

#: ../../tutorial/modules.rst:482
msgid ""
"Contrarily, when using syntax like ``import item.subitem.subsubitem``, each "
"item except for the last must be a package; the last item can be a module or "
"a package but can't be a class or function or variable defined in the "
"previous item."
msgstr ""
"Pelo contrário, ao utilizar a sintaxe ``import item.subitem.subsubitem``, "
"cada item, exceto o último, tem de ser um pacote; o último item pode ser um "
"módulo ou um pacote, mas não pode ser uma classe, função ou variável "
"definida no item anterior."

#: ../../tutorial/modules.rst:491
msgid "Importing \\* From a Package"
msgstr "Importar \\* de um pacote"

#: ../../tutorial/modules.rst:495
msgid ""
"Now what happens when the user writes ``from sound.effects import *``?  "
"Ideally, one would hope that this somehow goes out to the filesystem, finds "
"which submodules are present in the package, and imports them all.  This "
"could take a long time and importing sub-modules might have unwanted side-"
"effects that should only happen when the sub-module is explicitly imported."
msgstr ""
"O que acontece quando o utilizador escreve ``from sound.effects import *``? "
"Idealmente, gostaríamos que isto de alguma forma fosse ao sistema de "
"ficheiros, descobrisse quais os submódulos presentes no pacote e os "
"importasse todos. Isto poderia demorar muito tempo e importar submódulos "
"poderia ter efeitos secundários indesejados que só deveriam ocorrer quando o "
"submódulo é importado explicitamente."

#: ../../tutorial/modules.rst:501
msgid ""
"The only solution is for the package author to provide an explicit index of "
"the package.  The :keyword:`import` statement uses the following convention: "
"if a package's :file:`__init__.py` code defines a list named ``__all__``, it "
"is taken to be the list of module names that should be imported when ``from "
"package import *`` is encountered.  It is up to the package author to keep "
"this list up-to-date when a new version of the package is released.  Package "
"authors may also decide not to support it, if they don't see a use for "
"importing \\* from their package.  For example, the file :file:`sound/"
"effects/__init__.py` could contain the following code::"
msgstr ""
"A única solução é o autor do pacote fornecer um índice explícito do pacote. "
"A instrução :keyword:`import` utiliza a seguinte convenção: se o código :"
"file:`__init__.py` de um pacote definir uma lista chamada ``__all__``, esta "
"é considerada a lista de nomes de módulos que devem ser importados quando "
"``from package import *`` é encontrado. Cabe ao autor do pacote manter esta "
"lista atualizada quando uma nova versão do pacote é lançada. Os autores de "
"pacotes também podem decidir não suportá-la, se não virem utilidade em "
"importar \\* do seu pacote. Por exemplo, o ficheiro :file:`sound/effects/"
"__init__.py` poderia conter o seguinte código:"

#: ../../tutorial/modules.rst:513
msgid ""
"This would mean that ``from sound.effects import *`` would import the three "
"named submodules of the :mod:`!sound.effects` package."
msgstr ""
"Isto significaria que ``from sound.effects import *`` importaria os três "
"submódulos nomeados do pacote :mod:`!sound.effects`."

#: ../../tutorial/modules.rst:516
msgid ""
"Be aware that submodules might become shadowed by locally defined names. For "
"example, if you added a ``reverse`` function to the :file:`sound/effects/"
"__init__.py` file, the ``from sound.effects import *`` would only import the "
"two submodules ``echo`` and ``surround``, but *not* the ``reverse`` "
"submodule, because it is shadowed by the locally defined ``reverse`` "
"function::"
msgstr ""
"Tenha em atenção que os submódulos podem ser ocultados por nomes definidos "
"localmente. Por exemplo, se adicionar uma função ``reverse`` ao ficheiro :"
"file:`sound/effects/__init__.py`, o ``from sound.effects import *`` apenas "
"importaria os dois submódulos ``echo`` e ``surround``, mas *não* o submódulo "
"``reverse``, porque é ocultado pela função ``reverse`` definida localmente:"

#: ../../tutorial/modules.rst:532
msgid ""
"If ``__all__`` is not defined, the statement ``from sound.effects import *`` "
"does *not* import all submodules from the package :mod:`!sound.effects` into "
"the current namespace; it only ensures that the package :mod:`!sound."
"effects` has been imported (possibly running any initialization code in :"
"file:`__init__.py`) and then imports whatever names are defined in the "
"package.  This includes any names defined (and submodules explicitly loaded) "
"by :file:`__init__.py`.  It also includes any submodules of the package that "
"were explicitly loaded by previous :keyword:`import` statements.  Consider "
"this code::"
msgstr ""
"Se ``__all__`` não estiver definido, a instrução ``from sound.effects import "
"*`` *não* importa todos os submódulos do pacote :mod:`!sound.effects` para o "
"espaço de nomes atual; apenas garante que o pacote :mod:`!sound.effects` foi "
"importado (possivelmente executando qualquer código de inicialização em :"
"file:`__init__.py`) e, em seguida, importa quaisquer nomes definidos no "
"pacote. Isto inclui quaisquer nomes definidos (e submódulos carregados "
"explicitamente) por :file:`__init__.py`. Também inclui quaisquer submódulos "
"do pacote que tenham sido carregados explicitamente por instruções :keyword:"
"`import` anteriores. Considere este código:"

#: ../../tutorial/modules.rst:545
msgid ""
"In this example, the :mod:`!echo` and :mod:`!surround` modules are imported "
"in the current namespace because they are defined in the :mod:`!sound."
"effects` package when the ``from...import`` statement is executed.  (This "
"also works when ``__all__`` is defined.)"
msgstr ""
"Neste exemplo, os módulos :mod:`!echo` e :mod:`!surround` são importados "
"para o espaço de nomes atual porque estão definidos no pacote :mod:`!sound."
"effects` quando a instrução ``from...import`` é executada. (Isto também "
"funciona quando ``__all__`` está definido.)"

#: ../../tutorial/modules.rst:550
msgid ""
"Although certain modules are designed to export only names that follow "
"certain patterns when you use ``import *``, it is still considered bad "
"practice in production code."
msgstr ""
"Embora alguns módulos sejam concebidos para exportar apenas nomes que seguem "
"certos padrões quando utiliza ``import *``, ainda é considerada uma má "
"prática em código de produção."

#: ../../tutorial/modules.rst:554
msgid ""
"Remember, there is nothing wrong with using ``from package import "
"specific_submodule``!  In fact, this is the recommended notation unless the "
"importing module needs to use submodules with the same name from different "
"packages."
msgstr ""
"Lembre-se, não há nada de errado em utilizar ``from package import "
"specific_submodule``! Na verdade, esta é a notação recomendada, a menos que "
"o módulo importador precise de utilizar submódulos com o mesmo nome de "
"pacotes diferentes."

#: ../../tutorial/modules.rst:563
msgid "Intra-package References"
msgstr "Referências intra-pacote"

#: ../../tutorial/modules.rst:565
msgid ""
"When packages are structured into subpackages (as with the :mod:`!sound` "
"package in the example), you can use absolute imports to refer to submodules "
"of siblings packages.  For example, if the module :mod:`!sound.filters."
"vocoder` needs to use the :mod:`!echo` module in the :mod:`!sound.effects` "
"package, it can use ``from sound.effects import echo``."
msgstr ""
"Quando os pacotes são estruturados em subpacotes (como no exemplo do pacote :"
"mod:`!sound`), pode utilizar importações absolutas para referir submódulos "
"de pacotes irmãos. Por exemplo, se o módulo :mod:`!sound.filters.vocoder` "
"precisar de utilizar o módulo :mod:`!echo` no pacote :mod:`!sound.effects`, "
"pode utilizar ``from sound.effects import echo``."

#: ../../tutorial/modules.rst:571
msgid ""
"You can also write relative imports, with the ``from module import name`` "
"form of import statement.  These imports use leading dots to indicate the "
"current and parent packages involved in the relative import.  From the :mod:"
"`!surround` module for example, you might use::"
msgstr ""
"Também pode escrever importações relativas, com a forma de instrução de "
"importação ``from module import name``. Estas importações utilizam pontos "
"iniciais para indicar os pacotes atual e pai envolvidos na importação "
"relativa. Do módulo :mod:`!surround`, por exemplo, pode utilizar:"

#: ../../tutorial/modules.rst:580
msgid ""
"Note that relative imports are based on the name of the current module.  "
"Since the name of the main module is always ``\"__main__\"``, modules "
"intended for use as the main module of a Python application must always use "
"absolute imports."
msgstr ""

#: ../../tutorial/modules.rst:586
msgid "Packages in Multiple Directories"
msgstr "Pacotes em vários diretórios"

#: ../../tutorial/modules.rst:588
msgid ""
"Packages support one more special attribute, :attr:`__path__`.  This is "
"initialized to be a list containing the name of the directory holding the "
"package's :file:`__init__.py` before the code in that file is executed.  "
"This variable can be modified; doing so affects future searches for modules "
"and subpackages contained in the package."
msgstr ""

#: ../../tutorial/modules.rst:594
msgid ""
"While this feature is not often needed, it can be used to extend the set of "
"modules found in a package."
msgstr ""
"Embora esta funcionalidade não seja frequentemente necessária, pode ser "
"utilizada para estender o conjunto de módulos encontrados num pacote."

#: ../../tutorial/modules.rst:599
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../tutorial/modules.rst:600
msgid ""
"In fact function definitions are also 'statements' that are 'executed'; the "
"execution of a module-level function definition adds the function name to "
"the module's global namespace."
msgstr ""
"De facto, as definições de funções também são 'instruções' que são "
"'executadas'; a execução de uma definição de função ao nível do módulo "
"adiciona o nome da função ao espaço de nomes global do módulo."

#: ../../tutorial/modules.rst:184 ../../tutorial/modules.rst:267
#: ../../tutorial/modules.rst:348
msgid "module"
msgstr "módulo"

#: ../../tutorial/modules.rst:184
msgid "search"
msgstr "pesquisa"

#: ../../tutorial/modules.rst:184
msgid "path"
msgstr "caminho"

#: ../../tutorial/modules.rst:267
msgid "sys"
msgstr "sys"

#: ../../tutorial/modules.rst:348
msgid "builtins"
msgstr "integrados"

#: ../../tutorial/modules.rst:493
msgid "__all__"
msgstr "__all__"
