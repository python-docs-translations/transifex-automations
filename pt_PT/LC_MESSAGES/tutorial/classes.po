# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 17:17+0000\n"
"PO-Revision-Date: 2025-09-22 15:58+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../tutorial/classes.rst:5
msgid "Classes"
msgstr "Classes"

#: ../../tutorial/classes.rst:7
msgid ""
"Classes provide a means of bundling data and functionality together.  "
"Creating a new class creates a new *type* of object, allowing new "
"*instances* of that type to be made.  Each class instance can have "
"attributes attached to it for maintaining its state.  Class instances can "
"also have methods (defined by its class) for modifying its state."
msgstr ""
"As classes fornecem uma forma de agrupar dados e funcionalidade. Criar uma "
"nova classe cria um novo *tipo* de objeto, permitindo a criação de novas "
"*instâncias* desse tipo. Cada instância de classe pode ter atributos "
"associados para manter o seu estado. As instâncias de classe também podem "
"ter métodos (definidos pela sua classe) para modificar o seu estado."

#: ../../tutorial/classes.rst:13
msgid ""
"Compared with other programming languages, Python's class mechanism adds "
"classes with a minimum of new syntax and semantics.  It is a mixture of the "
"class mechanisms found in C++ and Modula-3.  Python classes provide all the "
"standard features of Object Oriented Programming: the class inheritance "
"mechanism allows multiple base classes, a derived class can override any "
"methods of its base class or classes, and a method can call the method of a "
"base class with the same name.  Objects can contain arbitrary amounts and "
"kinds of data.  As is true for modules, classes partake of the dynamic "
"nature of Python: they are created at runtime, and can be modified further "
"after creation."
msgstr ""
"Comparando com outras linguagens de programação, o mecanismo de classes do "
"Python adiciona classes com um mínimo de nova sintaxe e semântica. É uma "
"mistura dos mecanismos de classes encontrados em C++ e Modula-3. As classes "
"Python fornecem todas as funcionalidades padrão da Programação Orientada a "
"Objetos: o mecanismo de herança de classes permite múltiplas classes base, "
"uma classe derivada pode substituir quaisquer métodos da sua classe base, e "
"um método pode chamar o método de uma classe base com o mesmo nome. Os "
"objetos podem conter quantidades e tipos arbitrários de dados. Tal como "
"acontece com os módulos, as classes partilham da natureza dinâmica do "
"Python: são criadas em tempo de execução e podem ser modificadas "
"posteriormente."

#: ../../tutorial/classes.rst:23
msgid ""
"In C++ terminology, normally class members (including the data members) are "
"*public* (except see below :ref:`tut-private`), and all member functions are "
"*virtual*.  As in Modula-3, there are no shorthands for referencing the "
"object's members from its methods: the method function is declared with an "
"explicit first argument representing the object, which is provided "
"implicitly by the call.  As in Smalltalk, classes themselves are objects.  "
"This provides semantics for importing and renaming.  Unlike C++ and "
"Modula-3, built-in types can be used as base classes for extension by the "
"user.  Also, like in C++, most built-in operators with special syntax "
"(arithmetic operators, subscripting etc.) can be redefined for class "
"instances."
msgstr ""
"Em terminologia C++, os membros de classe (incluindo os membros de dados) "
"são normalmente *públicos* (exceto conforme descrito em :ref:`tut-private`), "
"e todas as funções membro são *virtuais*. Tal como em Modula-3, não existem "
"atalhos para referenciar os membros do objeto a partir dos seus métodos: a "
"função do método é declarada com um primeiro argumento explícito que "
"representa o objeto, fornecido implicitamente pela chamada. Tal como em "
"Smalltalk, as classes em si são objetos. Isto fornece semântica para "
"importação e renomeação. Ao contrário de C++ e Modula-3, os tipos "
"incorporados podem ser usados como classes base para extensão pelo "
"utilizador. Além disso, tal como em C++, a maioria dos operadores "
"incorporados com sintaxe especial (operadores aritméticos, indexação, etc.) "
"podem ser redefinidos para instâncias de classe."

#: ../../tutorial/classes.rst:34
msgid ""
"(Lacking universally accepted terminology to talk about classes, I will make "
"occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, "
"since its object-oriented semantics are closer to those of Python than C++, "
"but I expect that few readers have heard of it.)"
msgstr ""
"(Faltando uma terminologia universalmente aceite para falar sobre classes, "
"farei uso ocasional de termos de Smalltalk e C++. Usaria termos de Modula-3, "
"já que a sua semântica orientada a objetos é mais próxima da do Python do "
"que a do C++, mas espero que poucos leitores tenham ouvido falar dela.)"

#: ../../tutorial/classes.rst:43
msgid "A Word About Names and Objects"
msgstr "Uma palavra sobre nomes e objetos"

#: ../../tutorial/classes.rst:45
msgid ""
"Objects have individuality, and multiple names (in multiple scopes) can be "
"bound to the same object.  This is known as aliasing in other languages.  "
"This is usually not appreciated on a first glance at Python, and can be "
"safely ignored when dealing with immutable basic types (numbers, strings, "
"tuples).  However, aliasing has a possibly surprising effect on the "
"semantics of Python code involving mutable objects such as lists, "
"dictionaries, and most other types. This is usually used to the benefit of "
"the program, since aliases behave like pointers in some respects.  For "
"example, passing an object is cheap since only a pointer is passed by the "
"implementation; and if a function modifies an object passed as an argument, "
"the caller will see the change --- this eliminates the need for two "
"different argument passing mechanisms as in Pascal."
msgstr ""
"Os objetos têm individualidade, e vários nomes (em vários âmbitos) podem "
"estar associados ao mesmo objeto. Isto é conhecido como *alias* noutras "
"linguagens. Isto geralmente não é apreciado à primeira vista no Python, e "
"pode ser ignorado com segurança ao lidar com tipos básicos imutáveis "
"(números, strings, tuplos). No entanto, o *alias* tem um efeito "
"possivelmente surpreendente na semântica do código Python que envolve "
"objetos mutáveis, como listas, dicionários e a maioria dos outros tipos. "
"Isto é geralmente usado em benefício do programa, já que os *aliases* "
"comportam-se como ponteiros em alguns aspetos. Por exemplo, passar um objeto "
"é económico, pois apenas um ponteiro é passado pela implementação; e se uma "
"função modificar um objeto passado como argumento, o chamador verá a "
"alteração — isto elimina a necessidade de dois mecanismos diferentes de "
"passagem de argumentos, como em Pascal."

#: ../../tutorial/classes.rst:61
msgid "Python Scopes and Namespaces"
msgstr "Âmbitos e espaços de nomes do Python"

#: ../../tutorial/classes.rst:63
msgid ""
"Before introducing classes, I first have to tell you something about "
"Python's scope rules.  Class definitions play some neat tricks with "
"namespaces, and you need to know how scopes and namespaces work to fully "
"understand what's going on. Incidentally, knowledge about this subject is "
"useful for any advanced Python programmer."
msgstr ""
"Antes de introduzir classes, tenho primeiro de explicar algo sobre as regras "
"de âmbito do Python. As definições de classe usam alguns truques "
"interessantes com espaços de nomes, e é necessário saber como funcionam os "
"âmbitos e os espaços de nomes para compreender plenamente o que se passa. "
"Aliás, o conhecimento sobre este assunto é útil para qualquer programador "
"avançado de Python."

#: ../../tutorial/classes.rst:69
msgid "Let's begin with some definitions."
msgstr "Vamos começar com algumas definições."

#: ../../tutorial/classes.rst:71
msgid ""
"A *namespace* is a mapping from names to objects.  Most namespaces are "
"currently implemented as Python dictionaries, but that's normally not "
"noticeable in any way (except for performance), and it may change in the "
"future.  Examples of namespaces are: the set of built-in names (containing "
"functions such as :func:`abs`, and built-in exception names); the global "
"names in a module; and the local names in a function invocation.  In a sense "
"the set of attributes of an object also form a namespace.  The important "
"thing to know about namespaces is that there is absolutely no relation "
"between names in different namespaces; for instance, two different modules "
"may both define a function ``maximize`` without confusion --- users of the "
"modules must prefix it with the module name."
msgstr ""
"Um *espaço de nomes* é um mapeamento de nomes para objetos. A maioria dos "
"espaços de nomes são atualmente implementados como dicionários Python, mas "
"isso normalmente não é notável de qualquer forma (exceto em termos de "
"desempenho), e pode mudar no futuro. Exemplos de espaços de nomes são: o "
"conjunto de nomes incorporados (contendo funções como :func:`abs`, e nomes "
"de exceções incorporadas); os nomes globais num módulo; e os nomes locais "
"numa invocação de função. Num certo sentido, o conjunto de atributos de um "
"objeto também forma um espaço de nomes. A coisa importante a saber sobre "
"espaços de nomes é que não existe qualquer relação entre nomes em diferentes "
"espaços de nomes; por exemplo, dois módulos diferentes podem ambos definir "
"uma função ``maximize`` sem confusão — os utilizadores dos módulos devem "
"prefixá-la com o nome do módulo."

#: ../../tutorial/classes.rst:82
msgid ""
"By the way, I use the word *attribute* for any name following a dot --- for "
"example, in the expression ``z.real``, ``real`` is an attribute of the "
"object ``z``.  Strictly speaking, references to names in modules are "
"attribute references: in the expression ``modname.funcname``, ``modname`` is "
"a module object and ``funcname`` is an attribute of it.  In this case there "
"happens to be a straightforward mapping between the module's attributes and "
"the global names defined in the module: they share the same namespace!  [#]_"
msgstr ""
"A propósito, uso a palavra *atributo* para qualquer nome que siga um ponto — "
"por exemplo, na expressão ``z.real``, ``real`` é um atributo do objeto "
"``z``. Falando estritamente, as referências a nomes em módulos são "
"referências de atributos: na expressão ``modname.funcname``, ``modname`` é "
"um objeto de módulo e ``funcname`` é um atributo desse objeto. Neste caso, "
"existe um mapeamento direto entre os atributos do módulo e os nomes globais "
"definidos no módulo: partilham o mesmo espaço de nomes!"

#: ../../tutorial/classes.rst:90
msgid ""
"Attributes may be read-only or writable.  In the latter case, assignment to "
"attributes is possible.  Module attributes are writable: you can write "
"``modname.the_answer = 42``.  Writable attributes may also be deleted with "
"the :keyword:`del` statement.  For example, ``del modname.the_answer`` will "
"remove the attribute :attr:`the_answer` from the object named by ``modname``."
msgstr ""

#: ../../tutorial/classes.rst:96
msgid ""
"Namespaces are created at different moments and have different lifetimes.  "
"The namespace containing the built-in names is created when the Python "
"interpreter starts up, and is never deleted.  The global namespace for a "
"module is created when the module definition is read in; normally, module "
"namespaces also last until the interpreter quits.  The statements executed "
"by the top-level invocation of the interpreter, either read from a script "
"file or interactively, are considered part of a module called :mod:"
"`__main__`, so they have their own global namespace.  (The built-in names "
"actually also live in a module; this is called :mod:`builtins`.)"
msgstr ""
"Os espaços de nomes são criados em momentos diferentes e têm tempos de vida "
"distintos. O espaço de nomes que contém os nomes incorporados é criado "
"quando o interpretador Python é iniciado e nunca é eliminado. O espaço de "
"nomes global para um módulo é criado quando a definição do módulo é lida; "
"normalmente, os espaços de nomes dos módulos também duram até que o "
"interpretador termine. As instruções executadas pela invocação de nível "
"superior do interpretador, lidas a partir de um ficheiro de script ou "
"interativamente, são consideradas parte de um módulo chamado :mod:"
"`__main__`, pelo que têm o seu próprio espaço de nomes global. (Os nomes "
"incorporados residem, de facto, num módulo; este é chamado :mod:`builtins`.)"

#: ../../tutorial/classes.rst:106
msgid ""
"The local namespace for a function is created when the function is called, "
"and deleted when the function returns or raises an exception that is not "
"handled within the function.  (Actually, forgetting would be a better way to "
"describe what actually happens.)  Of course, recursive invocations each have "
"their own local namespace."
msgstr ""
"O espaço de nomes local para uma função é criado quando a função é chamada e "
"eliminado quando a função retorna ou levanta uma exceção que não é tratada "
"dentro da função. (Na verdade, esquecer seria uma melhor forma de descrever "
"o que realmente acontece.) Claro, invocações recursivas têm cada uma o seu "
"próprio espaço de nomes local."

#: ../../tutorial/classes.rst:112
msgid ""
"A *scope* is a textual region of a Python program where a namespace is "
"directly accessible.  \"Directly accessible\" here means that an unqualified "
"reference to a name attempts to find the name in the namespace."
msgstr ""
"Um *âmbito* é uma região textual de um programa Python onde um espaço de "
"nomes é diretamente acessível. \"Diretamente acessível\" significa aqui que "
"uma referência não qualificada a um nome tenta encontrar o nome no espaço de "
"nomes."

#: ../../tutorial/classes.rst:116
msgid ""
"Although scopes are determined statically, they are used dynamically. At any "
"time during execution, there are 3 or 4 nested scopes whose namespaces are "
"directly accessible:"
msgstr ""
"Embora os âmbitos sejam determinados estaticamente, são usados "
"dinamicamente. Em qualquer momento durante a execução, existem 3 ou 4 "
"âmbitos aninhados cujos espaços de nomes são diretamente acessíveis:"

#: ../../tutorial/classes.rst:120
msgid "the innermost scope, which is searched first, contains the local names"
msgstr ""
"o âmbito mais interno, que é pesquisado primeiro, contém os nomes locais"

#: ../../tutorial/classes.rst:121
msgid ""
"the scopes of any enclosing functions, which are searched starting with the "
"nearest enclosing scope, contain non-local, but also non-global names"
msgstr ""
"os âmbitos de quaisquer funções envolventes, que são pesquisados começando "
"com o âmbito envolvente mais próximo, contêm nomes não-locais, mas também "
"não-globais"

#: ../../tutorial/classes.rst:123
msgid "the next-to-last scope contains the current module's global names"
msgstr "o penúltimo âmbito contém os nomes globais do módulo atual"

#: ../../tutorial/classes.rst:124
msgid ""
"the outermost scope (searched last) is the namespace containing built-in "
"names"
msgstr ""
"o âmbito mais externo (pesquisado por último) é o espaço de nomes que contém "
"os nomes incorporados"

#: ../../tutorial/classes.rst:126
msgid ""
"If a name is declared global, then all references and assignments go "
"directly to the next-to-last scope containing the module's global names.  To "
"rebind variables found outside of the innermost scope, the :keyword:"
"`nonlocal` statement can be used; if not declared nonlocal, those variables "
"are read-only (an attempt to write to such a variable will simply create a "
"*new* local variable in the innermost scope, leaving the identically named "
"outer variable unchanged)."
msgstr ""
"Se um nome for declarado global, então todas as referências e atribuições "
"vão diretamente para o penúltimo âmbito que contém os nomes globais do "
"módulo. Para reatribuir variáveis encontradas fora do âmbito mais interno, "
"pode ser usada a instrução :keyword:`nonlocal`; se não forem declaradas como "
"nonlocal, essas variáveis são apenas de leitura (uma tentativa de escrita "
"numa dessas variáveis criará simplesmente uma *nova* variável local no "
"âmbito mais interno, deixando a variável externa com o mesmo nome "
"inalterada)."

#: ../../tutorial/classes.rst:133
msgid ""
"Usually, the local scope references the local names of the (textually) "
"current function.  Outside functions, the local scope references the same "
"namespace as the global scope: the module's namespace. Class definitions "
"place yet another namespace in the local scope."
msgstr ""
"Normalmente, o âmbito local refere-se aos nomes locais da função "
"(textualmente) atual. Fora das funções, o âmbito local refere-se ao mesmo "
"espaço de nomes que o âmbito global: o espaço de nomes do módulo. As "
"definições de classe colocam ainda outro espaço de nomes no âmbito local."

#: ../../tutorial/classes.rst:138
msgid ""
"It is important to realize that scopes are determined textually: the global "
"scope of a function defined in a module is that module's namespace, no "
"matter from where or by what alias the function is called.  On the other "
"hand, the actual search for names is done dynamically, at run time --- "
"however, the language definition is evolving towards static name resolution, "
"at \"compile\" time, so don't rely on dynamic name resolution!  (In fact, "
"local variables are already determined statically.)"
msgstr ""
"É importante perceber que os âmbitos são determinados textualmente: o âmbito "
"global de uma função definida num módulo é o espaço de nomes desse módulo, "
"independentemente de onde ou por que alias a função é chamada. Por outro "
"lado, a pesquisa real de nomes é feita dinamicamente, em tempo de execução — "
"no entanto, a definição da linguagem está a evoluir para a resolução "
"estática de nomes, em tempo de \"compilação\", pelo que não deve confiar na "
"resolução dinâmica de nomes! (De facto, as variáveis locais já são "
"determinadas estaticamente.)"

#: ../../tutorial/classes.rst:146
msgid ""
"A special quirk of Python is that -- if no :keyword:`global` or :keyword:"
"`nonlocal` statement is in effect -- assignments to names always go into the "
"innermost scope. Assignments do not copy data --- they just bind names to "
"objects.  The same is true for deletions: the statement ``del x`` removes "
"the binding of ``x`` from the namespace referenced by the local scope.  In "
"fact, all operations that introduce new names use the local scope: in "
"particular, :keyword:`import` statements and function definitions bind the "
"module or function name in the local scope."
msgstr ""
"Uma particularidade especial do Python é que — se nenhuma instrução :keyword:"
"`global` ou :keyword:`nonlocal` estiver em vigor — as atribuições a nomes "
"vão sempre para o âmbito mais interno. As atribuições não copiam dados — "
"apenas associam nomes a objetos. O mesmo é verdade para as eliminações: a "
"instrução ``del x`` remove a associação de ``x`` do espaço de nomes "
"referenciado pelo âmbito local. De facto, todas as operações que introduzem "
"novos nomes usam o âmbito local: em particular, as instruções :keyword:"
"`import` e as definições de funções associam o nome do módulo ou da função "
"no âmbito local."

#: ../../tutorial/classes.rst:154
msgid ""
"The :keyword:`global` statement can be used to indicate that particular "
"variables live in the global scope and should be rebound there; the :keyword:"
"`nonlocal` statement indicates that particular variables live in an "
"enclosing scope and should be rebound there."
msgstr ""
"A instrução :keyword:`global` pode ser usada para indicar que certas "
"variáveis vivem no âmbito global e devem ser reatribuídas lá; a instrução :"
"keyword:`nonlocal` indica que certas variáveis vivem num âmbito envolvente e "
"devem ser reatribuídas lá."

#: ../../tutorial/classes.rst:162
msgid "Scopes and Namespaces Example"
msgstr "Exemplo de âmbitos e espaços de nomes"

#: ../../tutorial/classes.rst:164
msgid ""
"This is an example demonstrating how to reference the different scopes and "
"namespaces, and how :keyword:`global` and :keyword:`nonlocal` affect "
"variable binding::"
msgstr ""
"Este é um exemplo que demonstra como referenciar os diferentes âmbitos e "
"espaços de nomes, e como :keyword:`global` e :keyword:`nonlocal` afetam a "
"ligação de variáveis:"

#: ../../tutorial/classes.rst:191
msgid "The output of the example code is:"
msgstr "A saída do código de exemplo é:"

#: ../../tutorial/classes.rst:200
msgid ""
"Note how the *local* assignment (which is default) didn't change "
"*scope_test*\\'s binding of *spam*.  The :keyword:`nonlocal` assignment "
"changed *scope_test*\\'s binding of *spam*, and the :keyword:`global` "
"assignment changed the module-level binding."
msgstr ""
"Note como a atribuição *local* (que é a predefinida) não alterou a ligação "
"de *spam* em *teste_ambito*. A atribuição :keyword:`nonlocal` alterou a "
"ligação de *spam* em *teste_ambito*, e a atribuição :keyword:`global` "
"alterou a ligação ao nível do módulo."

#: ../../tutorial/classes.rst:205
msgid ""
"You can also see that there was no previous binding for *spam* before the :"
"keyword:`global` assignment."
msgstr ""
"Também pode ver que não havia nenhuma ligação anterior para *spam* antes da "
"atribuição :keyword:`global`."

#: ../../tutorial/classes.rst:212
msgid "A First Look at Classes"
msgstr "Uma primeira olhadela às classes"

#: ../../tutorial/classes.rst:214
msgid ""
"Classes introduce a little bit of new syntax, three new object types, and "
"some new semantics."
msgstr ""
"As classes introduzem um pouco de nova sintaxe, três novos tipos de objetos "
"e alguma nova semântica."

#: ../../tutorial/classes.rst:221
msgid "Class Definition Syntax"
msgstr "Sintaxe de definição de classe"

#: ../../tutorial/classes.rst:223
msgid "The simplest form of class definition looks like this::"
msgstr "A forma mais simples de definição de classe parece com isto:"

#: ../../tutorial/classes.rst:232
msgid ""
"Class definitions, like function definitions (:keyword:`def` statements) "
"must be executed before they have any effect.  (You could conceivably place "
"a class definition in a branch of an :keyword:`if` statement, or inside a "
"function.)"
msgstr ""
"As definições de classe, tal como as definições de funções (instruções :"
"keyword:`def`), devem ser executadas antes de terem qualquer efeito. "
"(Poderia concebivelmente colocar uma definição de classe num ramo de uma "
"instrução :keyword:`if`, ou dentro de uma função.)"

#: ../../tutorial/classes.rst:236
msgid ""
"In practice, the statements inside a class definition will usually be "
"function definitions, but other statements are allowed, and sometimes useful "
"--- we'll come back to this later.  The function definitions inside a class "
"normally have a peculiar form of argument list, dictated by the calling "
"conventions for methods --- again, this is explained later."
msgstr ""
"Na prática, as instruções dentro de uma definição de classe serão "
"normalmente definições de funções, mas outras instruções são permitidas e, "
"por vezes, úteis — voltaremos a isto mais tarde. As definições de funções "
"dentro de uma classe têm normalmente uma forma peculiar de lista de "
"argumentos, ditada pelas convenções de chamada para métodos — novamente, "
"isto é explicado mais tarde."

#: ../../tutorial/classes.rst:242
msgid ""
"When a class definition is entered, a new namespace is created, and used as "
"the local scope --- thus, all assignments to local variables go into this "
"new namespace.  In particular, function definitions bind the name of the new "
"function here."
msgstr ""
"Quando uma definição de classe é introduzida, é criado um novo espaço de "
"nomes e usado como âmbito local — assim, todas as atribuições a variáveis "
"locais vão para este novo espaço de nomes. Em particular, as definições de "
"funções associam o nome da nova função aqui."

#: ../../tutorial/classes.rst:247
msgid ""
"When a class definition is left normally (via the end), a *class object* is "
"created.  This is basically a wrapper around the contents of the namespace "
"created by the class definition; we'll learn more about class objects in the "
"next section.  The original local scope (the one in effect just before the "
"class definition was entered) is reinstated, and the class object is bound "
"here to the class name given in the class definition header (:class:"
"`ClassName` in the example)."
msgstr ""

#: ../../tutorial/classes.rst:259
msgid "Class Objects"
msgstr "Objetos de classe"

#: ../../tutorial/classes.rst:261
msgid ""
"Class objects support two kinds of operations: attribute references and "
"instantiation."
msgstr ""
"Os objetos de classe suportam dois tipos de operações: referências de "
"atributos e instanciação."

#: ../../tutorial/classes.rst:264
msgid ""
"*Attribute references* use the standard syntax used for all attribute "
"references in Python: ``obj.name``.  Valid attribute names are all the names "
"that were in the class's namespace when the class object was created.  So, "
"if the class definition looked like this::"
msgstr ""
"As *referências de atributos* usam a sintaxe padrão usada para todas as "
"referências de atributos em Python: ``obj.name``. Os nomes de atributos "
"válidos são todos os nomes que estavam no espaço de nomes da classe quando o "
"objeto de classe foi criado. Assim, se a definição de classe fosse assim:"

#: ../../tutorial/classes.rst:276
msgid ""
"then ``MyClass.i`` and ``MyClass.f`` are valid attribute references, "
"returning an integer and a function object, respectively. Class attributes "
"can also be assigned to, so you can change the value of ``MyClass.i`` by "
"assignment. :attr:`__doc__` is also a valid attribute, returning the "
"docstring belonging to the class: ``\"A simple example class\"``."
msgstr ""

#: ../../tutorial/classes.rst:282
msgid ""
"Class *instantiation* uses function notation.  Just pretend that the class "
"object is a parameterless function that returns a new instance of the class. "
"For example (assuming the above class)::"
msgstr ""
"A *instanciação* de classe usa notação de função. Basta fingir que o objeto "
"de classe é uma função sem parâmetros que devolve uma nova instância da "
"classe. Por exemplo (assumindo a classe acima):"

#: ../../tutorial/classes.rst:288
msgid ""
"creates a new *instance* of the class and assigns this object to the local "
"variable ``x``."
msgstr ""
"cria uma nova *instância* da classe e atribui este objeto à variável local "
"``x``."

#: ../../tutorial/classes.rst:291
msgid ""
"The instantiation operation (\"calling\" a class object) creates an empty "
"object. Many classes like to create objects with instances customized to a "
"specific initial state. Therefore a class may define a special method named :"
"meth:`__init__`, like this::"
msgstr ""

#: ../../tutorial/classes.rst:299
msgid ""
"When a class defines an :meth:`__init__` method, class instantiation "
"automatically invokes :meth:`__init__` for the newly created class "
"instance.  So in this example, a new, initialized instance can be obtained "
"by::"
msgstr ""

#: ../../tutorial/classes.rst:305
msgid ""
"Of course, the :meth:`__init__` method may have arguments for greater "
"flexibility.  In that case, arguments given to the class instantiation "
"operator are passed on to :meth:`__init__`.  For example, ::"
msgstr ""

#: ../../tutorial/classes.rst:322
msgid "Instance Objects"
msgstr "Objetos de instância"

#: ../../tutorial/classes.rst:324
msgid ""
"Now what can we do with instance objects?  The only operations understood by "
"instance objects are attribute references.  There are two kinds of valid "
"attribute names: data attributes and methods."
msgstr ""
"O que podemos fazer com objetos de instância? As únicas operações "
"compreendidas pelos objetos de instância são referências de atributos. "
"Existem dois tipos de nomes de atributos válidos: atributos de dados e "
"métodos."

#: ../../tutorial/classes.rst:328
msgid ""
"*Data attributes* correspond to \"instance variables\" in Smalltalk, and to "
"\"data members\" in C++.  Data attributes need not be declared; like local "
"variables, they spring into existence when they are first assigned to.  For "
"example, if ``x`` is the instance of :class:`MyClass` created above, the "
"following piece of code will print the value ``16``, without leaving a "
"trace::"
msgstr ""

#: ../../tutorial/classes.rst:340
msgid ""
"The other kind of instance attribute reference is a *method*. A method is a "
"function that \"belongs to\" an object.  (In Python, the term method is not "
"unique to class instances: other object types can have methods as well.  For "
"example, list objects have methods called append, insert, remove, sort, and "
"so on. However, in the following discussion, we'll use the term method "
"exclusively to mean methods of class instance objects, unless explicitly "
"stated otherwise.)"
msgstr ""

#: ../../tutorial/classes.rst:349
msgid ""
"Valid method names of an instance object depend on its class.  By "
"definition, all attributes of a class that are function  objects define "
"corresponding methods of its instances.  So in our example, ``x.f`` is a "
"valid method reference, since ``MyClass.f`` is a function, but ``x.i`` is "
"not, since ``MyClass.i`` is not.  But ``x.f`` is not the same thing as "
"``MyClass.f`` --- it is a *method object*, not a function object."
msgstr ""
"Os nomes de métodos válidos de um objeto de instância dependem da sua "
"classe. Por definição, todos os atributos de uma classe que são objetos de "
"função definem métodos correspondentes das suas instâncias. Assim, no nosso "
"exemplo, ``x.f`` é uma referência de método válida, já que ``MyClass.f`` é "
"uma função, mas ``x.i`` não é, já que ``MyClass.i`` não é. Mas ``x.f`` não é "
"a mesma coisa que ``MyClass.f`` — é um *objeto de método*, não um objeto de "
"função."

#: ../../tutorial/classes.rst:360
msgid "Method Objects"
msgstr "Objetos de método"

#: ../../tutorial/classes.rst:362
msgid "Usually, a method is called right after it is bound::"
msgstr "Normalmente, um método é chamado logo após ser ligado:"

#: ../../tutorial/classes.rst:366
msgid ""
"In the :class:`MyClass` example, this will return the string ``'hello "
"world'``. However, it is not necessary to call a method right away: ``x.f`` "
"is a method object, and can be stored away and called at a later time.  For "
"example::"
msgstr ""

#: ../../tutorial/classes.rst:374
msgid "will continue to print ``hello world`` until the end of time."
msgstr "continuará a imprimir ``olá mundo`` até ao fim dos tempos."

#: ../../tutorial/classes.rst:376
msgid ""
"What exactly happens when a method is called?  You may have noticed that ``x."
"f()`` was called without an argument above, even though the function "
"definition for :meth:`f` specified an argument.  What happened to the "
"argument? Surely Python raises an exception when a function that requires an "
"argument is called without any --- even if the argument isn't actually "
"used..."
msgstr ""

#: ../../tutorial/classes.rst:382
msgid ""
"Actually, you may have guessed the answer: the special thing about methods "
"is that the instance object is passed as the first argument of the "
"function.  In our example, the call ``x.f()`` is exactly equivalent to "
"``MyClass.f(x)``.  In general, calling a method with a list of *n* arguments "
"is equivalent to calling the corresponding function with an argument list "
"that is created by inserting the method's instance object before the first "
"argument."
msgstr ""
"Na verdade, pode ter adivinhado a resposta: a particularidade dos métodos é "
"que o objeto de instância é passado como o primeiro argumento da função. No "
"nosso exemplo, a chamada ``x.f()`` é exatamente equivalente a ``MyClass."
"f(x)``. Em geral, chamar um método com uma lista de *n* argumentos é "
"equivalente a chamar a função correspondente com uma lista de argumentos que "
"é criada inserindo o objeto de instância do método antes do primeiro "
"argumento."

#: ../../tutorial/classes.rst:389
msgid ""
"If you still don't understand how methods work, a look at the implementation "
"can perhaps clarify matters.  When a non-data attribute of an instance is "
"referenced, the instance's class is searched.  If the name denotes a valid "
"class attribute that is a function object, a method object is created by "
"packing (pointers to) the instance object and the function object just found "
"together in an abstract object: this is the method object.  When the method "
"object is called with an argument list, a new argument list is constructed "
"from the instance object and the argument list, and the function object is "
"called with this new argument list."
msgstr ""

#: ../../tutorial/classes.rst:403
msgid "Class and Instance Variables"
msgstr "Variáveis de classe e de instância"

#: ../../tutorial/classes.rst:405
msgid ""
"Generally speaking, instance variables are for data unique to each instance "
"and class variables are for attributes and methods shared by all instances "
"of the class::"
msgstr ""
"Em geral, as variáveis de instância são para dados únicos de cada instância "
"e as variáveis de classe são para atributos e métodos partilhados por todas "
"as instâncias da classe:"

#: ../../tutorial/classes.rst:427
msgid ""
"As discussed in :ref:`tut-object`, shared data can have possibly surprising "
"effects with involving :term:`mutable` objects such as lists and "
"dictionaries. For example, the *tricks* list in the following code should "
"not be used as a class variable because just a single list would be shared "
"by all *Dog* instances::"
msgstr ""
"Como discutido em :ref:`tut-object`, dados partilhados podem ter efeitos "
"possivelmente surpreendentes envolvendo objetos :term:`mutáveis` como listas "
"e dicionários. Por exemplo, a lista *trucos* no seguinte código não deve ser "
"usada como uma variável de classe porque apenas uma única lista seria "
"partilhada por todas as instâncias de *Cachorro*:"

#: ../../tutorial/classes.rst:450
msgid "Correct design of the class should use an instance variable instead::"
msgstr ""
"O desenho correto da classe deve usar uma variável de instância em vez disso:"

#: ../../tutorial/classes.rst:474
msgid "Random Remarks"
msgstr "Comentários aleatórios"

#: ../../tutorial/classes.rst:478
msgid ""
"If the same attribute name occurs in both an instance and in a class, then "
"attribute lookup prioritizes the instance::"
msgstr ""
"Se o mesmo nome de atributo ocorrer tanto numa instância como numa classe, "
"então a pesquisa de atributos prioriza a instância:"

#: ../../tutorial/classes.rst:493
msgid ""
"Data attributes may be referenced by methods as well as by ordinary users "
"(\"clients\") of an object.  In other words, classes are not usable to "
"implement pure abstract data types.  In fact, nothing in Python makes it "
"possible to enforce data hiding --- it is all based upon convention.  (On "
"the other hand, the Python implementation, written in C, can completely hide "
"implementation details and control access to an object if necessary; this "
"can be used by extensions to Python written in C.)"
msgstr ""
"Os atributos de dados podem ser referenciados tanto por métodos como por "
"utilizadores comuns (\"clientes\") de um objeto. Em outras palavras, as "
"classes não são utilizáveis para implementar tipos de dados abstratos puros. "
"Na verdade, nada em Python torna possível impor o ocultamento de dados — "
"tudo é baseado em convenção. (Por outro lado, a implementação do Python, "
"escrita em C, pode ocultar completamente detalhes de implementação e "
"controlar o acesso a um objeto, se necessário; isto pode ser usado por "
"extensões ao Python escritas em C.)"

#: ../../tutorial/classes.rst:501
msgid ""
"Clients should use data attributes with care --- clients may mess up "
"invariants maintained by the methods by stamping on their data attributes.  "
"Note that clients may add data attributes of their own to an instance object "
"without affecting the validity of the methods, as long as name conflicts are "
"avoided --- again, a naming convention can save a lot of headaches here."
msgstr ""
"Os clientes devem usar atributos de dados com cuidado — os clientes podem "
"estragar invariantes mantidos pelos métodos ao alterar os seus atributos de "
"dados. Note que os clientes podem adicionar os seus próprios atributos de "
"dados a um objeto de instância sem afetar a validade dos métodos, desde que "
"sejam evitados conflitos de nomes — novamente, uma convenção de nomeação "
"pode poupar muitas dores de cabeça aqui."

#: ../../tutorial/classes.rst:507
msgid ""
"There is no shorthand for referencing data attributes (or other methods!) "
"from within methods.  I find that this actually increases the readability of "
"methods: there is no chance of confusing local variables and instance "
"variables when glancing through a method."
msgstr ""
"Não existe um atalho para referenciar atributos de dados (ou outros "
"métodos!) a partir de dentro de métodos. Acho que isto aumenta na verdade a "
"legibilidade dos métodos: não há possibilidade de confundir variáveis locais "
"e variáveis de instância ao percorrer um método."

#: ../../tutorial/classes.rst:512
msgid ""
"Often, the first argument of a method is called ``self``.  This is nothing "
"more than a convention: the name ``self`` has absolutely no special meaning "
"to Python.  Note, however, that by not following the convention your code "
"may be less readable to other Python programmers, and it is also conceivable "
"that a *class browser* program might be written that relies upon such a "
"convention."
msgstr ""
"Muitas vezes, o primeiro argumento de um método é chamado ``self``. Isto não "
"é mais do que uma convenção: o nome ``self`` não tem qualquer significado "
"especial para o Python. Note, no entanto, que ao não seguir a convenção, o "
"seu código pode ser menos legível para outros programadores Python, e também "
"é concebível que um programa *navegador de classes* possa ser escrito que "
"dependa de tal convenção."

#: ../../tutorial/classes.rst:518
msgid ""
"Any function object that is a class attribute defines a method for instances "
"of that class.  It is not necessary that the function definition is "
"textually enclosed in the class definition: assigning a function object to a "
"local variable in the class is also ok.  For example::"
msgstr ""
"Qualquer objeto de função que seja um atributo de classe define um método "
"para instâncias dessa classe. Não é necessário que a definição da função "
"esteja textualmente incluída na definição da classe: atribuir um objeto de "
"função a uma variável local na classe também é aceitável. Por exemplo:"

#: ../../tutorial/classes.rst:535
msgid ""
"Now ``f``, ``g`` and ``h`` are all attributes of class :class:`C` that refer "
"to function objects, and consequently they are all methods of instances of :"
"class:`C` --- ``h`` being exactly equivalent to ``g``.  Note that this "
"practice usually only serves to confuse the reader of a program."
msgstr ""

#: ../../tutorial/classes.rst:540
msgid ""
"Methods may call other methods by using method attributes of the ``self`` "
"argument::"
msgstr ""
"Os métodos podem chamar outros métodos usando atributos de método do "
"argumento ``self``:"

#: ../../tutorial/classes.rst:554
msgid ""
"Methods may reference global names in the same way as ordinary functions.  "
"The global scope associated with a method is the module containing its "
"definition.  (A class is never used as a global scope.)  While one rarely "
"encounters a good reason for using global data in a method, there are many "
"legitimate uses of the global scope: for one thing, functions and modules "
"imported into the global scope can be used by methods, as well as functions "
"and classes defined in it.  Usually, the class containing the method is "
"itself defined in this global scope, and in the next section we'll find some "
"good reasons why a method would want to reference its own class."
msgstr ""
"Os métodos podem referenciar nomes globais da mesma forma que as funções "
"comuns. O âmbito global associado a um método é o módulo que contém a sua "
"definição. (Uma classe nunca é usada como um âmbito global.) Embora "
"raramente se encontre uma boa razão para usar dados globais num método, "
"existem muitos usos legítimos do âmbito global: por exemplo, funções e "
"módulos importados para o âmbito global podem ser usados por métodos, bem "
"como funções e classes definidas nele. Normalmente, a classe que contém o "
"método é ela própria definida neste âmbito global, e na próxima secção "
"encontraremos algumas boas razões pelas quais um método pode querer "
"referenciar a sua própria classe."

#: ../../tutorial/classes.rst:564
msgid ""
"Each value is an object, and therefore has a *class* (also called its "
"*type*). It is stored as ``object.__class__``."
msgstr ""
"Cada valor é um objeto e, portanto, tem uma *classe* (também chamada de "
"*tipo*). Está armazenado como ``object.__class__``."

#: ../../tutorial/classes.rst:571
msgid "Inheritance"
msgstr "Herança"

#: ../../tutorial/classes.rst:573
msgid ""
"Of course, a language feature would not be worthy of the name \"class\" "
"without supporting inheritance.  The syntax for a derived class definition "
"looks like this::"
msgstr ""
"Claro, uma funcionalidade de linguagem não seria digna do nome \"classe\" "
"sem suportar herança. A sintaxe para uma definição de classe derivada é "
"assim:"

#: ../../tutorial/classes.rst:584
msgid ""
"The name :class:`BaseClassName` must be defined in a scope containing the "
"derived class definition.  In place of a base class name, other arbitrary "
"expressions are also allowed.  This can be useful, for example, when the "
"base class is defined in another module::"
msgstr ""

#: ../../tutorial/classes.rst:591
msgid ""
"Execution of a derived class definition proceeds the same as for a base "
"class. When the class object is constructed, the base class is remembered.  "
"This is used for resolving attribute references: if a requested attribute is "
"not found in the class, the search proceeds to look in the base class.  This "
"rule is applied recursively if the base class itself is derived from some "
"other class."
msgstr ""
"A execução de uma definição de classe derivada processa-se da mesma forma "
"que para uma classe base. Quando o objeto de classe é construído, a classe "
"base é lembrada. Isto é usado para resolver referências de atributos: se um "
"atributo solicitado não for encontrado na classe, a pesquisa prossegue para "
"procurar na classe base. Esta regra é aplicada recursivamente se a classe "
"base for ela própria derivada de alguma outra classe."

#: ../../tutorial/classes.rst:597
msgid ""
"There's nothing special about instantiation of derived classes: "
"``DerivedClassName()`` creates a new instance of the class.  Method "
"references are resolved as follows: the corresponding class attribute is "
"searched, descending down the chain of base classes if necessary, and the "
"method reference is valid if this yields a function object."
msgstr ""
"Não há nada de especial na instanciação de classes derivadas: "
"``NomeClasseDerivada()`` cria uma nova instância da classe. As referências "
"de métodos são resolvidas da seguinte forma: o atributo de classe "
"correspondente é pesquisado, descendo pela cadeia de classes base se "
"necessário, e a referência do método é válida se isto produzir um objeto de "
"função."

#: ../../tutorial/classes.rst:603
msgid ""
"Derived classes may override methods of their base classes.  Because methods "
"have no special privileges when calling other methods of the same object, a "
"method of a base class that calls another method defined in the same base "
"class may end up calling a method of a derived class that overrides it.  "
"(For C++ programmers: all methods in Python are effectively ``virtual``.)"
msgstr ""
"As classes derivadas podem substituir métodos das suas classes base. Como os "
"métodos não têm privilégios especiais ao chamar outros métodos do mesmo "
"objeto, um método de uma classe base que chama outro método definido na "
"mesma classe base pode acabar por chamar um método de uma classe derivada "
"que o substitui. (Para programadores de C++: todos os métodos em Python são "
"efetivamente ``virtuais``.)"

#: ../../tutorial/classes.rst:609
msgid ""
"An overriding method in a derived class may in fact want to extend rather "
"than simply replace the base class method of the same name. There is a "
"simple way to call the base class method directly: just call ``BaseClassName."
"methodname(self, arguments)``.  This is occasionally useful to clients as "
"well.  (Note that this only works if the base class is accessible as "
"``BaseClassName`` in the global scope.)"
msgstr ""
"Um método de substituição numa classe derivada pode, de facto, querer "
"estender em vez de simplesmente substituir o método da classe base com o "
"mesmo nome. Existe uma forma simples de chamar diretamente o método da "
"classe base: basta chamar ``NomeClasseBase.nome_método(self, argumentos)``. "
"Isto é ocasionalmente útil para clientes também. (Note que isto só funciona "
"se a classe base for acessível como ``NomeClasseBase`` no âmbito global.)"

#: ../../tutorial/classes.rst:616
msgid "Python has two built-in functions that work with inheritance:"
msgstr "O Python tem duas funções incorporadas que funcionam com herança:"

#: ../../tutorial/classes.rst:618
msgid ""
"Use :func:`isinstance` to check an instance's type: ``isinstance(obj, int)`` "
"will be ``True`` only if ``obj.__class__`` is :class:`int` or some class "
"derived from :class:`int`."
msgstr ""
"Use :func:`isinstance` para verificar o tipo de uma instância: "
"``isinstance(obj, int)`` será ``True`` apenas se ``obj.__class__`` for :"
"class:`int` ou alguma classe derivada de :class:`int`."

#: ../../tutorial/classes.rst:622
msgid ""
"Use :func:`issubclass` to check class inheritance: ``issubclass(bool, int)`` "
"is ``True`` since :class:`bool` is a subclass of :class:`int`.  However, "
"``issubclass(float, int)`` is ``False`` since :class:`float` is not a "
"subclass of :class:`int`."
msgstr ""
"Use :func:`issubclass` para verificar a herança de classe: "
"``issubclass(bool, int)`` é ``True`` já que :class:`bool` é uma subclasse "
"de :class:`int`. No entanto, ``issubclass(float, int)`` é ``False`` já que :"
"class:`float` não é uma subclasse de :class:`int`."

#: ../../tutorial/classes.rst:632
msgid "Multiple Inheritance"
msgstr "Herança múltipla"

#: ../../tutorial/classes.rst:634
msgid ""
"Python supports a form of multiple inheritance as well.  A class definition "
"with multiple base classes looks like this::"
msgstr ""
"O Python também suporta uma forma de herança múltipla. Uma definição de "
"classe com múltiplas classes base é assim:"

#: ../../tutorial/classes.rst:644
msgid ""
"For most purposes, in the simplest cases, you can think of the search for "
"attributes inherited from a parent class as depth-first, left-to-right, not "
"searching twice in the same class where there is an overlap in the "
"hierarchy. Thus, if an attribute is not found in :class:`DerivedClassName`, "
"it is searched for in :class:`Base1`, then (recursively) in the base classes "
"of :class:`Base1`, and if it was not found there, it was searched for in :"
"class:`Base2`, and so on."
msgstr ""

#: ../../tutorial/classes.rst:651
msgid ""
"In fact, it is slightly more complex than that; the method resolution order "
"changes dynamically to support cooperative calls to :func:`super`.  This "
"approach is known in some other multiple-inheritance languages as call-next-"
"method and is more powerful than the super call found in single-inheritance "
"languages."
msgstr ""
"Na verdade, é um pouco mais complexo do que isso; a ordem de resolução de "
"métodos muda dinamicamente para suportar chamadas cooperativas a :func:"
"`super`. Esta abordagem é conhecida noutras linguagens de herança múltipla "
"como *call-next-method* e é mais poderosa do que a chamada *super* "
"encontrada em linguagens de herança única."

#: ../../tutorial/classes.rst:657
msgid ""
"Dynamic ordering is necessary because all cases of multiple inheritance "
"exhibit one or more diamond relationships (where at least one of the parent "
"classes can be accessed through multiple paths from the bottommost class).  "
"For example, all classes inherit from :class:`object`, so any case of "
"multiple inheritance provides more than one path to reach :class:`object`.  "
"To keep the base classes from being accessed more than once, the dynamic "
"algorithm linearizes the search order in a way that preserves the left-to-"
"right ordering specified in each class, that calls each parent only once, "
"and that is monotonic (meaning that a class can be subclassed without "
"affecting the precedence order of its parents). Taken together, these "
"properties make it possible to design reliable and extensible classes with "
"multiple inheritance.  For more detail, see https://www.python.org/download/"
"releases/2.3/mro/."
msgstr ""

#: ../../tutorial/classes.rst:674
msgid "Private Variables"
msgstr "Variáveis privadas"

#: ../../tutorial/classes.rst:676
msgid ""
"\"Private\" instance variables that cannot be accessed except from inside an "
"object don't exist in Python.  However, there is a convention that is "
"followed by most Python code: a name prefixed with an underscore (e.g. "
"``_spam``) should be treated as a non-public part of the API (whether it is "
"a function, a method or a data member).  It should be considered an "
"implementation detail and subject to change without notice."
msgstr ""
"Variáveis de instância \"privadas\" que não podem ser acessadas exceto a "
"partir do interior de um objeto não existem em Python. No entanto, existe "
"uma convenção seguida pela maioria do código Python: um nome prefixado com "
"um sublinhado (por exemplo, ``_spam``) deve ser tratado como uma parte não "
"pública da API (seja uma função, um método ou um membro de dados). Deve ser "
"considerado um detalhe de implementação e sujeito a alteração sem aviso "
"prévio."

#: ../../tutorial/classes.rst:686
msgid ""
"Since there is a valid use-case for class-private members (namely to avoid "
"name clashes of names with names defined by subclasses), there is limited "
"support for such a mechanism, called :dfn:`name mangling`.  Any identifier "
"of the form ``__spam`` (at least two leading underscores, at most one "
"trailing underscore) is textually replaced with ``_classname__spam``, where "
"``classname`` is the current class name with leading underscore(s) "
"stripped.  This mangling is done without regard to the syntactic position of "
"the identifier, as long as it occurs within the definition of a class."
msgstr ""
"Como existe um caso de uso válido para membros privados de classe "
"(nomeadamente para evitar conflitos de nomes com nomes definidos por "
"subclasses), existe um suporte limitado para tal mecanismo, chamado :dfn:"
"`name mangling`. Qualquer identificador da forma ``__spam`` (pelo menos dois "
"sublinhados iniciais, no máximo um sublinhado final) é textualmente "
"substituído por ``_nomeclasse__spam``, onde ``nomeclasse`` é o nome atual da "
"classe com os sublinhados iniciais removidos. Este *mangling* é feito "
"independentemente da posição sintática do identificador, desde que ocorra "
"dentro da definição de uma classe."

#: ../../tutorial/classes.rst:695
msgid ""
"Name mangling is helpful for letting subclasses override methods without "
"breaking intraclass method calls.  For example::"
msgstr ""
"O *name mangling* é útil para permitir que subclasses substituam métodos sem "
"quebrar chamadas de métodos intraclasse. Por exemplo:"

#: ../../tutorial/classes.rst:717
msgid ""
"The above example would work even if ``MappingSubclass`` were to introduce a "
"``__update`` identifier since it is replaced with ``_Mapping__update`` in "
"the ``Mapping`` class  and ``_MappingSubclass__update`` in the "
"``MappingSubclass`` class respectively."
msgstr ""
"O exemplo acima funcionaria mesmo que ``SubclasseMapeamento`` introduzisse "
"um identificador ``__atualizar``, já que seria substituído por "
"``_Mapeamento__atualizar`` na classe ``Mapeamento`` e por "
"``_SubclasseMapeamento__atualizar`` na classe ``SubclasseMapeamento``, "
"respetivamente."

#: ../../tutorial/classes.rst:722
msgid ""
"Note that the mangling rules are designed mostly to avoid accidents; it "
"still is possible to access or modify a variable that is considered "
"private.  This can even be useful in special circumstances, such as in the "
"debugger."
msgstr ""
"Note que as regras de *mangling* são concebidas principalmente para evitar "
"acidentes; ainda assim, é possível aceder ou modificar uma variável "
"considerada privada. Isto pode até ser útil em circunstâncias especiais, "
"como no depurador."

#: ../../tutorial/classes.rst:726
msgid ""
"Notice that code passed to ``exec()`` or ``eval()`` does not consider the "
"classname of the invoking class to be the current class; this is similar to "
"the effect of the ``global`` statement, the effect of which is likewise "
"restricted to code that is byte-compiled together.  The same restriction "
"applies to ``getattr()``, ``setattr()`` and ``delattr()``, as well as when "
"referencing ``__dict__`` directly."
msgstr ""
"Note que o código passado a ``exec()`` ou ``eval()`` não considera o nome da "
"classe da classe invocadora como sendo a classe atual; isto é semelhante ao "
"efeito da instrução ``global``, cujo efeito é igualmente restrito ao código "
"que é compilado em conjunto. A mesma restrição aplica-se a ``getattr()``, "
"``setattr()`` e ``delattr()``, bem como ao referenciar ``__dict__`` "
"diretamente."

#: ../../tutorial/classes.rst:737
msgid "Odds and Ends"
msgstr "Vários"

#: ../../tutorial/classes.rst:739
msgid ""
"Sometimes it is useful to have a data type similar to the Pascal \"record\" "
"or C \"struct\", bundling together a few named data items. The idiomatic "
"approach is to use :mod:`dataclasses` for this purpose::"
msgstr ""
"Às vezes é útil ter um tipo de dados semelhante ao \"registro\" do Pascal ou "
"\"struct\" do C, agrupando alguns itens de dados nomeados. A abordagem "
"idiomática é usar :mod:`dataclasses` para este propósito:"

#: ../../tutorial/classes.rst:759
msgid ""
"A piece of Python code that expects a particular abstract data type can "
"often be passed a class that emulates the methods of that data type "
"instead.  For instance, if you have a function that formats some data from a "
"file object, you can define a class with methods :meth:`read` and :meth:`!"
"readline` that get the data from a string buffer instead, and pass it as an "
"argument."
msgstr ""

#: ../../tutorial/classes.rst:770
msgid ""
"Instance method objects have attributes, too: ``m.__self__`` is the instance "
"object with the method :meth:`m`, and ``m.__func__`` is the function object "
"corresponding to the method."
msgstr ""

#: ../../tutorial/classes.rst:778
msgid "Iterators"
msgstr "Iteradores"

#: ../../tutorial/classes.rst:780
msgid ""
"By now you have probably noticed that most container objects can be looped "
"over using a :keyword:`for` statement::"
msgstr ""
"Até agora, provavelmente já notou que a maioria dos objetos contentor podem "
"ser percorridos usando uma instrução :keyword:`for`:"

#: ../../tutorial/classes.rst:794
msgid ""
"This style of access is clear, concise, and convenient.  The use of "
"iterators pervades and unifies Python.  Behind the scenes, the :keyword:"
"`for` statement calls :func:`iter` on the container object.  The function "
"returns an iterator object that defines the method :meth:`~iterator."
"__next__` which accesses elements in the container one at a time.  When "
"there are no more elements, :meth:`~iterator.__next__` raises a :exc:"
"`StopIteration` exception which tells the :keyword:`!for` loop to "
"terminate.  You can call the :meth:`~iterator.__next__` method using the :"
"func:`next` built-in function; this example shows how it all works::"
msgstr ""
"Este estilo de acesso é claro, conciso e conveniente. O uso de iteradores "
"permeia e unifica o Python. Por trás dos panos, a instrução :keyword:`for` "
"chama :func:`iter` no objeto contentor. A função devolve um objeto iterador "
"que define o método :meth:`~iterator.__next__`, que acede aos elementos no "
"contentor um de cada vez. Quando não há mais elementos, :meth:`~iterator."
"__next__` levanta uma exceção :exc:`StopIteration`, que diz ao ciclo :"
"keyword:`!for` para terminar. Pode chamar o método :meth:`~iterator."
"__next__` usando a função incorporada :func:`next`; este exemplo mostra como "
"tudo funciona:"

#: ../../tutorial/classes.rst:819
msgid ""
"Having seen the mechanics behind the iterator protocol, it is easy to add "
"iterator behavior to your classes.  Define an :meth:`__iter__` method which "
"returns an object with a :meth:`~iterator.__next__` method.  If the class "
"defines :meth:`__next__`, then :meth:`__iter__` can just return ``self``::"
msgstr ""

#: ../../tutorial/classes.rst:856
msgid "Generators"
msgstr "Geradores"

#: ../../tutorial/classes.rst:858
msgid ""
":term:`Generators <generator>` are a simple and powerful tool for creating "
"iterators.  They are written like regular functions but use the :keyword:"
"`yield` statement whenever they want to return data.  Each time :func:`next` "
"is called on it, the generator resumes where it left off (it remembers all "
"the data values and which statement was last executed).  An example shows "
"that generators can be trivially easy to create::"
msgstr ""
"Os :term:`geradores <generator>` são uma ferramenta simples e poderosa para "
"criar iteradores. São escritos como funções normais, mas usam a instrução :"
"keyword:`yield` sempre que querem devolver dados. Cada vez que :func:`next` "
"é chamado, o gerador retoma onde parou (lembra-se de todos os valores de "
"dados e qual a instrução executada por último). Um exemplo mostra que os "
"geradores podem ser trivialmente fáceis de criar:"

#: ../../tutorial/classes.rst:879
msgid ""
"Anything that can be done with generators can also be done with class-based "
"iterators as described in the previous section.  What makes generators so "
"compact is that the :meth:`__iter__` and :meth:`~generator.__next__` methods "
"are created automatically."
msgstr ""

#: ../../tutorial/classes.rst:884
msgid ""
"Another key feature is that the local variables and execution state are "
"automatically saved between calls.  This made the function easier to write "
"and much more clear than an approach using instance variables like ``self."
"index`` and ``self.data``."
msgstr ""
"Outra característica-chave é que as variáveis locais e o estado de execução "
"são automaticamente guardados entre chamadas. Isto tornou a função mais "
"fácil de escrever e muito mais clara do que uma abordagem que usa variáveis "
"de instância como ``self.indice`` e ``self.dados``."

#: ../../tutorial/classes.rst:889
msgid ""
"In addition to automatic method creation and saving program state, when "
"generators terminate, they automatically raise :exc:`StopIteration`. In "
"combination, these features make it easy to create iterators with no more "
"effort than writing a regular function."
msgstr ""
"Além da criação automática de métodos e da preservação do estado do "
"programa, quando os geradores terminam, levantam automaticamente :exc:"
"`StopIteration`. Em combinação, estas características tornam fácil criar "
"iteradores sem mais esforço do que escrever uma função regular."

#: ../../tutorial/classes.rst:898
msgid "Generator Expressions"
msgstr "Expressões de geradores"

#: ../../tutorial/classes.rst:900
msgid ""
"Some simple generators can be coded succinctly as expressions using a syntax "
"similar to list comprehensions but with parentheses instead of square "
"brackets. These expressions are designed for situations where the generator "
"is used right away by an enclosing function.  Generator expressions are more "
"compact but less versatile than full generator definitions and tend to be "
"more memory friendly than equivalent list comprehensions."
msgstr ""
"Alguns geradores simples podem ser codificados de forma sucinta como "
"expressões, usando uma sintaxe semelhante às compreensões de listas, mas com "
"parênteses em vez de colchetes. Estas expressões são concebidas para "
"situações em que o gerador é usado imediatamente por uma função envolvente. "
"As expressões de geradores são mais compactas, mas menos versáteis do que as "
"definições completas de geradores, e tendem a ser mais amigas da memória do "
"que as compreensões de listas equivalentes."

#: ../../tutorial/classes.rst:907
msgid "Examples::"
msgstr "Exemplos:"

#: ../../tutorial/classes.rst:928
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../tutorial/classes.rst:929
msgid ""
"Except for one thing.  Module objects have a secret read-only attribute "
"called :attr:`~object.__dict__` which returns the dictionary used to "
"implement the module's namespace; the name :attr:`~object.__dict__` is an "
"attribute but not a global name. Obviously, using this violates the "
"abstraction of namespace implementation, and should be restricted to things "
"like post-mortem debuggers."
msgstr ""
