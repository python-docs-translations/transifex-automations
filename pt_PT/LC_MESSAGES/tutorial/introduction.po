# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# André Moreira <afrmscb@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 15:49+0000\n"
"PO-Revision-Date: 2025-07-18 19:59+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../tutorial/introduction.rst:5
msgid "An Informal Introduction to Python"
msgstr "Uma Introdução Informal ao Python"

#: ../../tutorial/introduction.rst:7
msgid ""
"In the following examples, input and output are distinguished by the "
"presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the "
"example, you must type everything after the prompt, when the prompt appears;"
" lines that do not begin with a prompt are output from the interpreter. Note"
" that a secondary prompt on a line by itself in an example means you must "
"type a blank line; this is used to end a multi-line command."
msgstr ""
"Nos exemplos seguintes, a entrada e saída são distinguidas pela presença ou "
"ausência de prompts (:term:`>>>` e :term:`...`): para repetir o exemplo, "
"deve escrever tudo o que aparece depois do prompt quando este surgir; as "
"linhas que não começam com um prompt são saída do interpretador. Note que um"
" prompt secundário sozinho numa linha num exemplo significa que deve "
"introduzir uma linha em branco; isto é usado para terminar um comando de "
"várias linhas."

#: ../../tutorial/introduction.rst:16
msgid ""
"You can toggle the display of prompts and output by clicking on ``>>>`` in "
"the upper-right corner of an example box.  If you hide the prompts and "
"output for an example, then you can easily copy and paste the input lines "
"into your interpreter."
msgstr ""

#: ../../tutorial/introduction.rst:23
msgid ""
"Many of the examples in this manual, even those entered at the interactive "
"prompt, include comments.  Comments in Python start with the hash character,"
" ``#``, and extend to the end of the physical line.  A comment may appear at"
" the start of a line or following whitespace or code, but not within a "
"string literal.  A hash character within a string literal is just a hash "
"character. Since comments are to clarify code and are not interpreted by "
"Python, they may be omitted when typing in examples."
msgstr ""
"Muitos dos exemplos neste manual, mesmo aqueles introduzidos no prompt "
"interativo, incluem comentários. Os comentários em Python começam com o "
"carácter cerquilha (``#``) e estendem-se até ao fim da linha física. Um "
"comentário pode aparecer no início de uma linha ou após espaços em branco ou"
" código, mas não dentro de um literal de string. Uma cerquilha dentro de um "
"literal de string é apenas uma cerquilha. Como os comentários servem para "
"esclarecer o código e não são interpretados pelo Python, podem ser omitidos "
"ao escrever os exemplos."

#: ../../tutorial/introduction.rst:31
msgid "Some examples::"
msgstr "Alguns exemplos::"

#: ../../tutorial/introduction.rst:33
msgid ""
"# this is the first comment\n"
"spam = 1  # and this is the second comment\n"
"          # ... and now a third!\n"
"text = \"# This is not a comment because it's inside quotes.\""
msgstr ""
"# este é o primeiro comentário\n"
"spam = 1  # e este é o segundo comentário\n"
"          # ... e agora um terceiro!\n"
"texto = \"# Isto não é um comentário porque está dentro de aspas.\""

#: ../../tutorial/introduction.rst:42
msgid "Using Python as a Calculator"
msgstr "A Utilizar o Python como Calculadora"

#: ../../tutorial/introduction.rst:44
msgid ""
"Let's try some simple Python commands.  Start the interpreter and wait for "
"the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr ""
"Vamos experimentar alguns comandos simples em Python. Inicie o interpretador"
" e aguarde pelo prompt principal, ``>>>``. (Não deve demorar muito.)"

#: ../../tutorial/introduction.rst:51
msgid "Numbers"
msgstr "Números"

#: ../../tutorial/introduction.rst:53
msgid ""
"The interpreter acts as a simple calculator: you can type an expression at "
"it and it will write the value.  Expression syntax is straightforward: the "
"operators ``+``, ``-``, ``*`` and ``/`` can be used to perform arithmetic; "
"parentheses (``()``) can be used for grouping. For example::"
msgstr ""
"O interpretador atua como uma calculadora simples: pode escrever uma "
"expressão e este irá mostrar o valor. A sintaxe das expressões é simples: os"
" operadores ``+``, ``-``, ``*`` e ``/`` podem ser usados para realizar "
"operações aritméticas; parênteses (``()``) podem ser usados para agrupar. "
"Por exemplo::"

#: ../../tutorial/introduction.rst:59
msgid ""
">>> 2 + 2\n"
"4\n"
">>> 50 - 5*6\n"
"20\n"
">>> (50 - 5*6) / 4\n"
"5.0\n"
">>> 8 / 5  # division always returns a floating-point number\n"
"1.6"
msgstr ""
">>> 2 + 2\n"
"4\n"
">>> 50 - 5*6\n"
"20\n"
">>> (50 - 5*6) / 4\n"
"5.0\n"
">>> 8 / 5  # a divisão devolve sempre um número de vírgula flutuante\n"
"1.6"

#: ../../tutorial/introduction.rst:68
msgid ""
"The integer numbers (e.g. ``2``, ``4``, ``20``) have type :class:`int`, the "
"ones with a fractional part (e.g. ``5.0``, ``1.6``) have type "
":class:`float`.  We will see more about numeric types later in the tutorial."
msgstr ""
"Os números inteiros (ex. ``2``, ``4``, ``20``) têm o tipo :class:`int`, "
"enquanto aqueles com parte fracionária (ex. ``5.0``, ``1.6``) têm o tipo "
":class:`float`. Veremos mais sobre tipos numéricos mais adiante no tutorial."

#: ../../tutorial/introduction.rst:72
msgid ""
"Division (``/``) always returns a float.  To do :term:`floor division` and "
"get an integer result you can use the ``//`` operator; to calculate the "
"remainder you can use ``%``::"
msgstr ""
"A divisão (``/``) devolve sempre um número de vírgula flutuante. Para "
"efetuar uma :term:`divisão inteira` e obter um resultado inteiro, pode usar "
"o operador ``//``; para calcular o resto, pode usar ``%``::"

#: ../../tutorial/introduction.rst:76
msgid ""
">>> 17 / 3  # classic division returns a float\n"
"5.666666666666667\n"
">>>\n"
">>> 17 // 3  # floor division discards the fractional part\n"
"5\n"
">>> 17 % 3  # the % operator returns the remainder of the division\n"
"2\n"
">>> 5 * 3 + 2  # floored quotient * divisor + remainder\n"
"17"
msgstr ""
">>> 17 / 3  # divisão clássica devolve um número de vírgula flutuante\n"
"5.666666666666667\n"
">>>\n"
">>> 17 // 3  # divisão inteira descarta a parte fracionária\n"
"5\n"
">>> 17 % 3  # o operador % devolve o resto da divisão\n"
"2\n"
">>> 5 * 3 + 2  # quociente inteiro * divisor + resto\n"
"17"

#: ../../tutorial/introduction.rst:86
msgid ""
"With Python, it is possible to use the ``**`` operator to calculate powers "
"[#]_::"
msgstr ""
"Em Python, é possível usar o operador ``**`` para calcular potências [#]_::"

#: ../../tutorial/introduction.rst:88
msgid ""
">>> 5 ** 2  # 5 squared\n"
"25\n"
">>> 2 ** 7  # 2 to the power of 7\n"
"128"
msgstr ""
">>> 5 ** 2  # 5 ao quadrado\n"
"25\n"
">>> 2 ** 7  # 2 elevado à potência de 7\n"
"128"

#: ../../tutorial/introduction.rst:93
msgid ""
"The equal sign (``=``) is used to assign a value to a variable. Afterwards, "
"no result is displayed before the next interactive prompt::"
msgstr ""
"O sinal de igual (``=``) é usado para atribuir um valor a uma variável. "
"Depois, nenhum resultado é mostrado antes do próximo prompt interativo::"

#: ../../tutorial/introduction.rst:96
msgid ""
">>> width = 20\n"
">>> height = 5 * 9\n"
">>> width * height\n"
"900"
msgstr ""
">>> largura = 20\n"
">>> altura = 5 * 9\n"
">>> largura * altura\n"
"900"

#: ../../tutorial/introduction.rst:101
msgid ""
"If a variable is not \"defined\" (assigned a value), trying to use it will "
"give you an error::"
msgstr ""
"Se uma variável não estiver \"definida\" (não tiver um valor atribuído), "
"tentar usá-la irá gerar um erro::"

#: ../../tutorial/introduction.rst:104
msgid ""
">>> n  # try to access an undefined variable\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"NameError: name 'n' is not defined"
msgstr ""
">>> n  # tentativa de aceder a uma variável não definida\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"NameError: name 'n' is not defined"

#: ../../tutorial/introduction.rst:109
msgid ""
"There is full support for floating point; operators with mixed type operands"
" convert the integer operand to floating point::"
msgstr ""
"Existe suporte total para números de vírgula flutuante; operadores com "
"operandos de tipos mistos convertem o operando inteiro para vírgula "
"flutuante::"

#: ../../tutorial/introduction.rst:112
msgid ""
">>> 4 * 3.75 - 1\n"
"14.0"
msgstr ""
">>> 4 * 3.75 - 1\n"
"14.0"

#: ../../tutorial/introduction.rst:115
msgid ""
"In interactive mode, the last printed expression is assigned to the variable"
" ``_``.  This means that when you are using Python as a desk calculator, it "
"is somewhat easier to continue calculations, for example::"
msgstr ""
"Em modo interativo, a última expressão impressa é atribuída à variável "
"``_``. Isto significa que, quando está a usar o Python como calculadora, é "
"mais fácil continuar os cálculos, por exemplo::"

#: ../../tutorial/introduction.rst:119
msgid ""
">>> tax = 12.5 / 100\n"
">>> price = 100.50\n"
">>> price * tax\n"
"12.5625\n"
">>> price + _\n"
"113.0625\n"
">>> round(_, 2)\n"
"113.06"
msgstr ""
">>> imposto = 12.5 / 100\n"
">>> preço = 100.50\n"
">>> preço * imposto\n"
"12.5625\n"
">>> preço + _\n"
"113.0625\n"
">>> round(_, 2)\n"
"113.06"

#: ../../tutorial/introduction.rst:128
msgid ""
"This variable should be treated as read-only by the user.  Don't explicitly "
"assign a value to it --- you would create an independent local variable with"
" the same name masking the built-in variable with its magic behavior."
msgstr ""
"Esta variável deve ser tratada como apenas de leitura pelo utilizador. Não "
"atribua explicitamente um valor a ela — criaria uma variável local "
"independente com o mesmo nome, ocultando a variável integrada com o seu "
"comportamento especial."

#: ../../tutorial/introduction.rst:132
msgid ""
"In addition to :class:`int` and :class:`float`, Python supports other types "
"of numbers, such as :class:`~decimal.Decimal` and "
":class:`~fractions.Fraction`. Python also has built-in support for "
":ref:`complex numbers <typesnumeric>`, and uses the ``j`` or ``J`` suffix to"
" indicate the imaginary part (e.g. ``3+5j``)."
msgstr ""
"Para além de :class:`int` e :class:`float`, o Python suporta outros tipos de"
" números, como :class:`~decimal.Decimal` e :class:`~fractions.Fraction`. O "
"Python também tem suporte integrado para :ref:`números complexos "
"<typesnumeric>`, e usa os sufixos ``j`` ou ``J`` para indicar a parte "
"imaginária (ex. ``3+5j``)."

#: ../../tutorial/introduction.rst:142
msgid "Text"
msgstr "Texto"

#: ../../tutorial/introduction.rst:144
msgid ""
"Python can manipulate text (represented by type :class:`str`, so-called "
"\"strings\") as well as numbers.  This includes characters \"``!``\", words "
"\"``rabbit``\", names \"``Paris``\", sentences \"``Got your back.``\", etc. "
"\"``Yay! :)``\". They can be enclosed in single quotes (``'...'``) or double"
" quotes (``\"...\"``) with the same result [#]_."
msgstr ""
"O Python pode manipular texto (representado pelo tipo :class:`str`, também "
"chamadas \"strings\") assim como números. Isto inclui caracteres ``!``, "
"palavras ``coelho``, nomes ``Paris``, frases ``Estou contigo.``, etc. ``Yay!"
" :)``. Podem ser delimitadas por aspas simples (``'...'``) ou duplas "
"(``\"...\"``) com o mesmo resultado [#]_."

#: ../../tutorial/introduction.rst:157
msgid ""
"To quote a quote, we need to \"escape\" it, by preceding it with ``\\``. "
"Alternatively, we can use the other type of quotation marks::"
msgstr ""
"Para colocar aspas dentro de aspas, precisamos de as \"escapar\", "
"precedendo-as com ``\\``. Alternativamente, podemos usar o outro tipo de "
"aspas::"

#: ../../tutorial/introduction.rst:160
msgid ""
">>> 'doesn\\'t'  # use \\' to escape the single quote...\n"
"\"doesn't\"\n"
">>> \"doesn't\"  # ...or use double quotes instead\n"
"\"doesn't\"\n"
">>> '\"Yes,\" they said.'\n"
"'\"Yes,\" they said.'\n"
">>> \"\\\"Yes,\\\" they said.\"\n"
"'\"Yes,\" they said.'\n"
">>> '\"Isn\\'t,\" they said.'\n"
"'\"Isn\\'t,\" they said.'"
msgstr ""
">>> 'doesn\\'t'  # usar \\' para escapar a aspa simples...\n"
"'doesn't'\n"
">>> \"doesn't\"  # ...ou usar aspas duplas em vez disso\n"
"'doesn't'\n"
">>> '\"Sim,\" disseram eles.'\n"
"'\"Sim,\" disseram eles.'\n"
">>> \"\\\"Sim,\\\" disseram eles.\"\n"
"'\"Sim,\" disseram eles.'\n"
">>> '\"Não é,\" disseram eles.'\n"
"'\"Não é,\" disseram eles.'"

#: ../../tutorial/introduction.rst:171
msgid ""
"In the Python shell, the string definition and output string can look "
"different.  The :func:`print` function produces a more readable output, by "
"omitting the enclosing quotes and by printing escaped and special "
"characters::"
msgstr ""
"Na consola do Python, a definição da string e a string de saída podem "
"parecer diferentes. A função :func:`print` produz uma saída mais legível, "
"omitindo as aspas e imprimindo os caracteres escapados e especiais::"

#: ../../tutorial/introduction.rst:175
msgid ""
">>> s = 'First line.\\nSecond line.'  # \\n means newline\n"
">>> s  # without print(), special characters are included in the string\n"
"'First line.\\nSecond line.'\n"
">>> print(s)  # with print(), special characters are interpreted, so \\n produces new line\n"
"First line.\n"
"Second line."
msgstr ""
">>> s = 'Primeira linha.\\nSegunda linha.'  # \\n significa nova linha\n"
">>> s  # sem print(), os caracteres especiais são incluídos na string\n"
"'Primeira linha.\\nSegunda linha.'\n"
">>> print(s)  # com print(), os caracteres especiais são interpretados, logo \\n produz uma nova linha\n"
"Primeira linha.\n"
"Segunda linha."

#: ../../tutorial/introduction.rst:182
msgid ""
"If you don't want characters prefaced by ``\\`` to be interpreted as special"
" characters, you can use *raw strings* by adding an ``r`` before the first "
"quote::"
msgstr ""
"Se não pretender que os caracteres precedidos por ``\\`` sejam interpretados"
" como especiais, pode usar *strings brutas* adicionando um ``r`` antes da "
"primeira aspa::"

#: ../../tutorial/introduction.rst:186
msgid ""
">>> print('C:\\some\\name')  # here \\n means newline!\n"
"C:\\some\n"
"ame\n"
">>> print(r'C:\\some\\name')  # note the r before the quote\n"
"C:\\some\\name"
msgstr ""
">>> print('C:\\algum\\nome')  # aqui \\n significa nova linha!\n"
"C:\\algum\n"
"ome\n"
">>> print(r'C:\\algum\\nome')  # note o r antes da aspa\n"
"C:\\algum\\nome"

#: ../../tutorial/introduction.rst:192
msgid ""
"There is one subtle aspect to raw strings: a raw string may not end in an "
"odd number of ``\\`` characters; see :ref:`the FAQ entry <faq-programming-"
"raw-string-backslash>` for more information and workarounds."
msgstr ""
"Existe um aspeto subtil nas strings brutas: uma string bruta não pode "
"terminar com um número ímpar de caracteres ``\\``; consulte a :ref:`entrada "
"na FAQ <faq-programming-raw-string-backslash>` para mais informações e "
"soluções alternativas."

#: ../../tutorial/introduction.rst:197
msgid ""
"String literals can span multiple lines.  One way is using triple-quotes: "
"``\"\"\"...\"\"\"`` or ``'''...'''``.  End-of-line characters are "
"automatically included in the string, but it's possible to prevent this by "
"adding a ``\\`` at the end of the line.  In the following example, the "
"initial newline is not included::"
msgstr ""
"Os literais de string podem abrangir várias linhas. Uma forma é usar aspas "
"triplas: ``\"\"\"...\"\"\"`` ou ``'''...'''``. Os caracteres de fim de linha"
" são incluídos automaticamente na string, mas é possível evitar isto "
"adicionando um ``\\`` no fim da linha. No exemplo seguinte, a nova linha "
"inicial não está incluída::"

#: ../../tutorial/introduction.rst:203
msgid ""
">>> print(\"\"\"\\\n"
"... Usage: thingy [OPTIONS]\n"
"...      -h                        Display this usage message\n"
"...      -H hostname               Hostname to connect to\n"
"... \"\"\")\n"
"Usage: thingy [OPTIONS]\n"
"     -h                        Display this usage message\n"
"     -H hostname               Hostname to connect to\n"
"\n"
">>>"
msgstr ""
">>> print(\"\"\"\\\n"
"... Uso: coisa [OPÇÕES]\n"
"...      -h                        Mostrar esta mensagem de uso\n"
"...      -H nome_do_servidor         Nome do servidor para ligar\n"
"... \"\"\")\n"
"Uso: coisa [OPÇÕES]\n"
"     -h                        Mostrar esta mensagem de uso\n"
"     -H nome_do_servidor         Nome do servidor para ligar\n"
"\n"
">>>"

#: ../../tutorial/introduction.rst:214
msgid ""
"Strings can be concatenated (glued together) with the ``+`` operator, and "
"repeated with ``*``::"
msgstr ""
"As strings podem ser concatenadas (juntas) com o operador ``+`` e repetidas "
"com ``*``::"

#: ../../tutorial/introduction.rst:217
msgid ""
">>> # 3 times 'un', followed by 'ium'\n"
">>> 3 * 'un' + 'ium'\n"
"'unununium'"
msgstr ""
">>> # 3 vezes 'un', seguido de 'ium'\n"
">>> 3 * 'un' + 'ium'\n"
"'ununúnio'"

#: ../../tutorial/introduction.rst:221
msgid ""
"Two or more *string literals* (i.e. the ones enclosed between quotes) next "
"to each other are automatically concatenated. ::"
msgstr ""
"Dois ou mais *literais de string* (ou seja, aqueles delimitados por aspas) "
"adjacentes são automaticamente concatenados. ::"

#: ../../tutorial/introduction.rst:224
msgid ""
">>> 'Py' 'thon'\n"
"'Python'"
msgstr ""
">>> 'Py' 'thon'\n"
"'Python'"

#: ../../tutorial/introduction.rst:227
msgid ""
"This feature is particularly useful when you want to break long strings::"
msgstr ""
"Esta funcionalidade é particularmente útil quando pretende dividir strings "
"longas::"

#: ../../tutorial/introduction.rst:229
msgid ""
">>> text = ('Put several strings within parentheses '\n"
"...         'to have them joined together.')\n"
">>> text\n"
"'Put several strings within parentheses to have them joined together.'"
msgstr ""
">>> texto = ('Coloque várias strings entre parênteses '\n"
"...         'para que sejam unidas.')\n"
">>> texto\n"
"'Coloque várias strings entre parênteses para que sejam unidas.'"

#: ../../tutorial/introduction.rst:234
msgid ""
"This only works with two literals though, not with variables or "
"expressions::"
msgstr ""
"Isto apenas funciona com dois literais, não com variáveis ou expressões::"

#: ../../tutorial/introduction.rst:236
msgid ""
">>> prefix = 'Py'\n"
">>> prefix 'thon'  # can't concatenate a variable and a string literal\n"
"  File \"<stdin>\", line 1\n"
"    prefix 'thon'\n"
"           ^^^^^^\n"
"SyntaxError: invalid syntax\n"
">>> ('un' * 3) 'ium'\n"
"  File \"<stdin>\", line 1\n"
"    ('un' * 3) 'ium'\n"
"               ^^^^^\n"
"SyntaxError: invalid syntax"
msgstr ""
">>> prefixo = 'Py'\n"
">>> prefixo 'thon'  # não é possível concatenar uma variável com um literal de string\n"
"  File \"<stdin>\", line 1\n"
"    prefixo 'thon'\n"
"           ^^^^^^\n"
"SyntaxError: sintaxe inválida\n"
">>> ('un' * 3) 'ium'\n"
"  File \"<stdin>\", line 1\n"
"    ('un' * 3) 'ium'\n"
"               ^^^^^\n"
"SyntaxError: sintaxe inválida"

#: ../../tutorial/introduction.rst:248
msgid ""
"If you want to concatenate variables or a variable and a literal, use "
"``+``::"
msgstr ""
"Se pretender concatenar variáveis ou uma variável com um literal, use "
"``+``::"

#: ../../tutorial/introduction.rst:250
msgid ""
">>> prefix + 'thon'\n"
"'Python'"
msgstr ""
">>> prefixo + 'thon'\n"
"'Python'"

#: ../../tutorial/introduction.rst:253
msgid ""
"Strings can be *indexed* (subscripted), with the first character having "
"index 0. There is no separate character type; a character is simply a string"
" of size one::"
msgstr ""
"As strings podem ser *indexadas* (subscritas), sendo que o primeiro carácter"
" tem o índice 0. Não existe um tipo de carácter separado; um carácter é "
"simplesmente uma string de tamanho um::"

#: ../../tutorial/introduction.rst:257
msgid ""
">>> word = 'Python'\n"
">>> word[0]  # character in position 0\n"
"'P'\n"
">>> word[5]  # character in position 5\n"
"'n'"
msgstr ""
">>> palavra = 'Python'\n"
">>> palavra[0]  # carácter na posição 0\n"
"'P'\n"
">>> palavra[5]  # carácter na posição 5\n"
"'n'"

#: ../../tutorial/introduction.rst:263
msgid ""
"Indices may also be negative numbers, to start counting from the right::"
msgstr ""
"Os índices também podem ser números negativos, para começar a contar da "
"direita::"

#: ../../tutorial/introduction.rst:265
msgid ""
">>> word[-1]  # last character\n"
"'n'\n"
">>> word[-2]  # second-last character\n"
"'o'\n"
">>> word[-6]\n"
"'P'"
msgstr ""
">>> palavra[-1]  # último carácter\n"
"'n'\n"
">>> palavra[-2]  # penúltimo carácter\n"
"'o'\n"
">>> palavra[-6]\n"
"'P'"

#: ../../tutorial/introduction.rst:272
msgid "Note that since -0 is the same as 0, negative indices start from -1."
msgstr ""
"Note que, uma vez que -0 é o mesmo que 0, os índices negativos começam em "
"-1."

#: ../../tutorial/introduction.rst:274
msgid ""
"In addition to indexing, *slicing* is also supported.  While indexing is "
"used to obtain individual characters, *slicing* allows you to obtain a "
"substring::"
msgstr ""
"Para além da indexação, o *fatiamento* (*slicing*) também é suportado. "
"Enquanto a indexação é usada para obter caracteres individuais, o "
"*fatiamento* permite obter uma substring::"

#: ../../tutorial/introduction.rst:277
msgid ""
">>> word[0:2]  # characters from position 0 (included) to 2 (excluded)\n"
"'Py'\n"
">>> word[2:5]  # characters from position 2 (included) to 5 (excluded)\n"
"'tho'"
msgstr ""
">>> palavra[0:2]  # caracteres da posição 0 (incluída) à 2 (excluída)\n"
"'Py'\n"
">>> palavra[2:5]  # caracteres da posição 2 (incluída) à 5 (excluída)\n"
"'tho'"

#: ../../tutorial/introduction.rst:282
msgid ""
"Slice indices have useful defaults; an omitted first index defaults to zero,"
" an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""
"Os índices de fatiamento têm valores predefinidos úteis; um primeiro índice "
"omitido é predefinido para zero, e um segundo índice omitido é predefinido "
"para o tamanho da string a ser fatiada. ::"

#: ../../tutorial/introduction.rst:285
msgid ""
">>> word[:2]   # character from the beginning to position 2 (excluded)\n"
"'Py'\n"
">>> word[4:]   # characters from position 4 (included) to the end\n"
"'on'\n"
">>> word[-2:]  # characters from the second-last (included) to the end\n"
"'on'"
msgstr ""
">>> palavra[:2]   # caracteres desde o início até à posição 2 (excluída)\n"
"'Py'\n"
">>> palavra[4:]   # caracteres desde a posição 4 (incluída) até ao fim\n"
"'on'\n"
">>> palavra[-2:]  # caracteres desde o penúltimo (incluído) até ao fim\n"
"'on'"

#: ../../tutorial/introduction.rst:292
msgid ""
"Note how the start is always included, and the end always excluded.  This "
"makes sure that ``s[:i] + s[i:]`` is always equal to ``s``::"
msgstr ""
"Note que o início é sempre incluído e o fim sempre excluído. Isto garante "
"que ``s[:i] + s[i:]`` é sempre igual a ``s``::"

#: ../../tutorial/introduction.rst:295
msgid ""
">>> word[:2] + word[2:]\n"
"'Python'\n"
">>> word[:4] + word[4:]\n"
"'Python'"
msgstr ""
">>> palavra[:2] + palavra[2:]\n"
"'Python'\n"
">>> palavra[:4] + palavra[4:]\n"
"'Python'"

#: ../../tutorial/introduction.rst:300
msgid ""
"One way to remember how slices work is to think of the indices as pointing "
"*between* characters, with the left edge of the first character numbered 0. "
"Then the right edge of the last character of a string of *n* characters has "
"index *n*, for example::"
msgstr ""
"Uma forma de recordar como funciona o fatiamento é pensar nos índices como "
"apontando *entre* caracteres, com a borda esquerda do primeiro carácter "
"numerada como 0. Então, a borda direita do último carácter de uma string de "
"*n* caracteres tem o índice *n*, por exemplo::"

#: ../../tutorial/introduction.rst:305
msgid ""
" +---+---+---+---+---+---+\n"
" | P | y | t | h | o | n |\n"
" +---+---+---+---+---+---+\n"
" 0   1   2   3   4   5   6\n"
"-6  -5  -4  -3  -2  -1"
msgstr ""
" +---+---+---+---+---+---+\n"
" | P | y | t | h | o | n |\n"
" +---+---+---+---+---+---+\n"
" 0   1   2   3   4   5   6\n"
"-6  -5  -4  -3  -2  -1"

#: ../../tutorial/introduction.rst:311
msgid ""
"The first row of numbers gives the position of the indices 0...6 in the "
"string; the second row gives the corresponding negative indices. The slice "
"from *i* to *j* consists of all characters between the edges labeled *i* and"
" *j*, respectively."
msgstr ""
"A primeira linha de números mostra a posição dos índices 0...6 na string; a "
"segunda linha mostra os índices negativos correspondentes. O fatiamento de "
"*i* a *j* consiste em todos os caracteres entre as bordas etiquetadas com "
"*i* e *j*, respetivamente."

#: ../../tutorial/introduction.rst:316
msgid ""
"For non-negative indices, the length of a slice is the difference of the "
"indices, if both are within bounds.  For example, the length of "
"``word[1:3]`` is 2."
msgstr ""
"Para índices não negativos, o comprimento de um fatiamento é a diferença "
"entre os índices, se ambos estiverem dentro dos limites. Por exemplo, o "
"comprimento de ``palavra[1:3]`` é 2."

#: ../../tutorial/introduction.rst:320
msgid "Attempting to use an index that is too large will result in an error::"
msgstr "Tentar usar um índice demasiado grande resultará num erro::"

#: ../../tutorial/introduction.rst:322
msgid ""
">>> word[42]  # the word only has 6 characters\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"IndexError: string index out of range"
msgstr ""
">>> palavra[42]  # a palavra só tem 6 caracteres\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"IndexError: índice de string fora do intervalo"

#: ../../tutorial/introduction.rst:327
msgid ""
"However, out of range slice indexes are handled gracefully when used for "
"slicing::"
msgstr ""
"No entanto, índices de fatiamento fora do intervalo são tratados de forma "
"elegante quando usados para fatiamento::"

#: ../../tutorial/introduction.rst:330
msgid ""
">>> word[4:42]\n"
"'on'\n"
">>> word[42:]\n"
"''"
msgstr ""
">>> palavra[4:42]\n"
"'on'\n"
">>> palavra[42:]\n"
"''"

#: ../../tutorial/introduction.rst:335
msgid ""
"Python strings cannot be changed --- they are :term:`immutable`. Therefore, "
"assigning to an indexed position in the string results in an error::"
msgstr ""
"As strings em Python não podem ser alteradas — são :term:`imutáveis`. Por "
"conseguinte, atribuir a uma posição indexada na string resulta num erro::"

#: ../../tutorial/introduction.rst:338
msgid ""
">>> word[0] = 'J'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: 'str' object does not support item assignment\n"
">>> word[2:] = 'py'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: 'str' object does not support item assignment"
msgstr ""
">>> palavra[0] = 'J'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: o objeto 'str' não suporta atribuição de item\n"
">>> palavra[2:] = 'py'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: o objeto 'str' não suporta atribuição de item"

#: ../../tutorial/introduction.rst:347
msgid "If you need a different string, you should create a new one::"
msgstr "Se precisar de uma string diferente, deve criar uma nova::"

#: ../../tutorial/introduction.rst:349
msgid ""
">>> 'J' + word[1:]\n"
"'Jython'\n"
">>> word[:2] + 'py'\n"
"'Pypy'"
msgstr ""
">>> 'J' + palavra[1:]\n"
"'Jython'\n"
">>> palavra[:2] + 'py'\n"
"'Pypy'"

#: ../../tutorial/introduction.rst:354
msgid "The built-in function :func:`len` returns the length of a string::"
msgstr "A função integrada :func:`len` devolve o comprimento de uma string::"

#: ../../tutorial/introduction.rst:356
msgid ""
">>> s = 'supercalifragilisticexpialidocious'\n"
">>> len(s)\n"
"34"
msgstr ""
">>> s = 'supercalifragilisticexpialidoso'\n"
">>> len(s)\n"
"34"

#: ../../tutorial/introduction.rst:363
msgid ":ref:`textseq`"
msgstr ":ref:`sequências_de_texto`"

#: ../../tutorial/introduction.rst:364
msgid ""
"Strings are examples of *sequence types*, and support the common operations "
"supported by such types."
msgstr ""
"As strings são exemplos de *tipos de sequência* e suportam as operações "
"comuns suportadas por esses tipos."

#: ../../tutorial/introduction.rst:367
msgid ":ref:`string-methods`"
msgstr ":ref:`métodos_de_string`"

#: ../../tutorial/introduction.rst:368
msgid ""
"Strings support a large number of methods for basic transformations and "
"searching."
msgstr ""
"As strings suportam um grande número de métodos para transformações básicas "
"e pesquisa."

#: ../../tutorial/introduction.rst:371
msgid ":ref:`f-strings`"
msgstr ":ref:`f-strings`"

#: ../../tutorial/introduction.rst:372
msgid "String literals that have embedded expressions."
msgstr "Literais de string que contêm expressões incorporadas."

#: ../../tutorial/introduction.rst:374
msgid ":ref:`formatstrings`"
msgstr ":ref:`strings_de_formatação`"

#: ../../tutorial/introduction.rst:375
msgid "Information about string formatting with :meth:`str.format`."
msgstr "Informação sobre formatação de strings com :meth:`str.format`."

#: ../../tutorial/introduction.rst:377
msgid ":ref:`old-string-formatting`"
msgstr ":ref:`formatação_antiga_de_strings`"

#: ../../tutorial/introduction.rst:378
msgid ""
"The old formatting operations invoked when strings are the left operand of "
"the ``%`` operator are described in more detail here."
msgstr ""
"As operações antigas de formatação invocadas quando as strings são o "
"operando esquerdo do operador ``%`` são descritas aqui com mais detalhe."

#: ../../tutorial/introduction.rst:385
msgid "Lists"
msgstr "Listas"

#: ../../tutorial/introduction.rst:387
msgid ""
"Python knows a number of *compound* data types, used to group together other"
" values.  The most versatile is the *list*, which can be written as a list "
"of comma-separated values (items) between square brackets.  Lists might "
"contain items of different types, but usually the items all have the same "
"type. ::"
msgstr ""
"O Python conhece vários *tipos de dados compostos*, usados para agrupar "
"outros valores. O mais versátil é a *lista*, que pode ser escrita como uma "
"lista de valores separados por vírgulas (itens) entre parênteses retos. As "
"listas podem conter itens de tipos diferentes, mas geralmente todos os itens"
" têm o mesmo tipo. ::"

#: ../../tutorial/introduction.rst:392
msgid ""
">>> squares = [1, 4, 9, 16, 25]\n"
">>> squares\n"
"[1, 4, 9, 16, 25]"
msgstr ""
">>> quadrados = [1, 4, 9, 16, 25]\n"
">>> quadrados\n"
"[1, 4, 9, 16, 25]"

#: ../../tutorial/introduction.rst:396
msgid ""
"Like strings (and all other built-in :term:`sequence` types), lists can be "
"indexed and sliced::"
msgstr ""
"Tal como as strings (e todos os outros tipos de :term:`sequência` "
"integrados), as listas podem ser indexadas e fatiadas::"

#: ../../tutorial/introduction.rst:399
msgid ""
">>> squares[0]  # indexing returns the item\n"
"1\n"
">>> squares[-1]\n"
"25\n"
">>> squares[-3:]  # slicing returns a new list\n"
"[9, 16, 25]"
msgstr ""
">>> quadrados[0]  # a indexação devolve o item\n"
"1\n"
">>> quadrados[-1]\n"
"25\n"
">>> quadrados[-3:]  # o fatiamento devolve uma nova lista\n"
"[9, 16, 25]"

#: ../../tutorial/introduction.rst:406
msgid "Lists also support operations like concatenation::"
msgstr "As listas também suportam operações como a concatenação::"

#: ../../tutorial/introduction.rst:408
msgid ""
">>> squares + [36, 49, 64, 81, 100]\n"
"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
msgstr ""
">>> quadrados + [36, 49, 64, 81, 100]\n"
"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"

#: ../../tutorial/introduction.rst:411
msgid ""
"Unlike strings, which are :term:`immutable`, lists are a :term:`mutable` "
"type, i.e. it is possible to change their content::"
msgstr ""
"Ao contrário das strings, que são :term:`imutáveis`, as listas são um tipo "
":term:`mutável`, ou seja, é possível alterar o seu conteúdo::"

#: ../../tutorial/introduction.rst:414
msgid ""
">>> cubes = [1, 8, 27, 65, 125]  # something's wrong here\n"
">>> 4 ** 3  # the cube of 4 is 64, not 65!\n"
"64\n"
">>> cubes[3] = 64  # replace the wrong value\n"
">>> cubes\n"
"[1, 8, 27, 64, 125]"
msgstr ""
">>> cubos = [1, 8, 27, 65, 125]  # algo está errado aqui\n"
">>> 4 ** 3  # o cubo de 4 é 64, não 65!\n"
"64\n"
">>> cubos[3] = 64  # substituir o valor errado\n"
">>> cubos\n"
"[1, 8, 27, 64, 125]"

#: ../../tutorial/introduction.rst:421
msgid ""
"You can also add new items at the end of the list, by using the "
":meth:`!list.append` *method* (we will see more about methods later)::"
msgstr ""

#: ../../tutorial/introduction.rst:424
msgid ""
">>> cubes.append(216)  # add the cube of 6\n"
">>> cubes.append(7 ** 3)  # and the cube of 7\n"
">>> cubes\n"
"[1, 8, 27, 64, 125, 216, 343]"
msgstr ""
">>> cubos.append(216)  # adicionar o cubo de 6\n"
">>> cubos.append(7 ** 3)  # e o cubo de 7\n"
">>> cubos\n"
"[1, 8, 27, 64, 125, 216, 343]"

#: ../../tutorial/introduction.rst:429
msgid ""
"Simple assignment in Python never copies data. When you assign a list to a "
"variable, the variable refers to the *existing list*. Any changes you make "
"to the list through one variable will be seen through all other variables "
"that refer to it.::"
msgstr ""
"Uma atribuição simples em Python nunca copia dados. Quando atribui uma lista"
" a uma variável, a variável refere-se à *lista existente*. Quaisquer "
"alterações que fizer à lista através de uma variável serão visíveis através "
"de todas as outras variáveis que a referenciem.::"

#: ../../tutorial/introduction.rst:434
msgid ""
">>> rgb = [\"Red\", \"Green\", \"Blue\"]\n"
">>> rgba = rgb\n"
">>> id(rgb) == id(rgba)  # they reference the same object\n"
"True\n"
">>> rgba.append(\"Alph\")\n"
">>> rgb\n"
"[\"Red\", \"Green\", \"Blue\", \"Alph\"]"
msgstr ""
">>> rgb = [\"Vermelho\", \"Verde\", \"Azul\"]\n"
">>> rgba = rgb\n"
">>> id(rgb) == id(rgba)  # referenciam o mesmo objeto\n"
"True\n"
">>> rgba.append(\"Alfa\")\n"
">>> rgb\n"
"[\"Vermelho\", \"Verde\", \"Azul\", \"Alfa\"]"

#: ../../tutorial/introduction.rst:442
msgid ""
"All slice operations return a new list containing the requested elements.  "
"This means that the following slice returns a :ref:`shallow copy "
"<shallow_vs_deep_copy>` of the list::"
msgstr ""
"Todas as operações de fatiamento devolvem uma nova lista contendo os "
"elementos solicitados. Isto significa que o seguinte fatiamento devolve uma "
":ref:`cópia superficial <shallow_vs_deep_copy>` da lista::"

#: ../../tutorial/introduction.rst:446
msgid ""
">>> correct_rgba = rgba[:]\n"
">>> correct_rgba[-1] = \"Alpha\"\n"
">>> correct_rgba\n"
"[\"Red\", \"Green\", \"Blue\", \"Alpha\"]\n"
">>> rgba\n"
"[\"Red\", \"Green\", \"Blue\", \"Alph\"]"
msgstr ""
">>> rgba_correto = rgba[:]\n"
">>> rgba_correto[-1] = \"Alfa\"\n"
">>> rgba_correto\n"
"[\"Vermelho\", \"Verde\", \"Azul\", \"Alfa\"]\n"
">>> rgba\n"
"[\"Vermelho\", \"Verde\", \"Azul\", \"Alph\"]"

#: ../../tutorial/introduction.rst:453
msgid ""
"Assignment to slices is also possible, and this can even change the size of "
"the list or clear it entirely::"
msgstr ""
"A atribuição a fatiamentos também é possível, e isto pode até alterar o "
"tamanho da lista ou limpá-la completamente::"

#: ../../tutorial/introduction.rst:456
msgid ""
">>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> letters\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> # replace some values\n"
">>> letters[2:5] = ['C', 'D', 'E']\n"
">>> letters\n"
"['a', 'b', 'C', 'D', 'E', 'f', 'g']\n"
">>> # now remove them\n"
">>> letters[2:5] = []\n"
">>> letters\n"
"['a', 'b', 'f', 'g']\n"
">>> # clear the list by replacing all the elements with an empty list\n"
">>> letters[:] = []\n"
">>> letters\n"
"[]"
msgstr ""
">>> letras = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> letras\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> # substituir alguns valores\n"
">>> letras[2:5] = ['C', 'D', 'E']\n"
">>> letras\n"
"['a', 'b', 'C', 'D', 'E', 'f', 'g']\n"
">>> # agora removê-los\n"
">>> letras[2:5] = []\n"
">>> letras\n"
"['a', 'b', 'f', 'g']\n"
">>> # limpar a lista substituindo todos os elementos por uma lista vazia\n"
">>> letras[:] = []\n"
">>> letras\n"
"[]"

#: ../../tutorial/introduction.rst:472
msgid "The built-in function :func:`len` also applies to lists::"
msgstr "A função integrada :func:`len` também se aplica a listas::"

#: ../../tutorial/introduction.rst:474
msgid ""
">>> letters = ['a', 'b', 'c', 'd']\n"
">>> len(letters)\n"
"4"
msgstr ""
">>> letras = ['a', 'b', 'c', 'd']\n"
">>> len(letras)\n"
"4"

#: ../../tutorial/introduction.rst:478
msgid ""
"It is possible to nest lists (create lists containing other lists), for "
"example::"
msgstr ""
"É possível aninhar listas (criar listas que contêm outras listas), por "
"exemplo::"

#: ../../tutorial/introduction.rst:481
msgid ""
">>> a = ['a', 'b', 'c']\n"
">>> n = [1, 2, 3]\n"
">>> x = [a, n]\n"
">>> x\n"
"[['a', 'b', 'c'], [1, 2, 3]]\n"
">>> x[0]\n"
"['a', 'b', 'c']\n"
">>> x[0][1]\n"
"'b'"
msgstr ""
">>> a = ['a', 'b', 'c']\n"
">>> n = [1, 2, 3]\n"
">>> x = [a, n]\n"
">>> x\n"
"[['a', 'b', 'c'], [1, 2, 3]]\n"
">>> x[0]\n"
"['a', 'b', 'c']\n"
">>> x[0][1]\n"
"'b'"

#: ../../tutorial/introduction.rst:494
msgid "First Steps Towards Programming"
msgstr "Primeiros Passos em Programação"

#: ../../tutorial/introduction.rst:496
msgid ""
"Of course, we can use Python for more complicated tasks than adding two and "
"two together.  For instance, we can write an initial sub-sequence of the "
"`Fibonacci series <https://en.wikipedia.org/wiki/Fibonacci_sequence>`_ as "
"follows::"
msgstr ""
"Claro que podemos usar o Python para tarefas mais complexas do que somar "
"dois mais dois. Por exemplo, podemos escrever uma subsequência inicial da "
"`série de Fibonacci <https://pt.wikipedia.org/wiki/Sequência_de_Fibonacci>`_"
" da seguinte forma::"

#: ../../tutorial/introduction.rst:501
msgid ""
">>> # Fibonacci series:\n"
">>> # the sum of two elements defines the next\n"
">>> a, b = 0, 1\n"
">>> while a < 10:\n"
"...     print(a)\n"
"...     a, b = b, a+b\n"
"...\n"
"0\n"
"1\n"
"1\n"
"2\n"
"3\n"
"5\n"
"8"
msgstr ""
">>> # Série de Fibonacci:\n"
">>> # a soma de dois elementos define o próximo\n"
">>> a, b = 0, 1\n"
">>> while a < 10:\n"
"...     print(a)\n"
"...     a, b = b, a+b\n"
"...\n"
"0\n"
"1\n"
"1\n"
"2\n"
"3\n"
"5\n"
"8"

#: ../../tutorial/introduction.rst:516
msgid "This example introduces several new features."
msgstr "Este exemplo introduz várias funcionalidades novas."

#: ../../tutorial/introduction.rst:518
msgid ""
"The first line contains a *multiple assignment*: the variables ``a`` and "
"``b`` simultaneously get the new values 0 and 1.  On the last line this is "
"used again, demonstrating that the expressions on the right-hand side are "
"all evaluated first before any of the assignments take place.  The right-"
"hand side expressions are evaluated  from the left to the right."
msgstr ""
"A primeira linha contém uma *atribuição múltipla*: as variáveis ``a`` e "
"``b`` recebem simultaneamente os novos valores 0 e 1. Na última linha, isto "
"é usado novamente, demonstrando que as expressões do lado direito são todas "
"avaliadas primeiro antes de qualquer atribuição ocorrer. As expressões do "
"lado direito são avaliadas da esquerda para a direita."

#: ../../tutorial/introduction.rst:524
msgid ""
"The :keyword:`while` loop executes as long as the condition (here: ``a < "
"10``) remains true.  In Python, like in C, any non-zero integer value is "
"true; zero is false.  The condition may also be a string or list value, in "
"fact any sequence; anything with a non-zero length is true, empty sequences "
"are false.  The test used in the example is a simple comparison.  The "
"standard comparison operators are written the same as in C: ``<`` (less "
"than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal "
"to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""
"O ciclo :keyword:`while` executa enquanto a condição (aqui: ``a < 10``) "
"permanecer verdadeira. Em Python, tal como em C, qualquer valor inteiro não "
"nulo é verdadeiro; zero é falso. A condição também pode ser uma string ou um"
" valor de lista, de facto qualquer sequência; qualquer coisa com um "
"comprimento não nulo é verdadeira, sequências vazias são falsas. O teste "
"usado no exemplo é uma comparação simples. Os operadores de comparação "
"padrão são escritos da mesma forma que em C: ``<`` (menor que), ``>`` (maior"
" que), ``==`` (igual a), ``<=`` (menor ou igual a), ``>=`` (maior ou igual "
"a) e ``!=`` (diferente de)."

#: ../../tutorial/introduction.rst:533
msgid ""
"The *body* of the loop is *indented*: indentation is Python's way of "
"grouping statements.  At the interactive prompt, you have to type a tab or "
"space(s) for each indented line.  In practice you will prepare more "
"complicated input for Python with a text editor; all decent text editors "
"have an auto-indent facility.  When a compound statement is entered "
"interactively, it must be followed by a blank line to indicate completion "
"(since the parser cannot guess when you have typed the last line).  Note "
"that each line within a basic block must be indented by the same amount."
msgstr ""
"O *corpo* do ciclo está *identado*: a identação é a forma do Python agrupar "
"instruções. No prompt interativo, tem de digitar um tabulador ou espaços "
"para cada linha identada. Na prática, preparará entradas mais complexas para"
" o Python com um editor de texto; todos os editores de texto decentes têm "
"uma funcionalidade de identação automática. Quando uma instrução composta é "
"introduzida interativamente, deve ser seguida por uma linha em branco para "
"indicar a conclusão (uma vez que o analisador não pode adivinhar quando "
"digitou a última linha). Note que cada linha dentro de um bloco básico deve "
"ser identada com a mesma quantidade."

#: ../../tutorial/introduction.rst:542
msgid ""
"The :func:`print` function writes the value of the argument(s) it is given. "
"It differs from just writing the expression you want to write (as we did "
"earlier in the calculator examples) in the way it handles multiple "
"arguments, floating-point quantities, and strings.  Strings are printed "
"without quotes, and a space is inserted between items, so you can format "
"things nicely, like this::"
msgstr ""
"A função :func:`print` escreve o valor do(s) argumento(s) que lhe são "
"fornecidos. Difere de simplesmente escrever a expressão que pretende (como "
"fizemos anteriormente nos exemplos da calculadora) na forma como trata "
"múltiplos argumentos, quantidades de vírgula flutuante e strings. As strings"
" são impressas sem aspas, e um espaço é inserido entre os itens, para que "
"possa formatar as coisas de forma agradável, como isto::"

#: ../../tutorial/introduction.rst:549
msgid ""
">>> i = 256*256\n"
">>> print('The value of i is', i)\n"
"The value of i is 65536"
msgstr ""
">>> i = 256*256\n"
">>> print('O valor de i é', i)\n"
"O valor de i é 65536"

#: ../../tutorial/introduction.rst:553
msgid ""
"The keyword argument *end* can be used to avoid the newline after the "
"output, or end the output with a different string::"
msgstr ""
"O argumento de palavra-chave *end* pode ser usado para evitar a nova linha "
"depois da saída, ou terminar a saída com uma string diferente::"

#: ../../tutorial/introduction.rst:556
msgid ""
">>> a, b = 0, 1\n"
">>> while a < 1000:\n"
"...     print(a, end=',')\n"
"...     a, b = b, a+b\n"
"...\n"
"0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,"
msgstr ""
">>> a, b = 0, 1\n"
">>> while a < 1000:\n"
"...     print(a, end=',')\n"
"...     a, b = b, a+b\n"
"...\n"
"0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,"

#: ../../tutorial/introduction.rst:565
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../tutorial/introduction.rst:566
msgid ""
"Since ``**`` has higher precedence than ``-``, ``-3**2`` will be interpreted"
" as ``-(3**2)`` and thus result in ``-9``.  To avoid this and get ``9``, you"
" can use ``(-3)**2``."
msgstr ""
"Uma vez que ``**`` tem precedência superior a ``-``, ``-3**2`` será "
"interpretado como ``-(3**2)`` e, assim, resultará em ``-9``. Para evitar "
"isto e obter ``9``, pode usar ``(-3)**2``."

#: ../../tutorial/introduction.rst:570
msgid ""
"Unlike other languages, special characters such as ``\\n`` have the same "
"meaning with both single (``'...'``) and double (``\"...\"``) quotes. The "
"only difference between the two is that within single quotes you don't need "
"to escape ``\"`` (but you have to escape ``\\'``) and vice versa."
msgstr ""
"Ao contrário de outras linguagens, caracteres especiais como ``\\n`` têm o "
"mesmo significado tanto em aspas simples (``'...'``) como duplas "
"(``\"...\"``). A única diferença entre as duas é que, dentro de aspas "
"simples, não precisa de escapar ``\"`` (mas tem de escapar ``\\'``) e vice-"
"versa."

#: ../../tutorial/introduction.rst:21
msgid "# (hash)"
msgstr "# (cerquilha)"

#: ../../tutorial/introduction.rst:21
msgid "comment"
msgstr "comentário"
