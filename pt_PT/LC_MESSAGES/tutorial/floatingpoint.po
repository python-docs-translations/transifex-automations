# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# André Moreira <afrmscb@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 16:33+0000\n"
"PO-Revision-Date: 2025-09-22 16:51+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../tutorial/floatingpoint.rst:9
msgid "Floating Point Arithmetic:  Issues and Limitations"
msgstr ""

#: ../../tutorial/floatingpoint.rst:14
msgid ""
"Floating-point numbers are represented in computer hardware as base 2 "
"(binary) fractions.  For example, the **decimal** fraction ``0.125`` has "
"value 1/10 + 2/100 + 5/1000, and in the same way the **binary** fraction "
"``0.001`` has value 0/2 + 0/4 + 1/8. These two fractions have identical "
"values, the only real difference being that the first is written in base 10 "
"fractional notation, and the second in base 2."
msgstr ""

#: ../../tutorial/floatingpoint.rst:21
msgid ""
"Unfortunately, most decimal fractions cannot be represented exactly as "
"binary fractions.  A consequence is that, in general, the decimal floating-"
"point numbers you enter are only approximated by the binary floating-point "
"numbers actually stored in the machine."
msgstr ""
"Infelizmente, a maioria das frações decimais não pode ser representada "
"exatamente como frações binárias. Uma consequência é que, em geral, os "
"números de vírgula flutuante decimais que introduz são apenas aproximados "
"pelos números de vírgula flutuante binários realmente armazenados na "
"máquina."

#: ../../tutorial/floatingpoint.rst:26
msgid ""
"The problem is easier to understand at first in base 10.  Consider the "
"fraction 1/3.  You can approximate that as a base 10 fraction::"
msgstr ""
"O problema é mais fácil de entender inicialmente em base 10. Considere a "
"fração 1/3. Pode aproximá-la como uma fração de base 10:"

#: ../../tutorial/floatingpoint.rst:31 ../../tutorial/floatingpoint.rst:35
msgid "or, better, ::"
msgstr "ou, melhor, :"

#: ../../tutorial/floatingpoint.rst:39
msgid ""
"and so on.  No matter how many digits you're willing to write down, the "
"result will never be exactly 1/3, but will be an increasingly better "
"approximation of 1/3."
msgstr ""
"e assim sucessivamente. Não importa quantos dígitos esteja disposto a "
"escrever, o resultado nunca será exatamente 1/3, mas será uma aproximação "
"cada vez melhor de 1/3."

#: ../../tutorial/floatingpoint.rst:43
msgid ""
"In the same way, no matter how many base 2 digits you're willing to use, the"
" decimal value 0.1 cannot be represented exactly as a base 2 fraction.  In "
"base 2, 1/10 is the infinitely repeating fraction ::"
msgstr ""
"Da mesma forma, não importa quantos dígitos de base 2 esteja disposto a "
"usar, o valor decimal 0,1 não pode ser representado exatamente como uma "
"fração de base 2. Em base 2, 1/10 é a fração infinitamente repetida:"

#: ../../tutorial/floatingpoint.rst:49
msgid ""
"Stop at any finite number of bits, and you get an approximation.  On most "
"machines today, floats are approximated using a binary fraction with the "
"numerator using the first 53 bits starting with the most significant bit and"
" with the denominator as a power of two.  In the case of 1/10, the binary "
"fraction is ``3602879701896397 / 2 ** 55`` which is close to but not exactly"
" equal to the true value of 1/10."
msgstr ""
"Pare em qualquer número finito de bits e obterá uma aproximação. Na maioria "
"das máquinas atuais, os números de vírgula flutuante são aproximados usando "
"uma fração binária com o numerador a usar os primeiros 53 bits, começando "
"com o bit mais significativo, e o denominador como uma potência de dois. No "
"caso de 1/10, a fração binária é ``3602879701896397 / 2 ** 55``, que está "
"próxima, mas não é exatamente igual ao valor real de 1/10."

#: ../../tutorial/floatingpoint.rst:56
msgid ""
"Many users are not aware of the approximation because of the way values are "
"displayed.  Python only prints a decimal approximation to the true decimal "
"value of the binary approximation stored by the machine.  On most machines, "
"if Python were to print the true decimal value of the binary approximation "
"stored for 0.1, it would have to display ::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:65
msgid ""
"That is more digits than most people find useful, so Python keeps the number"
" of digits manageable by displaying a rounded value instead ::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:71
msgid ""
"Just remember, even though the printed result looks like the exact value of "
"1/10, the actual stored value is the nearest representable binary fraction."
msgstr ""
"Lembre-se apenas que, embora o resultado impresso pareça o valor exato de "
"1/10, o valor realmente armazenado é a fração binária representável mais "
"próxima."

#: ../../tutorial/floatingpoint.rst:74
msgid ""
"Interestingly, there are many different decimal numbers that share the same "
"nearest approximate binary fraction.  For example, the numbers ``0.1`` and "
"``0.10000000000000001`` and "
"``0.1000000000000000055511151231257827021181583404541015625`` are all "
"approximated by ``3602879701896397 / 2 ** 55``.  Since all of these decimal "
"values share the same approximation, any one of them could be displayed "
"while still preserving the invariant ``eval(repr(x)) == x``."
msgstr ""
"Curiosamente, existem muitos números decimais diferentes que partilham a "
"mesma aproximação binária mais próxima. Por exemplo, os números ``0,1``, "
"``0,10000000000000001`` e "
"``0,1000000000000000055511151231257827021181583404541015625`` são todos "
"aproximados por ``3602879701896397 / 2 ** 55``. Uma vez que todos estes "
"valores decimais partilham a mesma aproximação, qualquer um deles poderia "
"ser apresentado, mantendo ainda o invariante ``eval(repr(x)) == x``."

#: ../../tutorial/floatingpoint.rst:82
msgid ""
"Historically, the Python prompt and built-in :func:`repr` function would "
"choose the one with 17 significant digits, ``0.10000000000000001``.   "
"Starting with Python 3.1, Python (on most systems) is now able to choose the"
" shortest of these and simply display ``0.1``."
msgstr ""
"Historicamente, o prompt do Python e a função incorporada :func:`repr` "
"escolheriam a opção com 17 dígitos significativos, ``0,10000000000000001``. "
"A partir do Python 3.1, o Python (na maioria dos sistemas) é agora capaz de "
"escolher a mais curta destas opções e simplesmente apresentar ``0,1``."

#: ../../tutorial/floatingpoint.rst:87
msgid ""
"Note that this is in the very nature of binary floating-point: this is not a"
" bug in Python, and it is not a bug in your code either.  You'll see the "
"same kind of thing in all languages that support your hardware's floating-"
"point arithmetic (although some languages may not *display* the difference "
"by default, or in all output modes)."
msgstr ""

#: ../../tutorial/floatingpoint.rst:93
msgid ""
"For more pleasant output, you may wish to use string formatting to produce a"
" limited number of significant digits::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:105
msgid ""
"It's important to realize that this is, in a real sense, an illusion: you're"
" simply rounding the *display* of the true machine value."
msgstr ""
"É importante perceber que isto é, num sentido real, uma ilusão: está "
"simplesmente a arredondar a *apresentação* do valor real da máquina."

#: ../../tutorial/floatingpoint.rst:108
msgid ""
"One illusion may beget another.  For example, since 0.1 is not exactly 1/10,"
" summing three values of 0.1 may not yield exactly 0.3, either::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:114
msgid ""
"Also, since the 0.1 cannot get any closer to the exact value of 1/10 and 0.3"
" cannot get any closer to the exact value of 3/10, then pre-rounding with "
":func:`round` function cannot help::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:121
msgid ""
"Though the numbers cannot be made closer to their intended exact values, the"
" :func:`round` function can be useful for post-rounding so that results with"
" inexact values become comparable to one another::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:128
msgid ""
"Binary floating-point arithmetic holds many surprises like this.  The "
"problem with \"0.1\" is explained in precise detail below, in the "
"\"Representation Error\" section.  See `Examples of Floating Point Problems "
"<https://jvns.ca/blog/2023/01/13/examples-of-floating-point-problems/>`_ for"
" a pleasant summary of how binary floating-point works and the kinds of "
"problems commonly encountered in practice.  Also see `The Perils of Floating"
" Point <http://www.indowsway.com/floatingpoint.htm>`_ for a more complete "
"account of other common surprises."
msgstr ""

#: ../../tutorial/floatingpoint.rst:137
msgid ""
"As that says near the end, \"there are no easy answers.\"  Still, don't be "
"unduly wary of floating-point!  The errors in Python float operations are "
"inherited from the floating-point hardware, and on most machines are on the "
"order of no more than 1 part in 2\\*\\*53 per operation.  That's more than "
"adequate for most tasks, but you do need to keep in mind that it's not "
"decimal arithmetic and that every float operation can suffer a new rounding "
"error."
msgstr ""

#: ../../tutorial/floatingpoint.rst:144
msgid ""
"While pathological cases do exist, for most casual use of floating-point "
"arithmetic you'll see the result you expect in the end if you simply round "
"the display of your final results to the number of decimal digits you "
"expect. :func:`str` usually suffices, and for finer control see the "
":meth:`str.format` method's format specifiers in :ref:`formatstrings`."
msgstr ""
"Embora existam casos patológicos, para a maioria dos usos casuais de "
"aritmética de vírgula flutuante, verá o resultado que espera no final se "
"simplesmente arredondar a apresentação dos seus resultados finais para o "
"número de dígitos decimais que espera. :func:`str` geralmente é suficiente "
"e, para um controlo mais fino, consulte os especificadores de formato do "
"método :meth:`str.format` em :ref:`formatstrings`."

#: ../../tutorial/floatingpoint.rst:150
msgid ""
"For use cases which require exact decimal representation, try using the "
":mod:`decimal` module which implements decimal arithmetic suitable for "
"accounting applications and high-precision applications."
msgstr ""
"Para casos de uso que requeiram representação decimal exata, experimente "
"usar o módulo :mod:`decimal`, que implementa aritmética decimal adequada "
"para aplicações contabilísticas e de alta precisão."

#: ../../tutorial/floatingpoint.rst:154
msgid ""
"Another form of exact arithmetic is supported by the :mod:`fractions` module"
" which implements arithmetic based on rational numbers (so the numbers like "
"1/3 can be represented exactly)."
msgstr ""
"Outra forma de aritmética exata é suportada pelo módulo :mod:`fractions`, "
"que implementa aritmética baseada em números racionais (assim, números como "
"1/3 podem ser representados exatamente)."

#: ../../tutorial/floatingpoint.rst:158
msgid ""
"If you are a heavy user of floating-point operations you should take a look "
"at the NumPy package and many other packages for mathematical and "
"statistical operations supplied by the SciPy project. See "
"<https://scipy.org>."
msgstr ""
"Se for um utilizador intensivo de operações de vírgula flutuante, deve dar "
"uma vista de olhos ao pacote NumPy e a muitos outros pacotes para operações "
"matemáticas e estatísticas fornecidos pelo projeto SciPy. Consulte "
"<https://scipy.org>."

#: ../../tutorial/floatingpoint.rst:162
msgid ""
"Python provides tools that may help on those rare occasions when you really "
"*do* want to know the exact value of a float.  The "
":meth:`float.as_integer_ratio` method expresses the value of a float as a "
"fraction::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:171
msgid ""
"Since the ratio is exact, it can be used to losslessly recreate the original"
" value::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:177
msgid ""
"The :meth:`float.hex` method expresses a float in hexadecimal (base 16), "
"again giving the exact value stored by your computer::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:183
msgid ""
"This precise hexadecimal representation can be used to reconstruct the float"
" value exactly::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:189
msgid ""
"Since the representation is exact, it is useful for reliably porting values "
"across different versions of Python (platform independence) and exchanging "
"data with other languages that support the same format (such as Java and "
"C99)."
msgstr ""
"Uma vez que a representação é exata, é útil para transportar valores de "
"forma fiável entre diferentes versões do Python (independência de "
"plataforma) e trocar dados com outras linguagens que suportam o mesmo "
"formato (como Java e C99)."

#: ../../tutorial/floatingpoint.rst:193
msgid ""
"Another helpful tool is the :func:`math.fsum` function which helps mitigate "
"loss-of-precision during summation.  It tracks \"lost digits\" as values are"
" added onto a running total.  That can make a difference in overall accuracy"
" so that the errors do not accumulate to the point where they affect the "
"final total:"
msgstr ""

#: ../../tutorial/floatingpoint.rst:207
msgid "Representation Error"
msgstr "Erro de representação"

#: ../../tutorial/floatingpoint.rst:209
msgid ""
"This section explains the \"0.1\" example in detail, and shows how you can "
"perform an exact analysis of cases like this yourself.  Basic familiarity "
"with binary floating-point representation is assumed."
msgstr ""
"Esta secção explica o exemplo \"0,1\" em detalhe e mostra como pode realizar"
" uma análise exata de casos como este. Assume-se familiaridade básica com a "
"representação de vírgula flutuante binária."

#: ../../tutorial/floatingpoint.rst:213
msgid ""
":dfn:`Representation error` refers to the fact that some (most, actually) "
"decimal fractions cannot be represented exactly as binary (base 2) "
"fractions. This is the chief reason why Python (or Perl, C, C++, Java, "
"Fortran, and many others) often won't display the exact decimal number you "
"expect."
msgstr ""
":dfn:`Erro de representação` refere-se ao facto de que algumas (na verdade, "
"a maioria) frações decimais não podem ser representadas exatamente como "
"frações binárias (base 2). Esta é a principal razão pela qual o Python (ou "
"Perl, C, C++, Java, Fortran, e muitos outros) muitas vezes não apresenta o "
"número decimal exato que espera."

#: ../../tutorial/floatingpoint.rst:218
msgid ""
"Why is that?  1/10 is not exactly representable as a binary fraction.  Since"
" at least 2000, almost all machines use IEEE 754 binary floating-point "
"arithmetic, and almost all platforms map Python floats to IEEE 754 binary64 "
"\"double precision\" values.  IEEE 754 binary64 values contain 53 bits of "
"precision, so on input the computer strives to convert 0.1 to the closest "
"fraction it can of the form *J*/2**\\ *N* where *J* is an integer containing"
" exactly 53 bits. Rewriting ::"
msgstr ""
"Porquê? 1/10 não é exatamente representável como uma fração binária. Desde "
"pelo menos 2000, quase todas as máquinas usam aritmética de vírgula "
"flutuante binária IEEE 754, e quase todas as plataformas mapeiam os números "
"de vírgula flutuante do Python para valores IEEE 754 binary64 de \"precisão "
"dupla\". Os valores IEEE 754 binary64 contêm 53 bits de precisão, por isso, "
"ao introduzir, o computador tenta converter 0,1 para a fração mais próxima "
"possível da forma *J*/2**\\ *N*, onde *J* é um inteiro contendo exatamente "
"53 bits. Reescrevendo:"

#: ../../tutorial/floatingpoint.rst:229
msgid "as ::"
msgstr "como:"

#: ../../tutorial/floatingpoint.rst:233
msgid ""
"and recalling that *J* has exactly 53 bits (is ``>= 2**52`` but ``< "
"2**53``), the best value for *N* is 56::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:239
msgid ""
"That is, 56 is the only value for *N* that leaves *J* with exactly 53 bits."
"  The best possible value for *J* is then that quotient rounded::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:246
msgid ""
"Since the remainder is more than half of 10, the best approximation is "
"obtained by rounding up::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:252
msgid ""
"Therefore the best possible approximation to 1/10 in IEEE 754 double "
"precision is::"
msgstr ""
"Portanto, a melhor aproximação possível para 1/10 em precisão dupla IEEE 754"
" é:"

#: ../../tutorial/floatingpoint.rst:257
msgid ""
"Dividing both the numerator and denominator by two reduces the fraction to::"
msgstr "Dividindo o numerador e o denominador por dois, reduz a fração para:"

#: ../../tutorial/floatingpoint.rst:261
msgid ""
"Note that since we rounded up, this is actually a little bit larger than "
"1/10; if we had not rounded up, the quotient would have been a little bit "
"smaller than 1/10.  But in no case can it be *exactly* 1/10!"
msgstr ""
"Note que, uma vez que arredondámos para cima, isto é na verdade um pouco "
"maior do que 1/10; se não tivéssemos arredondado para cima, o quociente "
"teria sido um pouco menor do que 1/10. Mas em nenhum caso pode ser "
"*exatamente* 1/10!"

#: ../../tutorial/floatingpoint.rst:265
msgid ""
"So the computer never \"sees\" 1/10:  what it sees is the exact fraction "
"given above, the best IEEE 754 double approximation it can get:"
msgstr ""
"Portanto, o computador nunca \"vê\" 1/10: o que vê é a fração exata dada "
"acima, a melhor aproximação dupla IEEE 754 que pode obter:"

#: ../../tutorial/floatingpoint.rst:271
msgid ""
"If we multiply that fraction by 10\\*\\*55, we can see the value out to 55 "
"decimal digits::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:277
msgid ""
"meaning that the exact number stored in the computer is equal to the decimal"
" value 0.1000000000000000055511151231257827021181583404541015625. Instead of"
" displaying the full decimal value, many languages (including older versions"
" of Python), round the result to 17 significant digits::"
msgstr ""

#: ../../tutorial/floatingpoint.rst:285
msgid ""
"The :mod:`fractions` and :mod:`decimal` modules make these calculations "
"easy::"
msgstr ""
