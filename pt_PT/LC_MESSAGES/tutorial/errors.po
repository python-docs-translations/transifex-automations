# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 16:35+0000\n"
"PO-Revision-Date: 2025-09-22 16:51+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../tutorial/errors.rst:5
msgid "Errors and Exceptions"
msgstr "Erros e exceções"

#: ../../tutorial/errors.rst:7
msgid ""
"Until now error messages haven't been more than mentioned, but if you have "
"tried out the examples you have probably seen some.  There are (at least) "
"two distinguishable kinds of errors: *syntax errors* and *exceptions*."
msgstr ""
"Até agora, as mensagens de erro não foram mais do que mencionadas, mas se "
"experimentou os exemplos, provavelmente já viu algumas. Existem (pelo menos) "
"dois tipos distintos de erros: *erros de sintaxe* e *exceções*."

#: ../../tutorial/errors.rst:15
msgid "Syntax Errors"
msgstr "Erros de sintaxe"

#: ../../tutorial/errors.rst:17
msgid ""
"Syntax errors, also known as parsing errors, are perhaps the most common "
"kind of complaint you get while you are still learning Python::"
msgstr ""
"Os erros de sintaxe, também conhecidos como erros de análise, são "
"provavelmente o tipo de mensagem de erro mais comum que recebe enquanto "
"ainda está a aprender Python:"

#: ../../tutorial/errors.rst:26
msgid ""
"The parser repeats the offending line and displays little 'arrow's pointing "
"at the token in the line where the error was detected.  The error may be "
"caused by the absence of a token *before* the indicated token.  In the "
"example, the error is detected at the function :func:`print`, since a colon "
"(``':'``) is missing before it.  File name and line number are printed so "
"you know where to look in case the input came from a script."
msgstr ""

#: ../../tutorial/errors.rst:37
msgid "Exceptions"
msgstr "Exceções"

#: ../../tutorial/errors.rst:39
msgid ""
"Even if a statement or expression is syntactically correct, it may cause an "
"error when an attempt is made to execute it. Errors detected during "
"execution are called *exceptions* and are not unconditionally fatal: you "
"will soon learn how to handle them in Python programs.  Most exceptions are "
"not handled by programs, however, and result in error messages as shown "
"here::"
msgstr ""
"Mesmo que uma instrução ou expressão esteja sintaticamente correta, pode "
"causar um erro quando se tenta executá-la. Os erros detetados durante a "
"execução são chamados *exceções* e não são necessariamente fatais: em breve "
"aprenderá a tratá-los em programas Python. No entanto, a maioria das "
"exceções não são tratadas pelos programas e resultam em mensagens de erro "
"como mostrado aqui:"

#: ../../tutorial/errors.rst:58
msgid ""
"The last line of the error message indicates what happened. Exceptions come "
"in different types, and the type is printed as part of the message: the "
"types in the example are :exc:`ZeroDivisionError`, :exc:`NameError` and :exc:"
"`TypeError`. The string printed as the exception type is the name of the "
"built-in exception that occurred.  This is true for all built-in exceptions, "
"but need not be true for user-defined exceptions (although it is a useful "
"convention). Standard exception names are built-in identifiers (not reserved "
"keywords)."
msgstr ""
"A última linha da mensagem de erro indica o que aconteceu. As exceções vêm "
"em diferentes tipos, e o tipo é impresso como parte da mensagem: os tipos no "
"exemplo são :exc:`ZeroDivisionError`, :exc:`NameError` e :exc:`TypeError`. A "
"string impressa como o tipo de exceção é o nome da exceção incorporada que "
"ocorreu. Isto é verdade para todas as exceções incorporadas, mas não precisa "
"de ser verdade para exceções definidas pelo utilizador (embora seja uma "
"convenção útil). Os nomes de exceções padrão são identificadores "
"incorporados (não palavras reservadas)."

#: ../../tutorial/errors.rst:66
msgid ""
"The rest of the line provides detail based on the type of exception and what "
"caused it."
msgstr ""
"O resto da linha fornece detalhes com base no tipo de exceção e naquilo que "
"a causou."

#: ../../tutorial/errors.rst:69
msgid ""
"The preceding part of the error message shows the context where the "
"exception occurred, in the form of a stack traceback. In general it contains "
"a stack traceback listing source lines; however, it will not display lines "
"read from standard input."
msgstr ""
"A parte anterior da mensagem de erro mostra o contexto onde a exceção "
"ocorreu, na forma de um rastreio de pilha. Em geral, contém um rastreio de "
"pilha que lista as linhas de origem; no entanto, não mostrará linhas lidas a "
"partir da entrada padrão."

#: ../../tutorial/errors.rst:74
msgid ""
":ref:`bltin-exceptions` lists the built-in exceptions and their meanings."
msgstr ""
":ref:`bltin-exceptions` lista as exceções incorporadas e os seus "
"significados."

#: ../../tutorial/errors.rst:80
msgid "Handling Exceptions"
msgstr "Tratamento de exceções"

#: ../../tutorial/errors.rst:82
msgid ""
"It is possible to write programs that handle selected exceptions. Look at "
"the following example, which asks the user for input until a valid integer "
"has been entered, but allows the user to interrupt the program (using :kbd:"
"`Control-C` or whatever the operating system supports); note that a user-"
"generated interruption is signalled by raising the :exc:`KeyboardInterrupt` "
"exception. ::"
msgstr ""
"É possível escrever programas que tratam exceções selecionadas. Veja o "
"seguinte exemplo, que pede ao utilizador para introduzir dados até que um "
"inteiro válido seja inserido, mas permite ao utilizador interromper o "
"programa (usando :kbd:`Control-C` ou o que o sistema operativo suportar); "
"note que uma interrupção gerada pelo utilizador é sinalizada levantando a "
"exceção :exc:`KeyboardInterrupt`:"

#: ../../tutorial/errors.rst:96
msgid "The :keyword:`try` statement works as follows."
msgstr "A instrução :keyword:`try` funciona da seguinte forma."

#: ../../tutorial/errors.rst:98
msgid ""
"First, the *try clause* (the statement(s) between the :keyword:`try` and :"
"keyword:`except` keywords) is executed."
msgstr ""
"Primeiro, a *cláusula try* (a(s) instrução(ões) entre as palavras-chave :"
"keyword:`try` e :keyword:`except`) é executada."

#: ../../tutorial/errors.rst:101
msgid ""
"If no exception occurs, the *except clause* is skipped and execution of the :"
"keyword:`try` statement is finished."
msgstr ""
"Se não ocorrer nenhuma exceção, a *cláusula except* é ignorada e a execução "
"da instrução :keyword:`try` termina."

#: ../../tutorial/errors.rst:104
msgid ""
"If an exception occurs during execution of the :keyword:`try` clause, the "
"rest of the clause is skipped.  Then, if its type matches the exception "
"named after the :keyword:`except` keyword, the *except clause* is executed, "
"and then execution continues after the try/except block."
msgstr ""
"Se ocorrer uma exceção durante a execução da cláusula :keyword:`try`, o "
"resto da cláusula é ignorado. Em seguida, se o seu tipo corresponder à "
"exceção nomeada após a palavra-chave :keyword:`except`, a *cláusula except* "
"é executada, e depois a execução continua após o bloco try/except."

#: ../../tutorial/errors.rst:109
msgid ""
"If an exception occurs which does not match the exception named in the "
"*except clause*, it is passed on to outer :keyword:`try` statements; if no "
"handler is found, it is an *unhandled exception* and execution stops with an "
"error message."
msgstr ""
"Se ocorrer uma exceção que não corresponde à exceção nomeada na *cláusula "
"except*, ela é passada para instruções :keyword:`try` externas; se nenhum "
"manipulador for encontrado, é uma *exceção não tratada* e a execução para "
"com uma mensagem de erro."

#: ../../tutorial/errors.rst:113
msgid ""
"A :keyword:`try` statement may have more than one *except clause*, to "
"specify handlers for different exceptions.  At most one handler will be "
"executed. Handlers only handle exceptions that occur in the corresponding "
"*try clause*, not in other handlers of the same :keyword:`!try` statement.  "
"An *except clause* may name multiple exceptions as a parenthesized tuple, "
"for example::"
msgstr ""
"Uma instrução :keyword:`try` pode ter mais do que uma *cláusula except*, "
"para especificar manipuladores para diferentes exceções. No máximo, um "
"manipulador será executado. Os manipuladores tratam apenas exceções que "
"ocorrem na *cláusula try* correspondente, não em outros manipuladores da "
"mesma instrução :keyword:`!try`. Uma *cláusula except* pode nomear múltiplas "
"exceções como um tuplo entre parênteses, por exemplo:"

#: ../../tutorial/errors.rst:122
msgid ""
"A class in an :keyword:`except` clause is compatible with an exception if it "
"is the same class or a base class thereof (but not the other way around --- "
"an *except clause* listing a derived class is not compatible with a base "
"class). For example, the following code will print B, C, D in that order::"
msgstr ""

#: ../../tutorial/errors.rst:146
msgid ""
"Note that if the *except clauses* were reversed (with ``except B`` first), "
"it would have printed B, B, B --- the first matching *except clause* is "
"triggered."
msgstr ""
"Note que se as *cláusulas except* estivessem invertidas (com ``except B`` "
"primeiro), imprimiria B, B, B — a primeira *cláusula except* correspondente "
"é acionada."

#: ../../tutorial/errors.rst:149
msgid ""
"When an exception occurs, it may have associated values, also known as the "
"exception's *arguments*. The presence and types of the arguments depend on "
"the exception type."
msgstr ""
"Quando uma exceção ocorre, pode ter valores associados, também conhecidos "
"como *argumentos* da exceção. A presença e os tipos dos argumentos dependem "
"do tipo de exceção."

#: ../../tutorial/errors.rst:153
msgid ""
"The *except clause* may specify a variable after the exception name.  The "
"variable is bound to the exception instance which typically has an ``args`` "
"attribute that stores the arguments. For convenience, builtin exception "
"types define :meth:`~object.__str__` to print all the arguments without "
"explicitly accessing ``.args``.  ::"
msgstr ""
"A *cláusula except* pode especificar uma variável após o nome da exceção. A "
"variável é ligada à instância da exceção, que tipicamente tem um atributo "
"``args`` que armazena os argumentos. Por conveniência, os tipos de exceção "
"incorporados definem :meth:`~object.__str__` para imprimir todos os "
"argumentos sem acessar explicitamente ``.args``:"

#: ../../tutorial/errors.rst:176
msgid ""
"The exception's :meth:`~object.__str__` output is printed as the last part "
"('detail') of the message for unhandled exceptions."
msgstr ""
"A saída do método :meth:`~object.__str__` da exceção é impressa como a "
"última parte ('detalhe') da mensagem para exceções não tratadas."

#: ../../tutorial/errors.rst:179
msgid ""
":exc:`BaseException` is the common base class of all exceptions. One of its "
"subclasses, :exc:`Exception`, is the base class of all the non-fatal "
"exceptions. Exceptions which are not subclasses of :exc:`Exception` are not "
"typically handled, because they are used to indicate that the program should "
"terminate. They include :exc:`SystemExit` which is raised by :meth:`sys."
"exit` and :exc:`KeyboardInterrupt` which is raised when a user wishes to "
"interrupt the program."
msgstr ""
":exc:`BaseException` é a classe base comum de todas as exceções. Uma das "
"suas subclasses, :exc:`Exception`, é a classe base de todas as exceções não "
"fatais. As exceções que não são subclasses de :exc:`Exception` não são "
"tipicamente tratadas, porque são usadas para indicar que o programa deve "
"terminar. Estas incluem :exc:`SystemExit`, que é levantada por :meth:`sys."
"exit`, e :exc:`KeyboardInterrupt`, que é levantada quando um utilizador "
"deseja interromper o programa."

#: ../../tutorial/errors.rst:187
msgid ""
":exc:`Exception` can be used as a wildcard that catches (almost) everything. "
"However, it is good practice to be as specific as possible with the types of "
"exceptions that we intend to handle, and to allow any unexpected exceptions "
"to propagate on."
msgstr ""
":exc:`Exception` pode ser usada como um curinga que captura (quase) tudo. No "
"entanto, é uma boa prática ser o mais específico possível com os tipos de "
"exceções que pretendemos tratar e permitir que quaisquer exceções "
"inesperadas se propaguem."

#: ../../tutorial/errors.rst:192
msgid ""
"The most common pattern for handling :exc:`Exception` is to print or log the "
"exception and then re-raise it (allowing a caller to handle the exception as "
"well)::"
msgstr ""
"O padrão mais comum para tratar :exc:`Exception` é imprimir ou registar a "
"exceção e depois relançá-la (permitindo que o chamador também trate a "
"exceção):"

#: ../../tutorial/errors.rst:210
msgid ""
"The :keyword:`try` ... :keyword:`except` statement has an optional *else "
"clause*, which, when present, must follow all *except clauses*.  It is "
"useful for code that must be executed if the *try clause* does not raise an "
"exception. For example::"
msgstr ""
"A instrução :keyword:`try` ... :keyword:`except` tem uma *cláusula else* "
"opcional, que, quando presente, deve seguir todas as *cláusulas except*. É "
"útil para código que deve ser executado se a *cláusula try* não levantar uma "
"exceção. Por exemplo:"

#: ../../tutorial/errors.rst:224
msgid ""
"The use of the :keyword:`!else` clause is better than adding additional code "
"to the :keyword:`try` clause because it avoids accidentally catching an "
"exception that wasn't raised by the code being protected by the :keyword:`!"
"try` ... :keyword:`!except` statement."
msgstr ""
"O uso da cláusula :keyword:`!else` é melhor do que adicionar código "
"adicional à cláusula :keyword:`try`, porque evita capturar acidentalmente "
"uma exceção que não foi levantada pelo código protegido pela instrução :"
"keyword:`!try` ... :keyword:`!except`."

#: ../../tutorial/errors.rst:229
msgid ""
"Exception handlers do not handle only exceptions that occur immediately in "
"the *try clause*, but also those that occur inside functions that are called "
"(even indirectly) in the *try clause*. For example::"
msgstr ""
"Os manipuladores de exceções não tratam apenas exceções que ocorrem "
"imediatamente na *cláusula try*, mas também aquelas que ocorrem dentro de "
"funções que são chamadas (mesmo indiretamente) na *cláusula try*. Por "
"exemplo:"

#: ../../tutorial/errors.rst:247
msgid "Raising Exceptions"
msgstr "Lançamento de exceções"

#: ../../tutorial/errors.rst:249
msgid ""
"The :keyword:`raise` statement allows the programmer to force a specified "
"exception to occur. For example::"
msgstr ""
"A instrução :keyword:`raise` permite ao programador forçar a ocorrência de "
"uma exceção especificada. Por exemplo:"

#: ../../tutorial/errors.rst:257
msgid ""
"The sole argument to :keyword:`raise` indicates the exception to be raised. "
"This must be either an exception instance or an exception class (a class "
"that derives from :class:`BaseException`, such as :exc:`Exception` or one of "
"its subclasses).  If an exception class is passed, it will be implicitly "
"instantiated by calling its constructor with no arguments::"
msgstr ""
"O único argumento para :keyword:`raise` indica a exceção a ser lançada. Isto "
"deve ser uma instância de exceção ou uma classe de exceção (uma classe que "
"deriva de :class:`BaseException`, como :exc:`Exception` ou uma das suas "
"subclasses). Se uma classe de exceção for passada, será implicitamente "
"instanciada chamando o seu construtor sem argumentos:"

#: ../../tutorial/errors.rst:265
msgid ""
"If you need to determine whether an exception was raised but don't intend to "
"handle it, a simpler form of the :keyword:`raise` statement allows you to re-"
"raise the exception::"
msgstr ""
"Se precisar de determinar se uma exceção foi lançada, mas não pretender "
"tratá-la, uma forma mais simples da instrução :keyword:`raise` permite-lhe "
"relançar a exceção:"

#: ../../tutorial/errors.rst:284
msgid "Exception Chaining"
msgstr "Encadeamento de exceções"

#: ../../tutorial/errors.rst:286
msgid ""
"If an unhandled exception occurs inside an :keyword:`except` section, it "
"will have the exception being handled attached to it and included in the "
"error message::"
msgstr ""
"Se uma exceção não tratada ocorrer dentro de uma secção :keyword:`except`, "
"ela terá a exceção que está a ser tratada anexada e incluída na mensagem de "
"erro:"

#: ../../tutorial/errors.rst:305
msgid ""
"To indicate that an exception is a direct consequence of another, the :"
"keyword:`raise` statement allows an optional :keyword:`from<raise>` clause::"
msgstr ""
"Para indicar que uma exceção é uma consequência direta de outra, a "
"instrução :keyword:`raise` permite uma cláusula opcional :keyword:"
"`from<raise>`:"

#: ../../tutorial/errors.rst:311
msgid "This can be useful when you are transforming exceptions. For example::"
msgstr "Isto pode ser útil quando está a transformar exceções. Por exemplo:"

#: ../../tutorial/errors.rst:332
msgid ""
"It also allows disabling automatic exception chaining using the ``from "
"None`` idiom::"
msgstr ""
"Também permite desativar o encadeamento automático de exceções usando o "
"idioma ``from None``:"

#: ../../tutorial/errors.rst:344
msgid ""
"For more information about chaining mechanics, see :ref:`bltin-exceptions`."
msgstr ""
"Para mais informações sobre a mecânica de encadeamento, consulte :ref:`bltin-"
"exceptions`."

#: ../../tutorial/errors.rst:350
msgid "User-defined Exceptions"
msgstr "Exceções definidas pelo utilizador"

#: ../../tutorial/errors.rst:352
msgid ""
"Programs may name their own exceptions by creating a new exception class "
"(see :ref:`tut-classes` for more about Python classes).  Exceptions should "
"typically be derived from the :exc:`Exception` class, either directly or "
"indirectly."
msgstr ""
"Os programas podem nomear as suas próprias exceções criando uma nova classe "
"de exceção (consulte :ref:`tut-classes` para mais informações sobre classes "
"em Python). As exceções devem tipicamente derivar da classe :exc:"
"`Exception`, diretamente ou indiretamente."

#: ../../tutorial/errors.rst:356
msgid ""
"Exception classes can be defined which do anything any other class can do, "
"but are usually kept simple, often only offering a number of attributes that "
"allow information about the error to be extracted by handlers for the "
"exception."
msgstr ""
"As classes de exceção podem ser definidas para fazer qualquer coisa que "
"qualquer outra classe possa fazer, mas geralmente são mantidas simples, "
"oferecendo frequentemente apenas alguns atributos que permitem extrair "
"informações sobre o erro pelos manipuladores da exceção."

#: ../../tutorial/errors.rst:360
msgid ""
"Most exceptions are defined with names that end in \"Error\", similar to the "
"naming of the standard exceptions."
msgstr ""
"A maioria das exceções são definidas com nomes que terminam em \"Error\", "
"semelhante à nomenclatura das exceções padrão."

#: ../../tutorial/errors.rst:363
msgid ""
"Many standard modules define their own exceptions to report errors that may "
"occur in functions they define."
msgstr ""
"Muitos módulos padrão definem as suas próprias exceções para reportar erros "
"que podem ocorrer nas funções que definem."

#: ../../tutorial/errors.rst:370
msgid "Defining Clean-up Actions"
msgstr "Definição de ações de limpeza"

#: ../../tutorial/errors.rst:372
msgid ""
"The :keyword:`try` statement has another optional clause which is intended "
"to define clean-up actions that must be executed under all circumstances.  "
"For example::"
msgstr ""
"A instrução :keyword:`try` tem outra cláusula opcional que destina-se a "
"definir ações de limpeza que devem ser executadas em todas as "
"circunstâncias. Por exemplo:"

#: ../../tutorial/errors.rst:386
msgid ""
"If a :keyword:`finally` clause is present, the :keyword:`!finally` clause "
"will execute as the last task before the :keyword:`try` statement completes. "
"The :keyword:`!finally` clause runs whether or not the :keyword:`!try` "
"statement produces an exception. The following points discuss more complex "
"cases when an exception occurs:"
msgstr ""
"Se uma cláusula :keyword:`finally` estiver presente, a cláusula :keyword:`!"
"finally` será executada como a última tarefa antes de a instrução :keyword:"
"`try` ser concluída. A cláusula :keyword:`!finally` é executada "
"independentemente de a instrução :keyword:`!try` produzir ou não uma "
"exceção. Os seguintes pontos discutem casos mais complexos quando ocorre uma "
"exceção:"

#: ../../tutorial/errors.rst:392
msgid ""
"If an exception occurs during execution of the :keyword:`!try` clause, the "
"exception may be handled by an :keyword:`except` clause. If the exception is "
"not handled by an :keyword:`!except` clause, the exception is re-raised "
"after the :keyword:`!finally` clause has been executed."
msgstr ""
"Se uma exceção ocorrer durante a execução da cláusula :keyword:`!try`, a "
"exceção pode ser tratada por uma cláusula :keyword:`except`. Se a exceção "
"não for tratada por uma cláusula :keyword:`!except`, a exceção é relançada "
"após a cláusula :keyword:`!finally` ter sido executada."

#: ../../tutorial/errors.rst:398
msgid ""
"An exception could occur during execution of an :keyword:`!except` or :"
"keyword:`!else` clause. Again, the exception is re-raised after the :keyword:"
"`!finally` clause has been executed."
msgstr ""
"Uma exceção pode ocorrer durante a execução de uma cláusula :keyword:`!"
"except` ou :keyword:`!else`. Novamente, a exceção é relançada após a "
"cláusula :keyword:`!finally` ter sido executada."

#: ../../tutorial/errors.rst:402
msgid ""
"If the :keyword:`!finally` clause executes a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, exceptions are not re-raised."
msgstr ""

#: ../../tutorial/errors.rst:406
msgid ""
"If the :keyword:`!try` statement reaches a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, the :keyword:`!finally` clause "
"will execute just prior to the :keyword:`!break`, :keyword:`!continue` or :"
"keyword:`!return` statement's execution."
msgstr ""
"Se a instrução :keyword:`!try` atingir uma instrução :keyword:`break`, :"
"keyword:`continue` ou :keyword:`return`, a cláusula :keyword:`!finally` será "
"executada imediatamente antes da execução da instrução :keyword:`!break`, :"
"keyword:`!continue` ou :keyword:`!return`."

#: ../../tutorial/errors.rst:412
msgid ""
"If a :keyword:`!finally` clause includes a :keyword:`!return` statement, the "
"returned value will be the one from the :keyword:`!finally` clause's :"
"keyword:`!return` statement, not the value from the :keyword:`!try` "
"clause's :keyword:`!return` statement."
msgstr ""

#: ../../tutorial/errors.rst:418
msgid "For example::"
msgstr "Por exemplo::"

#: ../../tutorial/errors.rst:429
msgid "A more complicated example::"
msgstr "Um exemplo mais complicado:"

#: ../../tutorial/errors.rst:454
msgid ""
"As you can see, the :keyword:`finally` clause is executed in any event.  "
"The :exc:`TypeError` raised by dividing two strings is not handled by the :"
"keyword:`except` clause and therefore re-raised after the :keyword:`!"
"finally` clause has been executed."
msgstr ""
"Como pode ver, a cláusula :keyword:`finally` é executada em qualquer evento. "
"O :exc:`TypeError` levantado pela divisão de duas strings não é tratado pela "
"cláusula :keyword:`except` e, por isso, é relançado após a execução da "
"cláusula :keyword:`!finally`."

#: ../../tutorial/errors.rst:459
msgid ""
"In real world applications, the :keyword:`finally` clause is useful for "
"releasing external resources (such as files or network connections), "
"regardless of whether the use of the resource was successful."
msgstr ""
"Em aplicações do mundo real, a cláusula :keyword:`finally` é útil para "
"libertar recursos externos (como ficheiros ou ligações de rede), "
"independentemente de a utilização do recurso ter sido bem-sucedida."

#: ../../tutorial/errors.rst:467
msgid "Predefined Clean-up Actions"
msgstr "Ações de limpeza predefinidas"

#: ../../tutorial/errors.rst:469
msgid ""
"Some objects define standard clean-up actions to be undertaken when the "
"object is no longer needed, regardless of whether or not the operation using "
"the object succeeded or failed. Look at the following example, which tries "
"to open a file and print its contents to the screen. ::"
msgstr ""
"Alguns objetos definem ações de limpeza padrão a serem executadas quando o "
"objeto já não é necessário, independentemente de a operação que usa o objeto "
"ter sido bem-sucedida ou não. Veja o seguinte exemplo, que tenta abrir um "
"ficheiro e imprimir o seu conteúdo no ecrã:"

#: ../../tutorial/errors.rst:477
msgid ""
"The problem with this code is that it leaves the file open for an "
"indeterminate amount of time after this part of the code has finished "
"executing. This is not an issue in simple scripts, but can be a problem for "
"larger applications. The :keyword:`with` statement allows objects like files "
"to be used in a way that ensures they are always cleaned up promptly and "
"correctly. ::"
msgstr ""
"O problema com este código é que deixa o ficheiro aberto por um período de "
"tempo indeterminado após esta parte do código ter terminado a execução. Isto "
"não é um problema em scripts simples, mas pode ser um problema para "
"aplicações maiores. A instrução :keyword:`with` permite que objetos como "
"ficheiros sejam usados de uma forma que garante que são sempre limpos "
"prontamente e corretamente:"

#: ../../tutorial/errors.rst:487
msgid ""
"After the statement is executed, the file *f* is always closed, even if a "
"problem was encountered while processing the lines. Objects which, like "
"files, provide predefined clean-up actions will indicate this in their "
"documentation."
msgstr ""
"Após a execução da instrução, o ficheiro *f* é sempre fechado, mesmo que "
"tenha ocorrido um problema durante o processamento das linhas. Objetos que, "
"como os ficheiros, fornecem ações de limpeza predefinidas, indicarão isso na "
"sua documentação."

#: ../../tutorial/errors.rst:495
msgid "Raising and Handling Multiple Unrelated Exceptions"
msgstr "Lançamento e tratamento de múltiplas exceções não relacionadas"

#: ../../tutorial/errors.rst:497
msgid ""
"There are situations where it is necessary to report several exceptions that "
"have occurred. This is often the case in concurrency frameworks, when "
"several tasks may have failed in parallel, but there are also other use "
"cases where it is desirable to continue execution and collect multiple "
"errors rather than raise the first exception."
msgstr ""
"Existem situações em que é necessário reportar várias exceções que "
"ocorreram. Isto é muitas vezes o caso em frameworks de concorrência, quando "
"várias tarefas podem ter falhado em paralelo, mas também existem outros "
"casos de uso em que é desejável continuar a execução e recolher múltiplos "
"erros em vez de lançar a primeira exceção."

#: ../../tutorial/errors.rst:503
msgid ""
"The builtin :exc:`ExceptionGroup` wraps a list of exception instances so "
"that they can be raised together. It is an exception itself, so it can be "
"caught like any other exception. ::"
msgstr ""
"A classe incorporada :exc:`ExceptionGroup` envolve uma lista de instâncias "
"de exceção para que possam ser lançadas em conjunto. É ela própria uma "
"exceção, por isso pode ser capturada como qualquer outra exceção:"

#: ../../tutorial/errors.rst:529
msgid ""
"By using ``except*`` instead of ``except``, we can selectively handle only "
"the exceptions in the group that match a certain type. In the following "
"example, which shows a nested exception group, each ``except*`` clause "
"extracts from the group exceptions of a certain type while letting all other "
"exceptions propagate to other clauses and eventually to be reraised. ::"
msgstr ""
"Ao usar ``except*`` em vez de ``except``, podemos tratar seletivamente "
"apenas as exceções no grupo que correspondem a um certo tipo. No exemplo "
"seguinte, que mostra um grupo de exceções aninhado, cada cláusula "
"``except*`` extrai do grupo exceções de um certo tipo, permitindo que todas "
"as outras exceções se propaguem para outras cláusulas e, eventualmente, "
"sejam relançadas:"

#: ../../tutorial/errors.rst:572
msgid ""
"Note that the exceptions nested in an exception group must be instances, not "
"types. This is because in practice the exceptions would typically be ones "
"that have already been raised and caught by the program, along the following "
"pattern::"
msgstr ""
"Note que as exceções aninhadas num grupo de exceções devem ser instâncias, "
"não tipos. Isto porque, na prática, as exceções seriam tipicamente aquelas "
"que já foram lançadas e capturadas pelo programa, de acordo com o seguinte "
"padrão:"

#: ../../tutorial/errors.rst:592
msgid "Enriching Exceptions with Notes"
msgstr "Enriquecer exceções com notas"

#: ../../tutorial/errors.rst:594
msgid ""
"When an exception is created in order to be raised, it is usually "
"initialized with information that describes the error that has occurred. "
"There are cases where it is useful to add information after the exception "
"was caught. For this purpose, exceptions have a method ``add_note(note)`` "
"that accepts a string and adds it to the exception's notes list. The "
"standard traceback rendering includes all notes, in the order they were "
"added, after the exception. ::"
msgstr ""
"Quando uma exceção é criada para ser lançada, é geralmente inicializada com "
"informações que descrevem o erro que ocorreu. Existem casos em que é útil "
"adicionar informações após a exceção ter sido capturada. Para este fim, as "
"exceções têm um método ``add_note(nota)`` que aceita uma string e a adiciona "
"à lista de notas da exceção. A apresentação padrão do rastreio inclui todas "
"as notas, pela ordem em que foram adicionadas, após a exceção:"

#: ../../tutorial/errors.rst:615
msgid ""
"For example, when collecting exceptions into an exception group, we may want "
"to add context information for the individual errors. In the following each "
"exception in the group has a note indicating when this error has occurred. ::"
msgstr ""
"Por exemplo, ao recolher exceções num grupo de exceções, podemos querer "
"adicionar informações de contexto para os erros individuais. No seguinte "
"exemplo, cada exceção no grupo tem uma nota indicando quando este erro "
"ocorreu:"
