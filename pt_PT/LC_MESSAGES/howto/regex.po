# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 18:07+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../howto/regex.rst:5
msgid "Regular Expression HOWTO"
msgstr "Guia Prático de Expressões Regulares"

#: ../../howto/regex.rst:0
msgid "Author"
msgstr "Autor"

#: ../../howto/regex.rst:7
msgid "A.M. Kuchling <amk@amk.ca>"
msgstr "A.M. Kuchling <amk@amk.ca>"

#: ../../howto/regex.rstNone
msgid "Abstract"
msgstr "Resumo"

#: ../../howto/regex.rst:18
msgid ""
"This document is an introductory tutorial to using regular expressions in "
"Python with the :mod:`re` module.  It provides a gentler introduction than "
"the corresponding section in the Library Reference."
msgstr ""
"Este documento é um tutorial introdutório sobre a utilização de expressões "
"regulares em Python com o módulo :mod:`re`. Oferece uma introdução mais "
"suave do que a secção correspondente na Referência da Biblioteca."

#: ../../howto/regex.rst:24
msgid "Introduction"
msgstr "Introdução"

#: ../../howto/regex.rst:26
msgid ""
"Regular expressions (called REs, or regexes, or regex patterns) are "
"essentially a tiny, highly specialized programming language embedded inside "
"Python and made available through the :mod:`re` module. Using this little "
"language, you specify the rules for the set of possible strings that you "
"want to match; this set might contain English sentences, or e-mail "
"addresses, or TeX commands, or anything you like.  You can then ask "
"questions such as \"Does this string match the pattern?\", or \"Is there a "
"match for the pattern anywhere in this string?\".  You can also use REs to "
"modify a string or to split it apart in various ways."
msgstr ""
"As expressões regulares (também designadas por REs, *regexes* ou padrões "
"*regex*) são, essencialmente, uma pequena linguagem de programação altamente "
"especializada incorporada no Python e disponibilizada através do módulo :mod:"
"`re`. Com esta linguagem, pode especificar as regras para o conjunto de "
"cadeias de caracteres que deseja corresponder; este conjunto pode conter "
"frases em inglês, endereços de *e-mail*, comandos TeX ou qualquer outra "
"coisa. Pode, depois, colocar questões como \"Esta cadeia de caracteres "
"corresponde ao padrão?\" ou \"Existe alguma correspondência para o padrão "
"nesta cadeia de caracteres?\". Também pode usar REs para modificar uma "
"cadeia de caracteres ou para a dividir de várias formas."

#: ../../howto/regex.rst:35
msgid ""
"Regular expression patterns are compiled into a series of bytecodes which "
"are then executed by a matching engine written in C.  For advanced use, it "
"may be necessary to pay careful attention to how the engine will execute a "
"given RE, and write the RE in a certain way in order to produce bytecode "
"that runs faster. Optimization isn't covered in this document, because it "
"requires that you have a good understanding of the matching engine's "
"internals."
msgstr ""
"Os padrões de expressões regulares são compilados numa série de *bytecodes* "
"que são, depois, executados por um motor de correspondência escrito em C. "
"Para uso avançado, pode ser necessário prestar atenção cuidadosa à forma "
"como o motor executará uma determinada RE e escrever a RE de uma certa forma "
"para produzir *bytecode* que execute mais rapidamente. A otimização não é "
"abordada neste documento, porque requer um bom entendimento dos internos do "
"motor de correspondência."

#: ../../howto/regex.rst:42
msgid ""
"The regular expression language is relatively small and restricted, so not "
"all possible string processing tasks can be done using regular expressions.  "
"There are also tasks that *can* be done with regular expressions, but the "
"expressions turn out to be very complicated.  In these cases, you may be "
"better off writing Python code to do the processing; while Python code will "
"be slower than an elaborate regular expression, it will also probably be "
"more understandable."
msgstr ""
"A linguagem de expressões regulares é relativamente pequena e restrita, pelo "
"que nem todas as tarefas possíveis de processamento de cadeias de caracteres "
"podem ser feitas usando expressões regulares. Também existem tarefas que "
"*podem* ser feitas com expressões regulares, mas as expressões tornam-se "
"muito complicadas. Nestes casos, pode ser melhor escrever código Python para "
"fazer o processamento; embora o código Python seja mais lento do que uma "
"expressão regular elaborada, provavelmente será mais compreensível."

#: ../../howto/regex.rst:51
msgid "Simple Patterns"
msgstr "Padrões Simples"

#: ../../howto/regex.rst:53
msgid ""
"We'll start by learning about the simplest possible regular expressions.  "
"Since regular expressions are used to operate on strings, we'll begin with "
"the most common task: matching characters."
msgstr ""
"Vamos começar por aprender sobre as expressões regulares mais simples "
"possíveis. Como as expressões regulares são usadas para operar em cadeias de "
"caracteres, vamos começar com a tarefa mais comum: corresponder caracteres."

#: ../../howto/regex.rst:57
msgid ""
"For a detailed explanation of the computer science underlying regular "
"expressions (deterministic and non-deterministic finite automata), you can "
"refer to almost any textbook on writing compilers."
msgstr ""
"Para uma explicação detalhada da ciência da computação subjacente às "
"expressões regulares (autómatos finitos determinísticos e não "
"determinísticos), pode consultar quase qualquer livro sobre a escrita de "
"compiladores."

#: ../../howto/regex.rst:63
msgid "Matching Characters"
msgstr "Correspondência de Caracteres"

#: ../../howto/regex.rst:65
msgid ""
"Most letters and characters will simply match themselves.  For example, the "
"regular expression ``test`` will match the string ``test`` exactly.  (You "
"can enable a case-insensitive mode that would let this RE match ``Test`` or "
"``TEST`` as well; more about this later.)"
msgstr ""
"A maioria das letras e caracteres correspondem simplesmente a si mesmos. Por "
"exemplo, a expressão regular ``test`` corresponderá exatamente à cadeia de "
"caracteres ``test``. (Pode ativar um modo *case-insensitive* que permite que "
"esta RE corresponda também a ``Test`` ou ``TEST``; mais sobre isto mais "
"tarde.)"

#: ../../howto/regex.rst:70
msgid ""
"There are exceptions to this rule; some characters are special :dfn:"
"`metacharacters`, and don't match themselves.  Instead, they signal that "
"some out-of-the-ordinary thing should be matched, or they affect other "
"portions of the RE by repeating them or changing their meaning.  Much of "
"this document is devoted to discussing various metacharacters and what they "
"do."
msgstr ""
"Existem exceções a esta regra; alguns caracteres são :dfn:`metacaracteres` "
"especiais e não correspondem a si mesmos. Em vez disso, sinalizam que algo "
"fora do comum deve ser correspondido, ou afetam outras partes da RE, "
"repetindo-as ou alterando o seu significado. Grande parte deste documento é "
"dedicada a discutir vários metacaracteres e o que fazem."

#: ../../howto/regex.rst:76
msgid ""
"Here's a complete list of the metacharacters; their meanings will be "
"discussed in the rest of this HOWTO."
msgstr ""
"Aqui está uma lista completa dos metacaracteres; os seus significados serão "
"discutidos no resto deste guia."

#: ../../howto/regex.rst:83
msgid ""
"The first metacharacters we'll look at are ``[`` and ``]``. They're used for "
"specifying a character class, which is a set of characters that you wish to "
"match.  Characters can be listed individually, or a range of characters can "
"be indicated by giving two characters and separating them by a ``'-'``.  For "
"example, ``[abc]`` will match any of the characters ``a``, ``b``, or ``c``; "
"this is the same as ``[a-c]``, which uses a range to express the same set of "
"characters.  If you wanted to match only lowercase letters, your RE would be "
"``[a-z]``."
msgstr ""
"Os primeiros metacaracteres que vamos analisar são ``[`` e ``]``. São usados "
"para especificar uma classe de caracteres, que é um conjunto de caracteres "
"que deseja corresponder. Os caracteres podem ser listados individualmente, "
"ou um intervalo de caracteres pode ser indicado dando dois caracteres e "
"separando-os por um ``'-'``. Por exemplo, ``[abc]`` corresponderá a qualquer "
"um dos caracteres ``a``, ``b`` ou ``c``; isto é o mesmo que ``[a-c]``, que "
"usa um intervalo para expressar o mesmo conjunto de caracteres. Se quisesse "
"corresponder apenas a letras minúsculas, a sua RE seria ``[a-z]``."

#: ../../howto/regex.rst:92
msgid ""
"Metacharacters (except ``\\``) are not active inside classes.  For example, "
"``[akm$]`` will match any of the characters ``'a'``, ``'k'``, ``'m'``, or "
"``'$'``; ``'$'`` is usually a metacharacter, but inside a character class "
"it's stripped of its special nature."
msgstr ""
"Os metacaracteres (exceto ``\\``) não estão ativos dentro de classes. Por "
"exemplo, ``[akm$]`` corresponderá a qualquer um dos caracteres ``'a'``, "
"``'k'``, ``'m'`` ou ``'$'``; ``'$'`` é normalmente um metacaractere, mas "
"dentro de uma classe de caracteres perde a sua natureza especial."

#: ../../howto/regex.rst:97
msgid ""
"You can match the characters not listed within the class by :dfn:"
"`complementing` the set.  This is indicated by including a ``'^'`` as the "
"first character of the class. For example, ``[^5]`` will match any character "
"except ``'5'``.  If the caret appears elsewhere in a character class, it "
"does not have special meaning. For example: ``[5^]`` will match either a "
"``'5'`` or a ``'^'``."
msgstr ""
"Pode corresponder aos caracteres não listados dentro da classe :dfn:"
"`complementando` o conjunto. Isto é indicado incluindo um ``'^'`` como o "
"primeiro caractere da classe. Por exemplo, ``[^5]`` corresponderá a qualquer "
"caractere exceto ``'5'``. Se o acento circunflexo aparecer noutro local "
"dentro de uma classe de caracteres, não tem significado especial. Por "
"exemplo: ``[5^]`` corresponderá a um ``'5'`` ou a um ``'^'``."

#: ../../howto/regex.rst:103
msgid ""
"Perhaps the most important metacharacter is the backslash, ``\\``.   As in "
"Python string literals, the backslash can be followed by various characters "
"to signal various special sequences.  It's also used to escape all the "
"metacharacters so you can still match them in patterns; for example, if you "
"need to match a ``[`` or  ``\\``, you can precede them with a backslash to "
"remove their special meaning: ``\\[`` or ``\\\\``."
msgstr ""
"Talvez o metacaractere mais importante seja a barra invertida, ``\\``. Tal "
"como nas literais de cadeias de caracteres do Python, a barra invertida pode "
"ser seguida por vários caracteres para sinalizar várias sequências "
"especiais. Também é usada para escapar todos os metacaracteres para que "
"ainda possa correspondê-los em padrões; por exemplo, se precisar de "
"corresponder a um ``[`` ou ``\\``, pode precedê-los com uma barra invertida "
"para remover o seu significado especial: ``\\[`` ou ``\\\\``."

#: ../../howto/regex.rst:110
msgid ""
"Some of the special sequences beginning with ``'\\'`` represent predefined "
"sets of characters that are often useful, such as the set of digits, the set "
"of letters, or the set of anything that isn't whitespace."
msgstr ""
"Algumas das sequências especiais que começam com ``'\\'`` representam "
"conjuntos predefinidos de caracteres que são frequentemente úteis, como o "
"conjunto de dígitos, o conjunto de letras ou o conjunto de qualquer coisa "
"que não seja espaço em branco."

#: ../../howto/regex.rst:115
msgid ""
"Let's take an example: ``\\w`` matches any alphanumeric character.  If the "
"regex pattern is expressed in bytes, this is equivalent to the class ``[a-zA-"
"Z0-9_]``.  If the regex pattern is a string, ``\\w`` will match all the "
"characters marked as letters in the Unicode database provided by the :mod:"
"`unicodedata` module.  You can use the more restricted definition of ``\\w`` "
"in a string pattern by supplying the :const:`re.ASCII` flag when compiling "
"the regular expression."
msgstr ""
"Vejamos um exemplo: ``\\w`` corresponde a qualquer caractere alfanumérico. "
"Se o padrão da expressão regular for expresso em *bytes*, isto é equivalente "
"à classe ``[a-zA-Z0-9_]``. Se o padrão da expressão regular for uma cadeia "
"de caracteres, ``\\w`` corresponderá a todos os caracteres marcados como "
"letras na base de dados Unicode fornecida pelo módulo :mod:`unicodedata`. "
"Pode usar a definição mais restrita de ``\\w`` num padrão de cadeia de "
"caracteres fornecendo a *flag* :const:`re.ASCII` ao compilar a expressão "
"regular."

#: ../../howto/regex.rst:123
msgid ""
"The following list of special sequences isn't complete. For a complete list "
"of sequences and expanded class definitions for Unicode string patterns, see "
"the last part of :ref:`Regular Expression Syntax <re-syntax>` in the "
"Standard Library reference.  In general, the Unicode versions match any "
"character that's in the appropriate category in the Unicode database."
msgstr ""
"A lista seguinte de sequências especiais não está completa. Para uma lista "
"completa de sequências e definições de classes expandidas para padrões de "
"cadeias de caracteres Unicode, consulte a última parte de :ref:`Sintaxe de "
"Expressões Regulares <re-syntax>` na referência da Biblioteca Padrão. Em "
"geral, as versões Unicode correspondem a qualquer caractere que esteja na "
"categoria apropriada na base de dados Unicode."

#: ../../howto/regex.rst:131
msgid "``\\d``"
msgstr "``\\d``"

#: ../../howto/regex.rst:131
msgid "Matches any decimal digit; this is equivalent to the class ``[0-9]``."
msgstr ""
"Corresponde a qualquer dígito decimal; isto é equivalente à classe ``[0-9]``."

#: ../../howto/regex.rst:134
msgid "``\\D``"
msgstr "``\\D``"

#: ../../howto/regex.rst:134
msgid ""
"Matches any non-digit character; this is equivalent to the class ``[^0-9]``."
msgstr ""
"Corresponde a qualquer caractere não dígito; isto é equivalente à classe "
"``[^0-9]``."

#: ../../howto/regex.rst:138
msgid "``\\s``"
msgstr "``\\s``"

#: ../../howto/regex.rst:137
msgid ""
"Matches any whitespace character; this is equivalent to the class "
"``[ \\t\\n\\r\\f\\v]``."
msgstr ""
"Corresponde a qualquer caractere de espaço em branco; isto é equivalente à "
"classe ``[ \\t\\n\\r\\f\\v]``."

#: ../../howto/regex.rst:142
msgid "``\\S``"
msgstr "``\\S``"

#: ../../howto/regex.rst:141
msgid ""
"Matches any non-whitespace character; this is equivalent to the class ``[^ "
"\\t\\n\\r\\f\\v]``."
msgstr ""
"Corresponde a qualquer caractere não espaço em branco; isto é equivalente à "
"classe ``[^ \\t\\n\\r\\f\\v]``."

#: ../../howto/regex.rst:146
msgid "``\\w``"
msgstr "``\\w``"

#: ../../howto/regex.rst:145
msgid ""
"Matches any alphanumeric character; this is equivalent to the class ``[a-zA-"
"Z0-9_]``."
msgstr ""
"Corresponde a qualquer caractere alfanumérico; isto é equivalente à classe "
"``[a-zA-Z0-9_]``."

#: ../../howto/regex.rst:150
msgid "``\\W``"
msgstr "``\\W``"

#: ../../howto/regex.rst:149
msgid ""
"Matches any non-alphanumeric character; this is equivalent to the class "
"``[^a-zA-Z0-9_]``."
msgstr ""
"Corresponde a qualquer caractere não alfanumérico; isto é equivalente à "
"classe ``[^a-zA-Z0-9_]``."

#: ../../howto/regex.rst:152
msgid ""
"These sequences can be included inside a character class.  For example, "
"``[\\s,.]`` is a character class that will match any whitespace character, "
"or ``','`` or ``'.'``."
msgstr ""
"Estas sequências podem ser incluídas dentro de uma classe de caracteres. Por "
"exemplo, ``[\\s,.]`` é uma classe de caracteres que corresponderá a qualquer "
"caractere de espaço em branco, ou ``','`` ou ``'.'``."

#: ../../howto/regex.rst:156
msgid ""
"The final metacharacter in this section is ``.``.  It matches anything "
"except a newline character, and there's an alternate mode (:const:`re."
"DOTALL`) where it will match even a newline.  ``.`` is often used where you "
"want to match \"any character\"."
msgstr ""
"O último metacaractere nesta secção é ``.``. Corresponde a qualquer coisa "
"exceto um caractere de nova linha, e existe um modo alternativo (:const:`re."
"DOTALL`) onde corresponderá até a uma nova linha. ``.`` é frequentemente "
"usado quando se deseja corresponder a \"qualquer caractere\"."

#: ../../howto/regex.rst:163
msgid "Repeating Things"
msgstr "Repetição de Elementos"

#: ../../howto/regex.rst:165
msgid ""
"Being able to match varying sets of characters is the first thing regular "
"expressions can do that isn't already possible with the methods available on "
"strings.  However, if that was the only additional capability of regexes, "
"they wouldn't be much of an advance. Another capability is that you can "
"specify that portions of the RE must be repeated a certain number of times."
msgstr ""
"Poder corresponder a conjuntos variáveis de caracteres é a primeira coisa "
"que as expressões regulares podem fazer que não é já possível com os métodos "
"disponíveis para cadeias de caracteres. No entanto, se esta fosse a única "
"capacidade adicional das expressões regulares, não seriam um grande avanço. "
"Outra capacidade é que pode especificar que partes da RE devem ser repetidas "
"um certo número de vezes."

#: ../../howto/regex.rst:171
msgid ""
"The first metacharacter for repeating things that we'll look at is ``*``.  "
"``*`` doesn't match the literal character ``'*'``; instead, it specifies "
"that the previous character can be matched zero or more times, instead of "
"exactly once."
msgstr ""
"O primeiro metacaractere para repetição que vamos analisar é ``*``. ``*`` "
"não corresponde ao caractere literal ``'*'``; em vez disso, especifica que o "
"caractere anterior pode ser correspondido zero ou mais vezes, em vez de "
"exatamente uma vez."

#: ../../howto/regex.rst:175
msgid ""
"For example, ``ca*t`` will match ``'ct'`` (0 ``'a'`` characters), ``'cat'`` "
"(1 ``'a'``), ``'caaat'`` (3 ``'a'`` characters), and so forth."
msgstr ""
"Por exemplo, ``ca*t`` corresponderá a ``'ct'`` (0 caracteres ``'a'``), "
"``'cat'`` (1 ``'a'``), ``'caaat'`` (3 caracteres ``'a'``), e assim por "
"diante."

#: ../../howto/regex.rst:178
msgid ""
"Repetitions such as ``*`` are :dfn:`greedy`; when repeating a RE, the "
"matching engine will try to repeat it as many times as possible. If later "
"portions of the pattern don't match, the matching engine will then back up "
"and try again with fewer repetitions."
msgstr ""
"Repetições como ``*`` são :dfn:`gananciosas`; ao repetir uma RE, o motor de "
"correspondência tentará repeti-la o maior número de vezes possível. Se "
"partes posteriores do padrão não corresponderem, o motor de correspondência "
"retrocederá e tentará novamente com menos repetições."

#: ../../howto/regex.rst:183
msgid ""
"A step-by-step example will make this more obvious.  Let's consider the "
"expression ``a[bcd]*b``.  This matches the letter ``'a'``, zero or more "
"letters from the class ``[bcd]``, and finally ends with a ``'b'``.  Now "
"imagine matching this RE against the string ``'abcbd'``."
msgstr ""
"Um exemplo passo a passo tornará isto mais óbvio. Vamos considerar a "
"expressão ``a[bcd]*b``. Isto corresponde à letra ``'a'``, zero ou mais "
"letras da classe ``[bcd]``, e termina finalmente com um ``'b'``. Agora "
"imagine corresponder esta RE à cadeia de caracteres ``'abcbd'``."

#: ../../howto/regex.rst:189
msgid "Step"
msgstr "Passo"

#: ../../howto/regex.rst:189
msgid "Matched"
msgstr "Correspondido"

#: ../../howto/regex.rst:189
msgid "Explanation"
msgstr "Explicação"

#: ../../howto/regex.rst:191
msgid "1"
msgstr "1"

#: ../../howto/regex.rst:191
msgid "``a``"
msgstr "``a``"

#: ../../howto/regex.rst:191
msgid "The ``a`` in the RE matches."
msgstr "O ``a`` na RE corresponde."

#: ../../howto/regex.rst:193
msgid "2"
msgstr "2"

#: ../../howto/regex.rst:193
msgid "``abcbd``"
msgstr "``abcbd``"

#: ../../howto/regex.rst:193
msgid ""
"The engine matches ``[bcd]*``, going as far as it can, which is to the end "
"of the string."
msgstr ""
"O motor corresponde a ``[bcd]*``, avançando o máximo possível, que é até ao "
"final da cadeia de caracteres."

#: ../../howto/regex.rst:197
msgid "3"
msgstr "3"

#: ../../howto/regex.rst:197 ../../howto/regex.rst:205
msgid "*Failure*"
msgstr "*Falha*"

#: ../../howto/regex.rst:197
msgid ""
"The engine tries to match ``b``, but the current position is at the end of "
"the string, so it fails."
msgstr ""
"O motor tenta corresponder a ``b``, mas a posição atual está no final da "
"cadeia de caracteres, pelo que falha."

#: ../../howto/regex.rst:202
msgid "4"
msgstr "4"

#: ../../howto/regex.rst:202 ../../howto/regex.rst:213
msgid "``abcb``"
msgstr "``abcb``"

#: ../../howto/regex.rst:202
msgid "Back up, so that  ``[bcd]*`` matches one less character."
msgstr ""
"Retrocede, de forma a que ``[bcd]*`` corresponda a um caractere a menos."

#: ../../howto/regex.rst:205
msgid "5"
msgstr "5"

#: ../../howto/regex.rst:205
msgid ""
"Try ``b`` again, but the current position is at the last character, which is "
"a ``'d'``."
msgstr ""
"Tenta ``b`` novamente, mas a posição atual está no último caractere, que é "
"um ``'d'``."

#: ../../howto/regex.rst:209 ../../howto/regex.rst:213
msgid "6"
msgstr "6"

#: ../../howto/regex.rst:209
msgid "``abc``"
msgstr "``abc``"

#: ../../howto/regex.rst:209
msgid "Back up again, so that ``[bcd]*`` is only matching ``bc``."
msgstr ""
"Retrocede novamente, de forma a que ``[bcd]*`` corresponda apenas a ``bc``."

#: ../../howto/regex.rst:213
msgid ""
"Try ``b`` again.  This time the character at the current position is "
"``'b'``, so it succeeds."
msgstr ""
"Tenta ``b`` novamente. Desta vez, o caractere na posição atual é ``'b'``, "
"pelo que tem sucesso."

#: ../../howto/regex.rst:219
msgid ""
"The end of the RE has now been reached, and it has matched ``'abcb'``.  This "
"demonstrates how the matching engine goes as far as it can at first, and if "
"no match is found it will then progressively back up and retry the rest of "
"the RE again and again.  It will back up until it has tried zero matches for "
"``[bcd]*``, and if that subsequently fails, the engine will conclude that "
"the string doesn't match the RE at all."
msgstr ""
"O final da RE foi agora atingido, e correspondeu a ``'abcb'``. Isto "
"demonstra como o motor de correspondência avança o máximo possível "
"inicialmente, e se nenhuma correspondência for encontrada, retrocederá "
"progressivamente e tentará novamente o resto da RE repetidamente. "
"Retrocederá até ter tentado zero correspondências para ``[bcd]*``, e se isso "
"falhar posteriormente, o motor concluirá que a cadeia de caracteres não "
"corresponde à RE."

#: ../../howto/regex.rst:226
msgid ""
"Another repeating metacharacter is ``+``, which matches one or more times.  "
"Pay careful attention to the difference between ``*`` and ``+``; ``*`` "
"matches *zero* or more times, so whatever's being repeated may not be "
"present at all, while ``+`` requires at least *one* occurrence.  To use a "
"similar example, ``ca+t`` will match ``'cat'`` (1 ``'a'``), ``'caaat'`` (3 "
"``'a'``\\ s), but won't match ``'ct'``."
msgstr ""
"Outro metacaractere de repetição é ``+``, que corresponde uma ou mais vezes. "
"Preste atenção à diferença entre ``*`` e ``+``; ``*`` corresponde *zero* ou "
"mais vezes, pelo que o que está a ser repetido pode não estar presente, "
"enquanto ``+`` requer pelo menos *uma* ocorrência. Usando um exemplo "
"semelhante, ``ca+t`` corresponderá a ``'cat'`` (1 ``'a'``), ``'caaat'`` (3 "
"``'a'``), mas não corresponderá a ``'ct'``."

#: ../../howto/regex.rst:233
msgid ""
"There are two more repeating qualifiers.  The question mark character, ``?"
"``, matches either once or zero times; you can think of it as marking "
"something as being optional.  For example, ``home-?brew`` matches either "
"``'homebrew'`` or ``'home-brew'``."
msgstr ""

#: ../../howto/regex.rst:238
msgid ""
"The most complicated repeated qualifier is ``{m,n}``, where *m* and *n* are "
"decimal integers.  This qualifier means there must be at least *m* "
"repetitions, and at most *n*.  For example, ``a/{1,3}b`` will match ``'a/"
"b'``, ``'a//b'``, and ``'a///b'``.  It won't match ``'ab'``, which has no "
"slashes, or ``'a////b'``, which has four."
msgstr ""

#: ../../howto/regex.rst:244
msgid ""
"You can omit either *m* or *n*; in that case, a reasonable value is assumed "
"for the missing value.  Omitting *m* is interpreted as a lower limit of 0, "
"while omitting *n* results in an upper bound of infinity."
msgstr ""
"Pode omitir *m* ou *n*; nesse caso, um valor razoável é assumido para o "
"valor em falta. Omitir *m* é interpretado como um limite inferior de 0, "
"enquanto omitir *n* resulta num limite superior de infinito."

#: ../../howto/regex.rst:248
msgid ""
"Readers of a reductionist bent may notice that the three other qualifiers "
"can all be expressed using this notation.  ``{0,}`` is the same as ``*``, "
"``{1,}`` is equivalent to ``+``, and ``{0,1}`` is the same as ``?``.  It's "
"better to use ``*``, ``+``, or ``?`` when you can, simply because they're "
"shorter and easier to read."
msgstr ""

#: ../../howto/regex.rst:256
msgid "Using Regular Expressions"
msgstr "A Utilizar Expressões Regulares"

#: ../../howto/regex.rst:258
msgid ""
"Now that we've looked at some simple regular expressions, how do we actually "
"use them in Python?  The :mod:`re` module provides an interface to the "
"regular expression engine, allowing you to compile REs into objects and then "
"perform matches with them."
msgstr ""
"Agora que analisámos algumas expressões regulares simples, como as "
"utilizamos realmente em Python? O módulo :mod:`re` fornece uma interface "
"para o motor de expressões regulares, permitindo compilar REs em objetos e, "
"depois, realizar correspondências com eles."

#: ../../howto/regex.rst:265
msgid "Compiling Regular Expressions"
msgstr "Compilação de Expressões Regulares"

#: ../../howto/regex.rst:267
msgid ""
"Regular expressions are compiled into pattern objects, which have methods "
"for various operations such as searching for pattern matches or performing "
"string substitutions. ::"
msgstr ""
"As expressões regulares são compiladas em objetos de padrão, que possuem "
"métodos para várias operações, como procurar correspondências de padrões ou "
"realizar substituições de cadeias de caracteres. ::"

#: ../../howto/regex.rst:276
msgid ""
":func:`re.compile` also accepts an optional *flags* argument, used to enable "
"various special features and syntax variations.  We'll go over the available "
"settings later, but for now a single example will do::"
msgstr ""
"A função :func:`re.compile` também aceita um argumento opcional *flags*, "
"usado para ativar várias funcionalidades especiais e variações de sintaxe. "
"Analisaremos as definições disponíveis mais tarde, mas por agora um único "
"exemplo será suficiente::"

#: ../../howto/regex.rst:282
msgid ""
"The RE is passed to :func:`re.compile` as a string.  REs are handled as "
"strings because regular expressions aren't part of the core Python language, "
"and no special syntax was created for expressing them.  (There are "
"applications that don't need REs at all, so there's no need to bloat the "
"language specification by including them.) Instead, the :mod:`re` module is "
"simply a C extension module included with Python, just like the :mod:"
"`socket` or :mod:`zlib` modules."
msgstr ""
"A RE é passada para :func:`re.compile` como uma cadeia de caracteres. As REs "
"são tratadas como cadeias de caracteres porque as expressões regulares não "
"fazem parte do núcleo da linguagem Python, e nenhuma sintaxe especial foi "
"criada para as expressar. (Existem aplicações que não necessitam de REs, "
"pelo que não há necessidade de sobrecarregar a especificação da linguagem "
"incluindo-as.) Em vez disso, o módulo :mod:`re` é simplesmente um módulo de "
"extensão em C incluído com o Python, tal como os módulos :mod:`socket` ou :"
"mod:`zlib`."

#: ../../howto/regex.rst:289
msgid ""
"Putting REs in strings keeps the Python language simpler, but has one "
"disadvantage which is the topic of the next section."
msgstr ""
"Colocar REs em cadeias de caracteres mantém a linguagem Python mais simples, "
"mas tem uma desvantagem que será abordada na próxima secção."

#: ../../howto/regex.rst:296
msgid "The Backslash Plague"
msgstr "A Praga da Barra Invertida"

#: ../../howto/regex.rst:298
msgid ""
"As stated earlier, regular expressions use the backslash character "
"(``'\\'``) to indicate special forms or to allow special characters to be "
"used without invoking their special meaning. This conflicts with Python's "
"usage of the same character for the same purpose in string literals."
msgstr ""
"Como mencionado anteriormente, as expressões regulares utilizam o caractere "
"de barra invertida (``'\\'``) para indicar formas especiais ou para permitir "
"que caracteres especiais sejam usados sem invocar o seu significado "
"especial. Isto conflitua com a utilização do mesmo caractere pelo Python "
"para o mesmo propósito em literais de cadeias de caracteres."

#: ../../howto/regex.rst:303
msgid ""
"Let's say you want to write a RE that matches the string ``\\section``, "
"which might be found in a LaTeX file.  To figure out what to write in the "
"program code, start with the desired string to be matched.  Next, you must "
"escape any backslashes and other metacharacters by preceding them with a "
"backslash, resulting in the string ``\\\\section``.  The resulting string "
"that must be passed to :func:`re.compile` must be ``\\\\section``.  However, "
"to express this as a Python string literal, both backslashes must be escaped "
"*again*."
msgstr ""

#: ../../howto/regex.rst:312
msgid "Characters"
msgstr "Caracteres"

#: ../../howto/regex.rst:312
msgid "Stage"
msgstr "Fase"

#: ../../howto/regex.rst:314
msgid "``\\section``"
msgstr ""

#: ../../howto/regex.rst:314
msgid "Text string to be matched"
msgstr ""

#: ../../howto/regex.rst:316
msgid "``\\\\section``"
msgstr ""

#: ../../howto/regex.rst:316
msgid "Escaped backslash for :func:`re.compile`"
msgstr ""

#: ../../howto/regex.rst:318 ../../howto/regex.rst:345
msgid "``\"\\\\\\\\section\"``"
msgstr ""

#: ../../howto/regex.rst:318
msgid "Escaped backslashes for a string literal"
msgstr ""

#: ../../howto/regex.rst:321
msgid ""
"In short, to match a literal backslash, one has to write ``'\\\\\\\\'`` as "
"the RE string, because the regular expression must be ``\\\\``, and each "
"backslash must be expressed as ``\\\\`` inside a regular Python string "
"literal.  In REs that feature backslashes repeatedly, this leads to lots of "
"repeated backslashes and makes the resulting strings difficult to understand."
msgstr ""
"Em resumo, para corresponder a uma barra invertida literal, é necessário "
"escrever ``'\\\\\\\\'`` como a cadeia de caracteres da RE, porque a "
"expressão regular deve ser ``\\\\``, e cada barra invertida deve ser "
"expressa como ``\\\\`` dentro de um literal de cadeia de caracteres Python "
"normal. Em REs que apresentam barras invertidas repetidamente, isto leva a "
"muitas barras invertidas repetidas e torna as cadeias de caracteres "
"resultantes difíceis de compreender."

#: ../../howto/regex.rst:327
msgid ""
"The solution is to use Python's raw string notation for regular expressions; "
"backslashes are not handled in any special way in a string literal prefixed "
"with ``'r'``, so ``r\"\\n\"`` is a two-character string containing ``'\\'`` "
"and ``'n'``, while ``\"\\n\"`` is a one-character string containing a "
"newline. Regular expressions will often be written in Python code using this "
"raw string notation."
msgstr ""
"A solução é utilizar a notação de cadeias de caracteres brutas do Python "
"para expressões regulares; as barras invertidas não são tratadas de forma "
"especial num literal de cadeia de caracteres prefixado com ``'r'``, pelo que "
"``r\"\\n\"`` é uma cadeia de caracteres de dois caracteres contendo ``'\\'`` "
"e ``'n'``, enquanto ``\"\\n\"`` é uma cadeia de caracteres de um caractere "
"contendo uma nova linha. As expressões regulares serão frequentemente "
"escritas em código Python utilizando esta notação de cadeias de caracteres "
"brutas."

#: ../../howto/regex.rst:333
msgid ""
"In addition, special escape sequences that are valid in regular expressions, "
"but not valid as Python string literals, now result in a :exc:"
"`DeprecationWarning` and will eventually become a :exc:`SyntaxError`, which "
"means the sequences will be invalid if raw string notation or escaping the "
"backslashes isn't used."
msgstr ""
"Além disso, sequências de escape especiais que são válidas em expressões "
"regulares, mas não são válidas como literais de cadeias de caracteres em "
"Python, resultam agora num :exc:`DeprecationWarning` e eventualmente tornar-"
"se-ão num :exc:`SyntaxError`, o que significa que as sequências serão "
"inválidas se a notação de cadeias de caracteres brutas ou o escape das "
"barras invertidas não for utilizado."

#: ../../howto/regex.rst:341
msgid "Regular String"
msgstr "Cadeia de Caracteres Normal"

#: ../../howto/regex.rst:341
msgid "Raw string"
msgstr "Cadeia de Caracteres Bruta"

#: ../../howto/regex.rst:343
msgid "``\"ab*\"``"
msgstr ""

#: ../../howto/regex.rst:343
msgid "``r\"ab*\"``"
msgstr ""

#: ../../howto/regex.rst:345
msgid "``r\"\\\\section\"``"
msgstr ""

#: ../../howto/regex.rst:347
msgid "``\"\\\\w+\\\\s+\\\\1\"``"
msgstr ""

#: ../../howto/regex.rst:347
msgid "``r\"\\w+\\s+\\1\"``"
msgstr ""

#: ../../howto/regex.rst:352
msgid "Performing Matches"
msgstr "Realização de Correspondências"

#: ../../howto/regex.rst:354
msgid ""
"Once you have an object representing a compiled regular expression, what do "
"you do with it?  Pattern objects have several methods and attributes. Only "
"the most significant ones will be covered here; consult the :mod:`re` docs "
"for a complete listing."
msgstr ""
"Depois de ter um objeto que representa uma expressão regular compilada, o "
"que fazer com ele? Os objetos de padrão possuem vários métodos e atributos. "
"Apenas os mais significativos serão abordados aqui; consulte a documentação "
"do módulo :mod:`re` para uma listagem completa."

#: ../../howto/regex.rst:360 ../../howto/regex.rst:418
#: ../../howto/regex.rst:1064
msgid "Method/Attribute"
msgstr "Método/Atributo"

#: ../../howto/regex.rst:360 ../../howto/regex.rst:418
#: ../../howto/regex.rst:1064
msgid "Purpose"
msgstr "Finalidade"

#: ../../howto/regex.rst:362
msgid "``match()``"
msgstr "``match()``"

#: ../../howto/regex.rst:362
msgid "Determine if the RE matches at the beginning of the string."
msgstr "Determina se a RE corresponde no início da cadeia de caracteres."

#: ../../howto/regex.rst:365
msgid "``search()``"
msgstr "``search()``"

#: ../../howto/regex.rst:365
msgid "Scan through a string, looking for any location where this RE matches."
msgstr ""
"Percorre uma cadeia de caracteres, procurando qualquer local onde esta RE "
"corresponda."

#: ../../howto/regex.rst:368
msgid "``findall()``"
msgstr "``findall()``"

#: ../../howto/regex.rst:368
msgid "Find all substrings where the RE matches, and returns them as a list."
msgstr ""
"Encontra todas as subcadeias de caracteres onde a RE corresponde e devolve-"
"as como uma lista."

#: ../../howto/regex.rst:371
msgid "``finditer()``"
msgstr "``finditer()``"

#: ../../howto/regex.rst:371
msgid ""
"Find all substrings where the RE matches, and returns them as an :term:"
"`iterator`."
msgstr ""
"Encontra todas as subcadeias de caracteres onde a RE corresponde e devolve-"
"as como um :term:`iterador`."

#: ../../howto/regex.rst:375
msgid ""
":meth:`~re.Pattern.match` and :meth:`~re.Pattern.search` return ``None`` if "
"no match can be found.  If they're successful, a :ref:`match object <match-"
"objects>` instance is returned, containing information about the match: "
"where it starts and ends, the substring it matched, and more."
msgstr ""
"Os métodos :meth:`~re.Pattern.match` e :meth:`~re.Pattern.search` devolvem "
"``None`` se nenhuma correspondência for encontrada. Se forem bem-sucedidos, "
"é devolvida uma instância de :ref:`objeto de correspondência <match-"
"objects>`, contendo informações sobre a correspondência: onde começa e "
"termina, a subcadeia de caracteres correspondida, e mais."

#: ../../howto/regex.rst:380
msgid ""
"You can learn about this by interactively experimenting with the :mod:`re` "
"module.  If you have :mod:`tkinter` available, you may also want to look at :"
"source:`Tools/demo/redemo.py`, a demonstration program included with the "
"Python distribution.  It allows you to enter REs and strings, and displays "
"whether the RE matches or fails. :file:`redemo.py` can be quite useful when "
"trying to debug a complicated RE."
msgstr ""

#: ../../howto/regex.rst:387
msgid ""
"This HOWTO uses the standard Python interpreter for its examples. First, run "
"the Python interpreter, import the :mod:`re` module, and compile a RE::"
msgstr ""
"Este guia utiliza o interpretador Python padrão para os seus exemplos. "
"Primeiro, execute o interpretador Python, importe o módulo :mod:`re` e "
"compile uma RE::"

#: ../../howto/regex.rst:395
msgid ""
"Now, you can try matching various strings against the RE ``[a-z]+``.  An "
"empty string shouldn't match at all, since ``+`` means 'one or more "
"repetitions'. :meth:`~re.Pattern.match` should return ``None`` in this case, "
"which will cause the interpreter to print no output.  You can explicitly "
"print the result of :meth:`!match` to make this clear. ::"
msgstr ""
"Agora, pode tentar corresponder várias cadeias de caracteres à RE ``[a-"
"z]+``. Uma cadeia de caracteres vazia não deve corresponder, uma vez que "
"``+`` significa 'uma ou mais repetições'. O método :meth:`~re.Pattern.match` "
"deve devolver ``None`` neste caso, o que fará com que o interpretador não "
"produza saída. Pode imprimir explicitamente o resultado de :meth:`!match` "
"para tornar isto claro. ::"

#: ../../howto/regex.rst:405
msgid ""
"Now, let's try it on a string that it should match, such as ``tempo``.  In "
"this case, :meth:`~re.Pattern.match` will return a :ref:`match object <match-"
"objects>`, so you should store the result in a variable for later use. ::"
msgstr ""
"Agora, vamos experimentar numa cadeia de caracteres que deve corresponder, "
"como ``tempo``. Neste caso, :meth:`~re.Pattern.match` devolverá um :ref:"
"`objeto de correspondência <match-objects>`, pelo que deve guardar o "
"resultado numa variável para uso posterior. ::"

#: ../../howto/regex.rst:413
msgid ""
"Now you can query the :ref:`match object <match-objects>` for information "
"about the matching string.  Match object instances also have several methods "
"and attributes; the most important ones are:"
msgstr ""
"Agora pode consultar o :ref:`objeto de correspondência <match-objects>` para "
"obter informações sobre a cadeia de caracteres correspondida. As instâncias "
"de objetos de correspondência também possuem vários métodos e atributos; os "
"mais importantes são:"

#: ../../howto/regex.rst:420
msgid "``group()``"
msgstr "``group()``"

#: ../../howto/regex.rst:420
msgid "Return the string matched by the RE"
msgstr "Devolve a cadeia de caracteres correspondida pela RE"

#: ../../howto/regex.rst:422
msgid "``start()``"
msgstr "``start()``"

#: ../../howto/regex.rst:422
msgid "Return the starting position of the match"
msgstr "Devolve a posição inicial da correspondência"

#: ../../howto/regex.rst:424
msgid "``end()``"
msgstr "``end()``"

#: ../../howto/regex.rst:424
msgid "Return the ending position of the match"
msgstr "Devolve a posição final da correspondência"

#: ../../howto/regex.rst:426
msgid "``span()``"
msgstr "``span()``"

#: ../../howto/regex.rst:426
msgid "Return a tuple containing the (start, end) positions  of the match"
msgstr "Devolve um tuplo contendo as posições (início, fim) da correspondência"

#: ../../howto/regex.rst:430
msgid "Trying these methods will soon clarify their meaning::"
msgstr "Experimentar estes métodos esclarecerá rapidamente o seu significado::"

#: ../../howto/regex.rst:439
msgid ""
":meth:`~re.Match.group` returns the substring that was matched by the RE.  :"
"meth:`~re.Match.start` and :meth:`~re.Match.end` return the starting and "
"ending index of the match. :meth:`~re.Match.span` returns both start and end "
"indexes in a single tuple.  Since the :meth:`~re.Pattern.match` method only "
"checks if the RE matches at the start of a string, :meth:`!start` will "
"always be zero.  However, the :meth:`~re.Pattern.search` method of patterns "
"scans through the string, so  the match may not start at zero in that "
"case. ::"
msgstr ""
"O método :meth:`~re.Match.group` devolve a subcadeia de caracteres que foi "
"correspondida pela RE. Os métodos :meth:`~re.Match.start` e :meth:`~re.Match."
"end` devolvem os índices de início e fim da correspondência. O método :meth:"
"`~re.Match.span` devolve ambos os índices de início e fim num único tuplo. "
"Uma vez que o método :meth:`~re.Pattern.match` apenas verifica se a RE "
"corresponde no início de uma cadeia de caracteres, :meth:`!start` será "
"sempre zero. No entanto, o método :meth:`~re.Pattern.search` de padrões "
"percorre a cadeia de caracteres, pelo que a correspondência pode não começar "
"em zero nesse caso. ::"

#: ../../howto/regex.rst:456
msgid ""
"In actual programs, the most common style is to store the :ref:`match object "
"<match-objects>` in a variable, and then check if it was ``None``.  This "
"usually looks like::"
msgstr ""
"Em programas reais, o estilo mais comum é guardar o :ref:`objeto de "
"correspondência <match-objects>` numa variável e, depois, verificar se era "
"``None``. Isto geralmente parece-se com::"

#: ../../howto/regex.rst:467
msgid ""
"Two pattern methods return all of the matches for a pattern. :meth:`~re."
"Pattern.findall` returns a list of matching strings::"
msgstr ""
"Dois métodos de padrão devolvem todas as correspondências para um padrão. O "
"método :meth:`~re.Pattern.findall` devolve uma lista de cadeias de "
"caracteres correspondidas::"

#: ../../howto/regex.rst:474
msgid ""
"The ``r`` prefix, making the literal a raw string literal, is needed in this "
"example because escape sequences in a normal \"cooked\" string literal that "
"are not recognized by Python, as opposed to regular expressions, now result "
"in a :exc:`DeprecationWarning` and will eventually become a :exc:"
"`SyntaxError`.  See :ref:`the-backslash-plague`."
msgstr ""
"O prefixo ``r``, que torna o literal numa cadeia de caracteres bruta "
"literal, é necessário neste exemplo porque as sequências de escape numa "
"literal de cadeia de caracteres \"cozinhada\" normal que não são "
"reconhecidas pelo Python, ao contrário das expressões regulares, resultam "
"agora num :exc:`DeprecationWarning` e eventualmente tornar-se-ão num :exc:"
"`SyntaxError`. Consulte :ref:`the-backslash-plague`."

#: ../../howto/regex.rst:480
msgid ""
":meth:`~re.Pattern.findall` has to create the entire list before it can be "
"returned as the result.  The :meth:`~re.Pattern.finditer` method returns a "
"sequence of :ref:`match object <match-objects>` instances as an :term:"
"`iterator`::"
msgstr ""
"O método :meth:`~re.Pattern.findall` tem de criar a lista completa antes de "
"poder ser devolvida como resultado. O método :meth:`~re.Pattern.finditer` "
"devolve uma sequência de instâncias de :ref:`objetos de correspondência "
"<match-objects>` como um :term:`iterador`::"

#: ../../howto/regex.rst:496
msgid "Module-Level Functions"
msgstr "Funções a Nível de Módulo"

#: ../../howto/regex.rst:498
msgid ""
"You don't have to create a pattern object and call its methods; the :mod:"
"`re` module also provides top-level functions called :func:`~re.match`, :"
"func:`~re.search`, :func:`~re.findall`, :func:`~re.sub`, and so forth.  "
"These functions take the same arguments as the corresponding pattern method "
"with the RE string added as the first argument, and still return either "
"``None`` or a :ref:`match object <match-objects>` instance. ::"
msgstr ""
"Não é necessário criar um objeto de padrão e chamar os seus métodos; o "
"módulo :mod:`re` também fornece funções de nível superior chamadas :func:"
"`~re.match`, :func:`~re.search`, :func:`~re.findall`, :func:`~re.sub`, e "
"assim por diante. Estas funções aceitam os mesmos argumentos que o método de "
"padrão correspondente com a cadeia de caracteres RE adicionada como o "
"primeiro argumento, e ainda devolvem ``None`` ou uma instância de :ref:"
"`objeto de correspondência <match-objects>`. ::"

#: ../../howto/regex.rst:510
msgid ""
"Under the hood, these functions simply create a pattern object for you and "
"call the appropriate method on it.  They also store the compiled object in a "
"cache, so future calls using the same RE won't need to parse the pattern "
"again and again."
msgstr ""
"Por baixo do capot, estas funções simplesmente criam um objeto de padrão "
"para si e chamam o método apropriado nele. Também guardam o objeto compilado "
"numa cache, pelo que chamadas futuras utilizando a mesma RE não precisarão "
"de analisar o padrão repetidamente."

#: ../../howto/regex.rst:515
msgid ""
"Should you use these module-level functions, or should you get the pattern "
"and call its methods yourself?  If you're accessing a regex within a loop, "
"pre-compiling it will save a few function calls. Outside of loops, there's "
"not much difference thanks to the internal cache."
msgstr ""
"Deve utilizar estas funções a nível de módulo ou deve obter o padrão e "
"chamar os seus métodos diretamente? Se estiver a aceder a uma expressão "
"regular dentro de um ciclo, pré-compilá-la poupará algumas chamadas de "
"função. Fora de ciclos, não há muita diferença graças à cache interna."

#: ../../howto/regex.rst:523
msgid "Compilation Flags"
msgstr "Flags de Compilação"

#: ../../howto/regex.rst:525
msgid ""
"Compilation flags let you modify some aspects of how regular expressions "
"work. Flags are available in the :mod:`re` module under two names, a long "
"name such as :const:`IGNORECASE` and a short, one-letter form such as :const:"
"`I`.  (If you're familiar with Perl's pattern modifiers, the one-letter "
"forms use the same letters; the short form of :const:`re.VERBOSE` is :const:"
"`re.X`, for example.) Multiple flags can be specified by bitwise OR-ing "
"them; ``re.I | re.M`` sets both the :const:`I` and :const:`M` flags, for "
"example."
msgstr ""
"As *flags* de compilação permitem modificar alguns aspetos de como as "
"expressões regulares funcionam. As *flags* estão disponíveis no módulo :mod:"
"`re` sob dois nomes, um nome longo como :const:`IGNORECASE` e uma forma "
"curta de uma letra como :const:`I`. (Se estiver familiarizado com os "
"modificadores de padrão do Perl, as formas de uma letra utilizam as mesmas "
"letras; a forma curta de :const:`re.VERBOSE` é :const:`re.X`, por exemplo.) "
"Várias *flags* podem ser especificadas utilizando OR bit a bit; ``re.I | re."
"M`` define ambas as *flags* :const:`I` e :const:`M`, por exemplo."

#: ../../howto/regex.rst:533
msgid ""
"Here's a table of the available flags, followed by a more detailed "
"explanation of each one."
msgstr ""
"Aqui está uma tabela das *flags* disponíveis, seguida de uma explicação mais "
"detalhada de cada uma."

#: ../../howto/regex.rst:537
msgid "Flag"
msgstr "Flag"

#: ../../howto/regex.rst:537
msgid "Meaning"
msgstr "Significado"

#: ../../howto/regex.rst:539
msgid ":const:`ASCII`, :const:`A`"
msgstr ":const:`ASCII`, :const:`A`"

#: ../../howto/regex.rst:539
msgid ""
"Makes several escapes like ``\\w``, ``\\b``, ``\\s`` and ``\\d`` match only "
"on ASCII characters with the respective property."
msgstr ""
"Faz com que várias sequências de escape como ``\\w``, ``\\b``, ``\\s`` e "
"``\\d`` correspondam apenas a caracteres ASCII com a propriedade respetiva."

#: ../../howto/regex.rst:543
msgid ":const:`DOTALL`, :const:`S`"
msgstr ":const:`DOTALL`, :const:`S`"

#: ../../howto/regex.rst:543
msgid "Make ``.`` match any character, including newlines."
msgstr ""
"Faz com que ``.`` corresponda a qualquer caractere, incluindo novas linhas."

#: ../../howto/regex.rst:546
msgid ":const:`IGNORECASE`, :const:`I`"
msgstr ":const:`IGNORECASE`, :const:`I`"

#: ../../howto/regex.rst:546
msgid "Do case-insensitive matches."
msgstr "Realiza correspondências sem distinção de maiúsculas/minúsculas."

#: ../../howto/regex.rst:548
msgid ":const:`LOCALE`, :const:`L`"
msgstr ":const:`LOCALE`, :const:`L`"

#: ../../howto/regex.rst:548
msgid "Do a locale-aware match."
msgstr "Realiza uma correspondência com consciência de localização."

#: ../../howto/regex.rst:550
msgid ":const:`MULTILINE`, :const:`M`"
msgstr ":const:`MULTILINE`, :const:`M`"

#: ../../howto/regex.rst:550
msgid "Multi-line matching, affecting ``^`` and ``$``."
msgstr "Correspondência multi-linha, afetando ``^`` e ``$``."

#: ../../howto/regex.rst:553
msgid ":const:`VERBOSE`, :const:`X` (for 'extended')"
msgstr ":const:`VERBOSE`, :const:`X` (para 'estendido')"

#: ../../howto/regex.rst:553
msgid ""
"Enable verbose REs, which can be organized more cleanly and understandably."
msgstr ""
"Ativa REs verbosas, que podem ser organizadas de forma mais clara e "
"compreensível."

#: ../../howto/regex.rst:562
msgid ""
"Perform case-insensitive matching; character class and literal strings will "
"match letters by ignoring case.  For example, ``[A-Z]`` will match lowercase "
"letters, too. Full Unicode matching also works unless the :const:`ASCII` "
"flag is used to disable non-ASCII matches.  When the Unicode patterns ``[a-"
"z]`` or ``[A-Z]`` are used in combination with the :const:`IGNORECASE` flag, "
"they will match the 52 ASCII letters and 4 additional non-ASCII letters: "
"'İ' (U+0130, Latin capital letter I with dot above), 'ı' (U+0131, Latin "
"small letter dotless i), 'ſ' (U+017F, Latin small letter long s) and "
"'K' (U+212A, Kelvin sign).  ``Spam`` will match ``'Spam'``, ``'spam'``, "
"``'spAM'``, or ``'ſpam'`` (the latter is matched only in Unicode mode). This "
"lowercasing doesn't take the current locale into account; it will if you "
"also set the :const:`LOCALE` flag."
msgstr ""
"Realiza correspondências sem distinção de maiúsculas/minúsculas; classes de "
"caracteres e cadeias de caracteres literais corresponderão a letras "
"ignorando maiúsculas/minúsculas. Por exemplo, ``[A-Z]`` também corresponderá "
"a letras minúsculas. A correspondência Unicode completa também funciona a "
"menos que a *flag* :const:`ASCII` seja utilizada para desativar "
"correspondências não-ASCII. Quando os padrões Unicode ``[a-z]`` ou ``[A-Z]`` "
"são utilizados em combinação com a *flag* :const:`IGNORECASE`, "
"corresponderão às 52 letras ASCII e 4 letras não-ASCII adicionais: "
"'İ' (U+0130, letra maiúscula latina I com ponto acima), 'ı' (U+0131, letra "
"minúscula latina i sem ponto), 'ſ' (U+017F, letra minúscula latina s longo) "
"e 'K' (U+212A, símbolo Kelvin). ``Spam`` corresponderá a ``'Spam'``, "
"``'spam'``, ``'spAM'`` ou ``'ſpam'`` (este último apenas em modo Unicode). "
"Esta conversão para minúsculas não tem em conta a localização atual; terá em "
"conta se também definir a *flag* :const:`LOCALE`."

#: ../../howto/regex.rst:580
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B`` and case-insensitive matching "
"dependent on the current locale instead of the Unicode database."
msgstr ""
"Faz com que ``\\w``, ``\\W``, ``\\b``, ``\\B`` e a correspondência sem "
"distinção de maiúsculas/minúsculas dependam da localização atual em vez da "
"base de dados Unicode."

#: ../../howto/regex.rst:583
msgid ""
"Locales are a feature of the C library intended to help in writing programs "
"that take account of language differences.  For example, if you're "
"processing encoded French text, you'd want to be able to write ``\\w+`` to "
"match words, but ``\\w`` only matches the character class ``[A-Za-z]`` in "
"bytes patterns; it won't match bytes corresponding to ``é`` or ``ç``. If "
"your system is configured properly and a French locale is selected, certain "
"C functions will tell the program that the byte corresponding to ``é`` "
"should also be considered a letter. Setting the :const:`LOCALE` flag when "
"compiling a regular expression will cause the resulting compiled object to "
"use these C functions for ``\\w``; this is slower, but also enables ``\\w+`` "
"to match French words as you'd expect. The use of this flag is discouraged "
"in Python 3 as the locale mechanism is very unreliable, it only handles one "
"\"culture\" at a time, and it only works with 8-bit locales.  Unicode "
"matching is already enabled by default in Python 3 for Unicode (str) "
"patterns, and it is able to handle different locales/languages."
msgstr ""
"As localizações são uma funcionalidade da biblioteca C destinada a ajudar na "
"escrita de programas que têm em conta as diferenças linguísticas. Por "
"exemplo, se estiver a processar texto francês codificado, gostaria de poder "
"escrever ``\\w+`` para corresponder a palavras, mas ``\\w`` apenas "
"corresponde à classe de caracteres ``[A-Za-z]`` em padrões de *bytes*; não "
"corresponderá a *bytes* correspondentes a ``é`` ou ``ç``. Se o seu sistema "
"estiver configurado corretamente e uma localização francesa estiver "
"selecionada, certas funções C dirão ao programa que o *byte* correspondente "
"a ``é`` também deve ser considerado uma letra. Definir a *flag* :const:"
"`LOCALE` ao compilar uma expressão regular fará com que o objeto compilado "
"resultante utilize estas funções C para ``\\w``; isto é mais lento, mas "
"também permite que ``\\w+`` corresponda a palavras francesas como esperado. "
"O uso desta *flag* é desencorajado em Python 3, uma vez que o mecanismo de "
"localização é muito pouco fiável, apenas lida com uma \"cultura\" de cada "
"vez e apenas funciona com localizações de 8 bits. A correspondência Unicode "
"já está ativada por defeito em Python 3 para padrões Unicode (str), e é "
"capaz de lidar com diferentes localizações/idiomas."

#: ../../howto/regex.rst:605
msgid ""
"(``^`` and ``$`` haven't been explained yet;  they'll be introduced in "
"section :ref:`more-metacharacters`.)"
msgstr ""
"(``^`` e ``$`` ainda não foram explicados; serão introduzidos na secção :ref:"
"`more-metacharacters`.)"

#: ../../howto/regex.rst:608
msgid ""
"Usually ``^`` matches only at the beginning of the string, and ``$`` matches "
"only at the end of the string and immediately before the newline (if any) at "
"the end of the string. When this flag is specified, ``^`` matches at the "
"beginning of the string and at the beginning of each line within the string, "
"immediately following each newline.  Similarly, the ``$`` metacharacter "
"matches either at the end of the string and at the end of each line "
"(immediately preceding each newline)."
msgstr ""
"Normalmente, ``^`` corresponde apenas no início da cadeia de caracteres, e "
"``$`` corresponde apenas no final da cadeia de caracteres e imediatamente "
"antes da nova linha (se existir) no final da cadeia de caracteres. Quando "
"esta *flag* é especificada, ``^`` corresponde no início da cadeia de "
"caracteres e no início de cada linha dentro da cadeia de caracteres, "
"imediatamente após cada nova linha. Da mesma forma, o metacaractere ``$`` "
"corresponde no final da cadeia de caracteres e no final de cada linha "
"(imediatamente antes de cada nova linha)."

#: ../../howto/regex.rst:621
msgid ""
"Makes the ``'.'`` special character match any character at all, including a "
"newline; without this flag, ``'.'`` will match anything *except* a newline."
msgstr ""
"Faz com que o caractere especial ``'.'`` corresponda a qualquer caractere, "
"incluindo uma nova linha; sem esta *flag*, ``'.'`` corresponderá a qualquer "
"coisa *exceto* uma nova linha."

#: ../../howto/regex.rst:629
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\s`` and ``\\S`` perform ASCII-"
"only matching instead of full Unicode matching. This is only meaningful for "
"Unicode patterns, and is ignored for byte patterns."
msgstr ""
"Faz com que ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\s`` e ``\\S`` realizem "
"correspondência apenas ASCII em vez de correspondência Unicode completa. "
"Isto é apenas significativo para padrões Unicode e é ignorado para padrões "
"de *bytes*."

#: ../../howto/regex.rst:638
msgid ""
"This flag allows you to write regular expressions that are more readable by "
"granting you more flexibility in how you can format them.  When this flag "
"has been specified, whitespace within the RE string is ignored, except when "
"the whitespace is in a character class or preceded by an unescaped "
"backslash; this lets you organize and indent the RE more clearly.  This flag "
"also lets you put comments within a RE that will be ignored by the engine; "
"comments are marked by a ``'#'`` that's neither in a character class or "
"preceded by an unescaped backslash."
msgstr ""
"Esta *flag* permite escrever expressões regulares mais legíveis, concedendo "
"mais flexibilidade na forma como as pode formatar. Quando esta *flag* é "
"especificada, os espaços em branco dentro da cadeia de caracteres RE são "
"ignorados, exceto quando os espaços em branco estão numa classe de "
"caracteres ou são precedidos por uma barra invertida não escapada; isto "
"permite organizar e indentar a RE de forma mais clara. Esta *flag* também "
"permite colocar comentários dentro de uma RE que serão ignorados pelo motor; "
"os comentários são marcados por um ``'#'`` que não está numa classe de "
"caracteres ou é precedido por uma barra invertida não escapada."

#: ../../howto/regex.rst:647
msgid ""
"For example, here's a RE that uses :const:`re.VERBOSE`; see how much easier "
"it is to read? ::"
msgstr ""
"Por exemplo, aqui está uma RE que utiliza :const:`re.VERBOSE`; veja como é "
"mais fácil de ler? ::"

#: ../../howto/regex.rst:660
msgid "Without the verbose setting, the RE would look like this::"
msgstr "Sem a definição verbosa, a RE seria assim::"

#: ../../howto/regex.rst:666
msgid ""
"In the above example, Python's automatic concatenation of string literals "
"has been used to break up the RE into smaller pieces, but it's still more "
"difficult to understand than the version using :const:`re.VERBOSE`."
msgstr ""
"No exemplo acima, a concatenação automática de literais de cadeias de "
"caracteres do Python foi utilizada para dividir a RE em partes mais "
"pequenas, mas ainda é mais difícil de compreender do que a versão que "
"utiliza :const:`re.VERBOSE`."

#: ../../howto/regex.rst:672
msgid "More Pattern Power"
msgstr "Mais Poder de Padrões"

#: ../../howto/regex.rst:674
msgid ""
"So far we've only covered a part of the features of regular expressions.  In "
"this section, we'll cover some new metacharacters, and how to use groups to "
"retrieve portions of the text that was matched."
msgstr ""
"Até agora, apenas cobrimos uma parte das funcionalidades das expressões "
"regulares. Nesta secção, abordaremos alguns novos metacaracteres e como "
"utilizar grupos para recuperar porções do texto que foi correspondido."

#: ../../howto/regex.rst:682
msgid "More Metacharacters"
msgstr "Mais Metacaracteres"

#: ../../howto/regex.rst:684
msgid ""
"There are some metacharacters that we haven't covered yet.  Most of them "
"will be covered in this section."
msgstr ""
"Existem alguns metacaracteres que ainda não abordámos. A maioria deles será "
"abordada nesta secção."

#: ../../howto/regex.rst:687
msgid ""
"Some of the remaining metacharacters to be discussed are :dfn:`zero-width "
"assertions`.  They don't cause the engine to advance through the string; "
"instead, they consume no characters at all, and simply succeed or fail.  For "
"example, ``\\b`` is an assertion that the current position is located at a "
"word boundary; the position isn't changed by the ``\\b`` at all.  This means "
"that zero-width assertions should never be repeated, because if they match "
"once at a given location, they can obviously be matched an infinite number "
"of times."
msgstr ""
"Alguns dos metacaracteres restantes a serem discutidos são :dfn:`asserções "
"de largura zero`. Eles não fazem com que o motor avance através da cadeia de "
"caracteres; em vez disso, não consomem quaisquer caracteres e simplesmente "
"têm sucesso ou falham. Por exemplo, ``\\b`` é uma asserção de que a posição "
"atual está localizada num limite de palavra; a posição não é alterada pelo "
"``\\b``. Isto significa que as asserções de largura zero nunca devem ser "
"repetidas, porque se corresponderem uma vez numa determinada localização, "
"podem obviamente ser correspondidas um número infinito de vezes."

#: ../../howto/regex.rst:703
msgid "``|``"
msgstr "``|``"

#: ../../howto/regex.rst:696
msgid ""
"Alternation, or the \"or\" operator.   If *A* and *B* are regular "
"expressions, ``A|B`` will match any string that matches either *A* or *B*. "
"``|`` has very low precedence in order to make it work reasonably when "
"you're alternating multi-character strings. ``Crow|Servo`` will match either "
"``'Crow'`` or ``'Servo'``, not ``'Cro'``, a ``'w'`` or an ``'S'``, and "
"``'ervo'``."
msgstr ""
"Alternância, ou o operador \"ou\". Se *A* e *B* são expressões regulares, "
"``A|B`` corresponderá a qualquer cadeia de caracteres que corresponda a *A* "
"ou *B*. ``|`` tem uma precedência muito baixa para funcionar de forma "
"razoável quando está a alternar cadeias de caracteres com vários caracteres. "
"``Crow|Servo`` corresponderá a ``'Crow'`` ou ``'Servo'``, não a ``'Cro'``, "
"um ``'w'`` ou um ``'S'``, e ``'ervo'``."

#: ../../howto/regex.rst:702
msgid ""
"To match a literal ``'|'``, use ``\\|``, or enclose it inside a character "
"class, as in ``[|]``."
msgstr ""
"Para corresponder a um ``'|'`` literal, use ``\\|``, ou inclua-o dentro de "
"uma classe de caracteres, como em ``[|]``."

#: ../../howto/regex.rst:718
msgid "``^``"
msgstr "``^``"

#: ../../howto/regex.rst:706
msgid ""
"Matches at the beginning of lines.  Unless the :const:`MULTILINE` flag has "
"been set, this will only match at the beginning of the string.  In :const:"
"`MULTILINE` mode, this also matches immediately after each newline within "
"the string."
msgstr ""
"Corresponde ao início das linhas. A menos que a *flag* :const:`MULTILINE` "
"esteja definida, isto corresponderá apenas ao início da cadeia de "
"caracteres. Em modo :const:`MULTILINE`, isto também corresponde "
"imediatamente após cada nova linha dentro da cadeia de caracteres."

#: ../../howto/regex.rst:710
msgid ""
"For example, if you wish to match the word ``From`` only at the beginning of "
"a line, the RE to use is ``^From``. ::"
msgstr ""
"Por exemplo, se pretender corresponder à palavra ``From`` apenas no início "
"de uma linha, a RE a utilizar é ``^From``. ::"

#: ../../howto/regex.rst:718
msgid "To match a literal ``'^'``, use ``\\^``."
msgstr "Para corresponder a um ``'^'`` literal, use ``\\^``."

#: ../../howto/regex.rst:732
msgid "``$``"
msgstr "``$``"

#: ../../howto/regex.rst:721
msgid ""
"Matches at the end of a line, which is defined as either the end of the "
"string, or any location followed by a newline character.     ::"
msgstr ""
"Corresponde ao final de uma linha, que é definido como o final da cadeia de "
"caracteres ou qualquer localização seguida de um caractere de nova linha. ::"

#: ../../howto/regex.rst:731
msgid ""
"To match a literal ``'$'``, use ``\\$`` or enclose it inside a character "
"class, as in  ``[$]``."
msgstr ""
"Para corresponder a um ``'$'`` literal, use ``\\$`` ou inclua-o dentro de "
"uma classe de caracteres, como em ``[$]``."

#: ../../howto/regex.rst:738
msgid "``\\A``"
msgstr "``\\A``"

#: ../../howto/regex.rst:735
msgid ""
"Matches only at the start of the string.  When not in :const:`MULTILINE` "
"mode, ``\\A`` and ``^`` are effectively the same.  In :const:`MULTILINE` "
"mode, they're different: ``\\A`` still matches only at the beginning of the "
"string, but ``^`` may match at any location inside the string that follows a "
"newline character."
msgstr ""
"Corresponde apenas ao início da cadeia de caracteres. Quando não está em "
"modo :const:`MULTILINE`, ``\\A`` e ``^`` são efetivamente iguais. Em modo :"
"const:`MULTILINE`, são diferentes: ``\\A`` ainda corresponde apenas ao "
"início da cadeia de caracteres, mas ``^`` pode corresponder a qualquer "
"localização dentro da cadeia de caracteres que segue um caractere de nova "
"linha."

#: ../../howto/regex.rst:741
msgid "``\\Z``"
msgstr "``\\Z``"

#: ../../howto/regex.rst:741
msgid "Matches only at the end of the string."
msgstr "Corresponde apenas ao final da cadeia de caracteres."

#: ../../howto/regex.rst:776
msgid "``\\b``"
msgstr "``\\b``"

#: ../../howto/regex.rst:744
msgid ""
"Word boundary.  This is a zero-width assertion that matches only at the "
"beginning or end of a word.  A word is defined as a sequence of alphanumeric "
"characters, so the end of a word is indicated by whitespace or a non-"
"alphanumeric character."
msgstr ""

#: ../../howto/regex.rst:749
msgid ""
"The following example matches ``class`` only when it's a complete word; it "
"won't match when it's contained inside another word. ::"
msgstr ""
"O exemplo seguinte corresponde a ``class`` apenas quando é uma palavra "
"completa; não corresponderá quando está contida dentro de outra palavra. ::"

#: ../../howto/regex.rst:760
msgid ""
"There are two subtleties you should remember when using this special "
"sequence. First, this is the worst collision between Python's string "
"literals and regular expression sequences.  In Python's string literals, "
"``\\b`` is the backspace character, ASCII value 8.  If you're not using raw "
"strings, then Python will convert the ``\\b`` to a backspace, and your RE "
"won't match as you expect it to. The following example looks the same as our "
"previous RE, but omits the ``'r'`` in front of the RE string. ::"
msgstr ""
"Existem duas subtilezas que deve recordar ao utilizar esta sequência "
"especial. Primeiro, esta é a pior colisão entre os literais de cadeias de "
"caracteres do Python e as sequências de expressões regulares. Nos literais "
"de cadeias de caracteres do Python, ``\\b`` é o caractere de retrocesso, "
"valor ASCII 8. Se não estiver a utilizar cadeias de caracteres brutas, então "
"o Python converterá o ``\\b`` num retrocesso, e a sua RE não corresponderá "
"como espera. O exemplo seguinte parece igual à nossa RE anterior, mas omite "
"o ``'r'`` antes da cadeia de caracteres RE. ::"

#: ../../howto/regex.rst:774
msgid ""
"Second, inside a character class, where there's no use for this assertion, "
"``\\b`` represents the backspace character, for compatibility with Python's "
"string literals."
msgstr ""
"Segundo, dentro de uma classe de caracteres, onde não há uso para esta "
"asserção, ``\\b`` representa o caractere de retrocesso, para compatibilidade "
"com os literais de cadeias de caracteres do Python."

#: ../../howto/regex.rst:781
msgid "``\\B``"
msgstr "``\\B``"

#: ../../howto/regex.rst:779
msgid ""
"Another zero-width assertion, this is the opposite of ``\\b``, only matching "
"when the current position is not at a word boundary."
msgstr ""
"Outra asserção de largura zero, esta é o oposto de ``\\b``, correspondendo "
"apenas quando a posição atual não está num limite de palavra."

#: ../../howto/regex.rst:784
msgid "Grouping"
msgstr "Agrupamento"

#: ../../howto/regex.rst:786
msgid ""
"Frequently you need to obtain more information than just whether the RE "
"matched or not.  Regular expressions are often used to dissect strings by "
"writing a RE divided into several subgroups which match different components "
"of interest. For example, an RFC-822 header line is divided into a header "
"name and a value, separated by a ``':'``, like this:"
msgstr ""
"Frequentemente, precisa de obter mais informações do que apenas se a RE "
"correspondeu ou não. As expressões regulares são frequentemente usadas para "
"dissecar cadeias de caracteres, escrevendo uma RE dividida em vários "
"subgrupos que correspondem a diferentes componentes de interesse. Por "
"exemplo, uma linha de cabeçalho RFC-822 é dividida num nome de cabeçalho e "
"num valor, separados por um ``':'``, como isto:"

#: ../../howto/regex.rst:799
msgid ""
"This can be handled by writing a regular expression which matches an entire "
"header line, and has one group which matches the header name, and another "
"group which matches the header's value."
msgstr ""

#: ../../howto/regex.rst:803
msgid ""
"Groups are marked by the ``'('``, ``')'`` metacharacters. ``'('`` and "
"``')'`` have much the same meaning as they do in mathematical expressions; "
"they group together the expressions contained inside them, and you can "
"repeat the contents of a group with a repeating qualifier, such as ``*``, "
"``+``, ``?``, or ``{m,n}``.  For example, ``(ab)*`` will match zero or more "
"repetitions of ``ab``. ::"
msgstr ""

#: ../../howto/regex.rst:814
msgid ""
"Groups indicated with ``'('``, ``')'`` also capture the starting and ending "
"index of the text that they match; this can be retrieved by passing an "
"argument to :meth:`~re.Match.group`, :meth:`~re.Match.start`, :meth:`~re."
"Match.end`, and :meth:`~re.Match.span`.  Groups are numbered starting with "
"0.  Group 0 is always present; it's the whole RE, so :ref:`match object "
"<match-objects>` methods all have group 0 as their default argument.  Later "
"we'll see how to express groups that don't capture the span of text that "
"they match. ::"
msgstr ""
"Os grupos indicados com ``'('``, ``')'`` também capturam o índice inicial e "
"final do texto que correspondem; isto pode ser recuperado passando um "
"argumento a :meth:`~re.Match.group`, :meth:`~re.Match.start`, :meth:`~re."
"Match.end`, e :meth:`~re.Match.span`. Os grupos são numerados a partir de 0. "
"O grupo 0 está sempre presente; é a RE completa, pelo que os métodos do :ref:"
"`objeto de correspondência <match-objects>` têm todos o grupo 0 como "
"argumento predefinido. Mais tarde veremos como expressar grupos que não "
"capturam a extensão do texto que correspondem. ::"

#: ../../howto/regex.rst:830
msgid ""
"Subgroups are numbered from left to right, from 1 upward.  Groups can be "
"nested; to determine the number, just count the opening parenthesis "
"characters, going from left to right. ::"
msgstr ""
"Os subgrupos são numerados da esquerda para a direita, a partir de 1. Os "
"grupos podem ser aninhados; para determinar o número, basta contar os "
"caracteres de parênteses de abertura, da esquerda para a direita. ::"

#: ../../howto/regex.rst:843
msgid ""
":meth:`~re.Match.group` can be passed multiple group numbers at a time, in "
"which case it will return a tuple containing the corresponding values for "
"those groups. ::"
msgstr ""
"O método :meth:`~re.Match.group` pode receber vários números de grupo de uma "
"vez, caso em que devolverá um tuplo contendo os valores correspondentes para "
"esses grupos. ::"

#: ../../howto/regex.rst:849
msgid ""
"The :meth:`~re.Match.groups` method returns a tuple containing the strings "
"for all the subgroups, from 1 up to however many there are. ::"
msgstr ""
"O método :meth:`~re.Match.groups` devolve um tuplo contendo as cadeias de "
"caracteres para todos os subgrupos, de 1 até ao número que existir. ::"

#: ../../howto/regex.rst:855
msgid ""
"Backreferences in a pattern allow you to specify that the contents of an "
"earlier capturing group must also be found at the current location in the "
"string.  For example, ``\\1`` will succeed if the exact contents of group 1 "
"can be found at the current position, and fails otherwise.  Remember that "
"Python's string literals also use a backslash followed by numbers to allow "
"including arbitrary characters in a string, so be sure to use a raw string "
"when incorporating backreferences in a RE."
msgstr ""
"As referências retroativas num padrão permitem-lhe especificar que o "
"conteúdo de um grupo de captura anterior também deve ser encontrado na "
"posição atual na cadeia de caracteres. Por exemplo, ``\\1`` terá sucesso se "
"o conteúdo exato do grupo 1 puder ser encontrado na posição atual, e falhará "
"caso contrário. Lembre-se de que os literais de cadeias de caracteres do "
"Python também usam uma barra invertida seguida de números para permitir a "
"inclusão de caracteres arbitrários numa cadeia de caracteres, pelo que deve "
"certificar-se de usar uma cadeia de caracteres bruta ao incorporar "
"referências retroativas numa RE."

#: ../../howto/regex.rst:863
msgid "For example, the following RE detects doubled words in a string. ::"
msgstr ""
"Por exemplo, a seguinte RE deteta palavras duplicadas numa cadeia de "
"caracteres. ::"

#: ../../howto/regex.rst:869
msgid ""
"Backreferences like this aren't often useful for just searching through a "
"string --- there are few text formats which repeat data in this way --- but "
"you'll soon find out that they're *very* useful when performing string "
"substitutions."
msgstr ""
"Referências retroativas como esta não são frequentemente úteis apenas para "
"procurar numa cadeia de caracteres — existem poucos formatos de texto que "
"repetem dados desta forma — mas descobrirá rapidamente que são *muito* úteis "
"ao realizar substituições de cadeias de caracteres."

#: ../../howto/regex.rst:875
msgid "Non-capturing and Named Groups"
msgstr "Grupos Não Capturantes e Nomeados"

#: ../../howto/regex.rst:877
msgid ""
"Elaborate REs may use many groups, both to capture substrings of interest, "
"and to group and structure the RE itself.  In complex REs, it becomes "
"difficult to keep track of the group numbers.  There are two features which "
"help with this problem.  Both of them use a common syntax for regular "
"expression extensions, so we'll look at that first."
msgstr ""
"REs elaboradas podem usar muitos grupos, tanto para capturar subcadeias de "
"caracteres de interesse, como para agrupar e estruturar a própria RE. Em REs "
"complexas, torna-se difícil acompanhar os números dos grupos. Existem duas "
"funcionalidades que ajudam com este problema. Ambas usam uma sintaxe comum "
"para extensões de expressões regulares, pelo que vamos analisar isso "
"primeiro."

#: ../../howto/regex.rst:883
msgid ""
"Perl 5 is well known for its powerful additions to standard regular "
"expressions. For these new features the Perl developers couldn't choose new "
"single-keystroke metacharacters or new special sequences beginning with "
"``\\`` without making Perl's regular expressions confusingly different from "
"standard REs.  If they chose ``&`` as a new metacharacter, for example, old "
"expressions would be assuming that ``&`` was a regular character and "
"wouldn't have escaped it by writing ``\\&`` or ``[&]``."
msgstr ""
"O Perl 5 é bem conhecido pelas suas poderosas adições às expressões "
"regulares padrão. Para estas novas funcionalidades, os desenvolvedores do "
"Perl não podiam escolher novos metacaracteres de tecla única ou novas "
"sequências especiais que começassem com ``\\`` sem tornar as expressões "
"regulares do Perl confusamente diferentes das REs padrão. Se tivessem "
"escolhido ``&`` como um novo metacaractere, por exemplo, expressões antigas "
"assumiriam que ``&`` era um caractere regular e não o teriam escapado "
"escrevendo ``\\&`` ou ``[&]``."

#: ../../howto/regex.rst:890
msgid ""
"The solution chosen by the Perl developers was to use ``(?...)`` as the "
"extension syntax.  ``?`` immediately after a parenthesis was a syntax error "
"because the ``?`` would have nothing to repeat, so this didn't introduce any "
"compatibility problems.  The characters immediately after the ``?``  "
"indicate what extension is being used, so ``(?=foo)`` is one thing (a "
"positive lookahead assertion) and ``(?:foo)`` is something else (a non-"
"capturing group containing the subexpression ``foo``)."
msgstr ""

#: ../../howto/regex.rst:898
msgid ""
"Python supports several of Perl's extensions and adds an extension syntax to "
"Perl's extension syntax.  If the first character after the question mark is "
"a ``P``, you know that it's an extension that's specific to Python."
msgstr ""
"O Python suporta várias das extensões do Perl e adiciona uma sintaxe de "
"extensão à sintaxe de extensão do Perl. Se o primeiro caractere após o ponto "
"de interrogação for um ``P``, sabe que é uma extensão específica do Python."

#: ../../howto/regex.rst:903
msgid ""
"Now that we've looked at the general extension syntax, we can return to the "
"features that simplify working with groups in complex REs."
msgstr ""
"Agora que analisámos a sintaxe geral de extensão, podemos voltar às "
"funcionalidades que simplificam o trabalho com grupos em REs complexas."

#: ../../howto/regex.rst:906
msgid ""
"Sometimes you'll want to use a group to denote a part of a regular "
"expression, but aren't interested in retrieving the group's contents. You "
"can make this fact explicit by using a non-capturing group: ``(?:...)``, "
"where you can replace the ``...`` with any other regular expression. ::"
msgstr ""
"Às vezes, vai querer usar um grupo para denotar uma parte de uma expressão "
"regular, mas não está interessado em recuperar o conteúdo do grupo. Pode "
"tornar este facto explícito usando um grupo não capturante: ``(?:...)``, "
"onde pode substituir o ``...`` por qualquer outra expressão regular. ::"

#: ../../howto/regex.rst:918
msgid ""
"Except for the fact that you can't retrieve the contents of what the group "
"matched, a non-capturing group behaves exactly the same as a capturing "
"group; you can put anything inside it, repeat it with a repetition "
"metacharacter such as ``*``, and nest it within other groups (capturing or "
"non-capturing). ``(?:...)`` is particularly useful when modifying an "
"existing pattern, since you can add new groups without changing how all the "
"other groups are numbered.  It should be mentioned that there's no "
"performance difference in searching between capturing and non-capturing "
"groups; neither form is any faster than the other."
msgstr ""
"À exceção do facto de não poder recuperar o conteúdo do que o grupo "
"correspondeu, um grupo não capturante comporta-se exatamente da mesma forma "
"que um grupo capturante; pode colocar qualquer coisa dentro dele, repetir "
"com um metacaractere de repetição como ``*``, e aninhá-lo dentro de outros "
"grupos (capturantes ou não capturantes). ``(?:...)`` é particularmente útil "
"ao modificar um padrão existente, uma vez que pode adicionar novos grupos "
"sem alterar a forma como todos os outros grupos são numerados. Deve ser "
"mencionado que não há diferença de desempenho na pesquisa entre grupos "
"capturantes e não capturantes; nenhuma das formas é mais rápida do que a "
"outra."

#: ../../howto/regex.rst:927
msgid ""
"A more significant feature is named groups: instead of referring to them by "
"numbers, groups can be referenced by a name."
msgstr ""
"Uma funcionalidade mais significativa são os grupos nomeados: em vez de se "
"referir a eles por números, os grupos podem ser referenciados por um nome."

#: ../../howto/regex.rst:930
msgid ""
"The syntax for a named group is one of the Python-specific extensions: ``(?"
"P<name>...)``.  *name* is, obviously, the name of the group.  Named groups "
"behave exactly like capturing groups, and additionally associate a name with "
"a group.  The :ref:`match object <match-objects>` methods that deal with "
"capturing groups all accept either integers that refer to the group by "
"number or strings that contain the desired group's name.  Named groups are "
"still given numbers, so you can retrieve information about a group in two "
"ways::"
msgstr ""
"A sintaxe para um grupo nomeado é uma das extensões específicas do Python: "
"``(?P<name>...)``. *name* é, obviamente, o nome do grupo. Os grupos nomeados "
"comportam-se exatamente como grupos capturantes e, adicionalmente, associam "
"um nome a um grupo. Os métodos do :ref:`objeto de correspondência <match-"
"objects>` que lidam com grupos capturantes aceitam inteiros que se referem "
"ao grupo por número ou cadeias de caracteres que contêm o nome desejado do "
"grupo. Os grupos nomeados ainda recebem números, pelo que pode recuperar "
"informações sobre um grupo de duas formas::"

#: ../../howto/regex.rst:945
msgid ""
"Additionally, you can retrieve named groups as a dictionary with :meth:`~re."
"Match.groupdict`::"
msgstr ""
"Adicionalmente, pode recuperar grupos nomeados como um dicionário com :meth:"
"`~re.Match.groupdict`::"

#: ../../howto/regex.rst:952
msgid ""
"Named groups are handy because they let you use easily-remembered names, "
"instead of having to remember numbers.  Here's an example RE from the :mod:"
"`imaplib` module::"
msgstr ""

#: ../../howto/regex.rst:963
msgid ""
"It's obviously much easier to retrieve ``m.group('zonem')``, instead of "
"having to remember to retrieve group 9."
msgstr ""
"É obviamente muito mais fácil recuperar ``m.group('zonem')``, em vez de ter "
"de lembrar de recuperar o grupo 9."

#: ../../howto/regex.rst:966
msgid ""
"The syntax for backreferences in an expression such as ``(...)\\1`` refers "
"to the number of the group.  There's naturally a variant that uses the group "
"name instead of the number. This is another Python extension: ``(?P=name)`` "
"indicates that the contents of the group called *name* should again be "
"matched at the current point.  The regular expression for finding doubled "
"words, ``\\b(\\w+)\\s+\\1\\b`` can also be written as ``\\b(?"
"P<word>\\w+)\\s+(?P=word)\\b``::"
msgstr ""
"A sintaxe para referências retroativas numa expressão como ``(...)\\1`` "
"refere-se ao número do grupo. Existe naturalmente uma variante que usa o "
"nome do grupo em vez do número. Esta é outra extensão do Python: ``(?"
"P=name)`` indica que o conteúdo do grupo chamado *name* deve ser novamente "
"correspondido no ponto atual. A expressão regular para encontrar palavras "
"duplicadas, ``\\b(\\w+)\\s+\\1\\b`` também pode ser escrita como ``\\b(?"
"P<word>\\w+)\\s+(?P=word)\\b``::"

#: ../../howto/regex.rst:979
msgid "Lookahead Assertions"
msgstr "Asserções de Antevisão"

#: ../../howto/regex.rst:981
msgid ""
"Another zero-width assertion is the lookahead assertion.  Lookahead "
"assertions are available in both positive and negative form, and  look like "
"this:"
msgstr ""
"Outra asserção de largura zero é a asserção de antevisão. As asserções de "
"antevisão estão disponíveis tanto na forma positiva como negativa e têm este "
"aspeto:"

#: ../../howto/regex.rst:989
msgid "``(?=...)``"
msgstr "``(?=...)``"

#: ../../howto/regex.rst:985
msgid ""
"Positive lookahead assertion.  This succeeds if the contained regular "
"expression, represented here by ``...``, successfully matches at the current "
"location, and fails otherwise. But, once the contained expression has been "
"tried, the matching engine doesn't advance at all; the rest of the pattern "
"is tried right where the assertion started."
msgstr ""
"Asserção de antevisão positiva. Isto tem sucesso se a expressão regular "
"contida, representada aqui por ``...``, corresponder com sucesso à "
"localização atual, e falha caso contrário. No entanto, uma vez que a "
"expressão contida foi tentada, o motor de correspondência não avança; o "
"resto do padrão é tentado exatamente onde a asserção começou."

#: ../../howto/regex.rst:994
msgid "``(?!...)``"
msgstr "``(?!...)``"

#: ../../howto/regex.rst:992
msgid ""
"Negative lookahead assertion.  This is the opposite of the positive "
"assertion; it succeeds if the contained expression *doesn't* match at the "
"current position in the string."
msgstr ""
"Asserção de antevisão negativa. Isto é o oposto da asserção positiva; tem "
"sucesso se a expressão contida *não* corresponder à posição atual na cadeia "
"de caracteres."

#: ../../howto/regex.rst:996
msgid ""
"To make this concrete, let's look at a case where a lookahead is useful. "
"Consider a simple pattern to match a filename and split it apart into a base "
"name and an extension, separated by a ``.``.  For example, in ``news.rc``, "
"``news`` is the base name, and ``rc`` is the filename's extension."
msgstr ""
"Para tornar isto concreto, vamos analisar um caso em que uma antevisão é "
"útil. Considere um padrão simples para corresponder a um nome de ficheiro e "
"dividi-lo num nome base e numa extensão, separados por um ``.``. Por "
"exemplo, em ``news.rc``, ``news`` é o nome base e ``rc`` é a extensão do "
"nome do ficheiro."

#: ../../howto/regex.rst:1001
msgid "The pattern to match this is quite simple:"
msgstr "O padrão para corresponder a isto é bastante simples:"

#: ../../howto/regex.rst:1003
msgid "``.*[.].*$``"
msgstr "``.*[.].*$``"

#: ../../howto/regex.rst:1005
msgid ""
"Notice that the ``.`` needs to be treated specially because it's a "
"metacharacter, so it's inside a character class to only match that specific "
"character.  Also notice the trailing ``$``; this is added to ensure that all "
"the rest of the string must be included in the extension.  This regular "
"expression matches ``foo.bar`` and ``autoexec.bat`` and ``sendmail.cf`` and "
"``printers.conf``."
msgstr ""
"Note que o ``.`` precisa de ser tratado de forma especial porque é um "
"metacaractere, pelo que está dentro de uma classe de caracteres para "
"corresponder apenas a esse caractere específico. Note também o ``$`` final; "
"isto é adicionado para garantir que todo o resto da cadeia de caracteres "
"deve ser incluído na extensão. Esta expressão regular corresponde a ``foo."
"bar``, ``autoexec.bat``, ``sendmail.cf`` e ``printers.conf``."

#: ../../howto/regex.rst:1012
msgid ""
"Now, consider complicating the problem a bit; what if you want to match "
"filenames where the extension is not ``bat``? Some incorrect attempts:"
msgstr ""
"Agora, considere complicar um pouco o problema; e se quiser corresponder a "
"nomes de ficheiros em que a extensão não é ``bat``? Algumas tentativas "
"incorretas:"

#: ../../howto/regex.rst:1015
msgid ""
"``.*[.][^b].*$``  The first attempt above tries to exclude ``bat`` by "
"requiring that the first character of the extension is not a ``b``.  This is "
"wrong, because the pattern also doesn't match ``foo.bar``."
msgstr ""

#: ../../howto/regex.rst:1019
msgid "``.*[.]([^b]..|.[^a].|..[^t])$``"
msgstr "``.*[.]([^b]..|.[^a].|..[^t])$``"

#: ../../howto/regex.rst:1021
msgid ""
"The expression gets messier when you try to patch up the first solution by "
"requiring one of the following cases to match: the first character of the "
"extension isn't ``b``; the second character isn't ``a``; or the third "
"character isn't ``t``.  This accepts ``foo.bar`` and rejects ``autoexec."
"bat``, but it requires a three-letter extension and won't accept a filename "
"with a two-letter extension such as ``sendmail.cf``.  We'll complicate the "
"pattern again in an effort to fix it."
msgstr ""
"A expressão torna-se mais confusa quando tenta corrigir a primeira solução "
"exigindo que um dos seguintes casos corresponda: o primeiro caractere da "
"extensão não é ``b``; o segundo caractere não é ``a``; ou o terceiro "
"caractere não é ``t``. Isto aceita ``foo.bar`` e rejeita ``autoexec.bat``, "
"mas exige uma extensão de três letras e não aceitará um nome de ficheiro com "
"uma extensão de duas letras como ``sendmail.cf``. Vamos complicar o padrão "
"novamente num esforço para o corrigir."

#: ../../howto/regex.rst:1029
msgid "``.*[.]([^b].?.?|.[^a]?.?|..?[^t]?)$``"
msgstr "``.*[.]([^b].?.?|.[^a]?.?|..?[^t]?)$``"

#: ../../howto/regex.rst:1031
msgid ""
"In the third attempt, the second and third letters are all made optional in "
"order to allow matching extensions shorter than three characters, such as "
"``sendmail.cf``."
msgstr ""
"Na terceira tentativa, as segunda e terceira letras são todas tornadas "
"opcionais para permitir a correspondência de extensões mais curtas do que "
"três caracteres, como ``sendmail.cf``."

#: ../../howto/regex.rst:1035
msgid ""
"The pattern's getting really complicated now, which makes it hard to read "
"and understand.  Worse, if the problem changes and you want to exclude both "
"``bat`` and ``exe`` as extensions, the pattern would get even more "
"complicated and confusing."
msgstr ""
"O padrão está a ficar realmente complicado agora, o que torna difícil a sua "
"leitura e compreensão. Pior ainda, se o problema mudar e quiser excluir "
"tanto ``bat`` como ``exe`` como extensões, o padrão ficaria ainda mais "
"complicado e confuso."

#: ../../howto/regex.rst:1040
msgid "A negative lookahead cuts through all this confusion:"
msgstr "Uma antevisão negativa corta com toda esta confusão:"

#: ../../howto/regex.rst:1042
msgid ""
"``.*[.](?!bat$)[^.]*$``  The negative lookahead means: if the expression "
"``bat`` doesn't match at this point, try the rest of the pattern; if "
"``bat$`` does match, the whole pattern will fail.  The trailing ``$`` is "
"required to ensure that something like ``sample.batch``, where the extension "
"only starts with ``bat``, will be allowed.  The ``[^.]*`` makes sure that "
"the pattern works when there are multiple dots in the filename."
msgstr ""

#: ../../howto/regex.rst:1049
msgid ""
"Excluding another filename extension is now easy; simply add it as an "
"alternative inside the assertion.  The following pattern excludes filenames "
"that end in either ``bat`` or ``exe``:"
msgstr ""
"Excluir outra extensão de nome de ficheiro é agora fácil; basta adicioná-la "
"como uma alternativa dentro da asserção. O padrão seguinte exclui nomes de "
"ficheiros que terminam em ``bat`` ou ``exe``:"

#: ../../howto/regex.rst:1053
msgid "``.*[.](?!bat$|exe$)[^.]*$``"
msgstr "``.*[.](?!bat$|exe$)[^.]*$``"

#: ../../howto/regex.rst:1057
msgid "Modifying Strings"
msgstr "Modificação de Cadeias de Caracteres"

#: ../../howto/regex.rst:1059
msgid ""
"Up to this point, we've simply performed searches against a static string. "
"Regular expressions are also commonly used to modify strings in various "
"ways, using the following pattern methods:"
msgstr ""
"Até este ponto, simplesmente realizámos pesquisas numa cadeia de caracteres "
"estática. As expressões regulares também são comumente usadas para modificar "
"cadeias de caracteres de várias formas, usando os seguintes métodos de "
"padrão:"

#: ../../howto/regex.rst:1066
msgid "``split()``"
msgstr "``split()``"

#: ../../howto/regex.rst:1066
msgid "Split the string into a list, splitting it wherever the RE matches"
msgstr ""
"Divide a cadeia de caracteres numa lista, dividindo-a onde a RE corresponda"

#: ../../howto/regex.rst:1069
msgid "``sub()``"
msgstr "``sub()``"

#: ../../howto/regex.rst:1069
msgid ""
"Find all substrings where the RE matches, and replace them with a different "
"string"
msgstr ""
"Encontra todas as subcadeias de caracteres onde a RE corresponde e substitui-"
"as por uma cadeia de caracteres diferente"

#: ../../howto/regex.rst:1072
msgid "``subn()``"
msgstr "``subn()``"

#: ../../howto/regex.rst:1072
msgid ""
"Does the same thing as :meth:`!sub`,  but returns the new string and the "
"number of replacements"
msgstr ""
"Faz a mesma coisa que :meth:`!sub`, mas devolve a nova cadeia de caracteres "
"e o número de substituições"

#: ../../howto/regex.rst:1079
msgid "Splitting Strings"
msgstr "Divisão de Cadeias de Caracteres"

#: ../../howto/regex.rst:1081
msgid ""
"The :meth:`~re.Pattern.split` method of a pattern splits a string apart "
"wherever the RE matches, returning a list of the pieces. It's similar to "
"the :meth:`~str.split` method of strings but provides much more generality "
"in the delimiters that you can split by; string :meth:`!split` only supports "
"splitting by whitespace or by a fixed string.  As you'd expect, there's a "
"module-level :func:`re.split` function, too."
msgstr ""
"O método :meth:`~re.Pattern.split` de um padrão divide uma cadeia de "
"caracteres sempre que a RE corresponde, devolvendo uma lista das partes. É "
"semelhante ao método :meth:`~str.split` de cadeias de caracteres, mas "
"fornece muito mais generalidade nos delimitadores pelos quais pode dividir; "
"o :meth:`!split` de cadeias de caracteres apenas suporta a divisão por "
"espaços em branco ou por uma cadeia de caracteres fixa. Como seria de "
"esperar, também existe uma função :func:`re.split` a nível de módulo."

#: ../../howto/regex.rst:1092
msgid ""
"Split *string* by the matches of the regular expression.  If capturing "
"parentheses are used in the RE, then their contents will also be returned as "
"part of the resulting list.  If *maxsplit* is nonzero, at most *maxsplit* "
"splits are performed."
msgstr ""
"Divide a *cadeia de caracteres* pelas correspondências da expressão regular. "
"Se parênteses capturantes forem usados na RE, então o seu conteúdo também "
"será devolvido como parte da lista resultante. Se *maxsplit* não for zero, "
"no máximo *maxsplit* divisões são realizadas."

#: ../../howto/regex.rst:1097
msgid ""
"You can limit the number of splits made, by passing a value for *maxsplit*. "
"When *maxsplit* is nonzero, at most *maxsplit* splits will be made, and the "
"remainder of the string is returned as the final element of the list.  In "
"the following example, the delimiter is any sequence of non-alphanumeric "
"characters. ::"
msgstr ""
"Pode limitar o número de divisões feitas, passando um valor para *maxsplit*. "
"Quando *maxsplit* não é zero, no máximo *maxsplit* divisões serão feitas, e "
"o resto da cadeia de caracteres é devolvido como o último elemento da lista. "
"No exemplo seguinte, o delimitador é qualquer sequência de caracteres não "
"alfanuméricos. ::"

#: ../../howto/regex.rst:1109
msgid ""
"Sometimes you're not only interested in what the text between delimiters is, "
"but also need to know what the delimiter was.  If capturing parentheses are "
"used in the RE, then their values are also returned as part of the list.  "
"Compare the following calls::"
msgstr ""
"Às vezes, não está apenas interessado no texto entre delimitadores, mas "
"também precisa de saber qual era o delimitador. Se parênteses capturantes "
"forem usados na RE, então os seus valores também são devolvidos como parte "
"da lista. Compare as seguintes chamadas::"

#: ../../howto/regex.rst:1121
msgid ""
"The module-level function :func:`re.split` adds the RE to be used as the "
"first argument, but is otherwise the same.   ::"
msgstr ""
"A função a nível de módulo :func:`re.split` adiciona a RE a ser usada como o "
"primeiro argumento, mas é de resto a mesma. ::"

#: ../../howto/regex.rst:1133
msgid "Search and Replace"
msgstr "Pesquisa e Substituição"

#: ../../howto/regex.rst:1135
msgid ""
"Another common task is to find all the matches for a pattern, and replace "
"them with a different string.  The :meth:`~re.Pattern.sub` method takes a "
"replacement value, which can be either a string or a function, and the "
"string to be processed."
msgstr ""
"Outra tarefa comum é encontrar todas as correspondências para um padrão e "
"substituí-las por uma cadeia de caracteres diferente. O método :meth:`~re."
"Pattern.sub` recebe um valor de substituição, que pode ser uma cadeia de "
"caracteres ou uma função, e a cadeia de caracteres a ser processada."

#: ../../howto/regex.rst:1142
msgid ""
"Returns the string obtained by replacing the leftmost non-overlapping "
"occurrences of the RE in *string* by the replacement *replacement*.  If the "
"pattern isn't found, *string* is returned unchanged."
msgstr ""
"Devolve a cadeia de caracteres obtida substituindo as ocorrências não "
"sobrepostas mais à esquerda da RE em *cadeia de caracteres* pela "
"substituição *substituição*. Se o padrão não for encontrado, *cadeia de "
"caracteres* é devolvida inalterada."

#: ../../howto/regex.rst:1146
msgid ""
"The optional argument *count* is the maximum number of pattern occurrences "
"to be replaced; *count* must be a non-negative integer.  The default value "
"of 0 means to replace all occurrences."
msgstr ""
"O argumento opcional *contagem* é o número máximo de ocorrências do padrão a "
"serem substituídas; *contagem* deve ser um inteiro não negativo. O valor "
"predefinido de 0 significa substituir todas as ocorrências."

#: ../../howto/regex.rst:1150
msgid ""
"Here's a simple example of using the :meth:`~re.Pattern.sub` method.  It "
"replaces colour names with the word ``colour``::"
msgstr ""
"Aqui está um exemplo simples de utilização do método :meth:`~re.Pattern."
"sub`. Substitui nomes de cores pela palavra ``colour``::"

#: ../../howto/regex.rst:1159
msgid ""
"The :meth:`~re.Pattern.subn` method does the same work, but returns a 2-"
"tuple containing the new string value and the number of replacements  that "
"were performed::"
msgstr ""
"O método :meth:`~re.Pattern.subn` faz o mesmo trabalho, mas devolve um tuplo "
"de 2 elementos contendo o novo valor da cadeia de caracteres e o número de "
"substituições que foram realizadas::"

#: ../../howto/regex.rst:1168
msgid ""
"Empty matches are replaced only when they're not adjacent to a previous "
"empty match. ::"
msgstr ""
"As correspondências vazias são substituídas apenas quando não são adjacentes "
"a uma correspondência vazia anterior. ::"

#: ../../howto/regex.rst:1175
msgid ""
"If *replacement* is a string, any backslash escapes in it are processed.  "
"That is, ``\\n`` is converted to a single newline character, ``\\r`` is "
"converted to a carriage return, and so forth. Unknown escapes such as "
"``\\&`` are left alone. Backreferences, such as ``\\6``, are replaced with "
"the substring matched by the corresponding group in the RE.  This lets you "
"incorporate portions of the original text in the resulting replacement "
"string."
msgstr ""
"Se *substituição* for uma cadeia de caracteres, quaisquer escapes de barra "
"invertida nela são processados. Isto é, ``\\n`` é convertido num único "
"caractere de nova linha, ``\\r`` é convertido num retorno de carro, e assim "
"por diante. Escapes desconhecidos como ``\\&`` são deixados como estão. "
"Referências retroativas, como ``\\6``, são substituídas pela subcadeia de "
"caracteres correspondida pelo grupo correspondente na RE. Isto permite-lhe "
"incorporar porções do texto original na cadeia de caracteres de substituição "
"resultante."

#: ../../howto/regex.rst:1182
msgid ""
"This example matches the word ``section`` followed by a string enclosed in "
"``{``, ``}``, and changes ``section`` to ``subsection``::"
msgstr ""
"Este exemplo corresponde à palavra ``section`` seguida de uma cadeia de "
"caracteres delimitada por ``{``, ``}``, e altera ``section`` para "
"``subsection``::"

#: ../../howto/regex.rst:1189
msgid ""
"There's also a syntax for referring to named groups as defined by the ``(?"
"P<name>...)`` syntax.  ``\\g<name>`` will use the substring matched by the "
"group named ``name``, and  ``\\g<number>``  uses the corresponding group "
"number. ``\\g<2>`` is therefore equivalent to ``\\2``,  but isn't ambiguous "
"in a replacement string such as ``\\g<2>0``.  (``\\20`` would be interpreted "
"as a reference to group 20, not a reference to group 2 followed by the "
"literal character ``'0'``.)  The following substitutions are all equivalent, "
"but use all three variations of the replacement string. ::"
msgstr ""
"Também existe uma sintaxe para referenciar grupos nomeados como definidos "
"pela sintaxe ``(?P<name>...)``. ``\\g<name>`` usará a subcadeia de "
"caracteres correspondida pelo grupo nomeado ``name``, e ``\\g<number>`` usa "
"o número do grupo correspondente. ``\\g<2>`` é, portanto, equivalente a "
"``\\2``, mas não é ambíguo numa cadeia de caracteres de substituição como "
"``\\g<2>0``. (``\\20`` seria interpretado como uma referência ao grupo 20, "
"não como uma referência ao grupo 2 seguida do caractere literal ``'0'``.) As "
"seguintes substituições são todas equivalentes, mas usam as três variações "
"da cadeia de caracteres de substituição. ::"

#: ../../howto/regex.rst:1206
msgid ""
"*replacement* can also be a function, which gives you even more control.  If "
"*replacement* is a function, the function is called for every non-"
"overlapping occurrence of *pattern*.  On each call, the function is passed "
"a :ref:`match object <match-objects>` argument for the match and can use "
"this information to compute the desired replacement string and return it."
msgstr ""

#: ../../howto/regex.rst:1212
msgid ""
"In the following example, the replacement function translates decimals into "
"hexadecimal::"
msgstr ""
"No exemplo seguinte, a função de substituição traduz decimais para "
"hexadecimal::"

#: ../../howto/regex.rst:1224
msgid ""
"When using the module-level :func:`re.sub` function, the pattern is passed "
"as the first argument.  The pattern may be provided as an object or as a "
"string; if you need to specify regular expression flags, you must either use "
"a pattern object as the first parameter, or use embedded modifiers in the "
"pattern string, e.g. ``sub(\"(?i)b+\", \"x\", \"bbbb BBBB\")`` returns ``'x "
"x'``."
msgstr ""
"Ao usar a função a nível de módulo :func:`re.sub`, o padrão é passado como o "
"primeiro argumento. O padrão pode ser fornecido como um objeto ou como uma "
"cadeia de caracteres; se precisar de especificar *flags* de expressão "
"regular, deve usar um objeto de padrão como o primeiro parâmetro ou usar "
"modificadores incorporados na cadeia de caracteres do padrão, por exemplo, "
"``sub(\"(?i)b+\", \"x\", \"bbbb BBBB\")`` devolve ``'x x'``."

#: ../../howto/regex.rst:1232
msgid "Common Problems"
msgstr "Problemas Comuns"

#: ../../howto/regex.rst:1234
msgid ""
"Regular expressions are a powerful tool for some applications, but in some "
"ways their behaviour isn't intuitive and at times they don't behave the way "
"you may expect them to.  This section will point out some of the most common "
"pitfalls."
msgstr ""
"As expressões regulares são uma ferramenta poderosa para algumas aplicações, "
"mas, de certa forma, o seu comportamento não é intuitivo e, por vezes, não "
"se comportam da maneira que pode esperar. Esta secção irá apontar alguns dos "
"problemas mais comuns."

#: ../../howto/regex.rst:1240
msgid "Use String Methods"
msgstr "Utilizar Métodos de Cadeias de Caracteres"

#: ../../howto/regex.rst:1242
msgid ""
"Sometimes using the :mod:`re` module is a mistake.  If you're matching a "
"fixed string, or a single character class, and you're not using any :mod:"
"`re` features such as the :const:`~re.IGNORECASE` flag, then the full power "
"of regular expressions may not be required. Strings have several methods for "
"performing operations with fixed strings and they're usually much faster, "
"because the implementation is a single small C loop that's been optimized "
"for the purpose, instead of the large, more generalized regular expression "
"engine."
msgstr ""
"Às vezes, usar o módulo :mod:`re` é um erro. Se estiver a corresponder a uma "
"cadeia de caracteres fixa ou a uma única classe de caracteres, e não estiver "
"a usar quaisquer funcionalidades do :mod:`re`, como a *flag* :const:`~re."
"IGNORECASE`, então todo o poder das expressões regulares pode não ser "
"necessário. As cadeias de caracteres têm vários métodos para realizar "
"operações com cadeias de caracteres fixas e são geralmente muito mais "
"rápidas, porque a implementação é um pequeno ciclo em C que foi otimizado "
"para esse fim, em vez do grande motor de expressões regulares mais "
"generalizado."

#: ../../howto/regex.rst:1250
msgid ""
"One example might be replacing a single fixed string with another one; for "
"example, you might replace ``word`` with ``deed``.  :func:`re.sub` seems "
"like the function to use for this, but consider the :meth:`~str.replace` "
"method.  Note that :meth:`!replace` will also replace ``word`` inside words, "
"turning ``swordfish`` into ``sdeedfish``, but the  naive RE ``word`` would "
"have done that, too.  (To avoid performing the substitution on parts of "
"words, the pattern would have to be ``\\bword\\b``, in order to require that "
"``word`` have a word boundary on either side.  This takes the job beyond  :"
"meth:`!replace`'s abilities.)"
msgstr ""
"Um exemplo pode ser substituir uma única cadeia de caracteres fixa por "
"outra; por exemplo, pode substituir ``word`` por ``deed``. A função :func:"
"`re.sub` parece ser a função a usar para isto, mas considere o método :meth:"
"`~str.replace`. Note que :meth:`!replace` também substituirá ``word`` dentro "
"de palavras, transformando ``swordfish`` em ``sdeedfish``, mas a RE ingénua "
"``word`` também o faria. (Para evitar realizar a substituição em partes de "
"palavras, o padrão teria de ser ``\\bword\\b``, para exigir que ``word`` "
"tenha um limite de palavra em ambos os lados. Isto vai além das capacidades "
"do :meth:`!replace`.)"

#: ../../howto/regex.rst:1259
msgid ""
"Another common task is deleting every occurrence of a single character from "
"a string or replacing it with another single character.  You might do this "
"with something like ``re.sub('\\n', ' ', S)``, but :meth:`~str.translate` is "
"capable of doing both tasks and will be faster than any regular expression "
"operation can be."
msgstr ""
"Outra tarefa comum é apagar todas as ocorrências de um único caractere de "
"uma cadeia de caracteres ou substituí-lo por outro caractere único. Pode "
"fazer isto com algo como ``re.sub('\\n', ' ', S)``, mas :meth:`~str."
"translate` é capaz de realizar ambas as tarefas e será mais rápido do que "
"qualquer operação de expressão regular."

#: ../../howto/regex.rst:1265
msgid ""
"In short, before turning to the :mod:`re` module, consider whether your "
"problem can be solved with a faster and simpler string method."
msgstr ""
"Em resumo, antes de recorrer ao módulo :mod:`re`, considere se o seu "
"problema pode ser resolvido com um método de cadeias de caracteres mais "
"rápido e simples."

#: ../../howto/regex.rst:1270
msgid "match() versus search()"
msgstr "match() versus search()"

#: ../../howto/regex.rst:1272
msgid ""
"The :func:`~re.match` function only checks if the RE matches at the "
"beginning of the string while :func:`~re.search` will scan forward through "
"the string for a match. It's important to keep this distinction in mind.  "
"Remember,  :func:`!match` will only report a successful match which will "
"start at 0; if the match wouldn't start at zero,  :func:`!match` will *not* "
"report it. ::"
msgstr ""
"A função :func:`~re.match` verifica apenas se a RE corresponde no início da "
"cadeia de caracteres, enquanto :func:`~re.search` percorrerá a cadeia de "
"caracteres em busca de uma correspondência. É importante manter esta "
"distinção em mente. Lembre-se, :func:`!match` apenas reportará uma "
"correspondência bem-sucedida que começará em 0; se a correspondência não "
"começar em zero, :func:`!match` *não* a reportará. ::"

#: ../../howto/regex.rst:1283
msgid ""
"On the other hand, :func:`~re.search` will scan forward through the string, "
"reporting the first match it finds. ::"
msgstr ""
"Por outro lado, :func:`~re.search` percorrerá a cadeia de caracteres, "
"reportando a primeira correspondência que encontrar. ::"

#: ../../howto/regex.rst:1291
msgid ""
"Sometimes you'll be tempted to keep using :func:`re.match`, and just add ``."
"*`` to the front of your RE.  Resist this temptation and use :func:`re."
"search` instead.  The regular expression compiler does some analysis of REs "
"in order to speed up the process of looking for a match.  One such analysis "
"figures out what the first character of a match must be; for example, a "
"pattern starting with ``Crow`` must match starting with a ``'C'``.  The "
"analysis lets the engine quickly scan through the string looking for the "
"starting character, only trying the full match if a ``'C'`` is found."
msgstr ""
"Às vezes, será tentado a continuar a usar :func:`re.match` e simplesmente "
"adicionar ``.*`` ao início da sua RE. Resista a esta tentação e use :func:"
"`re.search` em vez disso. O compilador de expressões regulares faz alguma "
"análise das REs para acelerar o processo de procura de uma correspondência. "
"Uma dessas análises descobre qual deve ser o primeiro caractere de uma "
"correspondência; por exemplo, um padrão que comece com ``Crow`` deve "
"corresponder começando com um ``'C'``. A análise permite que o motor "
"percorra rapidamente a cadeia de caracteres à procura do caractere de "
"início, tentando a correspondência completa apenas se um ``'C'`` for "
"encontrado."

#: ../../howto/regex.rst:1300
msgid ""
"Adding ``.*`` defeats this optimization, requiring scanning to the end of "
"the string and then backtracking to find a match for the rest of the RE.  "
"Use :func:`re.search` instead."
msgstr ""
"Adicionar ``.*`` anula esta otimização, exigindo a varredura até ao final da "
"cadeia de caracteres e, em seguida, retrocesso para encontrar uma "
"correspondência para o resto da RE. Use :func:`re.search` em vez disso."

#: ../../howto/regex.rst:1306
msgid "Greedy versus Non-Greedy"
msgstr "Ganancioso versus Não-Ganancioso"

#: ../../howto/regex.rst:1308
msgid ""
"When repeating a regular expression, as in ``a*``, the resulting action is "
"to consume as much of the pattern as possible.  This fact often bites you "
"when you're trying to match a pair of balanced delimiters, such as the angle "
"brackets surrounding an HTML tag.  The naive pattern for matching a single "
"HTML tag doesn't work because of the greedy nature of ``.*``. ::"
msgstr ""
"Ao repetir uma expressão regular, como em ``a*``, a ação resultante é "
"consumir o máximo possível do padrão. Este facto muitas vezes causa "
"problemas quando está a tentar corresponder a um par de delimitadores "
"equilibrados, como as chavetas que rodeiam uma etiqueta HTML. O padrão "
"ingénuo para corresponder a uma única etiqueta HTML não funciona devido à "
"natureza gananciosa de ``.*``. ::"

#: ../../howto/regex.rst:1322
msgid ""
"The RE matches the ``'<'`` in ``'<html>'``, and the ``.*`` consumes the rest "
"of the string.  There's still more left in the RE, though, and the ``>`` "
"can't match at the end of the string, so the regular expression engine has "
"to backtrack character by character until it finds a match for the ``>``.   "
"The final match extends from the ``'<'`` in ``'<html>'`` to the ``'>'`` in "
"``'</title>'``, which isn't what you want."
msgstr ""
"A RE corresponde ao ``'<'`` em ``'<html>'``, e o ``.*`` consome o resto da "
"cadeia de caracteres. No entanto, ainda há mais na RE, e o ``>`` não pode "
"corresponder ao final da cadeia de caracteres, pelo que o motor de "
"expressões regulares tem de retroceder caractere a caractere até encontrar "
"uma correspondência para o ``>``. A correspondência final estende-se do "
"``'<'`` em ``'<html>'`` ao ``'>'`` em ``'</title>'``, o que não é o que "
"pretende."

#: ../../howto/regex.rst:1329
msgid ""
"In this case, the solution is to use the non-greedy qualifiers ``*?``, ``+?"
"``, ``??``, or ``{m,n}?``, which match as *little* text as possible.  In the "
"above example, the ``'>'`` is tried immediately after the first ``'<'`` "
"matches, and when it fails, the engine advances a character at a time, "
"retrying the ``'>'`` at every step.  This produces just the right result::"
msgstr ""

#: ../../howto/regex.rst:1338
msgid ""
"(Note that parsing HTML or XML with regular expressions is painful. Quick-"
"and-dirty patterns will handle common cases, but HTML and XML have special "
"cases that will break the obvious regular expression; by the time you've "
"written a regular expression that handles all of the possible cases, the "
"patterns will be *very* complicated.  Use an HTML or XML parser module for "
"such tasks.)"
msgstr ""

#: ../../howto/regex.rst:1346
msgid "Using re.VERBOSE"
msgstr "A Utilizar re.VERBOSE"

#: ../../howto/regex.rst:1348
msgid ""
"By now you've probably noticed that regular expressions are a very compact "
"notation, but they're not terribly readable.  REs of moderate complexity can "
"become lengthy collections of backslashes, parentheses, and metacharacters, "
"making them difficult to read and understand."
msgstr ""
"Até agora, provavelmente já notou que as expressões regulares são uma "
"notação muito compacta, mas não são particularmente legíveis. REs de "
"complexidade moderada podem tornar-se longas coleções de barras invertidas, "
"parênteses e metacaracteres, tornando-as difíceis de ler e compreender."

#: ../../howto/regex.rst:1353
msgid ""
"For such REs, specifying the :const:`re.VERBOSE` flag when compiling the "
"regular expression can be helpful, because it allows you to format the "
"regular expression more clearly."
msgstr ""
"Para tais REs, especificar a *flag* :const:`re.VERBOSE` ao compilar a "
"expressão regular pode ser útil, porque permite formatar a expressão regular "
"de forma mais clara."

#: ../../howto/regex.rst:1357
msgid ""
"The ``re.VERBOSE`` flag has several effects.  Whitespace in the regular "
"expression that *isn't* inside a character class is ignored.  This means "
"that an expression such as ``dog | cat`` is equivalent to the less readable "
"``dog|cat``, but ``[a b]`` will still match the characters ``'a'``, ``'b'``, "
"or a space.  In addition, you can also put comments inside a RE; comments "
"extend from a ``#`` character to the next newline.  When used with triple-"
"quoted strings, this enables REs to be formatted more neatly::"
msgstr ""

#: ../../howto/regex.rst:1374
msgid "This is far more readable than::"
msgstr "Isto é muito mais legível do que::"

#: ../../howto/regex.rst:1380
msgid "Feedback"
msgstr "Feedback"

#: ../../howto/regex.rst:1382
msgid ""
"Regular expressions are a complicated topic.  Did this document help you "
"understand them?  Were there parts that were unclear, or Problems you "
"encountered that weren't covered here?  If so, please send suggestions for "
"improvements to the author."
msgstr ""
"As expressões regulares são um tópico complicado. Este documento ajudou-o a "
"compreendê-las? Houve partes que não estavam claras ou problemas que "
"encontrou que não foram abordados aqui? Se sim, por favor envie sugestões de "
"melhorias para o autor."

#: ../../howto/regex.rst:1387
msgid ""
"The most complete book on regular expressions is almost certainly Jeffrey "
"Friedl's Mastering Regular Expressions, published by O'Reilly.  "
"Unfortunately, it exclusively concentrates on Perl and Java's flavours of "
"regular expressions, and doesn't contain any Python material at all, so it "
"won't be useful as a reference for programming in Python.  (The first "
"edition covered Python's now-removed :mod:`!regex` module, which won't help "
"you much.)  Consider checking it out from your library."
msgstr ""
"O livro mais completo sobre expressões regulares é quase certamente "
"Mastering Regular Expressions de Jeffrey Friedl, publicado pela O'Reilly. "
"Infelizmente, concentra-se exclusivamente nas variantes de expressões "
"regulares do Perl e do Java, e não contém qualquer material sobre Python, "
"pelo que não será útil como referência para programação em Python. (A "
"primeira edição cobria o módulo :mod:`!regex` do Python, agora removido, que "
"não o ajudará muito.) Considere requisitá-lo na sua biblioteca."
