# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-09 16:33+0000\n"
"PO-Revision-Date: 2025-09-22 16:51+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../whatsnew/3.1.rst:3
msgid "What's New In Python 3.1"
msgstr "Novidades no Python 3.1"

#: ../../whatsnew/3.1.rst:0
msgid "Author"
msgstr "Autor"

#: ../../whatsnew/3.1.rst:5
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../whatsnew/3.1.rst:49
msgid ""
"This article explains the new features in Python 3.1, compared to 3.0. "
"Python 3.1 was released on June 27, 2009."
msgstr ""

#: ../../whatsnew/3.1.rst:54
msgid "PEP 372: Ordered Dictionaries"
msgstr "PEP 372: Dicionários Ordenados"

#: ../../whatsnew/3.1.rst:56
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order. "
"Over the years, a number of authors have written alternative implementations "
"that remember the order that the keys were originally inserted.  Based on "
"the experiences from those implementations, a new :class:`collections."
"OrderedDict` class has been introduced."
msgstr ""
"Os dicionários Python normais iteram sobre pares chave/valor por uma ordem "
"arbitrária. Ao longo dos anos, vários autores escreveram implementações "
"alternativas que recordam a ordem pela qual as chaves foram originalmente "
"inseridas. Com base nas experiências dessas implementações, foi introduzida "
"uma nova classe :class:`collections.OrderedDict`."

#: ../../whatsnew/3.1.rst:62
msgid ""
"The OrderedDict API is substantially the same as regular dictionaries but "
"will iterate over keys and values in a guaranteed order depending on when a "
"key was first inserted.  If a new entry overwrites an existing entry, the "
"original insertion position is left unchanged.  Deleting an entry and "
"reinserting it will move it to the end."
msgstr ""
"A API do OrderedDict é substancialmente a mesma que os dicionários normais, "
"mas irá iterar sobre chaves e valores numa ordem garantida, dependendo de "
"quando uma chave foi inserida pela primeira vez. Se uma nova entrada "
"sobrescrever uma entrada existente, a posição de inserção original permanece "
"inalterada. Apagar uma entrada e reinseri-la moverá a entrada para o final."

#: ../../whatsnew/3.1.rst:68
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules.  The :mod:`configparser` module uses them by default.  This lets "
"configuration files be read, modified, and then written back in their "
"original order.  The *_asdict()* method for :func:`collections.namedtuple` "
"now returns an ordered dictionary with the values appearing in the same "
"order as the underlying tuple indices.  The :mod:`json` module is being "
"built-out with an *object_pairs_hook* to allow OrderedDicts to be built by "
"the decoder. Support was also added for third-party tools like `PyYAML "
"<https://pyyaml.org/>`_."
msgstr ""
"A biblioteca padrão agora suporta o uso de dicionários ordenados em vários "
"módulos. O módulo :mod:`configparser` usa-os por predefinição. Isto permite "
"que os ficheiros de configuração sejam lidos, modificados e depois escritos "
"de volta na sua ordem original. O método *_asdict()* para :func:`collections."
"namedtuple` agora devolve um dicionário ordenado com os valores a aparecerem "
"na mesma ordem que os índices da tupla subjacente. O módulo :mod:`json` está "
"a ser construído com um *object_pairs_hook* para permitir que os "
"OrderedDicts sejam construídos pelo descodificador. O suporte também foi "
"adicionado para ferramentas de terceiros como `PyYAML <https://pyyaml.org/"
">`_."

#: ../../whatsnew/3.1.rst:80
msgid ":pep:`372` - Ordered Dictionaries"
msgstr ":pep:`372` - Dicionários Ordenados"

#: ../../whatsnew/3.1.rst:80
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written "
"by Raymond Hettinger."
msgstr ""
"PEP escrita por Armin Ronacher e Raymond Hettinger. Implementação escrita "
"por Raymond Hettinger."

#: ../../whatsnew/3.1.rst:83
msgid ""
"Since an ordered dictionary remembers its insertion order, it can be used in "
"conjunction with sorting to make a sorted dictionary::"
msgstr ""
"Uma vez que um dicionário ordenado recorda a sua ordem de inserção, pode ser "
"usado em conjunto com a ordenação para criar um dicionário ordenado::"

#: ../../whatsnew/3.1.rst:101
msgid ""
"The new sorted dictionaries maintain their sort order when entries are "
"deleted.  But when new keys are added, the keys are appended to the end and "
"the sort is not maintained."
msgstr ""
"Os novos dicionários ordenados mantêm a sua ordem de ordenação quando as "
"entradas são apagadas. Mas quando novas chaves são adicionadas, as chaves "
"são anexadas ao final e a ordenação não é mantida."

#: ../../whatsnew/3.1.rst:107
msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr "PEP 378: Especificador de Formato para Separador de Milhares"

#: ../../whatsnew/3.1.rst:109
msgid ""
"The built-in :func:`format` function and the :meth:`str.format` method use a "
"mini-language that now includes a simple, non-locale aware way to format a "
"number with a thousands separator.  That provides a way to humanize a "
"program's output, improving its professional appearance and readability::"
msgstr ""
"A função integrada :func:`format` e o método :meth:`str.format` usam uma "
"mini-linguagem que agora inclui uma forma simples, não dependente da "
"localização, de formatar um número com um separador de milhares. Isto "
"fornece uma forma de humanizar a saída de um programa, melhorando a sua "
"aparência profissional e legibilidade::"

#: ../../whatsnew/3.1.rst:123
msgid ""
"The supported types are :class:`int`, :class:`float`, :class:`complex` and :"
"class:`decimal.Decimal`."
msgstr ""
"Os tipos suportados são :class:`int`, :class:`float`, :class:`complex` e :"
"class:`decimal.Decimal`."

#: ../../whatsnew/3.1.rst:126
msgid ""
"Discussions are underway about how to specify alternative separators like "
"dots, spaces, apostrophes, or underscores.  Locale-aware applications should "
"use the existing *n* format specifier which already has some support for "
"thousands separators."
msgstr ""
"Estão em curso discussões sobre como especificar separadores alternativos "
"como pontos, espaços, apóstrofos ou sublinhados. Aplicações com consciência "
"de localização devem usar o especificador de formato *n* existente, que já "
"tem algum suporte para separadores de milhares."

#: ../../whatsnew/3.1.rst:134
msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ":pep:`378` - Especificador de Formato para Separador de Milhares"

#: ../../whatsnew/3.1.rst:134
msgid ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."
msgstr ""
"PEP escrita por Raymond Hettinger e implementada por Eric Smith e Mark "
"Dickinson."

#: ../../whatsnew/3.1.rst:139
msgid "Other Language Changes"
msgstr "Outras Alterações à Linguagem"

#: ../../whatsnew/3.1.rst:141
msgid "Some smaller changes made to the core Python language are:"
msgstr "Algumas alterações menores feitas à linguagem principal do Python são:"

#: ../../whatsnew/3.1.rst:143
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory/"
"zipfile is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu; revised patch by Phillip J. Eby "
"and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
"Diretórios e arquivos zip que contenham um ficheiro :file:`__main__.py` "
"agora podem ser executados diretamente passando o seu nome ao interpretador. "
"O diretório/arquivo zip é automaticamente inserido como a primeira entrada "
"em sys.path. (Sugestão e patch inicial de Andy Chu; patch revisto por "
"Phillip J. Eby e Nick Coghlan; :issue:`1739468`.)"

#: ../../whatsnew/3.1.rst:149
msgid ""
"The :func:`int` type gained a ``bit_length`` method that returns the number "
"of bits necessary to represent its argument in binary::"
msgstr ""
"O tipo :func:`int` ganhou um método ``bit_length`` que devolve o número de "
"bits necessários para representar o seu argumento em binário::"

#: ../../whatsnew/3.1.rst:163
msgid ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and "
"Mark Dickinson; :issue:`3439`.)"
msgstr ""
"(Contribuído por Fredrik Johansson, Victor Stinner, Raymond Hettinger e Mark "
"Dickinson; :issue:`3439`.)"

#: ../../whatsnew/3.1.rst:166
msgid ""
"The fields in :func:`format` strings can now be automatically numbered::"
msgstr ""
"Os campos nas cadeias de caracteres :func:`format` agora podem ser "
"automaticamente numerados::"

#: ../../whatsnew/3.1.rst:172
msgid ""
"Formerly, the string would have required numbered fields such as: ``'Sir {0} "
"of {1}'``."
msgstr ""
"Anteriormente, a cadeia de caracteres teria exigido campos numerados como: "
"``'Sir {0} of {1}'``."

#: ../../whatsnew/3.1.rst:175
msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr "(Contribuído por Eric Smith; :issue:`5237`.)"

#: ../../whatsnew/3.1.rst:177
msgid ""
"The :func:`!string.maketrans` function is deprecated and is replaced by new "
"static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`. "
"This change solves the confusion around which types were supported by the :"
"mod:`string` module. Now, :class:`str`, :class:`bytes`, and :class:"
"`bytearray` each have their own **maketrans** and **translate** methods with "
"intermediate translation tables of the appropriate type."
msgstr ""
"A função :func:`!string.maketrans` está obsoleta e é substituída por novos "
"métodos estáticos, :meth:`bytes.maketrans` e :meth:`bytearray.maketrans`. "
"Esta alteração resolve a confusão em torno dos tipos suportados pelo módulo :"
"mod:`string`. Agora, :class:`str`, :class:`bytes` e :class:`bytearray` têm "
"cada um os seus próprios métodos **maketrans** e **translate** com tabelas "
"de tradução intermédias do tipo apropriado."

#: ../../whatsnew/3.1.rst:184
msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr "(Contribuído por Georg Brandl; :issue:`5675`.)"

#: ../../whatsnew/3.1.rst:186
msgid ""
"The syntax of the :keyword:`with` statement now allows multiple context "
"managers in a single statement::"
msgstr ""
"A sintaxe da instrução :keyword:`with` agora permite vários gestores de "
"contexto numa única instrução::"

#: ../../whatsnew/3.1.rst:194
msgid ""
"With the new syntax, the :func:`!contextlib.nested` function is no longer "
"needed and is now deprecated."
msgstr ""
"Com a nova sintaxe, a função :func:`!contextlib.nested` já não é necessária "
"e está agora obsoleta."

#: ../../whatsnew/3.1.rst:197
msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"
msgstr ""
"(Contribuído por Georg Brandl e Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"

#: ../../whatsnew/3.1.rst:200
msgid ""
"``round(x, n)`` now returns an integer if *x* is an integer. Previously it "
"returned a float::"
msgstr ""
"``round(x, n)`` agora devolve um inteiro se *x* for um inteiro. "
"Anteriormente devolvia um float::"

#: ../../whatsnew/3.1.rst:206
msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr "(Contribuído por Mark Dickinson; :issue:`4707`.)"

#: ../../whatsnew/3.1.rst:208
msgid ""
"Python now uses David Gay's algorithm for finding the shortest floating "
"point representation that doesn't change its value.  This should help "
"mitigate some of the confusion surrounding binary floating point numbers."
msgstr ""

#: ../../whatsnew/3.1.rst:213
msgid ""
"The significance is easily seen with a number like ``1.1`` which does not "
"have an exact equivalent in binary floating point.  Since there is no exact "
"equivalent, an expression like ``float('1.1')`` evaluates to the nearest "
"representable value which is ``0x1.199999999999ap+0`` in hex or "
"``1.100000000000000088817841970012523233890533447265625`` in decimal. That "
"nearest value was and still is used in subsequent floating point "
"calculations."
msgstr ""

#: ../../whatsnew/3.1.rst:221
msgid ""
"What is new is how the number gets displayed.  Formerly, Python used a "
"simple approach.  The value of ``repr(1.1)`` was computed as ``format(1.1, "
"'.17g')`` which evaluated to ``'1.1000000000000001'``. The advantage of "
"using 17 digits was that it relied on IEEE-754 guarantees to assure that "
"``eval(repr(1.1))`` would round-trip exactly to its original value.  The "
"disadvantage is that many people found the output to be confusing (mistaking "
"intrinsic limitations of binary floating point representation as being a "
"problem with Python itself)."
msgstr ""

#: ../../whatsnew/3.1.rst:230
msgid ""
"The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. "
"Effectively, it searches all equivalent string representations (ones that "
"get stored with the same underlying float value) and returns the shortest "
"representation."
msgstr ""
"O novo algoritmo para ``repr(1.1)`` é mais inteligente e devolve ``'1.1'``. "
"Efetivamente, pesquisa todas as representações de cadeias de caracteres "
"equivalentes (aquelas que são armazenadas com o mesmo valor de ponto "
"flutuante subjacente) e devolve a representação mais curta."

#: ../../whatsnew/3.1.rst:235
msgid ""
"The new algorithm tends to emit cleaner representations when possible, but "
"it does not change the underlying values.  So, it is still the case that "
"``1.1 + 2.2 != 3.3`` even though the representations may suggest otherwise."
msgstr ""
"O novo algoritmo tende a emitir representações mais limpas quando possível, "
"mas não altera os valores subjacentes. Portanto, ainda é o caso que ``1.1 + "
"2.2 != 3.3`` mesmo que as representações possam sugerir o contrário."

#: ../../whatsnew/3.1.rst:239
msgid ""
"The new algorithm depends on certain features in the underlying floating "
"point implementation.  If the required features are not found, the old "
"algorithm will continue to be used.  Also, the text pickle protocols assure "
"cross-platform portability by using the old algorithm."
msgstr ""

#: ../../whatsnew/3.1.rst:244
msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr "(Contribuído por Eric Smith e Mark Dickinson; :issue:`1580`)"

#: ../../whatsnew/3.1.rst:247
msgid "New, Improved, and Deprecated Modules"
msgstr "Módulos Novos, Melhorados e Descontinuados"

#: ../../whatsnew/3.1.rst:249
msgid ""
"Added a :class:`collections.Counter` class to support convenient counting of "
"unique items in a sequence or iterable::"
msgstr ""
"Adicionada uma classe :class:`collections.Counter` para suportar a contagem "
"conveniente de itens únicos numa sequência ou iterável::"

#: ../../whatsnew/3.1.rst:255
msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr "(Contribuído por Raymond Hettinger; :issue:`1696199`.)"

#: ../../whatsnew/3.1.rst:257
msgid ""
"Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget "
"set. The basic idea of ttk is to separate, to the extent possible, the code "
"implementing a widget's behavior from the code implementing its appearance."
msgstr ""
"Adicionado um novo módulo, :mod:`tkinter.ttk`, para acesso ao conjunto de "
"widgets temáticos Tk. A ideia básica do ttk é separar, na medida do "
"possível, o código que implementa o comportamento de um widget do código que "
"implementa a sua aparência."

#: ../../whatsnew/3.1.rst:261
msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr "(Contribuído por Guilherme Polo; :issue:`2983`.)"

#: ../../whatsnew/3.1.rst:263
msgid ""
"The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support the "
"context management protocol::"
msgstr ""
"As classes :class:`gzip.GzipFile` e :class:`bz2.BZ2File` agora suportam o "
"protocolo de gestão de contexto::"

#: ../../whatsnew/3.1.rst:270
msgid "(Contributed by Antoine Pitrou.)"
msgstr "(Contribuído por Antoine Pitrou.)"

#: ../../whatsnew/3.1.rst:272
msgid ""
"The :mod:`decimal` module now supports methods for creating a decimal object "
"from a binary :class:`float`.  The conversion is exact but can sometimes be "
"surprising::"
msgstr ""
"O módulo :mod:`decimal` agora suporta métodos para criar um objeto decimal a "
"partir de um :class:`float` binário. A conversão é exata, mas pode ser por "
"vezes surpreendente::"

#: ../../whatsnew/3.1.rst:279
msgid ""
"The long decimal result shows the actual binary fraction being stored for "
"*1.1*.  The fraction has many digits because *1.1* cannot be exactly "
"represented in binary."
msgstr ""
"O longo resultado decimal mostra a fração binária real que está a ser "
"armazenada para *1.1*. A fração tem muitos dígitos porque *1.1* não pode ser "
"representado exatamente em binário."

#: ../../whatsnew/3.1.rst:283
msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr "(Contribuído por Raymond Hettinger e Mark Dickinson.)"

#: ../../whatsnew/3.1.rst:285
msgid ""
"The :mod:`itertools` module grew two new functions.  The :func:`itertools."
"combinations_with_replacement` function is one of four for generating "
"combinatorics including permutations and Cartesian products.  The :func:"
"`itertools.compress` function mimics its namesake from APL.  Also, the "
"existing :func:`itertools.count` function now has an optional *step* "
"argument and can accept any type of counting sequence including :class:"
"`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""
"O módulo :mod:`itertools` ganhou duas novas funções. A função :func:"
"`itertools.combinations_with_replacement` é uma das quatro para gerar "
"combinatórias, incluindo permutações e produtos cartesianos. A função :func:"
"`itertools.compress` imita a sua homónima do APL. Além disso, a função "
"existente :func:`itertools.count` agora tem um argumento opcional *step* e "
"pode aceitar qualquer tipo de sequência de contagem, incluindo :class:"
"`fractions.Fraction` e :class:`decimal.Decimal`::"

#: ../../whatsnew/3.1.rst:304
msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Contribuído por Raymond Hettinger.)"

#: ../../whatsnew/3.1.rst:306
msgid ""
":func:`collections.namedtuple` now supports a keyword argument *rename* "
"which lets invalid fieldnames be automatically converted to positional names "
"in the form _0, _1, etc.  This is useful when the field names are being "
"created by an external source such as a CSV header, SQL field list, or user "
"input::"
msgstr ""
":func:`collections.namedtuple` agora suporta um argumento nomeado *rename* "
"que permite que nomes de campos inválidos sejam automaticamente convertidos "
"para nomes posicionais na forma _0, _1, etc. Isto é útil quando os nomes dos "
"campos estão a ser criados por uma fonte externa, como um cabeçalho CSV, uma "
"lista de campos SQL ou entrada do utilizador::"

#: ../../whatsnew/3.1.rst:323
msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr "(Contribuído por Raymond Hettinger; :issue:`1818`.)"

#: ../../whatsnew/3.1.rst:325
msgid ""
"The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now "
"accept a flags parameter."
msgstr ""
"As funções :func:`re.sub`, :func:`re.subn` e :func:`re.split` agora aceitam "
"um parâmetro flags."

#: ../../whatsnew/3.1.rst:328
msgid "(Contributed by Gregory Smith.)"
msgstr "(Contribuído por Gregory Smith.)"

#: ../../whatsnew/3.1.rst:330
msgid ""
"The :mod:`logging` module now implements a simple :class:`logging."
"NullHandler` class for applications that are not using logging but are "
"calling library code that does.  Setting-up a null handler will suppress "
"spurious warnings such as \"No handlers could be found for logger foo\"::"
msgstr ""
"O módulo :mod:`logging` agora implementa uma classe simples :class:`logging."
"NullHandler` para aplicações que não estão a usar registo mas que chamam "
"código de biblioteca que o faz. A configuração de um manipulador nulo "
"suprimirá avisos espúrios como \"Não foram encontrados manipuladores para o "
"registador foo\"::"

#: ../../whatsnew/3.1.rst:338
msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr "(Contribuído por Vinay Sajip; :issue:`4384`.)"

#: ../../whatsnew/3.1.rst:340
msgid ""
"The :mod:`runpy` module which supports the ``-m`` command line switch now "
"supports the execution of packages by looking for and executing a "
"``__main__`` submodule when a package name is supplied."
msgstr ""
"O módulo :mod:`runpy`, que suporta a opção de linha de comando ``-m``, agora "
"suporta a execução de pacotes, procurando e executando um submódulo "
"``__main__`` quando é fornecido um nome de pacote."

#: ../../whatsnew/3.1.rst:344
msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr "(Contribuído por Andi Vajda; :issue:`4195`.)"

#: ../../whatsnew/3.1.rst:346
msgid ""
"The :mod:`pdb` module can now access and display source code loaded via :mod:"
"`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""
"O módulo :mod:`pdb` agora pode aceder e mostrar código-fonte carregado "
"através de :mod:`zipimport` (ou qualquer outro carregador conforme :pep:"
"`302`)."

#: ../../whatsnew/3.1.rst:349
msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr "(Contribuído por Alexander Belopolsky; :issue:`4201`.)"

#: ../../whatsnew/3.1.rst:351
msgid ":class:`functools.partial` objects can now be pickled."
msgstr "Os objetos :class:`functools.partial` agora podem ser serializados."

#: ../../whatsnew/3.1.rst:353
msgid ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"
msgstr ""
"(Sugerido por Antoine Pitrou e Jesse Noller. Implementado por Jack "
"Diederich; :issue:`5228`.)"

#: ../../whatsnew/3.1.rst:356
msgid ""
"Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as "
"expected in the interactive environment."
msgstr ""
"Adicionados tópicos de ajuda :mod:`pydoc` para símbolos, de modo que "
"``help('@')`` funcione como esperado no ambiente interativo."

#: ../../whatsnew/3.1.rst:359
msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr "(Contribuído por David Laban; :issue:`4739`.)"

#: ../../whatsnew/3.1.rst:361
msgid ""
"The :mod:`unittest` module now supports skipping individual tests or classes "
"of tests. And it supports marking a test as an expected failure, a test that "
"is known to be broken, but shouldn't be counted as a failure on a "
"TestResult::"
msgstr ""
"O módulo :mod:`unittest` agora suporta ignorar testes individuais ou classes "
"de testes. E suporta marcar um teste como uma falha esperada, um teste que "
"se sabe estar quebrado, mas que não deve ser contado como uma falha num "
"TestResult::"

#: ../../whatsnew/3.1.rst:376
msgid ""
"Also, tests for exceptions have been builtout to work with context managers "
"using the :keyword:`with` statement::"
msgstr ""
"Além disso, os testes para exceções foram construídos para funcionar com "
"gestores de contexto usando a instrução :keyword:`with`::"

#: ../../whatsnew/3.1.rst:383
msgid ""
"In addition, several new assertion methods were added including :meth:"
"`~unittest.TestCase.assertSetEqual`, :meth:`~unittest.TestCase."
"assertDictEqual`, :meth:`!assertDictContainsSubset`, :meth:`~unittest."
"TestCase.assertListEqual`, :meth:`~unittest.TestCase.assertTupleEqual`, :"
"meth:`~unittest.TestCase.assertSequenceEqual`, :meth:`assertRaisesRegexp() "
"<unittest.TestCase.assertRaisesRegex>`, :meth:`~unittest.TestCase."
"assertIsNone`, and :meth:`~unittest.TestCase.assertIsNotNone`."
msgstr ""
"Além disso, vários novos métodos de afirmação foram adicionados, incluindo :"
"meth:`~unittest.TestCase.assertSetEqual`, :meth:`~unittest.TestCase."
"assertDictEqual`, :meth:`!assertDictContainsSubset`, :meth:`~unittest."
"TestCase.assertListEqual`, :meth:`~unittest.TestCase.assertTupleEqual`, :"
"meth:`~unittest.TestCase.assertSequenceEqual`, :meth:`assertRaisesRegexp() "
"<unittest.TestCase.assertRaisesRegex>`, :meth:`~unittest.TestCase."
"assertIsNone` e :meth:`~unittest.TestCase.assertIsNotNone`."

#: ../../whatsnew/3.1.rst:394
msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr "(Contribuído por Benjamin Peterson e Antoine Pitrou.)"

#: ../../whatsnew/3.1.rst:396
msgid ""
"The :mod:`io` module has three new constants for the :meth:`~io.IOBase.seek` "
"method: :data:`~os.SEEK_SET`, :data:`~os.SEEK_CUR`, and :data:`~os.SEEK_END`."
msgstr ""
"O módulo :mod:`io` tem três novas constantes para o método :meth:`~io.IOBase."
"seek`: :data:`~os.SEEK_SET`, :data:`~os.SEEK_CUR` e :data:`~os.SEEK_END`."

#: ../../whatsnew/3.1.rst:399
msgid "The :data:`sys.version_info` tuple is now a named tuple::"
msgstr "A tupla :data:`sys.version_info` é agora uma tupla nomeada::"

#: ../../whatsnew/3.1.rst:404
msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr "(Contribuído por Ross Light; :issue:`4285`.)"

#: ../../whatsnew/3.1.rst:406
msgid "The :mod:`nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr ""

#: ../../whatsnew/3.1.rst:408
msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr "(Contribuído por Derek Morr; :issue:`1655` e :issue:`1664`.)"

#: ../../whatsnew/3.1.rst:410
msgid ""
"The :mod:`pickle` module has been adapted for better interoperability with "
"Python 2.x when used with protocol 2 or lower.  The reorganization of the "
"standard library changed the formal reference for many objects.  For "
"example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` in "
"Python 3. This change confounded efforts to share data between different "
"versions of Python.  But now when protocol 2 or lower is selected, the "
"pickler will automatically use the old Python 2 names for both loading and "
"dumping. This remapping is turned-on by default but can be disabled with the "
"*fix_imports* option::"
msgstr ""
"O módulo :mod:`pickle` foi adaptado para melhor interoperabilidade com o "
"Python 2.x quando usado com o protocolo 2 ou inferior. A reorganização da "
"biblioteca padrão alterou a referência formal para muitos objetos. Por "
"exemplo, ``__builtin__.set`` no Python 2 é chamado ``builtins.set`` no "
"Python 3. Esta alteração confundiu os esforços para partilhar dados entre "
"diferentes versões do Python. Mas agora, quando o protocolo 2 ou inferior é "
"selecionado, o pickler usará automaticamente os antigos nomes do Python 2 "
"tanto para carregar como para descarregar. Este remapeamento está ativado "
"por predefinição, mas pode ser desativado com a opção *fix_imports*::"

#: ../../whatsnew/3.1.rst:426
msgid ""
"An unfortunate but unavoidable side-effect of this change is that protocol 2 "
"pickles produced by Python 3.1 won't be readable with Python 3.0. The latest "
"pickle protocol, protocol 3, should be used when migrating data between "
"Python 3.x implementations, as it doesn't attempt to remain compatible with "
"Python 2.x."
msgstr ""
"Um efeito secundário infeliz, mas inevitável, desta alteração é que os "
"pickles de protocolo 2 produzidos pelo Python 3.1 não serão legíveis com o "
"Python 3.0. O protocolo de pickle mais recente, protocolo 3, deve ser usado "
"ao migrar dados entre implementações do Python 3.x, uma vez que não tenta "
"permanecer compatível com o Python 2.x."

#: ../../whatsnew/3.1.rst:432
msgid ""
"(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr ""
"(Contribuído por Alexandre Vassalotti e Antoine Pitrou, :issue:`6137`.)"

#: ../../whatsnew/3.1.rst:434
msgid ""
"A new module, :mod:`importlib` was added.  It provides a complete, portable, "
"pure Python reference implementation of the :keyword:`import` statement and "
"its counterpart, the :func:`__import__` function.  It represents a "
"substantial step forward in documenting and defining the actions that take "
"place during imports."
msgstr ""
"Foi adicionado um novo módulo, :mod:`importlib`. Ele fornece uma "
"implementação de referência completa, portátil e em Python puro da "
"instrução :keyword:`import` e da sua contraparte, a função :func:"
"`__import__`. Representa um passo substancial em frente na documentação e "
"definição das ações que ocorrem durante as importações."

#: ../../whatsnew/3.1.rst:440
msgid "(Contributed by Brett Cannon.)"
msgstr "(Contribuído por Brett Cannon.)"

#: ../../whatsnew/3.1.rst:443
msgid "Optimizations"
msgstr "Otimizações"

#: ../../whatsnew/3.1.rst:445
msgid "Major performance enhancements have been added:"
msgstr "Foram adicionadas melhorias significativas de desempenho:"

#: ../../whatsnew/3.1.rst:447
msgid ""
"The new I/O library (as defined in :pep:`3116`) was mostly written in Python "
"and quickly proved to be a problematic bottleneck in Python 3.0. In Python "
"3.1, the I/O library has been entirely rewritten in C and is 2 to 20 times "
"faster depending on the task at hand. The pure Python version is still "
"available for experimentation purposes through the ``_pyio`` module."
msgstr ""
"A nova biblioteca de I/O (como definida na :pep:`3116`) foi maioritariamente "
"escrita em Python e rapidamente provou ser um gargalo problemático no Python "
"3.0. No Python 3.1, a biblioteca de I/O foi completamente reescrita em C e é "
"2 a 20 vezes mais rápida, dependendo da tarefa em questão. A versão em "
"Python puro ainda está disponível para fins de experimentação através do "
"módulo ``_pyio``."

#: ../../whatsnew/3.1.rst:454
msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr "(Contribuído por Amaury Forgeot d'Arc e Antoine Pitrou.)"

#: ../../whatsnew/3.1.rst:456
msgid ""
"Added a heuristic so that tuples and dicts containing only untrackable "
"objects are not tracked by the garbage collector. This can reduce the size "
"of collections and therefore the garbage collection overhead on long-running "
"programs, depending on their particular use of datatypes."
msgstr ""
"Adicionada uma heurística para que tuplos e dicionários que contenham apenas "
"objetos não rastreáveis não sejam rastreados pelo coletor de lixo. Isto pode "
"reduzir o tamanho das coleções e, portanto, a sobrecarga de coleta de lixo "
"em programas de longa execução, dependendo do seu uso particular de tipos de "
"dados."

#: ../../whatsnew/3.1.rst:461
msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr "(Contribuído por Antoine Pitrou, :issue:`4688`.)"

#: ../../whatsnew/3.1.rst:463
msgid ""
"Enabling a configure option named ``--with-computed-gotos`` on compilers "
"that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop is "
"compiled with a new dispatch mechanism which gives speedups of up to 20%, "
"depending on the system, the compiler, and the benchmark."
msgstr ""
"Ativando uma opção de configuração chamada ``--with-computed-gotos`` em "
"compiladores que a suportam (notavelmente: gcc, SunPro, icc), o ciclo de "
"avaliação de bytecode é compilado com um novo mecanismo de despacho que "
"oferece acelerações de até 20%, dependendo do sistema, do compilador e do "
"benchmark."

#: ../../whatsnew/3.1.rst:469
msgid ""
"(Contributed by Antoine Pitrou along with a number of other participants, :"
"issue:`4753`)."
msgstr ""
"(Contribuído por Antoine Pitrou juntamente com vários outros participantes, :"
"issue:`4753`.)"

#: ../../whatsnew/3.1.rst:472
msgid ""
"The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr ""
"A descodificação de UTF-8, UTF-16 e LATIN-1 é agora duas a quatro vezes mais "
"rápida."

#: ../../whatsnew/3.1.rst:475
msgid ""
"(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr ""
"(Contribuído por Antoine Pitrou e Amaury Forgeot d'Arc, :issue:`4868`.)"

#: ../../whatsnew/3.1.rst:477
msgid ""
"The :mod:`json` module now has a C extension to substantially improve its "
"performance.  In addition, the API was modified so that json works only "
"with :class:`str`, not with :class:`bytes`.  That change makes the module "
"closely match the `JSON specification <https://json.org/>`_ which is defined "
"in terms of Unicode."
msgstr ""
"O módulo :mod:`json` agora tem uma extensão C para melhorar substancialmente "
"o seu desempenho. Além disso, a API foi modificada para que o json funcione "
"apenas com :class:`str`, não com :class:`bytes`. Essa alteração faz com que "
"o módulo corresponda de perto à `especificação JSON <https://json.org/>`_, "
"que é definida em termos de Unicode."

#: ../../whatsnew/3.1.rst:483
msgid ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and "
"Benjamin Peterson; :issue:`4136`.)"
msgstr ""
"(Contribuído por Bob Ippolito e convertido para Py3.1 por Antoine Pitrou e "
"Benjamin Peterson; :issue:`4136`.)"

#: ../../whatsnew/3.1.rst:486
msgid ""
"Unpickling now interns the attribute names of pickled objects.  This saves "
"memory and allows pickles to be smaller."
msgstr ""
"A desserialização agora internaliza os nomes dos atributos de objetos "
"serializados. Isto poupa memória e permite que os pickles sejam menores."

#: ../../whatsnew/3.1.rst:489
msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr "(Contribuído por Jake McGuire e Antoine Pitrou; :issue:`5084`.)"

#: ../../whatsnew/3.1.rst:492
msgid "IDLE"
msgstr "IDLE"

#: ../../whatsnew/3.1.rst:494
msgid ""
"IDLE's format menu now provides an option to strip trailing whitespace from "
"a source file."
msgstr ""
"O menu de formato do IDLE agora fornece uma opção para remover espaços em "
"branco no final de um ficheiro de origem."

#: ../../whatsnew/3.1.rst:497
msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr "(Contribuído por Roger D. Serwy; :issue:`5150`.)"

#: ../../whatsnew/3.1.rst:500
msgid "Build and C API Changes"
msgstr "Alterações na Compilação e na API C"

#: ../../whatsnew/3.1.rst:502
msgid "Changes to Python's build process and to the C API include:"
msgstr "As alterações no processo de compilação do Python e na API C incluem:"

#: ../../whatsnew/3.1.rst:504
msgid ""
"Integers are now stored internally either in base ``2**15`` or in base "
"``2**30``, the base being determined at build time.  Previously, they were "
"always stored in base ``2**15``.  Using base ``2**30`` gives significant "
"performance improvements on 64-bit machines, but benchmark results on 32-bit "
"machines have been mixed.  Therefore, the default is to use base ``2**30`` "
"on 64-bit machines and base ``2**15`` on 32-bit machines; on Unix, there's a "
"new configure option ``--enable-big-digits`` that can be used to override "
"this default."
msgstr ""
"Os inteiros são agora armazenados internamente em base ``2**15`` ou em base "
"``2**30``, sendo a base determinada no momento da compilação. Anteriormente, "
"eram sempre armazenados em base ``2**15``. O uso da base ``2**30`` traz "
"melhorias significativas de desempenho em máquinas de 64 bits, mas os "
"resultados de benchmark em máquinas de 32 bits têm sido mistos. Portanto, a "
"predefinição é usar a base ``2**30`` em máquinas de 64 bits e a base "
"``2**15`` em máquinas de 32 bits; no Unix, existe uma nova opção de "
"configuração ``--enable-big-digits`` que pode ser usada para substituir esta "
"predefinição."

#: ../../whatsnew/3.1.rst:513
msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new :data:`sys.int_info` that provides information about the internal "
"format, giving the number of bits per digit and the size in bytes of the C "
"type used to store each digit::"
msgstr ""
"Além das melhorias de desempenho, esta alteração deve ser invisível para os "
"utilizadores finais, com uma exceção: para fins de teste e depuração, existe "
"um novo :data:`sys.int_info` que fornece informações sobre o formato "
"interno, dando o número de bits por dígito e o tamanho em bytes do tipo C "
"usado para armazenar cada dígito::"

#: ../../whatsnew/3.1.rst:523
msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr "(Contribuído por Mark Dickinson; :issue:`4258`.)"

#: ../../whatsnew/3.1.rst:525
msgid ""
"The :c:func:`PyLong_AsUnsignedLongLong()` function now handles a negative "
"*pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""
"A função :c:func:`PyLong_AsUnsignedLongLong()` agora trata de um *pylong* "
"negativo lançando :exc:`OverflowError` em vez de :exc:`TypeError`."

#: ../../whatsnew/3.1.rst:528
msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr "(Contribuído por Mark Dickinson e Lisandro Dalcrin; :issue:`5175`.)"

#: ../../whatsnew/3.1.rst:530
msgid ""
"Deprecated :c:func:`!PyNumber_Int`.  Use :c:func:`PyNumber_Long` instead."
msgstr ""
":c:func:`!PyNumber_Int` está obsoleto. Use :c:func:`PyNumber_Long` em vez "
"disso."

#: ../../whatsnew/3.1.rst:532
msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr "(Contribuído por Mark Dickinson; :issue:`4910`.)"

#: ../../whatsnew/3.1.rst:534
msgid ""
"Added a new :c:func:`PyOS_string_to_double` function to replace the "
"deprecated functions :c:func:`!PyOS_ascii_strtod` and :c:func:`!"
"PyOS_ascii_atof`."
msgstr ""
"Foi adicionada uma nova função :c:func:`PyOS_string_to_double` para "
"substituir as funções obsoletas :c:func:`!PyOS_ascii_strtod` e :c:func:`!"
"PyOS_ascii_atof`."

#: ../../whatsnew/3.1.rst:537
msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr "(Contribuído por Mark Dickinson; :issue:`5914`.)"

#: ../../whatsnew/3.1.rst:539
msgid ""
"Added :c:type:`PyCapsule` as a replacement for the :c:type:`!PyCObject` API. "
"The principal difference is that the new type has a well defined interface "
"for passing typing safety information and a less complicated signature for "
"calling a destructor.  The old type had a problematic API and is now "
"deprecated."
msgstr ""
"Adicionado :c:type:`PyCapsule` como substituto para a API :c:type:`!"
"PyCObject`. A principal diferença é que o novo tipo tem uma interface bem "
"definida para passar informações de segurança de tipagem e uma assinatura "
"menos complicada para chamar um destrutor. O tipo antigo tinha uma API "
"problemática e agora está obsoleto."

#: ../../whatsnew/3.1.rst:545
msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr "(Contribuído por Larry Hastings; :issue:`5630`.)"

#: ../../whatsnew/3.1.rst:548
msgid "Porting to Python 3.1"
msgstr "Portar para o Python 3.1"

#: ../../whatsnew/3.1.rst:550
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""
"Esta secção lista as alterações descritas anteriormente e outras correções "
"de erros que podem exigir alterações no seu código:"

#: ../../whatsnew/3.1.rst:553
msgid ""
"The new floating point string representations can break existing doctests. "
"For example::"
msgstr ""

#: ../../whatsnew/3.1.rst:576
msgid ""
"The automatic name remapping in the pickle module for protocol 2 or lower "
"can make Python 3.1 pickles unreadable in Python 3.0.  One solution is to "
"use protocol 3.  Another solution is to set the *fix_imports* option to "
"``False``. See the discussion above for more details."
msgstr ""
"O remapeamento automático de nomes no módulo pickle para o protocolo 2 ou "
"inferior pode tornar os pickles do Python 3.1 ilegíveis no Python 3.0. Uma "
"solução é usar o protocolo 3. Outra solução é definir a opção *fix_imports* "
"para ``False``. Veja a discussão acima para mais detalhes."
