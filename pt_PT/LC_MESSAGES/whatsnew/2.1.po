# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-23 15:59+0000\n"
"PO-Revision-Date: 2025-07-18 19:59+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../whatsnew/2.1.rst:3
msgid "What's New in Python 2.1"
msgstr "Novidades do Python 2.1"

#: ../../whatsnew/2.1.rst:0
msgid "Author"
msgstr "Autor"

#: ../../whatsnew/2.1.rst:5
msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

#: ../../whatsnew/2.1.rst:13
msgid "Introduction"
msgstr "Introdução"

#: ../../whatsnew/2.1.rst:15
msgid ""
"This article explains the new features in Python 2.1.  While there aren't as "
"many changes in 2.1 as there were in Python 2.0, there are still some "
"pleasant surprises in store.  2.1 is the first release to be steered through "
"the use of Python Enhancement Proposals, or PEPs, so most of the sizable "
"changes have accompanying PEPs that provide more complete documentation and "
"a design rationale for the change.  This article doesn't attempt to document "
"the new features completely, but simply provides an overview of the new "
"features for Python programmers. Refer to the Python 2.1 documentation, or "
"to the specific PEP, for more details about any new feature that "
"particularly interests you."
msgstr ""
"Este artigo explica as novas funcionalidades do Python 2.1. Embora não "
"existam tantas alterações como no Python 2.0, ainda há algumas surpresas "
"agradáveis. O Python 2.1 é a primeira versão desenvolvida com base em "
"*Python Enhancement Proposals* (PEPs), pelo que a maioria das alterações "
"significativas tem um PEP associado que fornece documentação completa e "
"justificação de projeto. Este artigo não tenta documentar todas as novas "
"funcionalidades, mas oferece uma visão geral para programadores Python. Para "
"mais detalhes, consulte a documentação do Python 2.1 ou o PEP específico da "
"funcionalidade que lhe interessa."

#: ../../whatsnew/2.1.rst:25
msgid ""
"One recent goal of the Python development team has been to accelerate the "
"pace of new releases, with a new release coming every 6 to 9 months. 2.1 is "
"the first release to come out at this faster pace, with the first alpha "
"appearing in January, 3 months after the final version of 2.0 was released."
msgstr ""
"Um objetivo recente da equipa de desenvolvimento do Python tem sido acelerar "
"o ritmo de lançamento de novas versões, com uma nova versão a cada 6 a 9 "
"meses. O Python 2.1 é a primeira versão a seguir este ritmo mais rápido, com "
"a primeira *alpha* lançada em janeiro, 3 meses após o lançamento da versão "
"final do 2.0."

#: ../../whatsnew/2.1.rst:30
msgid "The final release of Python 2.1 was made on April 17, 2001."
msgstr "A versão final do Python 2.1 foi lançada a 17 de abril de 2001."

#: ../../whatsnew/2.1.rst:36
msgid "PEP 227: Nested Scopes"
msgstr "PEP 227: Âmbitos Aninhados"

#: ../../whatsnew/2.1.rst:38
msgid ""
"The largest change in Python 2.1 is to Python's scoping rules.  In Python "
"2.0, at any given time there are at most three namespaces used to look up "
"variable names: local, module-level, and the built-in namespace.  This often "
"surprised people because it didn't match their intuitive expectations.  For "
"example, a nested recursive function definition doesn't work::"
msgstr ""
"A maior alteração no Python 2.1 é nas regras de âmbito. No Python 2.0, em "
"qualquer momento, existiam no máximo três *namespaces* para procurar nomes "
"de variáveis: local, ao nível do módulo e o *namespace* integrado. Isto "
"surpreendia muitas pessoas, pois não correspondia às suas expetativas "
"intuitivas. Por exemplo, uma definição de função recursiva aninhada não "
"funcionava::"

#: ../../whatsnew/2.1.rst:44
msgid ""
"def f():\n"
"    ...\n"
"    def g(value):\n"
"        ...\n"
"        return g(value-1) + 1\n"
"    ..."
msgstr ""
"def f():\n"
"    ...\n"
"    def g(valor):\n"
"        ...\n"
"        return g(valor-1) + 1\n"
"    ..."

#: ../../whatsnew/2.1.rst:51
msgid ""
"The function :func:`!g` will always raise a :exc:`NameError` exception, "
"because the binding of the name ``g`` isn't in either its local namespace or "
"in the module-level namespace.  This isn't much of a problem in practice "
"(how often do you recursively define interior functions like this?), but "
"this also made using the :keyword:`lambda` expression clumsier, and this was "
"a problem in practice. In code which uses :keyword:`lambda` you can often "
"find local variables being copied by passing them as the default values of "
"arguments. ::"
msgstr ""
"A função :func:`!g` irá sempre gerar uma exceção :exc:`NameError`, porque a "
"ligação do nome ``g`` não está no seu *namespace* local nem ao nível do "
"módulo. Isto não é um grande problema na prática (com que frequência define "
"funções interiores recursivas assim?), mas tornava o uso da expressão :"
"keyword:`lambda` mais complicado, o que era um problema real. Em código que "
"usa :keyword:`lambda`, é comum encontrar variáveis locais copiadas ao passá-"
"las como valores predefinidos de argumentos::"

#: ../../whatsnew/2.1.rst:59
msgid ""
"def find(self, name):\n"
"    \"Return list of any entries equal to 'name'\"\n"
"    L = filter(lambda x, name=name: x == name,\n"
"               self.list_attribute)\n"
"    return L"
msgstr ""
"def find(self, nome):\n"
"    \"Devolve uma lista de entradas iguais a 'nome'\"\n"
"    L = filter(lambda x, nome=nome: x == nome,\n"
"               self.list_attribute)\n"
"    return L"

#: ../../whatsnew/2.1.rst:65
msgid ""
"The readability of Python code written in a strongly functional style "
"suffers greatly as a result."
msgstr ""
"A legibilidade do código Python escrito num estilo fortemente funcional fica "
"muito comprometida."

#: ../../whatsnew/2.1.rst:68
msgid ""
"The most significant change to Python 2.1 is that static scoping has been "
"added to the language to fix this problem.  As a first effect, the "
"``name=name`` default argument is now unnecessary in the above example.  Put "
"simply, when a given variable name is not assigned a value within a function "
"(by an assignment, or the :keyword:`def`, :keyword:`class`, or :keyword:"
"`import` statements), references to the variable will be looked up in the "
"local namespace of the enclosing scope.  A more detailed explanation of the "
"rules, and a dissection of the implementation, can be found in the PEP."
msgstr ""
"A alteração mais significativa no Python 2.1 é a adição de âmbitos estáticos "
"à linguagem para resolver este problema. Como primeiro efeito, o argumento "
"predefinido ``name=name`` já não é necessário no exemplo acima. Em resumo, "
"quando um nome de variável não recebe um valor dentro de uma função (por "
"atribuição, ou através das instruções :keyword:`def`, :keyword:`class`, ou :"
"keyword:`import`), as referências a essa variável serão procuradas no "
"*namespace* local do âmbito que a contém. Uma explicação mais detalhada das "
"regras e uma análise da implementação podem ser encontradas no PEP."

#: ../../whatsnew/2.1.rst:77
msgid ""
"This change may cause some compatibility problems for code where the same "
"variable name is used both at the module level and as a local variable "
"within a function that contains further function definitions. This seems "
"rather unlikely though, since such code would have been pretty confusing to "
"read in the first place."
msgstr ""
"Esta alteração pode causar alguns problemas de compatibilidade em código "
"onde o mesmo nome de variável é usado ao nível do módulo e como variável "
"local dentro de uma função que contém outras definições de funções. No "
"entanto, isto parece pouco provável, pois esse tipo de código já seria "
"confuso de ler."

#: ../../whatsnew/2.1.rst:83
msgid ""
"One side effect of the change is that the ``from module import *`` and "
"``exec`` statements have been made illegal inside a function scope under "
"certain conditions.  The Python reference manual has said all along that "
"``from module import *`` is only legal at the top level of a module, but the "
"CPython interpreter has never enforced this before.  As part of the "
"implementation of nested scopes, the compiler which turns Python source into "
"bytecodes has to generate different code to access variables in a containing "
"scope.  ``from module import *`` and ``exec`` make it impossible for the "
"compiler to figure this out, because they add names to the local namespace "
"that are unknowable at compile time. Therefore, if a function contains "
"function definitions or :keyword:`lambda` expressions with free variables, "
"the compiler will flag this by raising a :exc:`SyntaxError` exception."
msgstr ""
"Um efeito secundário desta alteração é que as instruções ``from module "
"import *`` e ``exec`` foram tornadas ilegais dentro de um âmbito de função "
"em certas condições. O manual de referência do Python sempre afirmou que "
"``from module import *`` só é legal ao nível superior de um módulo, mas o "
"interpretador CPython nunca impôs esta regra. Como parte da implementação "
"dos âmbitos aninhados, o compilador que converte o código-fonte Python em "
"*bytecodes* tem de gerar código diferente para aceder a variáveis num âmbito "
"contido. As instruções ``from module import *`` e ``exec`` tornam impossível "
"para o compilador determinar isto, pois adicionam nomes ao *namespace* local "
"que são desconhecidos em tempo de compilação. Portanto, se uma função "
"contiver definições de funções ou expressões :keyword:`lambda` com variáveis "
"livres, o compilador irá sinalizar isto ao gerar uma exceção :exc:"
"`SyntaxError`."

#: ../../whatsnew/2.1.rst:96
msgid "To make the preceding explanation a bit clearer, here's an example::"
msgstr "Para tornar a explicação anterior mais clara, aqui está um exemplo::"

#: ../../whatsnew/2.1.rst:98
msgid ""
"x = 1\n"
"def f():\n"
"    # The next line is a syntax error\n"
"    exec 'x=2'\n"
"    def g():\n"
"        return x"
msgstr ""
"x = 1\n"
"def f():\n"
"    # A linha seguinte é um erro de sintaxe\n"
"    exec 'x=2'\n"
"    def g():\n"
"        return x"

#: ../../whatsnew/2.1.rst:105
msgid ""
"Line 4 containing the ``exec`` statement is a syntax error, since ``exec`` "
"would define a new local variable named ``x`` whose value should be accessed "
"by :func:`!g`."
msgstr ""
"A linha 4 que contém a instrução ``exec`` é um erro de sintaxe, pois "
"``exec`` definiria uma nova variável local chamada ``x`` cujo valor seria "
"acedido por :func:`!g`."

#: ../../whatsnew/2.1.rst:109
msgid ""
"This shouldn't be much of a limitation, since ``exec`` is rarely used in "
"most Python code (and when it is used, it's often a sign of a poor design "
"anyway)."
msgstr ""
"Isto não deve ser uma grande limitação, pois ``exec`` é raramente usado na "
"maior parte do código Python (e quando é usado, é muitas vezes sinal de um "
"mau projeto)."

#: ../../whatsnew/2.1.rst:113
msgid ""
"Compatibility concerns have led to nested scopes being introduced gradually; "
"in Python 2.1, they aren't enabled by default, but can be turned on within a "
"module by using a future statement as described in :pep:`236`.  (See the "
"following section for further discussion of :pep:`236`.)  In Python 2.2, "
"nested scopes will become the default and there will be no way to turn them "
"off, but users will have had all of 2.1's lifetime to fix any breakage "
"resulting from their introduction."
msgstr ""
"Preocupações de compatibilidade levaram à introdução gradual dos âmbitos "
"aninhados; no Python 2.1, não estão ativados por predefinição, mas podem ser "
"ativados num módulo usando uma instrução *future*, como descrito no :pep:"
"`236`. (Consulte a secção seguinte para mais discussão sobre o :pep:`236`.) "
"No Python 2.2, os âmbitos aninhados tornar-se-ão a predefinição e não haverá "
"forma de os desativar, mas os utilizadores terão todo o ciclo de vida do 2.1 "
"para corrigir quaisquer problemas resultantes da sua introdução."

#: ../../whatsnew/2.1.rst:123
msgid ":pep:`227` - Statically Nested Scopes"
msgstr ":pep:`227` - Âmbitos Aninhados Estáticos"

#: ../../whatsnew/2.1.rst:124
msgid "Written and implemented by Jeremy Hylton."
msgstr "Escrito e implementado por Jeremy Hylton."

#: ../../whatsnew/2.1.rst:130
msgid "PEP 236: __future__ Directives"
msgstr "PEP 236: Diretivas __future__"

#: ../../whatsnew/2.1.rst:132
msgid ""
"The reaction to nested scopes was widespread concern about the dangers of "
"breaking code with the 2.1 release, and it was strong enough to make the "
"Pythoneers take a more conservative approach.  This approach consists of "
"introducing a convention for enabling optional functionality in release N "
"that will become compulsory in release N+1."
msgstr ""
"A reação aos âmbitos aninhados foi uma preocupação generalizada com o risco "
"de quebrar código na versão 2.1, o que levou os *Pythoneers* a adotar uma "
"abordagem mais conservadora. Esta abordagem consiste em introduzir uma "
"convenção para ativar funcionalidades opcionais na versão N, que se tornarão "
"obrigatórias na versão N+1."

#: ../../whatsnew/2.1.rst:138
msgid ""
"The syntax uses a ``from...import`` statement using the reserved module "
"name :mod:`__future__`.  Nested scopes can be enabled by the following "
"statement::"
msgstr ""
"A sintaxe usa uma instrução ``from...import`` com o nome de módulo "
"reservado :mod:`__future__`. Os âmbitos aninhados podem ser ativados com a "
"seguinte instrução::"

#: ../../whatsnew/2.1.rst:141
msgid "from __future__ import nested_scopes"
msgstr "from __future__ import nested_scopes"

#: ../../whatsnew/2.1.rst:143
msgid ""
"While it looks like a normal :keyword:`import` statement, it's not; there "
"are strict rules on where such a future statement can be put. They can only "
"be at the top of a module, and must precede any Python code or regular :"
"keyword:`!import` statements.  This is because such statements can affect "
"how the Python bytecode compiler parses code and generates bytecode, so they "
"must precede any statement that will result in bytecodes being produced."
msgstr ""
"Embora pareça uma instrução :keyword:`import` normal, não é; existem regras "
"estritas sobre onde uma instrução *future* pode ser colocada. Só podem estar "
"no topo de um módulo e devem preceder qualquer código Python ou instruções :"
"keyword:`!import` normais. Isto deve-se ao facto de tais instruções afetarem "
"a forma como o compilador de *bytecode* do Python analisa o código e gera "
"*bytecode*, pelo que devem preceder qualquer instrução que resulte na "
"produção de *bytecodes*."

#: ../../whatsnew/2.1.rst:153
msgid ":pep:`236` - Back to the :mod:`__future__`"
msgstr ":pep:`236` - Regresso ao :mod:`__future__`"

#: ../../whatsnew/2.1.rst:154
msgid "Written by Tim Peters, and primarily implemented by Jeremy Hylton."
msgstr ""
"Escrito por Tim Peters e implementado principalmente por Jeremy Hylton."

#: ../../whatsnew/2.1.rst:160
msgid "PEP 207: Rich Comparisons"
msgstr "PEP 207: Comparações Ricas"

#: ../../whatsnew/2.1.rst:162
msgid ""
"In earlier versions, Python's support for implementing comparisons on user-"
"defined classes and extension types was quite simple. Classes could "
"implement a :meth:`!__cmp__` method that was given two instances of a class, "
"and could only return 0 if they were equal or +1 or -1 if they weren't; the "
"method couldn't raise an exception or return anything other than a Boolean "
"value.  Users of Numeric Python often found this model too weak and "
"restrictive, because in the number-crunching programs that numeric Python is "
"used for, it would be more useful to be able to perform elementwise "
"comparisons of two matrices, returning a matrix containing the results of a "
"given comparison for each element.  If the two matrices are of different "
"sizes, then the compare has to be able to raise an exception to signal the "
"error."
msgstr ""
"Em versões anteriores, o suporte do Python para implementar comparações em "
"classes definidas pelo utilizador e tipos de extensão era bastante simples. "
"As classes podiam implementar um método :meth:`!__cmp__` que recebia duas "
"instâncias de uma classe e só podia devolver 0 se fossem iguais, ou +1 ou -1 "
"se não fossem; o método não podia gerar uma exceção nem devolver algo que "
"não fosse um valor booleano. Os utilizadores do Numeric Python muitas vezes "
"consideravam este modelo demasiado fraco e restritivo, pois nos programas de "
"cálculo numérico para os quais o Numeric Python é usado, seria mais útil "
"poder realizar comparações elemento a elemento de duas matrizes, devolvendo "
"uma matriz com os resultados de uma comparação específica para cada "
"elemento. Se as duas matrizes tiverem tamanhos diferentes, a comparação tem "
"de poder gerar uma exceção para sinalizar o erro."

#: ../../whatsnew/2.1.rst:174
msgid ""
"In Python 2.1, rich comparisons were added in order to support this need. "
"Python classes can now individually overload each of the ``<``, ``<=``, "
"``>``, ``>=``, ``==``, and ``!=`` operations.  The new magic method names "
"are:"
msgstr ""
"No Python 2.1, foram adicionadas comparações ricas para suportar esta "
"necessidade. As classes Python podem agora sobrecarregar individualmente "
"cada uma das operações ``<``, ``<=``, ``>``, ``>=``, ``==`` e ``!=``. Os "
"novos nomes dos métodos mágicos são:"

#: ../../whatsnew/2.1.rst:179
msgid "Operation"
msgstr "Operação"

#: ../../whatsnew/2.1.rst:179
msgid "Method name"
msgstr "Nome do método"

#: ../../whatsnew/2.1.rst:181
msgid "``<``"
msgstr "``<``"

#: ../../whatsnew/2.1.rst:181
msgid ":meth:`~object.__lt__`"
msgstr ":meth:`~object.__lt__`"

#: ../../whatsnew/2.1.rst:183
msgid "``<=``"
msgstr "``<=``"

#: ../../whatsnew/2.1.rst:183
msgid ":meth:`~object.__le__`"
msgstr ":meth:`~object.__le__`"

#: ../../whatsnew/2.1.rst:185
msgid "``>``"
msgstr "``>``"

#: ../../whatsnew/2.1.rst:185
msgid ":meth:`~object.__gt__`"
msgstr ":meth:`~object.__gt__`"

#: ../../whatsnew/2.1.rst:187
msgid "``>=``"
msgstr "``>=``"

#: ../../whatsnew/2.1.rst:187
msgid ":meth:`~object.__ge__`"
msgstr ":meth:`~object.__ge__`"

#: ../../whatsnew/2.1.rst:189
msgid "``==``"
msgstr "``==``"

#: ../../whatsnew/2.1.rst:189
msgid ":meth:`~object.__eq__`"
msgstr ":meth:`~object.__eq__`"

#: ../../whatsnew/2.1.rst:191
msgid "``!=``"
msgstr "``!=``"

#: ../../whatsnew/2.1.rst:191
msgid ":meth:`~object.__ne__`"
msgstr ":meth:`~object.__ne__`"

#: ../../whatsnew/2.1.rst:194
msgid ""
"(The magic methods are named after the corresponding Fortran operators ``.LT."
"``. ``.LE.``, &c.  Numeric programmers are almost certainly quite familiar "
"with these names and will find them easy to remember.)"
msgstr ""
"(O nome dos métodos mágicos é inspirado nos operadores Fortran ``.LT.``, ``."
"LE.``, etc. Os programadores numéricos estão quase certamente familiarizados "
"com estes nomes e achá-los-ão fáceis de memorizar.)"

#: ../../whatsnew/2.1.rst:198
msgid ""
"Each of these magic methods is of the form ``method(self, other)``, where "
"``self`` will be the object on the left-hand side of the operator, while "
"``other`` will be the object on the right-hand side.  For example, the "
"expression ``A < B`` will cause ``A.__lt__(B)`` to be called."
msgstr ""
"Cada um destes métodos mágicos tem a forma ``method(self, other)``, onde "
"``self`` será o objeto do lado esquerdo do operador, enquanto ``other`` será "
"o objeto do lado direito. Por exemplo, a expressão ``A < B`` irá chamar ``A."
"__lt__(B)``."

#: ../../whatsnew/2.1.rst:203
msgid ""
"Each of these magic methods can return anything at all: a Boolean, a matrix, "
"a list, or any other Python object.  Alternatively they can raise an "
"exception if the comparison is impossible, inconsistent, or otherwise "
"meaningless."
msgstr ""
"Cada um destes métodos mágicos pode devolver qualquer coisa: um booleano, "
"uma matriz, uma lista ou qualquer outro objeto Python. Alternativamente, "
"podem gerar uma exceção se a comparação for impossível, inconsistente ou sem "
"significado."

#: ../../whatsnew/2.1.rst:207
msgid ""
"The built-in ``cmp(A,B)`` function can use the rich comparison machinery, "
"and now accepts an optional argument specifying which comparison operation "
"to use; this is given as one of the strings ``\"<\"``, ``\"<=\"``, "
"``\">\"``, ``\">=\"``, ``\"==\"``, or ``\"!=\"``.  If called without the "
"optional third argument, :func:`!cmp` will only return -1, 0, or +1 as in "
"previous versions of Python; otherwise it will call the appropriate method "
"and can return any Python object."
msgstr ""
"A função integrada ``cmp(A,B)`` pode usar o mecanismo de comparações ricas e "
"agora aceita um argumento opcional que especifica qual a operação de "
"comparação a usar; este argumento é uma das seguintes strings: ``\"<\"``, "
"``\"<=\"``, ``\">\"``, ``\">=\"``, ``\"==\"`` ou ``\"!=\"``. Se chamada sem "
"o terceiro argumento opcional, :func:`!cmp` só devolverá -1, 0 ou +1, como "
"nas versões anteriores do Python; caso contrário, chamará o método "
"apropriado e poderá devolver qualquer objeto Python."

#: ../../whatsnew/2.1.rst:214
msgid ""
"There are also corresponding changes of interest to C programmers; there's a "
"new slot ``tp_richcmp`` in type objects and an API for performing a given "
"rich comparison.  I won't cover the C API here, but will refer you to :pep:"
"`207`, or to 2.1's C API documentation, for the full list of related "
"functions."
msgstr ""
"Existem também alterações correspondentes de interesse para programadores em "
"C; há um novo *slot* ``tp_richcmp`` nos objetos de tipo e uma API para "
"realizar uma comparações ricas. Não vou abordar a API em C aqui, mas remeto-"
"o para o :pep:`207`, ou para a documentação da API em C do Python 2.1, para "
"a lista completa de funções relacionadas."

#: ../../whatsnew/2.1.rst:222
msgid ":pep:`207` - Rich Comparisons"
msgstr ":pep:`207` - Comparações Ricas"

#: ../../whatsnew/2.1.rst:223
msgid ""
"Written by Guido van Rossum, heavily based on earlier work by David Ascher, "
"and implemented by Guido van Rossum."
msgstr ""
"Escrito por Guido van Rossum, baseado em trabalho anterior de David Ascher, "
"e implementado por Guido van Rossum."

#: ../../whatsnew/2.1.rst:230
msgid "PEP 230: Warning Framework"
msgstr "PEP 230: Estrutura de Avisos"

#: ../../whatsnew/2.1.rst:232
msgid ""
"Over its 10 years of existence, Python has accumulated a certain number of "
"obsolete modules and features along the way.  It's difficult to know when a "
"feature is safe to remove, since there's no way of knowing how much code "
"uses it --- perhaps no programs depend on the feature, or perhaps many do.  "
"To enable removing old features in a more structured way, a warning "
"framework was added. When the Python developers want to get rid of a "
"feature, it will first trigger a warning in the next version of Python.  The "
"following Python version can then drop the feature, and users will have had "
"a full release cycle to remove uses of the old feature."
msgstr ""
"Ao longo dos seus 10 anos de existência, o Python acumulou um certo número "
"de módulos e funcionalidades obsoletas. É difícil saber quando uma "
"funcionalidade pode ser removida com segurança, pois não há forma de saber "
"quantos códigos a utilizam — talvez nenhum programa dependa dela, ou talvez "
"muitos dependam. Para permitir a remoção de funcionalidades antigas de forma "
"mais estruturada, foi adicionada uma estrutura de avisos. Quando os "
"desenvolvedores do Python pretendem remover uma funcionalidade, esta irá "
"primeiro gerar um aviso na próxima versão do Python. A versão seguinte "
"poderá então remover a funcionalidade, e os utilizadores terão tido um ciclo "
"de lançamento completo para remover o uso da funcionalidade antiga."

#: ../../whatsnew/2.1.rst:242
msgid ""
"Python 2.1 adds the warning framework to be used in this scheme.  It adds a :"
"mod:`warnings` module that provide functions to issue warnings, and to "
"filter out warnings that you don't want to be displayed. Third-party modules "
"can also use this framework to deprecate old features that they no longer "
"wish to support."
msgstr ""
"O Python 2.1 adiciona a estrutura de avisos para ser usada neste esquema. "
"Adiciona um módulo :mod:`warnings` que fornece funções para emitir avisos e "
"filtrar avisos que não deseja que sejam apresentados. Módulos de terceiros "
"também podem usar esta estrutura para descontinuar funcionalidades antigas "
"que já não pretendem suportar."

#: ../../whatsnew/2.1.rst:248
msgid ""
"For example, in Python 2.1 the :mod:`!regex` module is deprecated, so "
"importing it causes a warning to be printed::"
msgstr ""
"Por exemplo, no Python 2.1, o módulo :mod:`!regex` está descontinuado, pelo "
"que a sua importação gera um aviso::"

#: ../../whatsnew/2.1.rst:251
msgid ""
">>> import regex\n"
"__main__:1: DeprecationWarning: the regex module\n"
"         is deprecated; please use the re module\n"
">>>"
msgstr ""
">>> import regex\n"
"__main__:1: DeprecationWarning: o módulo regex\n"
"         está descontinuado; utilize o módulo re\n"
">>>"

#: ../../whatsnew/2.1.rst:256
msgid "Warnings can be issued by calling the :func:`warnings.warn` function::"
msgstr "Os avisos podem ser emitidos chamando a função :func:`warnings.warn`::"

#: ../../whatsnew/2.1.rst:258
msgid "warnings.warn(\"feature X no longer supported\")"
msgstr "warnings.warn(\"a funcionalidade X já não é suportada\")"

#: ../../whatsnew/2.1.rst:260
msgid ""
"The first parameter is the warning message; an additional optional "
"parameters can be used to specify a particular warning category."
msgstr ""
"O primeiro parâmetro é a mensagem de aviso; parâmetros opcionais adicionais "
"podem ser usados para especificar uma categoria de aviso específica."

#: ../../whatsnew/2.1.rst:263
msgid ""
"Filters can be added to disable certain warnings; a regular expression "
"pattern can be applied to the message or to the module name in order to "
"suppress a warning.  For example, you may have a program that uses the :mod:"
"`!regex` module and not want to spare the time to convert it to use the :mod:"
"`re` module right now.  The warning can be suppressed by calling ::"
msgstr ""
"Podem ser adicionados filtros para desativar certos avisos; um padrão de "
"expressão regular pode ser aplicado à mensagem ou ao nome do módulo para "
"suprimir um aviso. Por exemplo, pode ter um programa que usa o módulo :mod:`!"
"regex` e não querer perder tempo a convertê-lo para usar o módulo :mod:`re` "
"neste momento. O aviso pode ser suprimido chamando::"

#: ../../whatsnew/2.1.rst:269
msgid ""
"import warnings\n"
"warnings.filterwarnings(action = 'ignore',\n"
"                        message='.*regex module is deprecated',\n"
"                        category=DeprecationWarning,\n"
"                        module = '__main__')"
msgstr ""
"import warnings\n"
"warnings.filterwarnings(action = 'ignore',\n"
"                        message='.*módulo regex está descontinuado',\n"
"                        category=DeprecationWarning,\n"
"                        module = '__main__')"

#: ../../whatsnew/2.1.rst:275
msgid ""
"This adds a filter that will apply only to warnings of the class :class:"
"`DeprecationWarning` triggered in the :mod:`__main__` module, and applies a "
"regular expression to only match the message about the :mod:`!regex` module "
"being deprecated, and will cause such warnings to be ignored.  Warnings can "
"also be printed only once, printed every time the offending code is "
"executed, or turned into exceptions that will cause the program to stop "
"(unless the exceptions are caught in the usual way, of course)."
msgstr ""
"Isto adiciona um filtro que se aplica apenas a avisos da classe :class:"
"`DeprecationWarning` gerados no módulo :mod:`__main__`, e aplica uma "
"expressão regular para corresponder apenas à mensagem sobre o módulo :mod:`!"
"regex` estar descontinuado, fazendo com que tais avisos sejam ignorados. Os "
"avisos também podem ser impressos apenas uma vez, impressos sempre que o "
"código problemático é executado, ou convertidos em exceções que farão parar "
"o programa (a menos que as exceções sejam capturadas da forma habitual, "
"claro)."

#: ../../whatsnew/2.1.rst:283
msgid ""
"Functions were also added to Python's C API for issuing warnings; refer to "
"PEP 230 or to Python's API documentation for the details."
msgstr ""
"Foram também adicionadas funções à API em C do Python para emitir avisos; "
"consulte o PEP 230 ou a documentação da API do Python para mais detalhes."

#: ../../whatsnew/2.1.rst:289
msgid ":pep:`5` - Guidelines for Language Evolution"
msgstr ":pep:`5` - Diretrizes para a Evolução da Linguagem"

#: ../../whatsnew/2.1.rst:290
msgid ""
"Written by Paul Prescod, to specify procedures to be followed when removing "
"old features from Python.  The policy described in this PEP hasn't been "
"officially adopted, but the eventual policy probably won't be too different "
"from Prescod's proposal."
msgstr ""
"Escrito por Paul Prescod, para especificar procedimentos a seguir ao remover "
"funcionalidades antigas do Python. A política descrita neste PEP ainda não "
"foi oficialmente adotada, mas a política final provavelmente não será muito "
"diferente da proposta de Prescod."

#: ../../whatsnew/2.1.rst:295
msgid ":pep:`230` - Warning Framework"
msgstr ":pep:`230` - Estrutura de Avisos"

#: ../../whatsnew/2.1.rst:296
msgid "Written and implemented by Guido van Rossum."
msgstr "Escrito e implementado por Guido van Rossum."

#: ../../whatsnew/2.1.rst:302
msgid "PEP 229: New Build System"
msgstr "PEP 229: Novo Sistema de Compilação"

#: ../../whatsnew/2.1.rst:304
msgid ""
"When compiling Python, the user had to go in and edit the :file:`Modules/"
"Setup` file in order to enable various additional modules; the default set "
"is relatively small and limited to modules that compile on most Unix "
"platforms. This means that on Unix platforms with many more features, most "
"notably Linux, Python installations often don't contain all useful modules "
"they could."
msgstr ""
"Ao compilar o Python, o utilizador tinha de editar o ficheiro :file:`Modules/"
"Setup` para ativar vários módulos adicionais; o conjunto predefinido é "
"relativamente pequeno e limitado a módulos que compilam na maioria das "
"plataformas Unix. Isto significa que, em plataformas Unix com muitas mais "
"funcionalidades, como o Linux, as instalações do Python muitas vezes não "
"incluem todos os módulos úteis que poderiam conter."

#: ../../whatsnew/2.1.rst:310
msgid ""
"Python 2.0 added the Distutils, a set of modules for distributing and "
"installing extensions.  In Python 2.1, the Distutils are used to compile "
"much of the standard library of extension modules, autodetecting which ones "
"are supported on the current machine.  It's hoped that this will make Python "
"installations easier and more featureful."
msgstr ""
"O Python 2.0 adicionou o Distutils, um conjunto de módulos para distribuir e "
"instalar extensões. No Python 2.1, o Distutils é usado para compilar grande "
"parte da biblioteca padrão de módulos de extensão, detetando automaticamente "
"quais são suportados na máquina atual. Espera-se que isto torne as "
"instalações do Python mais fáceis e ricas em funcionalidades."

#: ../../whatsnew/2.1.rst:316
msgid ""
"Instead of having to edit the :file:`Modules/Setup` file in order to enable "
"modules, a :file:`setup.py` script in the top directory of the Python source "
"distribution is run at build time, and attempts to discover which modules "
"can be enabled by examining the modules and header files on the system.  If "
"a module is configured in :file:`Modules/Setup`, the :file:`setup.py` script "
"won't attempt to compile that module and will defer to the :file:`Modules/"
"Setup` file's contents.  This provides a way to specific any strange command-"
"line flags or libraries that are required for a specific platform."
msgstr ""
"Em vez de ter de editar o ficheiro :file:`Modules/Setup` para ativar "
"módulos, um script :file:`setup.py` no diretório principal da distribuição "
"do código-fonte do Python é executado em tempo de compilação e tenta "
"descobrir quais os módulos que podem ser ativados, examinando os módulos e "
"ficheiros de cabeçalho no sistema. Se um módulo estiver configurado em :file:"
"`Modules/Setup`, o script :file:`setup.py` não tentará compilar esse módulo "
"e deferirá para o conteúdo do ficheiro :file:`Modules/Setup`. Isto permite "
"especificar quaisquer *flags* estranhas de linha de comandos ou bibliotecas "
"necessárias para uma plataforma específica."

#: ../../whatsnew/2.1.rst:325
msgid ""
"In another far-reaching change to the build mechanism, Neil Schemenauer "
"restructured things so Python now uses a single makefile that isn't "
"recursive, instead of makefiles in the top directory and in each of the :"
"file:`Python/`, :file:`Parser/`, :file:`Objects/`, and :file:`Modules/` "
"subdirectories.  This makes building Python faster and also makes hacking "
"the Makefiles clearer and simpler."
msgstr ""
"Noutra alteração abrangente ao mecanismo de compilação, Neil Schemenauer "
"reestruturou as coisas para que o Python passe a usar um único ficheiro "
"*makefile* não recursivo, em vez de *makefiles* no diretório principal e em "
"cada um dos subdiretórios :file:`Python/`, :file:`Parser/`, :file:`Objects/` "
"e :file:`Modules/`. Isto torna a compilação do Python mais rápida e também "
"torna a edição dos *Makefiles* mais clara e simples."

#: ../../whatsnew/2.1.rst:335
msgid ":pep:`229` - Using Distutils to Build Python"
msgstr ":pep:`229` - Utilização do Distutils para Compilar o Python"

#: ../../whatsnew/2.1.rst:336 ../../whatsnew/2.1.rst:575
msgid "Written and implemented by A.M. Kuchling."
msgstr "Escrito e implementado por A.M. Kuchling."

#: ../../whatsnew/2.1.rst:342
msgid "PEP 205: Weak References"
msgstr "PEP 205: Referências Fracas"

#: ../../whatsnew/2.1.rst:344
msgid ""
"Weak references, available through the :mod:`weakref` module, are a minor "
"but useful new data type in the Python programmer's toolbox."
msgstr ""
"As referências fracas, disponíveis através do módulo :mod:`weakref`, são um "
"novo tipo de dados menor, mas útil, na caixa de ferramentas do programador "
"Python."

#: ../../whatsnew/2.1.rst:347
msgid ""
"Storing a reference to an object (say, in a dictionary or a list) has the "
"side effect of keeping that object alive forever.  There are a few specific "
"cases where this behaviour is undesirable, object caches being the most "
"common one, and another being circular references in data structures such as "
"trees."
msgstr ""
"Armazenar uma referência a um objeto (por exemplo, num dicionário ou numa "
"lista) tem o efeito colateral de manter esse objeto vivo para sempre. "
"Existem alguns casos específicos em que este comportamento é indesejável, "
"sendo as caches de objetos o caso mais comum, e outro são as referências "
"circulares em estruturas de dados como árvores."

#: ../../whatsnew/2.1.rst:352
msgid ""
"For example, consider a memoizing function that caches the results of "
"another function ``f(x)`` by storing the function's argument and its result "
"in a dictionary::"
msgstr ""
"Por exemplo, considere uma função de memorização que guarda em cache os "
"resultados de outra função ``f(x)`` armazenando o argumento da função e o "
"seu resultado num dicionário::"

#: ../../whatsnew/2.1.rst:356
msgid ""
"_cache = {}\n"
"def memoize(x):\n"
"    if _cache.has_key(x):\n"
"        return _cache[x]\n"
"\n"
"    retval = f(x)\n"
"\n"
"    # Cache the returned object\n"
"    _cache[x] = retval\n"
"\n"
"    return retval"
msgstr ""
"_cache = {}\n"
"def memoize(x):\n"
"    if x in _cache:\n"
"        return _cache[x]\n"
"\n"
"    retval = f(x)\n"
"\n"
"    # Guarda o objeto devolvido em cache\n"
"    _cache[x] = retval\n"
"\n"
"    return retval"

#: ../../whatsnew/2.1.rst:368
msgid ""
"This version works for simple things such as integers, but it has a side "
"effect; the ``_cache`` dictionary holds a reference to the return values, so "
"they'll never be deallocated until the Python process exits and cleans up. "
"This isn't very noticeable for integers, but if :func:`!f` returns an "
"object, or a data structure that takes up a lot of memory, this can be a "
"problem."
msgstr ""
"Esta versão funciona para coisas simples como inteiros, mas tem um efeito "
"colateral; o dicionário ``_cache`` mantém uma referência aos valores "
"devolvidos, pelo que estes nunca serão libertados até que o processo Python "
"termine e limpe a memória. Isto não é muito notório para inteiros, mas se :"
"func:`!f` devolver um objeto, ou uma estrutura de dados que ocupe muita "
"memória, isto pode tornar-se um problema."

#: ../../whatsnew/2.1.rst:374
msgid ""
"Weak references provide a way to implement a cache that won't keep objects "
"alive beyond their time.  If an object is only accessible through weak "
"references, the object will be deallocated and the weak references will now "
"indicate that the object it referred to no longer exists.  A weak reference "
"to an object *obj* is created by calling ``wr = weakref.ref(obj)``.  The "
"object being referred to is returned by calling the weak reference as if it "
"were a function: ``wr()``.  It will return the referenced object, or "
"``None`` if the object no longer exists."
msgstr ""
"As referências fracas fornecem uma forma de implementar uma cache que não "
"mantém objetos vivos além do seu tempo. Se um objeto só for acessível "
"através de referências fracas, o objeto será libertado e as referências "
"fracas indicarão que o objeto ao qual se referiam já não existe. Uma "
"referência fraca a um objeto *obj* é criada chamando ``wr = weakref."
"ref(obj)``. O objeto referenciado é devolvido chamando a referência fraca "
"como se fosse uma função: ``wr()``. Devolverá o objeto referenciado, ou "
"``None`` se o objeto já não existir."

#: ../../whatsnew/2.1.rst:382
msgid ""
"This makes it possible to write a :func:`!memoize` function whose cache "
"doesn't keep objects alive, by storing weak references in the cache. ::"
msgstr ""
"Isto torna possível escrever uma função :func:`!memoize` cuja cache não "
"mantém objetos vivos, armazenando referências fracas na cache. ::"

#: ../../whatsnew/2.1.rst:385
msgid ""
"_cache = {}\n"
"def memoize(x):\n"
"    if _cache.has_key(x):\n"
"        obj = _cache[x]()\n"
"        # If weak reference object still exists,\n"
"        # return it\n"
"        if obj is not None: return obj\n"
"\n"
"    retval = f(x)\n"
"\n"
"    # Cache a weak reference\n"
"    _cache[x] = weakref.ref(retval)\n"
"\n"
"    return retval"
msgstr ""
"_cache = {}\n"
"def memoize(x):\n"
"    if x in _cache:\n"
"        obj = _cache[x]()\n"
"        # Se o objeto da referência fraca ainda existir,\n"
"        # devolve-o\n"
"        if obj is not None: return obj\n"
"\n"
"    retval = f(x)\n"
"\n"
"    # Guarda uma referência fraca em cache\n"
"    _cache[x] = weakref.ref(retval)\n"
"\n"
"    return retval"

#: ../../whatsnew/2.1.rst:400
msgid ""
"The :mod:`weakref` module also allows creating proxy objects which behave "
"like weak references --- an object referenced only by proxy objects is "
"deallocated -- but instead of requiring an explicit call to retrieve the "
"object, the proxy transparently forwards all operations to the object as "
"long as the object still exists.  If the object is deallocated, attempting "
"to use a proxy will cause a :exc:`!weakref.ReferenceError` exception to be "
"raised. ::"
msgstr ""
"O módulo :mod:`weakref` também permite criar objetos *proxy* que se "
"comportam como referências fracas — um objeto referenciado apenas por "
"objetos *proxy* é libertado — mas, em vez de exigir uma chamada explícita "
"para recuperar o objeto, o *proxy* encaminha transparentemente todas as "
"operações para o objeto enquanto este existir. Se o objeto for libertado, "
"tentar usar um *proxy* irá gerar uma exceção :exc:`!weakref."
"ReferenceError`. ::"

#: ../../whatsnew/2.1.rst:407
msgid ""
"proxy = weakref.proxy(obj)\n"
"proxy.attr   # Equivalent to obj.attr\n"
"proxy.meth() # Equivalent to obj.meth()\n"
"del obj\n"
"proxy.attr   # raises weakref.ReferenceError"
msgstr ""
"proxy = weakref.proxy(obj)\n"
"proxy.attr   # Equivalente a obj.attr\n"
"proxy.meth() # Equivalente a obj.meth()\n"
"del obj\n"
"proxy.attr   # gera weakref.ReferenceError"

#: ../../whatsnew/2.1.rst:416
msgid ":pep:`205` - Weak References"
msgstr ":pep:`205` - Referências Fracas"

#: ../../whatsnew/2.1.rst:417
msgid "Written and implemented by Fred L. Drake, Jr."
msgstr "Escrito e implementado por Fred L. Drake, Jr."

#: ../../whatsnew/2.1.rst:423
msgid "PEP 232: Function Attributes"
msgstr "PEP 232: Atributos de Funções"

#: ../../whatsnew/2.1.rst:425
msgid ""
"In Python 2.1, functions can now have arbitrary information attached to "
"them. People were often using docstrings to hold information about functions "
"and methods, because the :attr:`~function.__doc__` attribute was the only "
"way of attaching any information to a function.  For example, in the Zope "
"web application server, functions are marked as safe for public access by "
"having a docstring, and in John Aycock's SPARK parsing framework, docstrings "
"hold parts of the BNF grammar to be parsed.  This overloading is "
"unfortunate, since docstrings are really intended to hold a function's "
"documentation; for example, it means you can't properly document functions "
"intended for private use in Zope."
msgstr ""
"No Python 2.1, as funções podem agora ter informações arbitrárias "
"associadas. As pessoas usavam frequentemente *docstrings* para armazenar "
"informações sobre funções e métodos, pois o atributo :attr:`~function."
"__doc__` era a única forma de associar qualquer informação a uma função. Por "
"exemplo, no servidor de aplicações web Zope, as funções são marcadas como "
"seguras para acesso público ao terem uma *docstring*, e no *framework* de "
"parsing SPARK de John Aycock, as *docstrings* contêm partes da gramática BNF "
"a ser analisada. Esta sobrecarga é infeliz, pois as *docstrings* são "
"realmente destinadas a conter a documentação de uma função; por exemplo, "
"significa que não é possível documentar adequadamente funções destinadas a "
"uso privado no Zope."

#: ../../whatsnew/2.1.rst:436
msgid ""
"Arbitrary attributes can now be set and retrieved on functions using the "
"regular Python syntax::"
msgstr ""
"Atributos arbitrários podem agora ser definidos e recuperados em funções "
"usando a sintaxe Python normal::"

#: ../../whatsnew/2.1.rst:439
msgid ""
"def f(): pass\n"
"\n"
"f.publish = 1\n"
"f.secure = 1\n"
"f.grammar = \"A ::= B (C D)*\""
msgstr ""
"def f(): pass\n"
"\n"
"f.publish = 1\n"
"f.secure = 1\n"
"f.grammar = \"A ::= B (C D)*\""

#: ../../whatsnew/2.1.rst:445
msgid ""
"The dictionary containing attributes can be accessed as the function's :attr:"
"`~function.__dict__`. Unlike the :attr:`~type.__dict__` attribute of class "
"instances, in functions you can actually assign a new dictionary to :attr:"
"`~function.__dict__`, though the new value is restricted to a regular Python "
"dictionary; you *can't* be tricky and set it to a :class:`!UserDict` "
"instance, or any other random object that behaves like a mapping."
msgstr ""
"O dicionário que contém os atributos pode ser acedido através do atributo :"
"attr:`~function.__dict__` da função. Ao contrário do atributo :attr:`~type."
"__dict__` das instâncias de classe, nas funções é possível atribuir um novo "
"dicionário a :attr:`~function.__dict__`, embora o novo valor esteja limitado "
"a um dicionário Python normal; não é possível definir um objeto aleatório "
"que se comporte como um mapeamento, como uma instância de :class:`!UserDict`."

#: ../../whatsnew/2.1.rst:455
msgid ":pep:`232` - Function Attributes"
msgstr ":pep:`232` - Atributos de Funções"

#: ../../whatsnew/2.1.rst:456
msgid "Written and implemented by Barry Warsaw."
msgstr "Escrito e implementado por Barry Warsaw."

#: ../../whatsnew/2.1.rst:462
msgid "PEP 235: Importing Modules on Case-Insensitive Platforms"
msgstr "PEP 235: Importação de Módulos em Plataformas *Case-Insensitive*"

#: ../../whatsnew/2.1.rst:464
msgid ""
"Some operating systems have filesystems that are case-insensitive, MacOS and "
"Windows being the primary examples; on these systems, it's impossible to "
"distinguish the filenames ``FILE.PY`` and ``file.py``, even though they do "
"store the file's name  in its original case (they're case-preserving, too)."
msgstr ""
"Alguns sistemas operativos têm sistemas de ficheiros *case-insensitive*, "
"sendo os principais exemplos o MacOS e o Windows; nestes sistemas, é "
"impossível distinguir os nomes de ficheiros ``FILE.PY`` e ``file.py``, "
"embora armazenem o nome do ficheiro na sua forma original (também preservam "
"a capitalização)."

#: ../../whatsnew/2.1.rst:469
msgid ""
"In Python 2.1, the :keyword:`import` statement will work to simulate case-"
"sensitivity on case-insensitive platforms.  Python will now search for the "
"first case-sensitive match by default, raising an :exc:`ImportError` if no "
"such file is found, so ``import file`` will not import a module named ``FILE."
"PY``. Case-insensitive matching can be requested by setting the :envvar:"
"`PYTHONCASEOK` environment variable before starting the Python interpreter."
msgstr ""
"No Python 2.1, a instrução :keyword:`import` irá simular sensibilidade a "
"maiúsculas em plataformas *case-insensitive*. O Python irá agora procurar, "
"por predefinição, a primeira correspondência *case-sensitive*, gerando um :"
"exc:`ImportError` se nenhum ficheiro for encontrado, pelo que ``import "
"file`` não importará um módulo chamado ``FILE.PY``. A correspondência *case-"
"insensitive* pode ser solicitada definindo a variável de ambiente :envvar:"
"`PYTHONCASEOK` antes de iniciar o interpretador Python."

#: ../../whatsnew/2.1.rst:480
msgid "PEP 217: Interactive Display Hook"
msgstr "PEP 217: *Hook* de Apresentação Interativa"

#: ../../whatsnew/2.1.rst:482
msgid ""
"When using the Python interpreter interactively, the output of commands is "
"displayed using the built-in :func:`repr` function. In Python 2.1, the "
"variable :func:`sys.displayhook` can be set to a callable object which will "
"be called instead of :func:`repr`. For example, you can set it to a special "
"pretty-printing function::"
msgstr ""
"Ao usar o interpretador Python interativamente, a saída dos comandos é "
"apresentada usando a função integrada :func:`repr`. No Python 2.1, a "
"variável :func:`sys.displayhook` pode ser definida como um objeto chamável "
"que será invocado em vez de :func:`repr`. Por exemplo, pode defini-la como "
"uma função de impressão bonita especial::"

#: ../../whatsnew/2.1.rst:488
msgid ""
">>> # Create a recursive data structure\n"
"... L = [1,2,3]\n"
">>> L.append(L)\n"
">>> L # Show Python's default output\n"
"[1, 2, 3, [...]]\n"
">>> # Use pprint.pprint() as the display function\n"
"... import sys, pprint\n"
">>> sys.displayhook = pprint.pprint\n"
">>> L\n"
"[1, 2, 3,  <Recursion on list with id=135143996>]\n"
">>>"
msgstr ""
">>> # Criar uma estrutura de dados recursiva\n"
"... L = [1,2,3]\n"
">>> L.append(L)\n"
">>> L # Mostrar a saída predefinida do Python\n"
"[1, 2, 3, [...]]\n"
">>> # Usar pprint.pprint() como função de apresentação\n"
"... import sys, pprint\n"
">>> sys.displayhook = pprint.pprint\n"
">>> L\n"
"[1, 2, 3,  <Recursão na lista com id=135143996>]\n"
">>>"

#: ../../whatsnew/2.1.rst:503
msgid ":pep:`217` - Display Hook for Interactive Use"
msgstr ":pep:`217` - *Hook* de Apresentação para Uso Interativo"

#: ../../whatsnew/2.1.rst:504
msgid "Written and implemented by Moshe Zadka."
msgstr "Escrito e implementado por Moshe Zadka."

#: ../../whatsnew/2.1.rst:510
msgid "PEP 208: New Coercion Model"
msgstr "PEP 208: Novo Modelo de Coerção"

#: ../../whatsnew/2.1.rst:512
msgid ""
"How numeric coercion is done at the C level was significantly modified.  "
"This will only affect the authors of C extensions to Python, allowing them "
"more flexibility in writing extension types that support numeric operations."
msgstr ""
"A forma como a coerção numérica é realizada ao nível de C foi "
"significativamente modificada. Isto só afetará os autores de extensões em C "
"para Python, permitindo-lhes mais flexibilidade na escrita de tipos de "
"extensão que suportam operações numéricas."

#: ../../whatsnew/2.1.rst:516
msgid ""
"Extension types can now set the type flag ``Py_TPFLAGS_CHECKTYPES`` in their "
"``PyTypeObject`` structure to indicate that they support the new coercion "
"model. In such extension types, the numeric slot functions can no longer "
"assume that they'll be passed two arguments of the same type; instead they "
"may be passed two arguments of differing types, and can then perform their "
"own internal coercion. If the slot function is passed a type it can't "
"handle, it can indicate the failure by returning a reference to the "
"``Py_NotImplemented`` singleton value. The numeric functions of the other "
"type will then be tried, and perhaps they can handle the operation; if the "
"other type also returns ``Py_NotImplemented``, then a :exc:`TypeError` will "
"be raised.  Numeric methods written in Python can also return "
"``Py_NotImplemented``, causing the interpreter to act as if the method did "
"not exist (perhaps raising a :exc:`TypeError`, perhaps trying another "
"object's numeric methods)."
msgstr ""
"Os tipos de extensão podem agora definir a *flag* de tipo "
"``Py_TPFLAGS_CHECKTYPES`` na sua estrutura ``PyTypeObject`` para indicar que "
"suportam o novo modelo de coerção. Nestes tipos de extensão, as funções de "
"*slot* numéricas já não podem assumir que receberão dois argumentos do mesmo "
"tipo; em vez disso, podem receber dois argumentos de tipos diferentes e "
"podem então realizar a sua própria coerção interna. Se a função de *slot* "
"receber um tipo que não consiga tratar, pode indicar a falha ao devolver uma "
"referência ao valor *singleton* ``Py_NotImplemented``. As funções numéricas "
"do outro tipo serão então tentadas, e talvez consigam tratar a operação; se "
"o outro tipo também devolver ``Py_NotImplemented``, será gerada uma exceção :"
"exc:`TypeError`. Métodos numéricos escritos em Python também podem devolver "
"``Py_NotImplemented``, fazendo com que o interpretador aja como se o método "
"não existisse (talvez gerando uma exceção :exc:`TypeError`, ou tentando os "
"métodos numéricos de outro objeto)."

#: ../../whatsnew/2.1.rst:533
msgid ":pep:`208` - Reworking the Coercion Model"
msgstr ":pep:`208` - Reformulação do Modelo de Coerção"

#: ../../whatsnew/2.1.rst:534
msgid ""
"Written and implemented by Neil Schemenauer, heavily based upon earlier work "
"by Marc-André Lemburg.  Read this to understand the fine points of how "
"numeric operations will now be processed at the C level."
msgstr ""
"Escrito e implementado por Neil Schemenauer, baseado em trabalho anterior de "
"Marc-André Lemburg. Leia isto para compreender os pormenores de como as "
"operações numéricas serão agora processadas ao nível de C."

#: ../../whatsnew/2.1.rst:542
msgid "PEP 241: Metadata in Python Packages"
msgstr "PEP 241: Metadados em Pacotes Python"

#: ../../whatsnew/2.1.rst:544
msgid ""
"A common complaint from Python users is that there's no single catalog of "
"all the Python modules in existence.  T. Middleton's Vaults of Parnassus at "
"``www.vex.net/parnassus/`` (retired in February 2009, `available in the "
"Internet Archive Wayback Machine <https://web.archive.org/web/20090130140102/"
"http://www.vex.net/parnassus/>`_) was the largest catalog of Python modules, "
"but registering software at the Vaults is optional, and many people did not "
"bother."
msgstr ""
"Uma queixa comum dos utilizadores do Python é a inexistência de um catálogo "
"único de todos os módulos Python existentes. O *Vaults of Parnassus* de T. "
"Middleton em ``www.vex.net/parnassus/`` (descontinuado em fevereiro de 2009, "
"`disponível no `Internet Archive Wayback Machine <https://web.archive.org/"
"web/20090130140102/http://www.vex.net/parnassus/>`_)era o maior catálogo de "
"módulos Python, mas o registo de software nos *Vaults* era opcional, e "
"muitas pessoas não se davam ao trabalho."

#: ../../whatsnew/2.1.rst:552
msgid ""
"As a first small step toward fixing the problem, Python software packaged "
"using the Distutils :command:`sdist` command will include a file named :file:"
"`PKG-INFO` containing information about the package such as its name, "
"version, and author (metadata, in cataloguing terminology).  :pep:`241` "
"contains the full list of fields that can be present in the :file:`PKG-INFO` "
"file.  As people began to package their software using Python 2.1, more and "
"more packages will include metadata, making it possible to build automated "
"cataloguing systems and experiment with them.  With the result experience, "
"perhaps it'll be possible to design a really good catalog and then build "
"support for it into Python 2.2. For example, the Distutils :command:`sdist` "
"and :command:`bdist_\\*` commands could support an ``upload`` option that "
"would automatically upload your package to a catalog server."
msgstr ""
"Como primeiro pequeno passo para resolver o problema, o software Python "
"empacotado usando o comando Distutils :command:`sdist` incluirá um ficheiro "
"chamado :file:`PKG-INFO` contendo informações sobre o pacote, como o seu "
"nome, versão e autor (metadados, em terminologia de catalogação). O :pep:"
"`241` contém a lista completa de campos que podem estar presentes no "
"ficheiro :file:`PKG-INFO`. À medida que as pessoas começarem a empacotar o "
"seu software usando o Python 2.1, mais pacotes incluirão metadados, tornando "
"possível construir sistemas de catalogação automatizados e experimentá-los. "
"Com a experiência resultante, talvez seja possível projetar um catálogo "
"realmente bom e depois construir suporte para ele no Python 2.2. Por "
"exemplo, os comandos Distutils :command:`sdist` e :command:`bdist_\\*` "
"poderiam suportar uma opção ``upload`` que enviaria automaticamente o seu "
"pacote para um servidor de catálogo."

#: ../../whatsnew/2.1.rst:565
msgid ""
"You can start creating packages containing :file:`PKG-INFO` even if you're "
"not using Python 2.1, since a new release of the Distutils will be made for "
"users of earlier Python versions.  Version 1.0.2 of the Distutils includes "
"the changes described in :pep:`241`, as well as various bugfixes and "
"enhancements.  It will be available from the Distutils SIG at https://www."
"python.org/community/sigs/current/distutils-sig/."
msgstr ""
"Pode começar a criar pacotes contendo :file:`PKG-INFO` mesmo que não esteja "
"a usar o Python 2.1, pois uma nova versão do Distutils será lançada para "
"utilizadores de versões anteriores do Python. A versão 1.0.2 do Distutils "
"inclui as alterações descritas no :pep:`241`, bem como várias correções de "
"*bugs* e melhorias. Estará disponível no grupo de interesse especial (SIG) "
"do Distutils em https://www.python.org/community/sigs/current/distutils-sig/."

#: ../../whatsnew/2.1.rst:574
msgid ":pep:`241` - Metadata for Python Software Packages"
msgstr ":pep:`241` - Metadados para Pacotes de Software Python"

#: ../../whatsnew/2.1.rst:577
msgid ":pep:`243` - Module Repository Upload Mechanism"
msgstr ":pep:`243` - Mecanismo de Envio de Módulos para Repositório"

#: ../../whatsnew/2.1.rst:578
msgid ""
"Written by Sean Reifschneider, this draft PEP describes a proposed mechanism "
"for uploading  Python packages to a central server."
msgstr ""
"Escrito por Sean Reifschneider, este rascunho de PEP descreve um mecanismo "
"proposto para enviar pacotes Python para um servidor central."

#: ../../whatsnew/2.1.rst:585
msgid "New and Improved Modules"
msgstr "Módulos Novos e Melhorados"

#: ../../whatsnew/2.1.rst:587
msgid ""
"Ka-Ping Yee contributed two new modules: :mod:`!inspect.py`, a module for "
"getting information about live Python code, and :mod:`!pydoc.py`, a module "
"for interactively converting docstrings to HTML or text.  As a bonus, :file:"
"`Tools/scripts/pydoc`, which is now automatically installed, uses :mod:`!"
"pydoc.py` to display documentation given a Python module, package, or class "
"name.  For example, ``pydoc xml.dom`` displays the following::"
msgstr ""
"Ka-Ping Yee contribuiu com dois novos módulos: :mod:`!inspect.py`, um módulo "
"para obter informações sobre código Python em execução, e :mod:`!pydoc.py`, "
"um módulo para converter interativamente *docstrings* em HTML ou texto. Como "
"bónus, o :file:`Tools/scripts/pydoc`, que agora é instalado automaticamente, "
"usa o :mod:`!pydoc.py` para apresentar a documentação de um módulo, pacote "
"ou nome de classe Python. Por exemplo, ``pydoc xml.dom`` apresenta o "
"seguinte::"

#: ../../whatsnew/2.1.rst:594
msgid ""
"Python Library Documentation: package xml.dom in xml\n"
"\n"
"NAME\n"
"    xml.dom - W3C Document Object Model implementation for Python.\n"
"\n"
"FILE\n"
"    /usr/local/lib/python2.1/xml/dom/__init__.pyc\n"
"\n"
"DESCRIPTION\n"
"    The Python mapping of the Document Object Model is documented in the\n"
"    Python Library Reference in the section on the xml.dom package.\n"
"\n"
"    This package contains the following modules:\n"
"      ..."
msgstr ""
"Documentação da Biblioteca Python: pacote xml.dom em xml\n"
"\n"
"NOME\n"
"    xml.dom - Implementação do Modelo de Objeto de Documento (DOM) W3C para "
"Python.\n"
"\n"
"FICHEIRO\n"
"    /usr/local/lib/python2.1/xml/dom/__init__.pyc\n"
"\n"
"DESCRIÇÃO\n"
"    O mapeamento Python do Modelo de Objeto de Documento está documentado "
"na\n"
"    Referência da Biblioteca Python, na secção sobre o pacote xml.dom.\n"
"\n"
"    Este pacote contém os seguintes módulos:\n"
"      ..."

#: ../../whatsnew/2.1.rst:609
msgid ""
":file:`pydoc` also includes a Tk-based interactive help browser.   :file:"
"`pydoc` quickly becomes addictive; try it out!"
msgstr ""
"O :file:`pydoc` também inclui um navegador de ajuda interativo baseado em "
"Tk. O :file:`pydoc` torna-se rapidamente viciante; experimente!"

#: ../../whatsnew/2.1.rst:612
msgid ""
"Two different modules for unit testing were added to the standard library. "
"The :mod:`doctest` module, contributed by Tim Peters, provides a testing "
"framework based on running embedded examples in docstrings and comparing the "
"results against the expected output.  PyUnit, contributed by Steve Purcell, "
"is a unit testing framework inspired by JUnit, which was in turn an "
"adaptation of Kent Beck's Smalltalk testing framework.  See https://pyunit."
"sourceforge.net/ for more information about PyUnit."
msgstr ""
"Dois módulos diferentes para testes unitários foram adicionados à biblioteca "
"padrão. O módulo :mod:`doctest`, contribuído por Tim Peters, fornece um "
"*framework* de teste baseado na execução de exemplos incorporados em "
"*docstrings* e na comparação dos resultados com a saída esperada. O PyUnit, "
"contribuído por Steve Purcell, é um *framework* de testes unitários "
"inspirado no JUnit, que por sua vez foi uma adaptação do *framework* de "
"testes Smalltalk de Kent Beck. Consulte https://pyunit.sourceforge.net/ para "
"mais informações sobre o PyUnit."

#: ../../whatsnew/2.1.rst:620
msgid ""
"The :mod:`difflib` module contains a class, :class:`~difflib."
"SequenceMatcher`, which compares two sequences and computes the changes "
"required to transform one sequence into the other.  For example, this module "
"can be used to write a tool similar to the Unix :program:`diff` program, and "
"in fact the sample program :file:`Tools/scripts/ndiff.py` demonstrates how "
"to write such a script."
msgstr ""
"O módulo :mod:`difflib` contém uma classe, :class:`~difflib."
"SequenceMatcher`, que compara duas sequências e calcula as alterações "
"necessárias para transformar uma sequência noutra. Por exemplo, este módulo "
"pode ser usado para escrever uma ferramenta semelhante ao programa Unix :"
"program:`diff`, e de facto o programa de exemplo :file:`Tools/scripts/ndiff."
"py` demonstra como escrever um script desses."

#: ../../whatsnew/2.1.rst:626
msgid ""
":mod:`curses.panel`, a wrapper for the panel library, part of ncurses and of "
"SYSV curses, was contributed by Thomas Gellekum.  The panel library provides "
"windows with the additional feature of depth. Windows can be moved higher or "
"lower in the depth ordering, and the panel library figures out where panels "
"overlap and which sections are visible."
msgstr ""
"O módulo :mod:`curses.panel`, um *wrapper* para a biblioteca *panel*, parte "
"do ncurses e do SYSV curses, foi contribuído por Thomas Gellekum. A "
"biblioteca *panel* fornece janelas com a funcionalidade adicional de "
"profundidade. As janelas podem ser movidas para cima ou para baixo na "
"ordenação de profundidade, e a biblioteca *panel* determina onde os painéis "
"se sobrepõem e quais as secções visíveis."

#: ../../whatsnew/2.1.rst:632
msgid ""
"The PyXML package has gone through a few releases since Python 2.0, and "
"Python 2.1 includes an updated version of the :mod:`xml` package.  Some of "
"the noteworthy changes include support for Expat 1.2 and later versions, the "
"ability for Expat parsers to handle files in any encoding supported by "
"Python, and various bugfixes for SAX, DOM, and the :mod:`!minidom` module."
msgstr ""
"O pacote PyXML passou por algumas versões desde o Python 2.0, e o Python 2.1 "
"inclui uma versão atualizada do pacote :mod:`xml`. Algumas das alterações "
"notáveis incluem suporte para o Expat 1.2 e versões posteriores, a "
"capacidade dos analisadores Expat lidarem com ficheiros em qualquer "
"codificação suportada pelo Python, e várias correções de *bugs* para SAX, "
"DOM e o módulo :mod:`!minidom`."

#: ../../whatsnew/2.1.rst:638
msgid ""
"Ping also contributed another hook for handling uncaught exceptions. :func:"
"`sys.excepthook` can be set to a callable object.  When an exception isn't "
"caught by any :keyword:`try`...\\ :keyword:`except` blocks, the exception "
"will be passed to :func:`sys.excepthook`, which can then do whatever it "
"likes.  At the Ninth Python Conference, Ping demonstrated an application for "
"this hook: printing an extended traceback that not only lists the stack "
"frames, but also lists the function arguments and the local variables for "
"each frame."
msgstr ""
"Ping também contribuiu com outro *hook* para lidar com exceções não "
"capturadas. :func:`sys.excepthook` pode ser definido como um objeto "
"chamável. Quando uma exceção não é capturada por nenhum bloco :keyword:"
"`try`... :keyword:`except`, a exceção será passada para :func:`sys."
"excepthook`, que pode então fazer o que entender. Na Nona Conferência "
"Python, Ping demonstrou uma aplicação para este *hook*: imprimir um "
"*traceback* estendido que não só lista os *frames* da pilha, como também "
"lista os argumentos da função e as variáveis locais para cada *frame*."

#: ../../whatsnew/2.1.rst:646
msgid ""
"Various functions in the :mod:`time` module, such as :func:`~time.asctime` "
"and :func:`~time.localtime`, require a floating-point argument containing "
"the time in seconds since the epoch.  The most common use of these functions "
"is to work with the current time, so the floating-point argument has been "
"made optional; when a value isn't provided, the current time will be used.  "
"For example, log file entries usually need a string containing the current "
"time; in Python 2.1, ``time.asctime()`` can be used, instead of the "
"lengthier ``time.asctime(time.localtime(time.time()))`` that was previously "
"required."
msgstr ""
"Várias funções no módulo :mod:`time`, como :func:`~time.asctime` e :func:"
"`~time.localtime`, requerem um argumento de ponto flutuante contendo o tempo "
"em segundos desde a época. O uso mais comum destas funções é trabalhar com a "
"hora atual, pelo que o argumento de ponto flutuante foi tornado opcional; "
"quando um valor não é fornecido, a hora atual será usada. Por exemplo, as "
"entradas em ficheiros de registo (*log*) geralmente precisam de uma string "
"contendo a hora atual; no Python 2.1, pode ser usado ``time.asctime()``, em "
"vez do mais longo ``time.asctime(time.localtime(time.time()))`` que era "
"anteriormente necessário."

#: ../../whatsnew/2.1.rst:655
msgid "This change was proposed and implemented by Thomas Wouters."
msgstr "Esta alteração foi proposta e implementada por Thomas Wouters."

#: ../../whatsnew/2.1.rst:657
msgid ""
"The :mod:`ftplib` module now defaults to retrieving files in passive mode, "
"because passive mode is more likely to work from behind a firewall.  This "
"request came from the Debian bug tracking system, since other Debian "
"packages use :mod:`ftplib` to retrieve files and then don't work from behind "
"a firewall. It's deemed unlikely that this will cause problems for anyone, "
"because Netscape defaults to passive mode and few people complain, but if "
"passive mode is unsuitable for your application or network setup, call "
"``set_pasv(0)`` on FTP objects to disable passive mode."
msgstr ""
"O módulo :mod:`ftplib` agora usa por predefinição o modo passivo para "
"recuperar ficheiros, pois o modo passivo é mais provável de funcionar a "
"partir de trás de uma *firewall*. Este pedido veio do sistema de "
"acompanhamento de *bugs* do Debian, uma vez que outros pacotes Debian usam "
"o :mod:`ftplib` para recuperar ficheiros e depois não funcionam a partir de "
"trás de uma *firewall*. Considera-se improvável que isto cause problemas a "
"alguém, pois o Netscape usa o modo passivo por predefinição e poucas pessoas "
"se queixam, mas se o modo passivo não for adequado para a sua aplicação ou "
"configuração de rede, chame ``set_pasv(0)`` em objetos FTP para desativar o "
"modo passivo."

#: ../../whatsnew/2.1.rst:666
msgid ""
"Support for raw socket access has been added to the :mod:`socket` module, "
"contributed by Grant Edwards."
msgstr ""
"Foi adicionado suporte para acesso a *sockets* em modo bruto ao módulo :mod:"
"`socket`, contribuído por Grant Edwards."

#: ../../whatsnew/2.1.rst:669
msgid ""
"The :mod:`pstats` module now contains a simple interactive statistics "
"browser for displaying timing profiles for Python programs, invoked when the "
"module is run as a script.  Contributed by  Eric S. Raymond."
msgstr ""
"O módulo :mod:`pstats` agora contém um navegador interativo simples de "
"estatísticas para apresentar perfis de temporização de programas Python, "
"invocado quando o módulo é executado como um script. Contribuído por Eric S. "
"Raymond."

#: ../../whatsnew/2.1.rst:673
msgid ""
"A new implementation-dependent function, ``sys._getframe([depth])``, has "
"been added to return a given frame object from the current call stack. :func:"
"`sys._getframe` returns the frame at the top of the call stack;  if the "
"optional integer argument *depth* is supplied, the function returns the "
"frame that is *depth* calls below the top of the stack.  For example, ``sys."
"_getframe(1)`` returns the caller's frame object."
msgstr ""
"Foi adicionada uma nova função dependente da implementação, ``sys."
"_getframe([depth])``, para devolver um objeto *frame* específico da pilha de "
"chamadas atual. :func:`sys._getframe` devolve o *frame* no topo da pilha de "
"chamadas; se o argumento inteiro opcional *depth* for fornecido, a função "
"devolve o *frame* que está *depth* chamadas abaixo do topo da pilha. Por "
"exemplo, ``sys._getframe(1)`` devolve o objeto *frame* do chamador."

#: ../../whatsnew/2.1.rst:680
msgid ""
"This function is only present in CPython, not in Jython or the .NET "
"implementation.  Use it for debugging, and resist the temptation to put it "
"into production code."
msgstr ""
"Esta função só está presente no CPython, não no Jython ou na implementação ."
"NET. Use-a para depuração e resista à tentação de a colocar em código de "
"produção."

#: ../../whatsnew/2.1.rst:688
msgid "Other Changes and Fixes"
msgstr "Outras Alterações e Correções"

#: ../../whatsnew/2.1.rst:690
msgid ""
"There were relatively few smaller changes made in Python 2.1 due to the "
"shorter release cycle.  A search through the CVS change logs turns up 117 "
"patches applied, and 136 bugs fixed; both figures are likely to be "
"underestimates.  Some of the more notable changes are:"
msgstr ""
"Devido ao ciclo de lançamento mais curto, foram feitas relativamente poucas "
"alterações menores no Python 2.1. Uma pesquisa nos registos de alterações do "
"CVS revela 117 *patches* aplicados e 136 *bugs* corrigidos; ambos os números "
"são provavelmente subestimados. Algumas das alterações mais notáveis são:"

#: ../../whatsnew/2.1.rst:695
msgid ""
"A specialized object allocator is now optionally available, that should be "
"faster than the system :c:func:`malloc` and have less memory overhead.  The "
"allocator uses C's :c:func:`!malloc` function to get large pools of memory, "
"and then fulfills smaller memory requests from these pools.  It can be "
"enabled by providing the :option:`!--with-pymalloc` option to the :program:"
"`configure` script; see :file:`Objects/obmalloc.c` for the implementation "
"details."
msgstr ""
"Um alocador de objetos especializado está agora opcionalmente disponível, "
"que deve ser mais rápido do que o :c:func:`malloc` do sistema e ter menos "
"sobrecarga de memória. O alocador usa a função :c:func:`!malloc` de C para "
"obter grandes *pools* de memória e depois satisfaz pedidos de memória mais "
"pequenos a partir destes *pools*. Pode ser ativado fornecendo a opção :"
"option:`!--with-pymalloc` ao script :program:`configure`; consulte :file:"
"`Objects/obmalloc.c` para detalhes de implementação."

#: ../../whatsnew/2.1.rst:702
msgid ""
"Authors of C extension modules should test their code with the object "
"allocator enabled, because some incorrect code may break, causing core dumps "
"at runtime. There are a bunch of memory allocation functions in Python's C "
"API that have previously been just aliases for the C library's :c:func:"
"`malloc` and :c:func:`free`, meaning that if you accidentally called "
"mismatched functions, the error wouldn't be noticeable.  When the object "
"allocator is enabled, these functions aren't aliases of :c:func:`!malloc` "
"and :c:func:`!free` any more, and calling the wrong function to free memory "
"will get you a core dump.  For example, if memory was allocated using :c:"
"macro:`PyMem_New`, it has to be freed using :c:func:`PyMem_Del`, not :c:func:"
"`!free`.  A few modules included with Python fell afoul of this and had to "
"be fixed; doubtless there are more third-party modules that will have the "
"same problem."
msgstr ""
"Os autores de módulos de extensão em C devem testar o seu código com o "
"alocador de objetos ativado, pois algum código incorreto pode falhar, "
"causando *core dumps* em tempo de execução. Existem várias funções de "
"alocação de memória na API em C do Python que anteriormente eram apenas "
"*aliases* para :c:func:`malloc` e :c:func:`free` da biblioteca C, o que "
"significava que, se chamasse acidentalmente funções incompatíveis, o erro "
"não seria notado. Quando o alocador de objetos está ativado, estas funções "
"já não são *aliases* de :c:func:`!malloc` e :c:func:`!free`, e chamar a "
"função errada para libertar memória resultará num *core dump*. Por exemplo, "
"se a memória foi alocada usando :c:macro:`PyMem_New`, tem de ser libertada "
"usando :c:func:`PyMem_Del`, não :c:func:`!free`. Alguns módulos incluídos "
"com o Python tiveram problemas com isto e tiveram de ser corrigidos; sem "
"dúvida, haverá mais módulos de terceiros com o mesmo problema."

#: ../../whatsnew/2.1.rst:715
msgid "The object allocator was contributed by Vladimir Marangozov."
msgstr "O alocador de objetos foi contribuído por Vladimir Marangozov."

#: ../../whatsnew/2.1.rst:717
msgid ""
"The speed of line-oriented file I/O has been improved because people often "
"complain about its lack of speed, and because it's often been used as a "
"naïve benchmark.  The :meth:`readline` method of file objects has therefore "
"been rewritten to be much faster.  The exact amount of the speedup will vary "
"from platform to platform depending on how slow the C library's :c:func:`!"
"getc` was, but is around 66%, and potentially much faster on some particular "
"operating systems. Tim Peters did much of the benchmarking and coding for "
"this change, motivated by a discussion in comp.lang.python."
msgstr ""
"A velocidade de I/O de ficheiros orientada a linhas foi melhorada, pois as "
"pessoas frequentemente se queixam da sua falta de velocidade e porque é "
"muitas vezes usada como um *benchmark* ingénuo. O método :meth:`readline` "
"dos objetos de ficheiro foi, portanto, reescrito para ser muito mais rápido. "
"O aumento exato de velocidade variará de plataforma para plataforma, "
"dependendo da lentidão da função :c:func:`!getc` da biblioteca C, mas é de "
"cerca de 66%, e potencialmente muito mais rápido em alguns sistemas "
"operativos específicos. Tim Peters realizou grande parte do *benchmarking* e "
"da programação para esta alteração, motivado por uma discussão em comp.lang."
"python."

#: ../../whatsnew/2.1.rst:726
msgid ""
"A new module and method for file objects was also added, contributed by Jeff "
"Epler. The new method, :meth:`!xreadlines`, is similar to the existing :func:"
"`!xrange` built-in.  :func:`!xreadlines` returns an opaque sequence object "
"that only supports being iterated over, reading a line on every iteration "
"but not reading the entire file into memory as the existing :meth:`!"
"readlines` method does. You'd use it like this::"
msgstr ""
"Foi também adicionado um novo módulo e método para objetos de ficheiro, "
"contribuído por Jeff Epler. O novo método, :meth:`!xreadlines`, é semelhante "
"ao :func:`!xrange` integrado. :func:`!xreadlines` devolve um objeto de "
"sequência opaco que só suporta iteração, lendo uma linha em cada iteração, "
"mas não lendo o ficheiro inteiro para a memória, como faz o método :meth:`!"
"readlines` existente. Usá-lo-ia assim::"

#: ../../whatsnew/2.1.rst:733
msgid ""
"for line in sys.stdin.xreadlines():\n"
"    # ... do something for each line ...\n"
"    ..."
msgstr ""
"for line in sys.stdin.xreadlines():\n"
"    # ... fazer algo para cada linha ...\n"
"    ..."

#: ../../whatsnew/2.1.rst:737
msgid ""
"For a fuller discussion of the line I/O changes, see the python-dev summary "
"for January 1--15, 2001 at https://mail.python.org/pipermail/python-dev/2001-"
"January/."
msgstr ""
"Para uma discussão mais completa sobre as alterações de I/O de linhas, "
"consulte o resumo do python-dev para 1 a 15 de janeiro de 2001 em https://"
"mail.python.org/pipermail/python-dev/2001-January/."

#: ../../whatsnew/2.1.rst:740
msgid ""
"A new method, :meth:`~dict.popitem`, was added to dictionaries to enable "
"destructively iterating through the contents of a dictionary; this can be "
"faster for large dictionaries because there's no need to construct a list "
"containing all the keys or values. ``D.popitem()`` removes a random ``(key, "
"value)`` pair from the dictionary ``D`` and returns it as a 2-tuple.  This "
"was implemented mostly by Tim Peters and Guido van Rossum, after a "
"suggestion and preliminary patch by Moshe Zadka."
msgstr ""
"Foi adicionado um novo método, :meth:`~dict.popitem`, aos dicionários para "
"permitir iterar de forma destrutiva pelos conteúdos de um dicionário; isto "
"pode ser mais rápido para dicionários grandes, pois não é necessário "
"construir uma lista com todas as chaves ou valores. ``D.popitem()`` remove "
"um par ``(key, value)`` aleatório do dicionário ``D`` e devolve-o como um "
"tuplo de 2 elementos. Isto foi implementado principalmente por Tim Peters e "
"Guido van Rossum, após uma sugestão e um *patch* preliminar de Moshe Zadka."

#: ../../whatsnew/2.1.rst:748
msgid ""
"Modules can now control which names are imported when ``from module import "
"*`` is used, by defining an ``__all__`` attribute containing a list of names "
"that will be imported.  One common complaint is that if the module imports "
"other modules such as :mod:`sys` or :mod:`string`, ``from module import *`` "
"will add them to the importing module's namespace.  To fix this, simply list "
"the public names in ``__all__``::"
msgstr ""
"Os módulos podem agora controlar quais os nomes importados quando é usado "
"``from module import *``, definindo um atributo ``__all__`` que contém uma "
"lista de nomes a importar. Uma queixa comum é que, se o módulo importar "
"outros módulos como :mod:`sys` ou :mod:`string`, ``from module import *`` "
"adicionará esses módulos ao *namespace* do módulo importador. Para resolver "
"isto, basta listar os nomes públicos em ``__all__``::"

#: ../../whatsnew/2.1.rst:755
msgid ""
"# List public names\n"
"__all__ = ['Database', 'open']"
msgstr ""
"# Lista de nomes públicos\n"
"__all__ = ['Database', 'open']"

#: ../../whatsnew/2.1.rst:758
msgid ""
"A stricter version of this patch was first suggested and implemented by Ben "
"Wolfson, but after some python-dev discussion, a weaker final version was "
"checked in."
msgstr ""
"Uma versão mais restritiva deste *patch* foi inicialmente sugerida e "
"implementada por Ben Wolfson, mas após alguma discussão na lista python-dev, "
"uma versão final mais flexível foi integrada."

#: ../../whatsnew/2.1.rst:762
msgid ""
"Applying :func:`repr` to strings previously used octal escapes for non-"
"printable characters; for example, a newline was ``'\\012'``.  This was a "
"vestigial trace of Python's C ancestry, but today octal is of very little "
"practical use.  Ka-Ping Yee suggested using hex escapes instead of octal "
"ones, and using the ``\\n``, ``\\t``, ``\\r`` escapes for the appropriate "
"characters, and implemented this new formatting."
msgstr ""
"A aplicação de :func:`repr` a strings usava anteriormente escapes octais "
"para caracteres não imprimíveis; por exemplo, uma nova linha era "
"``'\\012'``. Isto era um vestígio da ancestralidade em C do Python, mas hoje "
"o octal tem muito pouca utilidade prática. Ka-Ping Yee sugeriu o uso de "
"escapes hexadecimais em vez de octais, e o uso dos escapes ``\\n``, ``\\t``, "
"``\\r`` para os caracteres apropriados, e implementou esta nova formatação."

#: ../../whatsnew/2.1.rst:769
msgid ""
"Syntax errors detected at compile-time can now raise exceptions containing "
"the filename and line number of the error, a pleasant side effect of the "
"compiler reorganization done by Jeremy Hylton."
msgstr ""
"Erros de sintaxe detetados em tempo de compilação podem agora gerar exceções "
"que contêm o nome do ficheiro e o número da linha do erro, um efeito "
"secundário agradável da reorganização do compilador feita por Jeremy Hylton."

#: ../../whatsnew/2.1.rst:773
msgid ""
"C extensions which import other modules have been changed to use :c:func:"
"`PyImport_ImportModule`, which means that they will use any import hooks "
"that have been installed.  This is also encouraged for third-party "
"extensions that need to import some other module from C code."
msgstr ""
"As extensões em C que importam outros módulos foram alteradas para usar :c:"
"func:`PyImport_ImportModule`, o que significa que usarão quaisquer *hooks* "
"de importação que tenham sido instalados. Isto é também encorajado para "
"extensões de terceiros que precisam de importar outros módulos a partir de "
"código C."

#: ../../whatsnew/2.1.rst:778
msgid ""
"The size of the Unicode character database was shrunk by another 340K thanks "
"to Fredrik Lundh."
msgstr ""
"O tamanho da base de dados de caracteres Unicode foi reduzido em mais 340K "
"graças a Fredrik Lundh."

#: ../../whatsnew/2.1.rst:781
msgid ""
"Some new ports were contributed: MacOS X (by Steven Majewski), Cygwin (by "
"Jason Tishler); RISCOS (by Dietmar Schwertberger); Unixware 7  (by Billy G. "
"Allie)."
msgstr ""
"Foram contribuídas algumas novas portagens: MacOS X (por Steven Majewski), "
"Cygwin (por Jason Tishler), RISCOS (por Dietmar Schwertberger) e Unixware 7 "
"(por Billy G. Allie)."

#: ../../whatsnew/2.1.rst:785
msgid ""
"And there's the usual list of minor bugfixes, minor memory leaks, docstring "
"edits, and other tweaks, too lengthy to be worth itemizing; see the CVS logs "
"for the full details if you want them."
msgstr ""
"E há a habitual lista de pequenas correções de *bugs*, pequenas fugas de "
"memória, edições de *docstrings* e outros ajustes, demasiado longa para ser "
"detalhada; consulte os registos do CVS para obter todos os detalhes, se os "
"desejar."

#: ../../whatsnew/2.1.rst:793
msgid "Acknowledgements"
msgstr "Agradecimentos"

#: ../../whatsnew/2.1.rst:795
msgid ""
"The author would like to thank the following people for offering suggestions "
"on various drafts of this article: Graeme Cross, David Goodger, Jay Graves, "
"Michael Hudson, Marc-André Lemburg, Fredrik Lundh, Neil Schemenauer, Thomas "
"Wouters."
msgstr ""
"O autor gostaria de agradecer às seguintes pessoas por terem oferecido "
"sugestões sobre vários rascunhos deste artigo: Graeme Cross, David Goodger, "
"Jay Graves, Michael Hudson, Marc-André Lemburg, Fredrik Lundh, Neil "
"Schemenauer e Thomas Wouters."
