# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-23 15:59+0000\n"
"PO-Revision-Date: 2025-07-18 19:59+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../whatsnew/2.3.rst:3
msgid "What's New in Python 2.3"
msgstr "Novidades do Python 2.3"

#: ../../whatsnew/2.3.rst:0
msgid "Author"
msgstr "Autor"

#: ../../whatsnew/2.3.rst:5
msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

#: ../../whatsnew/2.3.rst:11
msgid ""
"This article explains the new features in Python 2.3.  Python 2.3 was "
"released on July 29, 2003."
msgstr ""
"Este artigo explica as novas funcionalidades do Python 2.3. O Python 2.3 foi "
"lançado a 29 de julho de 2003."

#: ../../whatsnew/2.3.rst:14
msgid ""
"The main themes for Python 2.3 are polishing some of the features added in "
"2.2, adding various small but useful enhancements to the core language, and "
"expanding the standard library.  The new object model introduced in the "
"previous version has benefited from 18 months of bugfixes and from "
"optimization efforts that have improved the performance of new-style "
"classes.  A few new built-in functions have been added such as :func:`sum` "
"and :func:`enumerate`.  The :keyword:`in` operator can now be used for "
"substring searches (e.g. ``\"ab\" in \"abc\"`` returns :const:`True`)."
msgstr ""
"Os principais temas do Python 2.3 são o aperfeiçoamento de algumas das "
"funcionalidades adicionadas na versão 2.2, a adição de várias melhorias "
"pequenas, mas úteis, à linguagem principal, e a expansão da biblioteca "
"padrão. O novo modelo de objetos introduzido na versão anterior beneficiou "
"de 18 meses de correções de *bugs* e de esforços de otimização que "
"melhoraram o desempenho das classes do novo estilo. Algumas novas funções "
"integradas foram adicionadas, como :func:`sum` e :func:`enumerate`. O "
"operador :keyword:`in` pode agora ser usado para pesquisas de substrings "
"(por exemplo, ``\"ab\" in \"abc\"`` devolve :const:`True`)."

#: ../../whatsnew/2.3.rst:23
msgid ""
"Some of the many new library features include Boolean, set, heap, and date/"
"time data types, the ability to import modules from ZIP-format archives, "
"metadata support for the long-awaited Python catalog, an updated version of "
"IDLE, and modules for logging messages, wrapping text, parsing CSV files, "
"processing command-line options, using BerkeleyDB databases...  the list of "
"new and enhanced modules is lengthy."
msgstr ""
"Algumas das muitas novas funcionalidades da biblioteca incluem tipos de "
"dados booleanos, conjuntos (*sets*), *heaps* e data/hora, a capacidade de "
"importar módulos a partir de arquivos ZIP, suporte a metadados para o "
"catálogo Python, uma versão atualizada do IDLE, e módulos para registo de "
"mensagens, formatação de texto, análise de ficheiros CSV, processamento de "
"opções de linha de comandos, utilização de bases de dados BerkeleyDB... A "
"lista de módulos novos e melhorados é extensa."

#: ../../whatsnew/2.3.rst:30
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.3, such as the Python Library "
"Reference and the Python Reference Manual.  If you want to understand the "
"complete implementation and design rationale, refer to the PEP for a "
"particular new feature."
msgstr ""
"Este artigo não tenta fornecer uma especificação completa das novas "
"funcionalidades, mas oferece uma visão geral conveniente. Para detalhes "
"completos, deve consultar a documentação do Python 2.3, como a Referência da "
"Biblioteca Python e o Manual de Referência do Python. Se pretender "
"compreender a implementação completa e a justificação de projeto, consulte o "
"PEP da funcionalidade em questão."

#: ../../whatsnew/2.3.rst:41
msgid "PEP 218: A Standard Set Datatype"
msgstr "PEP 218: Um Tipo de Dados de Conjunto Padrão"

#: ../../whatsnew/2.3.rst:43
msgid ""
"The new :mod:`!sets` module contains an implementation of a set datatype.  "
"The :class:`Set` class is for mutable sets, sets that can have members added "
"and removed.  The :class:`!ImmutableSet` class is for sets that can't be "
"modified, and instances of :class:`!ImmutableSet` can therefore be used as "
"dictionary keys. Sets are built on top of dictionaries, so the elements "
"within a set must be hashable."
msgstr ""
"O novo módulo :mod:`!sets` contém uma implementação de um tipo de dados de "
"conjunto. A classe :class:`Set` é para conjuntos mutáveis, ou seja, "
"conjuntos que podem ter elementos adicionados e removidos. A classe :class:`!"
"ImmutableSet` é para conjuntos imutáveis, que não podem ser modificados, e "
"as instâncias de :class:`!ImmutableSet` podem, por isso, ser usadas como "
"chaves de dicionário. Os conjuntos são construídos sobre dicionários, pelo "
"que os elementos de um conjunto devem ser *hashable*."

#: ../../whatsnew/2.3.rst:50
msgid "Here's a simple example::"
msgstr "Aqui está um exemplo simples::"

#: ../../whatsnew/2.3.rst:52
msgid ""
">>> import sets\n"
">>> S = sets.Set([1,2,3])\n"
">>> S\n"
"Set([1, 2, 3])\n"
">>> 1 in S\n"
"True\n"
">>> 0 in S\n"
"False\n"
">>> S.add(5)\n"
">>> S.remove(3)\n"
">>> S\n"
"Set([1, 2, 5])\n"
">>>"
msgstr ""
">>> import sets\n"
">>> S = sets.Set([1,2,3])\n"
">>> S\n"
"Set([1, 2, 3])\n"
">>> 1 in S\n"
"True\n"
">>> 0 in S\n"
"False\n"
">>> S.add(5)\n"
">>> S.remove(3)\n"
">>> S\n"
"Set([1, 2, 5])\n"
">>>"

#: ../../whatsnew/2.3.rst:66
msgid ""
"The union and intersection of sets can be computed with the :meth:"
"`~frozenset.union` and :meth:`~frozenset.intersection` methods; an "
"alternative notation uses the bitwise operators ``&`` and ``|``. Mutable "
"sets also have in-place versions of these methods, :meth:`!union_update` "
"and :meth:`~frozenset.intersection_update`. ::"
msgstr ""
"A união e a interseção de conjuntos podem ser calculadas com os métodos :"
"meth:`~frozenset.union` e :meth:`~frozenset.intersection`; uma notação "
"alternativa usa os operadores bit a bit ``&`` e ``|``. Os conjuntos mutáveis "
"também têm versões *in-place* destes métodos, :meth:`!union_update` e :meth:"
"`~frozenset.intersection_update`. ::"

#: ../../whatsnew/2.3.rst:71
msgid ""
">>> S1 = sets.Set([1,2,3])\n"
">>> S2 = sets.Set([4,5,6])\n"
">>> S1.union(S2)\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>> S1 | S2                  # Alternative notation\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>> S1.intersection(S2)\n"
"Set([])\n"
">>> S1 & S2                  # Alternative notation\n"
"Set([])\n"
">>> S1.union_update(S2)\n"
">>> S1\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>>"
msgstr ""
">>> S1 = sets.Set([1,2,3])\n"
">>> S2 = sets.Set([4,5,6])\n"
">>> S1.union(S2)\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>> S1 | S2                  # Notação alternativa\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>> S1.intersection(S2)\n"
"Set([])\n"
">>> S1 & S2                  # Notação alternativa\n"
"Set([])\n"
">>> S1.union_update(S2)\n"
">>> S1\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>>"

#: ../../whatsnew/2.3.rst:86
msgid ""
"It's also possible to take the symmetric difference of two sets.  This is "
"the set of all elements in the union that aren't in the intersection.  "
"Another way of putting it is that the symmetric difference contains all "
"elements that are in exactly one set.  Again, there's an alternative "
"notation (``^``), and an in-place version with the ungainly name :meth:"
"`~frozenset.symmetric_difference_update`. ::"
msgstr ""
"Também é possível calcular a diferença simétrica de dois conjuntos. Isto é o "
"conjunto de todos os elementos que estão na união, mas não estão na "
"interseção. Outra forma de o dizer é que a diferença simétrica contém todos "
"os elementos que estão em exatamente um dos conjuntos. Mais uma vez, existe "
"uma notação alternativa (``^``), e uma versão *in-place* com o nome pouco "
"elegante :meth:`~frozenset.symmetric_difference_update`. ::"

#: ../../whatsnew/2.3.rst:92
msgid ""
">>> S1 = sets.Set([1,2,3,4])\n"
">>> S2 = sets.Set([3,4,5,6])\n"
">>> S1.symmetric_difference(S2)\n"
"Set([1, 2, 5, 6])\n"
">>> S1 ^ S2\n"
"Set([1, 2, 5, 6])\n"
">>>"
msgstr ""
">>> S1 = sets.Set([1,2,3,4])\n"
">>> S2 = sets.Set([3,4,5,6])\n"
">>> S1.symmetric_difference(S2)\n"
"Set([1, 2, 5, 6])\n"
">>> S1 ^ S2\n"
"Set([1, 2, 5, 6])\n"
">>>"

#: ../../whatsnew/2.3.rst:100
msgid ""
"There are also :meth:`!issubset` and :meth:`!issuperset` methods for "
"checking whether one set is a subset or superset of another::"
msgstr ""
"Existem também os métodos :meth:`!issubset` e :meth:`!issuperset` para "
"verificar se um conjunto é subconjunto ou superconjunto de outro::"

#: ../../whatsnew/2.3.rst:103
msgid ""
">>> S1 = sets.Set([1,2,3])\n"
">>> S2 = sets.Set([2,3])\n"
">>> S2.issubset(S1)\n"
"True\n"
">>> S1.issubset(S2)\n"
"False\n"
">>> S1.issuperset(S2)\n"
"True\n"
">>>"
msgstr ""
">>> S1 = sets.Set([1,2,3])\n"
">>> S2 = sets.Set([2,3])\n"
">>> S2.issubset(S1)\n"
"True\n"
">>> S1.issubset(S2)\n"
"False\n"
">>> S1.issuperset(S2)\n"
"True\n"
">>>"

#: ../../whatsnew/2.3.rst:116
msgid ":pep:`218` - Adding a Built-In Set Object Type"
msgstr ":pep:`218` - Adição de um Tipo de Objeto de Conjunto Integrado"

#: ../../whatsnew/2.3.rst:117
msgid ""
"PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex Martelli, "
"and GvR."
msgstr ""
"PEP escrito por Greg V. Wilson. Implementado por Greg V. Wilson, Alex "
"Martelli e GvR."

#: ../../whatsnew/2.3.rst:126
msgid "PEP 255: Simple Generators"
msgstr "PEP 255: Geradores Simples"

#: ../../whatsnew/2.3.rst:128
msgid ""
"In Python 2.2, generators were added as an optional feature, to be enabled "
"by a ``from __future__ import generators`` directive.  In 2.3 generators no "
"longer need to be specially enabled, and are now always present; this means "
"that :keyword:`yield` is now always a keyword.  The rest of this section is "
"a copy of the description of generators from the \"What's New in Python "
"2.2\" document; if you read it back when Python 2.2 came out, you can skip "
"the rest of this section."
msgstr ""
"No Python 2.2, os geradores foram adicionados como uma funcionalidade "
"opcional, para ser ativada por uma diretiva ``from __future__ import "
"generators``. No Python 2.3, os geradores já não precisam de ser ativados "
"especialmente e estão agora sempre presentes; isto significa que :keyword:"
"`yield` é agora sempre uma palavra-chave. O resto desta secção é uma cópia "
"da descrição dos geradores do documento \"Novidades do Python 2.2\"; se o "
"leu quando o Python 2.2 foi lançado, pode saltar o resto desta secção."

#: ../../whatsnew/2.3.rst:136
msgid ""
"You're doubtless familiar with how function calls work in Python or C. When "
"you call a function, it gets a private namespace where its local variables "
"are created.  When the function reaches a :keyword:`return` statement, the "
"local variables are destroyed and the resulting value is returned to the "
"caller.  A later call to the same function will get a fresh new set of local "
"variables. But, what if the local variables weren't thrown away on exiting a "
"function? What if you could later resume the function where it left off?  "
"This is what generators provide; they can be thought of as resumable "
"functions."
msgstr ""
"Você certamente está familiarizado com o funcionamento das chamadas de "
"função em Python ou C. Quando você chama uma função, ela obtém um namespace "
"privado onde suas variáveis locais são criadas. Quando a função chega a uma "
"instrução :keyword:`return`, as variáveis locais são destruídas e o valor "
"resultante é retornado ao chamador. Uma chamada posterior à mesma função "
"obterá um novo conjunto de variáveis locais. Mas e se as variáveis locais "
"não fossem descartadas ao sair de uma função? E se você pudesse retomar a "
"função mais tarde, de onde ela parou? É isso que os geradores oferecem; eles "
"podem ser considerados funções retomáveis."

#: ../../whatsnew/2.3.rst:145
msgid "Here's the simplest example of a generator function::"
msgstr "Aqui está o exemplo mais simples de uma função geradora::"

#: ../../whatsnew/2.3.rst:147
msgid ""
"def generate_ints(N):\n"
"    for i in range(N):\n"
"        yield i"
msgstr ""
"def generate_ints(N):\n"
"    for i in range(N):\n"
"        yield i"

#: ../../whatsnew/2.3.rst:151
msgid ""
"A new keyword, :keyword:`yield`, was introduced for generators.  Any "
"function containing a :keyword:`!yield` statement is a generator function; "
"this is detected by Python's bytecode compiler which compiles the function "
"specially as a result."
msgstr ""
"Uma nova palavra-chave, :keyword:`yield`, foi introduzida para os geradores. "
"Qualquer função que contenha uma instrução :keyword:`!yield` é uma função "
"geradora; isto é detetado pelo compilador de *bytecode* do Python, que "
"compila a função de forma especial como resultado."

#: ../../whatsnew/2.3.rst:156
msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator protocol.  "
"On executing the :keyword:`yield` statement, the generator outputs the value "
"of ``i``, similar to a :keyword:`return` statement.  The big difference "
"between :keyword:`!yield` and a :keyword:`!return` statement is that on "
"reaching a :keyword:`!yield` the generator's state of execution is suspended "
"and local variables are preserved.  On the next call to the generator's ``."
"next()`` method, the function will resume executing immediately after the :"
"keyword:`!yield` statement.  (For complicated reasons, the :keyword:`!yield` "
"statement isn't allowed inside the :keyword:`try` block of a :keyword:`!"
"try`...\\ :keyword:`!finally` statement; read :pep:`255` for a full "
"explanation of the interaction between :keyword:`!yield` and exceptions.)"
msgstr ""
"Quando você chama uma função geradora, ela não retorna um único valor; em "
"vez disso, ela retorna um objeto gerador que suporta o protocolo iterador. "
"Ao executar a instrução :keyword:`yield`, o gerador produz o valor de ``i``, "
"semelhante a uma instrução :keyword:`return`. A grande diferença entre :"
"keyword:`!yield` e uma instrução :keyword:`!return` é que, ao atingir um :"
"keyword:`!yield`, o estado de execução do gerador é suspenso e as variáveis "
"locais são preservadas. Na próxima chamada ao método ``.next()`` do gerador, "
"a função retomará a execução imediatamente após a instrução :keyword:`!"
"yield`. (Por razões complicadas, a instrução :keyword:`!yield` não é "
"permitida dentro do bloco :keyword:`try` de uma instrução :keyword:`!try`..."
"\\ :keyword:`!finally`; leia :pep:`255` para uma explicação completa da "
"interação entre :keyword:`!yield` e exceções.)"

#: ../../whatsnew/2.3.rst:169
msgid "Here's a sample usage of the :func:`!generate_ints` generator::"
msgstr "Aqui está um exemplo de uso do gerador :func:`!generate_ints`::"

#: ../../whatsnew/2.3.rst:171
msgid ""
">>> gen = generate_ints(3)\n"
">>> gen\n"
"<generator object at 0x8117f90>\n"
">>> gen.next()\n"
"0\n"
">>> gen.next()\n"
"1\n"
">>> gen.next()\n"
"2\n"
">>> gen.next()\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"  File \"stdin\", line 2, in generate_ints\n"
"StopIteration"
msgstr ""
">>> gen = generate_ints(3)\n"
">>> gen\n"
"<objeto gerador em 0x8117f90>\n"
">>> gen.next()\n"
"0\n"
">>> gen.next()\n"
"1\n"
">>> gen.next()\n"
"2\n"
">>> gen.next()\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"  File \"stdin\", line 2, in generate_ints\n"
"StopIteration"

#: ../../whatsnew/2.3.rst:186
msgid ""
"You could equally write ``for i in generate_ints(5)``, or ``a,b,c = "
"generate_ints(3)``."
msgstr ""
"Poderia igualmente escrever ``for i in generate_ints(5)``, ou ``a,b,c = "
"generate_ints(3)``."

#: ../../whatsnew/2.3.rst:189
msgid ""
"Inside a generator function, the :keyword:`return` statement can only be "
"used without a value, and signals the end of the procession of values; "
"afterwards the generator cannot return any further values. :keyword:`!"
"return` with a value, such as ``return 5``, is a syntax error inside a "
"generator function.  The end of the generator's results can also be "
"indicated by raising :exc:`StopIteration` manually, or by just letting the "
"flow of execution fall off the bottom of the function."
msgstr ""
"Dentro de uma função geradora, a instrução :keyword:`return` só pode ser "
"usada sem um valor, e sinaliza o fim da sequência de valores; depois disso, "
"o gerador não pode devolver mais valores. :keyword:`!return` com um valor, "
"como ``return 5``, é um erro de sintaxe dentro de uma função geradora. O fim "
"dos resultados do gerador também pode ser indicado ao gerar manualmente uma :"
"exc:`StopIteration`, ou simplesmente deixando o fluxo de execução chegar ao "
"fim da função."

#: ../../whatsnew/2.3.rst:197
msgid ""
"You could achieve the effect of generators manually by writing your own "
"class and storing all the local variables of the generator as instance "
"variables.  For example, returning a list of integers could be done by "
"setting ``self.count`` to 0, and having the :meth:`next` method increment "
"``self.count`` and return it. However, for a moderately complicated "
"generator, writing a corresponding class would be much messier. :file:`Lib/"
"test/test_generators.py` contains a number of more interesting examples.  "
"The simplest one implements an in-order traversal of a tree using generators "
"recursively. ::"
msgstr ""
"Poderia alcançar o efeito dos geradores manualmente ao escrever a sua "
"própria classe e armazenar todas as variáveis locais do gerador como "
"variáveis de instância. Por exemplo, devolver uma lista de inteiros poderia "
"ser feito ao definir ``self.count`` para 0, e tendo o método :meth:`next` a "
"incrementar ``self.count`` e devolvê-lo. No entanto, para um gerador "
"moderadamente complicado, escrever uma classe correspondente seria muito "
"mais confuso. O ficheiro :file:`Lib/test/test_generators.py` contém vários "
"exemplos mais interessantes. O mais simples implementa uma travessia em "
"ordem de uma árvore usando geradores de forma recursiva. ::"

#: ../../whatsnew/2.3.rst:206
msgid ""
"# A recursive generator that generates Tree leaves in in-order.\n"
"def inorder(t):\n"
"    if t:\n"
"        for x in inorder(t.left):\n"
"            yield x\n"
"        yield t.label\n"
"        for x in inorder(t.right):\n"
"            yield x"
msgstr ""
"# Um gerador recursivo que gera folhas de Árvore em ordem.\n"
"def inorder(t):\n"
"    if t:\n"
"        for x in inorder(t.left):\n"
"            yield x\n"
"        yield t.label\n"
"        for x in inorder(t.right):\n"
"            yield x"

#: ../../whatsnew/2.3.rst:215
msgid ""
"Two other examples in :file:`Lib/test/test_generators.py` produce solutions "
"for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so that "
"no queen threatens another) and the Knight's Tour (a route that takes a "
"knight to every square of an $NxN$ chessboard without visiting any square "
"twice)."
msgstr ""
"Outros dois exemplos em :file:`Lib/test/test_generators.py` produzem "
"soluções para o problema das $N$-Rainhas (colocar $N$ rainhas num tabuleiro "
"de xadrez $NxN$ de modo a que nenhuma rainha ameace outra) e o Passeio do "
"Cavalo (uma rota que leva um cavalo a todas as casas de um tabuleiro de "
"xadrez $NxN$ sem visitar nenhuma casa duas vezes)."

#: ../../whatsnew/2.3.rst:220
msgid ""
"The idea of generators comes from other programming languages, especially "
"Icon (https://www2.cs.arizona.edu/icon/), where the idea of generators is "
"central.  In Icon, every expression and function call behaves like a "
"generator.  One example from \"An Overview of the Icon Programming "
"Language\" at https://www2.cs.arizona.edu/icon/docs/ipd266.htm gives an idea "
"of what this looks like::"
msgstr ""
"A ideia de geradores vem de outras linguagens de programação, especialmente "
"do Icon (https://www2.cs.arizona.edu/icon/), onde a ideia de geradores é "
"central. No Icon, todas as expressões e chamadas de função comportam-se como "
"geradores. Um exemplo de \"Uma Visão Geral da Linguagem de Programação "
"Icon\" em https://www2.cs.arizona.edu/icon/docs/ipd266.htm dá uma ideia de "
"como isto parece::"

#: ../../whatsnew/2.3.rst:227
msgid ""
"sentence := \"Store it in the neighboring harbor\"\n"
"if (i := find(\"or\", sentence)) > 5 then write(i)"
msgstr ""
"sentence := \"Store it in the neighboring harbor\"\n"
"if (i := find(\"or\", sentence)) > 5 then write(i)"

#: ../../whatsnew/2.3.rst:230
msgid ""
"In Icon the :func:`!find` function returns the indexes at which the "
"substring \"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, ``i`` "
"is first assigned a value of 3, but 3 is less than 5, so the comparison "
"fails, and Icon retries it with the second value of 23.  23 is greater than "
"5, so the comparison now succeeds, and the code prints the value 23 to the "
"screen."
msgstr ""
"No Icon, a função :func:`!find` devolve os índices nos quais a substring "
"\"or\" é encontrada: 3, 23, 33. Na instrução :keyword:`if`, ``i`` é primeiro "
"atribuído com o valor 3, mas 3 é menor que 5, pelo que a comparação falha, e "
"o Icon tenta novamente com o segundo valor, 23. 23 é maior que 5, pelo que a "
"comparação agora tem sucesso, e o código imprime o valor 23 no ecrã."

#: ../../whatsnew/2.3.rst:236
msgid ""
"Python doesn't go nearly as far as Icon in adopting generators as a central "
"concept.  Generators are considered part of the core Python language, but "
"learning or using them isn't compulsory; if they don't solve any problems "
"that you have, feel free to ignore them. One novel feature of Python's "
"interface as compared to Icon's is that a generator's state is represented "
"as a concrete object (the iterator) that can be passed around to other "
"functions or stored in a data structure."
msgstr ""
"O Python não vai tão longe como o Icon na adoção de geradores como um "
"conceito central. Os geradores são considerados parte da linguagem principal "
"do Python, mas aprender ou usá-los não é obrigatório; se não resolverem "
"nenhum problema que tenha, sinta-se à vontade para os ignorar. Uma "
"funcionalidade nova da interface do Python em comparação com a do Icon é que "
"o estado de um gerador é representado como um objeto concreto (o iterador) "
"que pode ser passado para outras funções ou armazenado numa estrutura de "
"dados."

#: ../../whatsnew/2.3.rst:247
msgid ":pep:`255` - Simple Generators"
msgstr ":pep:`255` - Geradores Simples"

#: ../../whatsnew/2.3.rst:248
msgid ""
"Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented "
"mostly by Neil Schemenauer and Tim Peters, with other fixes from the Python "
"Labs crew."
msgstr ""
"Escrito por Neil Schemenauer, Tim Peters e Magnus Lie Hetland. Implementado "
"maioritariamente por Neil Schemenauer e Tim Peters, com outras correções da "
"equipa Python Labs."

#: ../../whatsnew/2.3.rst:257
msgid "PEP 263: Source Code Encodings"
msgstr "PEP 263: Codificações de Código-Fonte"

#: ../../whatsnew/2.3.rst:259
msgid ""
"Python source files can now be declared as being in different character set "
"encodings.  Encodings are declared by including a specially formatted "
"comment in the first or second line of the source file.  For example, a "
"UTF-8 file can be declared with::"
msgstr ""
"Os ficheiros de código-fonte Python podem agora ser declarados como estando "
"em diferentes codificações de caracteres. As codificações são declaradas ao "
"incluir um comentário especialmente formatado na primeira ou segunda linha "
"do ficheiro de código-fonte. Por exemplo, um ficheiro UTF-8 pode ser "
"declarado com::"

#: ../../whatsnew/2.3.rst:264
msgid ""
"#!/usr/bin/env python\n"
"# -*- coding: UTF-8 -*-"
msgstr ""
"#!/usr/bin/env python\n"
"# -*- coding: UTF-8 -*-"

#: ../../whatsnew/2.3.rst:267
msgid ""
"Without such an encoding declaration, the default encoding used is 7-bit "
"ASCII. Executing or importing modules that contain string literals with 8-"
"bit characters and have no encoding declaration will result in a :exc:"
"`DeprecationWarning` being signalled by Python 2.3; in 2.4 this will be a "
"syntax error."
msgstr ""
"Sem tal declaração de codificação, a codificação predefinida usada é ASCII "
"de 7 bits. Executar ou importar módulos que contenham literais de string com "
"caracteres de 8 bits e que não tenham declaração de codificação resultará "
"num :exc:`DeprecationWarning` sinalizado pelo Python 2.3; no 2.4 isto será "
"um erro de sintaxe."

#: ../../whatsnew/2.3.rst:273
msgid ""
"The encoding declaration only affects Unicode string literals, which will be "
"converted to Unicode using the specified encoding.  Note that Python "
"identifiers are still restricted to ASCII characters, so you can't have "
"variable names that use characters outside of the usual alphanumerics."
msgstr ""
"A declaração de codificação afeta apenas literais de string Unicode, que "
"serão convertidos para Unicode usando a codificação especificada. Note que "
"os identificadores do Python ainda estão restritos a caracteres ASCII, pelo "
"que não pode ter nomes de variáveis que usem caracteres fora dos "
"alfanuméricos habituais."

#: ../../whatsnew/2.3.rst:281
msgid ":pep:`263` - Defining Python Source Code Encodings"
msgstr ":pep:`263` - Definição de Codificações de Código-Fonte Python"

#: ../../whatsnew/2.3.rst:282
msgid ""
"Written by Marc-André Lemburg and Martin von Löwis; implemented by Suzuki "
"Hisao and Martin von Löwis."
msgstr ""
"Escrito por Marc-André Lemburg e Martin von Löwis; implementado por Suzuki "
"Hisao e Martin von Löwis."

#: ../../whatsnew/2.3.rst:289
msgid "PEP 273: Importing Modules from ZIP Archives"
msgstr "PEP 273: Importação de Módulos a Partir de Arquivos ZIP"

#: ../../whatsnew/2.3.rst:291
msgid ""
"The new :mod:`zipimport` module adds support for importing modules from a "
"ZIP-format archive.  You don't need to import the module explicitly; it will "
"be automatically imported if a ZIP archive's filename is added to ``sys."
"path``. For example:"
msgstr ""
"O novo módulo :mod:`zipimport` adiciona suporte para importar módulos a "
"partir de um arquivo ZIP. Não precisa de importar o módulo explicitamente; "
"ele será automaticamente importado se o nome de um arquivo ZIP for "
"adicionado a ``sys.path``. Por exemplo:"

#: ../../whatsnew/2.3.rst:296
msgid ""
"amk@nyman:~/src/python$ unzip -l /tmp/example.zip\n"
"Archive:  /tmp/example.zip\n"
"  Length     Date   Time    Name\n"
" --------    ----   ----    ----\n"
"     8467  11-26-02 22:30   jwzthreading.py\n"
" --------                   -------\n"
"     8467                   1 file\n"
"amk@nyman:~/src/python$ ./python\n"
"Python 2.3 (#1, Aug 1 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of "
"path\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'/tmp/example.zip/jwzthreading.py'\n"
">>>"
msgstr ""
"amk@nyman:~/src/python$ unzip -l /tmp/example.zip\n"
"Archive:  /tmp/example.zip\n"
"  Comprimento     Data   Tempo    Nome\n"
" --------    ----   ----    ----\n"
"     8467  11-26-02 22:30   jwzthreading.py\n"
" --------                   -------\n"
"     8467                   1 file\n"
"amk@nyman:~/src/python$ ./python\n"
"Python 2.3 (#1, Aug 1 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, '/tmp/example.zip')  # Adicione o ficheiro .zip ao "
"início do caminho\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'/tmp/example.zip/jwzthreading.py'\n"
">>>"

#: ../../whatsnew/2.3.rst:314
msgid ""
"An entry in ``sys.path`` can now be the filename of a ZIP archive. The ZIP "
"archive can contain any kind of files, but only files named :file:`\\*.py`, :"
"file:`\\*.pyc`, or :file:`\\*.pyo` can be imported.  If an archive only "
"contains :file:`\\*.py` files, Python will not attempt to modify the archive "
"by adding the corresponding :file:`\\*.pyc` file, meaning that if a ZIP "
"archive doesn't contain :file:`\\*.pyc` files, importing may be rather slow."
msgstr ""
"Uma entrada em ``sys.path`` pode agora ser o nome de um arquivo ZIP. O "
"arquivo ZIP pode conter qualquer tipo de ficheiros, mas apenas ficheiros com "
"os nomes :file:`\\*.py`, :file:`\\*.pyc` ou :file:`\\*.pyo` podem ser "
"importados. Se um arquivo contiver apenas ficheiros :file:`\\*.py`, o Python "
"não tentará modificar o arquivo ao adicionar o ficheiro :file:`\\*.pyc` "
"correspondente, o que significa que, se um arquivo ZIP não contiver "
"ficheiros :file:`\\*.pyc`, a importação pode ser bastante lenta."

#: ../../whatsnew/2.3.rst:321
msgid ""
"A path within the archive can also be specified to only import from a "
"subdirectory; for example, the path :file:`/tmp/example.zip/lib/` would only "
"import from the :file:`lib/` subdirectory within the archive."
msgstr ""
"Um caminho dentro do arquivo pode também ser especificado para importar "
"apenas a partir de um subdiretório; por exemplo, o caminho :file:`/tmp/"
"example.zip/lib/` importaria apenas a partir do subdiretório :file:`lib/` "
"dentro do arquivo."

#: ../../whatsnew/2.3.rst:328
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - Importação de Módulos a Partir de Arquivos ZIP"

#: ../../whatsnew/2.3.rst:329
msgid ""
"Written by James C. Ahlstrom,  who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`,  but uses an implementation "
"written by Just van Rossum  that uses the import hooks described in :pep:"
"`302`. See section :ref:`section-pep302` for a description of the new import "
"hooks."
msgstr ""
"Escrito por James C. Ahlstrom, que também forneceu uma implementação. O "
"Python 2.3 segue a especificação no :pep:`273`, mas usa uma implementação "
"escrita por Just van Rossum que utiliza os *hooks* de importação descritos "
"no :pep:`302`. Consulte a secção :ref:`section-pep302` para uma descrição "
"dos novos *hooks* de importação."

#: ../../whatsnew/2.3.rst:338
msgid "PEP 277: Unicode file name support for Windows NT"
msgstr "PEP 277: Suporte a Nomes de Ficheiros Unicode para Windows NT"

#: ../../whatsnew/2.3.rst:340
msgid ""
"On Windows NT, 2000, and XP, the system stores file names as Unicode "
"strings. Traditionally, Python has represented file names as byte strings, "
"which is inadequate because it renders some file names inaccessible."
msgstr ""
"No Windows NT, 2000 e XP, o sistema armazena nomes de ficheiros como strings "
"Unicode. Tradicionalmente, o Python representava nomes de ficheiros como "
"strings de bytes, o que é inadequado porque torna alguns nomes de ficheiros "
"inacessíveis."

#: ../../whatsnew/2.3.rst:344
msgid ""
"Python now allows using arbitrary Unicode strings (within the limitations of "
"the file system) for all functions that expect file names, most notably the :"
"func:`open` built-in function. If a Unicode string is passed to :func:`os."
"listdir`, Python now returns a list of Unicode strings.  A new function, :"
"func:`!os.getcwdu`, returns the current directory as a Unicode string."
msgstr ""
"O Python agora permite o uso de strings Unicode arbitrárias (dentro das "
"limitações do sistema de ficheiros) para todas as funções que esperam nomes "
"de ficheiros, mais notavelmente a função integrada :func:`open`. Se uma "
"string Unicode for passada para :func:`os.listdir`, o Python agora devolve "
"uma lista de strings Unicode. Uma nova função, :func:`!os.getcwdu`, devolve "
"o diretório atual como uma string Unicode."

#: ../../whatsnew/2.3.rst:350
msgid ""
"Byte strings still work as file names, and on Windows Python will "
"transparently convert them to Unicode using the ``mbcs`` encoding."
msgstr ""
"As strings de bytes ainda funcionam como nomes de ficheiros, e no Windows o "
"Python converterá-as transparentemente para Unicode usando a codificação "
"``mbcs``."

#: ../../whatsnew/2.3.rst:353
msgid ""
"Other systems also allow Unicode strings as file names but convert them to "
"byte strings before passing them to the system, which can cause a :exc:"
"`UnicodeError` to be raised. Applications can test whether arbitrary Unicode "
"strings are supported as file names by checking :const:`os.path."
"supports_unicode_filenames`, a Boolean value."
msgstr ""
"Outros sistemas também permitem strings Unicode como nomes de ficheiros, mas "
"convertem-nas para strings de bytes antes de as passar para o sistema, o que "
"pode causar uma exceção :exc:`UnicodeError`. As aplicações podem testar se "
"strings Unicode arbitrárias são suportadas como nomes de ficheiros ao "
"verificar :const:`os.path.supports_unicode_filenames`, um valor booleano."

#: ../../whatsnew/2.3.rst:359
msgid "Under MacOS, :func:`os.listdir` may now return Unicode filenames."
msgstr ""
"No MacOS, :func:`os.listdir` pode agora devolver nomes de ficheiros Unicode."

#: ../../whatsnew/2.3.rst:364
msgid ":pep:`277` - Unicode file name support for Windows NT"
msgstr ":pep:`277` - Suporte a Nomes de Ficheiros Unicode para Windows NT"

#: ../../whatsnew/2.3.rst:365
msgid ""
"Written by Neil Hodgson; implemented by Neil Hodgson, Martin von Löwis, and "
"Mark Hammond."
msgstr ""
"Escrito por Neil Hodgson; implementado por Neil Hodgson, Martin von Löwis e "
"Mark Hammond."

#: ../../whatsnew/2.3.rst:375
msgid "PEP 278: Universal Newline Support"
msgstr "PEP 278: Suporte a Novas Linhas Universais"

#: ../../whatsnew/2.3.rst:377
msgid ""
"The three major operating systems used today are Microsoft Windows, Apple's "
"Macintosh OS, and the various Unix derivatives.  A minor irritation of cross-"
"platform work  is that these three platforms all use different characters to "
"mark the ends of lines in text files.  Unix uses the linefeed (ASCII "
"character 10), MacOS uses the carriage return (ASCII character 13), and "
"Windows uses a two-character sequence of a carriage return plus a newline."
msgstr ""
"Os três principais sistemas operativos usados atualmente são o Microsoft "
"Windows, o Macintosh OS da Apple e as várias derivadas do Unix. Um incómodo "
"menor do trabalho multiplataforma é que estas três plataformas usam "
"caracteres diferentes para marcar o fim das linhas em ficheiros de texto. O "
"Unix usa o *linefeed* (caractere ASCII 10), o MacOS usa o *carriage return* "
"(caractere ASCII 13), e o Windows usa uma sequência de dois caracteres: um "
"*carriage return* seguido de um *newline*."

#: ../../whatsnew/2.3.rst:384
msgid ""
"Python's file objects can now support end of line conventions other than the "
"one followed by the platform on which Python is running. Opening a file with "
"the mode ``'U'`` or ``'rU'`` will open a file for reading in :term:"
"`universal newlines` mode.  All three line ending conventions will be "
"translated to a ``'\\n'`` in the strings returned by the various file "
"methods such as :meth:`!read` and :meth:`!readline`."
msgstr ""
"Os objetos de ficheiro do Python podem agora suportar convenções de fim de "
"linha diferentes daquela seguida pela plataforma na qual o Python está a ser "
"executado. Abrir um ficheiro com o modo ``'U'`` ou ``'rU'`` abrirá um "
"ficheiro para leitura em modo de :term:`novas linhas universais`. Todas as "
"três convenções de fim de linha serão traduzidas para ``'\\n'`` nas strings "
"devolvidas pelos vários métodos de ficheiro, como :meth:`!read` e :meth:`!"
"readline`."

#: ../../whatsnew/2.3.rst:391
msgid ""
"Universal newline support is also used when importing modules and when "
"executing a file with the :func:`!execfile` function.  This means that "
"Python modules can be shared between all three operating systems without "
"needing to convert the line-endings."
msgstr ""
"O suporte a novas linhas universais também é usado ao importar módulos e ao "
"executar um ficheiro com a função :func:`!execfile`. Isto significa que os "
"módulos Python podem ser partilhados entre os três sistemas operativos sem "
"necessidade de converter os fins de linha."

#: ../../whatsnew/2.3.rst:396
msgid ""
"This feature can be disabled when compiling Python by specifying the :option:"
"`!--without-universal-newlines` switch when running Python's :program:"
"`configure` script."
msgstr ""
"Esta funcionalidade pode ser desativada ao compilar o Python, especificando "
"a opção :option:`!--without-universal-newlines` ao executar o script :"
"program:`configure` do Python."

#: ../../whatsnew/2.3.rst:403
msgid ":pep:`278` - Universal Newline Support"
msgstr ":pep:`278` - Suporte a Novas Linhas Universais"

#: ../../whatsnew/2.3.rst:404
msgid "Written and implemented by Jack Jansen."
msgstr "Escrito e implementado por Jack Jansen."

#: ../../whatsnew/2.3.rst:412
msgid "PEP 279: enumerate()"
msgstr "PEP 279: enumerate()"

#: ../../whatsnew/2.3.rst:414
msgid ""
"A new built-in function, :func:`enumerate`, will make certain loops a bit "
"clearer.  ``enumerate(thing)``, where *thing* is either an iterator or a "
"sequence, returns an iterator that will return ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])``, and so forth."
msgstr ""
"Uma nova função integrada, :func:`enumerate`, tornará alguns ciclos um pouco "
"mais claros. ``enumerate(thing)``, onde *thing* é um iterador ou uma "
"sequência, devolve um iterador que devolverá ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])``, e assim sucessivamente."

#: ../../whatsnew/2.3.rst:419
msgid "A common idiom to change every element of a list looks like this::"
msgstr ""
"Um idioma comum para alterar cada elemento de uma lista parece-se com isto::"

#: ../../whatsnew/2.3.rst:421
msgid ""
"for i in range(len(L)):\n"
"    item = L[i]\n"
"    # ... compute some result based on item ...\n"
"    L[i] = result"
msgstr ""
"for i in range(len(L)):\n"
"    item = L[i]\n"
"    # ... calcular algum resultado com base em item ...\n"
"    L[i] = result"

#: ../../whatsnew/2.3.rst:426
msgid "This can be rewritten using :func:`enumerate` as::"
msgstr "Isto pode ser reescrito usando :func:`enumerate` como::"

#: ../../whatsnew/2.3.rst:428
msgid ""
"for i, item in enumerate(L):\n"
"    # ... compute some result based on item ...\n"
"    L[i] = result"
msgstr ""
"for i, item in enumerate(L):\n"
"    # ... calcular algum resultado com base em item ...\n"
"    L[i] = result"

#: ../../whatsnew/2.3.rst:435
msgid ":pep:`279` - The enumerate() built-in function"
msgstr ":pep:`279` - A função integrada enumerate()"

#: ../../whatsnew/2.3.rst:436
msgid "Written and implemented by Raymond D. Hettinger."
msgstr "Escrito e implementado por Raymond D. Hettinger."

#: ../../whatsnew/2.3.rst:442
msgid "PEP 282: The logging Package"
msgstr "PEP 282: O Pacote logging"

#: ../../whatsnew/2.3.rst:444
msgid ""
"A standard package for writing logs, :mod:`logging`, has been added to "
"Python 2.3.  It provides a powerful and flexible mechanism for generating "
"logging output which can then be filtered and processed in various ways.  A "
"configuration file written in a standard format can be used to control the "
"logging behavior of a program.  Python includes handlers that will write log "
"records to standard error or to a file or socket, send them to the system "
"log, or even e-mail them to a particular address; of course, it's also "
"possible to write your own handler classes."
msgstr ""
"Um pacote padrão para escrita de registos (*logs*), :mod:`logging`, foi "
"adicionado ao Python 2.3. Fornece um mecanismo poderoso e flexível para "
"gerar saída de registo que pode depois ser filtrada e processada de várias "
"formas. Um ficheiro de configuração escrito num formato padrão pode ser "
"usado para controlar o comportamento de registo de um programa. O Python "
"inclui *handlers* que escrevem registos para o erro padrão ou para um "
"ficheiro ou *socket*, enviam-nos para o registo do sistema, ou até os enviam "
"por e-mail para um endereço específico; claro que também é possível escrever "
"as suas próprias classes de *handlers*."

#: ../../whatsnew/2.3.rst:453
msgid ""
"The :class:`~logging.Logger` class is the primary class. Most application "
"code will deal with one or more :class:`~logging.Logger` objects, each one "
"used by a particular subsystem of the application. Each :class:`~logging."
"Logger` is identified by a name, and names are organized into a hierarchy "
"using ``.``  as the component separator. For example, you might have :class:"
"`~logging.Logger` instances named ``server``, ``server.auth`` and ``server."
"network``.  The latter two instances are below ``server`` in the hierarchy.  "
"This means that if you turn up the verbosity for ``server`` or direct "
"``server`` messages to a different handler, the changes will also apply to "
"records logged to ``server.auth`` and ``server.network``. There's also a "
"root :class:`~logging.Logger` that's the parent of all other loggers."
msgstr ""
"A classe :class:`~logging.Logger` é a classe principal. A maior parte do "
"código de aplicação lidará com um ou mais objetos :class:`~logging.Logger`, "
"cada um usado por um subsistema particular da aplicação. Cada :class:"
"`~logging.Logger` é identificado por um nome, e os nomes são organizados "
"numa hierarquia usando ``.`` como separador de componentes. Por exemplo, "
"pode ter instâncias de :class:`~logging.Logger` chamadas ``server``, "
"``server.auth`` e ``server.network``. As duas últimas instâncias estão "
"abaixo de ``server`` na hierarquia. Isto significa que, se aumentar a "
"verbosidade para ``server`` ou direcionar as mensagens de ``server`` para um "
"*handler* diferente, as alterações também se aplicarão aos registos feitos "
"em ``server.auth`` e ``server.network``. Existe também um :class:`~logging."
"Logger` raiz que é o progenitor de todos os outros *loggers*."

#: ../../whatsnew/2.3.rst:464
msgid ""
"For simple uses, the :mod:`logging` package contains some convenience "
"functions that always use the root log::"
msgstr ""
"Para usos simples, o pacote :mod:`logging` contém algumas funções de "
"conveniência que usam sempre o registo raiz::"

#: ../../whatsnew/2.3.rst:467
msgid ""
"import logging\n"
"\n"
"logging.debug('Debugging information')\n"
"logging.info('Informational message')\n"
"logging.warning('Warning:config file %s not found', 'server.conf')\n"
"logging.error('Error occurred')\n"
"logging.critical('Critical error -- shutting down')"
msgstr ""
"import logging\n"
"\n"
"logging.debug('Informação de depuração')\n"
"logging.info('Mensagem informativa')\n"
"logging.warning('Aviso: ficheiro de configuração %s não encontrado', 'server."
"conf')\n"
"logging.error('Ocorreu um erro')\n"
"logging.critical('Erro crítico — a encerrar')"

#: ../../whatsnew/2.3.rst:475 ../../whatsnew/2.3.rst:500
msgid "This produces the following output::"
msgstr "Isto produz a seguinte saída::"

#: ../../whatsnew/2.3.rst:477
msgid ""
"WARNING:root:Warning:config file server.conf not found\n"
"ERROR:root:Error occurred\n"
"CRITICAL:root:Critical error -- shutting down"
msgstr ""
"WARNING:root:Warning:config file server.conf not found\n"
"ERROR:root:Error occurred\n"
"CRITICAL:root:Critical error -- shutting down"

#: ../../whatsnew/2.3.rst:481
msgid ""
"In the default configuration, informational and debugging messages are "
"suppressed and the output is sent to standard error.  You can enable the "
"display of informational and debugging messages by calling the :meth:"
"`~logging.Logger.setLevel` method on the root logger."
msgstr ""
"Na configuração predefinida, as mensagens informativas e de depuração são "
"suprimidas e a saída é enviada para o erro padrão. Pode ativar a exibição de "
"mensagens informativas e de depuração ao chamar o método :meth:`~logging."
"Logger.setLevel` no *logger* raiz."

#: ../../whatsnew/2.3.rst:486
msgid ""
"Notice the :func:`~logging.warning` call's use of string formatting "
"operators; all of the functions for logging messages take the arguments "
"``(msg, arg1, arg2, ...)`` and log the string resulting from ``msg % (arg1, "
"arg2, ...)``."
msgstr ""
"Note o uso de operadores de formatação de strings na chamada :func:`~logging."
"warning`; todas as funções para registar mensagens aceitam os argumentos "
"``(msg, arg1, arg2, ...)`` e registam a string resultante de ``msg % (arg1, "
"arg2, ...)``."

#: ../../whatsnew/2.3.rst:490
msgid ""
"There's also an :func:`~logging.exception` function that records the most "
"recent traceback.  Any of the other functions will also record the traceback "
"if you specify a true value for the keyword argument *exc_info*. ::"
msgstr ""
"Existe também uma função :func:`~logging.exception` que regista o "
"*traceback* mais recente. Qualquer uma das outras funções também registará o "
"*traceback* se especificar um valor verdadeiro para o argumento nomeado "
"*exc_info*. ::"

#: ../../whatsnew/2.3.rst:494
msgid ""
"def f():\n"
"    try:    1/0\n"
"    except: logging.exception('Problem recorded')\n"
"\n"
"f()"
msgstr ""
"def f():\n"
"    try:    1/0\n"
"    except: logging.exception('Problema registado')\n"
"\n"
"f()"

#: ../../whatsnew/2.3.rst:502
msgid ""
"ERROR:root:Problem recorded\n"
"Traceback (most recent call last):\n"
"  File \"t.py\", line 6, in f\n"
"    1/0\n"
"ZeroDivisionError: integer division or modulo by zero"
msgstr ""
"ERROR:root:Problema registado\n"
"Traceback (most recent call last):\n"
"  File \"t.py\", line 6, in f\n"
"    1/0\n"
"ZeroDivisionError: divisão inteira ou módulo por zero"

#: ../../whatsnew/2.3.rst:508
msgid ""
"Slightly more advanced programs will use a logger other than the root "
"logger. The ``getLogger(name)`` function is used to get a particular log, "
"creating it if it doesn't exist yet. ``getLogger(None)`` returns the root "
"logger. ::"
msgstr ""
"Programas ligeiramente mais avançados usarão um *logger* diferente do "
"*logger* raiz. A função ``getLogger(name)`` é usada para obter um registo "
"específico, criando-o se ainda não existir. ``getLogger(None)`` devolve o "
"*logger* raiz. ::"

#: ../../whatsnew/2.3.rst:512
msgid ""
"log = logging.getLogger('server')\n"
" ...\n"
"log.info('Listening on port %i', port)\n"
" ...\n"
"log.critical('Disk full')\n"
" ..."
msgstr ""
"log = logging.getLogger('server')\n"
" ...\n"
"log.info('À escuta na porta %i', port)\n"
" ...\n"
"log.critical('Disco cheio')\n"
" ..."

#: ../../whatsnew/2.3.rst:519
msgid ""
"Log records are usually propagated up the hierarchy, so a message logged to "
"``server.auth`` is also seen by ``server`` and ``root``, but a :class:"
"`~logging.Logger` can prevent this by setting its :attr:`~logging.Logger."
"propagate` attribute to :const:`False`."
msgstr ""
"Os registos são normalmente propagados pela hierarquia, pelo que uma "
"mensagem registada em ``server.auth`` também é vista por ``server`` e "
"``root``, mas um :class:`~logging.Logger` pode evitar isto ao definir o seu "
"atributo :attr:`~logging.Logger.propagate` para :const:`False`."

#: ../../whatsnew/2.3.rst:523
msgid ""
"There are more classes provided by the :mod:`logging` package that can be "
"customized.  When a :class:`~logging.Logger` instance is told to log a "
"message, it creates a :class:`~logging.LogRecord` instance that is sent to "
"any number of different :class:`~logging.Handler` instances.  Loggers and "
"handlers can also have an attached list of filters, and each filter can "
"cause the :class:`~logging.LogRecord` to be ignored or can modify the record "
"before passing it along.  When they're finally output, :class:`~logging."
"LogRecord` instances are converted to text by a :class:`~logging.Formatter` "
"class.  All of these classes can be replaced by your own specially written "
"classes."
msgstr ""
"Existem mais classes fornecidas pelo pacote :mod:`logging` que podem ser "
"personalizadas. Quando uma instância de :class:`~logging.Logger` é instruída "
"para registar uma mensagem, cria uma instância de :class:`~logging."
"LogRecord` que é enviada para qualquer número de instâncias diferentes de :"
"class:`~logging.Handler`. Os *loggers* e os *handlers* também podem ter uma "
"lista anexa de filtros, e cada filtro pode fazer com que o :class:`~logging."
"LogRecord` seja ignorado ou pode modificar o registo antes de o passar "
"adiante. Quando são finalmente produzidos, as instâncias de :class:`~logging."
"LogRecord` são convertidas para texto por uma classe :class:`~logging."
"Formatter`. Todas estas classes podem ser substituídas pelas suas próprias "
"classes especialmente escritas."

#: ../../whatsnew/2.3.rst:533
msgid ""
"With all of these features the :mod:`logging` package should provide enough "
"flexibility for even the most complicated applications.  This is only an "
"incomplete overview of its features, so please see the package's reference "
"documentation for all of the details.  Reading :pep:`282` will also be "
"helpful."
msgstr ""
"Com todas estas funcionalidades, o pacote :mod:`logging` deve fornecer "
"flexibilidade suficiente até para as aplicações mais complicadas. Isto é "
"apenas uma visão geral incompleta das suas funcionalidades, pelo que deve "
"consultar a documentação de referência do pacote para todos os detalhes. A "
"leitura do :pep:`282` também será útil."

#: ../../whatsnew/2.3.rst:541
msgid ":pep:`282` - A Logging System"
msgstr ":pep:`282` - Um Sistema de Registo"

#: ../../whatsnew/2.3.rst:542
msgid "Written by Vinay Sajip and Trent Mick; implemented by Vinay Sajip."
msgstr "Escrito por Vinay Sajip e Trent Mick; implementado por Vinay Sajip."

#: ../../whatsnew/2.3.rst:550
msgid "PEP 285: A Boolean Type"
msgstr "PEP 285: Um Tipo Booleano"

#: ../../whatsnew/2.3.rst:552
msgid ""
"A Boolean type was added to Python 2.3.  Two new constants were added to "
"the :mod:`!__builtin__` module, :const:`True` and :const:`False`.  (:const:"
"`True` and :const:`False` constants were added to the built-ins in Python "
"2.2.1, but the 2.2.1 versions are simply set to integer values of 1 and 0 "
"and aren't a different type.)"
msgstr ""
"Um tipo booleano foi adicionado ao Python 2.3. Duas novas constantes foram "
"adicionadas ao módulo :mod:`!__builtin__`, :const:`True` e :const:`False`. (:"
"const:`True` e :const:`False` foram adicionadas às funções integradas no "
"Python 2.2.1, mas as versões 2.2.1 são simplesmente definidas como valores "
"inteiros 1 e 0 e não são um tipo diferente.)"

#: ../../whatsnew/2.3.rst:558
msgid ""
"The type object for this new type is named :class:`bool`; the constructor "
"for it takes any Python value and converts it to :const:`True` or :const:"
"`False`. ::"
msgstr ""
"O objeto de tipo para este novo tipo é chamado :class:`bool`; o construtor "
"para ele aceita qualquer valor Python e converte-o para :const:`True` ou :"
"const:`False`. ::"

#: ../../whatsnew/2.3.rst:561
msgid ""
">>> bool(1)\n"
"True\n"
">>> bool(0)\n"
"False\n"
">>> bool([])\n"
"False\n"
">>> bool( (1,) )\n"
"True"
msgstr ""
">>> bool(1)\n"
"True\n"
">>> bool(0)\n"
"False\n"
">>> bool([])\n"
"False\n"
">>> bool( (1,) )\n"
"True"

#: ../../whatsnew/2.3.rst:570
msgid ""
"Most of the standard library modules and built-in functions have been "
"changed to return Booleans. ::"
msgstr ""
"A maioria dos módulos da biblioteca padrão e das funções integradas foram "
"alterados para devolver booleanos. ::"

#: ../../whatsnew/2.3.rst:573
msgid ""
">>> obj = []\n"
">>> hasattr(obj, 'append')\n"
"True\n"
">>> isinstance(obj, list)\n"
"True\n"
">>> isinstance(obj, tuple)\n"
"False"
msgstr ""
">>> obj = []\n"
">>> hasattr(obj, 'append')\n"
"True\n"
">>> isinstance(obj, list)\n"
"True\n"
">>> isinstance(obj, tuple)\n"
"False"

#: ../../whatsnew/2.3.rst:581
msgid ""
"Python's Booleans were added with the primary goal of making code clearer.  "
"For example, if you're reading a function and encounter the statement "
"``return 1``, you might wonder whether the ``1`` represents a Boolean truth "
"value, an index, or a coefficient that multiplies some other quantity.  If "
"the statement is ``return True``, however, the meaning of the return value "
"is quite clear."
msgstr ""
"Os booleanos do Python foram adicionados com o objetivo principal de tornar "
"o código mais claro. Por exemplo, se estiver a ler uma função e encontrar a "
"instrução ``return 1``, pode questionar-se se o ``1`` representa um valor "
"booleano verdadeiro, um índice, ou um coeficiente que multiplica alguma "
"outra quantidade. Se a instrução for ``return True``, no entanto, o "
"significado do valor de retorno é bastante claro."

#: ../../whatsnew/2.3.rst:587
msgid ""
"Python's Booleans were *not* added for the sake of strict type-checking.  A "
"very strict language such as Pascal would also prevent you performing "
"arithmetic with Booleans, and would require that the expression in an :"
"keyword:`if` statement always evaluate to a Boolean result.  Python is not "
"this strict and never will be, as :pep:`285` explicitly says.  This means "
"you can still use any expression in an :keyword:`!if` statement, even ones "
"that evaluate to a list or tuple or some random object.  The Boolean type is "
"a subclass of the :class:`int` class so that arithmetic using a Boolean "
"still works. ::"
msgstr ""
"Os booleanos do Python *não* foram adicionados para fins de verificação "
"estrita de tipos. Uma linguagem muito estrita, como o Pascal, também o "
"impediria de realizar aritmética com booleanos e exigiria que a expressão "
"numa instrução :keyword:`if` sempre avaliasse para um resultado booleano. O "
"Python não é tão estrito e nunca será, como o :pep:`285` diz explicitamente. "
"Isto significa que ainda pode usar qualquer expressão numa instrução :"
"keyword:`!if`, mesmo aquelas que avaliam para uma lista, um tuplo ou algum "
"objeto aleatório. O tipo booleano é uma subclasse da classe :class:`int`, "
"pelo que a aritmética com um booleano ainda funciona. ::"

#: ../../whatsnew/2.3.rst:596
msgid ""
">>> True + 1\n"
"2\n"
">>> False + 1\n"
"1\n"
">>> False * 75\n"
"0\n"
">>> True * 75\n"
"75"
msgstr ""
">>> True + 1\n"
"2\n"
">>> False + 1\n"
"1\n"
">>> False * 75\n"
"0\n"
">>> True * 75\n"
"75"

#: ../../whatsnew/2.3.rst:605
msgid ""
"To sum up :const:`True` and :const:`False` in a sentence: they're "
"alternative ways to spell the integer values 1 and 0, with the single "
"difference that :func:`str` and :func:`repr` return the strings ``'True'`` "
"and ``'False'`` instead of ``'1'`` and ``'0'``."
msgstr ""
"Para resumir :const:`True` e :const:`False` numa frase: são formas "
"alternativas de escrever os valores inteiros 1 e 0, com a única diferença de "
"que :func:`str` e :func:`repr` devolvem as strings ``'True'`` e ``'False'`` "
"em vez de ``'1'`` e ``'0'``."

#: ../../whatsnew/2.3.rst:613
msgid ":pep:`285` - Adding a bool type"
msgstr ":pep:`285` - Adição de um tipo booleano"

#: ../../whatsnew/2.3.rst:614
msgid "Written and implemented by GvR."
msgstr "Escrito e implementado por GvR."

#: ../../whatsnew/2.3.rst:620
msgid "PEP 293: Codec Error Handling Callbacks"
msgstr "PEP 293: Funções de Retrocesso para Tratamento de Erros de Codec"

#: ../../whatsnew/2.3.rst:622
msgid ""
"When encoding a Unicode string into a byte string, unencodable characters "
"may be encountered.  So far, Python has allowed specifying the error "
"processing as either \"strict\" (raising :exc:`UnicodeError`), "
"\"ignore\" (skipping the character), or \"replace\" (using a question mark "
"in the output string), with \"strict\" being the default behavior. It may be "
"desirable to specify alternative processing of such errors, such as "
"inserting an XML character reference or HTML entity reference into the "
"converted string."
msgstr ""
"Ao codificar uma string Unicode numa string de bytes, podem ser encontrados "
"caracteres não codificáveis. Até agora, o Python permitia especificar o "
"processamento de erros como \"strict\" (gerando :exc:`UnicodeError`), "
"\"ignore\" (ignorando o caractere) ou \"replace\" (usando um ponto de "
"interrogação na string de saída), sendo \"strict\" o comportamento "
"predefinido. Pode ser desejável especificar um processamento alternativo "
"para tais erros, como inserir uma referência de caractere XML ou uma "
"entidade HTML na string convertida."

#: ../../whatsnew/2.3.rst:630
msgid ""
"Python now has a flexible framework to add different processing strategies.  "
"New error handlers can be added with :func:`codecs.register_error`, and "
"codecs then can access the error handler with :func:`codecs.lookup_error`. "
"An equivalent C API has been added for codecs written in C. The error "
"handler gets the necessary state information such as the string being "
"converted, the position in the string where the error was detected, and the "
"target encoding.  The handler can then either raise an exception or return a "
"replacement string."
msgstr ""
"O Python agora tem um quadro flexível para adicionar diferentes estratégias "
"de processamento. Novos tratadores de erros podem ser adicionados com :func:"
"`codecs.register_error`, e os *codecs* podem depois aceder ao tratador de "
"erros com :func:`codecs.lookup_error`. Foi adicionada uma API C equivalente "
"para *codecs* escritos em C. O tratador de erros obtém a informação de "
"estado necessária, como a string a ser convertida, a posição na string onde "
"o erro foi detetado e a codificação alvo. O tratador pode então gerar uma "
"exceção ou devolver uma string de substituição."

#: ../../whatsnew/2.3.rst:638
msgid ""
"Two additional error handlers have been implemented using this framework: "
"\"backslashreplace\" uses Python backslash quoting to represent unencodable "
"characters and \"xmlcharrefreplace\" emits XML character references."
msgstr ""
"Dois tratadores de erros adicionais foram implementados usando este quadro: "
"\"backslashreplace\" usa a notação de barra invertida do Python para "
"representar caracteres não codificáveis e \"xmlcharrefreplace\" emite "
"referências de caracteres XML."

#: ../../whatsnew/2.3.rst:645
msgid ":pep:`293` - Codec Error Handling Callbacks"
msgstr ":pep:`293` - Funções de Retrocesso para Tratamento de Erros de Codec"

#: ../../whatsnew/2.3.rst:646
msgid "Written and implemented by Walter Dörwald."
msgstr "Escrito e implementado por Walter Dörwald."

#: ../../whatsnew/2.3.rst:654
msgid "PEP 301: Package Index and Metadata for Distutils"
msgstr "PEP 301: Índice de Pacotes e Metadados para Distutils"

#: ../../whatsnew/2.3.rst:656
msgid ""
"Support for the long-requested Python catalog makes its first appearance in "
"2.3."
msgstr ""
"O suporte ao catálogo Python, há muito solicitado, faz a sua primeira "
"aparição no 2.3."

#: ../../whatsnew/2.3.rst:658
msgid ""
"The heart of the catalog is the new Distutils :command:`register` command. "
"Running ``python setup.py register`` will collect the metadata describing a "
"package, such as its name, version, maintainer, description, &c., and send "
"it to a central catalog server.  The resulting catalog is available from "
"https://pypi.org."
msgstr ""
"O cerne do catálogo é o novo comando :command:`register` do Distutils. "
"Executar ``python setup.py register`` recolherá os metadados que descrevem "
"um pacote, como o seu nome, versão, mantenedor, descrição, etc., e enviá-los-"
"á para um servidor de catálogo central. O catálogo resultante está "
"disponível em https://pypi.org."

#: ../../whatsnew/2.3.rst:664
msgid ""
"To make the catalog a bit more useful, a new optional *classifiers* keyword "
"argument has been added to the Distutils :func:`!setup` function.  A list of "
"`Trove <http://catb.org/~esr/trove/>`_-style strings can be supplied to help "
"classify the software."
msgstr ""
"Para tornar o catálogo um pouco mais útil, foi adicionado um novo argumento "
"opcional *classifiers* à função :func:`!setup` do Distutils. Uma lista de "
"strings no estilo `Trove <http://catb.org/~esr/trove/>`_ pode ser fornecida "
"para ajudar a classificar o *software*."

#: ../../whatsnew/2.3.rst:669
msgid ""
"Here's an example :file:`setup.py` with classifiers, written to be "
"compatible with older versions of the Distutils::"
msgstr ""
"Aqui está um exemplo de :file:`setup.py` com classificadores, escrito para "
"ser compatível com versões mais antigas do Distutils::"

#: ../../whatsnew/2.3.rst:672
msgid ""
"from distutils import core\n"
"kw = {'name': \"Quixote\",\n"
"      'version': \"0.5.1\",\n"
"      'description': \"A highly Pythonic Web application framework\",\n"
"      # ...\n"
"      }\n"
"\n"
"if (hasattr(core, 'setup_keywords') and\n"
"    'classifiers' in core.setup_keywords):\n"
"    kw['classifiers'] = \\\n"
"        ['Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n"
"         'Environment :: No Input/Output (Daemon)',\n"
"         'Intended Audience :: Developers'],\n"
"\n"
"core.setup(**kw)"
msgstr ""
"from distutils import core\n"
"kw = {'name': \"Quixote\",\n"
"      'version': \"0.5.1\",\n"
"      'description': \"Um quadro de aplicação Web altamente pythónico\",\n"
"      # ...\n"
"      }\n"
"\n"
"if (hasattr(core, 'setup_keywords') and\n"
"    'classifiers' in core.setup_keywords):\n"
"    kw['classifiers'] = \\\n"
"        ['Topic :: Internet :: WWW/HTTP :: Conteúdo Dinâmico',\n"
"         'Environment :: Sem Entrada/Saída (Daemon)',\n"
"         'Intended Audience :: Programadores'],\n"
"\n"
"core.setup(**kw)"

#: ../../whatsnew/2.3.rst:688
msgid ""
"The full list of classifiers can be obtained by running  ``python setup.py "
"register --list-classifiers``."
msgstr ""
"A lista completa de classificadores pode ser obtida executando ``python "
"setup.py register --list-classifiers``."

#: ../../whatsnew/2.3.rst:694
msgid ":pep:`301` - Package Index and Metadata for Distutils"
msgstr ":pep:`301` - Índice de Pacotes e Metadados para Distutils"

#: ../../whatsnew/2.3.rst:695
msgid "Written and implemented by Richard Jones."
msgstr "Escrito e implementado por Richard Jones."

#: ../../whatsnew/2.3.rst:703
msgid "PEP 302: New Import Hooks"
msgstr "PEP 302: Novos *Hooks* de Importação"

#: ../../whatsnew/2.3.rst:705
msgid ""
"While it's been possible to write custom import hooks ever since the :mod:`!"
"ihooks` module was introduced in Python 1.3, no one has ever been really "
"happy with it because writing new import hooks is difficult and messy.  "
"There have been various proposed alternatives such as the :mod:`!imputil` "
"and :mod:`!iu` modules, but none of them has ever gained much acceptance, "
"and none of them were easily usable from C code."
msgstr ""
"Embora tenha sido possível escrever *hooks* de importação personalizados "
"desde que o módulo :mod:`!ihooks` foi introduzido no Python 1.3, ninguém "
"ficou realmente satisfeito com ele porque escrever novos *hooks* de "
"importação é difícil e confuso. Foram propostas várias alternativas, como os "
"módulos :mod:`!imputil` e :mod:`!iu`, mas nenhuma delas ganhou muita "
"aceitação, e nenhuma delas era facilmente utilizável a partir de código C."

#: ../../whatsnew/2.3.rst:712
msgid ""
":pep:`302` borrows ideas from its predecessors, especially from Gordon "
"McMillan's :mod:`!iu` module.  Three new items  are added to the :mod:`sys` "
"module:"
msgstr ""
"O :pep:`302` retira ideias dos seus antecessores, especialmente do módulo :"
"mod:`!iu` de Gordon McMillan. Três novos itens foram adicionados ao módulo :"
"mod:`sys`:"

#: ../../whatsnew/2.3.rst:716
msgid ""
"``sys.path_hooks`` is a list of callable objects; most  often they'll be "
"classes.  Each callable takes a string containing a path and either returns "
"an importer object that will handle imports from this path or raises an :exc:"
"`ImportError` exception if it can't handle this path."
msgstr ""
"``sys.path_hooks`` é uma lista de objetos chamáveis; na maioria das vezes "
"serão classes. Cada objeto chamável recebe uma string contendo um caminho e "
"ou devolve um objeto importador que tratará das importações a partir desse "
"caminho ou gera uma exceção :exc:`ImportError` se não conseguir tratar desse "
"caminho."

#: ../../whatsnew/2.3.rst:721
msgid ""
"``sys.path_importer_cache`` caches importer objects for each path, so ``sys."
"path_hooks`` will only need to be traversed once for each path."
msgstr ""
"``sys.path_importer_cache`` guarda em *cache* objetos importadores para cada "
"caminho, pelo que ``sys.path_hooks`` só precisará de ser percorrido uma vez "
"para cada caminho."

#: ../../whatsnew/2.3.rst:724
msgid ""
"``sys.meta_path`` is a list of importer objects that will be traversed "
"before ``sys.path`` is checked.  This list is initially empty, but user code "
"can add objects to it.  Additional built-in and frozen modules can be "
"imported by an object added to this list."
msgstr ""
"``sys.meta_path`` é uma lista de objetos importadores que será percorrida "
"antes de ``sys.path`` ser verificado. Esta lista está inicialmente vazia, "
"mas o código do utilizador pode adicionar objetos a ela. Módulos integrados "
"e congelados adicionais podem ser importados por um objeto adicionado a esta "
"lista."

#: ../../whatsnew/2.3.rst:729
msgid ""
"Importer objects must have a single method, ``find_module(fullname, "
"path=None)``.  *fullname* will be a module or package name, e.g. ``string`` "
"or ``distutils.core``.  :meth:`!find_module` must return a loader object "
"that has a single method, ``load_module(fullname)``, that creates and "
"returns the corresponding module object."
msgstr ""
"Os objetos importadores devem ter um único método, ``find_module(fullname, "
"path=None)``. *fullname* será um nome de módulo ou pacote, por exemplo, "
"``string`` ou ``distutils.core``. :meth:`!find_module` deve devolver um "
"objeto carregador que tenha um único método, ``load_module(fullname)``, que "
"cria e devolve o objeto módulo correspondente."

#: ../../whatsnew/2.3.rst:735
msgid ""
"Pseudo-code for Python's new import logic, therefore, looks something like "
"this (simplified a bit; see :pep:`302` for the full details)::"
msgstr ""
"O pseudocódigo para a nova lógica de importação do Python parece-se, "
"portanto, com isto (um pouco simplificado; consulte o :pep:`302` para obter "
"todos os detalhes)::"

#: ../../whatsnew/2.3.rst:738
msgid ""
"for mp in sys.meta_path:\n"
"    loader = mp(fullname)\n"
"    if loader is not None:\n"
"        <module> = loader.load_module(fullname)\n"
"\n"
"for path in sys.path:\n"
"    for hook in sys.path_hooks:\n"
"        try:\n"
"            importer = hook(path)\n"
"        except ImportError:\n"
"            # ImportError, so try the other path hooks\n"
"            pass\n"
"        else:\n"
"            loader = importer.find_module(fullname)\n"
"            <module> = loader.load_module(fullname)\n"
"\n"
"# Not found!\n"
"raise ImportError"
msgstr ""
"for mp in sys.meta_path:\n"
"    loader = mp(fullname)\n"
"    if loader is not None:\n"
"        <module> = loader.load_module(fullname)\n"
"\n"
"for path in sys.path:\n"
"    for hook in sys.path_hooks:\n"
"        try:\n"
"            importer = hook(path)\n"
"        except ImportError:\n"
"            # ImportError, então tente os outros hooks de caminho\n"
"            pass\n"
"        else:\n"
"            loader = importer.find_module(fullname)\n"
"            <module> = loader.load_module(fullname)\n"
"\n"
"# Não encontrado!\n"
"raise ImportError"

#: ../../whatsnew/2.3.rst:760
msgid ":pep:`302` - New Import Hooks"
msgstr ":pep:`302` - Novos *Hooks* de Importação"

#: ../../whatsnew/2.3.rst:761
msgid ""
"Written by Just van Rossum and Paul Moore. Implemented by Just van Rossum."
msgstr ""
"Escrito por Just van Rossum e Paul Moore. Implementado por Just van Rossum."

#: ../../whatsnew/2.3.rst:769
msgid "PEP 305: Comma-separated Files"
msgstr "PEP 305: Ficheiros Separados por Vírgulas"

#: ../../whatsnew/2.3.rst:771
msgid ""
"Comma-separated files are a format frequently used for exporting data from "
"databases and spreadsheets.  Python 2.3 adds a parser for comma-separated "
"files."
msgstr ""
"Os ficheiros separados por vírgulas são um formato frequentemente usado para "
"exportar dados de bases de dados e folhas de cálculo. O Python 2.3 adiciona "
"um analisador para ficheiros separados por vírgulas."

#: ../../whatsnew/2.3.rst:774
msgid "Comma-separated format is deceptively simple at first glance::"
msgstr ""
"O formato separado por vírgulas é enganadoramente simples à primeira vista::"

#: ../../whatsnew/2.3.rst:776
msgid "Costs,150,200,3.95"
msgstr "Custos,150,200,3.95"

#: ../../whatsnew/2.3.rst:778
msgid ""
"Read a line and call ``line.split(',')``: what could be simpler? But toss in "
"string data that can contain commas, and things get more complicated::"
msgstr ""
"Ler uma linha e chamar ``line.split(',')``: o que poderia ser mais simples? "
"Mas se adicionar dados de string que podem conter vírgulas, as coisas ficam "
"mais complicadas::"

#: ../../whatsnew/2.3.rst:781
msgid "\"Costs\",150,200,3.95,\"Includes taxes, shipping, and sundry items\""
msgstr "\"Custos\",150,200,3.95,\"Inclui impostos, envio e itens diversos\""

#: ../../whatsnew/2.3.rst:783
msgid ""
"A big ugly regular expression can parse this, but using the new  :mod:`csv` "
"package is much simpler::"
msgstr ""
"Uma grande expressão regular feia pode analisar isto, mas usar o novo "
"pacote :mod:`csv` é muito mais simples::"

#: ../../whatsnew/2.3.rst:786
msgid ""
"import csv\n"
"\n"
"input = open('datafile', 'rb')\n"
"reader = csv.reader(input)\n"
"for line in reader:\n"
"    print line"
msgstr ""
"import csv\n"
"\n"
"input = open('datafile', 'rb')\n"
"reader = csv.reader(input)\n"
"for line in reader:\n"
"    print line"

#: ../../whatsnew/2.3.rst:793
msgid ""
"The :func:`~csv.reader` function takes a number of different options. The "
"field separator isn't limited to the comma and can be changed to any "
"character, and so can the quoting and line-ending characters."
msgstr ""
"A função :func:`~csv.reader` aceita várias opções diferentes. O separador de "
"campos não está limitado à vírgula e pode ser alterado para qualquer "
"caractere, e o mesmo se aplica aos caracteres de aspas e de fim de linha."

#: ../../whatsnew/2.3.rst:797
msgid ""
"Different dialects of comma-separated files can be defined and registered; "
"currently there are two dialects, both used by Microsoft Excel. A separate :"
"class:`csv.writer` class will generate comma-separated files from a "
"succession of tuples or lists, quoting strings that contain the delimiter."
msgstr ""
"Diferentes dialetos de ficheiros separados por vírgulas podem ser definidos "
"e registados; atualmente existem dois dialetos, ambos usados pelo Microsoft "
"Excel. Uma classe separada :class:`csv.writer` gerará ficheiros separados "
"por vírgulas a partir de uma sucessão de tuplos ou listas, colocando entre "
"aspas as strings que contenham o delimitador."

#: ../../whatsnew/2.3.rst:805
msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - API de Ficheiros CSV"

#: ../../whatsnew/2.3.rst:806
msgid ""
"Written and implemented  by Kevin Altis, Dave Cole, Andrew McNamara, Skip "
"Montanaro, Cliff Wells."
msgstr ""
"Escrito e implementado por Kevin Altis, Dave Cole, Andrew McNamara, Skip "
"Montanaro e Cliff Wells."

#: ../../whatsnew/2.3.rst:815
msgid "PEP 307: Pickle Enhancements"
msgstr "PEP 307: Melhorias ao Pickle"

#: ../../whatsnew/2.3.rst:817
msgid ""
"The :mod:`pickle` and :mod:`!cPickle` modules received some attention during "
"the 2.3 development cycle.  In 2.2, new-style classes could be pickled "
"without difficulty, but they weren't pickled very compactly; :pep:`307` "
"quotes a trivial example where a new-style class results in a pickled string "
"three times longer than that for a classic class."
msgstr ""
"Os módulos :mod:`pickle` e :mod:`!cPickle` receberam alguma atenção durante "
"o ciclo de desenvolvimento do 2.3. No 2.2, as classes do novo estilo podiam "
"ser *pickladas* sem dificuldade, mas não eram *pickladas* de forma muito "
"compacta; o :pep:`307` cita um exemplo trivial em que uma classe do novo "
"estilo resulta numa string *picklada* três vezes mais longa do que a de uma "
"classe clássica."

#: ../../whatsnew/2.3.rst:823
msgid ""
"The solution was to invent a new pickle protocol.  The :func:`pickle.dumps` "
"function has supported a text-or-binary flag  for a long time.  In 2.3, this "
"flag is redefined from a Boolean to an integer: 0 is the old text-mode "
"pickle format, 1 is the old binary format, and now 2 is a new 2.3-specific "
"format.  A new constant, :const:`pickle.HIGHEST_PROTOCOL`, can be used to "
"select the fanciest protocol available."
msgstr ""
"A solução foi inventar um novo protocolo *pickle*. A função :func:`pickle."
"dumps` suporta um *flag* de texto ou binário há muito tempo. No 2.3, este "
"*flag* foi redefinido de um booleano para um inteiro: 0 é o formato *pickle* "
"antigo em modo texto, 1 é o formato binário antigo, e agora 2 é um novo "
"formato específico do 2.3. Uma nova constante, :const:`pickle."
"HIGHEST_PROTOCOL`, pode ser usada para selecionar o protocolo mais "
"sofisticado disponível."

#: ../../whatsnew/2.3.rst:830
msgid ""
"Unpickling is no longer considered a safe operation.  2.2's :mod:`pickle` "
"provided hooks for trying to prevent unsafe classes from being unpickled "
"(specifically, a :attr:`!__safe_for_unpickling__` attribute), but none of "
"this code was ever audited and therefore it's all been ripped out in 2.3.  "
"You should not unpickle untrusted data in any version of Python."
msgstr ""
"A operação de *unpickle* já não é considerada segura. O :mod:`pickle` do 2.2 "
"fornecia *hooks* para tentar evitar que classes inseguras fossem "
"*unpickladas* (especificamente, um atributo :attr:`!"
"__safe_for_unpickling__`), mas nenhum deste código foi alguma vez auditado "
"e, por isso, foi todo removido no 2.3. Não deve fazer *unpickle* de dados "
"não confiáveis em nenhuma versão do Python."

#: ../../whatsnew/2.3.rst:836
msgid ""
"To reduce the pickling overhead for new-style classes, a new interface for "
"customizing pickling was added using three special methods: :meth:`~object."
"__getstate__`, :meth:`~object.__setstate__`, and :meth:`~object."
"__getnewargs__`.  Consult :pep:`307` for the full semantics  of these "
"methods."
msgstr ""
"Para reduzir a sobrecarga de *pickle* para classes do novo estilo, foi "
"adicionada uma nova interface para personalizar o *pickle* usando três "
"métodos especiais: :meth:`~object.__getstate__`, :meth:`~object."
"__setstate__` e :meth:`~object.__getnewargs__`. Consulte o :pep:`307` para "
"obter a semântica completa destes métodos."

#: ../../whatsnew/2.3.rst:841
msgid ""
"As a way to compress pickles yet further, it's now possible to use integer "
"codes instead of long strings to identify pickled classes. The Python "
"Software Foundation will maintain a list of standardized codes; there's also "
"a range of codes for private use.  Currently no codes have been specified."
msgstr ""
"Como forma de comprimir ainda mais os *pickles*, é agora possível usar "
"códigos inteiros em vez de strings longas para identificar classes "
"*pickladas*. A Python Software Foundation manterá uma lista de códigos "
"padronizados; também existe uma gama de códigos para uso privado. "
"Atualmente, nenhum código foi especificado."

#: ../../whatsnew/2.3.rst:849
msgid ":pep:`307` - Extensions to the pickle protocol"
msgstr ":pep:`307` - Extensões ao protocolo *pickle*"

#: ../../whatsnew/2.3.rst:850
msgid "Written and implemented  by Guido van Rossum and Tim Peters."
msgstr "Escrito e implementado por Guido van Rossum e Tim Peters."

#: ../../whatsnew/2.3.rst:858
msgid "Extended Slices"
msgstr "Fatias Estendidas"

#: ../../whatsnew/2.3.rst:860
msgid ""
"Ever since Python 1.4, the slicing syntax has supported an optional third "
"\"step\" or \"stride\" argument.  For example, these are all legal Python "
"syntax: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  This was added to Python "
"at the request of the developers of Numerical Python, which uses the third "
"argument extensively.  However, Python's built-in list, tuple, and string "
"sequence types have never supported this feature, raising a :exc:`TypeError` "
"if you tried it. Michael Hudson contributed a patch to fix this shortcoming."
msgstr ""
"Desde o Python 1.4, a sintaxe de fatiamento suporta um terceiro argumento "
"opcional \"passo\" ou \"stride\". Por exemplo, estas são todas sintaxes "
"Python legais: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``. Isto foi adicionado "
"ao Python a pedido dos desenvolvedores do Numerical Python, que usa "
"extensivamente o terceiro argumento. No entanto, os tipos de sequência "
"integrados do Python, como listas, tuplos e strings, nunca suportaram esta "
"funcionalidade, gerando um :exc:`TypeError` se a tentasse usar. Michael "
"Hudson contribuiu com um *patch* para corrigir esta limitação."

#: ../../whatsnew/2.3.rst:868
msgid ""
"For example, you can now easily extract the elements of a list that have "
"even indexes::"
msgstr ""
"Por exemplo, pode agora extrair facilmente os elementos de uma lista que têm "
"índices pares::"

#: ../../whatsnew/2.3.rst:871
msgid ""
">>> L = range(10)\n"
">>> L[::2]\n"
"[0, 2, 4, 6, 8]"
msgstr ""
">>> L = range(10)\n"
">>> L[::2]\n"
"[0, 2, 4, 6, 8]"

#: ../../whatsnew/2.3.rst:875
msgid ""
"Negative values also work to make a copy of the same list in reverse order::"
msgstr ""
"Valores negativos também funcionam para criar uma cópia da mesma lista em "
"ordem inversa::"

#: ../../whatsnew/2.3.rst:877
msgid ""
">>> L[::-1]\n"
"[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
msgstr ""
">>> L[::-1]\n"
"[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"

#: ../../whatsnew/2.3.rst:880
msgid "This also works for tuples, arrays, and strings::"
msgstr "Isto também funciona para tuplos, *arrays* e strings::"

#: ../../whatsnew/2.3.rst:882
msgid ""
">>> s='abcd'\n"
">>> s[::2]\n"
"'ac'\n"
">>> s[::-1]\n"
"'dcba'"
msgstr ""
">>> s='abcd'\n"
">>> s[::2]\n"
"'ac'\n"
">>> s[::-1]\n"
"'dcba'"

#: ../../whatsnew/2.3.rst:888
msgid ""
"If you have a mutable sequence such as a list or an array you can assign to "
"or delete an extended slice, but there are some differences between "
"assignment to extended and regular slices.  Assignment to a regular slice "
"can be used to change the length of the sequence::"
msgstr ""
"Se tiver uma sequência mutável, como uma lista ou um *array*, pode atribuir "
"ou eliminar uma fatia estendida, mas existem algumas diferenças entre a "
"atribuição a fatias estendidas e fatias regulares. A atribuição a uma fatia "
"regular pode ser usada para alterar o comprimento da sequência::"

#: ../../whatsnew/2.3.rst:893
msgid ""
">>> a = range(3)\n"
">>> a\n"
"[0, 1, 2]\n"
">>> a[1:3] = [4, 5, 6]\n"
">>> a\n"
"[0, 4, 5, 6]"
msgstr ""
">>> a = range(3)\n"
">>> a\n"
"[0, 1, 2]\n"
">>> a[1:3] = [4, 5, 6]\n"
">>> a\n"
"[0, 4, 5, 6]"

#: ../../whatsnew/2.3.rst:900
msgid ""
"Extended slices aren't this flexible.  When assigning to an extended slice, "
"the list on the right hand side of the statement must contain the same "
"number of items as the slice it is replacing::"
msgstr ""
"As fatias estendidas não são tão flexíveis. Ao atribuir a uma fatia "
"estendida, a lista do lado direito da instrução deve conter o mesmo número "
"de itens que a fatia que está a substituir::"

#: ../../whatsnew/2.3.rst:904
msgid ""
">>> a = range(4)\n"
">>> a\n"
"[0, 1, 2, 3]\n"
">>> a[::2]\n"
"[0, 2]\n"
">>> a[::2] = [0, -1]\n"
">>> a\n"
"[0, 1, -1, 3]\n"
">>> a[::2] = [0,1,2]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in ?\n"
"ValueError: attempt to assign sequence of size 3 to extended slice of size 2"
msgstr ""
">>> a = range(4)\n"
">>> a\n"
"[0, 1, 2, 3]\n"
">>> a[::2]\n"
"[0, 2]\n"
">>> a[::2] = [0, -1]\n"
">>> a\n"
"[0, 1, -1, 3]\n"
">>> a[::2] = [0,1,2]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in ?\n"
"ValueError: tentativa de atribuir uma sequência de tamanho 3 a uma fatia "
"estendida de tamanho 2"

#: ../../whatsnew/2.3.rst:917
msgid "Deletion is more straightforward::"
msgstr "A eliminação é mais direta::"

#: ../../whatsnew/2.3.rst:919
msgid ""
">>> a = range(4)\n"
">>> a\n"
"[0, 1, 2, 3]\n"
">>> a[::2]\n"
"[0, 2]\n"
">>> del a[::2]\n"
">>> a\n"
"[1, 3]"
msgstr ""
">>> a = range(4)\n"
">>> a\n"
"[0, 1, 2, 3]\n"
">>> a[::2]\n"
"[0, 2]\n"
">>> del a[::2]\n"
">>> a\n"
"[1, 3]"

#: ../../whatsnew/2.3.rst:928
msgid ""
"One can also now pass slice objects to the :meth:`~object.__getitem__` "
"methods of the built-in sequences::"
msgstr ""
"Agora também é possível passar objetos de fatia aos métodos :meth:`~object."
"__getitem__` das sequências integradas::"

#: ../../whatsnew/2.3.rst:931
msgid ""
">>> range(10).__getitem__(slice(0, 5, 2))\n"
"[0, 2, 4]"
msgstr ""
">>> range(10).__getitem__(slice(0, 5, 2))\n"
"[0, 2, 4]"

#: ../../whatsnew/2.3.rst:934
msgid "Or use slice objects directly in subscripts::"
msgstr "Ou usar objetos de fatia diretamente em subscritos::"

#: ../../whatsnew/2.3.rst:936
msgid ""
">>> range(10)[slice(0, 5, 2)]\n"
"[0, 2, 4]"
msgstr ""
">>> range(10)[slice(0, 5, 2)]\n"
"[0, 2, 4]"

#: ../../whatsnew/2.3.rst:939
msgid ""
"To simplify implementing sequences that support extended slicing, slice "
"objects now have a method ``indices(length)`` which, given the length of a "
"sequence, returns a ``(start, stop, step)`` tuple that can be passed "
"directly to :func:`range`. :meth:`!indices` handles omitted and out-of-"
"bounds indices in a manner consistent with regular slices (and this "
"innocuous phrase hides a welter of confusing details!).  The method is "
"intended to be used like this::"
msgstr ""
"Para simplificar a implementação de sequências que suportam fatiamento "
"estendido, os objetos de fatia agora têm um método ``indices(length)`` que, "
"dado o comprimento de uma sequência, devolve um tuplo ``(start, stop, "
"step)`` que pode ser passado diretamente para :func:`range`. :meth:`!"
"indices` trata índices omitidos e fora dos limites de uma forma consistente "
"com as fatias regulares (e esta frase inócua esconde uma confusão de "
"detalhes complicados!). O método destina-se a ser usado assim::"

#: ../../whatsnew/2.3.rst:946
msgid ""
"class FakeSeq:\n"
"    ...\n"
"    def calc_item(self, i):\n"
"        ...\n"
"    def __getitem__(self, item):\n"
"        if isinstance(item, slice):\n"
"            indices = item.indices(len(self))\n"
"            return FakeSeq([self.calc_item(i) for i in range(*indices)])\n"
"        else:\n"
"            return self.calc_item(i)"
msgstr ""
"class FakeSeq:\n"
"    ...\n"
"    def calc_item(self, i):\n"
"        ...\n"
"    def __getitem__(self, item):\n"
"        if isinstance(item, slice):\n"
"            indices = item.indices(len(self))\n"
"            return FakeSeq([self.calc_item(i) for i in range(*indices)])\n"
"        else:\n"
"            return self.calc_item(i)"

#: ../../whatsnew/2.3.rst:957
msgid ""
"From this example you can also see that the built-in :class:`slice` object "
"is now the type object for the slice type, and is no longer a function.  "
"This is consistent with Python 2.2, where :class:`int`, :class:`str`, etc., "
"underwent the same change."
msgstr ""
"Deste exemplo também pode ver que o objeto integrado :class:`slice` é agora "
"o objeto de tipo para o tipo de fatia e já não é uma função. Isto é "
"consistente com o Python 2.2, onde :class:`int`, :class:`str`, etc., "
"passaram pela mesma mudança."

#: ../../whatsnew/2.3.rst:966
msgid "Other Language Changes"
msgstr "Outras Alterações à Linguagem"

#: ../../whatsnew/2.3.rst:968
msgid ""
"Here are all of the changes that Python 2.3 makes to the core Python "
"language."
msgstr ""
"Aqui estão todas as alterações que o Python 2.3 faz à linguagem principal do "
"Python."

#: ../../whatsnew/2.3.rst:970
msgid ""
"The :keyword:`yield` statement is now always a keyword, as described in "
"section :ref:`section-generators` of this document."
msgstr ""
"A instrução :keyword:`yield` é agora sempre uma palavra-chave, como descrito "
"na secção :ref:`section-generators` deste documento."

#: ../../whatsnew/2.3.rst:973
msgid ""
"A new built-in function :func:`enumerate` was added, as described in "
"section :ref:`section-enumerate` of this document."
msgstr ""
"Foi adicionada uma nova função integrada :func:`enumerate`, como descrito na "
"secção :ref:`section-enumerate` deste documento."

#: ../../whatsnew/2.3.rst:976
msgid ""
"Two new constants, :const:`True` and :const:`False` were added along with "
"the built-in :class:`bool` type, as described in section :ref:`section-bool` "
"of this document."
msgstr ""
"Duas novas constantes, :const:`True` e :const:`False`, foram adicionadas "
"juntamente com o tipo integrado :class:`bool`, como descrito na secção :ref:"
"`section-bool` deste documento."

#: ../../whatsnew/2.3.rst:980
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer.  This can lead to the paradoxical result "
"that ``isinstance(int(expression), int)`` is false, but that seems unlikely "
"to cause problems in practice."
msgstr ""
"O construtor de tipo :func:`int` agora devolverá um inteiro longo em vez de "
"gerar um :exc:`OverflowError` quando uma string ou um número de vírgula "
"flutuante for demasiado grande para caber num inteiro. Isto pode levar ao "
"resultado paradoxal de que ``isinstance(int(expression), int)`` é falso, mas "
"isso parece pouco provável de causar problemas na prática."

#: ../../whatsnew/2.3.rst:986
msgid ""
"Built-in types now support the extended slicing syntax, as described in "
"section :ref:`section-slices` of this document."
msgstr ""
"Os tipos integrados agora suportam a sintaxe de fatiamento estendido, como "
"descrito na secção :ref:`section-slices` deste documento."

#: ../../whatsnew/2.3.rst:989
msgid ""
"A new built-in function, ``sum(iterable, start=0)``,  adds up the numeric "
"items in the iterable object and returns their sum.  :func:`sum` only "
"accepts numbers, meaning that you can't use it to concatenate a bunch of "
"strings. (Contributed by Alex Martelli.)"
msgstr ""
"Uma nova função integrada, ``sum(iterable, start=0)``, soma os itens "
"numéricos no objeto iterável e devolve a sua soma. :func:`sum` só aceita "
"números, o que significa que não a pode usar para concatenar um conjunto de "
"strings. (Contribuído por Alex Martelli.)"

#: ../../whatsnew/2.3.rst:994
msgid ""
"``list.insert(pos, value)`` used to  insert *value* at the front of the list "
"when *pos* was negative.  The behaviour has now been changed to be "
"consistent with slice indexing, so when *pos* is -1 the value will be "
"inserted before the last element, and so forth."
msgstr ""
"``list.insert(pos, value)`` costumava inserir *value* no início da lista "
"quando *pos* era negativo. O comportamento foi agora alterado para ser "
"consistente com a indexação de fatias, pelo que, quando *pos* é -1, o valor "
"será inserido antes do último elemento, e assim sucessivamente."

#: ../../whatsnew/2.3.rst:999
msgid ""
"``list.index(value)``, which searches for *value*  within the list and "
"returns its index, now takes optional  *start* and *stop* arguments to limit "
"the search to  only part of the list."
msgstr ""
"``list.index(value)``, que procura *value* na lista e retorna o seu índice, "
"agora aceita argumentos opcionais *start* e *stop* para limitar a pesquisa a "
"apenas uma parte da lista."

#: ../../whatsnew/2.3.rst:1003
msgid ""
"Dictionaries have a new method, ``pop(key[, *default*])``, that returns the "
"value corresponding to *key* and removes that key/value pair from the "
"dictionary.  If the requested key isn't present in the dictionary, *default* "
"is returned if it's specified and :exc:`KeyError` raised if it isn't. ::"
msgstr ""
"Os dicionários têm um novo método, ``pop(key[, *default*])``, que devolve o "
"valor correspondente a *chave* e remove esse par chave/valor do dicionário. "
"Se a chave solicitada não estiver presente no dicionário, *predefinido* é "
"devolvido se estiver especificado e uma exceção :exc:`KeyError` é gerada se "
"não estiver. ::"

#: ../../whatsnew/2.3.rst:1008
msgid ""
">>> d = {1:2}\n"
">>> d\n"
"{1: 2}\n"
">>> d.pop(4)\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"KeyError: 4\n"
">>> d.pop(1)\n"
"2\n"
">>> d.pop(1)\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"KeyError: 'pop(): dictionary is empty'\n"
">>> d\n"
"{}\n"
">>>"
msgstr ""
">>> d = {1:2}\n"
">>> d\n"
"{1: 2}\n"
">>> d.pop(4)\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"KeyError: 4\n"
">>> d.pop(1)\n"
"2\n"
">>> d.pop(1)\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"KeyError: 'pop(): o dicionário está vazio'\n"
">>> d\n"
"{}\n"
">>>"

#: ../../whatsnew/2.3.rst:1025
msgid ""
"There's also a new class method,  ``dict.fromkeys(iterable, value)``, that "
"creates a dictionary with keys taken from the supplied iterator *iterable* "
"and all values set to *value*, defaulting to ``None``."
msgstr ""
"Também existe um novo método de classe, ``dict.fromkeys(iterable, value)``, "
"que cria um dicionário com chaves retiradas do iterável fornecido *iterável* "
"e todos os valores definidos para *valor*, com o valor predefinido ``None``."

#: ../../whatsnew/2.3.rst:1029
msgid "(Patches contributed by Raymond Hettinger.)"
msgstr "(Correções contribuídas por Raymond Hettinger.)"

#: ../../whatsnew/2.3.rst:1031
msgid ""
"Also, the :func:`dict` constructor now accepts keyword arguments to simplify "
"creating small dictionaries::"
msgstr ""
"Além disso, o construtor :func:`dict` agora aceita argumentos nomeados para "
"simplificar a criação de pequenos dicionários::"

#: ../../whatsnew/2.3.rst:1034
msgid ""
">>> dict(red=1, blue=2, green=3, black=4)\n"
"{'blue': 2, 'black': 4, 'green': 3, 'red': 1}"
msgstr ""
">>> dict(vermelho=1, azul=2, verde=3, preto=4)\n"
"{'azul': 2, 'preto': 4, 'verde': 3, 'vermelho': 1}"

#: ../../whatsnew/2.3.rst:1037
msgid "(Contributed by Just van Rossum.)"
msgstr "(Contribuído por Just van Rossum.)"

#: ../../whatsnew/2.3.rst:1039
msgid ""
"The :keyword:`assert` statement no longer checks the ``__debug__`` flag, so "
"you can no longer disable assertions by assigning to ``__debug__``. Running "
"Python with the :option:`-O` switch will still generate code that doesn't "
"execute any assertions."
msgstr ""
"A instrução :keyword:`assert` já não verifica a *flag* ``__debug__``, pelo "
"que já não pode desativar afirmações ao atribuir a ``__debug__``. Executar o "
"Python com a opção :option:`-O` ainda gerará código que não executa nenhuma "
"afirmação."

#: ../../whatsnew/2.3.rst:1044
msgid ""
"Most type objects are now callable, so you can use them to create new "
"objects such as functions, classes, and modules.  (This means that the :mod:"
"`!new` module can be deprecated in a future Python version, because you can "
"now use the type objects available in the :mod:`types` module.) For example, "
"you can create a new module object with the following code:"
msgstr ""
"A maioria dos objetos de tipo são agora chamáveis, pelo que pode usá-los "
"para criar novos objetos, como funções, classes e módulos. (Isto significa "
"que o módulo :mod:`!new` pode ser descontinuado numa futura versão do "
"Python, porque agora pode usar os objetos de tipo disponíveis no módulo :mod:"
"`types`.) Por exemplo, pode criar um novo objeto módulo com o seguinte "
"código:"

#: ../../whatsnew/2.3.rst:1052
msgid ""
">>> import types\n"
">>> m = types.ModuleType('abc','docstring')\n"
">>> m\n"
"<module 'abc' (built-in)>\n"
">>> m.__doc__\n"
"'docstring'"
msgstr ""
">>> import types\n"
">>> m = types.ModuleType('abc','docstring')\n"
">>> m\n"
"<módulo 'abc' (integrado)>\n"
">>> m.__doc__\n"
"'docstring'"

#: ../../whatsnew/2.3.rst:1059
msgid ""
"A new warning, :exc:`PendingDeprecationWarning` was added to indicate "
"features which are in the process of being deprecated.  The warning will "
"*not* be printed by default.  To check for use of features that will be "
"deprecated in the future, supply :option:`-Walways::"
"PendingDeprecationWarning:: <-W>` on the command line or use :func:`warnings."
"filterwarnings`."
msgstr ""
"Um novo aviso, :exc:`PendingDeprecationWarning`, foi adicionado para indicar "
"funcionalidades que estão em processo de descontinuação. Este aviso *não* "
"será impresso por predefinição. Para verificar o uso de funcionalidades que "
"serão descontinuadas no futuro, forneça :option:`-Walways::"
"PendingDeprecationWarning:: <-W>` na linha de comandos ou use :func:"
"`warnings.filterwarnings`."

#: ../../whatsnew/2.3.rst:1065
msgid ""
"The process of deprecating string-based exceptions, as in ``raise \"Error "
"occurred\"``, has begun.  Raising a string will now trigger :exc:"
"`PendingDeprecationWarning`."
msgstr ""
"O processo de descontinuação de exceções baseadas em strings, como em "
"``raise \"Error occurred\"``, começou. Gerar uma string agora aciona :exc:"
"`PendingDeprecationWarning`."

#: ../../whatsnew/2.3.rst:1069
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning.  In a future version of Python, ``None`` may finally become a "
"keyword."
msgstr ""
"Usar ``None`` como nome de variável resultará agora num aviso :exc:"
"`SyntaxWarning`. Numa versão futura do Python, ``None`` pode finalmente "
"tornar-se uma palavra-chave."

#: ../../whatsnew/2.3.rst:1072
msgid ""
"The :meth:`!xreadlines` method of file objects, introduced in Python 2.1, is "
"no longer necessary because files now behave as their own iterator. :meth:`!"
"xreadlines` was originally introduced as a faster way to loop over all the "
"lines in a file, but now you can simply write ``for line in file_obj``. File "
"objects also have a new read-only :attr:`!encoding` attribute that gives the "
"encoding used by the file; Unicode strings written to the file will be "
"automatically  converted to bytes using the given encoding."
msgstr ""
"O método :meth:`!xreadlines` dos objetos de ficheiro, introduzido no Python "
"2.1, já não é necessário porque os ficheiros agora se comportam como o seu "
"próprio iterador. :meth:`!xreadlines` foi originalmente introduzido como uma "
"maneira mais rápida de percorrer todas as linhas de um ficheiro, mas agora "
"você pode simplesmente escrever ``for line in file_obj``. Os objetos de "
"ficheiro também têm um novo atributo somente leitura :attr:`!encoding` que "
"fornece a codificação usada pelo ficheiro; as strings Unicode gravadas no "
"ficheiro serão automaticamente convertidas em bytes usando a codificação "
"fornecida."

#: ../../whatsnew/2.3.rst:1080
msgid ""
"The method resolution order used by new-style classes has changed, though "
"you'll only notice the difference if you have a really complicated "
"inheritance hierarchy.  Classic classes are unaffected by this change.  "
"Python 2.2 originally used a topological sort of a class's ancestors, but "
"2.3 now uses the C3 algorithm as described in the paper `\"A Monotonic "
"Superclass Linearization for Dylan\" <https://citeseerx.ist.psu.edu/viewdoc/"
"summary?doi=10.1.1.19.3910>`_. To understand the motivation for this "
"change,  read Michele Simionato's article :ref:`python_2.3_mro`, or read the "
"thread on python-dev starting with the message at https://mail.python.org/"
"pipermail/python-dev/2002-October/029035.html. Samuele Pedroni first pointed "
"out the problem and also implemented the fix by coding the C3 algorithm."
msgstr ""
"A ordem de resolução de métodos usada por classes do novo estilo foi "
"alterada, embora só note a diferença se tiver uma hierarquia de herança "
"realmente complicada. As classes clássicas não são afetadas por esta "
"alteração. O Python 2.2 usava originalmente uma ordenação topológica dos "
"ancestrais de uma classe, mas o 2.3 agora usa o algoritmo C3, como descrito "
"no artigo `\"A Monotonic Superclass Linearization for Dylan\" <https://"
"citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.19.3910>`_. Para "
"compreender a motivação para esta alteração, leia o artigo de Michele "
"Simionato :ref:`python_2.3_mro`, ou leia a discussão em python-dev que "
"começa com a mensagem em https://mail.python.org/pipermail/python-dev/2002-"
"October/029035.html. Samuele Pedroni foi o primeiro a apontar o problema e "
"também implementou a correção ao codificar o algoritmo C3."

#: ../../whatsnew/2.3.rst:1093
msgid ""
"Python runs multithreaded programs by switching between threads after "
"executing N bytecodes.  The default value for N has been increased from 10 "
"to 100 bytecodes, speeding up single-threaded applications by reducing the "
"switching overhead.  Some multithreaded applications may suffer slower "
"response time, but that's easily fixed by setting the limit back to a lower "
"number using ``sys.setcheckinterval(N)``. The limit can be retrieved with "
"the new :func:`!sys.getcheckinterval` function."
msgstr ""
"O Python executa programas multithread alternando entre *threads* após "
"executar N *bytecodes*. O valor predefinido para N foi aumentado de 10 para "
"100 *bytecodes*, acelerando aplicações de *thread* único ao reduzir a "
"sobrecarga de alternância. Algumas aplicações multithread podem sofrer um "
"tempo de resposta mais lento, mas isso é facilmente corrigido ao definir o "
"limite de volta para um número mais baixo usando ``sys."
"setcheckinterval(N)``. O limite pode ser recuperado com a nova função :func:"
"`!sys.getcheckinterval`."

#: ../../whatsnew/2.3.rst:1101
msgid ""
"One minor but far-reaching change is that the names of extension types "
"defined by the modules included with Python now contain the module and a "
"``'.'`` in front of the type name.  For example, in Python 2.2, if you "
"created a socket and printed its :attr:`!__class__`, you'd get this output::"
msgstr ""
"Uma alteração menor, mas de longo alcance, é que os nomes dos tipos de "
"extensão definidos pelos módulos incluídos com o Python agora contêm o "
"módulo e um ``'.'`` antes do nome do tipo. Por exemplo, no Python 2.2, se "
"criasse um *socket* e imprimisse o seu :attr:`!__class__`, obteria esta "
"saída::"

#: ../../whatsnew/2.3.rst:1106
msgid ""
">>> s = socket.socket()\n"
">>> s.__class__\n"
"<type 'socket'>"
msgstr ""
">>> s = socket.socket()\n"
">>> s.__class__\n"
"<tipo 'socket'>"

#: ../../whatsnew/2.3.rst:1110
msgid "In 2.3, you get this::"
msgstr "No 2.3, obtém isto::"

#: ../../whatsnew/2.3.rst:1112
msgid ""
">>> s.__class__\n"
"<type '_socket.socket'>"
msgstr ""
">>> s.__class__\n"
"<tipo '_socket.socket'>"

#: ../../whatsnew/2.3.rst:1115
msgid ""
"One of the noted incompatibilities between old- and new-style classes has "
"been removed: you can now assign to the :attr:`~type.__name__` and :attr:"
"`~type.__bases__` attributes of new-style classes.  There are some "
"restrictions on what can be assigned to :attr:`!__bases__` along the lines "
"of those relating to assigning to an instance's :attr:`~object.__class__` "
"attribute."
msgstr ""
"Uma das incompatibilidades notadas entre classes antigas e do novo estilo "
"foi removida: agora pode atribuir aos atributos :attr:`~type.__name__` e :"
"attr:`~type.__bases__` de classes do novo estilo. Existem algumas restrições "
"sobre o que pode ser atribuído a :attr:`!__bases__`, semelhantes às "
"relacionadas com a atribuição ao atributo :attr:`~object.__class__` de uma "
"instância."

#: ../../whatsnew/2.3.rst:1125
msgid "String Changes"
msgstr "Alterações em Strings"

#: ../../whatsnew/2.3.rst:1127
msgid ""
"The :keyword:`in` operator now works differently for strings. Previously, "
"when evaluating ``X in Y`` where *X* and *Y* are strings, *X* could only be "
"a single character. That's now changed; *X* can be a string of any length, "
"and ``X in Y`` will return :const:`True` if *X* is a substring of *Y*.  If "
"*X* is the empty string, the result is always :const:`True`. ::"
msgstr ""
"O operador :keyword:`in` agora funciona de forma diferente para strings. "
"Anteriormente, ao avaliar ``X in Y``, onde *X* e *Y* são strings, *X* só "
"podia ser um único caractere. Isso mudou; *X* pode agora ser uma string de "
"qualquer comprimento, e ``X in Y`` devolverá :const:`True` se *X* for uma "
"substring de *Y*. Se *X* for a string vazia, o resultado é sempre :const:"
"`True`. ::"

#: ../../whatsnew/2.3.rst:1133
msgid ""
">>> 'ab' in 'abcd'\n"
"True\n"
">>> 'ad' in 'abcd'\n"
"False\n"
">>> '' in 'abcd'\n"
"True"
msgstr ""
">>> 'ab' in 'abcd'\n"
"True\n"
">>> 'ad' in 'abcd'\n"
"False\n"
">>> '' in 'abcd'\n"
"True"

#: ../../whatsnew/2.3.rst:1140
msgid ""
"Note that this doesn't tell you where the substring starts; if you need that "
"information, use the :meth:`~str.find` string method."
msgstr ""
"Note que isto não indica onde a substring começa; se precisar dessa "
"informação, use o método de string :meth:`~str.find`."

#: ../../whatsnew/2.3.rst:1143
msgid ""
"The :meth:`~str.strip`, :meth:`~str.lstrip`, and :meth:`~str.rstrip` string "
"methods now have an optional argument for specifying the characters to "
"strip.  The default is still to remove all whitespace characters::"
msgstr ""
"Os métodos de string :meth:`~str.strip`, :meth:`~str.lstrip` e :meth:`~str."
"rstrip` agora têm um argumento opcional para especificar os caracteres a "
"remover. A predefinição continua a ser a remoção de todos os caracteres de "
"espaço em branco::"

#: ../../whatsnew/2.3.rst:1147
msgid ""
">>> '   abc '.strip()\n"
"'abc'\n"
">>> '><><abc<><><>'.strip('<>')\n"
"'abc'\n"
">>> '><><abc<><><>\\n'.strip('<>')\n"
"'abc<><><>\\n'\n"
">>> u'\\u4000\\u4001abc\\u4000'.strip(u'\\u4000')\n"
"u'\\u4001abc'\n"
">>>"
msgstr ""
">>> '   abc '.strip()\n"
"'abc'\n"
">>> '><><abc<><><>'.strip('<>')\n"
"'abc'\n"
">>> '><><abc<><><>\\n'.strip('<>')\n"
"'abc<><><>\\n'\n"
">>> u'\\u4000\\u4001abc\\u4000'.strip(u'\\u4000')\n"
"u'\\u4001abc'\n"
">>>"

#: ../../whatsnew/2.3.rst:1157
msgid "(Suggested by Simon Brunning and implemented by Walter Dörwald.)"
msgstr "(Sugerido por Simon Brunning e implementado por Walter Dörwald.)"

#: ../../whatsnew/2.3.rst:1159
msgid ""
"The :meth:`~str.startswith` and :meth:`~str.endswith` string methods now "
"accept negative numbers for the *start* and *end* parameters."
msgstr ""
"Os métodos de string :meth:`~str.startswith` e :meth:`~str.endswith` agora "
"aceitam números negativos para os parâmetros *start* e *end*."

#: ../../whatsnew/2.3.rst:1162
msgid ""
"Another new string method is :meth:`~str.zfill`, originally a function in "
"the :mod:`string` module.  :meth:`~str.zfill` pads a numeric string with "
"zeros on the left until it's the specified width. Note that the ``%`` "
"operator is still more flexible and powerful than :meth:`~str.zfill`. ::"
msgstr ""
"Outro novo método de string é :meth:`~str.zfill`, originalmente uma função "
"no módulo :mod:`string`. :meth:`~str.zfill` preenche uma string numérica com "
"zeros à esquerda até atingir a largura especificada. Note que o operador "
"``%`` ainda é mais flexível e poderoso do que :meth:`~str.zfill`. ::"

#: ../../whatsnew/2.3.rst:1167
msgid ""
">>> '45'.zfill(4)\n"
"'0045'\n"
">>> '12345'.zfill(4)\n"
"'12345'\n"
">>> 'goofy'.zfill(6)\n"
"'0goofy'"
msgstr ""
">>> '45'.zfill(4)\n"
"'0045'\n"
">>> '12345'.zfill(4)\n"
"'12345'\n"
">>> 'goofy'.zfill(6)\n"
"'0goofy'"

#: ../../whatsnew/2.3.rst:1174
msgid "(Contributed by Walter Dörwald.)"
msgstr "(Contribuído por Walter Dörwald.)"

#: ../../whatsnew/2.3.rst:1176
msgid ""
"A new type object, :class:`!basestring`, has been added. Both 8-bit strings "
"and Unicode strings inherit from this type, so ``isinstance(obj, "
"basestring)`` will return :const:`True` for either kind of string.  It's a "
"completely abstract type, so you can't create :class:`!basestring` instances."
msgstr ""
"Foi adicionado um novo objeto de tipo, :class:`!basestring`. Tanto as "
"strings de 8 bits como as strings Unicode herdam deste tipo, pelo que "
"``isinstance(obj, basestring)`` devolverá :const:`True` para qualquer tipo "
"de string. É um tipo completamente abstrato, pelo que não pode criar "
"instâncias de :class:`!basestring`."

#: ../../whatsnew/2.3.rst:1181
msgid ""
"Interned strings are no longer immortal and will now be garbage-collected in "
"the usual way when the only reference to them is from the internal "
"dictionary of interned strings.  (Implemented by Oren Tirosh.)"
msgstr ""
"As strings internadas já não são imortais e agora serão recolhidas pelo "
"*garbage collector* da forma habitual quando a única referência a elas for a "
"partir do dicionário interno de strings internadas. (Implementado por Oren "
"Tirosh.)"

#: ../../whatsnew/2.3.rst:1189
msgid "Optimizations"
msgstr "Otimizações"

#: ../../whatsnew/2.3.rst:1191
msgid ""
"The creation of new-style class instances has been made much faster; they're "
"now faster than classic classes!"
msgstr ""
"A criação de instâncias de classes do novo estilo foi tornada muito mais "
"rápida; agora são mais rápidas do que as classes clássicas!"

#: ../../whatsnew/2.3.rst:1194
msgid ""
"The :meth:`~list.sort` method of list objects has been extensively rewritten "
"by Tim Peters, and the implementation is significantly faster."
msgstr ""
"O método :meth:`~list.sort` de objetos de lista foi extensivamente reescrito "
"por Tim Peters, e a implementação é significativamente mais rápida."

#: ../../whatsnew/2.3.rst:1197
msgid ""
"Multiplication of large long integers is now much faster thanks to an "
"implementation of Karatsuba multiplication, an algorithm that scales better "
"than the *O*\\ (*n*\\ :sup:`2`) required for the grade-school multiplication "
"algorithm.  (Original patch by Christopher A. Craig, and significantly "
"reworked by Tim Peters.)"
msgstr ""
"A multiplicação de inteiros longos grandes é agora muito mais rápida graças "
"a uma implementação da multiplicação de Karatsuba, um algoritmo que escala "
"melhor do que o *O*\\ (*n*\\ :sup:`2`) necessário para o algoritmo de "
"multiplicação escolar. (Correção original de Christopher A. Craig, e "
"significativamente refeita por Tim Peters.)"

#: ../../whatsnew/2.3.rst:1202
msgid ""
"The ``SET_LINENO`` opcode is now gone.  This may provide a small speed "
"increase, depending on your compiler's idiosyncrasies. See section :ref:"
"`23section-other` for a longer explanation. (Removed by Michael Hudson.)"
msgstr ""
"A instrução ``SET_LINENO`` já não existe. Isto pode proporcionar um pequeno "
"aumento de velocidade, dependendo das idiossincrasias do seu compilador. "
"Consulte a secção :ref:`23section-other` para uma explicação mais longa. "
"(Removido por Michael Hudson.)"

#: ../../whatsnew/2.3.rst:1206
msgid ""
":func:`!xrange` objects now have their own iterator, making ``for i in "
"xrange(n)`` slightly faster than ``for i in range(n)``.  (Patch by Raymond "
"Hettinger.)"
msgstr ""
"Os objetos :func:`!xrange` agora têm o seu próprio iterador, tornando ``for "
"i in xrange(n)`` ligeiramente mais rápido do que ``for i in range(n)``. "
"(Correção de Raymond Hettinger.)"

#: ../../whatsnew/2.3.rst:1210
msgid ""
"A number of small rearrangements have been made in various hotspots to "
"improve performance, such as inlining a function or removing some code.  "
"(Implemented mostly by GvR, but lots of people have contributed single "
"changes.)"
msgstr ""
"Foram feitas várias pequenas reorganizações em vários pontos críticos para "
"melhorar o desempenho, como a incorporação de uma função ou a remoção de "
"algum código. (Implementado principalmente por GvR, mas muitas pessoas "
"contribuíram com alterações individuais.)"

#: ../../whatsnew/2.3.rst:1214
msgid ""
"The net result of the 2.3 optimizations is that Python 2.3 runs the  pystone "
"benchmark around 25% faster than Python 2.2."
msgstr ""
"O resultado líquido das otimizações do 2.3 é que o Python 2.3 executa o "
"*benchmark* pystone cerca de 25% mais rápido do que o Python 2.2."

#: ../../whatsnew/2.3.rst:1221
msgid "New, Improved, and Deprecated Modules"
msgstr "Módulos Novos, Melhorados e Descontinuados"

#: ../../whatsnew/2.3.rst:1223
msgid ""
"As usual, Python's standard library received a number of enhancements and "
"bug fixes.  Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the CVS "
"logs for all the details."
msgstr ""
"Como habitual, a biblioteca padrão do Python recebeu várias melhorias e "
"correções de *bugs*. Aqui está uma lista parcial das alterações mais "
"notáveis, ordenadas alfabéticamente por nome de módulo. Consulte o ficheiro :"
"file:`Misc/NEWS` na árvore de origem para uma lista mais completa de "
"alterações, ou consulte os registos do CVS para todos os detalhes."

#: ../../whatsnew/2.3.rst:1228
msgid ""
"The :mod:`array` module now supports arrays of Unicode characters using the "
"``'u'`` format character.  Arrays also now support using the ``+=`` "
"assignment operator to add another array's contents, and the ``*=`` "
"assignment operator to repeat an array. (Contributed by Jason Orendorff.)"
msgstr ""
"O módulo :mod:`array` agora suporta *arrays* de caracteres Unicode usando o "
"caractere de formato ``'u'``. Os *arrays* também suportam agora o uso do "
"operador de atribuição ``+=`` para adicionar o conteúdo de outro *array*, e "
"o operador de atribuição ``*=`` para repetir um *array*. (Contribuído por "
"Jason Orendorff.)"

#: ../../whatsnew/2.3.rst:1233
msgid ""
"The :mod:`!bsddb` module has been replaced by version 4.1.6 of the `PyBSDDB "
"<https://pybsddb.sourceforge.net>`_ package, providing a more complete "
"interface to the transactional features of the BerkeleyDB library."
msgstr ""
"O módulo :mod:`!bsddb` foi substituído pela versão 4.1.6 do pacote `PyBSDDB "
"<https://pybsddb.sourceforge.net>`_, fornecendo uma interface mais completa "
"para as funcionalidades transacionais da biblioteca BerkeleyDB."

#: ../../whatsnew/2.3.rst:1237
msgid ""
"The old version of the module has been renamed to  :mod:`!bsddb185` and is "
"no longer built automatically; you'll  have to edit :file:`Modules/Setup` to "
"enable it.  Note that the new :mod:`!bsddb` package is intended to be "
"compatible with the  old module, so be sure to file bugs if you discover any "
"incompatibilities. When upgrading to Python 2.3, if the new interpreter is "
"compiled with a new version of  the underlying BerkeleyDB library, you will "
"almost certainly have to convert your database files to the new version.  "
"You can do this fairly easily with the new scripts :file:`db2pickle.py` and :"
"file:`pickle2db.py` which you will find in the distribution's :file:`Tools/"
"scripts` directory.  If you've already been using the PyBSDDB package and "
"importing it as :mod:`!bsddb3`, you will have to change your ``import`` "
"statements to import it as :mod:`!bsddb`."
msgstr ""
"A versão antiga do módulo foi renomeada para :mod:`!bsddb185` e já não é "
"compilada automaticamente; terá de editar :file:`Modules/Setup` para a "
"ativar. Note que o novo pacote :mod:`!bsddb` destina-se a ser compatível com "
"o módulo antigo, pelo que deve reportar *bugs* se descobrir quaisquer "
"incompatibilidades. Ao atualizar para o Python 2.3, se o novo interpretador "
"for compilado com uma nova versão da biblioteca subjacente BerkeleyDB, terá "
"quase certamente de converter os seus ficheiros de base de dados para a nova "
"versão. Pode fazer isto facilmente com os novos *scripts* :file:`db2pickle."
"py` e :file:`pickle2db.py`, que encontrará no diretório :file:`Tools/"
"scripts` da distribuição. Se já estiver a usar o pacote PyBSDDB e a importá-"
"lo como :mod:`!bsddb3`, terá de alterar as suas instruções ``import`` para o "
"importar como :mod:`!bsddb`."

#: ../../whatsnew/2.3.rst:1249
msgid ""
"The new :mod:`bz2` module is an interface to the bz2 data compression "
"library. bz2-compressed data is usually smaller than  corresponding :mod:"
"`zlib`\\ -compressed data. (Contributed by Gustavo Niemeyer.)"
msgstr ""
"O novo módulo :mod:`bz2` é uma interface para a biblioteca de compressão de "
"dados bz2. Os dados comprimidos com bz2 são geralmente menores do que os "
"dados correspondentes comprimidos com :mod:`zlib`. (Contribuído por Gustavo "
"Niemeyer.)"

#: ../../whatsnew/2.3.rst:1253
msgid ""
"A set of standard date/time types has been added in the new :mod:`datetime` "
"module.  See the following section for more details."
msgstr ""
"Um conjunto de tipos de data/hora padrão foi adicionado no novo módulo :mod:"
"`datetime`. Consulte a secção seguinte para mais detalhes."

#: ../../whatsnew/2.3.rst:1256
msgid ""
"The Distutils :class:`!Extension` class now supports an extra constructor "
"argument named *depends* for listing additional source files that an "
"extension depends on.  This lets Distutils recompile the module if any of "
"the dependency files are modified.  For example, if :file:`sampmodule.c` "
"includes the header file :file:`sample.h`, you would create the :class:`!"
"Extension` object like this::"
msgstr ""
"A classe :class:`!Extension` do Distutils agora suporta um argumento "
"adicional no construtor chamado *depends* para listar ficheiros de origem "
"adicionais dos quais uma extensão depende. Isto permite que o Distutils "
"recompile o módulo se algum dos ficheiros de dependência for modificado. Por "
"exemplo, se :file:`sampmodule.c` incluir o ficheiro de cabeçalho :file:"
"`sample.h`, criaria o objeto :class:`!Extension` assim::"

#: ../../whatsnew/2.3.rst:1263
msgid ""
"ext = Extension(\"samp\",\n"
"                sources=[\"sampmodule.c\"],\n"
"                depends=[\"sample.h\"])"
msgstr ""
"ext = Extension(\"samp\",\n"
"                sources=[\"sampmodule.c\"],\n"
"                depends=[\"sample.h\"])"

#: ../../whatsnew/2.3.rst:1267
msgid ""
"Modifying :file:`sample.h` would then cause the module to be recompiled. "
"(Contributed by Jeremy Hylton.)"
msgstr ""
"A modificação de :file:`sample.h` faria com que o módulo fosse recompilado. "
"(Contribuído por Jeremy Hylton.)"

#: ../../whatsnew/2.3.rst:1270
msgid ""
"Other minor changes to Distutils: it now checks for the :envvar:`CC`, :"
"envvar:`CFLAGS`, :envvar:`!CPP`, :envvar:`LDFLAGS`, and :envvar:`CPPFLAGS` "
"environment variables, using them to override the settings in Python's "
"configuration (contributed by Robert Weber)."
msgstr ""
"Outras alterações menores ao Distutils: agora verifica as variáveis de "
"ambiente :envvar:`CC`, :envvar:`CFLAGS`, :envvar:`!CPP`, :envvar:`LDFLAGS` "
"e :envvar:`CPPFLAGS`, usando-as para substituir as definições na "
"configuração do Python (contribuído por Robert Weber)."

#: ../../whatsnew/2.3.rst:1275
msgid ""
"Previously the :mod:`doctest` module would only search the docstrings of "
"public methods and functions for test cases, but it now also examines "
"private ones as well.  The :func:`~doctest.DocTestSuite` function creates a :"
"class:`unittest.TestSuite` object from a set of :mod:`doctest` tests."
msgstr ""
"Anteriormente, o módulo :mod:`doctest` só pesquisava as *docstrings* de "
"métodos e funções públicas para casos de teste, mas agora também examina as "
"privadas. A função :func:`~doctest.DocTestSuite` cria um objeto :class:"
"`unittest.TestSuite` a partir de um conjunto de testes :mod:`doctest`."

#: ../../whatsnew/2.3.rst:1280
msgid ""
"The new ``gc.get_referents(object)`` function returns a list of all the "
"objects referenced by *object*."
msgstr ""
"A nova função ``gc.get_referents(object)`` devolve uma lista de todos os "
"objetos referenciados por *objeto*."

#: ../../whatsnew/2.3.rst:1283
msgid ""
"The :mod:`getopt` module gained a new function, :func:`~getopt.gnu_getopt`, "
"that supports the same arguments as the existing :func:`~getopt.getopt` "
"function but uses GNU-style scanning mode. The existing :func:`~getopt."
"getopt` stops processing options as soon as a non-option argument is "
"encountered, but in GNU-style mode processing continues, meaning that "
"options and arguments can be mixed.  For example::"
msgstr ""
"O módulo :mod:`getopt` ganhou uma nova função, :func:`~getopt.gnu_getopt`, "
"que suporta os mesmos argumentos da função existente :func:`~getopt.getopt`, "
"mas usa o modo de digitalização estilo GNU. A função existente :func:"
"`~getopt.getopt` para de processar opções assim que encontra um argumento "
"que não é uma opção, mas no modo estilo GNU o processamento continua, o que "
"significa que opções e argumentos podem ser misturados. Por exemplo::"

#: ../../whatsnew/2.3.rst:1289
msgid ""
">>> getopt.getopt(['-f', 'filename', 'output', '-v'], 'f:v')\n"
"([('-f', 'filename')], ['output', '-v'])\n"
">>> getopt.gnu_getopt(['-f', 'filename', 'output', '-v'], 'f:v')\n"
"([('-f', 'filename'), ('-v', '')], ['output'])"
msgstr ""
">>> getopt.getopt(['-f', 'filename', 'output', '-v'], 'f:v')\n"
"([('-f', 'filename')], ['output', '-v'])\n"
">>> getopt.gnu_getopt(['-f', 'filename', 'output', '-v'], 'f:v')\n"
"([('-f', 'filename'), ('-v', '')], ['output'])"

#: ../../whatsnew/2.3.rst:1294
msgid "(Contributed by Peter Åstrand.)"
msgstr "(Contribuído por Peter Åstrand.)"

#: ../../whatsnew/2.3.rst:1296
msgid ""
"The :mod:`grp`, :mod:`pwd`, and :mod:`resource` modules now return enhanced "
"tuples::"
msgstr ""
"Os módulos :mod:`grp`, :mod:`pwd` e :mod:`resource` agora devolvem tuplos "
"melhorados::"

#: ../../whatsnew/2.3.rst:1299
msgid ""
">>> import grp\n"
">>> g = grp.getgrnam('amk')\n"
">>> g.gr_name, g.gr_gid\n"
"('amk', 500)"
msgstr ""
">>> import grp\n"
">>> g = grp.getgrnam('amk')\n"
">>> g.gr_name, g.gr_gid\n"
"('amk', 500)"

#: ../../whatsnew/2.3.rst:1304
msgid "The :mod:`gzip` module can now handle files exceeding 2 GiB."
msgstr "O módulo :mod:`gzip` agora pode lidar com ficheiros que excedem 2 GiB."

#: ../../whatsnew/2.3.rst:1306
msgid ""
"The new :mod:`heapq` module contains an implementation of a heap queue "
"algorithm.  A heap is an array-like data structure that keeps items in a "
"partially sorted order such that, for every index *k*, ``heap[k] <= "
"heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]``.  This makes it quick to remove "
"the smallest item, and inserting a new item while maintaining the heap "
"property is *O*\\ (log *n*).  (See https://xlinux.nist.gov/dads//HTML/"
"priorityque.html for more information about the priority queue data "
"structure.)"
msgstr ""
"O novo módulo :mod:`heapq` contém uma implementação de um algoritmo de fila "
"de *heap*. Um *heap* é uma estrutura de dados semelhante a um *array* que "
"mantém os itens numa ordem parcialmente ordenada, de modo que, para cada "
"índice *k*, ``heap[k] <= heap[2*k+1]`` e ``heap[k] <= heap[2*k+2]``. Isto "
"torna rápido remover o item mais pequeno, e inserir um novo item enquanto se "
"mantém a propriedade de *heap* é *O*\\ (log *n*). (Consulte https://xlinux."
"nist.gov/dads//HTML/priorityque.html para mais informações sobre a estrutura "
"de dados de fila de prioridade.)"

#: ../../whatsnew/2.3.rst:1314
msgid ""
"The :mod:`heapq` module provides :func:`~heapq.heappush` and :func:`~heapq."
"heappop` functions for adding and removing items while maintaining the heap "
"property on top of some other mutable Python sequence type.  Here's an "
"example that uses a Python list::"
msgstr ""
"O módulo :mod:`heapq` fornece as funções :func:`~heapq.heappush` e :func:"
"`~heapq.heappop` para adicionar e remover itens enquanto mantém a "
"propriedade de *heap* sobre algum outro tipo de sequência mutável do Python. "
"Aqui está um exemplo que usa uma lista do Python::"

#: ../../whatsnew/2.3.rst:1318
msgid ""
">>> import heapq\n"
">>> heap = []\n"
">>> for item in [3, 7, 5, 11, 1]:\n"
"...    heapq.heappush(heap, item)\n"
"...\n"
">>> heap\n"
"[1, 3, 5, 11, 7]\n"
">>> heapq.heappop(heap)\n"
"1\n"
">>> heapq.heappop(heap)\n"
"3\n"
">>> heap\n"
"[5, 7, 11]"
msgstr ""
">>> import heapq\n"
">>> heap = []\n"
">>> for item in [3, 7, 5, 11, 1]:\n"
"...    heapq.heappush(heap, item)\n"
"...\n"
">>> heap\n"
"[1, 3, 5, 11, 7]\n"
">>> heapq.heappop(heap)\n"
"1\n"
">>> heapq.heappop(heap)\n"
"3\n"
">>> heap\n"
"[5, 7, 11]"

#: ../../whatsnew/2.3.rst:1332
msgid "(Contributed by Kevin O'Connor.)"
msgstr "(Contribuído por Kevin O'Connor.)"

#: ../../whatsnew/2.3.rst:1334
msgid ""
"The IDLE integrated development environment has been updated using the code "
"from the IDLEfork project (https://idlefork.sourceforge.net).  The most "
"notable feature is that the code being developed is now executed in a "
"subprocess, meaning that there's no longer any need for manual ``reload()`` "
"operations. IDLE's core code has been incorporated into the standard library "
"as the :mod:`idlelib` package."
msgstr ""
"O ambiente de desenvolvimento integrado IDLE foi atualizado usando o código "
"do projeto IDLEfork (https://idlefork.sourceforge.net). A funcionalidade "
"mais notável é que o código em desenvolvimento é agora executado num "
"subprocesso, o que significa que já não é necessário realizar operações "
"manuais de ``reload()``. O código principal do IDLE foi incorporado na "
"biblioteca padrão como o pacote :mod:`idlelib`."

#: ../../whatsnew/2.3.rst:1340
msgid ""
"The :mod:`imaplib` module now supports IMAP over SSL. (Contributed by Piers "
"Lauder and Tino Lange.)"
msgstr ""
"O módulo :mod:`imaplib` agora suporta IMAP sobre SSL. (Contribuído por Piers "
"Lauder e Tino Lange.)"

#: ../../whatsnew/2.3.rst:1343
msgid ""
"The :mod:`itertools` contains a number of useful functions for use with "
"iterators, inspired by various functions provided by the ML and Haskell "
"languages.  For example, ``itertools.ifilter(predicate, iterator)`` returns "
"all elements in the iterator for which the function :func:`!predicate` "
"returns :const:`True`, and ``itertools.repeat(obj, N)`` returns ``obj`` *N* "
"times. There are a number of other functions in the module; see the "
"package's reference documentation for details. (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"O módulo :mod:`itertools` contém várias funções úteis para uso com "
"iteradores, inspiradas em várias funções fornecidas pelas linguagens ML e "
"Haskell. Por exemplo, ``itertools.ifilter(predicate, iterator)`` devolve "
"todos os elementos no iterador para os quais a função :func:`!predicate` "
"devolve :const:`True`, e ``itertools.repeat(obj, N)`` devolve ``obj`` *N* "
"vezes. Existem várias outras funções no módulo; consulte a documentação de "
"referência do pacote para mais detalhes. (Contribuído por Raymond Hettinger.)"

#: ../../whatsnew/2.3.rst:1352
msgid ""
"Two new functions in the :mod:`math` module, ``degrees(rads)`` and "
"``radians(degs)``, convert between radians and degrees.  Other functions in "
"the :mod:`math` module such as :func:`math.sin` and :func:`math.cos` have "
"always required input values measured in radians.  Also, an optional *base* "
"argument was added to :func:`math.log` to make it easier to compute "
"logarithms for bases other than ``e`` and ``10``.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Duas novas funções no módulo :mod:`math`, ``degrees(rads)`` e "
"``radians(degs)``, convertem entre radianos e graus. Outras funções no "
"módulo :mod:`math`, como :func:`math.sin` e :func:`math.cos`, sempre "
"exigiram valores de entrada medidos em radianos. Além disso, foi adicionado "
"um argumento opcional *base* a :func:`math.log` para facilitar o cálculo de "
"logaritmos para bases diferentes de ``e`` e ``10``. (Contribuído por Raymond "
"Hettinger.)"

#: ../../whatsnew/2.3.rst:1359
msgid ""
"Several new POSIX functions (:func:`!getpgid`, :func:`!killpg`, :func:`!"
"lchown`, :func:`!loadavg`, :func:`!major`, :func:`!makedev`, :func:`!minor`, "
"and :func:`!mknod`) were added to the :mod:`posix` module that underlies "
"the :mod:`os` module. (Contributed by Gustavo Niemeyer, Geert Jansen, and "
"Denis S. Otkidach.)"
msgstr ""
"Várias novas funções POSIX (:func:`!getpgid`, :func:`!killpg`, :func:`!"
"lchown`, :func:`!loadavg`, :func:`!major`, :func:`!makedev`, :func:`!minor` "
"e :func:`!mknod`) foram adicionadas ao módulo :mod:`posix`, que está na base "
"do módulo :mod:`os`. (Contribuído por Gustavo Niemeyer, Geert Jansen e Denis "
"S. Otkidach.)"

#: ../../whatsnew/2.3.rst:1365
msgid ""
"In the :mod:`os` module, the :func:`!\\*stat` family of functions can now "
"report fractions of a second in a timestamp.  Such time stamps are "
"represented as floats, similar to the value returned by :func:`time.time`."
msgstr ""
"No módulo :mod:`os`, a família de funções :func:`!\\*stat` pode agora "
"reportar frações de segundo num *timestamp*. Esses *timestamps* são "
"representados como *floats*, semelhantes ao valor devolvido por :func:`time."
"time`."

#: ../../whatsnew/2.3.rst:1369
msgid ""
"During testing, it was found that some applications will break if time "
"stamps are floats.  For compatibility, when using the tuple interface of "
"the :class:`~os.stat_result` time stamps will be represented as integers. "
"When using named fields (a feature first introduced in Python 2.2), time "
"stamps are still represented as integers, unless :func:`!os."
"stat_float_times` is invoked to enable float return values::"
msgstr ""
"Durante os testes, descobriu-se que algumas aplicações falham se os "
"*timestamps* forem *floats*. Para compatibilidade, ao usar a interface de "
"tuplo de :class:`~os.stat_result`, os *timestamps* serão representados como "
"inteiros. Ao usar campos nomeados (uma funcionalidade introduzida pela "
"primeira vez no Python 2.2), os *timestamps* ainda são representados como "
"inteiros, a menos que :func:`!os.stat_float_times` seja invocado para ativar "
"valores de retorno *float*::"

#: ../../whatsnew/2.3.rst:1376
msgid ""
">>> os.stat(\"/tmp\").st_mtime\n"
"1034791200\n"
">>> os.stat_float_times(True)\n"
">>> os.stat(\"/tmp\").st_mtime\n"
"1034791200.6335014"
msgstr ""
">>> os.stat(\"/tmp\").st_mtime\n"
"1034791200\n"
">>> os.stat_float_times(True)\n"
">>> os.stat(\"/tmp\").st_mtime\n"
"1034791200.6335014"

#: ../../whatsnew/2.3.rst:1382
msgid "In Python 2.4, the default will change to always returning floats."
msgstr ""
"No Python 2.4, o predefinido será alterado para devolver sempre *floats*."

#: ../../whatsnew/2.3.rst:1384
msgid ""
"Application developers should enable this feature only if all their "
"libraries work properly when confronted with floating-point time stamps, or "
"if they use the tuple API. If used, the feature should be activated on an "
"application level instead of trying to enable it on a per-use basis."
msgstr ""
"Os desenvolvedores de aplicações devem ativar esta funcionalidade apenas se "
"todas as suas bibliotecas funcionarem corretamente quando confrontadas com "
"*timestamps* de ponto flutuante, ou se usarem a API de tuplo. Se usada, a "
"funcionalidade deve ser ativada ao nível da aplicação, em vez de tentar "
"ativá-la caso a caso."

#: ../../whatsnew/2.3.rst:1389
msgid ""
"The :mod:`optparse` module contains a new parser for command-line arguments "
"that can convert option values to a particular Python type  and will "
"automatically generate a usage message.  See the following section for  more "
"details."
msgstr ""
"O módulo :mod:`optparse` contém um novo analisador para argumentos de linha "
"de comandos que pode converter valores de opção para um tipo Python "
"específico e gerará automaticamente uma mensagem de uso. Consulte a secção "
"seguinte para mais detalhes."

#: ../../whatsnew/2.3.rst:1394
msgid ""
"The old and never-documented :mod:`!linuxaudiodev` module has been "
"deprecated, and a new version named :mod:`ossaudiodev` has been added.  The "
"module was renamed because the OSS sound drivers can be used on platforms "
"other than Linux, and the interface has also been tidied and brought up to "
"date in various ways. (Contributed by Greg Ward and Nicholas FitzRoy-Dale.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1400
msgid ""
"The new :mod:`platform` module contains a number of functions that try to "
"determine various properties of the platform you're running on.  There are "
"functions for getting the architecture, CPU type, the Windows OS version, "
"and even the Linux distribution version. (Contributed by Marc-André Lemburg.)"
msgstr ""
"O novo módulo :mod:`platform` contém várias funções que tentam determinar "
"várias propriedades da plataforma em que está a executar. Existem funções "
"para obter a arquitetura, o tipo de CPU, a versão do sistema operativo "
"Windows e até a versão da distribuição Linux. (Contribuído por Marc-André "
"Lemburg.)"

#: ../../whatsnew/2.3.rst:1405
msgid ""
"The parser objects provided by the :mod:`pyexpat <xml.parsers.expat>` module "
"can now optionally buffer character data, resulting in fewer calls to your "
"character data handler and therefore faster performance.  Setting the parser "
"object's :attr:`~xml.parsers.expat.xmlparser.buffer_text` attribute to :"
"const:`True` will enable buffering."
msgstr ""
"Os objetos analisadores fornecidos pelo módulo :mod:`pyexpat <xml.parsers."
"expat>` podem agora, opcionalmente, armazenar em *buffer* dados de "
"caracteres, resultando em menos chamadas ao seu manipulador de dados de "
"caracteres e, portanto, melhor desempenho. Definir o atributo :attr:`~xml."
"parsers.expat.xmlparser.buffer_text` do objeto analisador para :const:`True` "
"ativará o armazenamento em *buffer*."

#: ../../whatsnew/2.3.rst:1410
msgid ""
"The ``sample(population, k)`` function was added to the :mod:`random` "
"module.  *population* is a sequence or :class:`!xrange` object containing "
"the elements of a population, and :func:`~random.sample` chooses *k* "
"elements from the population without replacing chosen elements.  *k* can be "
"any value up to ``len(population)``. For example::"
msgstr ""
"A função ``sample(population, k)`` foi adicionada ao módulo :mod:`random`. "
"*população* é uma sequência ou um objeto :class:`!xrange` que contém os "
"elementos de uma população, e :func:`~random.sample` escolhe *k* elementos "
"da população sem substituir os elementos escolhidos. *k* pode ser qualquer "
"valor até ``len(population)``. Por exemplo::"

#: ../../whatsnew/2.3.rst:1416
msgid ""
">>> days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'St', 'Sn']\n"
">>> random.sample(days, 3)      # Choose 3 elements\n"
"['St', 'Sn', 'Th']\n"
">>> random.sample(days, 7)      # Choose 7 elements\n"
"['Tu', 'Th', 'Mo', 'We', 'St', 'Fr', 'Sn']\n"
">>> random.sample(days, 7)      # Choose 7 again\n"
"['We', 'Mo', 'Sn', 'Fr', 'Tu', 'St', 'Th']\n"
">>> random.sample(days, 8)      # Can't choose eight\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in ?\n"
"  File \"random.py\", line 414, in sample\n"
"      raise ValueError, \"sample larger than population\"\n"
"ValueError: sample larger than population\n"
">>> random.sample(xrange(1,10000,2), 10)   # Choose ten odd nos. under "
"10000\n"
"[3407, 3805, 1505, 7023, 2401, 2267, 9733, 3151, 8083, 9195]"
msgstr ""
">>> dias = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb', 'Dom']\n"
">>> random.sample(dias, 3)      # Escolher 3 elementos\n"
"['Sáb', 'Dom', 'Qui']\n"
">>> random.sample(dias, 7)      # Escolher 7 elementos\n"
"['Ter', 'Qui', 'Seg', 'Qua', 'Sáb', 'Sex', 'Dom']\n"
">>> random.sample(dias, 7)      # Escolher 7 novamente\n"
"['Qua', 'Seg', 'Dom', 'Sex', 'Ter', 'Sáb', 'Qui']\n"
">>> random.sample(dias, 8)      # Não pode escolher oito\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in ?\n"
"  File \"random.py\", line 414, in sample\n"
"      raise ValueError, \"amostra maior que a população\"\n"
"ValueError: amostra maior que a população\n"
">>> random.sample(xrange(1,10000,2), 10)   # Escolher dez números ímpares "
"abaixo de 10000\n"
"[3407, 3805, 1505, 7023, 2401, 2267, 9733, 3151, 8083, 9195]"

#: ../../whatsnew/2.3.rst:1432
msgid ""
"The :mod:`random` module now uses a new algorithm, the Mersenne Twister, "
"implemented in C.  It's faster and more extensively studied than the "
"previous algorithm."
msgstr ""
"O módulo :mod:`random` agora usa um novo algoritmo, o Mersenne Twister, "
"implementado em C. É mais rápido e mais extensivamente estudado do que o "
"algoritmo anterior."

#: ../../whatsnew/2.3.rst:1436
msgid "(All changes contributed by Raymond Hettinger.)"
msgstr "(Todas as alterações contribuídas por Raymond Hettinger.)"

#: ../../whatsnew/2.3.rst:1438
msgid ""
"The :mod:`readline` module also gained a number of new functions: :func:"
"`~readline.get_history_item`, :func:`~readline.get_current_history_length`, "
"and :func:`~readline.redisplay`."
msgstr ""
"O módulo :mod:`readline` também ganhou várias novas funções: :func:"
"`~readline.get_history_item`, :func:`~readline.get_current_history_length` "
"e :func:`~readline.redisplay`."

#: ../../whatsnew/2.3.rst:1442
msgid ""
"The :mod:`!rexec` and :mod:`!Bastion` modules have been declared dead, and "
"attempts to import them will fail with a :exc:`RuntimeError`.  New-style "
"classes provide new ways to break out of the restricted execution "
"environment provided by :mod:`!rexec`, and no one has interest in fixing "
"them or time to do so.  If you have applications using :mod:`!rexec`, "
"rewrite them to use something else."
msgstr ""
"Os módulos :mod:`!rexec` e :mod:`!Bastion` foram declarados obsoletos, e as "
"tentativas de os importar falharão com uma exceção :exc:`RuntimeError`. As "
"classes do novo estilo fornecem novas formas de escapar do ambiente de "
"execução restrito fornecido pelo :mod:`!rexec`, e ninguém tem interesse em "
"corrigi-los ou tempo para o fazer. Se tiver aplicações que usam :mod:`!"
"rexec`, reescreva-as para usar outra coisa."

#: ../../whatsnew/2.3.rst:1448
msgid ""
"(Sticking with Python 2.2 or 2.1 will not make your applications any safer "
"because there are known bugs in the :mod:`!rexec` module in those versions.  "
"To repeat: if you're using :mod:`!rexec`, stop using it immediately.)"
msgstr ""
"(Manter-se no Python 2.2 ou 2.1 não tornará as suas aplicações mais seguras, "
"porque existem *bugs* conhecidos no módulo :mod:`!rexec` nessas versões. "
"Para repetir: se estiver a usar :mod:`!rexec`, pare de o usar imediatamente.)"

#: ../../whatsnew/2.3.rst:1452
msgid ""
"The :mod:`!rotor` module has been deprecated because the  algorithm it uses "
"for encryption is not believed to be secure.  If you need encryption, use "
"one of the several AES Python modules that are available separately."
msgstr ""
"O módulo :mod:`!rotor` foi descontinuado porque o algoritmo que usa para "
"encriptação não é considerado seguro. Se precisar de encriptação, use um dos "
"vários módulos Python AES que estão disponíveis separadamente."

#: ../../whatsnew/2.3.rst:1456
msgid ""
"The :mod:`shutil` module gained a ``move(src, dest)`` function that "
"recursively moves a file or directory to a new location."
msgstr ""
"O módulo :mod:`shutil` ganhou uma função ``move(src, dest)`` que move "
"recursivamente um ficheiro ou diretório para um novo local."

#: ../../whatsnew/2.3.rst:1459
msgid ""
"Support for more advanced POSIX signal handling was added to the :mod:"
"`signal` but then removed again as it proved impossible to make it work "
"reliably across platforms."
msgstr ""
"Foi adicionado suporte para um tratamento mais avançado de sinais POSIX ao "
"módulo :mod:`signal`, mas depois foi removido novamente, pois provou ser "
"impossível fazê-lo funcionar de forma confiável em todas as plataformas."

#: ../../whatsnew/2.3.rst:1463
msgid ""
"The :mod:`socket` module now supports timeouts.  You can call the "
"``settimeout(t)`` method on a socket object to set a timeout of *t* seconds. "
"Subsequent socket operations that take longer than *t* seconds to complete "
"will abort and raise a :exc:`socket.timeout` exception."
msgstr ""
"O módulo :mod:`socket` agora suporta *timeouts*. Pode chamar o método "
"``settimeout(t)`` num objeto *socket* para definir um *timeout* de *t* "
"segundos. Operações subsequentes no *socket* que demorem mais do que *t* "
"segundos a completar serão abortadas e gerarão uma exceção :exc:`socket."
"timeout`."

#: ../../whatsnew/2.3.rst:1468
msgid ""
"The original timeout implementation was by Tim O'Malley.  Michael Gilfix "
"integrated it into the Python :mod:`socket` module and shepherded it through "
"a lengthy review.  After the code was checked in, Guido van Rossum rewrote "
"parts of it.  (This is a good example of a collaborative development process "
"in action.)"
msgstr ""
"A implementação original de *timeout* foi de Tim O'Malley. Michael Gilfix "
"integrou-a no módulo :mod:`socket` do Python e guiou-a através de uma longa "
"revisão. Depois de o código ter sido verificado, Guido van Rossum reescreveu "
"partes dele. (Este é um bom exemplo de um processo de desenvolvimento "
"colaborativo em ação.)"

#: ../../whatsnew/2.3.rst:1474
msgid ""
"On Windows, the :mod:`socket` module now ships with Secure  Sockets Layer "
"(SSL) support."
msgstr ""
"No Windows, o módulo :mod:`socket` agora é distribuído com suporte para "
"Secure Sockets Layer (SSL)."

#: ../../whatsnew/2.3.rst:1477
msgid ""
"The value of the C :c:macro:`!PYTHON_API_VERSION` macro is now exposed at "
"the Python level as ``sys.api_version``.  The current exception can be "
"cleared by calling the new :func:`!sys.exc_clear` function."
msgstr ""
"O valor da macro C :c:macro:`!PYTHON_API_VERSION` está agora exposto ao "
"nível do Python como ``sys.api_version``. A exceção atual pode ser limpa "
"chamando a nova função :func:`!sys.exc_clear`."

#: ../../whatsnew/2.3.rst:1481
msgid ""
"The new :mod:`tarfile` module  allows reading from and writing to :program:"
"`tar`\\ -format archive files. (Contributed by Lars Gustäbel.)"
msgstr ""
"O novo módulo :mod:`tarfile` permite ler e escrever em ficheiros de arquivo "
"no formato :program:`tar`. (Contribuído por Lars Gustäbel.)"

#: ../../whatsnew/2.3.rst:1484
msgid ""
"The new :mod:`textwrap` module contains functions for wrapping strings "
"containing paragraphs of text.  The ``wrap(text, width)`` function takes a "
"string and returns a list containing the text split into lines of no more "
"than the chosen width.  The ``fill(text, width)`` function returns a single "
"string, reformatted to fit into lines no longer than the chosen width. (As "
"you can guess, :func:`~textwrap.fill` is built on top of :func:`~textwrap."
"wrap`.  For example::"
msgstr ""
"O novo módulo :mod:`textwrap` contém funções para formatar strings que "
"contêm parágrafos de texto. A função ``wrap(text, width)`` recebe uma string "
"e devolve uma lista contendo o texto dividido em linhas não maiores do que a "
"largura escolhida. A função ``fill(text, width)`` devolve uma única string, "
"reformulada para caber em linhas não maiores do que a largura escolhida. "
"(Como pode adivinhar, :func:`~textwrap.fill` é construída sobre :func:"
"`~textwrap.wrap`. Por exemplo::"

#: ../../whatsnew/2.3.rst:1491
msgid ""
">>> import textwrap\n"
">>> paragraph = \"Not a whit, we defy augury: ... more text ...\"\n"
">>> textwrap.wrap(paragraph, 60)\n"
"[\"Not a whit, we defy augury: there's a special providence in\",\n"
" \"the fall of a sparrow. If it be now, 'tis not to come; if it\",\n"
" ...]\n"
">>> print textwrap.fill(paragraph, 35)\n"
"Not a whit, we defy augury: there's\n"
"a special providence in the fall of\n"
"a sparrow. If it be now, 'tis not\n"
"to come; if it be not to come, it\n"
"will be now; if it be not now, yet\n"
"it will come: the readiness is all.\n"
">>>"
msgstr ""
">>> import textwrap\n"
">>> parágrafo = \"Nem um pouco, desafiamos a adivinhação: ... mais texto ..."
"\"\n"
">>> textwrap.wrap(parágrafo, 60)\n"
"[\"Nem um pouco, desafiamos a adivinhação: há uma providência especial "
"na\",\n"
" \"queda de um pardal. Se for agora, não é para vir; se não for\",\n"
" ...]\n"
">>> print textwrap.fill(parágrafo, 35)\n"
"Nem um pouco, desafiamos a adivinhação: há\n"
"uma providência especial na queda de\n"
"um pardal. Se for agora, não é para\n"
"vir; se não for para vir, será\n"
"agora; se não for agora, ainda\n"
"virá: a prontidão é tudo.\n"
">>>"

#: ../../whatsnew/2.3.rst:1506
msgid ""
"The module also contains a :class:`~textwrap.TextWrapper` class that "
"actually implements the text wrapping strategy.   Both the :class:`~textwrap."
"TextWrapper` class and the :func:`~textwrap.wrap` and :func:`~textwrap.fill` "
"functions support a number of additional keyword arguments for fine-tuning "
"the formatting; consult the module's documentation for details. (Contributed "
"by Greg Ward.)"
msgstr ""
"O módulo também contém uma classe :class:`~textwrap.TextWrapper` que "
"implementa efetivamente a estratégia de formatação de texto. Tanto a classe :"
"class:`~textwrap.TextWrapper` como as funções :func:`~textwrap.wrap` e :func:"
"`~textwrap.fill` suportam vários argumentos nomeados adicionais para ajustar "
"a formatação; consulte a documentação do módulo para mais detalhes. "
"(Contribuído por Greg Ward.)"

#: ../../whatsnew/2.3.rst:1512
msgid ""
"The :mod:`!thread` and :mod:`threading` modules now have companion modules, :"
"mod:`!dummy_thread` and :mod:`!dummy_threading`, that provide a do-nothing "
"implementation of the :mod:`!thread` module's interface for platforms where "
"threads are not supported.  The intention is to simplify thread-aware "
"modules (ones that *don't* rely on threads to run) by putting the following "
"code at the top::"
msgstr ""
"Os módulos :mod:`!thread` e :mod:`threading` agora têm módulos "
"complementares, :mod:`!dummy_thread` e :mod:`!dummy_threading`, que fornecem "
"uma implementação \"não faz nada\" da interface do módulo :mod:`!thread` "
"para plataformas onde *threads* não são suportadas. A intenção é simplificar "
"módulos conscientes de *threads* (aqueles que *não* dependem de *threads* "
"para funcionar) colocando o seguinte código no topo::"

#: ../../whatsnew/2.3.rst:1519
msgid ""
"try:\n"
"    import threading as _threading\n"
"except ImportError:\n"
"    import dummy_threading as _threading"
msgstr ""
"try:\n"
"    import threading as _threading\n"
"except ImportError:\n"
"    import dummy_threading as _threading"

#: ../../whatsnew/2.3.rst:1524
msgid ""
"In this example, :mod:`!_threading` is used as the module name to make it "
"clear that the module being used is not necessarily the actual :mod:"
"`threading` module. Code can call functions and use classes in :mod:`!"
"_threading` whether or not threads are supported, avoiding an :keyword:`if` "
"statement and making the code slightly clearer.  This module will not "
"magically make multithreaded code run without threads; code that waits for "
"another thread to return or to do something will simply hang forever."
msgstr ""
"Neste exemplo, :mod:`!_threading` é usado como o nome do módulo para deixar "
"claro que o módulo a ser usado não é necessariamente o módulo :mod:"
"`threading` real. O código pode chamar funções e usar classes em :mod:`!"
"_threading`, independentemente de *threads* serem suportadas, evitando uma "
"instrução :keyword:`if` e tornando o código um pouco mais claro. Este módulo "
"não fará mágica para executar código multithread sem *threads*; código que "
"espera que outra *thread* retorne ou faça algo simplesmente ficará bloqueado "
"para sempre."

#: ../../whatsnew/2.3.rst:1532
msgid ""
"The :mod:`time` module's :func:`~time.strptime` function has long been an "
"annoyance because it uses the platform C library's :func:`~time.strptime` "
"implementation, and different platforms sometimes have odd bugs.  Brett "
"Cannon contributed a portable implementation that's written in pure Python "
"and should behave identically on all platforms."
msgstr ""
"A função :func:`~time.strptime` do módulo :mod:`time` há muito que é um "
"incómodo porque usa a implementação da função :func:`~time.strptime` da "
"biblioteca C da plataforma, e diferentes plataformas às vezes têm *bugs* "
"estranhos. Brett Cannon contribuiu com uma implementação portátil escrita em "
"Python puro e que deve comportar-se de forma idêntica em todas as "
"plataformas."

#: ../../whatsnew/2.3.rst:1538
msgid ""
"The new :mod:`timeit` module helps measure how long snippets of Python code "
"take to execute.  The :file:`timeit.py` file can be run directly from the "
"command line, or the module's :class:`~timeit.Timer` class can be imported "
"and used directly.  Here's a short example that figures out whether it's "
"faster to convert an 8-bit string to Unicode by appending an empty Unicode "
"string to it or by using the :func:`!unicode` function::"
msgstr ""
"O novo módulo :mod:`timeit` ajuda a medir quanto tempo demoram trechos de "
"código Python a executar. O ficheiro :file:`timeit.py` pode ser executado "
"diretamente a partir da linha de comandos, ou a classe :class:`~timeit."
"Timer` do módulo pode ser importada e usada diretamente. Aqui está um "
"exemplo curto que descobre se é mais rápido converter uma string de 8 bits "
"para Unicode anexando uma string Unicode vazia a ela ou usando a função :"
"func:`!unicode`::"

#: ../../whatsnew/2.3.rst:1545
msgid ""
"import timeit\n"
"\n"
"timer1 = timeit.Timer('unicode(\"abc\")')\n"
"timer2 = timeit.Timer('\"abc\" + u\"\"')\n"
"\n"
"# Run three trials\n"
"print timer1.repeat(repeat=3, number=100000)\n"
"print timer2.repeat(repeat=3, number=100000)\n"
"\n"
"# On my laptop this outputs:\n"
"# [0.36831796169281006, 0.37441694736480713, 0.35304892063140869]\n"
"# [0.17574405670166016, 0.18193507194519043, 0.17565798759460449]"
msgstr ""
"import timeit\n"
"\n"
"timer1 = timeit.Timer('unicode(\"abc\")')\n"
"timer2 = timeit.Timer('\"abc\" + u\"\"')\n"
"\n"
"# Executar três testes\n"
"print timer1.repeat(repeat=3, number=100000)\n"
"print timer2.repeat(repeat=3, number=100000)\n"
"\n"
"# No meu portátil, isto produz:\n"
"# [0.36831796169281006, 0.37441694736480713, 0.35304892063140869]\n"
"# [0.17574405670166016, 0.18193507194519043, 0.17565798759460449]"

#: ../../whatsnew/2.3.rst:1558
msgid ""
"The :mod:`!Tix` module has received various bug fixes and updates for the "
"current version of the Tix package."
msgstr ""
"O módulo :mod:`!Tix` recebeu várias correções de *bugs* e atualizações para "
"a versão atual do pacote Tix."

#: ../../whatsnew/2.3.rst:1561
msgid ""
"The :mod:`!Tkinter` module now works with a thread-enabled  version of Tcl. "
"Tcl's threading model requires that widgets only be accessed from the thread "
"in which they're created; accesses from another thread can cause Tcl to "
"panic.  For certain Tcl interfaces, :mod:`!Tkinter` will now automatically "
"avoid this  when a widget is accessed from a different thread by marshalling "
"a command, passing it to the correct thread, and waiting for the results.  "
"Other interfaces can't be handled automatically but :mod:`!Tkinter` will now "
"raise an exception on such an access so that you can at least find out about "
"the problem.  See https://mail.python.org/pipermail/python-dev/2002-"
"December/031107.html for a more detailed explanation of this change.  "
"(Implemented by Martin von Löwis.)"
msgstr ""
"O módulo :mod:`!Tkinter` agora funciona com uma versão de Tcl com suporte a "
"*threads*. O modelo de *threads* do Tcl exige que os *widgets* só sejam "
"acedidos a partir da *thread* em que foram criados; acessos a partir de "
"outra *thread* podem fazer com que o Tcl entre em pânico. Para certas "
"interfaces Tcl, o :mod:`!Tkinter` agora evitará automaticamente isto quando "
"um *widget* é acedido a partir de uma *thread* diferente, marshalling um "
"comando, passando-o para a *thread* correta e esperando pelos resultados. "
"Outras interfaces não podem ser tratadas automaticamente, mas o :mod:`!"
"Tkinter` agora gerará uma exceção em tal acesso, para que pelo menos possa "
"descobrir o problema. Consulte https://mail.python.org/pipermail/python-"
"dev/2002-December/031107.html para uma explicação mais detalhada desta "
"alteração. (Implementado por Martin von Löwis.)"

#: ../../whatsnew/2.3.rst:1572
msgid ""
"Calling Tcl methods through :mod:`!_tkinter` no longer  returns only "
"strings. Instead, if Tcl returns other objects those objects are converted "
"to their Python equivalent, if one exists, or wrapped with a :class:`!"
"_tkinter.Tcl_Obj` object if no Python equivalent exists. This behavior can "
"be controlled through the :meth:`!wantobjects` method of :class:`!tkapp` "
"objects."
msgstr ""
"Chamar métodos Tcl através de :mod:`!_tkinter` já não devolve apenas "
"strings. Em vez disso, se o Tcl devolver outros objetos, esses objetos são "
"convertidos para o seu equivalente Python, se existir, ou envolvidos num "
"objeto :class:`!_tkinter.Tcl_Obj` se não existir equivalente Python. Este "
"comportamento pode ser controlado através do método :meth:`!wantobjects` de "
"objetos :class:`!tkapp`."

#: ../../whatsnew/2.3.rst:1578
msgid ""
"When using :mod:`!_tkinter` through the :mod:`!Tkinter` module (as most "
"Tkinter applications will), this feature is always activated. It should not "
"cause compatibility problems, since Tkinter would always convert string "
"results to Python types where possible."
msgstr ""
"Ao usar :mod:`!_tkinter` através do módulo :mod:`!Tkinter` (como a maioria "
"das aplicações Tkinter fará), esta funcionalidade está sempre ativada. Não "
"deve causar problemas de compatibilidade, uma vez que o Tkinter sempre "
"converteria resultados de strings para tipos Python, quando possível."

#: ../../whatsnew/2.3.rst:1583
msgid ""
"If any incompatibilities are found, the old behavior can be restored by "
"setting the :attr:`!wantobjects` variable in the :mod:`!Tkinter` module to "
"false before creating the first :class:`!tkapp` object. ::"
msgstr ""
"Se forem encontradas incompatibilidades, o comportamento antigo pode ser "
"restaurado definindo a variável :attr:`!wantobjects` no módulo :mod:`!"
"Tkinter` para falso antes de criar o primeiro objeto :class:`!tkapp`. ::"

#: ../../whatsnew/2.3.rst:1587
msgid ""
"import Tkinter\n"
"Tkinter.wantobjects = 0"
msgstr ""
"import Tkinter\n"
"Tkinter.wantobjects = 0"

#: ../../whatsnew/2.3.rst:1590
msgid "Any breakage caused by this change should be reported as a bug."
msgstr ""
"Qualquer problema causado por esta alteração deve ser reportado como um "
"*bug*."

#: ../../whatsnew/2.3.rst:1592
msgid ""
"The :mod:`!UserDict` module has a new :class:`!DictMixin` class which "
"defines all dictionary methods for classes that already have a minimum "
"mapping interface.  This greatly simplifies writing classes that need to be "
"substitutable for dictionaries, such as the classes in  the :mod:`shelve` "
"module."
msgstr ""
"O módulo :mod:`!UserDict` tem uma nova classe :class:`!DictMixin` que define "
"todos os métodos de dicionário para classes que já têm uma interface de "
"mapeamento mínima. Isto simplifica muito a escrita de classes que precisam "
"de ser substituíveis por dicionários, como as classes no módulo :mod:"
"`shelve`."

#: ../../whatsnew/2.3.rst:1598
msgid ""
"Adding the mix-in as a superclass provides the full dictionary interface "
"whenever the class defines :meth:`~object.__getitem__`, :meth:`~object."
"__setitem__`, :meth:`~object.__delitem__`, and :meth:`!keys`. For example::"
msgstr ""
"Adicionar o *mix-in* como uma superclasse fornece a interface completa de "
"dicionário sempre que a classe define :meth:`~object.__getitem__`, :meth:"
"`~object.__setitem__`, :meth:`~object.__delitem__` e :meth:`!keys`. Por "
"exemplo::"

#: ../../whatsnew/2.3.rst:1602
msgid ""
">>> import UserDict\n"
">>> class SeqDict(UserDict.DictMixin):\n"
"...     \"\"\"Dictionary lookalike implemented with lists.\"\"\"\n"
"...     def __init__(self):\n"
"...         self.keylist = []\n"
"...         self.valuelist = []\n"
"...     def __getitem__(self, key):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...         except ValueError:\n"
"...             raise KeyError\n"
"...         return self.valuelist[i]\n"
"...     def __setitem__(self, key, value):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...             self.valuelist[i] = value\n"
"...         except ValueError:\n"
"...             self.keylist.append(key)\n"
"...             self.valuelist.append(value)\n"
"...     def __delitem__(self, key):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...         except ValueError:\n"
"...             raise KeyError\n"
"...         self.keylist.pop(i)\n"
"...         self.valuelist.pop(i)\n"
"...     def keys(self):\n"
"...         return list(self.keylist)\n"
"...\n"
">>> s = SeqDict()\n"
">>> dir(s)      # See that other dictionary methods are implemented\n"
"['__cmp__', '__contains__', '__delitem__', '__doc__', '__getitem__',\n"
" '__init__', '__iter__', '__len__', '__module__', '__repr__',\n"
" '__setitem__', 'clear', 'get', 'has_key', 'items', 'iteritems',\n"
" 'iterkeys', 'itervalues', 'keylist', 'keys', 'pop', 'popitem',\n"
" 'setdefault', 'update', 'valuelist', 'values']"
msgstr ""
">>> import UserDict\n"
">>> class SeqDict(UserDict.DictMixin):\n"
"...     \"\"\"Dicionário implementado com listas.\"\"\"\n"
"...     def __init__(self):\n"
"...         self.keylist = []\n"
"...         self.valuelist = []\n"
"...     def __getitem__(self, key):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...         except ValueError:\n"
"...             raise KeyError\n"
"...         return self.valuelist[i]\n"
"...     def __setitem__(self, key, value):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...             self.valuelist[i] = value\n"
"...         except ValueError:\n"
"...             self.keylist.append(key)\n"
"...             self.valuelist.append(value)\n"
"...     def __delitem__(self, key):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...         except ValueError:\n"
"...             raise KeyError\n"
"...         self.keylist.pop(i)\n"
"...         self.valuelist.pop(i)\n"
"...     def keys(self):\n"
"...         return list(self.keylist)\n"
"...\n"
">>> s = SeqDict()\n"
">>> dir(s)      # Ver que outros métodos de dicionário estão implementados\n"
"['__cmp__', '__contains__', '__delitem__', '__doc__', '__getitem__',\n"
" '__init__', '__iter__', '__len__', '__module__', '__repr__',\n"
" '__setitem__', 'clear', 'get', 'has_key', 'items', 'iteritems',\n"
" 'iterkeys', 'itervalues', 'keylist', 'keys', 'pop', 'popitem',\n"
" 'setdefault', 'update', 'valuelist', 'values']"

#: ../../whatsnew/2.3.rst:1639
msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Contribuído por Raymond Hettinger.)"

#: ../../whatsnew/2.3.rst:1641
msgid ""
"The DOM implementation in :mod:`xml.dom.minidom` can now generate XML output "
"in a particular encoding by providing an optional encoding argument to the :"
"meth:`~xml.dom.minidom.Node.toxml` and :meth:`~xml.dom.minidom.Node."
"toprettyxml` methods of DOM nodes."
msgstr ""
"A implementação DOM em :mod:`xml.dom.minidom` pode agora gerar saída XML "
"numa codificação específica, fornecendo um argumento de codificação opcional "
"aos métodos :meth:`~xml.dom.minidom.Node.toxml` e :meth:`~xml.dom.minidom."
"Node.toprettyxml` dos nós DOM."

#: ../../whatsnew/2.3.rst:1645
msgid ""
"The :mod:`!xmlrpclib` module now supports an XML-RPC extension for handling "
"nil data values such as Python's ``None``.  Nil values are always supported "
"on unmarshalling an XML-RPC response.  To generate requests containing "
"``None``, you must supply a true value for the *allow_none* parameter when "
"creating a :class:`!Marshaller` instance."
msgstr ""
"O módulo :mod:`!xmlrpclib` agora suporta uma extensão XML-RPC para tratar "
"valores de dados nulos, como o ``None`` do Python. Valores nulos são sempre "
"suportados ao desempacotar uma resposta XML-RPC. Para gerar pedidos contendo "
"``None``, deve fornecer um valor verdadeiro para o parâmetro *allow_none* ao "
"criar uma instância de :class:`!Marshaller`."

#: ../../whatsnew/2.3.rst:1651
msgid ""
"The new :mod:`!DocXMLRPCServer` module allows writing self-documenting XML-"
"RPC servers. Run it in demo mode (as a program) to see it in action.   "
"Pointing the web browser to the RPC server produces pydoc-style "
"documentation; pointing xmlrpclib to the server allows invoking the actual "
"methods. (Contributed by Brian Quinlan.)"
msgstr ""
"O novo módulo :mod:`!DocXMLRPCServer` permite escrever servidores XML-RPC "
"auto-documentados. Execute-o em modo de demonstração (como um programa) para "
"vê-lo em ação. A apontar o navegador web para o servidor RPC produz "
"documentação no estilo pydoc; a apontar xmlrpclib para o servidor permite "
"invocar os métodos reais. (Contribuído por Brian Quinlan.)"

#: ../../whatsnew/2.3.rst:1657
msgid ""
"Support for internationalized domain names (RFCs 3454, 3490, 3491, and 3492) "
"has been added. The \"idna\" encoding can be used to convert between a "
"Unicode domain name and the ASCII-compatible encoding (ACE) of that name. ::"
msgstr ""
"Foi adicionado suporte para nomes de domínio internacionalizados (RFCs 3454, "
"3490, 3491 e 3492). A codificação \"idna\" pode ser usada para converter "
"entre um nome de domínio Unicode e a codificação compatível com ASCII (ACE) "
"desse nome. ::"

#: ../../whatsnew/2.3.rst:1661
msgid ""
">{}>{}> u\"www.Alliancefrançaise.nu\".encode(\"idna\")\n"
"'www.xn--alliancefranaise-npb.nu'"
msgstr ""
">{}>{}> u\"www.AliançaFrancesa.nu\".encode(\"idna\")\n"
"'www.xn--alianafranaise-npb.nu'"

#: ../../whatsnew/2.3.rst:1664
msgid ""
"The :mod:`socket` module has also been extended to transparently convert "
"Unicode hostnames to the ACE version before passing them to the C library. "
"Modules that deal with hostnames such as :mod:`!httplib` and :mod:`ftplib`) "
"also support Unicode host names; :mod:`!httplib` also sends HTTP ``Host`` "
"headers using the ACE version of the domain name.  :mod:`urllib` supports "
"Unicode URLs with non-ASCII host names as long as the ``path`` part of the "
"URL is ASCII only."
msgstr ""
"O módulo :mod:`socket` também foi estendido para converter transparente "
"nomes de *hosts* Unicode para a versão ACE antes de os passar para a "
"biblioteca C. Módulos que lidam com nomes de *hosts*, como :mod:`!httplib` "
"e :mod:`ftplib`, também suportam nomes de *hosts* Unicode; :mod:`!httplib` "
"também envia cabeçalhos HTTP ``Host`` usando a versão ACE do nome de "
"domínio. :mod:`urllib` suporta URLs Unicode com nomes de *hosts* não-ASCII, "
"desde que a parte ``path`` da URL seja apenas ASCII."

#: ../../whatsnew/2.3.rst:1672
msgid ""
"To implement this change, the :mod:`stringprep` module, the  "
"``mkstringprep`` tool and the ``punycode`` encoding have been added."
msgstr ""
"Para implementar esta alteração, o módulo :mod:`stringprep`, a ferramenta "
"``mkstringprep`` e a codificação ``punycode`` foram adicionados."

#: ../../whatsnew/2.3.rst:1679
msgid "Date/Time Type"
msgstr "Tipo Data/Hora"

#: ../../whatsnew/2.3.rst:1681
msgid ""
"Date and time types suitable for expressing timestamps were added as the :"
"mod:`datetime` module.  The types don't support different calendars or many "
"fancy features, and just stick to the basics of representing time."
msgstr ""
"Foram adicionados tipos de data e hora adequados para expressar *timestamps* "
"como o módulo :mod:`datetime`. Os tipos não suportam calendários diferentes "
"ou muitas funcionalidades sofisticadas, e limitam-se aos conceitos básicos "
"de representação de tempo."

#: ../../whatsnew/2.3.rst:1685
msgid ""
"The three primary types are: :class:`~datetime.date`, representing a day, "
"month, and year; :class:`~datetime.time`, consisting of hour, minute, and "
"second; and :class:`~datetime.datetime`, which contains all the attributes "
"of both :class:`~datetime.date` and :class:`~datetime.time`. There's also a :"
"class:`~datetime.timedelta` class representing differences between two "
"points in time, and time zone logic is implemented by classes inheriting "
"from the abstract :class:`~datetime.tzinfo` class."
msgstr ""
"Os três tipos primários são: :class:`~datetime.date`, que representa um dia, "
"mês e ano; :class:`~datetime.time`, que consiste em hora, minuto e segundo; "
"e :class:`~datetime.datetime`, que contém todos os atributos de :class:"
"`~datetime.date` e :class:`~datetime.time`. Também existe uma classe :class:"
"`~datetime.timedelta` que representa diferenças entre dois pontos no tempo, "
"e a lógica de fuso horário é implementada por classes que herdam da classe "
"abstrata :class:`~datetime.tzinfo`."

#: ../../whatsnew/2.3.rst:1692
msgid ""
"You can create instances of :class:`~datetime.date` and :class:`~datetime."
"time` by either supplying keyword arguments to the appropriate constructor, "
"e.g. ``datetime.date(year=1972, month=10, day=15)``, or by using one of a "
"number of class methods.  For example, the :meth:`~datetime.date.today` "
"class method returns the current local date."
msgstr ""
"Pode criar instâncias de :class:`~datetime.date` e :class:`~datetime.time` "
"fornecendo argumentos nomeados ao construtor apropriado, por exemplo, "
"``datetime.date(year=1972, month=10, day=15)``, ou usando um de vários "
"métodos de classe. Por exemplo, o método de classe :meth:`~datetime.date."
"today` devolve a data local atual."

#: ../../whatsnew/2.3.rst:1698
msgid ""
"Once created, instances of the date/time classes are all immutable. There "
"are a number of methods for producing formatted strings from objects::"
msgstr ""
"Uma vez criadas, as instâncias das classes de data/hora são todas imutáveis. "
"Existem vários métodos para produzir strings formatadas a partir de objetos::"

#: ../../whatsnew/2.3.rst:1701
msgid ""
">>> import datetime\n"
">>> now = datetime.datetime.now()\n"
">>> now.isoformat()\n"
"'2002-12-30T21:27:03.994956'\n"
">>> now.ctime()  # Only available on date, datetime\n"
"'Mon Dec 30 21:27:03 2002'\n"
">>> now.strftime('%Y %d %b')\n"
"'2002 30 Dec'"
msgstr ""
">>> import datetime\n"
">>> agora = datetime.datetime.now()\n"
">>> agora.isoformat()\n"
"'2002-12-30T21:27:03.994956'\n"
">>> agora.ctime()  # Disponível apenas em date, datetime\n"
"'Seg Dez 30 21:27:03 2002'\n"
">>> agora.strftime('%Y %d %b')\n"
"'2002 30 Dez'"

#: ../../whatsnew/2.3.rst:1710
msgid ""
"The :meth:`~datetime.datetime.replace` method allows modifying one or more "
"fields  of a :class:`~datetime.date` or :class:`~datetime.datetime` "
"instance, returning a new instance::"
msgstr ""
"O método :meth:`~datetime.datetime.replace` permite modificar um ou mais "
"campos de uma instância :class:`~datetime.date` ou :class:`~datetime."
"datetime`, devolvendo uma nova instância::"

#: ../../whatsnew/2.3.rst:1713
msgid ""
">>> d = datetime.datetime.now()\n"
">>> d\n"
"datetime.datetime(2002, 12, 30, 22, 15, 38, 827738)\n"
">>> d.replace(year=2001, hour = 12)\n"
"datetime.datetime(2001, 12, 30, 12, 15, 38, 827738)\n"
">>>"
msgstr ""
">>> d = datetime.datetime.now()\n"
">>> d\n"
"datetime.datetime(2002, 12, 30, 22, 15, 38, 827738)\n"
">>> d.replace(year=2001, hour = 12)\n"
"datetime.datetime(2001, 12, 30, 12, 15, 38, 827738)\n"
">>>"

#: ../../whatsnew/2.3.rst:1720
msgid ""
"Instances can be compared, hashed, and converted to strings (the result is "
"the same as that of :meth:`~datetime.datetime.isoformat`).  :class:"
"`~datetime.date` and :class:`~datetime.datetime` instances can be subtracted "
"from each other, and added to :class:`~datetime.timedelta` instances.  The "
"largest missing feature is that there's no standard library support for "
"parsing strings and getting back a :class:`~datetime.date` or :class:"
"`~datetime.datetime`."
msgstr ""
"As instâncias podem ser comparadas, *hashadas* e convertidas em strings (o "
"resultado é o mesmo que o de :meth:`~datetime.datetime.isoformat`). "
"Instâncias de :class:`~datetime.date` e :class:`~datetime.datetime` podem "
"ser subtraídas umas das outras e adicionadas a instâncias de :class:"
"`~datetime.timedelta`. A maior funcionalidade em falta é que não existe "
"suporte na biblioteca padrão para analisar strings e obter de volta um :"
"class:`~datetime.date` ou :class:`~datetime.datetime`."

#: ../../whatsnew/2.3.rst:1727
msgid ""
"For more information, refer to the module's reference documentation. "
"(Contributed by Tim Peters.)"
msgstr ""
"Para mais informações, consulte a documentação de referência do módulo. "
"(Contribuído por Tim Peters.)"

#: ../../whatsnew/2.3.rst:1734
msgid "The optparse Module"
msgstr "O Módulo optparse"

#: ../../whatsnew/2.3.rst:1736
msgid ""
"The :mod:`getopt` module provides simple parsing of command-line arguments.  "
"The new :mod:`optparse` module (originally named Optik) provides more "
"elaborate command-line parsing that follows the Unix conventions, "
"automatically creates the output for :option:`!--help`, and can perform "
"different actions for different options."
msgstr ""
"O módulo :mod:`getopt` fornece uma análise simples de argumentos de linha de "
"comandos. O novo módulo :mod:`optparse` (originalmente chamado Optik) "
"fornece uma análise mais elaborada de linha de comandos que segue as "
"convenções Unix, cria automaticamente a saída para :option:`!--help` e pode "
"realizar diferentes ações para diferentes opções."

#: ../../whatsnew/2.3.rst:1742
msgid ""
"You start by creating an instance of :class:`~optparse.OptionParser` and "
"telling it what your program's options are. ::"
msgstr ""
"Começa por criar uma instância de :class:`~optparse.OptionParser` e diz-lhe "
"quais são as opções do seu programa. ::"

#: ../../whatsnew/2.3.rst:1745
msgid ""
"import sys\n"
"from optparse import OptionParser\n"
"\n"
"op = OptionParser()\n"
"op.add_option('-i', '--input',\n"
"              action='store', type='string', dest='input',\n"
"              help='set input filename')\n"
"op.add_option('-l', '--length',\n"
"              action='store', type='int', dest='length',\n"
"              help='set maximum length of output')"
msgstr ""
"import sys\n"
"from optparse import OptionParser\n"
"\n"
"op = OptionParser()\n"
"op.add_option('-i', '--input',\n"
"              action='store', type='string', dest='input',\n"
"              help='definir nome do ficheiro de entrada')\n"
"op.add_option('-l', '--length',\n"
"              action='store', type='int', dest='length',\n"
"              help='definir comprimento máximo da saída')"

#: ../../whatsnew/2.3.rst:1756
msgid ""
"Parsing a command line is then done by calling the :meth:`~optparse."
"OptionParser.parse_args` method. ::"
msgstr ""
"A análise de uma linha de comandos é então feita chamando o método :meth:"
"`~optparse.OptionParser.parse_args`. ::"

#: ../../whatsnew/2.3.rst:1758
msgid ""
"options, args = op.parse_args(sys.argv[1:])\n"
"print options\n"
"print args"
msgstr ""
"options, args = op.parse_args(sys.argv[1:])\n"
"print options\n"
"print args"

#: ../../whatsnew/2.3.rst:1762
msgid ""
"This returns an object containing all of the option values, and a list of "
"strings containing the remaining arguments."
msgstr ""
"Isto devolve um objeto contendo todos os valores das opções e uma lista de "
"strings contendo os argumentos restantes."

#: ../../whatsnew/2.3.rst:1765
msgid ""
"Invoking the script with the various arguments now works as you'd expect it "
"to. Note that the length argument is automatically converted to an integer."
msgstr ""
"Invocar o *script* com os vários argumentos agora funciona como esperado. "
"Note que o argumento de comprimento é automaticamente convertido para um "
"inteiro."

#: ../../whatsnew/2.3.rst:1768
msgid ""
"$ ./python opt.py -i data arg1\n"
"<Values at 0x400cad4c: {'input': 'data', 'length': None}>\n"
"['arg1']\n"
"$ ./python opt.py --input=data --length=4\n"
"<Values at 0x400cad2c: {'input': 'data', 'length': 4}>\n"
"[]\n"
"$"
msgstr ""
"$ ./python opt.py -i dados arg1\n"
"<Valores em 0x400cad4c: {'input': 'dados', 'length': None}>\n"
"['arg1']\n"
"$ ./python opt.py --input=dados --length=4\n"
"<Valores em 0x400cad2c: {'input': 'dados', 'length': 4}>\n"
"[]\n"
"$"

#: ../../whatsnew/2.3.rst:1778
msgid "The help message is automatically generated for you:"
msgstr "A mensagem de ajuda é gerada automaticamente para si:"

#: ../../whatsnew/2.3.rst:1780
msgid ""
"$ ./python opt.py --help\n"
"usage: opt.py [options]\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -iINPUT, --input=INPUT\n"
"                        set input filename\n"
"  -lLENGTH, --length=LENGTH\n"
"                        set maximum length of output\n"
"$"
msgstr ""
"$ ./python opt.py --help\n"
"uso: opt.py [opções]\n"
"\n"
"opções:\n"
"  -h, --help            mostrar esta mensagem de ajuda e sair\n"
"  -iENTRADA, --input=ENTRADA\n"
"                        definir nome do ficheiro de entrada\n"
"  -lCOMPRIMENTO, --length=COMPRIMENTO\n"
"                        definir comprimento máximo da saída\n"
"$"

#: ../../whatsnew/2.3.rst:1793
msgid "See the module's documentation for more details."
msgstr "Consulte a documentação do módulo para mais detalhes."

#: ../../whatsnew/2.3.rst:1796
msgid ""
"Optik was written by Greg Ward, with suggestions from the readers of the "
"Getopt SIG."
msgstr ""
"Optik foi escrito por Greg Ward, com sugestões dos leitores da Getopt SIG."

#: ../../whatsnew/2.3.rst:1805
msgid "Pymalloc: A Specialized Object Allocator"
msgstr "Pymalloc: Um Alocador de Objetos Especializado"

#: ../../whatsnew/2.3.rst:1807
msgid ""
"Pymalloc, a specialized object allocator written by Vladimir Marangozov, was "
"a feature added to Python 2.1.  Pymalloc is intended to be faster than the "
"system :c:func:`malloc` and to have less memory overhead for allocation "
"patterns typical of Python programs. The allocator uses C's :c:func:`malloc` "
"function to get large pools of memory and then fulfills smaller memory "
"requests from these pools."
msgstr ""
"Pymalloc, um alocador de objetos especializado escrito por Vladimir "
"Marangozov, foi uma funcionalidade adicionada ao Python 2.1. O Pymalloc "
"destina-se a ser mais rápido do que o :c:func:`malloc` do sistema e a ter "
"menos sobrecarga de memória para padrões de alocação típicos de programas "
"Python. O alocador usa a função :c:func:`malloc` do C para obter grandes "
"*pools* de memória e depois satisfaz pedidos de memória mais pequenos a "
"partir desses *pools*."

#: ../../whatsnew/2.3.rst:1813
msgid ""
"In 2.1 and 2.2, pymalloc was an experimental feature and wasn't enabled by "
"default; you had to explicitly enable it when compiling Python by providing "
"the :option:`!--with-pymalloc` option to the :program:`configure` script.  "
"In 2.3, pymalloc has had further enhancements and is now enabled by default; "
"you'll have to supply :option:`!--without-pymalloc` to disable it."
msgstr ""
"Nas versões 2.1 e 2.2, o pymalloc era uma funcionalidade experimental e não "
"estava ativado por predefinição; tinha de o ativar explicitamente ao "
"compilar o Python, fornecendo a opção :option:`!--with-pymalloc` ao script :"
"program:`configure`. No 2.3, o pymalloc sofreu mais melhorias e agora está "
"ativado por predefinição; terá de fornecer :option:`!--without-pymalloc` "
"para o desativar."

#: ../../whatsnew/2.3.rst:1819
msgid ""
"This change is transparent to code written in Python; however, pymalloc may "
"expose bugs in C extensions.  Authors of C extension modules should test "
"their code with pymalloc enabled, because some incorrect code may cause core "
"dumps at runtime."
msgstr ""
"Esta alteração é transparente para o código escrito em Python; no entanto, o "
"pymalloc pode expor *bugs* em extensões C. Os autores de módulos de extensão "
"C devem testar o seu código com o pymalloc ativado, porque algum código "
"incorreto pode causar *core dumps* em tempo de execução."

#: ../../whatsnew/2.3.rst:1824
msgid ""
"There's one particularly common error that causes problems.  There are a "
"number of memory allocation functions in Python's C API that have previously "
"just been aliases for the C library's :c:func:`malloc` and :c:func:`free`, "
"meaning that if you accidentally called mismatched functions the error "
"wouldn't be noticeable. When the object allocator is enabled, these "
"functions aren't aliases of :c:func:`malloc` and :c:func:`free` any more, "
"and calling the wrong function to free memory may get you a core dump.  For "
"example, if memory was allocated using :c:func:`PyObject_Malloc`, it has to "
"be freed using :c:func:`PyObject_Free`, not :c:func:`free`.  A few modules "
"included with Python fell afoul of this and had to be fixed; doubtless there "
"are more third-party modules that will have the same problem."
msgstr ""
"Existe um erro particularmente comum que causa problemas. Existem várias "
"funções de alocação de memória na API C do Python que anteriormente eram "
"apenas *aliases* para :c:func:`malloc` e :c:func:`free` da biblioteca C, o "
"que significava que, se chamasse acidentalmente funções incompatíveis, o "
"erro não seria notável. Quando o alocador de objetos está ativado, estas "
"funções já não são *aliases* de :c:func:`malloc` e :c:func:`free`, e chamar "
"a função errada para libertar memória pode resultar num *core dump*. Por "
"exemplo, se a memória foi alocada usando :c:func:`PyObject_Malloc`, tem de "
"ser libertada usando :c:func:`PyObject_Free`, não :c:func:`free`. Alguns "
"módulos incluídos com o Python tiveram este problema e tiveram de ser "
"corrigidos; sem dúvida, haverá mais módulos de terceiros com o mesmo "
"problema."

#: ../../whatsnew/2.3.rst:1836
msgid ""
"As part of this change, the confusing multiple interfaces for allocating "
"memory have been consolidated down into two API families. Memory allocated "
"with one family must not be manipulated with functions from the other "
"family.  There is one family for allocating chunks of memory and another "
"family of functions specifically for allocating Python objects."
msgstr ""
"Como parte desta alteração, as interfaces múltiplas e confusas para alocação "
"de memória foram consolidadas em duas famílias de API. A memória alocada com "
"uma família não deve ser manipulada com funções da outra família. Existe uma "
"família para alocar blocos de memória e outra família de funções "
"especificamente para alocar objetos Python."

#: ../../whatsnew/2.3.rst:1842
msgid ""
"To allocate and free an undistinguished chunk of memory use the \"raw "
"memory\" family: :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and :c:"
"func:`PyMem_Free`."
msgstr ""
"Para alocar e libertar um bloco de memória indistinto, use a família "
"\"memória bruta\": :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` e :c:func:"
"`PyMem_Free`."

#: ../../whatsnew/2.3.rst:1845
msgid ""
"The \"object memory\" family is the interface to the pymalloc facility "
"described above and is biased towards a large number of \"small\" "
"allocations: :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc`, and :c:"
"func:`PyObject_Free`."
msgstr ""
"A família \"memória de objetos\" é a interface para a funcionalidade "
"pymalloc descrita acima e é enviesada para um grande número de alocações "
"\"pequenas\": :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` e :c:"
"func:`PyObject_Free`."

#: ../../whatsnew/2.3.rst:1849
msgid ""
"To allocate and free Python objects, use the \"object\" family :c:macro:"
"`PyObject_New`, :c:macro:`PyObject_NewVar`, and :c:func:`PyObject_Del`."
msgstr ""
"Para alocar e libertar objetos Python, use a família \"objeto\": :c:macro:"
"`PyObject_New`, :c:macro:`PyObject_NewVar` e :c:func:`PyObject_Del`."

#: ../../whatsnew/2.3.rst:1852
msgid ""
"Thanks to lots of work by Tim Peters, pymalloc in 2.3 also provides "
"debugging features to catch memory overwrites and doubled frees in both "
"extension modules and in the interpreter itself.  To enable this support, "
"compile a debugging version of the Python interpreter by running :program:"
"`configure` with :option:`!--with-pydebug`."
msgstr ""
"Graças a muito trabalho de Tim Peters, o pymalloc no 2.3 também fornece "
"funcionalidades de depuração para detetar sobreescritas de memória e "
"libertações duplicadas, tanto em módulos de extensão como no próprio "
"interpretador. Para ativar este suporte, compile uma versão de depuração do "
"interpretador Python executando :program:`configure` com :option:`!--with-"
"pydebug`."

#: ../../whatsnew/2.3.rst:1858
msgid ""
"To aid extension writers, a header file :file:`Misc/pymemcompat.h` is "
"distributed with the source to Python 2.3 that allows Python extensions to "
"use the 2.3 interfaces to memory allocation while compiling against any "
"version of Python since 1.5.2.  You would copy the file from Python's source "
"distribution and bundle it with the source of your extension."
msgstr ""
"Para ajudar os escritores de extensões, um ficheiro de cabeçalho :file:`Misc/"
"pymemcompat.h` é distribuído com o código-fonte do Python 2.3, que permite "
"que as extensões Python usem as interfaces 2.3 para alocação de memória "
"enquanto compilam contra qualquer versão do Python desde a 1.5.2. Deverá "
"copiar o ficheiro da distribuição de origem do Python e agrupá-lo com o "
"código-fonte da sua extensão."

#: ../../whatsnew/2.3.rst:1867
msgid "https://hg.python.org/cpython/file/default/Objects/obmalloc.c"
msgstr "https://hg.python.org/cpython/file/default/Objects/obmalloc.c"

#: ../../whatsnew/2.3.rst:1868
msgid ""
"For the full details of the pymalloc implementation, see the comments at the "
"top of the file :file:`Objects/obmalloc.c` in the Python source code. The "
"above link points to the file within the python.org SVN browser."
msgstr ""
"Para obter os detalhes completos da implementação do pymalloc, consulte os "
"comentários no topo do ficheiro :file:`Objects/obmalloc.c` no código-fonte "
"do Python. A ligação acima aponta para o ficheiro no navegador SVN do python."
"org."

#: ../../whatsnew/2.3.rst:1876
msgid "Build and C API Changes"
msgstr "Alterações na Compilação e na API C"

#: ../../whatsnew/2.3.rst:1878
msgid "Changes to Python's build process and to the C API include:"
msgstr "As alterações no processo de compilação do Python e na API C incluem:"

#: ../../whatsnew/2.3.rst:1880
msgid ""
"The cycle detection implementation used by the garbage collection has proven "
"to be stable, so it's now been made mandatory.  You can no longer compile "
"Python without it, and the :option:`!--with-cycle-gc` switch to :program:"
"`configure` has been removed."
msgstr ""
"A implementação de deteção de ciclos usada pela recolha de lixo provou ser "
"estável, pelo que agora foi tornada obrigatória. Já não pode compilar o "
"Python sem ela, e a opção :option:`!--with-cycle-gc` para :program:"
"`configure` foi removida."

#: ../../whatsnew/2.3.rst:1885
msgid ""
"Python can now optionally be built as a shared library (:file:`libpython2.3."
"so`) by supplying :option:`!--enable-shared` when running Python's :program:"
"`configure` script.  (Contributed by Ondrej Palkovsky.)"
msgstr ""
"O Python pode agora ser opcionalmente compilado como uma biblioteca "
"partilhada (:file:`libpython2.3.so`) fornecendo :option:`!--enable-shared` "
"ao executar o script :program:`configure` do Python. (Contribuído por Ondrej "
"Palkovsky.)"

#: ../../whatsnew/2.3.rst:1889
msgid ""
"The :c:macro:`!DL_EXPORT` and :c:macro:`!DL_IMPORT` macros are now "
"deprecated. Initialization functions for Python extension modules should now "
"be declared using the new macro :c:macro:`PyMODINIT_FUNC`, while the Python "
"core will generally use the :c:macro:`!PyAPI_FUNC` and :c:macro:`!"
"PyAPI_DATA` macros."
msgstr ""
"As macros :c:macro:`!DL_EXPORT` e :c:macro:`!DL_IMPORT` estão agora "
"obsoletas. As funções de inicialização para módulos de extensão Python devem "
"agora ser declaradas usando a nova macro :c:macro:`PyMODINIT_FUNC`, enquanto "
"o núcleo do Python usará geralmente as macros :c:macro:`!PyAPI_FUNC` e :c:"
"macro:`!PyAPI_DATA`."

#: ../../whatsnew/2.3.rst:1894
msgid ""
"The interpreter can be compiled without any docstrings for the built-in "
"functions and modules by supplying :option:`!--without-doc-strings` to the :"
"program:`configure` script. This makes the Python executable about 10% "
"smaller, but will also mean that you can't get help for Python's built-ins.  "
"(Contributed by Gustavo Niemeyer.)"
msgstr ""
"O interpretador pode ser compilado sem quaisquer *docstrings* para as "
"funções e módulos integrados, fornecendo :option:`!--without-doc-strings` ao "
"script :program:`configure`. Isto torna o executável do Python cerca de 10% "
"menor, mas também significa que não pode obter ajuda para os integrados do "
"Python. (Contribuído por Gustavo Niemeyer.)"

#: ../../whatsnew/2.3.rst:1900
msgid ""
"The :c:func:`!PyArg_NoArgs` macro is now deprecated, and code that uses it "
"should be changed.  For Python 2.2 and later, the method definition table "
"can specify the :c:macro:`METH_NOARGS` flag, signalling that there are no "
"arguments, and the argument checking can then be removed.  If compatibility "
"with pre-2.2 versions of Python is important, the code could use "
"``PyArg_ParseTuple(args, \"\")`` instead, but this will be slower than "
"using :c:macro:`METH_NOARGS`."
msgstr ""
"A macro :c:func:`!PyArg_NoArgs` está agora obsoleta, e o código que a usa "
"deve ser alterado. Para o Python 2.2 e posteriores, a tabela de definição de "
"métodos pode especificar a *flag* :c:macro:`METH_NOARGS`, sinalizando que "
"não há argumentos, e a verificação de argumentos pode então ser removida. Se "
"a compatibilidade com versões pré-2.2 do Python for importante, o código "
"pode usar ``PyArg_ParseTuple(args, \"\")`` em vez disso, mas isto será mais "
"lento do que usar :c:macro:`METH_NOARGS`."

#: ../../whatsnew/2.3.rst:1907
msgid ""
":c:func:`PyArg_ParseTuple` accepts new format characters for various sizes "
"of unsigned integers: ``B`` for :c:expr:`unsigned char`, ``H`` for :c:expr:"
"`unsigned short int`,  ``I`` for :c:expr:`unsigned int`,  and ``K`` for :c:"
"expr:`unsigned long long`."
msgstr ""
":c:func:`PyArg_ParseTuple` aceita novos caracteres de formato para vários "
"tamanhos de inteiros sem sinal: ``B`` para :c:expr:`unsigned char`, ``H`` "
"para :c:expr:`unsigned short int`, ``I`` para :c:expr:`unsigned int` e ``K`` "
"para :c:expr:`unsigned long long`."

#: ../../whatsnew/2.3.rst:1912
msgid ""
"A new function, ``PyObject_DelItemString(mapping, char *key)`` was added as "
"shorthand for ``PyObject_DelItem(mapping, PyString_New(key))``."
msgstr ""
"Foi adicionada uma nova função, ``PyObject_DelItemString(mapping, char "
"*key)``, como atalho para ``PyObject_DelItem(mapping, PyString_New(key))``."

#: ../../whatsnew/2.3.rst:1915
msgid ""
"File objects now manage their internal string buffer differently, increasing "
"it exponentially when needed.  This results in the benchmark tests in :file:"
"`Lib/test/test_bufio.py` speeding up considerably (from 57 seconds to 1.7 "
"seconds, according to one measurement)."
msgstr ""
"Os objetos de ficheiro agora gerem o seu *buffer* interno de strings de "
"forma diferente, aumentando-o exponencialmente quando necessário. Isto "
"resulta em testes de *benchmark* em :file:`Lib/test/test_bufio.py` a "
"acelerarem consideravelmente (de 57 segundos para 1,7 segundos, de acordo "
"com uma medição)."

#: ../../whatsnew/2.3.rst:1920
msgid ""
"It's now possible to define class and static methods for a C extension type "
"by setting either the :c:macro:`METH_CLASS` or :c:macro:`METH_STATIC` flags "
"in a method's :c:type:`PyMethodDef` structure."
msgstr ""
"Agora é possível definir métodos de classe e estáticos para um tipo de "
"extensão C, definindo as *flags* :c:macro:`METH_CLASS` ou :c:macro:"
"`METH_STATIC` na estrutura :c:type:`PyMethodDef` de um método."

#: ../../whatsnew/2.3.rst:1924
msgid ""
"Python now includes a copy of the Expat XML parser's source code, removing "
"any dependence on a system version or local installation of Expat."
msgstr ""
"O Python agora inclui uma cópia do código-fonte do analisador XML Expat, "
"removendo qualquer dependência de uma versão do sistema ou instalação local "
"do Expat."

#: ../../whatsnew/2.3.rst:1927
msgid ""
"If you dynamically allocate type objects in your extension, you should be "
"aware of a change in the rules relating to the :attr:`~type.__module__` and :"
"attr:`~type.__name__` attributes.  In summary, you will want to ensure the "
"type's dictionary contains a ``'__module__'`` key; making the module name "
"the part of the type name leading up to the final period will no longer have "
"the desired effect.  For more detail, read the API reference documentation "
"or the  source."
msgstr ""
"Se alocar dinamicamente objetos de tipo na sua extensão, deve estar ciente "
"de uma alteração nas regras relacionadas com os atributos :attr:`~type."
"__module__` e :attr:`~type.__name__`. Em resumo, deve garantir que o "
"dicionário do tipo contém uma chave ``'__module__'``; tornar o nome do "
"módulo parte do nome do tipo até ao ponto final já não terá o efeito "
"desejado. Para mais detalhes, leia a documentação de referência da API ou o "
"código-fonte."

#: ../../whatsnew/2.3.rst:1938
msgid "Port-Specific Changes"
msgstr "Alterações Específicas da Plataforma"

#: ../../whatsnew/2.3.rst:1940
msgid ""
"Support for a port to IBM's OS/2 using the EMX runtime environment was "
"merged into the main Python source tree.  EMX is a POSIX emulation layer "
"over the OS/2 system APIs.  The Python port for EMX tries to support all the "
"POSIX-like capability exposed by the EMX runtime, and mostly succeeds; :func:"
"`!fork` and :func:`fcntl` are restricted by the limitations of the "
"underlying emulation layer.  The standard OS/2 port, which uses IBM's Visual "
"Age compiler, also gained support for case-sensitive import semantics as "
"part of the integration of the EMX port into CVS.  (Contributed by Andrew "
"MacIntyre.)"
msgstr ""
"O suporte para uma porta para o OS/2 da IBM usando o ambiente de execução "
"EMX foi integrado na árvore de origem principal do Python. O EMX é uma "
"camada de emulação POSIX sobre as APIs do sistema OS/2. A porta do Python "
"para EMX tenta suportar toda a capacidade semelhante a POSIX exposta pelo "
"ambiente de execução EMX, e geralmente consegue; :func:`!fork` e :func:"
"`fcntl` são restritos pelas limitações da camada de emulação subjacente. A "
"porta padrão para OS/2, que usa o compilador Visual Age da IBM, também "
"ganhou suporte para semântica de importação sensível a maiúsculas e "
"minúsculas como parte da integração da porta EMX no CVS. (Contribuído por "
"Andrew MacIntyre.)"

#: ../../whatsnew/2.3.rst:1949
msgid ""
"On MacOS, most toolbox modules have been weaklinked to improve backward "
"compatibility.  This means that modules will no longer fail to load if a "
"single routine is missing on the current OS version. Instead calling the "
"missing routine will raise an exception. (Contributed by Jack Jansen.)"
msgstr ""
"No MacOS, a maioria dos módulos de *toolbox* foram *weaklinked* para "
"melhorar a compatibilidade retroativa. Isto significa que os módulos já não "
"falharão ao carregar se uma rotina individual estiver em falta na versão "
"atual do sistema operativo. Em vez disso, chamar a rotina em falta gerará "
"uma exceção. (Contribuído por Jack Jansen.)"

#: ../../whatsnew/2.3.rst:1954
msgid ""
"The RPM spec files, found in the :file:`Misc/RPM/` directory in the Python "
"source distribution, were updated for 2.3.  (Contributed by Sean "
"Reifschneider.)"
msgstr ""
"Os ficheiros de especificação RPM, encontrados no diretório :file:`Misc/RPM/"
"` na distribuição de origem do Python, foram atualizados para a versão 2.3. "
"(Contribuído por Sean Reifschneider.)"

#: ../../whatsnew/2.3.rst:1957
msgid ""
"Other new platforms now supported by Python include AtheOS (http://www."
"atheos.cx/), GNU/Hurd, and OpenVMS."
msgstr ""
"Outras novas plataformas agora suportadas pelo Python incluem AtheOS (http://"
"www.atheos.cx/), GNU/Hurd e OpenVMS."

#: ../../whatsnew/2.3.rst:1966
msgid "Other Changes and Fixes"
msgstr "Outras Alterações e Correções"

#: ../../whatsnew/2.3.rst:1968
msgid ""
"As usual, there were a bunch of other improvements and bugfixes scattered "
"throughout the source tree.  A search through the CVS change logs finds "
"there were 523 patches applied and 514 bugs fixed between Python 2.2 and "
"2.3.  Both figures are likely to be underestimates."
msgstr ""
"Como habitual, houve várias outras melhorias e correções de *bugs* "
"espalhadas por toda a árvore de origem. Uma pesquisa nos registos de "
"alterações do CVS revela que foram aplicadas 523 correções e corrigidos 514 "
"*bugs* entre o Python 2.2 e o 2.3. Ambos os números são provavelmente "
"subestimados."

#: ../../whatsnew/2.3.rst:1973
msgid "Some of the more notable changes are:"
msgstr "Algumas das alterações mais notáveis são:"

#: ../../whatsnew/2.3.rst:1975
msgid ""
"If the :envvar:`PYTHONINSPECT` environment variable is set, the Python "
"interpreter will enter the interactive prompt after running a Python "
"program, as if Python had been invoked with the :option:`-i` option. The "
"environment variable can be set before running the Python interpreter, or it "
"can be set by the Python program as part of its execution."
msgstr ""
"Se a variável de ambiente :envvar:`PYTHONINSPECT` estiver definida, o "
"interpretador Python entrará no prompt interativo após executar um programa "
"Python, como se o Python tivesse sido invocado com a opção :option:`-i`. A "
"variável de ambiente pode ser definida antes de executar o interpretador "
"Python, ou pode ser definida pelo programa Python como parte da sua execução."

#: ../../whatsnew/2.3.rst:1981
msgid ""
"The :file:`regrtest.py` script now provides a way to allow \"all resources "
"except *foo*.\"  A resource name passed to the :option:`!-u` option can now "
"be prefixed with a hyphen (``'-'``) to mean \"remove this resource.\"  For "
"example, the option '``-uall,-bsddb``' could be used to enable the use of "
"all resources except ``bsddb``."
msgstr ""
"O *script* :file:`regrtest.py` agora fornece uma forma de permitir \"todos "
"os recursos exceto *foo*\". Um nome de recurso passado para a opção :option:"
"`!-u` pode agora ser prefixado com um hífen (``'-'``) para significar "
"\"remover este recurso\". Por exemplo, a opção '``-uall,-bsddb``' pode ser "
"usada para permitir o uso de todos os recursos exceto ``bsddb``."

#: ../../whatsnew/2.3.rst:1987
msgid ""
"The tools used to build the documentation now work under Cygwin as well as "
"Unix."
msgstr ""
"As ferramentas usadas para construir a documentação agora também funcionam "
"no Cygwin, além do Unix."

#: ../../whatsnew/2.3.rst:1990
msgid ""
"The ``SET_LINENO`` opcode has been removed.  Back in the mists of time, this "
"opcode was needed to produce line numbers in tracebacks and support trace "
"functions (for, e.g., :mod:`pdb`). Since Python 1.5, the line numbers in "
"tracebacks have been computed using a different mechanism that works with "
"\"python -O\".  For Python 2.3 Michael Hudson implemented a similar scheme "
"to determine when to call the trace function, removing the need for "
"``SET_LINENO`` entirely."
msgstr ""
"A instrução ``SET_LINENO`` foi removida. Há muito tempo, esta instrução era "
"necessária para produzir números de linha em *tracebacks* e suportar funções "
"de rastreio (por exemplo, :mod:`pdb`). Desde o Python 1.5, os números de "
"linha em *tracebacks* têm sido calculados usando um mecanismo diferente que "
"funciona com \"python -O\". Para o Python 2.3, Michael Hudson implementou um "
"esquema semelhante para determinar quando chamar a função de rastreio, "
"removendo completamente a necessidade de ``SET_LINENO``."

#: ../../whatsnew/2.3.rst:1998
msgid ""
"It would be difficult to detect any resulting difference from Python code, "
"apart from a slight speed up when Python is run without :option:`-O`."
msgstr ""
"Seria difícil detetar qualquer diferença resultante a partir do código "
"Python, além de um ligeiro aumento de velocidade quando o Python é executado "
"sem :option:`-O`."

#: ../../whatsnew/2.3.rst:2001
msgid ""
"C extensions that access the :attr:`~frame.f_lineno` field of frame objects "
"should instead call ``PyCode_Addr2Line(f->f_code, f->f_lasti)``. This will "
"have the added effect of making the code work as desired under \"python -O\" "
"in earlier versions of Python."
msgstr ""
"Extensões C que acedem ao campo :attr:`~frame.f_lineno` de objetos de quadro "
"devem, em vez disso, chamar ``PyCode_Addr2Line(f->f_code, f->f_lasti)``. "
"Isto terá o efeito adicional de fazer com que o código funcione como "
"desejado sob \"python -O\" em versões anteriores do Python."

#: ../../whatsnew/2.3.rst:2006
msgid ""
"A nifty new feature is that trace functions can now assign to the :attr:"
"`~frame.f_lineno` attribute of frame objects, changing the line that will be "
"executed next.  A ``jump`` command has been added to the :mod:`pdb` debugger "
"taking advantage of this new feature. (Implemented by Richie Hindle.)"
msgstr ""
"Uma nova funcionalidade interessante é que as funções de rastreio podem "
"agora atribuir ao atributo :attr:`~frame.f_lineno` de objetos de quadro, "
"alterando a linha que será executada a seguir. Um comando ``jump`` foi "
"adicionado ao depurador :mod:`pdb`, tirando partido desta nova "
"funcionalidade. (Implementado por Richie Hindle.)"

#: ../../whatsnew/2.3.rst:2015
msgid "Porting to Python 2.3"
msgstr "Portar para Python 2.3"

#: ../../whatsnew/2.3.rst:2017
msgid ""
"This section lists previously described changes that may require changes to "
"your code:"
msgstr ""
"Esta secção lista alterações previamente descritas que podem exigir "
"alterações ao seu código:"

#: ../../whatsnew/2.3.rst:2020
msgid ""
":keyword:`yield` is now always a keyword; if it's used as a variable name in "
"your code, a different name must be chosen."
msgstr ""
":keyword:`yield` é agora sempre uma palavra-chave; se for usada como nome de "
"variável no seu código, deve escolher um nome diferente."

#: ../../whatsnew/2.3.rst:2023
msgid ""
"For strings *X* and *Y*, ``X in Y`` now works if *X* is more than one "
"character long."
msgstr ""
"Para strings *X* e *Y*, ``X in Y`` agora funciona se *X* tiver mais do que "
"um caractere."

#: ../../whatsnew/2.3.rst:2026
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer."
msgstr ""
"O construtor de tipo :func:`int` agora devolverá um inteiro longo em vez de "
"gerar um :exc:`OverflowError` quando uma string ou um número de vírgula "
"flutuante for demasiado grande para caber num inteiro."

#: ../../whatsnew/2.3.rst:2030
msgid ""
"If you have Unicode strings that contain 8-bit characters, you must declare "
"the file's encoding (UTF-8, Latin-1, or whatever) by adding a comment to the "
"top of the file.  See section :ref:`section-encodings` for more information."
msgstr ""
"Se tiver strings Unicode que contenham caracteres de 8 bits, deve declarar a "
"codificação do ficheiro (UTF-8, Latin-1, ou outra) adicionando um comentário "
"ao topo do ficheiro. Consulte a secção :ref:`section-encodings` para mais "
"informações."

#: ../../whatsnew/2.3.rst:2034
msgid ""
"Calling Tcl methods through :mod:`!_tkinter` no longer  returns only "
"strings. Instead, if Tcl returns other objects those objects are converted "
"to their Python equivalent, if one exists, or wrapped with a :class:`!"
"_tkinter.Tcl_Obj` object if no Python equivalent exists."
msgstr ""
"Chamar métodos Tcl através de :mod:`!_tkinter` já não devolve apenas "
"strings. Em vez disso, se o Tcl devolver outros objetos, esses objetos são "
"convertidos para o seu equivalente Python, se existir, ou envolvidos num "
"objeto :class:`!_tkinter.Tcl_Obj` se não existir equivalente Python."

#: ../../whatsnew/2.3.rst:2039
msgid ""
"Large octal and hex literals such as ``0xffffffff`` now trigger a :exc:"
"`FutureWarning`. Currently they're stored as 32-bit numbers and result in a "
"negative value, but in Python 2.4 they'll become positive long integers."
msgstr ""
"Literais octais e hexadecimais grandes, como ``0xffffffff``, agora acionam "
"um :exc:`FutureWarning`. Atualmente, são armazenados como números de 32 bits "
"e resultam num valor negativo, mas no Python 2.4 tornar-se-ão inteiros "
"longos positivos."

#: ../../whatsnew/2.3.rst:2043
msgid ""
"There are a few ways to fix this warning.  If you really need a positive "
"number, just add an ``L`` to the end of the literal.  If you're trying to "
"get a 32-bit integer with low bits set and have previously used an "
"expression such as ``~(1 << 31)``, it's probably clearest to start with all "
"bits set and clear the desired upper bits. For example, to clear just the "
"top bit (bit 31), you could write ``0xffffffffL &~(1L<<31)``."
msgstr ""
"Existem algumas formas de corrigir este aviso. Se precisar realmente de um "
"número positivo, basta adicionar um ``L`` ao final do literal. Se estiver a "
"tentar obter um inteiro de 32 bits com os bits baixos definidos e tiver "
"usado anteriormente uma expressão como ``~(1 << 31)``, provavelmente é mais "
"claro começar com todos os bits definidos e limpar os bits superiores "
"desejados. Por exemplo, para limpar apenas o bit superior (bit 31), pode "
"escrever ``0xffffffffL &~(1L<<31)``."

#: ../../whatsnew/2.3.rst:2050
msgid "You can no longer disable assertions by assigning to ``__debug__``."
msgstr "Já não pode desativar afirmações atribuindo a ``__debug__``."

#: ../../whatsnew/2.3.rst:2052
msgid ""
"The Distutils :func:`!setup` function has gained various new keyword "
"arguments such as *depends*.  Old versions of the Distutils will abort if "
"passed unknown keywords.  A solution is to check for the presence of the "
"new :func:`!get_distutil_options` function in your :file:`setup.py` and only "
"uses the new keywords with a version of the Distutils that supports them::"
msgstr ""
"A função :func:`!setup` do Distutils ganhou vários novos argumentos "
"nomeados, como *depends*. Versões antigas do Distutils abortarão se forem "
"passados argumentos desconhecidos. Uma solução é verificar a presença da "
"nova função :func:`!get_distutil_options` no seu :file:`setup.py` e usar os "
"novos argumentos apenas com uma versão do Distutils que os suporte::"

#: ../../whatsnew/2.3.rst:2058
msgid ""
"from distutils import core\n"
"\n"
"kw = {'sources': 'foo.c', ...}\n"
"if hasattr(core, 'get_distutil_options'):\n"
"    kw['depends'] = ['foo.h']\n"
"ext = Extension(**kw)"
msgstr ""
"from distutils import core\n"
"\n"
"kw = {'sources': 'foo.c', ...}\n"
"if hasattr(core, 'get_distutil_options'):\n"
"    kw['depends'] = ['foo.h']\n"
"ext = Extension(**kw)"

#: ../../whatsnew/2.3.rst:2065
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning."
msgstr ""
"Usar ``None`` como nome de variável resultará agora num aviso :exc:"
"`SyntaxWarning`."

#: ../../whatsnew/2.3.rst:2068
msgid ""
"Names of extension types defined by the modules included with Python now "
"contain the module and a ``'.'`` in front of the type name."
msgstr ""
"Os nomes dos tipos de extensão definidos pelos módulos incluídos com o "
"Python agora contêm o módulo e um ``'.'`` antes do nome do tipo."

#: ../../whatsnew/2.3.rst:2077
msgid "Acknowledgements"
msgstr "Agradecimentos"

#: ../../whatsnew/2.3.rst:2079
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Jeff Bauer, Simon Brunning, Brett Cannon, Michael Chermside, Andrew Dalke, "
"Scott David Daniels, Fred L. Drake, Jr., David Fraser,  Kelly Gerber, "
"Raymond Hettinger, Michael Hudson, Chris Lambert, Detlef Lannert, Martin von "
"Löwis, Andrew MacIntyre, Lalo Martins, Chad Netzer, Gustavo Niemeyer, Neal "
"Norwitz, Hans Nowak, Chris Reedy, Francesco Ricciardi, Vinay Sajip, Neil "
"Schemenauer, Roman Suzi, Jason Tishler, Just van Rossum."
msgstr ""
"O autor gostaria de agradecer às seguintes pessoas por oferecerem sugestões, "
"correções e assistência em vários rascunhos deste artigo: Jeff Bauer, Simon "
"Brunning, Brett Cannon, Michael Chermside, Andrew Dalke, Scott David "
"Daniels, Fred L. Drake, Jr., David Fraser, Kelly Gerber, Raymond Hettinger, "
"Michael Hudson, Chris Lambert, Detlef Lannert, Martin von Löwis, Andrew "
"MacIntyre, Lalo Martins, Chad Netzer, Gustavo Niemeyer, Neal Norwitz, Hans "
"Nowak, Chris Reedy, Francesco Ricciardi, Vinay Sajip, Neil Schemenauer, "
"Roman Suzi, Jason Tishler, Just van Rossum."

#: ../../whatsnew/2.3.rst:371
msgid "universal newlines"
msgstr "novas linhas universais"

#: ../../whatsnew/2.3.rst:371
msgid "What's new"
msgstr "Novidades"
