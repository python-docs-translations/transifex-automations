# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# André Moreira <afrmscb@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 18:05+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: André Moreira <afrmscb@gmail.com>, 2025\n"
"Language-Team: Portuguese (Portugal) (https://app.transifex.com/python-doc/"
"teams/5390/pt_PT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_PT\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../glossary.rst:5
msgid "Glossary"
msgstr "Glossário"

#: ../../glossary.rst:10
msgid "``>>>``"
msgstr "``>>>``"

#: ../../glossary.rst:12
msgid ""
"The default Python prompt of the interactive shell.  Often seen for code "
"examples which can be executed interactively in the interpreter."
msgstr ""

#: ../../glossary.rst:14
msgid "``...``"
msgstr "``...``"

#: ../../glossary.rst:16
msgid "Can refer to:"
msgstr "Pode referir-se a:"

#: ../../glossary.rst:18
msgid ""
"The default Python prompt of the interactive shell when entering the code "
"for an indented code block, when within a pair of matching left and right "
"delimiters (parentheses, square brackets, curly braces or triple quotes), or "
"after specifying a decorator."
msgstr ""

#: ../../glossary.rst:23
msgid "The :const:`Ellipsis` built-in constant."
msgstr ""

#: ../../glossary.rst:24
msgid "2to3"
msgstr ""

#: ../../glossary.rst:26
msgid ""
"A tool that tries to convert Python 2.x code to Python 3.x code by handling "
"most of the incompatibilities which can be detected by parsing the source "
"and traversing the parse tree."
msgstr ""

#: ../../glossary.rst:30
msgid ""
"2to3 is available in the standard library as :mod:`lib2to3`; a standalone "
"entry point is provided as :file:`Tools/scripts/2to3`.  See :ref:`2to3-"
"reference`."
msgstr ""

#: ../../glossary.rst:33
msgid "abstract base class"
msgstr "classe base abstrata"

#: ../../glossary.rst:35
msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy "
"or subtly wrong (for example with :ref:`magic methods <special-lookup>`).  "
"ABCs introduce virtual subclasses, which are classes that don't inherit from "
"a class but are still recognized by :func:`isinstance` and :func:"
"`issubclass`; see the :mod:`abc` module documentation.  Python comes with "
"many built-in ABCs for data structures (in the :mod:`collections.abc` "
"module), numbers (in the :mod:`numbers` module), streams (in the :mod:`io` "
"module), import finders and loaders (in the :mod:`importlib.abc` module).  "
"You can create your own ABCs with the :mod:`abc` module."
msgstr ""
"As :term:`classes base abstratas` complementam o :term:`duck-typing` ao "
"fornecer uma forma de definir interfaces quando outras técnicas como :func:"
"`hasattr` seriam desajeitadas ou subtamente erradas (por exemplo, com :ref:"
"`métodos especiais <special-lookup>`). As ABCs introduzem subclasses "
"virtuais, que são classes que não herdam de uma classe, mas ainda são "
"reconhecidas por :func:`isinstance` e :func:`issubclass`; veja a "
"documentação do módulo :mod:`abc`. O Python inclui muitas ABCs integradas "
"para estruturas de dados (no módulo :mod:`collections.abc`), números (no "
"módulo :mod:`numbers`), fluxos (no módulo :mod:`io`), e *finders* e "
"*loaders* de importação (no módulo :mod:`importlib.abc`). Pode criar as suas "
"próprias ABCs com o módulo :mod:`abc`."

#: ../../glossary.rst:46
msgid "annotation"
msgstr "anotação"

#: ../../glossary.rst:48
msgid ""
"A label associated with a variable, a class attribute or a function "
"parameter or return value, used by convention as a :term:`type hint`."
msgstr ""
"Uma etiqueta associada a uma variável, um atributo de classe ou um parâmetro "
"ou valor de retorno de uma função, usada por convenção como uma :term:`dica "
"de tipo <type hint>`."

#: ../../glossary.rst:52
msgid ""
"Annotations of local variables cannot be accessed at runtime, but "
"annotations of global variables, class attributes, and functions are stored "
"in the :attr:`__annotations__` special attribute of modules, classes, and "
"functions, respectively."
msgstr ""

#: ../../glossary.rst:58
msgid ""
"See :term:`variable annotation`, :term:`function annotation`, :pep:`484` "
"and :pep:`526`, which describe this functionality."
msgstr ""

#: ../../glossary.rst:60
msgid "argument"
msgstr "argumento"

#: ../../glossary.rst:62
msgid ""
"A value passed to a :term:`function` (or :term:`method`) when calling the "
"function.  There are two kinds of argument:"
msgstr ""
"Um valor passado a uma :term:`função` (ou :term:`método`) ao chamar a "
"função. Existem dois tipos de argumentos:"

#: ../../glossary.rst:65
msgid ""
":dfn:`keyword argument`: an argument preceded by an identifier (e.g. "
"``name=``) in a function call or passed as a value in a dictionary preceded "
"by ``**``.  For example, ``3`` and ``5`` are both keyword arguments in the "
"following calls to :func:`complex`::"
msgstr ""
":dfn:`argumento nomeado`: um argumento precedido por um identificador (por "
"exemplo, ``name=``) numa chamada de função ou passado como um valor num "
"dicionário precedido por ``**``. Por exemplo, ``3`` e ``5`` são ambos "
"argumentos nomeados nas seguintes chamadas a :func:`complex`::"

#: ../../glossary.rst:73
msgid ""
":dfn:`positional argument`: an argument that is not a keyword argument. "
"Positional arguments can appear at the beginning of an argument list and/or "
"be passed as elements of an :term:`iterable` preceded by ``*``. For example, "
"``3`` and ``5`` are both positional arguments in the following calls::"
msgstr ""
":dfn:`argumento posicional`: um argumento que não é um argumento nomeado. Os "
"argumentos posicionais podem aparecer no início de uma lista de argumentos e/"
"ou ser passados como elementos de um :term:`iterável` precedido por ``*``. "
"Por exemplo, ``3`` e ``5`` são ambos argumentos posicionais nas seguintes "
"chamadas::"

#: ../../glossary.rst:82
msgid ""
"Arguments are assigned to the named local variables in a function body. See "
"the :ref:`calls` section for the rules governing this assignment. "
"Syntactically, any expression can be used to represent an argument; the "
"evaluated value is assigned to the local variable."
msgstr ""
"Os argumentos são atribuídos às variáveis locais nomeadas no corpo de uma "
"função. Veja a secção :ref:`calls` para as regras que governam esta "
"atribuição. Sintaticamente, qualquer expressão pode ser usada para "
"representar um argumento; o valor avaliado é atribuído à variável local."

#: ../../glossary.rst:87
msgid ""
"See also the :term:`parameter` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"and :pep:`362`."
msgstr ""
"Veja também a entrada de glossário :term:`parâmetro`, a pergunta da FAQ "
"sobre :ref:`a diferença entre argumentos e parâmetros <faq-argument-vs-"
"parameter>`, e :pep:`362`."

#: ../../glossary.rst:90
msgid "asynchronous context manager"
msgstr "gestor de contexto assíncrono"

#: ../../glossary.rst:92
msgid ""
"An object which controls the environment seen in an :keyword:`async with` "
"statement by defining :meth:`__aenter__` and :meth:`__aexit__` methods.  "
"Introduced by :pep:`492`."
msgstr ""

#: ../../glossary.rst:95
msgid "asynchronous generator"
msgstr "gerador assíncrono"

#: ../../glossary.rst:97
msgid ""
"A function which returns an :term:`asynchronous generator iterator`.  It "
"looks like a coroutine function defined with :keyword:`async def` except "
"that it contains :keyword:`yield` expressions for producing a series of "
"values usable in an :keyword:`async for` loop."
msgstr ""
"Uma função que devolve um :term:`iterador de gerador assíncrono`. Parece-se "
"com uma função de corrotina definida com :keyword:`async def`, exceto que "
"contém expressões :keyword:`yield` para produzir uma série de valores "
"utilizáveis num ciclo :keyword:`async for`."

#: ../../glossary.rst:102
msgid ""
"Usually refers to an asynchronous generator function, but may refer to an "
"*asynchronous generator iterator* in some contexts.  In cases where the "
"intended meaning isn't clear, using the full terms avoids ambiguity."
msgstr ""
"Normalmente refere-se a uma função de gerador assíncrono, mas pode referir-"
"se a um *iterador de gerador assíncrono* em alguns contextos. Em casos em "
"que o significado pretendido não está claro, o uso dos termos completos "
"evita ambiguidades."

#: ../../glossary.rst:106
msgid ""
"An asynchronous generator function may contain :keyword:`await` expressions "
"as well as :keyword:`async for`, and :keyword:`async with` statements."
msgstr ""
"Uma função de gerador assíncrono pode conter expressões :keyword:`await` bem "
"como instruções :keyword:`async for` e :keyword:`async with`."

#: ../../glossary.rst:109
msgid "asynchronous generator iterator"
msgstr "iterador de gerador assíncrono"

#: ../../glossary.rst:111
msgid "An object created by a :term:`asynchronous generator` function."
msgstr ""

#: ../../glossary.rst:113
msgid ""
"This is an :term:`asynchronous iterator` which when called using the :meth:"
"`__anext__` method returns an awaitable object which will execute the body "
"of the asynchronous generator function until the next :keyword:`yield` "
"expression."
msgstr ""

#: ../../glossary.rst:118
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *asynchronous generator iterator* effectively resumes "
"with another awaitable returned by :meth:`__anext__`, it picks up where it "
"left off.  See :pep:`492` and :pep:`525`."
msgstr ""

#: ../../glossary.rst:123
msgid "asynchronous iterable"
msgstr "iterável assíncrono"

#: ../../glossary.rst:125
msgid ""
"An object, that can be used in an :keyword:`async for` statement. Must "
"return an :term:`asynchronous iterator` from its :meth:`__aiter__` method.  "
"Introduced by :pep:`492`."
msgstr ""

#: ../../glossary.rst:128
msgid "asynchronous iterator"
msgstr "iterador assíncrono"

#: ../../glossary.rst:130
msgid ""
"An object that implements the :meth:`__aiter__` and :meth:`__anext__` "
"methods.  ``__anext__`` must return an :term:`awaitable` object. :keyword:"
"`async for` resolves the awaitables returned by an asynchronous iterator's :"
"meth:`__anext__` method until it raises a :exc:`StopAsyncIteration` "
"exception.  Introduced by :pep:`492`."
msgstr ""

#: ../../glossary.rst:135
msgid "attribute"
msgstr "atributo"

#: ../../glossary.rst:137
msgid ""
"A value associated with an object which is referenced by name using dotted "
"expressions.  For example, if an object *o* has an attribute *a* it would be "
"referenced as *o.a*."
msgstr ""

#: ../../glossary.rst:140
msgid "awaitable"
msgstr "aguardável"

#: ../../glossary.rst:142
msgid ""
"An object that can be used in an :keyword:`await` expression.  Can be a :"
"term:`coroutine` or an object with an :meth:`__await__` method. See also :"
"pep:`492`."
msgstr ""

#: ../../glossary.rst:145
msgid "BDFL"
msgstr "BDFL"

#: ../../glossary.rst:147
msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum <https://gvanrossum."
"github.io/>`_, Python's creator."
msgstr ""
"*Benevolent Dictator For Life* também conhecido como `Guido van Rossum "
"<https://gvanrossum.github.io/>`_, o criador do Python."

#: ../../glossary.rst:149
msgid "binary file"
msgstr "ficheiro binário"

#: ../../glossary.rst:151
msgid ""
"A :term:`file object` able to read and write :term:`bytes-like objects "
"<bytes-like object>`. Examples of binary files are files opened in binary "
"mode (``'rb'``, ``'wb'`` or ``'rb+'``), :data:`sys.stdin.buffer`, :data:`sys."
"stdout.buffer`, and instances of :class:`io.BytesIO` and :class:`gzip."
"GzipFile`."
msgstr ""

#: ../../glossary.rst:158
msgid ""
"See also :term:`text file` for a file object able to read and write :class:"
"`str` objects."
msgstr ""
"Veja também :term:`ficheiro de texto` para um objeto de ficheiro capaz de "
"ler e escrever objetos :class:`str`."

#: ../../glossary.rst:160
msgid "bytes-like object"
msgstr "objeto semelhante a bytes"

#: ../../glossary.rst:162
msgid ""
"An object that supports the :ref:`bufferobjects` and can export a C-:term:"
"`contiguous` buffer. This includes all :class:`bytes`, :class:`bytearray`, "
"and :class:`array.array` objects, as well as many common :class:`memoryview` "
"objects.  Bytes-like objects can be used for various operations that work "
"with binary data; these include compression, saving to a binary file, and "
"sending over a socket."
msgstr ""
"Um objeto que suporta :ref:`bufferobjects` e pode exportar um *buffer* C-:"
"term:`contíguo`. Isto inclui todos os objetos :class:`bytes`, :class:"
"`bytearray` e :class:`array.array`, bem como muitos objetos comuns :class:"
"`memoryview`. Os objetos semelhantes a bytes podem ser usados para várias "
"operações que trabalham com dados binários; estas incluem compressão, "
"gravação num ficheiro binário e envio através de um *socket*."

#: ../../glossary.rst:169
msgid ""
"Some operations need the binary data to be mutable.  The documentation often "
"refers to these as \"read-write bytes-like objects\".  Example mutable "
"buffer objects include :class:`bytearray` and a :class:`memoryview` of a :"
"class:`bytearray`. Other operations require the binary data to be stored in "
"immutable objects (\"read-only bytes-like objects\"); examples of these "
"include :class:`bytes` and a :class:`memoryview` of a :class:`bytes` object."
msgstr ""
"Algumas operações necessitam que os dados binários sejam mutáveis. A "
"documentação muitas vezes refere-se a estes como \"objetos semelhantes a "
"bytes de leitura-escrita\". Exemplos de objetos de *buffer* mutáveis "
"incluem :class:`bytearray` e uma :class:`memoryview` de um :class:"
"`bytearray`. Outras operações requerem que os dados binários sejam "
"armazenados em objetos imutáveis (\"objetos semelhantes a bytes apenas de "
"leitura\"); exemplos destes incluem :class:`bytes` e uma :class:`memoryview` "
"de um objeto :class:`bytes`."

#: ../../glossary.rst:177
msgid "bytecode"
msgstr "*bytecode*"

#: ../../glossary.rst:179
msgid ""
"Python source code is compiled into bytecode, the internal representation of "
"a Python program in the CPython interpreter.  The bytecode is also cached in "
"``.pyc`` files so that executing the same file is faster the second time "
"(recompilation from source to bytecode can be avoided).  This \"intermediate "
"language\" is said to run on a :term:`virtual machine` that executes the "
"machine code corresponding to each bytecode. Do note that bytecodes are not "
"expected to work between different Python virtual machines, nor to be stable "
"between Python releases."
msgstr ""
"O código-fonte Python é compilado em *bytecode*, a representação interna de "
"um programa Python no interpretador CPython. O *bytecode* também é "
"armazenado em cache em ficheiros ``.pyc`` para que a execução do mesmo "
"ficheiro seja mais rápida na segunda vez (a recompilação de fonte para "
"*bytecode* pode ser evitada). Esta \"linguagem intermédia\" é dita como "
"executada numa :term:`máquina virtual` que executa o código de máquina "
"correspondente a cada *bytecode*. Note que os *bytecodes* não são esperados "
"para funcionar entre diferentes máquinas virtuais Python, nem para serem "
"estáveis entre versões do Python."

#: ../../glossary.rst:189
msgid ""
"A list of bytecode instructions can be found in the documentation for :ref:"
"`the dis module <bytecodes>`."
msgstr ""
"Uma lista de instruções de *bytecode* pode ser encontrada na documentação "
"para :ref:`o módulo dis <bytecodes>`."

#: ../../glossary.rst:191
msgid "callback"
msgstr "retorno de chamada"

#: ../../glossary.rst:193
msgid ""
"A subroutine function which is passed as an argument to be executed at some "
"point in the future."
msgstr ""
"Uma função de sub-rotina que é passada como um argumento para ser executada "
"em algum ponto no futuro."

#: ../../glossary.rst:195
msgid "class"
msgstr "classe"

#: ../../glossary.rst:197
msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""
"Um modelo para criar objetos definidos pelo utilizador. As definições de "
"classe normalmente contêm definições de métodos que operam em instâncias da "
"classe."

#: ../../glossary.rst:200
msgid "class variable"
msgstr "variável de classe"

#: ../../glossary.rst:202
msgid ""
"A variable defined in a class and intended to be modified only at class "
"level (i.e., not in an instance of the class)."
msgstr ""
"Uma variável definida numa classe e destinada a ser modificada apenas ao "
"nível da classe (ou seja, não numa instância da classe)."

#: ../../glossary.rst:204
msgid "coercion"
msgstr ""

#: ../../glossary.rst:206
msgid ""
"The implicit conversion of an instance of one type to another during an "
"operation which involves two arguments of the same type.  For example, "
"``int(3.15)`` converts the floating point number to the integer ``3``, but "
"in ``3+4.5``, each argument is of a different type (one int, one float), and "
"both must be converted to the same type before they can be added or it will "
"raise a :exc:`TypeError`.  Without coercion, all arguments of even "
"compatible types would have to be normalized to the same value by the "
"programmer, e.g., ``float(3)+4.5`` rather than just ``3+4.5``."
msgstr ""

#: ../../glossary.rst:214
msgid "complex number"
msgstr "número complexo"

#: ../../glossary.rst:216
msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're "
"not aware of a need for them, it's almost certain you can safely ignore them."
msgstr ""
"Uma extensão do familiar sistema de números reais no qual todos os números "
"são expressos como uma soma de uma parte real e uma parte imaginária. Os "
"números imaginários são múltiplos reais da unidade imaginária (a raiz "
"quadrada de ``-1``), muitas vezes escrita como ``i`` em matemática ou ``j`` "
"em engenharia. O Python tem suporte integrado para números complexos, que "
"são escritos com esta última notação; a parte imaginária é escrita com um "
"sufixo ``j``, por exemplo, ``3+1j``. Para obter acesso a equivalentes "
"complexos do módulo :mod:`math`, use :mod:`cmath`. O uso de números "
"complexos é uma funcionalidade matemática bastante avançada. Se não tem "
"consciência de uma necessidade para eles, é quase certo que pode ignorá-los "
"com segurança."

#: ../../glossary.rst:226
msgid "context manager"
msgstr "gestor de contexto"

#: ../../glossary.rst:228
msgid ""
"An object which controls the environment seen in a :keyword:`with` statement "
"by defining :meth:`__enter__` and :meth:`__exit__` methods. See :pep:`343`."
msgstr ""

#: ../../glossary.rst:231
msgid "context variable"
msgstr "variável de contexto"

#: ../../glossary.rst:233
msgid ""
"A variable which can have different values depending on its context. This is "
"similar to Thread-Local Storage in which each execution thread may have a "
"different value for a variable. However, with context variables, there may "
"be several contexts in one execution thread and the main usage for context "
"variables is to keep track of variables in concurrent asynchronous tasks. "
"See :mod:`contextvars`."
msgstr ""

#: ../../glossary.rst:240
msgid "contiguous"
msgstr "contíguo"

#: ../../glossary.rst:244
msgid ""
"A buffer is considered contiguous exactly if it is either *C-contiguous* or "
"*Fortran contiguous*.  Zero-dimensional buffers are C and Fortran "
"contiguous.  In one-dimensional arrays, the items must be laid out in memory "
"next to each other, in order of increasing indexes starting from zero.  In "
"multidimensional C-contiguous arrays, the last index varies the fastest when "
"visiting items in order of memory address.  However, in Fortran contiguous "
"arrays, the first index varies the fastest."
msgstr ""
"Um *buffer* é considerado contíguo exatamente se for *contíguo C* ou "
"*contíguo Fortran*. *Buffers* de dimensão zero são contíguos C e Fortran. Em "
"*arrays* unidimensionais, os itens devem ser dispostos na memória um ao lado "
"do outro, na ordem de índices crescentes a partir de zero. Em *arrays* "
"multidimensionais contíguos C, o último índice varia mais rapidamente ao "
"visitar itens na ordem de endereços de memória. No entanto, em *arrays* "
"contíguos Fortran, o primeiro índice varia mais rapidamente."

#: ../../glossary.rst:252
msgid "coroutine"
msgstr "corrotina"

#: ../../glossary.rst:254
msgid ""
"Coroutines are a more generalized form of subroutines. Subroutines are "
"entered at one point and exited at another point.  Coroutines can be "
"entered, exited, and resumed at many different points.  They can be "
"implemented with the :keyword:`async def` statement.  See also :pep:`492`."
msgstr ""
"As *corrotinas* são uma forma mais generalizada de sub-rotinas. As sub-"
"rotinas são iniciadas num ponto e terminadas noutro ponto. As *corrotinas* "
"podem ser iniciadas, terminadas e retomadas em muitos pontos diferentes. "
"Podem ser implementadas com a instrução :keyword:`async def`. Veja também :"
"pep:`492`."

#: ../../glossary.rst:259
msgid "coroutine function"
msgstr "função de corrotina"

#: ../../glossary.rst:261
msgid ""
"A function which returns a :term:`coroutine` object.  A coroutine function "
"may be defined with the :keyword:`async def` statement, and may contain :"
"keyword:`await`, :keyword:`async for`, and :keyword:`async with` keywords.  "
"These were introduced by :pep:`492`."
msgstr ""
"Uma função que devolve um objeto :term:`corrotina`. Uma função de corrotina "
"pode ser definida com a instrução :keyword:`async def` e pode conter as "
"palavras-chave :keyword:`await`, :keyword:`async for` e :keyword:`async "
"with`. Estas foram introduzidas por :pep:`492`."

#: ../../glossary.rst:266
msgid "CPython"
msgstr "CPython"

#: ../../glossary.rst:268
msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <https://www.python.org>`_.  The term \"CPython\" "
"is used when necessary to distinguish this implementation from others such "
"as Jython or IronPython."
msgstr ""
"A implementação canónica da linguagem de programação Python, como "
"distribuída em `python.org <https://www.python.org>`_. O termo \"CPython\" é "
"usado quando necessário para distinguir esta implementação de outras como "
"Jython ou IronPython."

#: ../../glossary.rst:272
msgid "decorator"
msgstr "decorador"

#: ../../glossary.rst:274
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""
"Uma função que devolve outra função, geralmente aplicada como uma "
"transformação de função usando a sintaxe ``@wrapper``. Exemplos comuns de "
"*decoradores* são :func:`classmethod` e :func:`staticmethod`."

#: ../../glossary.rst:278
msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr ""
"A sintaxe do *decorador* é apenas açúcar sintático; as seguintes duas "
"definições de função são semanticamente equivalentes::"

#: ../../glossary.rst:289
msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class "
"definitions <class>` for more about decorators."
msgstr ""
"O mesmo conceito existe para classes, mas é menos comumente usado lá. Veja a "
"documentação para :ref:`definições de função <function>` e :ref:`definições "
"de classe <class>` para mais informações sobre *decoradores*."

#: ../../glossary.rst:292
msgid "descriptor"
msgstr "descritor"

#: ../../glossary.rst:294
msgid ""
"Any object which defines the methods :meth:`__get__`, :meth:`__set__`, or :"
"meth:`__delete__`.  When a class attribute is a descriptor, its special "
"binding behavior is triggered upon attribute lookup.  Normally, using *a.b* "
"to get, set or delete an attribute looks up the object named *b* in the "
"class dictionary for *a*, but if *b* is a descriptor, the respective "
"descriptor method gets called.  Understanding descriptors is a key to a deep "
"understanding of Python because they are the basis for many features "
"including functions, methods, properties, class methods, static methods, and "
"reference to super classes."
msgstr ""

#: ../../glossary.rst:304
msgid ""
"For more information about descriptors' methods, see :ref:`descriptors` or "
"the :ref:`Descriptor How To Guide <descriptorhowto>`."
msgstr ""
"Para mais informações sobre os métodos dos *descritores*, veja :ref:"
"`descriptors` ou o :ref:`Guia Prático de Descritores <descriptorhowto>`."

#: ../../glossary.rst:306
msgid "dictionary"
msgstr "dicionário"

#: ../../glossary.rst:308
msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`__hash__` and :meth:`__eq__` methods. Called a "
"hash in Perl."
msgstr ""

#: ../../glossary.rst:311
msgid "dictionary comprehension"
msgstr "compreensão de dicionário"

#: ../../glossary.rst:313
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a dictionary with the results. ``results = {n: n ** 2 for n in "
"range(10)}`` generates a dictionary containing key ``n`` mapped to value ``n "
"** 2``. See :ref:`comprehensions`."
msgstr ""
"Uma forma compacta de processar todos ou parte dos elementos num iterável e "
"devolver um dicionário com os resultados. ``results = {n: n ** 2 for n in "
"range(10)}`` gera um dicionário contendo a chave ``n`` mapeada para o valor "
"``n ** 2``. Veja :ref:`comprehensions`."

#: ../../glossary.rst:317
msgid "dictionary view"
msgstr "vista de dicionário"

#: ../../glossary.rst:319
msgid ""
"The objects returned from :meth:`dict.keys`, :meth:`dict.values`, and :meth:"
"`dict.items` are called dictionary views. They provide a dynamic view on the "
"dictionary’s entries, which means that when the dictionary changes, the view "
"reflects these changes. To force the dictionary view to become a full list "
"use ``list(dictview)``.  See :ref:`dict-views`."
msgstr ""
"Os objetos devolvidos por :meth:`dict.keys`, :meth:`dict.values` e :meth:"
"`dict.items` são chamados *vistas de dicionário*. Eles fornecem uma vista "
"dinâmica nas entradas do dicionário, o que significa que quando o dicionário "
"muda, a vista reflete essas mudanças. Para forçar a vista de dicionário a "
"tornar-se uma lista completa, use ``list(dictview)``. Veja :ref:`dict-views`."

#: ../../glossary.rst:325
msgid "docstring"
msgstr "*docstring*"

#: ../../glossary.rst:327
msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`__doc__` attribute of the enclosing "
"class, function or module.  Since it is available via introspection, it is "
"the canonical place for documentation of the object."
msgstr ""

#: ../../glossary.rst:333
msgid "duck-typing"
msgstr "*duck-typing*"

#: ../../glossary.rst:335
msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be "
"a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic "
"substitution.  Duck-typing avoids tests using :func:`type` or :func:"
"`isinstance`.  (Note, however, that duck-typing can be complemented with :"
"term:`abstract base classes <abstract base class>`.)  Instead, it typically "
"employs :func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""
"Um estilo de programação que não olha para o tipo de um objeto para "
"determinar se tem a interface correta; em vez disso, o método ou atributo é "
"simplesmente chamado ou usado (\"Se parece um pato e grasna como um pato, "
"deve ser um pato.\"). Ao enfatizar interfaces em vez de tipos específicos, o "
"código bem concebido melhora a sua flexibilidade, permitindo substituição "
"polimórfica. O *duck-typing* evita testes usando :func:`type` ou :func:"
"`isinstance`. (Note, no entanto, que o *duck-typing* pode ser complementado "
"com :term:`classes base abstratas <abstract base class>`.) Em vez disso, "
"geralmente emprega testes :func:`hasattr` ou programação :term:`EAFP`."

#: ../../glossary.rst:344
msgid "EAFP"
msgstr "EAFP"

#: ../../glossary.rst:346
msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""
"Easier to ask for forgiveness than permission. Este estilo comum de "
"codificação em Python assume a existência de chaves ou atributos válidos e "
"captura exceções se a suposição se revelar falsa. Este estilo limpo e rápido "
"é caracterizado pela presença de muitas instruções :keyword:`try` e :keyword:"
"`except`. A técnica contrasta com o estilo :term:`LBYL` comum em muitas "
"outras linguagens, como C."

#: ../../glossary.rst:352
msgid "expression"
msgstr "expressão"

#: ../../glossary.rst:354
msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`while`.  Assignments are also statements, not "
"expressions."
msgstr ""
"Uma parte da sintaxe que pode ser avaliada para algum valor. Em outras "
"palavras, uma *expressão* é um acúmulo de elementos de expressão como "
"literais, nomes, acesso a atributos, operadores ou chamadas de função que "
"todos devolvem um valor. Em contraste com muitas outras linguagens, nem "
"todos os construtos da linguagem são expressões. Também existem :term:"
"`instruções` que não podem ser usadas como expressões, como :keyword:"
"`while`. As atribuições também são instruções, não expressões."

#: ../../glossary.rst:361
msgid "extension module"
msgstr "módulo de extensão"

#: ../../glossary.rst:363
msgid ""
"A module written in C or C++, using Python's C API to interact with the core "
"and with user code."
msgstr ""
"Um módulo escrito em C ou C++, usando a API C do Python para interagir com o "
"núcleo e com o código do utilizador."

#: ../../glossary.rst:365
msgid "f-string"
msgstr "*f-string*"

#: ../../glossary.rst:367
msgid ""
"String literals prefixed with ``'f'`` or ``'F'`` are commonly called \"f-"
"strings\" which is short for :ref:`formatted string literals <f-strings>`.  "
"See also :pep:`498`."
msgstr ""

#: ../../glossary.rst:370
msgid "file object"
msgstr "objeto de ficheiro"

#: ../../glossary.rst:372
msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`read()` "
"or :meth:`write()`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard input/"
"output, in-memory buffers, sockets, pipes, etc.).  File objects are also "
"called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""

#: ../../glossary.rst:380
msgid ""
"There are actually three categories of file objects: raw :term:`binary files "
"<binary file>`, buffered :term:`binary files <binary file>` and :term:`text "
"files <text file>`. Their interfaces are defined in the :mod:`io` module.  "
"The canonical way to create a file object is by using the :func:`open` "
"function."
msgstr ""
"Existem na verdade três categorias de objetos de ficheiro: :term:`ficheiros "
"binários crus <binary file>`, :term:`ficheiros binários em *buffer* <binary "
"file>` e :term:`ficheiros de texto <text file>`. As suas interfaces são "
"definidas no módulo :mod:`io`. A forma canónica de criar um objeto de "
"ficheiro é usando a função :func:`open`."

#: ../../glossary.rst:385
msgid "file-like object"
msgstr "objeto tipo ficheiro"

#: ../../glossary.rst:387
msgid "A synonym for :term:`file object`."
msgstr "Um sinónimo de :term:`objeto de ficheiro`."

#: ../../glossary.rst:388
msgid "finder"
msgstr "*finder*"

#: ../../glossary.rst:390
msgid ""
"An object that tries to find the :term:`loader` for a module that is being "
"imported."
msgstr ""
"Um objeto que tenta encontrar o :term:`loader` para um módulo que está a ser "
"importado."

#: ../../glossary.rst:393
msgid ""
"Since Python 3.3, there are two types of finder: :term:`meta path finders "
"<meta path finder>` for use with :data:`sys.meta_path`, and :term:`path "
"entry finders <path entry finder>` for use with :data:`sys.path_hooks`."
msgstr ""

#: ../../glossary.rst:397
msgid "See :pep:`302`, :pep:`420` and :pep:`451` for much more detail."
msgstr ""

#: ../../glossary.rst:398
msgid "floor division"
msgstr "divisão inteira"

#: ../../glossary.rst:400
msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""
"Divisão matemática que arredonda para baixo para o inteiro mais próximo. O "
"operador de divisão inteira é ``//``. Por exemplo, a expressão ``11 // 4`` "
"avalia para ``2`` em contraste com o ``2.75`` devolvido pela divisão real de "
"ponto flutuante. Note que ``(-11) // 4`` é ``-3`` porque isso é ``-2.75`` "
"arredondado *para baixo*. Veja :pep:`238`."

#: ../../glossary.rst:405
msgid "function"
msgstr "função"

#: ../../glossary.rst:407
msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more :term:`arguments <argument>` which may be used in the "
"execution of the body. See also :term:`parameter`, :term:`method`, and the :"
"ref:`function` section."
msgstr ""
"Uma série de instruções que devolve algum valor a um chamador. Também pode "
"ser passada zero ou mais :term:`argumentos <argument>` que podem ser usados "
"na execução do corpo. Veja também :term:`parâmetro`, :term:`método` e a "
"secção :ref:`function`."

#: ../../glossary.rst:411
msgid "function annotation"
msgstr "anotação de função"

#: ../../glossary.rst:413
msgid "An :term:`annotation` of a function parameter or return value."
msgstr "Uma :term:`anotação` de um parâmetro de função ou valor de retorno."

#: ../../glossary.rst:415
msgid ""
"Function annotations are usually used for :term:`type hints <type hint>`: "
"for example, this function is expected to take two :class:`int` arguments "
"and is also expected to have an :class:`int` return value::"
msgstr ""
"As anotações de função são geralmente usadas para :term:`dicas de tipo <type "
"hint>`: por exemplo, esta função é esperada receber dois argumentos :class:"
"`int` e também é esperada ter um valor de retorno :class:`int`::"

#: ../../glossary.rst:423
msgid "Function annotation syntax is explained in section :ref:`function`."
msgstr "A sintaxe de anotação de função é explicada na secção :ref:`function`."

#: ../../glossary.rst:425
msgid ""
"See :term:`variable annotation` and :pep:`484`, which describe this "
"functionality."
msgstr ""

#: ../../glossary.rst:427
msgid "__future__"
msgstr "__future__"

#: ../../glossary.rst:429
msgid ""
"A :ref:`future statement <future>`, ``from __future__ import <feature>``, "
"directs the compiler to compile the current module using syntax or semantics "
"that will become standard in a future release of Python. The :mod:"
"`__future__` module documents the possible values of *feature*.  By "
"importing this module and evaluating its variables, you can see when a new "
"feature was first added to the language and when it will (or did) become the "
"default::"
msgstr ""
"Uma :ref:`instrução futura <future>`, ``from __future__ import <feature>``, "
"direciona o compilador para compilar o módulo atual usando sintaxe ou "
"semântica que se tornarão padrão numa futura versão do Python. O módulo :mod:"
"`__future__` documenta os possíveis valores de *feature*. Ao importar este "
"módulo e avaliar as suas variáveis, pode ver quando uma nova funcionalidade "
"foi adicionada pela primeira vez à linguagem e quando se tornará (ou tornou-"
"se) o padrão::"

#: ../../glossary.rst:440
msgid "garbage collection"
msgstr "recolha de lixo"

#: ../../glossary.rst:442
msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles.  The garbage collector "
"can be controlled using the :mod:`gc` module."
msgstr ""
"O processo de libertar memória quando esta já não é usada. O Python realiza "
"a recolha de lixo através de contagem de referências e de um recolhedor de "
"lixo cíclico que é capaz de detetar e quebrar ciclos de referência. O "
"recolhedor de lixo pode ser controlado usando o módulo :mod:`gc`."

#: ../../glossary.rst:448
msgid "generator"
msgstr "gerador"

#: ../../glossary.rst:450
msgid ""
"A function which returns a :term:`generator iterator`.  It looks like a "
"normal function except that it contains :keyword:`yield` expressions for "
"producing a series of values usable in a for-loop or that can be retrieved "
"one at a time with the :func:`next` function."
msgstr ""
"Uma função que devolve um :term:`iterador de gerador`. Parece-se com uma "
"função normal, exceto que contém expressões :keyword:`yield` para produzir "
"uma série de valores utilizáveis num ciclo *for* ou que podem ser "
"recuperados um de cada vez com a função :func:`next`."

#: ../../glossary.rst:455
msgid ""
"Usually refers to a generator function, but may refer to a *generator "
"iterator* in some contexts.  In cases where the intended meaning isn't "
"clear, using the full terms avoids ambiguity."
msgstr ""
"Normalmente refere-se a uma função de *gerador*, mas pode referir-se a um "
"*iterador de gerador* em alguns contextos. Em casos em que o significado "
"pretendido não está claro, o uso dos termos completos evita ambiguidades."

#: ../../glossary.rst:458
msgid "generator iterator"
msgstr "iterador de gerador"

#: ../../glossary.rst:460
msgid "An object created by a :term:`generator` function."
msgstr "Um objeto criado por uma função :term:`gerador`."

#: ../../glossary.rst:462
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *generator iterator* resumes, it picks up where it "
"left off (in contrast to functions which start fresh on every invocation)."
msgstr ""

#: ../../glossary.rst:469
msgid "generator expression"
msgstr "expressão do gerador"

#: ../../glossary.rst:471
msgid ""
"An expression that returns an iterator.  It looks like a normal expression "
"followed by a :keyword:`!for` clause defining a loop variable, range, and an "
"optional :keyword:`!if` clause.  The combined expression generates values "
"for an enclosing function::"
msgstr ""

#: ../../glossary.rst:478
msgid "generic function"
msgstr "função genérica"

#: ../../glossary.rst:480
msgid ""
"A function composed of multiple functions implementing the same operation "
"for different types. Which implementation should be used during a call is "
"determined by the dispatch algorithm."
msgstr ""
"Uma função composta por múltiplas funções que implementam a mesma operação "
"para diferentes tipos. Qual implementação deve ser usada durante uma chamada "
"é determinada pelo algoritmo de despacho."

#: ../../glossary.rst:484
msgid ""
"See also the :term:`single dispatch` glossary entry, the :func:`functools."
"singledispatch` decorator, and :pep:`443`."
msgstr ""
"Veja também a entrada de glossário :term:`single dispatch`, o decorador :"
"func:`functools.singledispatch` e :pep:`443`."

#: ../../glossary.rst:486
msgid "generic type"
msgstr "tipo genérico"

#: ../../glossary.rst:488
msgid ""
"A :term:`type` that can be parameterized; typically a :ref:`container "
"class<sequence-types>` such as :class:`list` or :class:`dict`. Used for :"
"term:`type hints <type hint>` and :term:`annotations <annotation>`."
msgstr ""
"Um :term:`tipo` que pode ser parametrizado; tipicamente uma :ref:`classe de "
"contentor <sequence-types>` como :class:`list` ou :class:`dict`. Usado para :"
"term:`dicas de tipo <type hint>` e :term:`anotações <annotation>`."

#: ../../glossary.rst:493
msgid ""
"For more details, see :ref:`generic alias types<types-genericalias>`, :pep:"
"`483`, :pep:`484`, :pep:`585`, and the :mod:`typing` module."
msgstr ""
"Para mais detalhes, veja :ref:`generic alias types<types-genericalias>`, :"
"pep:`483`, :pep:`484`, :pep:`585` e o módulo :mod:`typing`."

#: ../../glossary.rst:495
msgid "GIL"
msgstr "GIL"

#: ../../glossary.rst:497
msgid "See :term:`global interpreter lock`."
msgstr "Veja :term:`bloqueio global do interpretador`."

#: ../../glossary.rst:498
msgid "global interpreter lock"
msgstr "bloqueio global do interpretador"

#: ../../glossary.rst:500
msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""
"O mecanismo usado pelo interpretador :term:`CPython` para garantir que "
"apenas uma *thread* executa :term:`bytecode` Python de cada vez. Isto "
"simplifica a implementação do CPython ao tornar o modelo de objeto "
"(incluindo tipos integrados críticos como :class:`dict`) implicitamente "
"seguro contra acesso concorrente. Bloquear todo o interpretador facilita que "
"o interpretador seja multi-*threaded*, à custa de muito do paralelismo "
"proporcionado por máquinas multi-processador."

#: ../../glossary.rst:509
msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally-intensive tasks "
"such as compression or hashing.  Also, the GIL is always released when doing "
"I/O."
msgstr ""

#: ../../glossary.rst:514
msgid ""
"Past efforts to create a \"free-threaded\" interpreter (one which locks "
"shared data at a much finer granularity) have not been successful because "
"performance suffered in the common single-processor case. It is believed "
"that overcoming this performance issue would make the implementation much "
"more complicated and therefore costlier to maintain."
msgstr ""

#: ../../glossary.rst:520
msgid "hash-based pyc"
msgstr "pyc baseado em hash"

#: ../../glossary.rst:522
msgid ""
"A bytecode cache file that uses the hash rather than the last-modified time "
"of the corresponding source file to determine its validity. See :ref:`pyc-"
"invalidation`."
msgstr ""
"Um ficheiro de cache de *bytecode* que usa o *hash* em vez do tempo de "
"última modificação do ficheiro fonte correspondente para determinar a sua "
"validade. Veja :ref:`pyc-invalidation`."

#: ../../glossary.rst:525
msgid "hashable"
msgstr "*hashable*"

#: ../../glossary.rst:527
msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`__hash__` method), and can be compared to "
"other objects (it needs an :meth:`__eq__` method).  Hashable objects which "
"compare equal must have the same hash value."
msgstr ""

#: ../../glossary.rst:532
msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""
"A *hashability* torna um objeto utilizável como chave de dicionário e membro "
"de conjunto, porque estas estruturas de dados usam o valor de *hash* "
"internamente."

#: ../../glossary.rst:535
msgid ""
"Most of Python's immutable built-in objects are hashable; mutable containers "
"(such as lists or dictionaries) are not; immutable containers (such as "
"tuples and frozensets) are only hashable if their elements are hashable.  "
"Objects which are instances of user-defined classes are hashable by "
"default.  They all compare unequal (except with themselves), and their hash "
"value is derived from their :func:`id`."
msgstr ""
"A maioria dos objetos imutáveis integrados do Python são *hashable*; "
"contentores mutáveis (como listas ou dicionários) não são; contentores "
"imutáveis (como tuplos e *frozensets*) são *hashable* apenas se os seus "
"elementos forem *hashable*. Objetos que são instâncias de classes definidas "
"pelo utilizador são *hashable* por defeito. Todos eles comparam como "
"desiguais (exceto consigo próprios), e o seu valor de *hash* é derivado do "
"seu :func:`id`."

#: ../../glossary.rst:542
msgid "IDLE"
msgstr "IDLE"

#: ../../glossary.rst:544
msgid ""
"An Integrated Development Environment for Python.  IDLE is a basic editor "
"and interpreter environment which ships with the standard distribution of "
"Python."
msgstr ""

#: ../../glossary.rst:547
msgid "immutable"
msgstr "imutável"

#: ../../glossary.rst:549
msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""
"Um objeto com um valor fixo. Objetos imutáveis incluem números, cadeias de "
"caracteres e tuplos. Tal objeto não pode ser alterado. Um novo objeto tem de "
"ser criado se um valor diferente tiver de ser armazenado. Eles desempenham "
"um papel importante em locais onde um valor de *hash* constante é "
"necessário, por exemplo, como uma chave num dicionário."

#: ../../glossary.rst:554
msgid "import path"
msgstr "caminho de importação"

#: ../../glossary.rst:556
msgid ""
"A list of locations (or :term:`path entries <path entry>`) that are searched "
"by the :term:`path based finder` for modules to import. During import, this "
"list of locations usually comes from :data:`sys.path`, but for subpackages "
"it may also come from the parent package's ``__path__`` attribute."
msgstr ""
"Uma lista de localizações (ou :term:`entradas de caminho <path entry>`) que "
"são pesquisadas pelo :term:`localizador baseado em caminhos` para módulos a "
"importar. Durante a importação, esta lista de localizações geralmente vem "
"de :data:`sys.path`, mas para subpacotes pode também vir do atributo "
"``__path__`` do pacote pai."

#: ../../glossary.rst:561
msgid "importing"
msgstr "importação"

#: ../../glossary.rst:563
msgid ""
"The process by which Python code in one module is made available to Python "
"code in another module."
msgstr ""
"O processo pelo qual o código Python num módulo é disponibilizado ao código "
"Python noutro módulo."

#: ../../glossary.rst:565
msgid "importer"
msgstr "importador"

#: ../../glossary.rst:567
msgid ""
"An object that both finds and loads a module; both a :term:`finder` and :"
"term:`loader` object."
msgstr ""
"Um objeto que tanto encontra como carrega um módulo; tanto um objeto :term:"
"`finder` como :term:`loader`."

#: ../../glossary.rst:569
msgid "interactive"
msgstr "interativo"

#: ../../glossary.rst:571
msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``)."
msgstr ""

#: ../../glossary.rst:577
msgid "interpreted"
msgstr "interpretado"

#: ../../glossary.rst:579
msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler.  "
"This means that source files can be run directly without explicitly creating "
"an executable which is then run. Interpreted languages typically have a "
"shorter development/debug cycle than compiled ones, though their programs "
"generally also run more slowly.  See also :term:`interactive`."
msgstr ""
"O Python é uma linguagem interpretada, em oposição a uma compilada, embora a "
"distinção possa ser pouco clara devido à presença do compilador de "
"*bytecode*. Isto significa que os ficheiros fonte podem ser executados "
"diretamente sem criar explicitamente um executável que é depois executado. "
"As linguagens interpretadas geralmente têm um ciclo de desenvolvimento/"
"depuração mais curto do que as compiladas, embora os seus programas "
"geralmente também executem mais lentamente. Veja também :term:`interativo`."

#: ../../glossary.rst:586
msgid "interpreter shutdown"
msgstr "encerramento do interpretador"

#: ../../glossary.rst:588
msgid ""
"When asked to shut down, the Python interpreter enters a special phase where "
"it gradually releases all allocated resources, such as modules and various "
"critical internal structures.  It also makes several calls to the :term:"
"`garbage collector <garbage collection>`. This can trigger the execution of "
"code in user-defined destructors or weakref callbacks. Code executed during "
"the shutdown phase can encounter various exceptions as the resources it "
"relies on may not function anymore (common examples are library modules or "
"the warnings machinery)."
msgstr ""
"Quando solicitado a encerrar, o interpretador Python entra numa fase "
"especial onde liberta gradualmente todos os recursos alocados, como módulos "
"e várias estruturas internas críticas. Também faz várias chamadas ao :term:"
"`recolhedor de lixo <garbage collection>`. Isto pode desencadear a execução "
"de código em destrutores definidos pelo utilizador ou em *callbacks* de "
"*weakref*. O código executado durante a fase de encerramento pode encontrar "
"várias exceções, uma vez que os recursos nos quais depende podem já não "
"funcionar (exemplos comuns são módulos de biblioteca ou o mecanismo de "
"avisos)."

#: ../../glossary.rst:597
msgid ""
"The main reason for interpreter shutdown is that the ``__main__`` module or "
"the script being run has finished executing."
msgstr ""
"A principal razão para o encerramento do interpretador é que o módulo "
"``__main__`` ou o *script* em execução terminou a sua execução."

#: ../../glossary.rst:599
msgid "iterable"
msgstr "iterável"

#: ../../glossary.rst:601
msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict`, :term:"
"`file objects <file object>`, and objects of any classes you define with an :"
"meth:`__iter__` method or with a :meth:`__getitem__` method that implements :"
"term:`Sequence <sequence>` semantics."
msgstr ""

#: ../../glossary.rst:608
msgid ""
"Iterables can be used in a :keyword:`for` loop and in many other places "
"where a sequence is needed (:func:`zip`, :func:`map`, ...).  When an "
"iterable object is passed as an argument to the built-in function :func:"
"`iter`, it returns an iterator for the object.  This iterator is good for "
"one pass over the set of values.  When using iterables, it is usually not "
"necessary to call :func:`iter` or deal with iterator objects yourself.  The "
"``for`` statement does that automatically for you, creating a temporary "
"unnamed variable to hold the iterator for the duration of the loop.  See "
"also :term:`iterator`, :term:`sequence`, and :term:`generator`."
msgstr ""

#: ../../glossary.rst:618
msgid "iterator"
msgstr "iterador"

#: ../../glossary.rst:620
msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's :"
"meth:`~iterator.__next__` method (or passing it to the built-in function :"
"func:`next`) return successive items in the stream.  When no more data are "
"available a :exc:`StopIteration` exception is raised instead.  At this "
"point, the iterator object is exhausted and any further calls to its :meth:"
"`__next__` method just raise :exc:`StopIteration` again.  Iterators are "
"required to have an :meth:`__iter__` method that returns the iterator object "
"itself so every iterator is also iterable and may be used in most places "
"where other iterables are accepted.  One notable exception is code which "
"attempts multiple iteration passes.  A container object (such as a :class:"
"`list`) produces a fresh new iterator each time you pass it to the :func:"
"`iter` function or use it in a :keyword:`for` loop.  Attempting this with an "
"iterator will just return the same exhausted iterator object used in the "
"previous iteration pass, making it appear like an empty container."
msgstr ""

#: ../../glossary.rst:635
msgid "More information can be found in :ref:`typeiter`."
msgstr "Mais informações podem ser encontradas em :ref:`typeiter`."

#: ../../glossary.rst:636
msgid "key function"
msgstr "função-chave"

#: ../../glossary.rst:638
msgid ""
"A key function or collation function is a callable that returns a value used "
"for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""
"Uma função-chave ou função de colação é um objeto *chamável* que devolve um "
"valor usado para ordenação ou classificação. Por exemplo, :func:`locale."
"strxfrm` é usada para produzir uma chave de ordenação que está ciente das "
"convenções de ordenação específicas da localidade."

#: ../../glossary.rst:643
msgid ""
"A number of tools in Python accept key functions to control how elements are "
"ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`, :"
"meth:`list.sort`, :func:`heapq.merge`, :func:`heapq.nsmallest`, :func:`heapq."
"nlargest`, and :func:`itertools.groupby`."
msgstr ""
"Várias ferramentas em Python aceitam funções-chave para controlar como os "
"elementos são ordenados ou agrupados. Estas incluem :func:`min`, :func:"
"`max`, :func:`sorted`, :meth:`list.sort`, :func:`heapq.merge`, :func:`heapq."
"nsmallest`, :func:`heapq.nlargest` e :func:`itertools.groupby`."

#: ../../glossary.rst:649
msgid ""
"There are several ways to create a key function.  For example. the :meth:"
"`str.lower` method can serve as a key function for case insensitive sorts.  "
"Alternatively, a key function can be built from a :keyword:`lambda` "
"expression such as ``lambda r: (r[0], r[2])``.  Also, the :mod:`operator` "
"module provides three key function constructors: :func:`~operator."
"attrgetter`, :func:`~operator.itemgetter`, and :func:`~operator."
"methodcaller`.  See the :ref:`Sorting HOW TO <sortinghowto>` for examples of "
"how to create and use key functions."
msgstr ""

#: ../../glossary.rst:657
msgid "keyword argument"
msgstr "argumento nomeado"

#: ../../glossary.rst:659 ../../glossary.rst:936
msgid "See :term:`argument`."
msgstr "Veja :term:`argumento`."

#: ../../glossary.rst:660
msgid "lambda"
msgstr "lambda"

#: ../../glossary.rst:662
msgid ""
"An anonymous inline function consisting of a single :term:`expression` which "
"is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [parameters]: expression``"
msgstr ""
"Uma função anónima em linha consistindo numa única :term:`expressão` que é "
"avaliada quando a função é chamada. A sintaxe para criar uma função *lambda* "
"é ``lambda [parameters]: expression``."

#: ../../glossary.rst:665
msgid "LBYL"
msgstr "LBYL"

#: ../../glossary.rst:667
msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions "
"before making calls or lookups.  This style contrasts with the :term:`EAFP` "
"approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""
"*Look before you leap*. Este estilo de codificação testa explicitamente pré-"
"condições antes de fazer chamadas ou pesquisas. Este estilo contrasta com a "
"abordagem :term:`EAFP` e é caracterizado pela presença de muitas instruções :"
"keyword:`if`."

#: ../../glossary.rst:672
msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""
"Num ambiente multi-*threaded*, a abordagem LBYL pode arriscar introduzir uma "
"condição de corrida entre \"o olhar\" e \"o saltar\". Por exemplo, o código "
"``if key in mapping: return mapping[key]`` pode falhar se outra *thread* "
"remover *key* de *mapping* após o teste, mas antes da pesquisa. Este "
"problema pode ser resolvido com bloqueios ou usando a abordagem EAFP."

#: ../../glossary.rst:677
msgid "list"
msgstr "lista"

#: ../../glossary.rst:679
msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements is "
"O(1)."
msgstr ""

#: ../../glossary.rst:682
msgid "list comprehension"
msgstr "compreensão de lista"

#: ../../glossary.rst:684
msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = ['{:#04x}'.format(x) for x in "
"range(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""
"Uma forma compacta de processar todos ou parte dos elementos numa sequência "
"e devolver uma lista com os resultados. ``result = ['{:#04x}'.format(x) for "
"x in range(256) if x % 2 == 0]`` gera uma lista de *strings* contendo "
"números hexadecimais pares (0x..) no intervalo de 0 a 255. A cláusula :"
"keyword:`if` é opcional. Se omitida, todos os elementos em ``range(256)`` "
"são processados."

#: ../../glossary.rst:690
msgid "loader"
msgstr "*loader*"

#: ../../glossary.rst:692
msgid ""
"An object that loads a module. It must define a method named :meth:"
"`load_module`. A loader is typically returned by a :term:`finder`. See :pep:"
"`302` for details and :class:`importlib.abc.Loader` for an :term:`abstract "
"base class`."
msgstr ""

#: ../../glossary.rst:696
msgid "magic method"
msgstr "método especial"

#: ../../glossary.rst:700
msgid "An informal synonym for :term:`special method`."
msgstr "Um sinónimo informal para :term:`método especial`."

#: ../../glossary.rst:701
msgid "mapping"
msgstr "mapeamento"

#: ../../glossary.rst:703
msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`~collections.abc.Mapping` or :class:"
"`~collections.abc.MutableMapping` :ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Examples include :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` and :class:"
"`collections.Counter`."
msgstr ""

#: ../../glossary.rst:709
msgid "meta path finder"
msgstr "meta path finder"

#: ../../glossary.rst:711
msgid ""
"A :term:`finder` returned by a search of :data:`sys.meta_path`.  Meta path "
"finders are related to, but different from :term:`path entry finders <path "
"entry finder>`."
msgstr ""
"Um :term:`finder` devolvido por uma pesquisa em :data:`sys.meta_path`. Os "
"*meta path finders* estão relacionados com, mas são diferentes dos :term:"
"`path entry finders <path entry finder>`."

#: ../../glossary.rst:715
msgid ""
"See :class:`importlib.abc.MetaPathFinder` for the methods that meta path "
"finders implement."
msgstr ""
"Veja :class:`importlib.abc.MetaPathFinder` para os métodos que os *meta path "
"finders* implementam."

#: ../../glossary.rst:717
msgid "metaclass"
msgstr "metaclasse"

#: ../../glossary.rst:719
msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""
"A classe de uma classe. As definições de classe criam um nome de classe, um "
"dicionário de classe e uma lista de classes base. A *metaclasse* é "
"responsável por receber esses três argumentos e criar a classe. A maioria "
"das linguagens de programação orientada a objetos fornece uma implementação "
"predefinida. O que torna o Python especial é que é possível criar "
"*metaclasses* personalizadas. A maioria dos utilizadores nunca precisa desta "
"ferramenta, mas quando a necessidade surge, as *metaclasses* podem fornecer "
"soluções poderosas e elegantes. Têm sido usadas para registar o acesso a "
"atributos, adicionar segurança de *threads*, rastrear a criação de objetos, "
"implementar *singletons* e muitas outras tarefas."

#: ../../glossary.rst:729
msgid "More information can be found in :ref:`metaclasses`."
msgstr "Mais informações podem ser encontradas em :ref:`metaclasses`."

#: ../../glossary.rst:730
msgid "method"
msgstr "método"

#: ../../glossary.rst:732
msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its "
"first :term:`argument` (which is usually called ``self``). See :term:"
"`function` and :term:`nested scope`."
msgstr ""
"Uma função que é definida dentro do corpo de uma classe. Se chamada como um "
"atributo de uma instância dessa classe, o método receberá o objeto de "
"instância como seu primeiro :term:`argumento` (que é normalmente chamado "
"``self``). Veja :term:`função` e :term:`escopo aninhado`."

#: ../../glossary.rst:736
msgid "method resolution order"
msgstr "ordem de resolução de métodos"

#: ../../glossary.rst:738
msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See `The Python 2.3 Method Resolution Order <https://"
"www.python.org/download/releases/2.3/mro/>`_ for details of the algorithm "
"used by the Python interpreter since the 2.3 release."
msgstr ""

#: ../../glossary.rst:742
msgid "module"
msgstr "módulo"

#: ../../glossary.rst:744
msgid ""
"An object that serves as an organizational unit of Python code.  Modules "
"have a namespace containing arbitrary Python objects.  Modules are loaded "
"into Python by the process of :term:`importing`."
msgstr ""
"Um objeto que serve como uma unidade organizacional de código Python. Os "
"módulos têm um espaço de nomes contendo objetos Python arbitrários. Os "
"módulos são carregados no Python através do processo de :term:`importação`."

#: ../../glossary.rst:748
msgid "See also :term:`package`."
msgstr "Veja também :term:`pacote`."

#: ../../glossary.rst:749
msgid "module spec"
msgstr "especificação do módulo"

#: ../../glossary.rst:751
msgid ""
"A namespace containing the import-related information used to load a module. "
"An instance of :class:`importlib.machinery.ModuleSpec`."
msgstr ""
"Um espaço de nomes contendo as informações relacionadas com a importação "
"usadas para carregar um módulo. Uma instância de :class:`importlib.machinery."
"ModuleSpec`."

#: ../../glossary.rst:753
msgid "MRO"
msgstr "MRO"

#: ../../glossary.rst:755
msgid "See :term:`method resolution order`."
msgstr "Veja :term:`ordem de resolução de métodos`."

#: ../../glossary.rst:756
msgid "mutable"
msgstr "mutável"

#: ../../glossary.rst:758
msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also :"
"term:`immutable`."
msgstr ""
"Objetos mutáveis podem mudar o seu valor, mas mantêm o seu :func:`id`. Veja "
"também :term:`imutável`."

#: ../../glossary.rst:760
msgid "named tuple"
msgstr "tuplo nomeado"

#: ../../glossary.rst:762
msgid ""
"The term \"named tuple\" applies to any type or class that inherits from "
"tuple and whose indexable elements are also accessible using named "
"attributes.  The type or class may have other features as well."
msgstr ""
"O termo \"tuplo nomeado\" aplica-se a qualquer tipo ou classe que herda de "
"tuple e cujos elementos indexáveis também são acessíveis usando atributos "
"nomeados. O tipo ou classe pode ter outras funcionalidades também."

#: ../../glossary.rst:766
msgid ""
"Several built-in types are named tuples, including the values returned by :"
"func:`time.localtime` and :func:`os.stat`.  Another example is :data:`sys."
"float_info`::"
msgstr ""
"Vários tipos integrados são tuplos nomeados, incluindo os valores devolvidos "
"por :func:`time.localtime` e :func:`os.stat`. Outro exemplo é :data:`sys."
"float_info`::"

#: ../../glossary.rst:777
msgid ""
"Some named tuples are built-in types (such as the above examples). "
"Alternatively, a named tuple can be created from a regular class definition "
"that inherits from :class:`tuple` and that defines named fields.  Such a "
"class can be written by hand or it can be created with the factory function :"
"func:`collections.namedtuple`.  The latter technique also adds some extra "
"methods that may not be found in hand-written or built-in named tuples."
msgstr ""

#: ../../glossary.rst:784
msgid "namespace"
msgstr "espaço de nomes"

#: ../../glossary.rst:786
msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity "
"by preventing naming conflicts.  For instance, the functions :func:`builtins."
"open <.open>` and :func:`os.open` are distinguished by their namespaces.  "
"Namespaces also aid readability and maintainability by making it clear which "
"module implements a function.  For instance, writing :func:`random.seed` or :"
"func:`itertools.islice` makes it clear that those functions are implemented "
"by the :mod:`random` and :mod:`itertools` modules, respectively."
msgstr ""
"O local onde uma variável é armazenada. Os espaços de nomes são "
"implementados como dicionários. Existem os espaços de nomes local, global e "
"integrado, bem como espaços de nomes aninhados em objetos (em métodos). Os "
"espaços de nomes suportam a modularidade ao prevenir conflitos de nomes. Por "
"exemplo, as funções :func:`builtins.open <.open>` e :func:`os.open` são "
"distinguidas pelos seus espaços de nomes. Os espaços de nomes também ajudam "
"na legibilidade e manutenção, tornando claro qual módulo implementa uma "
"função. Por exemplo, escrever :func:`random.seed` ou :func:`itertools."
"islice` torna claro que essas funções são implementadas pelos módulos :mod:"
"`random` e :mod:`itertools`, respetivamente."

#: ../../glossary.rst:796
msgid "namespace package"
msgstr "pacote de espaço de nomes"

#: ../../glossary.rst:798
msgid ""
"A :pep:`420` :term:`package` which serves only as a container for "
"subpackages.  Namespace packages may have no physical representation, and "
"specifically are not like a :term:`regular package` because they have no "
"``__init__.py`` file."
msgstr ""

#: ../../glossary.rst:803
msgid "See also :term:`module`."
msgstr "Veja também :term:`módulo`."

#: ../../glossary.rst:804
msgid "nested scope"
msgstr "escopo aninhado"

#: ../../glossary.rst:806
msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes by default work only for "
"reference and not for assignment.  Local variables both read and write in "
"the innermost scope.  Likewise, global variables read and write to the "
"global namespace.  The :keyword:`nonlocal` allows writing to outer scopes."
msgstr ""
"A capacidade de referenciar uma variável numa definição envolvente. Por "
"exemplo, uma função definida dentro de outra função pode referenciar "
"variáveis na função exterior. Note que os escopos aninhados, por "
"predefinição, funcionam apenas para referência e não para atribuição. As "
"variáveis locais leem e escrevem no escopo mais interno. Da mesma forma, as "
"variáveis globais leem e escrevem no espaço de nomes global. A palavra-"
"chave :keyword:`nonlocal` permite escrever em escopos exteriores."

#: ../../glossary.rst:813
msgid "new-style class"
msgstr "classe de novo estilo"

#: ../../glossary.rst:815
msgid ""
"Old name for the flavor of classes now used for all class objects.  In "
"earlier Python versions, only new-style classes could use Python's newer, "
"versatile features like :attr:`~object.__slots__`, descriptors, properties, :"
"meth:`__getattribute__`, class methods, and static methods."
msgstr ""

#: ../../glossary.rst:819
msgid "object"
msgstr "objeto"

#: ../../glossary.rst:821
msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""
"Quaisquer dados com estado (atributos ou valor) e comportamento definido "
"(métodos). Também a classe base final de qualquer :term:`classe de novo "
"estilo`."

#: ../../glossary.rst:824
msgid "package"
msgstr "pacote"

#: ../../glossary.rst:826
msgid ""
"A Python :term:`module` which can contain submodules or recursively, "
"subpackages.  Technically, a package is a Python module with an ``__path__`` "
"attribute."
msgstr ""

#: ../../glossary.rst:830
msgid "See also :term:`regular package` and :term:`namespace package`."
msgstr ""
"Veja também :term:`pacote regular` e :term:`pacote de espaço de nomes`."

#: ../../glossary.rst:831
msgid "parameter"
msgstr "parâmetro"

#: ../../glossary.rst:833
msgid ""
"A named entity in a :term:`function` (or method) definition that specifies "
"an :term:`argument` (or in some cases, arguments) that the function can "
"accept.  There are five kinds of parameter:"
msgstr ""
"Uma entidade nomeada numa definição de :term:`função` (ou método) que "
"especifica um :term:`argumento` (ou em alguns casos, argumentos) que a "
"função pode aceitar. Existem cinco tipos de parâmetros:"

#: ../../glossary.rst:837
msgid ""
":dfn:`positional-or-keyword`: specifies an argument that can be passed "
"either :term:`positionally <argument>` or as a :term:`keyword argument "
"<argument>`.  This is the default kind of parameter, for example *foo* and "
"*bar* in the following::"
msgstr ""
":dfn:`posicional-ou-nomeado`: especifica um argumento que pode ser passado "
"ou :term:`posicionalmente <argument>` ou como um :term:`argumento nomeado "
"<argument>`. Este é o tipo predefinido de parâmetro, por exemplo, *foo* e "
"*bar* no seguinte::"

#: ../../glossary.rst:846
msgid ""
":dfn:`positional-only`: specifies an argument that can be supplied only by "
"position. Positional-only parameters can be defined by including a ``/`` "
"character in the parameter list of the function definition after them, for "
"example *posonly1* and *posonly2* in the following::"
msgstr ""
":dfn:`apenas-posicional`: especifica um argumento que só pode ser fornecido "
"por posição. Os parâmetros apenas-posicionais podem ser definidos incluindo "
"um caractere ``/`` na lista de parâmetros da definição da função após eles, "
"por exemplo, *posonly1* e *posonly2* no seguinte::"

#: ../../glossary.rst:855
msgid ""
":dfn:`keyword-only`: specifies an argument that can be supplied only by "
"keyword.  Keyword-only parameters can be defined by including a single var-"
"positional parameter or bare ``*`` in the parameter list of the function "
"definition before them, for example *kw_only1* and *kw_only2* in the "
"following::"
msgstr ""
":dfn:`apenas-nomeado`: especifica um argumento que só pode ser fornecido por "
"palavra-chave. Os parâmetros apenas-nomeados podem ser definidos incluindo "
"um parâmetro var-posicional único ou um ``*`` simples na lista de parâmetros "
"da definição da função antes deles, por exemplo, *kw_only1* e *kw_only2* no "
"seguinte::"

#: ../../glossary.rst:863
msgid ""
":dfn:`var-positional`: specifies that an arbitrary sequence of positional "
"arguments can be provided (in addition to any positional arguments already "
"accepted by other parameters).  Such a parameter can be defined by "
"prepending the parameter name with ``*``, for example *args* in the "
"following::"
msgstr ""
":dfn:`var-posicional`: especifica que uma sequência arbitrária de argumentos "
"posicionais pode ser fornecida (além de quaisquer argumentos posicionais já "
"aceites por outros parâmetros). Um parâmetro desse tipo pode ser definido "
"prefixando o nome do parâmetro com ``*``, por exemplo, *args* no seguinte::"

#: ../../glossary.rst:871
msgid ""
":dfn:`var-keyword`: specifies that arbitrarily many keyword arguments can be "
"provided (in addition to any keyword arguments already accepted by other "
"parameters).  Such a parameter can be defined by prepending the parameter "
"name with ``**``, for example *kwargs* in the example above."
msgstr ""
":dfn:`var-palavras nomeadas`: especifica que um número arbitrário de "
"argumentos nomeados pode ser fornecido (além de quaisquer argumentos "
"nomeados já aceites por outros parâmetros). Um parâmetro desse tipo pode ser "
"definido prefixando o nome do parâmetro com ``**``, por exemplo, *kwargs* no "
"exemplo acima."

#: ../../glossary.rst:877
msgid ""
"Parameters can specify both optional and required arguments, as well as "
"default values for some optional arguments."
msgstr ""
"Os parâmetros podem especificar argumentos opcionais e obrigatórios, bem "
"como valores predefinidos para alguns argumentos opcionais."

#: ../../glossary.rst:880
msgid ""
"See also the :term:`argument` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"the :class:`inspect.Parameter` class, the :ref:`function` section, and :pep:"
"`362`."
msgstr ""
"Veja também a entrada de glossário :term:`argumento`, a pergunta da FAQ "
"sobre :ref:`a diferença entre argumentos e parâmetros <faq-argument-vs-"
"parameter>`, a classe :class:`inspect.Parameter`, a secção :ref:`function` "
"e :pep:`362`."

#: ../../glossary.rst:884
msgid "path entry"
msgstr "entrada de caminho"

#: ../../glossary.rst:886
msgid ""
"A single location on the :term:`import path` which the :term:`path based "
"finder` consults to find modules for importing."
msgstr ""
"Uma localização única no :term:`caminho de importação` que o :term:"
"`localizador baseado em caminhos` consulta para encontrar módulos para "
"importação."

#: ../../glossary.rst:888
msgid "path entry finder"
msgstr "localizador de entrada de caminho"

#: ../../glossary.rst:890
msgid ""
"A :term:`finder` returned by a callable on :data:`sys.path_hooks` (i.e. a :"
"term:`path entry hook`) which knows how to locate modules given a :term:"
"`path entry`."
msgstr ""
"Um :term:`finder` devolvido por um objeto chamável em :data:`sys.path_hooks` "
"(ou seja, um :term:`path entry hook`) que sabe como localizar módulos dada "
"uma :term:`entrada de caminho`."

#: ../../glossary.rst:894
msgid ""
"See :class:`importlib.abc.PathEntryFinder` for the methods that path entry "
"finders implement."
msgstr ""
"Veja :class:`importlib.abc.PathEntryFinder` para os métodos que os *path "
"entry finders* implementam."

#: ../../glossary.rst:896
msgid "path entry hook"
msgstr "path entry hook"

#: ../../glossary.rst:898
msgid ""
"A callable on the :data:`sys.path_hook` list which returns a :term:`path "
"entry finder` if it knows how to find modules on a specific :term:`path "
"entry`."
msgstr ""

#: ../../glossary.rst:901
msgid "path based finder"
msgstr "localizador baseado em caminhos"

#: ../../glossary.rst:903
msgid ""
"One of the default :term:`meta path finders <meta path finder>` which "
"searches an :term:`import path` for modules."
msgstr ""
"Um dos :term:`meta path finders <meta path finder>` predefinidos que "
"pesquisa um :term:`caminho de importação` para módulos."

#: ../../glossary.rst:905
msgid "path-like object"
msgstr "objeto semelhante a um caminho"

#: ../../glossary.rst:907
msgid ""
"An object representing a file system path. A path-like object is either a :"
"class:`str` or :class:`bytes` object representing a path, or an object "
"implementing the :class:`os.PathLike` protocol. An object that supports the :"
"class:`os.PathLike` protocol can be converted to a :class:`str` or :class:"
"`bytes` file system path by calling the :func:`os.fspath` function; :func:"
"`os.fsdecode` and :func:`os.fsencode` can be used to guarantee a :class:"
"`str` or :class:`bytes` result instead, respectively. Introduced by :pep:"
"`519`."
msgstr ""
"Um objeto que representa um caminho no sistema de ficheiros. Um objeto "
"semelhante a um caminho é ou um objeto :class:`str` ou :class:`bytes` que "
"representa um caminho, ou um objeto que implementa o protocolo :class:`os."
"PathLike`. Um objeto que suporta o protocolo :class:`os.PathLike` pode ser "
"convertido num caminho do sistema de ficheiros :class:`str` ou :class:"
"`bytes` chamando a função :func:`os.fspath`; :func:`os.fsdecode` e :func:`os."
"fsencode` podem ser usados para garantir um resultado :class:`str` ou :class:"
"`bytes`, respetivamente. Introduzido por :pep:`519`."

#: ../../glossary.rst:915
msgid "PEP"
msgstr "PEP"

#: ../../glossary.rst:917
msgid ""
"Python Enhancement Proposal. A PEP is a design document providing "
"information to the Python community, or describing a new feature for Python "
"or its processes or environment. PEPs should provide a concise technical "
"specification and a rationale for proposed features."
msgstr ""
"*Python Enhancement Proposal*. Uma PEP é um documento de desenho que fornece "
"informações à comunidade Python ou descreve uma nova funcionalidade para o "
"Python ou os seus processos ou ambiente. As PEPs devem fornecer uma "
"especificação técnica concisa e uma justificação para as funcionalidades "
"propostas."

#: ../../glossary.rst:923
msgid ""
"PEPs are intended to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting "
"the design decisions that have gone into Python. The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""
"As PEPs destinam-se a ser os mecanismos primários para propor novas "
"funcionalidades importantes, para recolher contribuições da comunidade sobre "
"um problema e para documentar as decisões de desenho que foram incorporadas "
"no Python. O autor da PEP é responsável por construir consenso dentro da "
"comunidade e documentar opiniões discordantes."

#: ../../glossary.rst:929
msgid "See :pep:`1`."
msgstr "Veja :pep:`1`."

#: ../../glossary.rst:930
msgid "portion"
msgstr "porção"

#: ../../glossary.rst:932
msgid ""
"A set of files in a single directory (possibly stored in a zip file) that "
"contribute to a namespace package, as defined in :pep:`420`."
msgstr ""
"Um conjunto de ficheiros num único diretório (possivelmente armazenados num "
"ficheiro zip) que contribuem para um pacote de espaço de nomes, como "
"definido em :pep:`420`."

#: ../../glossary.rst:934
msgid "positional argument"
msgstr "argumento posicional"

#: ../../glossary.rst:937
msgid "provisional API"
msgstr "API provisória"

#: ../../glossary.rst:939
msgid ""
"A provisional API is one which has been deliberately excluded from the "
"standard library's backwards compatibility guarantees.  While major changes "
"to such interfaces are not expected, as long as they are marked provisional, "
"backwards incompatible changes (up to and including removal of the "
"interface) may occur if deemed necessary by core developers.  Such changes "
"will not be made gratuitously -- they will occur only if serious fundamental "
"flaws are uncovered that were missed prior to the inclusion of the API."
msgstr ""
"Uma API provisória é uma que foi deliberadamente excluída das garantias de "
"compatibilidade retroativa da biblioteca padrão. Embora não sejam esperadas "
"grandes alterações a tais interfaces, enquanto estiverem marcadas como "
"provisórias, podem ocorrer alterações incompatíveis com versões anteriores "
"(até e incluindo a remoção da interface) se consideradas necessárias pelos "
"desenvolvedores principais. Tais alterações não serão feitas gratuitamente - "
"só ocorrerão se forem descobertas falhas fundamentais graves que tenham sido "
"ignoradas antes da inclusão da API."

#: ../../glossary.rst:948
msgid ""
"Even for provisional APIs, backwards incompatible changes are seen as a "
"\"solution of last resort\" - every attempt will still be made to find a "
"backwards compatible resolution to any identified problems."
msgstr ""
"Mesmo para APIs provisórias, as alterações incompatíveis com versões "
"anteriores são vistas como uma \"solução de último recurso\" - todas as "
"tentativas serão feitas para encontrar uma resolução compatível com versões "
"anteriores para quaisquer problemas identificados."

#: ../../glossary.rst:952
msgid ""
"This process allows the standard library to continue to evolve over time, "
"without locking in problematic design errors for extended periods of time.  "
"See :pep:`411` for more details."
msgstr ""
"Este processo permite que a biblioteca padrão continue a evoluir ao longo do "
"tempo, sem fixar erros de desenho problemáticos por períodos prolongados. "
"Veja :pep:`411` para mais detalhes."

#: ../../glossary.rst:955
msgid "provisional package"
msgstr "pacote provisório"

#: ../../glossary.rst:957
msgid "See :term:`provisional API`."
msgstr "Veja :term:`API provisória`."

#: ../../glossary.rst:958
msgid "Python 3000"
msgstr "Python 3000"

#: ../../glossary.rst:960
msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated "
"\"Py3k\"."
msgstr ""
"Alcunha para a linha de lançamento do Python 3.x (criada há muito tempo, "
"quando o lançamento da versão 3 era algo no futuro distante). Isto também é "
"abreviado para \"Py3k\"."

#: ../../glossary.rst:963
msgid "Pythonic"
msgstr "pythónico"

#: ../../glossary.rst:965
msgid ""
"An idea or piece of code which closely follows the most common idioms of the "
"Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""
"Uma ideia ou trecho de código que segue de perto os idiomas mais comuns da "
"linguagem Python, em vez de implementar código usando conceitos comuns a "
"outras linguagens. Por exemplo, um idioma comum em Python é percorrer todos "
"os elementos de um iterável usando uma instrução :keyword:`for`. Muitas "
"outras linguagens não têm este tipo de construção, por isso pessoas não "
"familiarizadas com o Python às vezes usam um contador numérico em vez disso::"

#: ../../glossary.rst:975
msgid "As opposed to the cleaner, Pythonic method::"
msgstr "Em oposição ao método mais limpo e pythónico::"

#: ../../glossary.rst:979
msgid "qualified name"
msgstr "nome qualificado"

#: ../../glossary.rst:981
msgid ""
"A dotted name showing the \"path\" from a module's global scope to a class, "
"function or method defined in that module, as defined in :pep:`3155`.  For "
"top-level functions and classes, the qualified name is the same as the "
"object's name::"
msgstr ""
"Um nome com pontos que mostra o \"caminho\" desde o escopo global de um "
"módulo até a uma classe, função ou método definido nesse módulo, como "
"definido em :pep:`3155`. Para funções e classes de nível superior, o nome "
"qualificado é o mesmo que o nome do objeto::"

#: ../../glossary.rst:998
msgid ""
"When used to refer to modules, the *fully qualified name* means the entire "
"dotted path to the module, including any parent packages, e.g. ``email.mime."
"text``::"
msgstr ""
"Quando usado para referir módulos, o *nome totalmente qualificado* significa "
"o caminho completo com pontos até ao módulo, incluindo quaisquer pacotes "
"pai, por exemplo, ``email.mime.text``::"

#: ../../glossary.rst:1005
msgid "reference count"
msgstr "contagem de referências"

#: ../../glossary.rst:1007
msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Reference counting is generally "
"not visible to Python code, but it is a key element of the :term:`CPython` "
"implementation.  The :mod:`sys` module defines a :func:`~sys.getrefcount` "
"function that programmers can call to return the reference count for a "
"particular object."
msgstr ""

#: ../../glossary.rst:1013
msgid "regular package"
msgstr "pacote regular"

#: ../../glossary.rst:1015
msgid ""
"A traditional :term:`package`, such as a directory containing an ``__init__."
"py`` file."
msgstr ""
"Um :term:`pacote` tradicional, como um diretório contendo um ficheiro "
"``__init__.py``."

#: ../../glossary.rst:1018
msgid "See also :term:`namespace package`."
msgstr "Veja também :term:`pacote de espaço de nomes`."

#: ../../glossary.rst:1019
msgid "__slots__"
msgstr "__slots__"

#: ../../glossary.rst:1021
msgid ""
"A declaration inside a class that saves memory by pre-declaring space for "
"instance attributes and eliminating instance dictionaries.  Though popular, "
"the technique is somewhat tricky to get right and is best reserved for rare "
"cases where there are large numbers of instances in a memory-critical "
"application."
msgstr ""
"Uma declaração dentro de uma classe que poupa memória pré-declarando espaço "
"para atributos de instância e eliminando dicionários de instância. Embora "
"popular, a técnica é um pouco complicada de acertar e é melhor reservada "
"para casos raros onde há um grande número de instâncias numa aplicação "
"crítica em termos de memória."

#: ../../glossary.rst:1026
msgid "sequence"
msgstr "sequência"

#: ../../glossary.rst:1028
msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`__getitem__` special method and defines a :meth:"
"`__len__` method that returns the length of the sequence. Some built-in "
"sequence types are :class:`list`, :class:`str`, :class:`tuple`, and :class:"
"`bytes`. Note that :class:`dict` also supports :meth:`__getitem__` and :meth:"
"`__len__`, but is considered a mapping rather than a sequence because the "
"lookups use arbitrary :term:`immutable` keys rather than integers."
msgstr ""

#: ../../glossary.rst:1037
msgid ""
"The :class:`collections.abc.Sequence` abstract base class defines a much "
"richer interface that goes beyond just :meth:`__getitem__` and :meth:"
"`__len__`, adding :meth:`count`, :meth:`index`, :meth:`__contains__`, and :"
"meth:`__reversed__`. Types that implement this expanded interface can be "
"registered explicitly using :func:`~abc.ABCMeta.register`."
msgstr ""

#: ../../glossary.rst:1044
msgid "set comprehension"
msgstr "compreensão de conjunto"

#: ../../glossary.rst:1046
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a set with the results. ``results = {c for c in 'abracadabra' if c "
"not in 'abc'}`` generates the set of strings ``{'r', 'd'}``.  See :ref:"
"`comprehensions`."
msgstr ""
"Uma forma compacta de processar todos ou parte dos elementos num iterável e "
"devolver um conjunto com os resultados. ``results = {c for c in "
"'abracadabra' if c not in 'abc'}`` gera o conjunto de *strings* ``{'r', 'd'}"
"``. Veja :ref:`comprehensions`."

#: ../../glossary.rst:1050
msgid "single dispatch"
msgstr "despacho único"

#: ../../glossary.rst:1052
msgid ""
"A form of :term:`generic function` dispatch where the implementation is "
"chosen based on the type of a single argument."
msgstr ""
"Uma forma de :term:`função genérica` de despacho onde a implementação é "
"escolhida com base no tipo de um único argumento."

#: ../../glossary.rst:1054
msgid "slice"
msgstr "fatia"

#: ../../glossary.rst:1056
msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally."
msgstr ""
"Um objeto que geralmente contém uma porção de uma :term:`sequência`. Uma "
"fatia é criada usando a notação de subíndice, ``[]`` com dois pontos entre "
"números quando vários são dados, como em ``variable_name[1:3:5]``. A notação "
"de parênteses retos (subíndice) usa objetos :class:`slice` internamente."

#: ../../glossary.rst:1060
msgid "special method"
msgstr "método especial"

#: ../../glossary.rst:1064
msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in :ref:"
"`specialnames`."
msgstr ""
"Um método que é chamado implicitamente pelo Python para executar uma certa "
"operação num tipo, como adição. Tais métodos têm nomes que começam e "
"terminam com duplos sublinhados. Os métodos especiais estão documentados em :"
"ref:`specialnames`."

#: ../../glossary.rst:1068
msgid "statement"
msgstr "instrução"

#: ../../glossary.rst:1070
msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either "
"an :term:`expression` or one of several constructs with a keyword, such as :"
"keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""
"Uma instrução é parte de um bloco (um \"bloco\" de código). Uma instrução é "
"ou uma :term:`expressão` ou uma de várias construções com uma palavra "
"reservada, como :keyword:`if`, :keyword:`while` ou :keyword:`for`."

#: ../../glossary.rst:1073
msgid "text encoding"
msgstr "codificação de texto"

#: ../../glossary.rst:1075
msgid ""
"A string in Python is a sequence of Unicode code points (in range "
"``U+0000``--``U+10FFFF``). To store or transfer a string, it needs to be "
"serialized as a sequence of bytes."
msgstr ""
"Uma cadeia de caracteres em Python é uma sequência de pontos de código "
"Unicode (no intervalo ``U+0000``--``U+10FFFF``). Para armazenar ou "
"transferir uma cadeia de caracteres, ela precisa de ser serializada como uma "
"sequência de bytes."

#: ../../glossary.rst:1079
msgid ""
"Serializing a string into a sequence of bytes is known as \"encoding\", and "
"recreating the string from the sequence of bytes is known as \"decoding\"."
msgstr ""
"Serializar uma cadeia de caracteres numa sequência de bytes é conhecido como "
"\"codificação\", e recriar a cadeia de caracteres a partir da sequência de "
"bytes é conhecido como \"descodificação\"."

#: ../../glossary.rst:1082
msgid ""
"There are a variety of different text serialization :ref:`codecs <standard-"
"encodings>`, which are collectively referred to as \"text encodings\"."
msgstr ""
"Existe uma variedade de diferentes :ref:`codecs <standard-encodings>` de "
"serialização de texto, que são coletivamente referidos como \"codificações "
"de texto\"."

#: ../../glossary.rst:1085
msgid "text file"
msgstr "ficheiro de texto"

#: ../../glossary.rst:1087
msgid ""
"A :term:`file object` able to read and write :class:`str` objects. Often, a "
"text file actually accesses a byte-oriented datastream and handles the :term:"
"`text encoding` automatically. Examples of text files are files opened in "
"text mode (``'r'`` or ``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, and "
"instances of :class:`io.StringIO`."
msgstr ""
"Um :term:`objeto de ficheiro` capaz de ler e escrever objetos :class:`str`. "
"Muitas vezes, um ficheiro de texto acede na realidade a um fluxo de dados "
"orientado a bytes e trata automaticamente da :term:`codificação de texto`. "
"Exemplos de ficheiros de texto são ficheiros abertos em modo de texto "
"(``'r'`` ou ``'w'``), :data:`sys.stdin`, :data:`sys.stdout` e instâncias de :"
"class:`io.StringIO`."

#: ../../glossary.rst:1094
msgid ""
"See also :term:`binary file` for a file object able to read and write :term:"
"`bytes-like objects <bytes-like object>`."
msgstr ""
"Veja também :term:`ficheiro binário` para um objeto de ficheiro capaz de ler "
"e escrever :term:`objetos tipo bytes <bytes-like object>`."

#: ../../glossary.rst:1096
msgid "triple-quoted string"
msgstr "string com triplas aspas"

#: ../../glossary.rst:1098
msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""
"Uma cadeia de caracteres que é delimitada por três instâncias de uma aspa "
"(\") ou de um apóstrofo ('). Embora não forneçam qualquer funcionalidade não "
"disponível com cadeias de caracteres com aspas simples, são úteis por várias "
"razões. Permitem incluir aspas simples e duplas não escapadas dentro de uma "
"cadeia de caracteres e podem abrangir várias linhas sem o uso do carácter de "
"continuação, tornando-as especialmente úteis ao escrever *docstrings*."

#: ../../glossary.rst:1105
msgid "type"
msgstr "tipo"

#: ../../glossary.rst:1107
msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its :attr:`~instance."
"__class__` attribute or can be retrieved with ``type(obj)``."
msgstr ""

#: ../../glossary.rst:1111
msgid "type alias"
msgstr "alias de tipo"

#: ../../glossary.rst:1113
msgid "A synonym for a type, created by assigning the type to an identifier."
msgstr "Um sinónimo para um tipo, criado atribuindo o tipo a um identificador."

#: ../../glossary.rst:1115
msgid ""
"Type aliases are useful for simplifying :term:`type hints <type hint>`. For "
"example::"
msgstr ""
"Os aliases de tipo são úteis para simplificar :term:`dicas de tipo <type "
"hint>`. Por exemplo::"

#: ../../glossary.rst:1122
msgid "could be made more readable like this::"
msgstr "poderia ser tornado mais legível assim::"

#: ../../glossary.rst:1129 ../../glossary.rst:1143
msgid "See :mod:`typing` and :pep:`484`, which describe this functionality."
msgstr "Veja :mod:`typing` e :pep:`484`, que descrevem esta funcionalidade."

#: ../../glossary.rst:1130
msgid "type hint"
msgstr "dica de tipo"

#: ../../glossary.rst:1132
msgid ""
"An :term:`annotation` that specifies the expected type for a variable, a "
"class attribute, or a function parameter or return value."
msgstr ""
"Uma :term:`anotação` que especifica o tipo esperado para uma variável, um "
"atributo de classe, ou um parâmetro ou valor de retorno de uma função."

#: ../../glossary.rst:1135
msgid ""
"Type hints are optional and are not enforced by Python but they are useful "
"to static type analysis tools, and aid IDEs with code completion and "
"refactoring."
msgstr ""

#: ../../glossary.rst:1139
msgid ""
"Type hints of global variables, class attributes, and functions, but not "
"local variables, can be accessed using :func:`typing.get_type_hints`."
msgstr ""
"As dicas de tipo de variáveis globais, atributos de classe e funções, mas "
"não de variáveis locais, podem ser acedidas usando :func:`typing."
"get_type_hints`."

#: ../../glossary.rst:1144
msgid "universal newlines"
msgstr "novas linhas universais"

#: ../../glossary.rst:1146
msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention "
"``'\\r'``.  See :pep:`278` and :pep:`3116`, as well as :func:`bytes."
"splitlines` for an additional use."
msgstr ""
"Uma maneira de interpretar fluxos de texto na qual todos os seguintes são "
"reconhecidos como terminadores de linha: a convenção de fim de linha Unix "
"``'\\n'``, a convenção Windows ``'\\r\\n'`` e a antiga convenção Macintosh "
"``'\\r'``. Veja :pep:`278` e :pep:`3116`, bem como :func:`bytes.splitlines` "
"para um uso adicional."

#: ../../glossary.rst:1151
msgid "variable annotation"
msgstr "anotação de variável"

#: ../../glossary.rst:1153
msgid "An :term:`annotation` of a variable or a class attribute."
msgstr "Uma :term:`anotação` de uma variável ou de um atributo de classe."

#: ../../glossary.rst:1155
msgid ""
"When annotating a variable or a class attribute, assignment is optional::"
msgstr ""
"Ao anotar uma variável ou um atributo de classe, a atribuição é opcional::"

#: ../../glossary.rst:1160
msgid ""
"Variable annotations are usually used for :term:`type hints <type hint>`: "
"for example this variable is expected to take :class:`int` values::"
msgstr ""
"As anotações de variáveis são geralmente usadas para :term:`dicas de tipo "
"<type hint>`: por exemplo, esta variável é esperada receber valores :class:"
"`int`::"

#: ../../glossary.rst:1166
msgid "Variable annotation syntax is explained in section :ref:`annassign`."
msgstr ""
"A sintaxe de anotação de variável é explicada na secção :ref:`annassign`."

#: ../../glossary.rst:1168
msgid ""
"See :term:`function annotation`, :pep:`484` and :pep:`526`, which describe "
"this functionality."
msgstr ""

#: ../../glossary.rst:1170
msgid "virtual environment"
msgstr "ambiente virtual"

#: ../../glossary.rst:1172
msgid ""
"A cooperatively isolated runtime environment that allows Python users and "
"applications to install and upgrade Python distribution packages without "
"interfering with the behaviour of other Python applications running on the "
"same system."
msgstr ""
"Um ambiente de execução cooperativamente isolado que permite que "
"utilizadores e aplicações Python instalem e atualizem pacotes de "
"distribuição Python sem interferir com o comportamento de outras aplicações "
"Python em execução no mesmo sistema."

#: ../../glossary.rst:1177
msgid "See also :mod:`venv`."
msgstr "Veja também :mod:`venv`."

#: ../../glossary.rst:1178
msgid "virtual machine"
msgstr "máquina virtual"

#: ../../glossary.rst:1180
msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""
"Um computador definido inteiramente em software. A máquina virtual do Python "
"executa o :term:`bytecode` emitido pelo compilador de *bytecode*."

#: ../../glossary.rst:1182
msgid "Zen of Python"
msgstr "Zen do Python"

#: ../../glossary.rst:1184
msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""
"Lista de princípios de desenho e filosofias do Python que são úteis para "
"compreender e usar a linguagem. A lista pode ser encontrada digitando "
"\"``import this``\" no *prompt* interativo."
