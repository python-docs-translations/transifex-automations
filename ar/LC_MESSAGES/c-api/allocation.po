# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-22 21:56+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Arabic (https://app.transifex.com/python-doc/teams/5390/ar/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ar\n"
"Plural-Forms: nplurals=6; plural=n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 "
"&& n%100<=10 ? 3 : n%100>=11 && n%100<=99 ? 4 : 5;\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "توزيع كائنات على الكومة"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"تهيئة كائن تمت توزيعها-حديثاً *op* بِنوعه ومرجعهُ الأولي. يُرجِعُ الكائن هذا الذي "
"تم تهيئته. إذا كان *type* يُشيرُ إلى أن الكائن يشارك في كاشف القمامة الدوري، "
"فإنه يتم إضافته إلى مجموعة الكائنات التي تمت ملاحظتها. الحقول الأخرى للكائن "
"لا تتأثر."

#: ../../c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"يقوم بكل ما يقوم به :c:func:`PyObject_Init`، و أيضاً يهيئ معلومة الطول لكائن "
"حجمي-متغير."

#: ../../c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized; the object's reference count will be one.  The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""
"توزيع كائن بايثون جديد *TYPE* باستخدام نوع البنية لغةُ C و كائن من نوع بايثون "
"*type*. الحقول الغير المعرّفة من قبل كائن بايثون تكون غير مُهيئةً؛ تعداد مرجع "
"الكائن تكون واحدة. حجم توزيع الذاكرة يحدد من حقل :c:member:`~PyTypeObject."
"tp_basicsize` الخاص بـكائن type"

#: ../../c-api/allocation.rst:41
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *type*.  This is useful for implementing objects like "
"tuples, which are able to determine their size at construction time.  "
"Embedding the array of fields into the same allocation decreases the number "
"of allocations, improving the memory management efficiency."
msgstr ""

#: ../../c-api/allocation.rst:53
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or :c:"
"func:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""

#: ../../c-api/allocation.rst:62
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""

#: ../../c-api/allocation.rst:69
msgid ":c:func:`PyModule_Create`"
msgstr ":c:func:`PyModule_Create`"

#: ../../c-api/allocation.rst:70
msgid "To allocate and create extension modules."
msgstr "لِتوزيع و صنع مُلحقات إضافية."
