# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Kamil Broniowski, 2025
# Maciej Olko <maciej.olko@gmail.com>, 2025
# Stan Ulbrych, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-03 18:16+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Polish (https://app.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

#: ../../library/asyncio.rst:87
msgid "High-level APIs"
msgstr "Wysokopoziomowe interfejsy API"

#: ../../library/asyncio.rst:99
msgid "Low-level APIs"
msgstr "niskopoziomowe interfejsy API"

#: ../../library/asyncio.rst:110
msgid "Guides and Tutorials"
msgstr "Przewodniki i samouczki"

#: ../../library/asyncio.rst:2
msgid ":mod:`!asyncio` --- Asynchronous I/O"
msgstr ":mod:`!asyncio` --- Asynchroniczne I/O"

#: ../../library/asyncio.rst-1
msgid "Hello World!"
msgstr "Hello World!"

#: ../../library/asyncio.rst:13
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    print('Hello ...')\n"
"    await asyncio.sleep(1)\n"
"    print('... World!')\n"
"\n"
"asyncio.run(main())"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    print('Hello ...')\n"
"    await asyncio.sleep(1)\n"
"    print('... World!')\n"
"\n"
"asyncio.run(main())"

#: ../../library/asyncio.rst:22
msgid ""
"asyncio is a library to write **concurrent** code using the **async/await** "
"syntax."
msgstr ""
"asyncio jest biblioteką do pisania **równoległego** kodu przy użyciu składni "
"**async/await**."

#: ../../library/asyncio.rst:25
msgid ""
"asyncio is used as a foundation for multiple Python asynchronous frameworks "
"that provide high-performance network and web-servers, database connection "
"libraries, distributed task queues, etc."
msgstr ""
"asyncio jest używane jako podstawa dla wielu asynchronicznych framework'ów "
"Pythona, które zapewniają wysoką wydajność sieci i serwerów internetowych, "
"bibliotek połączeń z bazami danych, rozproszonych kolejek zadań itp."

#: ../../library/asyncio.rst:29
msgid ""
"asyncio is often a perfect fit for IO-bound and high-level **structured** "
"network code."
msgstr ""
" asyncio często idealnie nadaje się do kodu związanego z operacjami wejścia/"
"wyjścia, inaczej IO-bound. oraz do wysokopoziomowego, **strukturalnego** "
"kodu sieciowego."

#: ../../library/asyncio.rst:32
msgid "asyncio provides a set of **high-level** APIs to:"
msgstr "asyncio zapewnia zestaw **wysopoziomowych** interfejsów API do:"

#: ../../library/asyncio.rst:34
msgid ""
":ref:`run Python coroutines <coroutine>` concurrently and have full control "
"over their execution;"
msgstr ""
":ref:`uruchamiania równoległych korutyn Pythona<coroutine>`   oraz pełnej "
"kontroli nad ich wykonywaniem;"

#: ../../library/asyncio.rst:37
msgid "perform :ref:`network IO and IPC <asyncio-streams>`;"
msgstr ""

#: ../../library/asyncio.rst:39
msgid "control :ref:`subprocesses <asyncio-subprocess>`;"
msgstr ""

#: ../../library/asyncio.rst:41
msgid "distribute tasks via :ref:`queues <asyncio-queues>`;"
msgstr ""

#: ../../library/asyncio.rst:43
msgid ":ref:`synchronize <asyncio-sync>` concurrent code;"
msgstr ""

#: ../../library/asyncio.rst:45
msgid ""
"Additionally, there are **low-level** APIs for *library and framework "
"developers* to:"
msgstr ""

#: ../../library/asyncio.rst:48
msgid ""
"create and manage :ref:`event loops <asyncio-event-loop>`, which provide "
"asynchronous APIs for :ref:`networking <loop_create_server>`, running :ref:"
"`subprocesses <loop_subprocess_exec>`, handling :ref:`OS signals "
"<loop_add_signal_handler>`, etc;"
msgstr ""

#: ../../library/asyncio.rst:53
msgid ""
"implement efficient protocols using :ref:`transports <asyncio-transports-"
"protocols>`;"
msgstr ""

#: ../../library/asyncio.rst:56
msgid ""
":ref:`bridge <asyncio-futures>` callback-based libraries and code with async/"
"await syntax."
msgstr ""

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Dostępność"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""

#: ../../library/asyncio.rst:64
msgid "asyncio REPL"
msgstr ""

#: ../../library/asyncio.rst:65
msgid "You can experiment with an ``asyncio`` concurrent context in the REPL:"
msgstr ""

#: ../../library/asyncio.rst:67
msgid ""
"$ python -m asyncio\n"
"asyncio REPL ...\n"
"Use \"await\" directly instead of \"asyncio.run()\".\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more "
"information.\n"
">>> import asyncio\n"
">>> await asyncio.sleep(10, result='hello')\n"
"'hello'"
msgstr ""

#: ../../library/asyncio.rst:77
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_stdin`` with no "
"arguments."
msgstr ""

#: ../../library/asyncio.rst:79
msgid "(also 3.11.10, 3.10.15, 3.9.20, and 3.8.20) Emits audit events."
msgstr ""

#: ../../library/asyncio.rst:86
msgid "Reference"
msgstr ""

#: ../../library/asyncio.rst:119
msgid "The source code for asyncio can be found in :source:`Lib/asyncio/`."
msgstr ""
