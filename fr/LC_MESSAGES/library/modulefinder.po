# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 14:15+0000\n"
"PO-Revision-Date: 2025-09-16 00:01+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: French (https://app.transifex.com/python-doc/teams/5390/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../library/modulefinder.rst:2
msgid ":mod:`!modulefinder` --- Find modules used by a script"
msgstr ""

#: ../../library/modulefinder.rst:9
msgid "**Source code:** :source:`Lib/modulefinder.py`"
msgstr "**Code source :** :source:`Lib/modulefinder.py`"

#: ../../library/modulefinder.rst:13
msgid ""
"This module provides a :class:`ModuleFinder` class that can be used to "
"determine the set of modules imported by a script. ``modulefinder.py`` can "
"also be run as a script, giving the filename of a Python script as its "
"argument, after which a report of the imported modules will be printed."
msgstr ""
"Ce module fournit une classe :class:`ModuleFinder` qui peut être utilisée "
"pour déterminer la liste des modules importés par un script. ``modulefinder."
"py`` peut aussi être utilisé en tant que script, en passant le nom du "
"fichier Python en argument, ce qui affichera un rapport sur les modules "
"importés."

#: ../../library/modulefinder.rst:21
msgid ""
"Record that the package named *pkg_name* can be found in the specified "
"*path*."
msgstr ""
"Enregistre que le paquet *pkg_name* peut être trouvé au chemin *path* "
"spécifié."

#: ../../library/modulefinder.rst:26
msgid ""
"Allows specifying that the module named *oldname* is in fact the package "
"named *newname*."
msgstr ""
"Permet de spécifier que le module nommé *oldname* est en réalité le paquet "
"nommé *newname*."

#: ../../library/modulefinder.rst:32
msgid ""
"This class provides :meth:`run_script` and :meth:`report` methods to "
"determine the set of modules imported by a script. *path* can be a list of "
"directories to search for modules; if not specified, ``sys.path`` is used.  "
"*debug* sets the debugging level; higher values make the class print "
"debugging messages about what it's doing. *excludes* is a list of module "
"names to exclude from the analysis. *replace_paths* is a list of ``(oldpath, "
"newpath)`` tuples that will be replaced in module paths."
msgstr ""
"Cette classe fournit les méthodes :meth:`run_script` et :meth:`report` pour "
"déterminer l'ensemble des modules importés par un script. *path* peut être "
"une liste de dossiers dans lesquels chercher les modules ; si non spécifié, "
"``sys.path`` est utilisé. *debug* définit le niveau de débogage ; des "
"valeurs plus élevées produisent plus de détails sur ce que fait la classe. "
"*excludes* est une liste de noms de modules à exclure de l'analyse. "
"*replace_paths* est une liste de tuples ``(oldpath, newpath)`` qui seront "
"remplacés dans les chemins des modules."

#: ../../library/modulefinder.rst:43
msgid ""
"Print a report to standard output that lists the modules imported by the "
"script and their paths, as well as modules that are missing or seem to be "
"missing."
msgstr ""
"Affiche un rapport sur la sortie standard qui liste les modules importés par "
"le script et leurs chemins, ainsi que les modules manquants ou qui n'ont pas "
"été trouvés."

#: ../../library/modulefinder.rst:49
msgid ""
"Analyze the contents of the *pathname* file, which must contain Python code."
msgstr ""
"Analyse le contenu du fichier *pathname*, qui doit contenir du code Python."

#: ../../library/modulefinder.rst:54
msgid ""
"A dictionary mapping module names to modules. See :ref:`modulefinder-"
"example`."
msgstr ""
"Un dictionnaire de correspondance entre nom de modules et modules. Voir :ref:"
"`modulefinder-example`."

#: ../../library/modulefinder.rst:61
msgid "Example usage of :class:`ModuleFinder`"
msgstr "Exemples d'utilisation de la classe :class:`ModuleFinder`"

#: ../../library/modulefinder.rst:63
msgid "The script that is going to get analyzed later on (bacon.py)::"
msgstr "Le script qui sera analysé (*bacon.py*) ::"

#: ../../library/modulefinder.rst:65
msgid ""
"import re, itertools\n"
"\n"
"try:\n"
"    import baconhameggs\n"
"except ImportError:\n"
"    pass\n"
"\n"
"try:\n"
"    import guido.python.ham\n"
"except ImportError:\n"
"    pass"
msgstr ""

#: ../../library/modulefinder.rst:78
msgid "The script that will output the report of bacon.py::"
msgstr "Le script qui va afficher le rapport de *bacon.py* ::"

#: ../../library/modulefinder.rst:80
msgid ""
"from modulefinder import ModuleFinder\n"
"\n"
"finder = ModuleFinder()\n"
"finder.run_script('bacon.py')\n"
"\n"
"print('Loaded modules:')\n"
"for name, mod in finder.modules.items():\n"
"    print('%s: ' % name, end='')\n"
"    print(','.join(list(mod.globalnames.keys())[:3]))\n"
"\n"
"print('-'*50)\n"
"print('Modules not imported:')\n"
"print('\\n'.join(finder.badmodules.keys()))"
msgstr ""

#: ../../library/modulefinder.rst:94
msgid "Sample output (may vary depending on the architecture)::"
msgstr "Exemple de sortie (peut varier en fonction de l'architecture) : ::"

#: ../../library/modulefinder.rst:96
msgid ""
"Loaded modules:\n"
"_types:\n"
"copyreg:  _inverted_registry,_slotnames,__all__\n"
"re._compiler:  isstring,_sre,_optimize_unicode\n"
"_sre:\n"
"re._constants:  REPEAT_ONE,makedict,AT_END_LINE\n"
"sys:\n"
"re:  __module__,finditer,_expand\n"
"itertools:\n"
"__main__:  re,itertools,baconhameggs\n"
"re._parser:  _PATTERNENDERS,SRE_FLAG_UNICODE\n"
"array:\n"
"types:  __module__,IntType,TypeType\n"
"---------------------------------------------------\n"
"Modules not imported:\n"
"guido.python.ham\n"
"baconhameggs"
msgstr ""
