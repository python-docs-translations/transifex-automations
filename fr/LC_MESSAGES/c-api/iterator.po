# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-22 21:56+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: French (https://app.transifex.com/python-doc/teams/5390/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/iterator.rst:6
msgid "Iterator Objects"
msgstr "Itérateurs"

#: ../../c-api/iterator.rst:8
msgid ""
"Python provides two general-purpose iterator objects.  The first, a sequence "
"iterator, works with an arbitrary sequence supporting the :meth:"
"`__getitem__` method.  The second works with a callable object and a "
"sentinel value, calling the callable for each item in the sequence, and "
"ending the iteration when the sentinel value is returned."
msgstr ""
"Python fournit deux itérateurs d'usage générique. Le premier est un "
"itérateur de séquence, il fonctionne avec n'importe quelle séquence "
"implémentant la méthode :meth:`__getitem__`. Le second fonctionne avec un "
"objet appelable et une valeur sentinelle, l'appelable permet d'obtenir "
"chaque élément de la séquence, et l'itération se termine lorsque la "
"sentinelle est atteinte."

#: ../../c-api/iterator.rst:17
msgid ""
"Type object for iterator objects returned by :c:func:`PySeqIter_New` and the "
"one-argument form of the :func:`iter` built-in function for built-in "
"sequence types."
msgstr ""
"Type des itérateurs renvoyés par les fonctions :c:func:`PySeqIter_New` et la "
"forme à un argument de la fonction native :func:`iter` pour les séquences "
"natives."

#: ../../c-api/iterator.rst:24
msgid ""
"Return true if the type of *op* is :c:data:`PySeqIter_Type`.  This function "
"always succeeds."
msgstr ""

#: ../../c-api/iterator.rst:30
msgid ""
"Return an iterator that works with a general sequence object, *seq*.  The "
"iteration ends when the sequence raises :exc:`IndexError` for the "
"subscripting operation."
msgstr ""
"Renvoie un itérateur sur la séquence *seq*. L'itération prend fin lorsque la "
"séquence lève :exc:`IndexError` lors d'une tentative d'accès."

#: ../../c-api/iterator.rst:37
msgid ""
"Type object for iterator objects returned by :c:func:`PyCallIter_New` and "
"the two-argument form of the :func:`iter` built-in function."
msgstr ""
"Type de l'itérateur renvoyé par les fonctions :c:func:`PyCallIter_New` et :"
"func:`iter` à deux arguments."

#: ../../c-api/iterator.rst:43
msgid ""
"Return true if the type of *op* is :c:data:`PyCallIter_Type`.  This function "
"always succeeds."
msgstr ""

#: ../../c-api/iterator.rst:49
msgid ""
"Return a new iterator.  The first parameter, *callable*, can be any Python "
"callable object that can be called with no parameters; each call to it "
"should return the next item in the iteration.  When *callable* returns a "
"value equal to *sentinel*, the iteration will be terminated."
msgstr ""
"Renvoie un nouvel itérateur. Le premier paramètre, *callable*, peut être "
"n'importe quel objet Python appelable sans aucun paramètre ; chaque appel "
"doit renvoyer l'élément suivant de l'itération. Lorsque *callable* renvoie "
"une valeur égale à *sentinel*, l'itération prend fin."
