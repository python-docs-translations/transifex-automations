# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 14:15+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: French (https://app.transifex.com/python-doc/teams/5390/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../c-api/reflection.rst:6
msgid "Reflection"
msgstr "Réflexion"

#: ../../c-api/reflection.rst:12
msgid "Use :c:func:`PyEval_GetFrameBuiltins` instead."
msgstr ""

#: ../../c-api/reflection.rst:14 ../../c-api/reflection.rst:66
msgid ""
"Return a dictionary of the builtins in the current execution frame, or the "
"interpreter of the thread state if no frame is currently executing."
msgstr ""
"Renvoie un dictionnaire des fonctions natives de la *frame* en cours "
"d'exécution, ou si aucune *frame* n'est exécutée, les fonctions natives du "
"*thread* indiqué par le *thread state*."

#: ../../c-api/reflection.rst:22
msgid ""
"Use either :c:func:`PyEval_GetFrameLocals` to obtain the same behaviour as "
"calling :func:`locals` in Python code, or else call :c:func:"
"`PyFrame_GetLocals` on the result of :c:func:`PyEval_GetFrame` to access "
"the :attr:`~frame.f_locals` attribute of the currently executing frame."
msgstr ""

#: ../../c-api/reflection.rst:27
msgid ""
"Return a mapping providing access to the local variables in the current "
"execution frame, or ``NULL`` if no frame is currently executing."
msgstr ""

#: ../../c-api/reflection.rst:30
msgid ""
"Refer to :func:`locals` for details of the mapping returned at different "
"scopes."
msgstr ""

#: ../../c-api/reflection.rst:32
msgid ""
"As this function returns a :term:`borrowed reference`, the dictionary "
"returned for :term:`optimized scopes <optimized scope>` is cached on the "
"frame object and will remain alive as long as the frame object does. Unlike :"
"c:func:`PyEval_GetFrameLocals` and :func:`locals`, subsequent calls to this "
"function in the same frame will update the contents of the cached dictionary "
"to reflect changes in the state of the local variables rather than returning "
"a new snapshot."
msgstr ""

#: ../../c-api/reflection.rst:39
msgid ""
"As part of :pep:`667`, :c:func:`PyFrame_GetLocals`, :func:`locals`, and :"
"attr:`FrameType.f_locals <frame.f_locals>` no longer make use of the shared "
"cache dictionary. Refer to the :ref:`What's New entry <whatsnew313-locals-"
"semantics>` for additional details."
msgstr ""

#: ../../c-api/reflection.rst:50
msgid "Use :c:func:`PyEval_GetFrameGlobals` instead."
msgstr ""

#: ../../c-api/reflection.rst:52
msgid ""
"Return a dictionary of the global variables in the current execution frame, "
"or ``NULL`` if no frame is currently executing."
msgstr ""

#: ../../c-api/reflection.rst:58
msgid ""
"Return the :term:`attached thread state`'s frame, which is ``NULL`` if no "
"frame is currently executing."
msgstr ""

#: ../../c-api/reflection.rst:61
msgid "See also :c:func:`PyThreadState_GetFrame`."
msgstr ""

#: ../../c-api/reflection.rst:74
msgid ""
"Return a dictionary of the local variables in the current execution frame, "
"or ``NULL`` if no frame is currently executing. Equivalent to calling :func:"
"`locals` in Python code."
msgstr ""

#: ../../c-api/reflection.rst:78
msgid ""
"To access :attr:`~frame.f_locals` on the current frame without making an "
"independent snapshot in :term:`optimized scopes <optimized scope>`, call :c:"
"func:`PyFrame_GetLocals` on the result of :c:func:`PyEval_GetFrame`."
msgstr ""

#: ../../c-api/reflection.rst:87
msgid ""
"Return a dictionary of the global variables in the current execution frame, "
"or ``NULL`` if no frame is currently executing. Equivalent to calling :func:"
"`globals` in Python code."
msgstr ""

#: ../../c-api/reflection.rst:96
msgid ""
"Return the name of *func* if it is a function, class or instance object, "
"else the name of *func*\\s type."
msgstr ""
"Renvoie le nom de *func* s'il s'agit d'une fonction, d'une classe ou d'un "
"objet d'instance, sinon le nom du type de *func*"

#: ../../c-api/reflection.rst:102
msgid ""
"Return a description string, depending on the type of *func*. Return values "
"include \"()\" for functions and methods, \" constructor\", \" instance\", "
"and \" object\".  Concatenated with the result of :c:func:"
"`PyEval_GetFuncName`, the result will be a description of *func*."
msgstr ""
"Renvoie une description en chaîne de caractères, en fonction du type de "
"*func*. Les valeurs renvoyées peuvent être ``\"()\"`` pour les fonction et "
"les méthodes, ``\\\" constructor\\\"``, ``\\\" instance\\\"``, ``\\\" "
"object\\\"``. Concaténé avec le résultat de :c:func:`PyEval_GetFuncName`, le "
"résultat sera une description de *func*"
