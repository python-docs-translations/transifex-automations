# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-23 14:56+0000\n"
"PO-Revision-Date: 2025-09-15 01:05+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: French (https://app.transifex.com/python-doc/teams/5390/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../reference/compound_stmts.rst:5
msgid "Compound statements"
msgstr "Instructions composées"

#: ../../reference/compound_stmts.rst:9
msgid ""
"Compound statements contain (groups of) other statements; they affect or "
"control the execution of those other statements in some way.  In general, "
"compound statements span multiple lines, although in simple incarnations a "
"whole compound statement may be contained in one line."
msgstr ""
"Les instructions composées contiennent d'autres (groupes d’) instructions ; "
"elles affectent ou contrôlent l'exécution de ces autres instructions d'une "
"manière ou d'une autre. En général, une instruction composée couvre "
"plusieurs lignes bien que, dans sa forme la plus simple, une instruction "
"composée peut tenir sur une seule ligne."

#: ../../reference/compound_stmts.rst:14
msgid ""
"The :keyword:`if`, :keyword:`while` and :keyword:`for` statements implement "
"traditional control flow constructs.  :keyword:`try` specifies exception "
"handlers and/or cleanup code for a group of statements, while "
"the :keyword:`with` statement allows the execution of initialization and "
"finalization code around a block of code.  Function and class definitions "
"are also syntactically compound statements."
msgstr ""
"Les instructions :keyword:`if`, :keyword:`while` et :keyword:`for` "
"implémentent les constructions classiques de contrôle de "
"flux. :keyword:`try` spécifie des gestionnaires d'exception et du code de "
"nettoyage pour un groupe d'instructions, tandis que "
"l'instruction :keyword:`with` permet l'exécution de code d'initialisation et "
"de finalisation autour d'un bloc de code.  Les définitions de fonctions et "
"de classes sont également, au sens  syntaxique, des instructions composées."

#: ../../reference/compound_stmts.rst:26
msgid ""
"A compound statement consists of one or more 'clauses.'  A clause consists "
"of a header and a 'suite.'  The clause headers of a particular compound "
"statement are all at the same indentation level. Each clause header begins "
"with a uniquely identifying keyword and ends with a colon.  A suite is a "
"group of statements controlled by a clause.  A suite can be one or more "
"semicolon-separated simple statements on the same line as the header, "
"following the header's colon, or it can be one or more indented statements "
"on subsequent lines.  Only the latter form of a suite can contain nested "
"compound statements; the following is illegal, mostly because it wouldn't be "
"clear to which :keyword:`if` clause a following :keyword:`else` clause would "
"belong::"
msgstr ""
"Une instruction composée comporte une ou plusieurs \"clauses\". Une clause "
"se compose d'un en-tête et d'une \"suite\". Les en-têtes des clauses d'une "
"instruction composée particulière sont toutes placées au même niveau "
"d'indentation. Chaque en-tête de clause commence par un mot-clé spécifique "
"et se termine par le caractère deux-points (`:`) ; une suite est un groupe "
"d'instructions contrôlées par une clause ; une suite se compose, après les "
"deux points de l'en-tête, soit d'une ou plusieurs instructions simples "
"séparées par des points-virgules si elles sont sur la même ligne que l'en-"
"tête, soit d'une ou plusieurs instructions en retrait sur les lignes "
"suivantes. Seule cette dernière forme d'une suite peut contenir des "
"instructions composées ; ce qui suit n'est pas licite, principalement parce "
"qu'il ne serait pas clair de savoir à quelle clause :keyword:`if` se "
"rapporterait une clause :keyword:`else` placée en fin de ligne :"

#: ../../reference/compound_stmts.rst:37
msgid "if test1: if test2: print(x)"
msgstr ""

#: ../../reference/compound_stmts.rst:39
msgid ""
"Also note that the semicolon binds tighter than the colon in this context, "
"so that in the following example, either all or none of the :func:`print` "
"calls are executed::"
msgstr ""
"Notez également que le point-virgule se lie plus étroitement que le deux-"
"points dans ce contexte, de sorte que dans l'exemple suivant, soit tous les "
"appels :func:`print` sont exécutés, soit aucun ne l'est :"

#: ../../reference/compound_stmts.rst:43
msgid "if x < y < z: print(x); print(y); print(z)"
msgstr ""

#: ../../reference/compound_stmts.rst:45
msgid "Summarizing:"
msgstr "En résumé :"

#: ../../reference/compound_stmts.rst:69
msgid ""
"Note that statements always end in a ``NEWLINE`` possibly followed by a "
"``DEDENT``.  Also note that optional continuation clauses always begin with "
"a keyword that cannot start a statement, thus there are no ambiguities (the "
"'dangling :keyword:`else`' problem is solved in Python by requiring "
"nested :keyword:`if` statements to be indented)."
msgstr ""
"Notez que ces instructions se terminent toujours par un lexème ``NEWLINE`` "
"suivi éventuellement d'un ``DEDENT``. Notez également que les clauses "
"facultatives qui suivent commencent toujours par un mot-clé qui ne peut pas "
"commencer une instruction. Ainsi, il n'y a pas d'ambiguïté (le problème "
"du :keyword:`else` dont on ne sait pas à quel ``if`` il est relié est résolu "
"en Python en exigeant que des instructions :keyword:`if` imbriquées soient "
"indentées les unes par rapport aux autres)."

#: ../../reference/compound_stmts.rst:75
msgid ""
"The formatting of the grammar rules in the following sections places each "
"clause on a separate line for clarity."
msgstr ""
"L'agencement des règles de grammaire dans les sections qui suivent place "
"chaque clause sur une ligne séparée pour plus de clarté."

#: ../../reference/compound_stmts.rst:84
msgid "The :keyword:`!if` statement"
msgstr "L'instruction :keyword:`!if`"

#: ../../reference/compound_stmts.rst:92
msgid "The :keyword:`if` statement is used for conditional execution:"
msgstr ""
"L'instruction :keyword:`if` est utilisée pour exécuter des instructions en "
"fonction d'une condition :"

#: ../../reference/compound_stmts.rst:99
msgid ""
"It selects exactly one of the suites by evaluating the expressions one by "
"one until one is found to be true (see section :ref:`booleans` for the "
"definition of true and false); then that suite is executed (and no other "
"part of the :keyword:`if` statement is executed or evaluated).  If all "
"expressions are false, the suite of the :keyword:`else` clause, if present, "
"is executed."
msgstr ""
"Elle sélectionne exactement une des suites en évaluant les expressions une "
"par une jusqu'à ce qu'une soit vraie (voir la section :ref:`booleans` pour "
"la définition de vrai et faux) ; ensuite cette suite est exécutée (et aucune "
"autre partie de l'instruction :keyword:`if` n'est exécutée ou évaluée). Si "
"toutes les expressions sont fausses, la suite de la clause :keyword:`else`, "
"si elle existe, est exécutée."

#: ../../reference/compound_stmts.rst:109
msgid "The :keyword:`!while` statement"
msgstr "L'instruction :keyword:`!while`"

#: ../../reference/compound_stmts.rst:117
msgid ""
"The :keyword:`while` statement is used for repeated execution as long as an "
"expression is true:"
msgstr ""
"L'instruction :keyword:`while` est utilisée pour exécuter des instructions "
"de manière répétée tant qu'une expression est vraie :"

#: ../../reference/compound_stmts.rst:124
msgid ""
"This repeatedly tests the expression and, if it is true, executes the first "
"suite; if the expression is false (which may be the first time it is tested) "
"the suite of the :keyword:`!else` clause, if present, is executed and the "
"loop terminates."
msgstr ""
"Python évalue l'expression de manière répétée et, tant qu'elle est vraie, "
"exécute la première suite ; si l'expression est fausse (ce qui peut arriver "
"même lors du premier test), la suite de la clause :keyword:`!else`, si elle "
"existe, est exécutée et la boucle se termine."

#: ../../reference/compound_stmts.rst:133
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop "
"without executing the :keyword:`!else` clause's suite.  "
"A :keyword:`continue` statement executed in the first suite skips the rest "
"of the suite and goes back to testing the expression."
msgstr ""
"Une instruction :keyword:`break` exécutée dans la première suite termine la "
"boucle sans exécuter la suite de la clause :keyword:`!else`. Une "
"instruction :keyword:`continue` exécutée dans la première suite saute le "
"reste de la suite et retourne au test de l'expression."

#: ../../reference/compound_stmts.rst:142
msgid "The :keyword:`!for` statement"
msgstr "L'instruction :keyword:`!for`"

#: ../../reference/compound_stmts.rst:153
msgid ""
"The :keyword:`for` statement is used to iterate over the elements of a "
"sequence (such as a string, tuple or list) or other iterable object:"
msgstr ""
"L'instruction :keyword:`for` est utilisée pour itérer sur les éléments d'une "
"séquence (par exemple une chaîne, un tuple ou une liste) ou un autre objet "
"itérable :"

#: ../../reference/compound_stmts.rst:160
msgid ""
"The ``starred_list`` expression is evaluated once; it should yield "
"an :term:`iterable` object.  An :term:`iterator` is created for that "
"iterable. The first item provided by the iterator is then assigned to the "
"target list using the standard rules for assignments "
"(see :ref:`assignment`), and the suite is executed.  This repeats for each "
"item provided by the iterator.  When the iterator is exhausted, the suite in "
"the :keyword:`!else` clause, if present, is executed, and the loop "
"terminates."
msgstr ""

#: ../../reference/compound_stmts.rst:173
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop "
"without executing the :keyword:`!else` clause's suite.  "
"A :keyword:`continue` statement executed in the first suite skips the rest "
"of the suite and continues with the next item, or with the :keyword:`!else` "
"clause if there is no next item."
msgstr ""
"Une instruction :keyword:`break` exécutée dans la première suite termine la "
"boucle sans exécuter la suite de la clause :keyword:`!else`. Une "
"instruction :keyword:`continue` exécutée dans la première suite saute le "
"reste de la suite et continue avec l'élément suivant, ou avec la "
"clause :keyword:`!else` s'il n'y a pas d'élément suivant."

#: ../../reference/compound_stmts.rst:179
msgid ""
"The for-loop makes assignments to the variables in the target list. This "
"overwrites all previous assignments to those variables including those made "
"in the suite of the for-loop::"
msgstr ""

#: ../../reference/compound_stmts.rst:183
msgid ""
"for i in range(10):\n"
"    print(i)\n"
"    i = 5             # this will not affect the for-loop\n"
"                      # because i will be overwritten with the next\n"
"                      # index in the range"
msgstr ""

#: ../../reference/compound_stmts.rst:193
msgid ""
"Names in the target list are not deleted when the loop is finished, but if "
"the sequence is empty, they will not have been assigned to at all by the "
"loop.  Hint: the built-in type :func:`range` represents immutable arithmetic "
"sequences of integers. For instance, iterating ``range(3)`` successively "
"yields 0, 1, and then 2."
msgstr ""

#: ../../reference/compound_stmts.rst:198
msgid "Starred elements are now allowed in the expression list."
msgstr ""

#: ../../reference/compound_stmts.rst:205
msgid "The :keyword:`!try` statement"
msgstr "L'instruction :keyword:`!try`"

#: ../../reference/compound_stmts.rst:215
msgid ""
"The :keyword:`!try` statement specifies exception handlers and/or cleanup "
"code for a group of statements:"
msgstr ""

#: ../../reference/compound_stmts.rst:231
msgid ""
"Additional information on exceptions can be found in "
"section :ref:`exceptions`, and information on using the :keyword:`raise` "
"statement to generate exceptions may be found in section :ref:`raise`."
msgstr ""
"Vous trouvez des informations supplémentaires relatives aux exceptions dans "
"la section :ref:`exceptions` et, dans la section :ref:`raise`, des "
"informations relatives à l'utilisation de l'instruction :keyword:`raise` "
"pour produire des exceptions."

#: ../../reference/compound_stmts.rst:239
msgid ":keyword:`!except` clause"
msgstr ""

#: ../../reference/compound_stmts.rst:241
msgid ""
"The :keyword:`!except` clause(s) specify one or more exception handlers. "
"When no exception occurs in the :keyword:`try` clause, no exception handler "
"is executed. When an exception occurs in the :keyword:`!try` suite, a search "
"for an exception handler is started. This search inspects the :keyword:`!"
"except` clauses in turn until one is found that matches the exception. An "
"expression-less :keyword:`!except` clause, if present, must be last; it "
"matches any exception."
msgstr ""

#: ../../reference/compound_stmts.rst:249
msgid ""
"For an :keyword:`!except` clause with an expression, the expression must "
"evaluate to an exception type or a tuple of exception types. The raised "
"exception matches an :keyword:`!except` clause whose expression evaluates to "
"the class or a :term:`non-virtual base class <abstract base class>` of the "
"exception object, or to a tuple that contains such a class."
msgstr ""

#: ../../reference/compound_stmts.rst:255
msgid ""
"If no :keyword:`!except` clause matches the exception, the search for an "
"exception handler continues in the surrounding code and on the invocation "
"stack.  [#]_"
msgstr ""

#: ../../reference/compound_stmts.rst:259
msgid ""
"If the evaluation of an expression in the header of an :keyword:`!except` "
"clause raises an exception, the original search for a handler is canceled "
"and a search starts for the new exception in the surrounding code and on the "
"call stack (it is treated as if the entire :keyword:`try` statement raised "
"the exception)."
msgstr ""

#: ../../reference/compound_stmts.rst:267
msgid ""
"When a matching :keyword:`!except` clause is found, the exception is "
"assigned to the target specified after the :keyword:`!as` keyword in "
"that :keyword:`!except` clause, if present, and the :keyword:`!except` "
"clause's suite is executed. All :keyword:`!except` clauses must have an "
"executable block. When the end of this block is reached, execution continues "
"normally after the entire :keyword:`try` statement. (This means that if two "
"nested handlers exist for the same exception, and the exception occurs in "
"the :keyword:`!try` clause of the inner handler, the outer handler will not "
"handle the exception.)"
msgstr ""

#: ../../reference/compound_stmts.rst:278
msgid ""
"When an exception has been assigned using ``as target``, it is cleared at "
"the end of the :keyword:`!except` clause.  This is as if ::"
msgstr ""

#: ../../reference/compound_stmts.rst:281
msgid ""
"except E as N:\n"
"    foo"
msgstr ""

#: ../../reference/compound_stmts.rst:284
msgid "was translated to ::"
msgstr "avait été traduit en ::"

#: ../../reference/compound_stmts.rst:286
msgid ""
"except E as N:\n"
"    try:\n"
"        foo\n"
"    finally:\n"
"        del N"
msgstr ""

#: ../../reference/compound_stmts.rst:292
msgid ""
"This means the exception must be assigned to a different name to be able to "
"refer to it after the :keyword:`!except` clause. Exceptions are cleared "
"because with the traceback attached to them, they form a reference cycle "
"with the stack frame, keeping all locals in that frame alive until the next "
"garbage collection occurs."
msgstr ""

#: ../../reference/compound_stmts.rst:302
msgid ""
"Before an :keyword:`!except` clause's suite is executed, the exception is "
"stored in the :mod:`sys` module, where it can be accessed from within the "
"body of the :keyword:`!except` clause by calling :func:`sys.exception`. When "
"leaving an exception handler, the exception stored in the :mod:`sys` module "
"is reset to its previous value::"
msgstr ""

#: ../../reference/compound_stmts.rst:308
msgid ""
">>> print(sys.exception())\n"
"None\n"
">>> try:\n"
"...     raise TypeError\n"
"... except:\n"
"...     print(repr(sys.exception()))\n"
"...     try:\n"
"...          raise ValueError\n"
"...     except:\n"
"...         print(repr(sys.exception()))\n"
"...     print(repr(sys.exception()))\n"
"...\n"
"TypeError()\n"
"ValueError()\n"
"TypeError()\n"
">>> print(sys.exception())\n"
"None"
msgstr ""

#: ../../reference/compound_stmts.rst:333
msgid ":keyword:`!except*` clause"
msgstr ""

#: ../../reference/compound_stmts.rst:335
msgid ""
"The :keyword:`!except*` clause(s) specify one or more handlers for groups of "
"exceptions (:exc:`BaseExceptionGroup` instances). A :keyword:`try` statement "
"can have either :keyword:`except` or :keyword:`!except*` clauses, but not "
"both. The exception type for matching is mandatory in the case of :keyword:`!"
"except*`, so ``except*:`` is a syntax error. The type is interpreted as in "
"the case of :keyword:`!except`, but matching is performed on the exceptions "
"contained in the group that is being handled. An :exc:`TypeError` is raised "
"if a matching type is a subclass of :exc:`!BaseExceptionGroup`, because that "
"would have ambiguous semantics."
msgstr ""

#: ../../reference/compound_stmts.rst:345
msgid ""
"When an exception group is raised in the try block, each :keyword:`!except*` "
"clause splits (see :meth:`~BaseExceptionGroup.split`) it into the subgroups "
"of matching and non-matching exceptions. If the matching subgroup is not "
"empty, it becomes the handled exception (the value returned "
"from :func:`sys.exception`) and assigned to the target of the :keyword:`!"
"except*` clause (if there is one). Then, the body of the :keyword:`!except*` "
"clause executes. If the non-matching subgroup is not empty, it is processed "
"by the next :keyword:`!except*` in the same manner. This continues until all "
"exceptions in the group have been matched, or the last :keyword:`!except*` "
"clause has run."
msgstr ""

#: ../../reference/compound_stmts.rst:355
msgid ""
"After all :keyword:`!except*` clauses execute, the group of unhandled "
"exceptions is merged with any exceptions that were raised or re-raised from "
"within :keyword:`!except*` clauses. This merged exception group propagates "
"on.::"
msgstr ""

#: ../../reference/compound_stmts.rst:359
msgid ""
">>> try:\n"
"...     raise ExceptionGroup(\"eg\",\n"
"...         [ValueError(1), TypeError(2), OSError(3), OSError(4)])\n"
"... except* TypeError as e:\n"
"...     print(f'caught {type(e)} with nested {e.exceptions}')\n"
"... except* OSError as e:\n"
"...     print(f'caught {type(e)} with nested {e.exceptions}')\n"
"...\n"
"caught <class 'ExceptionGroup'> with nested (TypeError(2),)\n"
"caught <class 'ExceptionGroup'> with nested (OSError(3), OSError(4))\n"
"  + Exception Group Traceback (most recent call last):\n"
"  |   File \"<doctest default[0]>\", line 2, in <module>\n"
"  |     raise ExceptionGroup(\"eg\",\n"
"  |         [ValueError(1), TypeError(2), OSError(3), OSError(4)])\n"
"  | ExceptionGroup: eg (1 sub-exception)\n"
"  +-+---------------- 1 ----------------\n"
"    | ValueError: 1\n"
"    +------------------------------------"
msgstr ""

#: ../../reference/compound_stmts.rst:378
msgid ""
"If the exception raised from the :keyword:`try` block is not an exception "
"group and its type matches one of the :keyword:`!except*` clauses, it is "
"caught and wrapped by an exception group with an empty message string. This "
"ensures that the type of the target ``e`` is "
"consistently :exc:`BaseExceptionGroup`::"
msgstr ""

#: ../../reference/compound_stmts.rst:383
msgid ""
">>> try:\n"
"...     raise BlockingIOError\n"
"... except* BlockingIOError as e:\n"
"...     print(repr(e))\n"
"...\n"
"ExceptionGroup('', (BlockingIOError()))"
msgstr ""

#: ../../reference/compound_stmts.rst:390
msgid ""
":keyword:`break`, :keyword:`continue` and :keyword:`return` cannot appear in "
"an :keyword:`!except*` clause."
msgstr ""

#: ../../reference/compound_stmts.rst:403
msgid ":keyword:`!else` clause"
msgstr ""

#: ../../reference/compound_stmts.rst:405
msgid ""
"The optional :keyword:`!else` clause is executed if the control flow leaves "
"the :keyword:`try` suite, no exception was raised, and "
"no :keyword:`return`, :keyword:`continue`, or :keyword:`break` statement was "
"executed.  Exceptions in the :keyword:`!else` clause are not handled by the "
"preceding :keyword:`except` clauses."
msgstr ""
"La clause optionnelle :keyword:`!else` n'est exécutée que si l'exécution "
"atteint la fin de la clause :keyword:`try`, aucune exception n'a été levée, "
"et aucun :keyword:`return`, :keyword:`continue`, ou :keyword:`break` ont "
"étés exécutés. Les exceptions dans la clause :keyword:`!else` ne sont pas "
"gérées par les clauses :keyword:`except` précédentes."

#: ../../reference/compound_stmts.rst:417
msgid ":keyword:`!finally` clause"
msgstr ""

#: ../../reference/compound_stmts.rst:419
msgid ""
"If :keyword:`!finally` is present, it specifies a 'cleanup' handler.  "
"The :keyword:`try` clause is executed, including any :keyword:`except` "
"and :keyword:`else <except_else>` clauses. If an exception occurs in any of "
"the clauses and is not handled, the exception is temporarily saved. "
"The :keyword:`!finally` clause is executed.  If there is a saved exception "
"it is re-raised at the end of the :keyword:`!finally` clause. If "
"the :keyword:`!finally` clause raises another exception, the saved exception "
"is set as the context of the new exception. If the :keyword:`!finally` "
"clause executes a :keyword:`return`, :keyword:`break` or :keyword:`continue` "
"statement, the saved exception is discarded::"
msgstr ""

#: ../../reference/compound_stmts.rst:431
msgid ""
">>> def f():\n"
"...     try:\n"
"...         1/0\n"
"...     finally:\n"
"...         return 42\n"
"...\n"
">>> f()\n"
"42"
msgstr ""

#: ../../reference/compound_stmts.rst:440
msgid ""
"The exception information is not available to the program during execution "
"of the :keyword:`!finally` clause."
msgstr ""

#: ../../reference/compound_stmts.rst:448
msgid ""
"When a :keyword:`return`, :keyword:`break` or :keyword:`continue` statement "
"is executed in the :keyword:`try` suite of a :keyword:`!try`...\\ :keyword:`!"
"finally` statement, the :keyword:`!finally` clause is also executed 'on the "
"way out.'"
msgstr ""

#: ../../reference/compound_stmts.rst:452
msgid ""
"The return value of a function is determined by the last :keyword:`return` "
"statement executed.  Since the :keyword:`!finally` clause always executes, "
"a :keyword:`!return` statement executed in the :keyword:`!finally` clause "
"will always be the last one executed::"
msgstr ""

#: ../../reference/compound_stmts.rst:457
msgid ""
">>> def foo():\n"
"...     try:\n"
"...         return 'try'\n"
"...     finally:\n"
"...         return 'finally'\n"
"...\n"
">>> foo()\n"
"'finally'"
msgstr ""

#: ../../reference/compound_stmts.rst:466
msgid ""
"Prior to Python 3.8, a :keyword:`continue` statement was illegal in "
"the :keyword:`!finally` clause due to a problem with the implementation."
msgstr ""

#: ../../reference/compound_stmts.rst:475
msgid "The :keyword:`!with` statement"
msgstr "L'instruction :keyword:`!with`"

#: ../../reference/compound_stmts.rst:484
msgid ""
"The :keyword:`with` statement is used to wrap the execution of a block with "
"methods defined by a context manager (see section :ref:`context-managers`). "
"This allows common :keyword:`try`...\\ :keyword:`except`..."
"\\ :keyword:`finally` usage patterns to be encapsulated for convenient reuse."
msgstr ""
"L'instruction :keyword:`with` est utilisée pour encapsuler l'exécution d'un "
"bloc avec des méthodes définies par un gestionnaire de contexte (voir la "
"section :ref:`context-managers`). Cela permet d'utiliser de manière simple "
"le patron de conception classique :keyword:`try`....\\ :keyword:`except`..."
"\\ \\ :keyword:`finally`."

#: ../../reference/compound_stmts.rst:494
msgid ""
"The execution of the :keyword:`with` statement with one \"item\" proceeds as "
"follows:"
msgstr ""
"L'exécution de l'instruction :keyword:`with` avec un seul \"élément\" "
"(*item* dans la grammaire) se déroule comme suit :"

#: ../../reference/compound_stmts.rst:496
msgid ""
"The context expression (the expression given in the :token:`~python-"
"grammar:with_item`) is evaluated to obtain a context manager."
msgstr ""

#: ../../reference/compound_stmts.rst:499
msgid ""
"The context manager's :meth:`~object.__enter__` is loaded for later use."
msgstr ""

#: ../../reference/compound_stmts.rst:501
msgid "The context manager's :meth:`~object.__exit__` is loaded for later use."
msgstr ""

#: ../../reference/compound_stmts.rst:503
msgid "The context manager's :meth:`~object.__enter__` method is invoked."
msgstr ""

#: ../../reference/compound_stmts.rst:505
msgid ""
"If a target was included in the :keyword:`with` statement, the return value "
"from :meth:`~object.__enter__` is assigned to it."
msgstr ""

#: ../../reference/compound_stmts.rst:510
msgid ""
"The :keyword:`with` statement guarantees that if "
"the :meth:`~object.__enter__` method returns without an error, "
"then :meth:`~object.__exit__` will always be called. Thus, if an error "
"occurs during the assignment to the target list, it will be treated the same "
"as an error occurring within the suite would be. See step 7 below."
msgstr ""

#: ../../reference/compound_stmts.rst:516
msgid "The suite is executed."
msgstr "La suite est exécutée."

#: ../../reference/compound_stmts.rst:518
msgid ""
"The context manager's :meth:`~object.__exit__` method is invoked.  If an "
"exception caused the suite to be exited, its type, value, and traceback are "
"passed as arguments to :meth:`~object.__exit__`. Otherwise, "
"three :const:`None` arguments are supplied."
msgstr ""

#: ../../reference/compound_stmts.rst:523
msgid ""
"If the suite was exited due to an exception, and the return value from "
"the :meth:`~object.__exit__` method was false, the exception is reraised.  "
"If the return value was true, the exception is suppressed, and execution "
"continues with the statement following the :keyword:`with` statement."
msgstr ""

#: ../../reference/compound_stmts.rst:528
msgid ""
"If the suite was exited for any reason other than an exception, the return "
"value from :meth:`~object.__exit__` is ignored, and execution proceeds at "
"the normal location for the kind of exit that was taken."
msgstr ""

#: ../../reference/compound_stmts.rst:532
#: ../../reference/compound_stmts.rst:1556
#: ../../reference/compound_stmts.rst:1597
msgid "The following code::"
msgstr "Le code suivant ::"

#: ../../reference/compound_stmts.rst:534
msgid ""
"with EXPRESSION as TARGET:\n"
"    SUITE"
msgstr ""

#: ../../reference/compound_stmts.rst:537
#: ../../reference/compound_stmts.rst:562
#: ../../reference/compound_stmts.rst:1602
msgid "is semantically equivalent to::"
msgstr ""

#: ../../reference/compound_stmts.rst:539
msgid ""
"manager = (EXPRESSION)\n"
"enter = type(manager).__enter__\n"
"exit = type(manager).__exit__\n"
"value = enter(manager)\n"
"hit_except = False\n"
"\n"
"try:\n"
"    TARGET = value\n"
"    SUITE\n"
"except:\n"
"    hit_except = True\n"
"    if not exit(manager, *sys.exc_info()):\n"
"        raise\n"
"finally:\n"
"    if not hit_except:\n"
"        exit(manager, None, None, None)"
msgstr ""

#: ../../reference/compound_stmts.rst:556
msgid ""
"With more than one item, the context managers are processed as if "
"multiple :keyword:`with` statements were nested::"
msgstr ""
"Avec plus d'un élément, les gestionnaires de contexte sont traités comme si "
"plusieurs instructions :keyword:`with` étaient imbriquées ::"

#: ../../reference/compound_stmts.rst:559
msgid ""
"with A() as a, B() as b:\n"
"    SUITE"
msgstr ""

#: ../../reference/compound_stmts.rst:564
msgid ""
"with A() as a:\n"
"    with B() as b:\n"
"        SUITE"
msgstr ""

#: ../../reference/compound_stmts.rst:568
msgid ""
"You can also write multi-item context managers in multiple lines if the "
"items are surrounded by parentheses. For example::"
msgstr ""

#: ../../reference/compound_stmts.rst:571
msgid ""
"with (\n"
"    A() as a,\n"
"    B() as b,\n"
"):\n"
"    SUITE"
msgstr ""

#: ../../reference/compound_stmts.rst:577
msgid "Support for multiple context expressions."
msgstr "Prise en charge de multiples expressions de contexte."

#: ../../reference/compound_stmts.rst:580
msgid ""
"Support for using grouping parentheses to break the statement in multiple "
"lines."
msgstr ""

#: ../../reference/compound_stmts.rst:585
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - The \"with\" statement"

#: ../../reference/compound_stmts.rst:586
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr ""
"La spécification, les motivations et des exemples de "
"l'instruction :keyword:`with` en Python."

#: ../../reference/compound_stmts.rst:593
msgid "The :keyword:`!match` statement"
msgstr ""

#: ../../reference/compound_stmts.rst:607
msgid "The match statement is used for pattern matching.  Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:616
msgid ""
"This section uses single quotes to denote :ref:`soft keywords <soft-"
"keywords>`."
msgstr ""

#: ../../reference/compound_stmts.rst:619
msgid ""
"Pattern matching takes a pattern as input (following ``case``) and a subject "
"value (following ``match``).  The pattern (which may contain subpatterns) is "
"matched against the subject value.  The outcomes are:"
msgstr ""

#: ../../reference/compound_stmts.rst:623
msgid "A match success or failure (also termed a pattern success or failure)."
msgstr ""

#: ../../reference/compound_stmts.rst:625
msgid ""
"Possible binding of matched values to a name.  The prerequisites for this "
"are further discussed below."
msgstr ""

#: ../../reference/compound_stmts.rst:628
msgid ""
"The ``match`` and ``case`` keywords are :ref:`soft keywords <soft-keywords>`."
msgstr ""

#: ../../reference/compound_stmts.rst:632
#: ../../reference/compound_stmts.rst:1189
msgid ":pep:`634` -- Structural Pattern Matching: Specification"
msgstr ""

#: ../../reference/compound_stmts.rst:633
#: ../../reference/compound_stmts.rst:1190
msgid ":pep:`636` -- Structural Pattern Matching: Tutorial"
msgstr ""

#: ../../reference/compound_stmts.rst:637
msgid "Overview"
msgstr "Aperçu"

#: ../../reference/compound_stmts.rst:639
msgid "Here's an overview of the logical flow of a match statement:"
msgstr ""

#: ../../reference/compound_stmts.rst:642
msgid ""
"The subject expression ``subject_expr`` is evaluated and a resulting subject "
"value obtained. If the subject expression contains a comma, a tuple is "
"constructed using :ref:`the standard rules <typesseq-tuple>`."
msgstr ""

#: ../../reference/compound_stmts.rst:646
msgid ""
"Each pattern in a ``case_block`` is attempted to match with the subject "
"value. The specific rules for success or failure are described below. The "
"match attempt can also bind some or all of the standalone names within the "
"pattern. The precise pattern binding rules vary per pattern type and are "
"specified below.  **Name bindings made during a successful pattern match "
"outlive the executed block and can be used after the match statement**."
msgstr ""

#: ../../reference/compound_stmts.rst:655
msgid ""
"During failed pattern matches, some subpatterns may succeed.  Do not rely on "
"bindings being made for a failed match.  Conversely, do not rely on "
"variables remaining unchanged after a failed match.  The exact behavior is "
"dependent on implementation and may vary.  This is an intentional decision "
"made to allow different implementations to add optimizations."
msgstr ""

#: ../../reference/compound_stmts.rst:662
msgid ""
"If the pattern succeeds, the corresponding guard (if present) is evaluated. "
"In this case all name bindings are guaranteed to have happened."
msgstr ""

#: ../../reference/compound_stmts.rst:665
msgid ""
"If the guard evaluates as true or is missing, the ``block`` inside "
"``case_block`` is executed."
msgstr ""

#: ../../reference/compound_stmts.rst:668
msgid "Otherwise, the next ``case_block`` is attempted as described above."
msgstr ""

#: ../../reference/compound_stmts.rst:670
msgid "If there are no further case blocks, the match statement is completed."
msgstr ""

#: ../../reference/compound_stmts.rst:674
msgid ""
"Users should generally never rely on a pattern being evaluated.  Depending "
"on implementation, the interpreter may cache values or use other "
"optimizations which skip repeated evaluations."
msgstr ""

#: ../../reference/compound_stmts.rst:678
msgid "A sample match statement::"
msgstr ""

#: ../../reference/compound_stmts.rst:680
msgid ""
">>> flag = False\n"
">>> match (100, 200):\n"
"...    case (100, 300):  # Mismatch: 200 != 300\n"
"...        print('Case 1')\n"
"...    case (100, 200) if flag:  # Successful match, but guard fails\n"
"...        print('Case 2')\n"
"...    case (100, y):  # Matches and binds y to 200\n"
"...        print(f'Case 3, y: {y}')\n"
"...    case _:  # Pattern not attempted\n"
"...        print('Case 4, I match anything!')\n"
"...\n"
"Case 3, y: 200"
msgstr ""

#: ../../reference/compound_stmts.rst:694
msgid ""
"In this case, ``if flag`` is a guard.  Read more about that in the next "
"section."
msgstr ""

#: ../../reference/compound_stmts.rst:697
msgid "Guards"
msgstr ""

#: ../../reference/compound_stmts.rst:704
msgid ""
"A ``guard`` (which is part of the ``case``) must succeed for code inside the "
"``case`` block to execute.  It takes the form: :keyword:`if` followed by an "
"expression."
msgstr ""

#: ../../reference/compound_stmts.rst:709
msgid "The logical flow of a ``case`` block with a ``guard`` follows:"
msgstr ""

#: ../../reference/compound_stmts.rst:711
msgid ""
"Check that the pattern in the ``case`` block succeeded.  If the pattern "
"failed, the ``guard`` is not evaluated and the next ``case`` block is "
"checked."
msgstr ""

#: ../../reference/compound_stmts.rst:715
msgid "If the pattern succeeded, evaluate the ``guard``."
msgstr ""

#: ../../reference/compound_stmts.rst:717
msgid ""
"If the ``guard`` condition evaluates as true, the case block is selected."
msgstr ""

#: ../../reference/compound_stmts.rst:720
msgid ""
"If the ``guard`` condition evaluates as false, the case block is not "
"selected."
msgstr ""

#: ../../reference/compound_stmts.rst:723
msgid ""
"If the ``guard`` raises an exception during evaluation, the exception "
"bubbles up."
msgstr ""

#: ../../reference/compound_stmts.rst:726
msgid ""
"Guards are allowed to have side effects as they are expressions.  Guard "
"evaluation must proceed from the first to the last case block, one at a "
"time, skipping case blocks whose pattern(s) don't all succeed. (I.e., guard "
"evaluation must happen in order.) Guard evaluation must stop once a case "
"block is selected."
msgstr ""

#: ../../reference/compound_stmts.rst:736
msgid "Irrefutable Case Blocks"
msgstr ""

#: ../../reference/compound_stmts.rst:740
msgid ""
"An irrefutable case block is a match-all case block.  A match statement may "
"have at most one irrefutable case block, and it must be last."
msgstr ""

#: ../../reference/compound_stmts.rst:743
msgid ""
"A case block is considered irrefutable if it has no guard and its pattern is "
"irrefutable.  A pattern is considered irrefutable if we can prove from its "
"syntax alone that it will always succeed.  Only the following patterns are "
"irrefutable:"
msgstr ""

#: ../../reference/compound_stmts.rst:748
msgid ":ref:`as-patterns` whose left-hand side is irrefutable"
msgstr ""

#: ../../reference/compound_stmts.rst:750
msgid ":ref:`or-patterns` containing at least one irrefutable pattern"
msgstr ""

#: ../../reference/compound_stmts.rst:752
msgid ":ref:`capture-patterns`"
msgstr ""

#: ../../reference/compound_stmts.rst:754
msgid ":ref:`wildcard-patterns`"
msgstr ""

#: ../../reference/compound_stmts.rst:756
msgid "parenthesized irrefutable patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:760
msgid "Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:767
msgid "This section uses grammar notations beyond standard EBNF:"
msgstr ""

#: ../../reference/compound_stmts.rst:769
msgid "the notation ``SEP.RULE+`` is shorthand for ``RULE (SEP RULE)*``"
msgstr ""

#: ../../reference/compound_stmts.rst:771
msgid "the notation ``!RULE`` is shorthand for a negative lookahead assertion"
msgstr ""

#: ../../reference/compound_stmts.rst:774
msgid "The top-level syntax for ``patterns`` is:"
msgstr ""

#: ../../reference/compound_stmts.rst:788
msgid ""
"The descriptions below will include a description \"in simple terms\" of "
"what a pattern does for illustration purposes (credits to Raymond Hettinger "
"for a document that inspired most of the descriptions). Note that these "
"descriptions are purely for illustration purposes and **may not** reflect "
"the underlying implementation.  Furthermore, they do not cover all valid "
"forms."
msgstr ""

#: ../../reference/compound_stmts.rst:798
msgid "OR Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:800
msgid ""
"An OR pattern is two or more patterns separated by vertical bars ``|``.  "
"Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:806
msgid ""
"Only the final subpattern may be :ref:`irrefutable <irrefutable_case>`, and "
"each subpattern must bind the same set of names to avoid ambiguity."
msgstr ""

#: ../../reference/compound_stmts.rst:809
msgid ""
"An OR pattern matches each of its subpatterns in turn to the subject value, "
"until one succeeds.  The OR pattern is then considered successful.  "
"Otherwise, if none of the subpatterns succeed, the OR pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:813
msgid ""
"In simple terms, ``P1 | P2 | ...`` will try to match ``P1``, if it fails it "
"will try to match ``P2``, succeeding immediately if any succeeds, failing "
"otherwise."
msgstr ""

#: ../../reference/compound_stmts.rst:819
msgid "AS Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:821
msgid ""
"An AS pattern matches an OR pattern on the left of the :keyword:`as` keyword "
"against a subject.  Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:827
msgid ""
"If the OR pattern fails, the AS pattern fails.  Otherwise, the AS pattern "
"binds the subject to the name on the right of the as keyword and succeeds. "
"``capture_pattern`` cannot be a ``_``."
msgstr ""

#: ../../reference/compound_stmts.rst:831
msgid ""
"In simple terms ``P as NAME`` will match with ``P``, and on success it will "
"set ``NAME = <subject>``."
msgstr ""

#: ../../reference/compound_stmts.rst:838
msgid "Literal Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:840
msgid ""
"A literal pattern corresponds to most :ref:`literals <literals>` in Python.  "
"Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:853
msgid ""
"The rule ``strings`` and the token ``NUMBER`` are defined in "
"the :doc:`standard Python grammar <./grammar>`.  Triple-quoted strings are "
"supported.  Raw strings and byte strings are supported.  :ref:`f-strings` "
"are not supported."
msgstr ""

#: ../../reference/compound_stmts.rst:858
msgid ""
"The forms ``signed_number '+' NUMBER`` and ``signed_number '-' NUMBER`` are "
"for expressing :ref:`complex numbers <imaginary>`; they require a real "
"number on the left and an imaginary number on the right. E.g. ``3 + 4j``."
msgstr ""

#: ../../reference/compound_stmts.rst:862
msgid ""
"In simple terms, ``LITERAL`` will succeed only if ``<subject> == LITERAL``. "
"For the singletons ``None``, ``True`` and ``False``, the :keyword:`is` "
"operator is used."
msgstr ""

#: ../../reference/compound_stmts.rst:868
msgid "Capture Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:870
msgid "A capture pattern binds the subject value to a name. Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:876
msgid ""
"A single underscore ``_`` is not a capture pattern (this is what ``!'_'`` "
"expresses). It is instead treated as a :token:`~python-"
"grammar:wildcard_pattern`."
msgstr ""

#: ../../reference/compound_stmts.rst:880
msgid ""
"In a given pattern, a given name can only be bound once.  E.g. ``case x, "
"x: ...`` is invalid while ``case [x] | x: ...`` is allowed."
msgstr ""

#: ../../reference/compound_stmts.rst:883
msgid ""
"Capture patterns always succeed.  The binding follows scoping rules "
"established by the assignment expression operator in :pep:`572`; the name "
"becomes a local variable in the closest containing function scope unless "
"there's an applicable :keyword:`global` or :keyword:`nonlocal` statement."
msgstr ""

#: ../../reference/compound_stmts.rst:888
msgid ""
"In simple terms ``NAME`` will always succeed and it will set ``NAME = "
"<subject>``."
msgstr ""

#: ../../reference/compound_stmts.rst:893
msgid "Wildcard Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:895
msgid ""
"A wildcard pattern always succeeds (matches anything) and binds no name.  "
"Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:901
msgid ""
"``_`` is a :ref:`soft keyword <soft-keywords>` within any pattern, but only "
"within patterns.  It is an identifier, as usual, even within ``match`` "
"subject expressions, ``guard``\\ s, and ``case`` blocks."
msgstr ""

#: ../../reference/compound_stmts.rst:905
msgid "In simple terms, ``_`` will always succeed."
msgstr ""

#: ../../reference/compound_stmts.rst:910
msgid "Value Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:912
msgid "A value pattern represents a named value in Python. Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:920
msgid ""
"The dotted name in the pattern is looked up using standard Python :ref:`name "
"resolution rules <resolve_names>`.  The pattern succeeds if the value found "
"compares equal to the subject value (using the ``==`` equality operator)."
msgstr ""

#: ../../reference/compound_stmts.rst:925
msgid ""
"In simple terms ``NAME1.NAME2`` will succeed only if ``<subject> == "
"NAME1.NAME2``"
msgstr ""

#: ../../reference/compound_stmts.rst:929
msgid ""
"If the same value occurs multiple times in the same match statement, the "
"interpreter may cache the first value found and reuse it rather than repeat "
"the same lookup.  This cache is strictly tied to a given execution of a "
"given match statement."
msgstr ""

#: ../../reference/compound_stmts.rst:937
msgid "Group Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:939
msgid ""
"A group pattern allows users to add parentheses around patterns to emphasize "
"the intended grouping.  Otherwise, it has no additional syntax. Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:946
msgid "In simple terms ``(P)`` has the same effect as ``P``."
msgstr ""

#: ../../reference/compound_stmts.rst:951
msgid "Sequence Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:953
msgid ""
"A sequence pattern contains several subpatterns to be matched against "
"sequence elements. The syntax is similar to the unpacking of a list or tuple."
msgstr ""

#: ../../reference/compound_stmts.rst:964
msgid ""
"There is no difference if parentheses  or square brackets are used for "
"sequence patterns (i.e. ``(...)`` vs ``[...]`` )."
msgstr ""

#: ../../reference/compound_stmts.rst:968
msgid ""
"A single pattern enclosed in parentheses without a trailing comma (e.g. ``(3 "
"| 4)``) is a :ref:`group pattern <group-patterns>`. While a single pattern "
"enclosed in square brackets (e.g. ``[3 | 4]``) is still a sequence pattern."
msgstr ""

#: ../../reference/compound_stmts.rst:973
msgid ""
"At most one star subpattern may be in a sequence pattern.  The star "
"subpattern may occur in any position. If no star subpattern is present, the "
"sequence pattern is a fixed-length sequence pattern; otherwise it is a "
"variable-length sequence pattern."
msgstr ""

#: ../../reference/compound_stmts.rst:978
msgid ""
"The following is the logical flow for matching a sequence pattern against a "
"subject value:"
msgstr ""

#: ../../reference/compound_stmts.rst:981
msgid ""
"If the subject value is not a sequence [#]_, the sequence pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:984
msgid ""
"If the subject value is an instance of ``str``, ``bytes`` or ``bytearray`` "
"the sequence pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:987
msgid ""
"The subsequent steps depend on whether the sequence pattern is fixed or "
"variable-length."
msgstr ""

#: ../../reference/compound_stmts.rst:990
msgid "If the sequence pattern is fixed-length:"
msgstr ""

#: ../../reference/compound_stmts.rst:992
msgid ""
"If the length of the subject sequence is not equal to the number of "
"subpatterns, the sequence pattern fails"
msgstr ""

#: ../../reference/compound_stmts.rst:995
msgid ""
"Subpatterns in the sequence pattern are matched to their corresponding items "
"in the subject sequence from left to right.  Matching stops as soon as a "
"subpattern fails.  If all subpatterns succeed in matching their "
"corresponding item, the sequence pattern succeeds."
msgstr ""

#: ../../reference/compound_stmts.rst:1000
msgid "Otherwise, if the sequence pattern is variable-length:"
msgstr ""

#: ../../reference/compound_stmts.rst:1002
msgid ""
"If the length of the subject sequence is less than the number of non-star "
"subpatterns, the sequence pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:1005
msgid ""
"The leading non-star subpatterns are matched to their corresponding items as "
"for fixed-length sequences."
msgstr ""

#: ../../reference/compound_stmts.rst:1008
msgid ""
"If the previous step succeeds, the star subpattern matches a list formed of "
"the remaining subject items, excluding the remaining items corresponding to "
"non-star subpatterns following the star subpattern."
msgstr ""

#: ../../reference/compound_stmts.rst:1012
msgid ""
"Remaining non-star subpatterns are matched to their corresponding subject "
"items, as for a fixed-length sequence."
msgstr ""

#: ../../reference/compound_stmts.rst:1015
msgid ""
"The length of the subject sequence is obtained via :func:`len` (i.e. via "
"the :meth:`__len__` protocol).  This length may be cached by the interpreter "
"in a similar manner as :ref:`value patterns <value-patterns>`."
msgstr ""

#: ../../reference/compound_stmts.rst:1021
msgid ""
"In simple terms ``[P1, P2, P3,`` ... ``, P<N>]`` matches only if all the "
"following happens:"
msgstr ""

#: ../../reference/compound_stmts.rst:1024
msgid "check ``<subject>`` is a sequence"
msgstr ""

#: ../../reference/compound_stmts.rst:1025
msgid "``len(subject) == <N>``"
msgstr ""

#: ../../reference/compound_stmts.rst:1026
msgid ""
"``P1`` matches ``<subject>[0]`` (note that this match can also bind names)"
msgstr ""

#: ../../reference/compound_stmts.rst:1027
msgid ""
"``P2`` matches ``<subject>[1]`` (note that this match can also bind names)"
msgstr ""

#: ../../reference/compound_stmts.rst:1028
msgid "... and so on for the corresponding pattern/element."
msgstr ""

#: ../../reference/compound_stmts.rst:1033
msgid "Mapping Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:1035
msgid ""
"A mapping pattern contains one or more key-value patterns.  The syntax is "
"similar to the construction of a dictionary. Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:1046
msgid ""
"At most one double star pattern may be in a mapping pattern.  The double "
"star pattern must be the last subpattern in the mapping pattern."
msgstr ""

#: ../../reference/compound_stmts.rst:1049
msgid ""
"Duplicate keys in mapping patterns are disallowed. Duplicate literal keys "
"will raise a :exc:`SyntaxError`. Two keys that otherwise have the same value "
"will raise a :exc:`ValueError` at runtime."
msgstr ""

#: ../../reference/compound_stmts.rst:1053
msgid ""
"The following is the logical flow for matching a mapping pattern against a "
"subject value:"
msgstr ""

#: ../../reference/compound_stmts.rst:1056
msgid "If the subject value is not a mapping [#]_,the mapping pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:1058
msgid ""
"If every key given in the mapping pattern is present in the subject mapping, "
"and the pattern for each key matches the corresponding item of the subject "
"mapping, the mapping pattern succeeds."
msgstr ""

#: ../../reference/compound_stmts.rst:1062
msgid ""
"If duplicate keys are detected in the mapping pattern, the pattern is "
"considered invalid. A :exc:`SyntaxError` is raised for duplicate literal "
"values; or a :exc:`ValueError` for named keys of the same value."
msgstr ""

#: ../../reference/compound_stmts.rst:1066
msgid ""
"Key-value pairs are matched using the two-argument form of the mapping "
"subject's ``get()`` method.  Matched key-value pairs must already be present "
"in the mapping, and not created on-the-fly via :meth:`__missing__` "
"or :meth:`~object.__getitem__`."
msgstr ""

#: ../../reference/compound_stmts.rst:1071
msgid ""
"In simple terms ``{KEY1: P1, KEY2: P2, ... }`` matches only if all the "
"following happens:"
msgstr ""

#: ../../reference/compound_stmts.rst:1074
msgid "check ``<subject>`` is a mapping"
msgstr ""

#: ../../reference/compound_stmts.rst:1075
msgid "``KEY1 in <subject>``"
msgstr ""

#: ../../reference/compound_stmts.rst:1076
msgid "``P1`` matches ``<subject>[KEY1]``"
msgstr ""

#: ../../reference/compound_stmts.rst:1077
msgid "... and so on for the corresponding KEY/pattern pair."
msgstr ""

#: ../../reference/compound_stmts.rst:1083
msgid "Class Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:1085
msgid ""
"A class pattern represents a class and its positional and keyword arguments "
"(if any).  Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:1096
msgid "The same keyword should not be repeated in class patterns."
msgstr ""

#: ../../reference/compound_stmts.rst:1098
msgid ""
"The following is the logical flow for matching a class pattern against a "
"subject value:"
msgstr ""

#: ../../reference/compound_stmts.rst:1101
msgid ""
"If ``name_or_attr`` is not an instance of the builtin :class:`type` , "
"raise :exc:`TypeError`."
msgstr ""

#: ../../reference/compound_stmts.rst:1104
msgid ""
"If the subject value is not an instance of ``name_or_attr`` (tested "
"via :func:`isinstance`), the class pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:1107
msgid ""
"If no pattern arguments are present, the pattern succeeds.  Otherwise, the "
"subsequent steps depend on whether keyword or positional argument patterns "
"are present."
msgstr ""

#: ../../reference/compound_stmts.rst:1111
msgid ""
"For a number of built-in types (specified below), a single positional "
"subpattern is accepted which will match the entire subject; for these types "
"keyword patterns also work as for other types."
msgstr ""

#: ../../reference/compound_stmts.rst:1115
msgid ""
"If only keyword patterns are present, they are processed as follows, one by "
"one:"
msgstr ""

#: ../../reference/compound_stmts.rst:1118
msgid "I. The keyword is looked up as an attribute on the subject."
msgstr ""

#: ../../reference/compound_stmts.rst:1120
msgid ""
"If this raises an exception other than :exc:`AttributeError`, the exception "
"bubbles up."
msgstr ""

#: ../../reference/compound_stmts.rst:1123
msgid "If this raises :exc:`AttributeError`, the class pattern has failed."
msgstr ""

#: ../../reference/compound_stmts.rst:1125
msgid ""
"Else, the subpattern associated with the keyword pattern is matched against "
"the subject's attribute value.  If this fails, the class pattern fails; if "
"this succeeds, the match proceeds to the next keyword."
msgstr ""

#: ../../reference/compound_stmts.rst:1130
msgid "II. If all keyword patterns succeed, the class pattern succeeds."
msgstr ""

#: ../../reference/compound_stmts.rst:1132
msgid ""
"If any positional patterns are present, they are converted to keyword "
"patterns using the :data:`~object.__match_args__` attribute on the class "
"``name_or_attr`` before matching:"
msgstr ""

#: ../../reference/compound_stmts.rst:1136
msgid ""
"I. The equivalent of ``getattr(cls, \"__match_args__\", ())`` is called."
msgstr ""

#: ../../reference/compound_stmts.rst:1138
msgid "If this raises an exception, the exception bubbles up."
msgstr ""

#: ../../reference/compound_stmts.rst:1140
msgid ""
"If the returned value is not a tuple, the conversion fails "
"and :exc:`TypeError` is raised."
msgstr ""

#: ../../reference/compound_stmts.rst:1143
msgid ""
"If there are more positional patterns than "
"``len(cls.__match_args__)``, :exc:`TypeError` is raised."
msgstr ""

#: ../../reference/compound_stmts.rst:1146
msgid ""
"Otherwise, positional pattern ``i`` is converted to a keyword pattern using "
"``__match_args__[i]`` as the keyword.  ``__match_args__[i]`` must be a "
"string; if not :exc:`TypeError` is raised."
msgstr ""

#: ../../reference/compound_stmts.rst:1150
msgid "If there are duplicate keywords, :exc:`TypeError` is raised."
msgstr ""

#: ../../reference/compound_stmts.rst:1152
msgid ":ref:`class-pattern-matching`"
msgstr ""

#: ../../reference/compound_stmts.rst:1154
msgid ""
"II. Once all positional patterns have been converted to keyword patterns,"
msgstr ""

#: ../../reference/compound_stmts.rst:1155
msgid "the match proceeds as if there were only keyword patterns."
msgstr ""

#: ../../reference/compound_stmts.rst:1157
msgid ""
"For the following built-in types the handling of positional subpatterns is "
"different:"
msgstr ""

#: ../../reference/compound_stmts.rst:1160
msgid ":class:`bool`"
msgstr ""

#: ../../reference/compound_stmts.rst:1161
msgid ":class:`bytearray`"
msgstr ""

#: ../../reference/compound_stmts.rst:1162
msgid ":class:`bytes`"
msgstr ""

#: ../../reference/compound_stmts.rst:1163
msgid ":class:`dict`"
msgstr ""

#: ../../reference/compound_stmts.rst:1164
msgid ":class:`float`"
msgstr ""

#: ../../reference/compound_stmts.rst:1165
msgid ":class:`frozenset`"
msgstr ""

#: ../../reference/compound_stmts.rst:1166
msgid ":class:`int`"
msgstr ""

#: ../../reference/compound_stmts.rst:1167
#: ../../reference/compound_stmts.rst:1887
msgid ":class:`list`"
msgstr ""

#: ../../reference/compound_stmts.rst:1168
msgid ":class:`set`"
msgstr ""

#: ../../reference/compound_stmts.rst:1169
msgid ":class:`str`"
msgstr ""

#: ../../reference/compound_stmts.rst:1170
#: ../../reference/compound_stmts.rst:1890
msgid ":class:`tuple`"
msgstr ""

#: ../../reference/compound_stmts.rst:1172
msgid ""
"These classes accept a single positional argument, and the pattern there is "
"matched against the whole object rather than an attribute. For example "
"``int(0|1)`` matches the value ``0``, but not the value ``0.0``."
msgstr ""

#: ../../reference/compound_stmts.rst:1176
msgid ""
"In simple terms ``CLS(P1, attr=P2)`` matches only if the following happens:"
msgstr ""

#: ../../reference/compound_stmts.rst:1178
msgid "``isinstance(<subject>, CLS)``"
msgstr ""

#: ../../reference/compound_stmts.rst:1179
msgid "convert ``P1`` to a keyword pattern using ``CLS.__match_args__``"
msgstr ""

#: ../../reference/compound_stmts.rst:1180
msgid "For each keyword argument ``attr=P2``:"
msgstr ""

#: ../../reference/compound_stmts.rst:1182
msgid "``hasattr(<subject>, \"attr\")``"
msgstr ""

#: ../../reference/compound_stmts.rst:1183
msgid "``P2`` matches ``<subject>.attr``"
msgstr ""

#: ../../reference/compound_stmts.rst:1185
msgid "... and so on for the corresponding keyword argument/pattern pair."
msgstr ""

#: ../../reference/compound_stmts.rst:1200
msgid "Function definitions"
msgstr "Définition de fonctions"

#: ../../reference/compound_stmts.rst:1215
msgid ""
"A function definition defines a user-defined function object (see "
"section :ref:`types`):"
msgstr ""
"Une définition de fonction définit un objet fonction allogène (voir la "
"section :ref:`types`) :"

#: ../../reference/compound_stmts.rst:1237
msgid ""
"A function definition is an executable statement.  Its execution binds the "
"function name in the current local namespace to a function object (a wrapper "
"around the executable code for the function).  This function object contains "
"a reference to the current global namespace as the global namespace to be "
"used when the function is called."
msgstr ""
"Une définition de fonction est une instruction qui est exécutée. Son "
"exécution lie le nom de la fonction, dans l'espace de nommage local courant, "
"à un objet fonction (un objet qui encapsule le code exécutable de la "
"fonction).  Cet objet fonction contient une référence à l'espace des noms "
"globaux courant comme espace des noms globaux à utiliser lorsque la fonction "
"est appelée."

#: ../../reference/compound_stmts.rst:1243
msgid ""
"The function definition does not execute the function body; this gets "
"executed only when the function is called. [#]_"
msgstr ""
"La définition de la fonction n'exécute pas le corps de la fonction ; elle "
"n'est exécutée que lorsque la fonction est appelée. [#]_"

#: ../../reference/compound_stmts.rst:1249
msgid ""
"A function definition may be wrapped by one or more :term:`decorator` "
"expressions. Decorator expressions are evaluated when the function is "
"defined, in the scope that contains the function definition.  The result "
"must be a callable, which is invoked with the function object as the only "
"argument. The returned value is bound to the function name instead of the "
"function object.  Multiple decorators are applied in nested fashion. For "
"example, the following code ::"
msgstr ""
"Une définition de fonction peut être encapsulée dans une ou plusieurs "
"expressions :term:`decorator` ; les décorateurs sont évalués lorsque la "
"fonction est définie, dans la portée qui contient la définition de "
"fonction ; le résultat doit être un appelable, qui est invoqué avec l'objet "
"fonction comme seul argument ; la valeur renvoyée est liée au nom de la "
"fonction en lieu et place de l'objet fonction. Lorsqu'il y a plusieurs "
"décorateurs, ils sont appliqués par imbrication ; par exemple, le code "
"suivant ::"

#: ../../reference/compound_stmts.rst:1256
msgid ""
"@f1(arg)\n"
"@f2\n"
"def func(): pass"
msgstr ""

#: ../../reference/compound_stmts.rst:1260
#: ../../reference/compound_stmts.rst:1455
msgid "is roughly equivalent to ::"
msgstr "est à peu près équivalent à ::"

#: ../../reference/compound_stmts.rst:1262
msgid ""
"def func(): pass\n"
"func = f1(arg)(f2(func))"
msgstr ""

#: ../../reference/compound_stmts.rst:1265
msgid ""
"except that the original function is not temporarily bound to the name "
"``func``."
msgstr ""
"sauf que la fonction originale n'est pas temporairement liée au nom ``func``."

#: ../../reference/compound_stmts.rst:1267
msgid ""
"Functions may be decorated with any valid :token:`~python-"
"grammar:assignment_expression`. Previously, the grammar was much more "
"restrictive; see :pep:`614` for details."
msgstr ""

#: ../../reference/compound_stmts.rst:1272
msgid ""
"A list of :ref:`type parameters <type-params>` may be given in square "
"brackets between the function's name and the opening parenthesis for its "
"parameter list. This indicates to static type checkers that the function is "
"generic. At runtime, the type parameters can be retrieved from the "
"function's :attr:`~function.__type_params__` attribute. See :ref:`generic-"
"functions` for more."
msgstr ""

#: ../../reference/compound_stmts.rst:1279
#: ../../reference/compound_stmts.rst:1474
msgid "Type parameter lists are new in Python 3.12."
msgstr ""

#: ../../reference/compound_stmts.rst:1287
msgid ""
"When one or more :term:`parameters <parameter>` have the form *parameter* "
"``=`` *expression*, the function is said to have \"default parameter values."
"\"  For a parameter with a default value, the corresponding :term:`argument` "
"may be omitted from a call, in which case the parameter's default value is "
"substituted.  If a parameter has a default value, all following parameters "
"up until the \"``*``\" must also have a default value --- this is a "
"syntactic restriction that is not expressed by the grammar."
msgstr ""
"Lorsqu'un ou plusieurs :term:`paramètres <parameter>` sont de la forme "
"*parameter* ``=`` *expression*, on dit que la fonction a des \"valeurs de "
"paramètres par défaut\". Pour un paramètre avec une valeur par défaut, "
"l’:term:`argument` correspondant peut être omis lors de l'appel, la valeur "
"par défaut du paramètre est alors utilisée. Si un paramètre a une valeur par "
"défaut, tous les paramètres suivants jusqu'à \"``*``\" doivent aussi avoir "
"une valeur par défaut --- ceci est une restriction syntaxique qui n'est pas "
"exprimée dans la grammaire."

#: ../../reference/compound_stmts.rst:1295
msgid ""
"**Default parameter values are evaluated from left to right when the "
"function definition is executed.** This means that the expression is "
"evaluated once, when the function is defined, and that the same \"pre-"
"computed\" value is used for each call.  This is especially important to "
"understand when a default parameter value is a mutable object, such as a "
"list or a dictionary: if the function modifies the object (e.g. by appending "
"an item to a list), the default parameter value is in effect modified.  This "
"is generally not what was intended.  A way around this is to use ``None`` as "
"the default, and explicitly test for it in the body of the function, e.g.::"
msgstr ""

#: ../../reference/compound_stmts.rst:1305
msgid ""
"def whats_on_the_telly(penguin=None):\n"
"    if penguin is None:\n"
"        penguin = []\n"
"    penguin.append(\"property of the zoo\")\n"
"    return penguin"
msgstr ""

#: ../../reference/compound_stmts.rst:1316
msgid ""
"Function call semantics are described in more detail in "
"section :ref:`calls`. A function call always assigns values to all "
"parameters mentioned in the parameter list, either from positional "
"arguments, from keyword arguments, or from default values.  If the form "
"\"``*identifier``\" is present, it is initialized to a tuple receiving any "
"excess positional parameters, defaulting to the empty tuple. If the form "
"\"``**identifier``\" is present, it is initialized to a new ordered mapping "
"receiving any excess keyword arguments, defaulting to a new empty mapping of "
"the same type.  Parameters after \"``*``\" or \"``*identifier``\" are "
"keyword-only parameters and may only be passed by keyword arguments.  "
"Parameters before \"``/``\" are positional-only parameters and may only be "
"passed by positional arguments."
msgstr ""

#: ../../reference/compound_stmts.rst:1328
msgid ""
"The ``/`` function parameter syntax may be used to indicate positional-only "
"parameters. See :pep:`570` for details."
msgstr ""

#: ../../reference/compound_stmts.rst:1337
msgid ""
"Parameters may have an :term:`annotation <function annotation>` of the form "
"\"``: expression``\" following the parameter name.  Any parameter may have "
"an annotation, even those of the form ``*identifier`` or ``**identifier``. "
"(As a special case, parameters of the form ``*identifier`` may have an "
"annotation \"``: *expression``\".) Functions may have \"return\" annotation "
"of the form \"``-> expression``\" after the parameter list.  These "
"annotations can be any valid Python expression.  The presence of annotations "
"does not change the semantics of a function.  The annotation values are "
"available as values of a dictionary keyed by the parameters' names in "
"the :attr:`__annotations__` attribute of the function object.  If the "
"``annotations`` import from :mod:`__future__` is used, annotations are "
"preserved as strings at runtime which enables postponed evaluation.  "
"Otherwise, they are evaluated when the function definition is executed.  In "
"this case annotations may be evaluated in a different order than they appear "
"in the source code."
msgstr ""

#: ../../reference/compound_stmts.rst:1351
msgid ""
"Parameters of the form \"``*identifier``\" may have an annotation \"``: "
"*expression``\". See :pep:`646`."
msgstr ""

#: ../../reference/compound_stmts.rst:1357
msgid ""
"It is also possible to create anonymous functions (functions not bound to a "
"name), for immediate use in expressions.  This uses lambda expressions, "
"described in section :ref:`lambda`.  Note that the lambda expression is "
"merely a shorthand for a simplified function definition; a function defined "
"in a \":keyword:`def`\" statement can be passed around or assigned to "
"another name just like a function defined by a lambda expression.  The "
"\":keyword:`!def`\" form is actually more powerful since it allows the "
"execution of multiple statements and annotations."
msgstr ""
"Il est aussi possible de créer des fonctions anonymes (fonctions non liées à "
"un nom), pour une utilisation immédiate dans des expressions. Utilisez alors "
"des expressions lambda, décrites dans la section :ref:`lambda`. Notez qu'une "
"expression lambda est simplement un raccourci pour définir une fonction "
"simple ; une fonction définie par une instruction \":keyword:`def`\" peut "
"être passée (en argument) ou assignée à un autre nom, tout comme une "
"fonction définie par une expression lambda. La forme \":keyword:`!def`\" est "
"en fait plus puissante puisqu'elle permet l'exécution de plusieurs "
"instructions et les annotations."

#: ../../reference/compound_stmts.rst:1365
msgid ""
"**Programmer's note:** Functions are first-class objects.  A \"``def``\" "
"statement executed inside a function definition defines a local function "
"that can be returned or passed around.  Free variables used in the nested "
"function can access the local variables of the function containing the def.  "
"See section :ref:`naming` for details."
msgstr ""
"**Note pour les programmeurs :** les fonctions sont des objets de première "
"classe. Une instruction \"``def``\" exécutée à l'intérieur d'une définition "
"de fonction définit une fonction locale qui peut être renvoyée ou passée en "
"tant qu'argument. Les variables libres utilisées dans la fonction imbriquée "
"ont accès aux variables locales de la fonction contenant le \"``def``\".  "
"Voir la section :ref:`naming` pour plus de détails."

#: ../../reference/compound_stmts.rst:1373
msgid ":pep:`3107` - Function Annotations"
msgstr ":pep:`3107` -- Annotations de fonctions"

#: ../../reference/compound_stmts.rst:1374
msgid "The original specification for function annotations."
msgstr "La spécification originale pour les annotations de fonctions."

#: ../../reference/compound_stmts.rst:1376
msgid ":pep:`484` - Type Hints"
msgstr ":pep:`484` -- Indications de types"

#: ../../reference/compound_stmts.rst:1377
msgid "Definition of a standard meaning for annotations: type hints."
msgstr ""
"Définition de la signification standard pour les annotations : indications "
"de types."

#: ../../reference/compound_stmts.rst:1379
msgid ":pep:`526` - Syntax for Variable Annotations"
msgstr ":pep:`526` -- Syntaxe pour les annotations de variables"

#: ../../reference/compound_stmts.rst:1380
msgid ""
"Ability to type hint variable declarations, including class variables and "
"instance variables."
msgstr ""

#: ../../reference/compound_stmts.rst:1383
msgid ":pep:`563` - Postponed Evaluation of Annotations"
msgstr ":pep:`563` -- Évaluation différée des annotations"

#: ../../reference/compound_stmts.rst:1384
msgid ""
"Support for forward references within annotations by preserving annotations "
"in a string form at runtime instead of eager evaluation."
msgstr ""
"Gestion des références postérieures à l'intérieur des annotations en "
"préservant les annotations sous forme de chaînes à l'exécution au lieu d'une "
"évaluation directe."

#: ../../reference/compound_stmts.rst:1387
msgid ":pep:`318` - Decorators for Functions and Methods"
msgstr ""

#: ../../reference/compound_stmts.rst:1388
msgid ""
"Function and method decorators were introduced. Class decorators were "
"introduced in :pep:`3129`."
msgstr ""

#: ../../reference/compound_stmts.rst:1394
msgid "Class definitions"
msgstr "Définition de classes"

#: ../../reference/compound_stmts.rst:1409
msgid "A class definition defines a class object (see section :ref:`types`):"
msgstr ""
"Une définition de classe définit un objet classe (voir la "
"section :ref:`types`) :"

#: ../../reference/compound_stmts.rst:1416
msgid ""
"A class definition is an executable statement.  The inheritance list usually "
"gives a list of base classes (see :ref:`metaclasses` for more advanced "
"uses), so each item in the list should evaluate to a class object which "
"allows subclassing.  Classes without an inheritance list inherit, by "
"default, from the base class :class:`object`; hence, ::"
msgstr ""
"Une définition de classe est une instruction qui est exécutée. La liste "
"d'héritage (*inheritance* entre crochets dans la grammaire ci-dessus) donne "
"habituellement une liste de classes de base (voir :ref:`metaclasses` pour "
"des utilisations plus avancées). Donc chaque élément de la liste doit "
"pouvoir être évalué comme un objet classe qui autorise les sous-classes.  "
"Les classes sans liste d'héritage héritent, par défaut, de la classe de "
"base :class:`object` ; d'où ::"

#: ../../reference/compound_stmts.rst:1422
msgid ""
"class Foo:\n"
"    pass"
msgstr ""

#: ../../reference/compound_stmts.rst:1425
msgid "is equivalent to ::"
msgstr "est équivalente à ::"

#: ../../reference/compound_stmts.rst:1427
msgid ""
"class Foo(object):\n"
"    pass"
msgstr ""

#: ../../reference/compound_stmts.rst:1430
msgid ""
"The class's suite is then executed in a new execution frame "
"(see :ref:`naming`), using a newly created local namespace and the original "
"global namespace. (Usually, the suite contains mostly function "
"definitions.)  When the class's suite finishes execution, its execution "
"frame is discarded but its local namespace is saved. [#]_ A class object is "
"then created using the inheritance list for the base classes and the saved "
"local namespace for the attribute dictionary.  The class name is bound to "
"this class object in the original local namespace."
msgstr ""
"La suite de la classe est ensuite exécutée dans un nouveau cadre d'exécution "
"(voir :ref:`naming`), en utilisant un espace de nommage local nouvellement "
"créé et l'espace de nommage global d'origine (habituellement, la suite "
"contient principalement des définitions de fonctions). Lorsque la suite de "
"la classe termine son exécution, son cadre d'exécution est abandonné mais "
"son espace des noms locaux est sauvegardé [#]_. Un objet classe est alors "
"créé en utilisant la liste d'héritage pour les classes de base et l'espace "
"de nommage sauvegardé comme dictionnaire des attributs. Le nom de classe est "
"lié à l'objet classe dans l'espace de nommage local original."

#: ../../reference/compound_stmts.rst:1439
msgid ""
"The order in which attributes are defined in the class body is preserved in "
"the new class's :attr:`~type.__dict__`.  Note that this is reliable only "
"right after the class is created and only for classes that were defined "
"using the definition syntax."
msgstr ""

#: ../../reference/compound_stmts.rst:1444
msgid ""
"Class creation can be customized heavily using :ref:`metaclasses "
"<metaclasses>`."
msgstr ""
"La création de classes peut être fortement personnalisée en utilisant "
"les :ref:`métaclasses <metaclasses>`."

#: ../../reference/compound_stmts.rst:1449
msgid "Classes can also be decorated: just like when decorating functions, ::"
msgstr ""
"Les classes peuvent aussi être décorées : comme pour les décorateurs de "
"fonctions ::"

#: ../../reference/compound_stmts.rst:1451
msgid ""
"@f1(arg)\n"
"@f2\n"
"class Foo: pass"
msgstr ""

#: ../../reference/compound_stmts.rst:1457
msgid ""
"class Foo: pass\n"
"Foo = f1(arg)(f2(Foo))"
msgstr ""

#: ../../reference/compound_stmts.rst:1460
msgid ""
"The evaluation rules for the decorator expressions are the same as for "
"function decorators.  The result is then bound to the class name."
msgstr ""
"Les règles d'évaluation pour les expressions de décorateurs sont les mêmes "
"que pour les décorateurs de fonctions. Le résultat est alors lié au nom de "
"la classe."

#: ../../reference/compound_stmts.rst:1463
msgid ""
"Classes may be decorated with any valid :token:`~python-"
"grammar:assignment_expression`. Previously, the grammar was much more "
"restrictive; see :pep:`614` for details."
msgstr ""

#: ../../reference/compound_stmts.rst:1468
msgid ""
"A list of :ref:`type parameters <type-params>` may be given in square "
"brackets immediately after the class's name. This indicates to static type "
"checkers that the class is generic. At runtime, the type parameters can be "
"retrieved from the class's :attr:`~type.__type_params__` attribute. "
"See :ref:`generic-classes` for more."
msgstr ""

#: ../../reference/compound_stmts.rst:1477
msgid ""
"**Programmer's note:** Variables defined in the class definition are class "
"attributes; they are shared by instances.  Instance attributes can be set in "
"a method with ``self.name = value``.  Both class and instance attributes are "
"accessible through the notation \"``self.name``\", and an instance attribute "
"hides a class attribute with the same name when accessed in this way.  Class "
"attributes can be used as defaults for instance attributes, but using "
"mutable values there can lead to unexpected results.  :ref:`Descriptors "
"<descriptors>` can be used to create instance variables with different "
"implementation details."
msgstr ""
"**Note pour les programmeurs :** les variables définies dans la définition "
"de classe sont des attributs de classe ; elles sont partagées par les "
"instances. Les attributs d'instance peuvent être définis dans une méthode en "
"utilisant ``self.name = value``.  Les attributs de classe et d'instance sont "
"accessibles par la notation \"``self.name``\", et un attribut d'instance "
"masque un attribut de classe de même nom lorsqu'on y accède de cette façon.  "
"Les attributs de classe peuvent être utilisés comme valeurs par défaut pour "
"les attributs d'instances, mais l'utilisation de valeurs mutables peut "
"conduire à des résultats inattendus. Les :ref:`descripteurs <descriptors>` "
"peuvent être utilisés pour créer des variables d'instances avec des détails "
"d'implémentation différents."

#: ../../reference/compound_stmts.rst:1489
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` — Méta-classes dans Python 3000"

#: ../../reference/compound_stmts.rst:1490
msgid ""
"The proposal that changed the declaration of metaclasses to the current "
"syntax, and the semantics for how classes with metaclasses are constructed."
msgstr ""
"La proposition qui a modifié la déclaration de métaclasses à la syntaxe "
"actuelle, et la sémantique pour la façon dont les classes avec métaclasses "
"sont construites."

#: ../../reference/compound_stmts.rst:1494
msgid ":pep:`3129` - Class Decorators"
msgstr ":pep:`3129` -- Décorateurs de classes"

#: ../../reference/compound_stmts.rst:1495
msgid ""
"The proposal that added class decorators.  Function and method decorators "
"were introduced in :pep:`318`."
msgstr ""
"La proposition qui a ajouté des décorateurs de classe. Les décorateurs de "
"fonction et de méthode ont été introduits dans :pep:`318`."

#: ../../reference/compound_stmts.rst:1502
msgid "Coroutines"
msgstr "Coroutines"

#: ../../reference/compound_stmts.rst:1510
msgid "Coroutine function definition"
msgstr "Définition de fonctions coroutines"

#: ../../reference/compound_stmts.rst:1520
msgid ""
"Execution of Python coroutines can be suspended and resumed at many points "
"(see :term:`coroutine`). :keyword:`await` expressions, :keyword:`async for` "
"and :keyword:`async with` can only be used in the body of a coroutine "
"function."
msgstr ""

#: ../../reference/compound_stmts.rst:1524
msgid ""
"Functions defined with ``async def`` syntax are always coroutine functions, "
"even if they do not contain ``await`` or ``async`` keywords."
msgstr ""
"Les fonctions définies avec la syntaxe ``async def`` sont toujours des "
"fonctions coroutines, même si elles ne contiennent aucun mot-clé ``await`` "
"ou ``async``."

#: ../../reference/compound_stmts.rst:1527
msgid ""
"It is a :exc:`SyntaxError` to use a ``yield from`` expression inside the "
"body of a coroutine function."
msgstr ""
"C'est une :exc:`SyntaxError` d'utiliser une expression ``yield from`` dans "
"une coroutine."

#: ../../reference/compound_stmts.rst:1530
msgid "An example of a coroutine function::"
msgstr "Un exemple de fonction coroutine ::"

#: ../../reference/compound_stmts.rst:1532
msgid ""
"async def func(param1, param2):\n"
"    do_stuff()\n"
"    await some_coroutine()"
msgstr ""

#: ../../reference/compound_stmts.rst:1536
msgid ""
"``await`` and ``async`` are now keywords; previously they were only treated "
"as such inside the body of a coroutine function."
msgstr ""

#: ../../reference/compound_stmts.rst:1544
msgid "The :keyword:`!async for` statement"
msgstr "L'instruction :keyword:`!async for`"

#: ../../reference/compound_stmts.rst:1549
msgid ""
"An :term:`asynchronous iterable` provides an ``__aiter__`` method that "
"directly returns an :term:`asynchronous iterator`, which can call "
"asynchronous code in its ``__anext__`` method."
msgstr ""

#: ../../reference/compound_stmts.rst:1553
msgid ""
"The ``async for`` statement allows convenient iteration over asynchronous "
"iterables."
msgstr ""

#: ../../reference/compound_stmts.rst:1558
msgid ""
"async for TARGET in ITER:\n"
"    SUITE\n"
"else:\n"
"    SUITE2"
msgstr ""

#: ../../reference/compound_stmts.rst:1563
msgid "Is semantically equivalent to::"
msgstr "Est sémantiquement équivalent à ::"

#: ../../reference/compound_stmts.rst:1565
msgid ""
"iter = (ITER)\n"
"iter = type(iter).__aiter__(iter)\n"
"running = True\n"
"\n"
"while running:\n"
"    try:\n"
"        TARGET = await type(iter).__anext__(iter)\n"
"    except StopAsyncIteration:\n"
"        running = False\n"
"    else:\n"
"        SUITE\n"
"else:\n"
"    SUITE2"
msgstr ""

#: ../../reference/compound_stmts.rst:1579
msgid ""
"See also :meth:`~object.__aiter__` and :meth:`~object.__anext__` for details."
msgstr ""

#: ../../reference/compound_stmts.rst:1581
msgid ""
"It is a :exc:`SyntaxError` to use an ``async for`` statement outside the "
"body of a coroutine function."
msgstr ""
"C'est une :exc:`SyntaxError` d'utiliser une instruction ``async for`` en "
"dehors d'une fonction coroutine."

#: ../../reference/compound_stmts.rst:1589
msgid "The :keyword:`!async with` statement"
msgstr "L'instruction :keyword:`!async with`"

#: ../../reference/compound_stmts.rst:1594
msgid ""
"An :term:`asynchronous context manager` is a :term:`context manager` that is "
"able to suspend execution in its *enter* and *exit* methods."
msgstr ""
"Un :term:`gestionnaire de contexte asynchrone <asynchronous context "
"manager>` est un :term:`gestionnaire de contexte <context manager>` qui est "
"capable de suspendre l'exécution dans ses méthodes *enter* et *exit*."

#: ../../reference/compound_stmts.rst:1599
msgid ""
"async with EXPRESSION as TARGET:\n"
"    SUITE"
msgstr ""

#: ../../reference/compound_stmts.rst:1604
msgid ""
"manager = (EXPRESSION)\n"
"aenter = type(manager).__aenter__\n"
"aexit = type(manager).__aexit__\n"
"value = await aenter(manager)\n"
"hit_except = False\n"
"\n"
"try:\n"
"    TARGET = value\n"
"    SUITE\n"
"except:\n"
"    hit_except = True\n"
"    if not await aexit(manager, *sys.exc_info()):\n"
"        raise\n"
"finally:\n"
"    if not hit_except:\n"
"        await aexit(manager, None, None, None)"
msgstr ""

#: ../../reference/compound_stmts.rst:1621
msgid ""
"See also :meth:`~object.__aenter__` and :meth:`~object.__aexit__` for "
"details."
msgstr ""

#: ../../reference/compound_stmts.rst:1623
msgid ""
"It is a :exc:`SyntaxError` to use an ``async with`` statement outside the "
"body of a coroutine function."
msgstr ""
"C'est une :exc:`SyntaxError` d'utiliser l'instruction ``async with`` en "
"dehors d'une fonction coroutine."

#: ../../reference/compound_stmts.rst:1628
msgid ":pep:`492` - Coroutines with async and await syntax"
msgstr ":pep:`492` -- Coroutines avec les syntaxes *async* et *await*"

#: ../../reference/compound_stmts.rst:1629
msgid ""
"The proposal that made coroutines a proper standalone concept in Python, and "
"added supporting syntax."
msgstr ""
"La proposition qui a fait que les coroutines soient un concept propre en "
"Python, et a ajouté la syntaxe de prise en charge de celles-ci."

#: ../../reference/compound_stmts.rst:1635
msgid "Type parameter lists"
msgstr ""

#: ../../reference/compound_stmts.rst:1639
msgid "Support for default values was added (see :pep:`696`)."
msgstr ""

#: ../../reference/compound_stmts.rst:1652
msgid ""
":ref:`Functions <def>` (including :ref:`coroutines <async "
"def>`), :ref:`classes <class>` and :ref:`type aliases <type>` may contain a "
"type parameter list::"
msgstr ""

#: ../../reference/compound_stmts.rst:1656
msgid ""
"def max[T](args: list[T]) -> T:\n"
"    ...\n"
"\n"
"async def amax[T](args: list[T]) -> T:\n"
"    ...\n"
"\n"
"class Bag[T]:\n"
"    def __iter__(self) -> Iterator[T]:\n"
"        ...\n"
"\n"
"    def add(self, arg: T) -> None:\n"
"        ...\n"
"\n"
"type ListOrSet[T] = list[T] | set[T]"
msgstr ""

#: ../../reference/compound_stmts.rst:1671
msgid ""
"Semantically, this indicates that the function, class, or type alias is "
"generic over a type variable. This information is primarily used by static "
"type checkers, and at runtime, generic objects behave much like their non-"
"generic counterparts."
msgstr ""

#: ../../reference/compound_stmts.rst:1676
msgid ""
"Type parameters are declared in square brackets (``[]``) immediately after "
"the name of the function, class, or type alias. The type parameters are "
"accessible within the scope of the generic object, but not elsewhere. Thus, "
"after a declaration ``def func[T](): pass``, the name ``T`` is not available "
"in the module scope. Below, the semantics of generic objects are described "
"with more precision. The scope of type parameters is modeled with a special "
"function (technically, an :ref:`annotation scope <annotation-scopes>`) that "
"wraps the creation of the generic object."
msgstr ""

#: ../../reference/compound_stmts.rst:1685
msgid ""
"Generic functions, classes, and type aliases have "
"a :attr:`~definition.__type_params__` attribute listing their type "
"parameters."
msgstr ""

#: ../../reference/compound_stmts.rst:1688
msgid "Type parameters come in three kinds:"
msgstr ""

#: ../../reference/compound_stmts.rst:1690
msgid ""
":data:`typing.TypeVar`, introduced by a plain name (e.g., ``T``). "
"Semantically, this represents a single type to a type checker."
msgstr ""

#: ../../reference/compound_stmts.rst:1692
msgid ""
":data:`typing.TypeVarTuple`, introduced by a name prefixed with a single "
"asterisk (e.g., ``*Ts``). Semantically, this stands for a tuple of any "
"number of types."
msgstr ""

#: ../../reference/compound_stmts.rst:1695
msgid ""
":data:`typing.ParamSpec`, introduced by a name prefixed with two asterisks "
"(e.g., ``**P``). Semantically, this stands for the parameters of a callable."
msgstr ""

#: ../../reference/compound_stmts.rst:1698
msgid ""
":data:`typing.TypeVar` declarations can define *bounds* and *constraints* "
"with a colon (``:``) followed by an expression. A single expression after "
"the colon indicates a bound (e.g. ``T: int``). Semantically, this means that "
"the :data:`!typing.TypeVar` can only represent types that are a subtype of "
"this bound. A parenthesized tuple of expressions after the colon indicates a "
"set of constraints (e.g. ``T: (str, bytes)``). Each member of the tuple "
"should be a type (again, this is not enforced at runtime). Constrained type "
"variables can only take on one of the types in the list of constraints."
msgstr ""

#: ../../reference/compound_stmts.rst:1707
msgid ""
"For :data:`!typing.TypeVar`\\ s declared using the type parameter list "
"syntax, the bound and constraints are not evaluated when the generic object "
"is created, but only when the value is explicitly accessed through the "
"attributes ``__bound__`` and ``__constraints__``. To accomplish this, the "
"bounds or constraints are evaluated in a separate :ref:`annotation scope "
"<annotation-scopes>`."
msgstr ""

#: ../../reference/compound_stmts.rst:1713
msgid ""
":data:`typing.TypeVarTuple`\\ s and :data:`typing.ParamSpec`\\ s cannot have "
"bounds or constraints."
msgstr ""

#: ../../reference/compound_stmts.rst:1716
msgid ""
"All three flavors of type parameters can also have a *default value*, which "
"is used when the type parameter is not explicitly provided. This is added by "
"appending a single equals sign (``=``) followed by an expression. Like the "
"bounds and constraints of type variables, the default value is not evaluated "
"when the object is created, but only when the type parameter's "
"``__default__`` attribute is accessed. To this end, the default value is "
"evaluated in a separate :ref:`annotation scope <annotation-scopes>`. If no "
"default value is specified for a type parameter, the ``__default__`` "
"attribute is set to the special sentinel object :data:`typing.NoDefault`."
msgstr ""

#: ../../reference/compound_stmts.rst:1726
msgid ""
"The following example indicates the full set of allowed type parameter "
"declarations::"
msgstr ""

#: ../../reference/compound_stmts.rst:1728
msgid ""
"def overly_generic[\n"
"   SimpleTypeVar,\n"
"   TypeVarWithDefault = int,\n"
"   TypeVarWithBound: int,\n"
"   TypeVarWithConstraints: (str, bytes),\n"
"   *SimpleTypeVarTuple = (int, float),\n"
"   **SimpleParamSpec = (str, bytearray),\n"
"](\n"
"   a: SimpleTypeVar,\n"
"   b: TypeVarWithDefault,\n"
"   c: TypeVarWithBound,\n"
"   d: Callable[SimpleParamSpec, TypeVarWithConstraints],\n"
"   *e: SimpleTypeVarTuple,\n"
"): ..."
msgstr ""

#: ../../reference/compound_stmts.rst:1746
msgid "Generic functions"
msgstr ""

#: ../../reference/compound_stmts.rst:1748
msgid "Generic functions are declared as follows::"
msgstr ""

#: ../../reference/compound_stmts.rst:1750
msgid "def func[T](arg: T): ..."
msgstr ""

#: ../../reference/compound_stmts.rst:1752
#: ../../reference/compound_stmts.rst:1812
msgid "This syntax is equivalent to::"
msgstr ""

#: ../../reference/compound_stmts.rst:1754
msgid ""
"annotation-def TYPE_PARAMS_OF_func():\n"
"    T = typing.TypeVar(\"T\")\n"
"    def func(arg: T): ...\n"
"    func.__type_params__ = (T,)\n"
"    return func\n"
"func = TYPE_PARAMS_OF_func()"
msgstr ""

#: ../../reference/compound_stmts.rst:1761
msgid ""
"Here ``annotation-def`` indicates an :ref:`annotation scope <annotation-"
"scopes>`, which is not actually bound to any name at runtime. (One other "
"liberty is taken in the translation: the syntax does not go through "
"attribute access on the :mod:`typing` module, but creates an instance "
"of :data:`typing.TypeVar` directly.)"
msgstr ""

#: ../../reference/compound_stmts.rst:1767
msgid ""
"The annotations of generic functions are evaluated within the annotation "
"scope used for declaring the type parameters, but the function's defaults "
"and decorators are not."
msgstr ""

#: ../../reference/compound_stmts.rst:1771
msgid ""
"The following example illustrates the scoping rules for these cases, as well "
"as for additional flavors of type parameters::"
msgstr ""

#: ../../reference/compound_stmts.rst:1774
msgid ""
"@decorator\n"
"def func[T: int, *Ts, **P](*args: *Ts, arg: Callable[P, T] = some_default):\n"
"    ..."
msgstr ""

#: ../../reference/compound_stmts.rst:1778
msgid ""
"Except for the :ref:`lazy evaluation <lazy-evaluation>` of "
"the :class:`~typing.TypeVar` bound, this is equivalent to::"
msgstr ""

#: ../../reference/compound_stmts.rst:1781
msgid ""
"DEFAULT_OF_arg = some_default\n"
"\n"
"annotation-def TYPE_PARAMS_OF_func():\n"
"\n"
"    annotation-def BOUND_OF_T():\n"
"        return int\n"
"    # In reality, BOUND_OF_T() is evaluated only on demand.\n"
"    T = typing.TypeVar(\"T\", bound=BOUND_OF_T())\n"
"\n"
"    Ts = typing.TypeVarTuple(\"Ts\")\n"
"    P = typing.ParamSpec(\"P\")\n"
"\n"
"    def func(*args: *Ts, arg: Callable[P, T] = DEFAULT_OF_arg):\n"
"        ...\n"
"\n"
"    func.__type_params__ = (T, Ts, P)\n"
"    return func\n"
"func = decorator(TYPE_PARAMS_OF_func())"
msgstr ""

#: ../../reference/compound_stmts.rst:1800
msgid ""
"The capitalized names like ``DEFAULT_OF_arg`` are not actually bound at "
"runtime."
msgstr ""

#: ../../reference/compound_stmts.rst:1806
msgid "Generic classes"
msgstr ""

#: ../../reference/compound_stmts.rst:1808
msgid "Generic classes are declared as follows::"
msgstr ""

#: ../../reference/compound_stmts.rst:1810
msgid "class Bag[T]: ..."
msgstr ""

#: ../../reference/compound_stmts.rst:1814
msgid ""
"annotation-def TYPE_PARAMS_OF_Bag():\n"
"    T = typing.TypeVar(\"T\")\n"
"    class Bag(typing.Generic[T]):\n"
"        __type_params__ = (T,)\n"
"        ...\n"
"    return Bag\n"
"Bag = TYPE_PARAMS_OF_Bag()"
msgstr ""

#: ../../reference/compound_stmts.rst:1822
msgid ""
"Here again ``annotation-def`` (not a real keyword) indicates "
"an :ref:`annotation scope <annotation-scopes>`, and the name "
"``TYPE_PARAMS_OF_Bag`` is not actually bound at runtime."
msgstr ""

#: ../../reference/compound_stmts.rst:1826
msgid ""
"Generic classes implicitly inherit from :data:`typing.Generic`. The base "
"classes and keyword arguments of generic classes are evaluated within the "
"type scope for the type parameters, and decorators are evaluated outside "
"that scope. This is illustrated by this example::"
msgstr ""

#: ../../reference/compound_stmts.rst:1832
msgid ""
"@decorator\n"
"class Bag(Base[T], arg=T): ..."
msgstr ""

#: ../../reference/compound_stmts.rst:1835
msgid "This is equivalent to::"
msgstr "C’est équivalent à ::"

#: ../../reference/compound_stmts.rst:1837
msgid ""
"annotation-def TYPE_PARAMS_OF_Bag():\n"
"    T = typing.TypeVar(\"T\")\n"
"    class Bag(Base[T], typing.Generic[T], arg=T):\n"
"        __type_params__ = (T,)\n"
"        ...\n"
"    return Bag\n"
"Bag = decorator(TYPE_PARAMS_OF_Bag())"
msgstr ""

#: ../../reference/compound_stmts.rst:1848
msgid "Generic type aliases"
msgstr ""

#: ../../reference/compound_stmts.rst:1850
msgid ""
"The :keyword:`type` statement can also be used to create a generic type "
"alias::"
msgstr ""

#: ../../reference/compound_stmts.rst:1852
msgid "type ListOrSet[T] = list[T] | set[T]"
msgstr ""

#: ../../reference/compound_stmts.rst:1854
msgid ""
"Except for the :ref:`lazy evaluation <lazy-evaluation>` of the value, this "
"is equivalent to::"
msgstr ""

#: ../../reference/compound_stmts.rst:1857
msgid ""
"annotation-def TYPE_PARAMS_OF_ListOrSet():\n"
"    T = typing.TypeVar(\"T\")\n"
"\n"
"    annotation-def VALUE_OF_ListOrSet():\n"
"        return list[T] | set[T]\n"
"    # In reality, the value is lazily evaluated\n"
"    return typing.TypeAliasType(\"ListOrSet\", VALUE_OF_ListOrSet(), "
"type_params=(T,))\n"
"ListOrSet = TYPE_PARAMS_OF_ListOrSet()"
msgstr ""

#: ../../reference/compound_stmts.rst:1866
msgid ""
"Here, ``annotation-def`` (not a real keyword) indicates an :ref:`annotation "
"scope <annotation-scopes>`. The capitalized names like "
"``TYPE_PARAMS_OF_ListOrSet`` are not actually bound at runtime."
msgstr ""

#: ../../reference/compound_stmts.rst:1871
msgid "Footnotes"
msgstr "Notes"

#: ../../reference/compound_stmts.rst:1872
msgid ""
"The exception is propagated to the invocation stack unless there is "
"a :keyword:`finally` clause which happens to raise another exception. That "
"new exception causes the old one to be lost."
msgstr ""
"L'exception est propagée à la pile d'appels à moins qu'il n'y ait une "
"clause :keyword:`finally` qui lève une autre exception, ce qui entraîne la "
"perte de l'ancienne exception. Cette nouvelle exception entraîne la perte "
"pure et simple de l'ancienne."

#: ../../reference/compound_stmts.rst:1876
msgid "In pattern matching, a sequence is defined as one of the following:"
msgstr ""

#: ../../reference/compound_stmts.rst:1878
msgid "a class that inherits from :class:`collections.abc.Sequence`"
msgstr ""

#: ../../reference/compound_stmts.rst:1879
msgid ""
"a Python class that has been registered as :class:`collections.abc.Sequence`"
msgstr ""

#: ../../reference/compound_stmts.rst:1880
msgid ""
"a builtin class that has its (CPython) :c:macro:`Py_TPFLAGS_SEQUENCE` bit set"
msgstr ""

#: ../../reference/compound_stmts.rst:1881
#: ../../reference/compound_stmts.rst:1900
msgid "a class that inherits from any of the above"
msgstr ""

#: ../../reference/compound_stmts.rst:1883
msgid "The following standard library classes are sequences:"
msgstr ""

#: ../../reference/compound_stmts.rst:1885
msgid ":class:`array.array`"
msgstr ""

#: ../../reference/compound_stmts.rst:1886
msgid ":class:`collections.deque`"
msgstr ""

#: ../../reference/compound_stmts.rst:1888
msgid ":class:`memoryview`"
msgstr ""

#: ../../reference/compound_stmts.rst:1889
msgid ":class:`range`"
msgstr ""

#: ../../reference/compound_stmts.rst:1892
msgid ""
"Subject values of type ``str``, ``bytes``, and ``bytearray`` do not match "
"sequence patterns."
msgstr ""

#: ../../reference/compound_stmts.rst:1895
msgid "In pattern matching, a mapping is defined as one of the following:"
msgstr ""

#: ../../reference/compound_stmts.rst:1897
msgid "a class that inherits from :class:`collections.abc.Mapping`"
msgstr ""

#: ../../reference/compound_stmts.rst:1898
msgid ""
"a Python class that has been registered as :class:`collections.abc.Mapping`"
msgstr ""

#: ../../reference/compound_stmts.rst:1899
msgid ""
"a builtin class that has its (CPython) :c:macro:`Py_TPFLAGS_MAPPING` bit set"
msgstr ""

#: ../../reference/compound_stmts.rst:1902
msgid ""
"The standard library classes :class:`dict` "
"and :class:`types.MappingProxyType` are mappings."
msgstr ""

#: ../../reference/compound_stmts.rst:1905
msgid ""
"A string literal appearing as the first statement in the function body is "
"transformed into the function's :attr:`~function.__doc__` attribute and "
"therefore the function's :term:`docstring`."
msgstr ""

#: ../../reference/compound_stmts.rst:1909
msgid ""
"A string literal appearing as the first statement in the class body is "
"transformed into the namespace's :attr:`~type.__doc__` item and therefore "
"the class's :term:`docstring`."
msgstr ""

#: ../../reference/compound_stmts.rst:7
msgid "compound"
msgstr ""

#: ../../reference/compound_stmts.rst:7 ../../reference/compound_stmts.rst:86
#: ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:129
#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:169
#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:394
#: ../../reference/compound_stmts.rst:443
#: ../../reference/compound_stmts.rst:477
#: ../../reference/compound_stmts.rst:595
#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1396
#: ../../reference/compound_stmts.rst:1506
#: ../../reference/compound_stmts.rst:1540
#: ../../reference/compound_stmts.rst:1585
msgid "statement"
msgstr ""

#: ../../reference/compound_stmts.rst:21
msgid "clause"
msgstr ""

#: ../../reference/compound_stmts.rst:21
msgid "suite"
msgstr ""

#: ../../reference/compound_stmts.rst:21
msgid "; (semicolon)"
msgstr ""

#: ../../reference/compound_stmts.rst:64
msgid "NEWLINE token"
msgstr ""

#: ../../reference/compound_stmts.rst:64
msgid "DEDENT token"
msgstr ""

#: ../../reference/compound_stmts.rst:64
msgid "dangling"
msgstr ""

#: ../../reference/compound_stmts.rst:64 ../../reference/compound_stmts.rst:86
#: ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:394
msgid "else"
msgstr ""

#: ../../reference/compound_stmts.rst:86 ../../reference/compound_stmts.rst:595
msgid "if"
msgstr ""

#: ../../reference/compound_stmts.rst:86 ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:327
#: ../../reference/compound_stmts.rst:394
#: ../../reference/compound_stmts.rst:412
#: ../../reference/compound_stmts.rst:477
#: ../../reference/compound_stmts.rst:595
#: ../../reference/compound_stmts.rst:1516
msgid "keyword"
msgstr ""

#: ../../reference/compound_stmts.rst:86
msgid "elif"
msgstr ""

#: ../../reference/compound_stmts.rst:86 ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:477
#: ../../reference/compound_stmts.rst:595
#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1332
#: ../../reference/compound_stmts.rst:1396
msgid ": (colon)"
msgstr ""

#: ../../reference/compound_stmts.rst:86 ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:477
#: ../../reference/compound_stmts.rst:595
#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1396
msgid "compound statement"
msgstr ""

#: ../../reference/compound_stmts.rst:111
msgid "while"
msgstr ""

#: ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:144
msgid "loop"
msgstr ""

#: ../../reference/compound_stmts.rst:129
#: ../../reference/compound_stmts.rst:169
#: ../../reference/compound_stmts.rst:394
#: ../../reference/compound_stmts.rst:443
msgid "break"
msgstr ""

#: ../../reference/compound_stmts.rst:129
#: ../../reference/compound_stmts.rst:169
#: ../../reference/compound_stmts.rst:394
#: ../../reference/compound_stmts.rst:443
msgid "continue"
msgstr ""

#: ../../reference/compound_stmts.rst:144
msgid "for"
msgstr ""

#: ../../reference/compound_stmts.rst:144
msgid "in"
msgstr ""

#: ../../reference/compound_stmts.rst:144
msgid "target"
msgstr ""

#: ../../reference/compound_stmts.rst:144
msgid "list"
msgstr ""

#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:298
#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1396
msgid "object"
msgstr ""

#: ../../reference/compound_stmts.rst:144
msgid "sequence"
msgstr ""

#: ../../reference/compound_stmts.rst:190
msgid "built-in function"
msgstr ""

#: ../../reference/compound_stmts.rst:190
msgid "range"
msgstr ""

#: ../../reference/compound_stmts.rst:207
msgid "try"
msgstr ""

#: ../../reference/compound_stmts.rst:207
msgid "except"
msgstr ""

#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:412
msgid "finally"
msgstr ""

#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:265
#: ../../reference/compound_stmts.rst:477
#: ../../reference/compound_stmts.rst:595
msgid "as"
msgstr ""

#: ../../reference/compound_stmts.rst:265
msgid "except clause"
msgstr ""

#: ../../reference/compound_stmts.rst:298
msgid "module"
msgstr "module"

#: ../../reference/compound_stmts.rst:298
msgid "sys"
msgstr "sys"

#: ../../reference/compound_stmts.rst:298
msgid "traceback"
msgstr "traceback"

#: ../../reference/compound_stmts.rst:327
msgid "except_star"
msgstr ""

#: ../../reference/compound_stmts.rst:394
#: ../../reference/compound_stmts.rst:443
msgid "return"
msgstr ""

#: ../../reference/compound_stmts.rst:477
msgid "with"
msgstr ""

#: ../../reference/compound_stmts.rst:477
msgid "with statement"
msgstr ""

#: ../../reference/compound_stmts.rst:477
#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1396
msgid ", (comma)"
msgstr ""

#: ../../reference/compound_stmts.rst:595
msgid "match"
msgstr ""

#: ../../reference/compound_stmts.rst:595
msgid "case"
msgstr ""

#: ../../reference/compound_stmts.rst:595
msgid "pattern matching"
msgstr ""

#: ../../reference/compound_stmts.rst:595
msgid "match statement"
msgstr ""

#: ../../reference/compound_stmts.rst:699
msgid "guard"
msgstr ""

#: ../../reference/compound_stmts.rst:738
msgid "irrefutable case block"
msgstr ""

#: ../../reference/compound_stmts.rst:738
msgid "case block"
msgstr ""

#: ../../reference/compound_stmts.rst:762
msgid "! patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:762
msgid "AS pattern, OR pattern, capture pattern, wildcard pattern"
msgstr ""

#: ../../reference/compound_stmts.rst:1193
#: ../../reference/compound_stmts.rst:1282
msgid "parameter"
msgstr ""

#: ../../reference/compound_stmts.rst:1193
#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1246
#: ../../reference/compound_stmts.rst:1282
#: ../../reference/compound_stmts.rst:1311
msgid "function definition"
msgstr ""

#: ../../reference/compound_stmts.rst:1202
msgid "def"
msgstr ""

#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1332
msgid "function"
msgstr "fonction"

#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1396
msgid "definition"
msgstr ""

#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1396
msgid "name"
msgstr ""

#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1396
msgid "binding"
msgstr ""

#: ../../reference/compound_stmts.rst:1202
msgid "user-defined function"
msgstr ""

#: ../../reference/compound_stmts.rst:1202
#: ../../reference/compound_stmts.rst:1396
msgid "() (parentheses)"
msgstr ""

#: ../../reference/compound_stmts.rst:1202
msgid "parameter list"
msgstr ""

#: ../../reference/compound_stmts.rst:1246
#: ../../reference/compound_stmts.rst:1446
msgid "@ (at)"
msgstr ""

#: ../../reference/compound_stmts.rst:1282
msgid "default"
msgstr ""

#: ../../reference/compound_stmts.rst:1282
msgid "value"
msgstr "valeur"

#: ../../reference/compound_stmts.rst:1282
msgid "argument"
msgstr "argument"

#: ../../reference/compound_stmts.rst:1282
msgid "= (equals)"
msgstr ""

#: ../../reference/compound_stmts.rst:1311
msgid "/ (slash)"
msgstr ""

#: ../../reference/compound_stmts.rst:1311
msgid "* (asterisk)"
msgstr ""

#: ../../reference/compound_stmts.rst:1311
msgid "**"
msgstr ""

#: ../../reference/compound_stmts.rst:1332
msgid "annotations"
msgstr ""

#: ../../reference/compound_stmts.rst:1332
msgid "->"
msgstr ""

#: ../../reference/compound_stmts.rst:1332
msgid "function annotations"
msgstr ""

#: ../../reference/compound_stmts.rst:1355
msgid "lambda"
msgstr ""

#: ../../reference/compound_stmts.rst:1355
msgid "expression"
msgstr ""

#: ../../reference/compound_stmts.rst:1396
msgid "class"
msgstr "classe"

#: ../../reference/compound_stmts.rst:1396
msgid "execution"
msgstr ""

#: ../../reference/compound_stmts.rst:1396
msgid "frame"
msgstr ""

#: ../../reference/compound_stmts.rst:1396
msgid "inheritance"
msgstr ""

#: ../../reference/compound_stmts.rst:1396
msgid "docstring"
msgstr ""

#: ../../reference/compound_stmts.rst:1396
#: ../../reference/compound_stmts.rst:1446
msgid "class definition"
msgstr ""

#: ../../reference/compound_stmts.rst:1396
msgid "expression list"
msgstr ""

#: ../../reference/compound_stmts.rst:1506
msgid "async def"
msgstr ""

#: ../../reference/compound_stmts.rst:1516
msgid "async"
msgstr ""

#: ../../reference/compound_stmts.rst:1516
msgid "await"
msgstr ""

#: ../../reference/compound_stmts.rst:1540
msgid "async for"
msgstr ""

#: ../../reference/compound_stmts.rst:1585
msgid "async with"
msgstr ""

#: ../../reference/compound_stmts.rst:1642
msgid "type parameters"
msgstr ""
